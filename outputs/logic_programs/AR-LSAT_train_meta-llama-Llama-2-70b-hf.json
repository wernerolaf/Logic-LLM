[
  {
    "id": "ar_lsat_199106_2-G_1_1",
    "context": "Exactly six trade representatives negotiate a treaty: Klosnik, Londi, Manley, Neri, Osata, Poirier. There are exactly six chairs evenly spaced around a circular table. The chairs are numbered 1 through 6, with successively numbered chairs next to each other and chair number 1 next to chair number 6. Each chair is occupied by exactly one of the representatives. The following conditions apply: Poirier sits immediately next to Neri. Londi sits immediately next to Manley, Neri, or both. Klosnik does not sit immediately next to Manley. If Osata sits immediately next to Poirier, Osata does not sit immediately next to Manley.",
    "question": "Which one of the following seating arrangements of the six representatives in chairs 1 through 6 would NOT violate the stated conditions?",
    "answer": "B",
    "options": [
      "A) Klosnik, Poirier, Neri, Manley, Osata, Londi",
      "B) Klosnik, Londi, Manley, Poirier, Neri, Osata",
      "C) Klosnik, Londi, Manley, Osata, Poirier, Neri",
      "D) Klosnik, Osata, Poirier, Neri, Londi, Manley",
      "E) Klosnik, Neri, Londi, Osata, Manley, Poirier"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_1_2",
    "context": "Exactly six trade representatives negotiate a treaty: Klosnik, Londi, Manley, Neri, Osata, Poirier. There are exactly six chairs evenly spaced around a circular table. The chairs are numbered 1 through 6, with successively numbered chairs next to each other and chair number 1 next to chair number 6. Each chair is occupied by exactly one of the representatives. The following conditions apply: Poirier sits immediately next to Neri. Londi sits immediately next to Manley, Neri, or both. Klosnik does not sit immediately next to Manley. If Osata sits immediately next to Poirier, Osata does not sit immediately next to Manley.",
    "question": "If Londi sits immediately next to Poirier, which one of the following is a pair of representatives who must sit immediately next to each other?",
    "answer": "A",
    "options": [
      "A) Klosnik and Osata",
      "B) Londi and Neri",
      "C) Londi and Osata",
      "D) Manley and Neri",
      "E) Manley and Poirier"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_1_3",
    "context": "Exactly six trade representatives negotiate a treaty: Klosnik, Londi, Manley, Neri, Osata, Poirier. There are exactly six chairs evenly spaced around a circular table. The chairs are numbered 1 through 6, with successively numbered chairs next to each other and chair number 1 next to chair number 6. Each chair is occupied by exactly one of the representatives. The following conditions apply: Poirier sits immediately next to Neri. Londi sits immediately next to Manley, Neri, or both. Klosnik does not sit immediately next to Manley. If Osata sits immediately next to Poirier, Osata does not sit immediately next to Manley.",
    "question": "If Klosnik sits directly between Londi and Poirier, then Manley must sit directly between",
    "answer": "B",
    "options": [
      "A) Londi and Neri",
      "B) Londi and Osata",
      "C) Neri and Osata",
      "D) Neri and Poirier",
      "E) Osata and Poirier"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_1_4",
    "context": "Exactly six trade representatives negotiate a treaty: Klosnik, Londi, Manley, Neri, Osata, Poirier. There are exactly six chairs evenly spaced around a circular table. The chairs are numbered 1 through 6, with successively numbered chairs next to each other and chair number 1 next to chair number 6. Each chair is occupied by exactly one of the representatives. The following conditions apply: Poirier sits immediately next to Neri. Londi sits immediately next to Manley, Neri, or both. Klosnik does not sit immediately next to Manley. If Osata sits immediately next to Poirier, Osata does not sit immediately next to Manley.",
    "question": "If Neri sits immediately next to Manley, then Klosnik can sit directly between",
    "answer": "E",
    "options": [
      "A) Londi and Manley",
      "B) Londi and Poirier",
      "C) Neri and Osata",
      "D) Neri and Poirier",
      "E) Poirier and Osata"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_1_5",
    "context": "Exactly six trade representatives negotiate a treaty: Klosnik, Londi, Manley, Neri, Osata, Poirier. There are exactly six chairs evenly spaced around a circular table. The chairs are numbered 1 through 6, with successively numbered chairs next to each other and chair number 1 next to chair number 6. Each chair is occupied by exactly one of the representatives. The following conditions apply: Poirier sits immediately next to Neri. Londi sits immediately next to Manley, Neri, or both. Klosnik does not sit immediately next to Manley. If Osata sits immediately next to Poirier, Osata does not sit immediately next to Manley.",
    "question": "If Londi sits immediately next to Manley, then which one of the following is a complete and accurate list of representatives any one of whom could also sit immediately next to Londi?",
    "answer": "E",
    "options": [
      "A) Klosnik",
      "B) Klosnik, Neri",
      "C) Neri, Poirier",
      "D) Klosnik, Osata, Poirier",
      "E) Klosnik, Neri, Osata, Poirier"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_1_6",
    "context": "Exactly six trade representatives negotiate a treaty: Klosnik, Londi, Manley, Neri, Osata, Poirier. There are exactly six chairs evenly spaced around a circular table. The chairs are numbered 1 through 6, with successively numbered chairs next to each other and chair number 1 next to chair number 6. Each chair is occupied by exactly one of the representatives. The following conditions apply: Poirier sits immediately next to Neri. Londi sits immediately next to Manley, Neri, or both. Klosnik does not sit immediately next to Manley. If Osata sits immediately next to Poirier, Osata does not sit immediately next to Manley.",
    "question": "If Londi sits immediately next to Neri, which one of the following statements must be false?",
    "answer": "C",
    "options": [
      "A) Klosnik sits immediately next to Osata.",
      "B) Londi sits immediately next to Manley.",
      "C) Osata sits immediately next to Poirier.",
      "D) Neri sits directly between Londi and Poirier.",
      "E) Osata sits directly between Klosnik and Manley."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_1_7",
    "context": "Exactly six trade representatives negotiate a treaty: Klosnik, Londi, Manley, Neri, Osata, Poirier. There are exactly six chairs evenly spaced around a circular table. The chairs are numbered 1 through 6, with successively numbered chairs next to each other and chair number 1 next to chair number 6. Each chair is occupied by exactly one of the representatives. The following conditions apply: Poirier sits immediately next to Neri. Londi sits immediately next to Manley, Neri, or both. Klosnik does not sit immediately next to Manley. If Osata sits immediately next to Poirier, Osata does not sit immediately next to Manley.",
    "question": "If Klosnik sits immediately next to Osata, then Londi CANNOT sit directly between",
    "answer": "E",
    "options": [
      "A) Klosnik and Manley",
      "B) Klosnik and Neri",
      "C) Manley and Neri",
      "D) Manley and Poirier",
      "E) Neri and Osata"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_2_8",
    "context": "A small software firm has four offices, numbered 1, 2, 3, and 4. Each of its offices has exactly one computer and exactly one printer. Each of these eight machines was bought in either 1987, 1988, or 1989. The eight machines were bought in a manner consistent with the following conditions: The computer in each office was bought either in an earlier year than or in the same year as the printer in that office. The computer in office 2 and the printer in office 1 were bought in the same year. The computer in office 3 and the printer in office 4 were bought in the same year. The computer in office 2 and the computer in office 3 were bought in different years. The computer in office 1 and the printer in office 3 were bought in 1988.",
    "question": "If the computer in office 3 was bought in an earlier year than the printer in office 3 was, then which one of the following statements could be true?",
    "answer": "B",
    "options": [
      "A) The computer in office 2 was bought in 1987.",
      "B) The computer in office 2 was bought in 1988.",
      "C) The computer in office 4 was bought in 1988.",
      "D) The printer in office 4 was bought in 1988.",
      "E) The printer in office 4 was bought in 1989."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_2_9",
    "context": "A small software firm has four offices, numbered 1, 2, 3, and 4. Each of its offices has exactly one computer and exactly one printer. Each of these eight machines was bought in either 1987, 1988, or 1989. The eight machines were bought in a manner consistent with the following conditions: The computer in each office was bought either in an earlier year than or in the same year as the printer in that office. The computer in office 2 and the printer in office 1 were bought in the same year. The computer in office 3 and the printer in office 4 were bought in the same year. The computer in office 2 and the computer in office 3 were bought in different years. The computer in office 1 and the printer in office 3 were bought in 1988.",
    "question": "Which one of the following statements could be true?",
    "answer": "D",
    "options": [
      "A) The printer in office 1 was bought in 1987.",
      "B) The computer in office 2 was bought in 1987.",
      "C) The computer in office 3 was bought in 1989.",
      "D) The printer in office 4 was bought in 1988.",
      "E) The printer in office 4 was bought in 1989."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_2_10",
    "context": "A small software firm has four offices, numbered 1, 2, 3, and 4. Each of its offices has exactly one computer and exactly one printer. Each of these eight machines was bought in either 1987, 1988, or 1989. The eight machines were bought in a manner consistent with the following conditions: The computer in each office was bought either in an earlier year than or in the same year as the printer in that office. The computer in office 2 and the printer in office 1 were bought in the same year. The computer in office 3 and the printer in office 4 were bought in the same year. The computer in office 2 and the computer in office 3 were bought in different years. The computer in office 1 and the printer in office 3 were bought in 1988.",
    "question": "If as few of the eight machines as possible were bought in 1987, then what is the exact number of machines that were bought in 1987?",
    "answer": "A",
    "options": [
      "A) 0",
      "B) 1",
      "C) 2",
      "D) 3",
      "E) 4"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_2_11",
    "context": "A small software firm has four offices, numbered 1, 2, 3, and 4. Each of its offices has exactly one computer and exactly one printer. Each of these eight machines was bought in either 1987, 1988, or 1989. The eight machines were bought in a manner consistent with the following conditions: The computer in each office was bought either in an earlier year than or in the same year as the printer in that office. The computer in office 2 and the printer in office 1 were bought in the same year. The computer in office 3 and the printer in office 4 were bought in the same year. The computer in office 2 and the computer in office 3 were bought in different years. The computer in office 1 and the printer in office 3 were bought in 1988.",
    "question": "If the computer in office 4 was bought in 1988, then which one of the following statements must be true?",
    "answer": "B",
    "options": [
      "A) The printer in office 1 was bought in 1988.",
      "B) The printer in office 1 was bought in 1989.",
      "C) The computer in office 2 was bought in 1988.",
      "D) The computer in office 3 was bought in 1987.",
      "E) The printer in office 4 was bought in 1989."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_2_12",
    "context": "A small software firm has four offices, numbered 1, 2, 3, and 4. Each of its offices has exactly one computer and exactly one printer. Each of these eight machines was bought in either 1987, 1988, or 1989. The eight machines were bought in a manner consistent with the following conditions: The computer in each office was bought either in an earlier year than or in the same year as the printer in that office. The computer in office 2 and the printer in office 1 were bought in the same year. The computer in office 3 and the printer in office 4 were bought in the same year. The computer in office 2 and the computer in office 3 were bought in different years. The computer in office 1 and the printer in office 3 were bought in 1988.",
    "question": "If the computer in office 3 was bought in 1988, then which one of the following statements could be true?",
    "answer": "D",
    "options": [
      "A) The printer in office 1 was bought in 1988.",
      "B) The computer in office 2 was bought in 1987.",
      "C) The printer in office 2 was bought in 1988.",
      "D) The computer in office 4 was bought in 1987.",
      "E) The printer in office 4 was bought in 1989."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_2_13",
    "context": "A small software firm has four offices, numbered 1, 2, 3, and 4. Each of its offices has exactly one computer and exactly one printer. Each of these eight machines was bought in either 1987, 1988, or 1989. The eight machines were bought in a manner consistent with the following conditions: The computer in each office was bought either in an earlier year than or in the same year as the printer in that office. The computer in office 2 and the printer in office 1 were bought in the same year. The computer in office 3 and the printer in office 4 were bought in the same year. The computer in office 2 and the computer in office 3 were bought in different years. The computer in office 1 and the printer in office 3 were bought in 1988.",
    "question": "Suppose that the computer in office 2 and the computer in office 3 had been bought in the same year as each other. If all of the other conditions remained the same, then which one of the following machines could have been bought in 1989?",
    "answer": "C",
    "options": [
      "A) the printer in office 1",
      "B) the computer in office 2",
      "C) the printer in office 2",
      "D) the computer in office 4",
      "E) the printer in office 4"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_3_14",
    "context": "The eight partners of a law firm are Gregg, Hodges, Ivan, James, King, MacNeil, Nader, and Owens. In each of the years 1961 through 1968, exactly one of the partners joined the firm. Hodges joined the firm before Nader. King joined the firm before James. Nader and James joined the firm before Gregg. Nader joined the firm before Owens. James joined the firm before MacNeil. Gregg joined the firm before Ivan.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "C",
    "options": [
      "A) Hodges joined the law firm in 1961.",
      "B) Hodges joined the law firm in 1963.",
      "C) Gregg joined the law firm in 1964.",
      "D) MacNeil joined the law firm in 1964.",
      "E) Owens joined the law firm in 1964."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_3_15",
    "context": "The eight partners of a law firm are Gregg, Hodges, Ivan, James, King, MacNeil, Nader, and Owens. In each of the years 1961 through 1968, exactly one of the partners joined the firm. Hodges joined the firm before Nader. King joined the firm before James. Nader and James joined the firm before Gregg. Nader joined the firm before Owens. James joined the firm before MacNeil. Gregg joined the firm before Ivan.",
    "question": "If James joined the firm in 1962, which one of the following CANNOT be true?",
    "answer": "E",
    "options": [
      "A) Hodges joined the firm in 1963.",
      "B) MacNeil joined the firm in 1963.",
      "C) Hodges joined the firm in 1964.",
      "D) Nader joined the firm in 1964.",
      "E) Owens joined the firm in 1964."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_3_16",
    "context": "The eight partners of a law firm are Gregg, Hodges, Ivan, James, King, MacNeil, Nader, and Owens. In each of the years 1961 through 1968, exactly one of the partners joined the firm. Hodges joined the firm before Nader. King joined the firm before James. Nader and James joined the firm before Gregg. Nader joined the firm before Owens. James joined the firm before MacNeil. Gregg joined the firm before Ivan.",
    "question": "Of the following, which one is the latest year in which James could have joined the firm?",
    "answer": "D",
    "options": [
      "A) 1962",
      "B) 1963",
      "C) 1964",
      "D) 1965",
      "E) 1966"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_3_17",
    "context": "The eight partners of a law firm are Gregg, Hodges, Ivan, James, King, MacNeil, Nader, and Owens. In each of the years 1961 through 1968, exactly one of the partners joined the firm. Hodges joined the firm before Nader. King joined the firm before James. Nader and James joined the firm before Gregg. Nader joined the firm before Owens. James joined the firm before MacNeil. Gregg joined the firm before Ivan.",
    "question": "If Owens joined the firm in 1965 and MacNeil joined it in 1967, one can determine the years in which exactly how many of the other partners joined the firm?",
    "answer": "B",
    "options": [
      "A) 1",
      "B) 2",
      "C) 3",
      "D) 4",
      "E) 5"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_3_18",
    "context": "The eight partners of a law firm are Gregg, Hodges, Ivan, James, King, MacNeil, Nader, and Owens. In each of the years 1961 through 1968, exactly one of the partners joined the firm. Hodges joined the firm before Nader. King joined the firm before James. Nader and James joined the firm before Gregg. Nader joined the firm before Owens. James joined the firm before MacNeil. Gregg joined the firm before Ivan.",
    "question": "Assume that Owens joined the law firm before MacNeil. Of the following, which one is the earliest year in which MacNeil could have joined it?",
    "answer": "D",
    "options": [
      "A) 1963",
      "B) 1964",
      "C) 1965",
      "D) 1966",
      "E) 1967"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_4_19",
    "context": "A railway company has exactly three lines: line 1, line 2, and line 3. The company prints three sets of tickets for January and three sets of tickets for February: one set for each of its lines for each of the two months. The company's tickets are printed in a manner consistent with the following conditions: Each of the six sets of tickets is exactly one of the following colors: green, purple, red, yellow. For each line, the January tickets are a different color than the February tickets. For each month, tickets for different lines are in different colors. Exactly one set of January tickets is red. For line 3, either the January tickets or the February tickets, but not both, are green. The January tickets for line 2 are purple. No February tickets are purple.",
    "question": "If the line 3 tickets for January are red, then which one of the following statements must be true?",
    "answer": "E",
    "options": [
      "A) The line 1 tickets for January are green.",
      "B) The line 1 tickets for January are yellow.",
      "C) The line 1 tickets for February are red.",
      "D) The line 2 tickets for February are yellow.",
      "E) The line 3 tickets for February are green."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_4_20",
    "context": "A railway company has exactly three lines: line 1, line 2, and line 3. The company prints three sets of tickets for January and three sets of tickets for February: one set for each of its lines for each of the two months. The company's tickets are printed in a manner consistent with the following conditions: Each of the six sets of tickets is exactly one of the following colors: green, purple, red, yellow. For each line, the January tickets are a different color than the February tickets. For each month, tickets for different lines are in different colors. Exactly one set of January tickets is red. For line 3, either the January tickets or the February tickets, but not both, are green. The January tickets for line 2 are purple. No February tickets are purple.",
    "question": "If one set of the line 2 tickets is green, then which one of the following statements must be true?",
    "answer": "A",
    "options": [
      "A) The line 1 tickets for January are red.",
      "B) The line 3 tickets for January are red.",
      "C) The line 1 tickets for February are red.",
      "D) The line 3 tickets for February are green.",
      "E) The line 3 tickets for February are yellow."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_4_21",
    "context": "A railway company has exactly three lines: line 1, line 2, and line 3. The company prints three sets of tickets for January and three sets of tickets for February: one set for each of its lines for each of the two months. The company's tickets are printed in a manner consistent with the following conditions: Each of the six sets of tickets is exactly one of the following colors: green, purple, red, yellow. For each line, the January tickets are a different color than the February tickets. For each month, tickets for different lines are in different colors. Exactly one set of January tickets is red. For line 3, either the January tickets or the February tickets, but not both, are green. The January tickets for line 2 are purple. No February tickets are purple.",
    "question": "Which one of the following statements could be true?",
    "answer": "A",
    "options": [
      "A) No January ticket is green.",
      "B) No February ticket is green.",
      "C) Only line 2 tickets are red.",
      "D) One set of January tickets is green and one set of January tickets is yellow.",
      "E) The line 2 tickets for January are the same color as the line 1 tickets for February."
    ],
    "raw_logic_programs": [
      "# Declarations\nlines = EnumSort([line1, line2, line3])\nmonths = EnumSort([January, February])\ncolors = EnumSort([green, purple, red, yellow])\ntickets = Function([lines, months] -> [colors])\n\n# Constraints\nForAll([l:lines], Count([c:colors], tickets(l, January) == c) == 1) ::: Each of the six sets of tickets is exactly one of the following colors\nForAll([l:lines], Count([c:colors], tickets(l, February) == c) == 1) ::: Each of the six sets of tickets is exactly one of the following colors\nForAll([l:lines], tickets(l, January)!= tickets(l, February)) ::: For each line, the January tickets are a different color than the February tickets\nForAll([m:months], Distinct([l:lines], tickets(l, m))) ::: For each month, tickets for different lines are in different colors\ntickets(line1, January) == red ::: Exactly one set of January tickets is red\nForAll([l:lines], Implies(tickets(l, January) == green, tickets(l, February)!= green)) ::: For line 3, either the January tickets or the February tickets, but not both, are green\ntickets(line2, January) == purple ::: The January tickets for line 2 are purple\nForAll([m:months], Not(tickets(line2, m) == purple)) ::: No February tickets are purple\n\n# Options\nQuestion ::: Which one of the following statements could be true?\nis_valid(ForAll([l:lines], Not(tickets(l, January) == green))) ::: A) No January ticket is green.\nis_valid(ForAll([l:lines], Not(tickets(l, February) == green))) ::: B) No February ticket is green.\nis_valid(ForAll([l:lines], tickets(line2, January) == red)) ::: C) Only line 2 tickets are red.\nis_valid(Exists([l:lines], tickets(l, January) == green) && Exists([l:lines], tickets(l, January) == yellow)) ::: D) One set of January tickets is green and one set of January tickets is yellow.\nis_valid(tickets(line2, January) == tickets(line1, February)) ::: E) The line 2 tickets for January are the same color as the line 1 tickets for February.\n------"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_4_22",
    "context": "A railway company has exactly three lines: line 1, line 2, and line 3. The company prints three sets of tickets for January and three sets of tickets for February: one set for each of its lines for each of the two months. The company's tickets are printed in a manner consistent with the following conditions: Each of the six sets of tickets is exactly one of the following colors: green, purple, red, yellow. For each line, the January tickets are a different color than the February tickets. For each month, tickets for different lines are in different colors. Exactly one set of January tickets is red. For line 3, either the January tickets or the February tickets, but not both, are green. The January tickets for line 2 are purple. No February tickets are purple.",
    "question": "Which one of the following statements could be true?",
    "answer": "B",
    "options": [
      "A) Both the line 1 tickets for January and the line 2 tickets for February are green.",
      "B) Both the line 1 tickets for January and the line 2 tickets for February are yellow.",
      "C) Both the line 1 tickets for January and the line 3 tickets for February are yellow.",
      "D) The line 1 tickets for January are green, and the line 3 tickets for February are red.",
      "E) The line 3 tickets for January are yellow, and the line 1 tickets for February are red."
    ],
    "raw_logic_programs": [
      "# Declarations\nlines = EnumSort([line_1, line_2, line_3])\nmonths = EnumSort([January, February])\ncolors = EnumSort([green, purple, red, yellow])\ntickets = Function([lines, months] -> [colors])\n\n# Constraints\nForAll([l:lines], Count([c:colors], tickets(l, January) == c) == 1) ::: Each of the six sets of tickets is exactly one of the following colors\nForAll([l:lines], Count([c:colors], tickets(l, February) == c) == 1) ::: Each of the six sets of tickets is exactly one of the following colors\nForAll([l:lines], tickets(l, January)!= tickets(l, February)) ::: For each line, the January tickets are a different color than the February tickets\nForAll([m:months], Distinct([l:lines], tickets(l, m))) ::: For each month, tickets for different lines are in different colors\ntickets(line_1, January) == red ::: Exactly one set of January tickets is red\nForAll([l:lines], tickets(l, January)!= green) ::: For line 3, either the January tickets or the February tickets, but not both, are green\ntickets(line_2, January) == purple ::: The January tickets for line 2 are purple\nForAll([m:months], Not(tickets(line_2, m) == purple)) ::: No February tickets are purple\n\n# Options\nQuestion ::: Which one of the following statements could be true?\nis_valid(And(tickets(line_1, January) == green, tickets(line_2, February) == green)) ::: A) Both the line 1 tickets for January and the line 2 tickets for February are green.\nis_valid(And(tickets(line_1, January) == yellow, tickets(line_2, February) == yellow)) ::: B) Both the line 1 tickets for January and the line 2 tickets for February are yellow.\nis_valid(And(tickets(line_1, January) == yellow, tickets(line_3, February) == yellow)) ::: C) Both the line 1 tickets for January and the line 3 tickets for February are yellow.\nis_valid(And(tickets(line_1, January) == green, tickets(line_3, February) == red)) ::: D) The line 1 tickets for January are green, and the line 3 tickets for"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_4_23",
    "context": "A railway company has exactly three lines: line 1, line 2, and line 3. The company prints three sets of tickets for January and three sets of tickets for February: one set for each of its lines for each of the two months. The company's tickets are printed in a manner consistent with the following conditions: Each of the six sets of tickets is exactly one of the following colors: green, purple, red, yellow. For each line, the January tickets are a different color than the February tickets. For each month, tickets for different lines are in different colors. Exactly one set of January tickets is red. For line 3, either the January tickets or the February tickets, but not both, are green. The January tickets for line 2 are purple. No February tickets are purple.",
    "question": "If the line 3 tickets for February are yellow, then each of the following statements must be true EXCEPT:",
    "answer": "E",
    "options": [
      "A) One set of January tickets is green.",
      "B) One set of line 1 tickets is red.",
      "C) One set of line 2 tickets is red.",
      "D) The tickets in two of the six sets are red.",
      "E) The tickets in two of the six sets are yellow."
    ],
    "raw_logic_programs": [
      "# Declarations\nlines = EnumSort([line1, line2, line3])\nmonths = EnumSort([January, February])\ncolors = EnumSort([green, purple, red, yellow])\ntickets = Function([lines, months] -> [colors])\n\n# Constraints\nForAll([l:lines], Count([c:colors], tickets(l, January) == c) == 1) ::: Each of the six sets of tickets is exactly one of the following colors\nForAll([l:lines], tickets(l, January)!= tickets(l, February)) ::: For each line, the January tickets are a different color than the February tickets\nForAll([m:months], Distinct([l:lines], tickets(l, m))) ::: For each month, tickets for different lines are in different colors\ntickets(line3, January) == red ::: Exactly one set of January tickets is red\nForAll([l:lines], Or(tickets(l, January) == green, tickets(l, February) == green)) ::: For line 3, either the January tickets or the February tickets, but not both, are green\ntickets(line2, January) == purple ::: The January tickets for line 2 are purple\nForAll([m:months], Not(tickets(line2, m) == purple)) ::: No February tickets are purple\n\n# Options\nQuestion ::: If the line 3 tickets for February are yellow, then each of the following statements must be true EXCEPT:\nis_exception(is_sat(Exists([l:lines], tickets(l, January) == green))) ::: A) One set of January tickets is green.\nis_exception(is_sat(Exists([l:lines], tickets(l, January) == red))) ::: B) One set of line 1 tickets is red.\nis_exception(is_sat(Exists([l:lines], tickets(l, January) == red))) ::: C) One set of line 2 tickets is red.\nis_exception(is_sat(Count([c:colors], c == red) == 2)) ::: D) The tickets in two of the six sets are red.\nis_exception(is_sat(Count([c:colors], c == yellow) == 2)) ::: E) The tickets in two of the six sets are yellow.\n------\nProblem:\nA company has exactly five employees: A, B, C, D, and E. Each employee is assigned to work in exactly one of the following departments: accounting, human resources,"
    ]
  },
  {
    "id": "ar_lsat_199106_2-G_4_24",
    "context": "A railway company has exactly three lines: line 1, line 2, and line 3. The company prints three sets of tickets for January and three sets of tickets for February: one set for each of its lines for each of the two months. The company's tickets are printed in a manner consistent with the following conditions: Each of the six sets of tickets is exactly one of the following colors: green, purple, red, yellow. For each line, the January tickets are a different color than the February tickets. For each month, tickets for different lines are in different colors. Exactly one set of January tickets is red. For line 3, either the January tickets or the February tickets, but not both, are green. The January tickets for line 2 are purple. No February tickets are purple.",
    "question": "Suppose that none of the ticket sets are purple. If all of the other conditions remain the same, then which one of the following statements could be true?",
    "answer": "C",
    "options": [
      "A) None of the January tickets are green.",
      "B) None of the February tickets are green.",
      "C) None of the line 2 tickets are green.",
      "D) No line 1 or line 2 tickets are yellow.",
      "E) No line 2 or line 3 tickets are red."
    ],
    "raw_logic_programs": [
      "# Declarations\nlines = EnumSort([line_1, line_2, line_3])\nmonths = EnumSort([January, February])\ncolors = EnumSort([green, purple, red, yellow])\ntickets = Function([lines, months] -> [colors])\n\n# Constraints\nForAll([l:lines], Count([c:colors], tickets(l, January) == c) == 1) ::: Each of the six sets of tickets is exactly one of the following colors\nForAll([l:lines], Count([c:colors], tickets(l, February) == c) == 1) ::: Each of the six sets of tickets is exactly one of the following colors\nForAll([l:lines], tickets(l, January)!= tickets(l, February)) ::: For each line, the January tickets are a different color than the February tickets\nForAll([m:months], Distinct([l:lines], tickets(l, m))) ::: For each month, tickets for different lines are in different colors\ntickets(line_1, January) == red ::: Exactly one set of January tickets is red\nForAll([l:lines], tickets(l, January)!= tickets(l, February)) ::: For each line, the January tickets are a different color than the February tickets\ntickets(line_3, January) == green ::: For line 3, either the January tickets or the February tickets, but not both, are green\ntickets(line_2, January) == purple ::: The January tickets for line 2 are purple\nNot(Exists([l:lines], tickets(l, February) == purple)) ::: No February tickets are purple\n\n# Options\nQuestion ::: Suppose that none of the ticket sets are purple. If all of the other conditions remain the same, then which one of the following statements could be true?\nis_valid(Exists([l:lines], Not(Exists([c:colors], tickets(l, January) == c)))) ::: A) None of the January tickets are green.\nis_valid(Exists([l:lines], Not(Exists([c:colors], tickets(l, February) == c)))) ::: B) None of the February tickets are green.\nis_valid(Exists([l:lines], Not(Exists([c:colors], tickets(l, January) == c)))) ::: C) None of the line 2 tickets are green.\nis_valid(Exists([l:lines], Not(Exists([c:colors], tickets(l, January) == c)))) ::: D) No line 1 or line"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_1_1",
    "context": "The Mammoth Corporation has just completed hiring nine new workers: Brandt, Calva, Duvall, Eberle, Fu, Garcia, Haga, Irving, and Jessup. Fu and Irving were hired on the same day as each other, and no one else was hired that day. Calva and Garcia were hired on the same day as each other, and no one else was hired that day. On each of the other days of hiring, exactly one worker was hired. Eberle was hired before Brandt. Haga was hired before Duvall. Duvall was hired after Irving but before Eberle. Garcia was hired after both Jessup and Brandt. Brandt was hired before Jessup.",
    "question": "Who were the last two workers to be hired?",
    "answer": "D",
    "options": [
      "A) Eberle and Jessup",
      "B) Brandt and Garcia",
      "C) Brandt and Calva",
      "D) Garcia and Calva",
      "E) Jessup and Brandt"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([Brandt, Calva, Duvall, Eberle, Fu, Garcia, Haga, Irving, Jessup])\nhired = Function([workers] -> [int])\nForAll([w:workers], And(1 <= hired(w), hired(w) <= 9))\n\n# Constraints\nAnd(hired(Fu) == hired(Irving), Count([w:workers], hired(w) == hired(Fu)) == 2) ::: Fu and Irving were hired on the same day as each other, and no one else was hired that day\nAnd(hired(Calva) == hired(Garcia), Count([w:workers], hired(w) == hired(Calva)) == 2) ::: Calva and Garcia were hired on the same day as each other, and no one else was hired that day\nForAll([w:workers], Implies(hired(w)!= hired(Fu), hired(w)!= hired(Calva), hired(w)!= hired(Garcia), hired(w)!= hired(Irving), Count([w:workers], hired(w) == hired(w)) == 1)) ::: On each of the other days of hiring, exactly one worker was hired\nhired(Eberle) > hired(Brandt) ::: Eberle was hired before Brandt\nhired(Haga) > hired(Duvall) ::: Haga was hired before Duvall\nhired(Duvall) > hired(Irving) ::: Duvall was hired after Irving\nhired(Duvall) < hired(Eberle) ::: Duvall was hired before Eberle\nhired(Garcia) > hired(Jessup) ::: Garcia was hired after both Jessup and Brandt\nhired(Brandt) > hired(Jessup) ::: Brandt was hired before Jessup\n\n# Options\nQuestion ::: Who were the last two workers to be hired?\nis_sat(And(hired(Eberle) == 9, hired(Jessup) == 9)) ::: (A)\nis_sat(And(hired(Brandt) == 9, hired(Garcia) == 9)) ::: (B)\nis_sat(And(hired(Brandt) == 9, hired(Calva) == 9)) ::: (C"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_1_2",
    "context": "The Mammoth Corporation has just completed hiring nine new workers: Brandt, Calva, Duvall, Eberle, Fu, Garcia, Haga, Irving, and Jessup. Fu and Irving were hired on the same day as each other, and no one else was hired that day. Calva and Garcia were hired on the same day as each other, and no one else was hired that day. On each of the other days of hiring, exactly one worker was hired. Eberle was hired before Brandt. Haga was hired before Duvall. Duvall was hired after Irving but before Eberle. Garcia was hired after both Jessup and Brandt. Brandt was hired before Jessup.",
    "question": "Who was hired on the fourth day of hiring?",
    "answer": "A",
    "options": [
      "A) Eberle",
      "B) Brandt",
      "C) Irving",
      "D) Garcia",
      "E) Jessup"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([Brandt, Calva, Duvall, Eberle, Fu, Garcia, Haga, Irving, Jessup])\ndays = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9])\nhired = Function([workers, days] -> [bool])\n\n# Constraints\nForAll([w:workers], Count([d:days], hired(w, d)) == 1) ::: On each of the other days of hiring, exactly one worker was hired\nAnd(hired(Fu, 1), hired(Irving, 1)) ::: Fu and Irving were hired on the same day as each other, and no one else was hired that day\nAnd(hired(Calva, 2), hired(Garcia, 2)) ::: Calva and Garcia were hired on the same day as each other, and no one else was hired that day\nForAll([w:workers], Count([d:days], hired(w, d)) == 1) ::: On each of the other days of hiring, exactly one worker was hired\nAnd(hired(Eberle, d), hired(Brandt, d + 1)) ::: Eberle was hired before Brandt\nAnd(hired(Haga, d), hired(Duvall, d + 1)) ::: Haga was hired before Duvall\nAnd(hired(Duvall, d), hired(Irving, d - 1), hired(Eberle, d + 1)) ::: Duvall was hired after Irving but before Eberle\nAnd(hired(Garcia, d), hired(Jessup, d - 1), hired(Brandt, d - 1)) ::: Garcia was hired after both Jessup and Brandt\nAnd(hired(Brandt, d), hired(Jessup, d + 1)) ::: Brandt was hired before Jessup\n\n# Options\nQuestion ::: Who was hired on the fourth day of hiring?\nis_sat(hired(Eberle, 4)) ::: A) Eberle\nis_sat(hired(Brandt, 4)) ::: B) Brandt\nis_sat(hired(Irving, 4)) ::: C) Irving\nis_sat(hired(Garcia, 4)) ::: D) Garcia\nis_sat(hired(Jessup,"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_1_3",
    "context": "The Mammoth Corporation has just completed hiring nine new workers: Brandt, Calva, Duvall, Eberle, Fu, Garcia, Haga, Irving, and Jessup. Fu and Irving were hired on the same day as each other, and no one else was hired that day. Calva and Garcia were hired on the same day as each other, and no one else was hired that day. On each of the other days of hiring, exactly one worker was hired. Eberle was hired before Brandt. Haga was hired before Duvall. Duvall was hired after Irving but before Eberle. Garcia was hired after both Jessup and Brandt. Brandt was hired before Jessup.",
    "question": "Exactly how many workers were hired before Jessup?",
    "answer": "A",
    "options": [
      "A) 6",
      "B) 5",
      "C) 4",
      "D) 3",
      "E) 2"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([Brandt, Calva, Duvall, Eberle, Fu, Garcia, Haga, Irving, Jessup])\nhired = Function([workers] -> [int])\nForAll([w:workers], And(1 <= hired(w), hired(w) <= 9))\n\n# Constraints\nDistinct([w:workers], hired(w)) ::: On each of the other days of hiring, exactly one worker was hired\nAnd(hired(Fu) == hired(Irving), Count([w:workers], hired(w) == hired(Fu)) == 2) ::: Fu and Irving were hired on the same day as each other, and no one else was hired that day\nAnd(hired(Calva) == hired(Garcia), Count([w:workers], hired(w) == hired(Calva)) == 2) ::: Calva and Garcia were hired on the same day as each other, and no one else was hired that day\nhired(Eberle) > hired(Brandt) ::: Eberle was hired before Brandt\nhired(Haga) > hired(Duvall) ::: Haga was hired before Duvall\nhired(Duvall) > hired(Irving) ::: Duvall was hired after Irving\nhired(Duvall) < hired(Eberle) ::: Duvall was hired after Irving but before Eberle\nhired(Garcia) > hired(Jessup) ::: Garcia was hired after both Jessup and Brandt\nhired(Brandt) > hired(Jessup) ::: Brandt was hired before Jessup\n\n# Options\nQuestion ::: Exactly how many workers were hired before Jessup?\nis_sat(Count([w:workers], hired(w) < hired(Jessup)) == 6) ::: A) 6\nis_sat(Count([w:workers], hired(w) < hired(Jessup)) == 5) ::: B) 5\nis_sat(Count([w:workers], hired(w) < hired(Jessup)) == 4) ::: C) 4\nis_sat(Count([w:workers], hired(w) < hired(Jessup)) == 3) ::: D) 3\nis_sat(Count([w:workers], hired(w) < hired(Jess"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_1_4",
    "context": "The Mammoth Corporation has just completed hiring nine new workers: Brandt, Calva, Duvall, Eberle, Fu, Garcia, Haga, Irving, and Jessup. Fu and Irving were hired on the same day as each other, and no one else was hired that day. Calva and Garcia were hired on the same day as each other, and no one else was hired that day. On each of the other days of hiring, exactly one worker was hired. Eberle was hired before Brandt. Haga was hired before Duvall. Duvall was hired after Irving but before Eberle. Garcia was hired after both Jessup and Brandt. Brandt was hired before Jessup.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Duvall was the first worker to be hired.",
      "B) Haga was the first worker to be hired.",
      "C) Fu and Irving were the first two workers to be hired.",
      "D) Haga and Fu were the first two workers to be hired.",
      "E) Either Haga was the first worker to be hired or Fu and Irving were the first two workers to be hired."
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([Brandt, Calva, Duvall, Eberle, Fu, Garcia, Haga, Irving, Jessup])\ndays = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9])\nhired = Function([workers, days] -> [bool])\n\n# Constraints\nForAll([w:workers], Count([d:days], hired(w, d)) == 1) ::: On each of the other days of hiring, exactly one worker was hired\nAnd(hired(Fu, 1), hired(Irving, 1)) ::: Fu and Irving were hired on the same day as each other, and no one else was hired that day\nAnd(hired(Calva, 2), hired(Garcia, 2)) ::: Calva and Garcia were hired on the same day as each other, and no one else was hired that day\nForAll([w:workers], Implies(hired(w, 1), Not(hired(w, d)))) ::: On each of the other days of hiring, exactly one worker was hired\nForAll([w:workers], Implies(hired(w, 2), Not(hired(w, d)))) ::: On each of the other days of hiring, exactly one worker was hired\nForAll([w:workers], Implies(hired(w, 3), Not(hired(w, d)))) ::: On each of the other days of hiring, exactly one worker was hired\nForAll([w:workers], Implies(hired(w, 4), Not(hired(w, d)))) ::: On each of the other days of hiring, exactly one worker was hired\nForAll([w:workers], Implies(hired(w, 5), Not(hired(w, d)))) ::: On each of the other days of hiring, exactly one worker was hired\nForAll([w:workers], Implies(hired(w, 6), Not(hired(w, d)))) ::: On each of the other days of hiring, exactly one worker was hired\nForAll([w:workers], Implies(hired(w, 7), Not(hired(w, d)))) ::: On each of the other days of hiring, exactly one worker was hired\nForAll([w:workers], Implies(hired(w, 8), Not(hired(w, d)))) ::: On each of the other days of hiring, exactly one"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_1_5",
    "context": "The Mammoth Corporation has just completed hiring nine new workers: Brandt, Calva, Duvall, Eberle, Fu, Garcia, Haga, Irving, and Jessup. Fu and Irving were hired on the same day as each other, and no one else was hired that day. Calva and Garcia were hired on the same day as each other, and no one else was hired that day. On each of the other days of hiring, exactly one worker was hired. Eberle was hired before Brandt. Haga was hired before Duvall. Duvall was hired after Irving but before Eberle. Garcia was hired after both Jessup and Brandt. Brandt was hired before Jessup.",
    "question": "If Eberle was hired on a Monday, what is the earliest day on which Garcia could have been hired?",
    "answer": "D",
    "options": [
      "A) Monday",
      "B) Tuesday",
      "C) Wednesday",
      "D) Thursday",
      "E) Friday"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([Brandt, Calva, Duvall, Eberle, Fu, Garcia, Haga, Irving, Jessup])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nhired = Function([workers, days] -> [bool])\n\n# Constraints\nForAll([w:workers], Count([d:days], hired(w, d)) == 1) ::: On each of the other days of hiring, exactly one worker was hired\nAnd(hired(Fu, d), hired(Irving, d)) ::: Fu and Irving were hired on the same day as each other, and no one else was hired that day\nAnd(hired(Calva, d), hired(Garcia, d)) ::: Calva and Garcia were hired on the same day as each other, and no one else was hired that day\nAnd(hired(Eberle, d), hired(Brandt, d)) ::: Eberle was hired before Brandt\nAnd(hired(Haga, d), hired(Duvall, d)) ::: Haga was hired before Duvall\nAnd(hired(Duvall, d), hired(Irving, d)) ::: Duvall was hired after Irving but before Eberle\nAnd(hired(Garcia, d), hired(Jessup, d)) ::: Garcia was hired after both Jessup and Brandt\nAnd(hired(Brandt, d), hired(Jessup, d)) ::: Brandt was hired before Jessup\n\n# Options\nQuestion ::: If Eberle was hired on a Monday, what is the earliest day on which Garcia could have been hired?\nis_exception(is_sat(hired(Garcia, Monday))) ::: A) Monday\nis_exception(is_sat(hired(Garcia, Tuesday))) ::: B) Tuesday\nis_exception(is_sat(hired(Garcia, Wednesday))) ::: C) Wednesday\nis_exception(is_sat(hired(Garcia, Thursday))) ::: D) Thursday\nis_exception(is_sat(hired(Garcia, Friday))) ::: E) Friday\n------\nProblem:\nThe following is a list of the six members of a committee:\n\nAlice\nBob\nCarol\nDave\nEve\nFred\n\nThe committee members are to be divided into two groups, with three"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_2_6",
    "context": "An apartment building has five floors. Each floor has either one or two apartments. There are exactly eight apartments in the building. The residents of the building are J, K, L, M, N, O, P, and Q, who each live in a different apartment. J lives on a floor with two apartments. K lives on the floor directly above P. The second floor is made up of only one apartment. M and N live on the same floor. O does not live on the same floor as Q. L lives in the only apartment on her floor. Q does not live on the first or second floor.",
    "question": "Which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Q lives on the third floor.",
      "B) Q lives on the fifth floor.",
      "C) L does not live on the fourth floor.",
      "D) N does not live on the second floor.",
      "E) J lives on the first floor."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([1, 2, 3, 4, 5])\napartments = EnumSort([J, K, L, M, N, O, P, Q])\nlives = Function([apartments, floors] -> [bool])\n\n# Constraints\nForAll([f:floors], Count([a:apartments], lives(a, f)) == 1 + Count([f:floors], f < f)) ::: Each floor has either one or two apartments\nCount([a:apartments], lives(a, 1)) == 2 ::: There are exactly eight apartments in the building\nlives(J, f) ::: J lives on a floor with two apartments\nlives(K, f) ::: K lives on the floor directly above P\nlives(M, f) ::: M and N live on the same floor\nlives(O, f) ::: O does not live on the same floor as Q\nlives(L, f) ::: L lives in the only apartment on her floor\nlives(Q, f) ::: Q does not live on the first or second floor\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(lives(Q, 3)) ::: (A)\nis_valid(lives(Q, 5)) ::: (B)\nis_valid(Not(lives(L, 4))) ::: (C)\nis_valid(Not(lives(N, 2))) ::: (D)\nis_valid(lives(J, 1)) ::: (E)\n------\nProblem:\nA certain company has five departments—A, B, C, D, and E—each of which has exactly three employees. The employees are F, G, H, I, J, K, L, M, N, O, P, and Q. The following conditions apply: F and G work in the same department. H and I work in the same department. J and K work in the same department. L and M work in the same department. N and O work in the same department. P and Q work in the same department. F and H work in different departments. G and I work in different departments. J and L work in different departments. K and M work in different departments. N and P work in different departments. O and Q work in different departments.\nQuestion:\nWhich one of the following pairs of employees could work in the same department?\nChoices:\n(A) F and J\n(B) G and K\n(C) H and L\n(D) I and M"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_2_7",
    "context": "An apartment building has five floors. Each floor has either one or two apartments. There are exactly eight apartments in the building. The residents of the building are J, K, L, M, N, O, P, and Q, who each live in a different apartment. J lives on a floor with two apartments. K lives on the floor directly above P. The second floor is made up of only one apartment. M and N live on the same floor. O does not live on the same floor as Q. L lives in the only apartment on her floor. Q does not live on the first or second floor.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "E",
    "options": [
      "A) K lives on the second floor.",
      "B) M lives on the first floor.",
      "C) N lives on the fourth floor.",
      "D) O lives on the third floor.",
      "E) P lives on the fifth floor."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([1, 2, 3, 4, 5])\napartments = EnumSort([J, K, L, M, N, O, P, Q])\nresidents = EnumSort([J, K, L, M, N, O, P, Q])\nfloors_of_apartments = Function([apartments] -> [floors])\n\n# Constraints\nForAll([a:apartments], Count([f:floors], floors_of_apartments(a) == f) == 1) ::: Each floor has either one or two apartments\nCount([a:apartments], floors_of_apartments(a) == 1) == 8 ::: There are exactly eight apartments in the building\nfloors_of_apartments(J) == 1 ::: J lives on a floor with two apartments\nfloors_of_apartments(K) == floors_of_apartments(P) + 1 ::: K lives on the floor directly above P\nfloors_of_apartments(M) == floors_of_apartments(N) ::: M and N live on the same floor\nfloors_of_apartments(O)!= floors_of_apartments(Q) ::: O does not live on the same floor as Q\nfloors_of_apartments(L) == 1 ::: L lives in the only apartment on her floor\nfloors_of_apartments(Q)!= 1 ::: Q does not live on the first or second floor\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(floors_of_apartments(K) == 2)) ::: (A)\nis_exception(is_sat(floors_of_apartments(M) == 1)) ::: (B)\nis_exception(is_sat(floors_of_apartments(N) == 4)) ::: (C)\nis_exception(is_sat(floors_of_apartments(O) == 3)) ::: (D)\nis_exception(is_sat(floors_of_apartments(P) == 5)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_2_8",
    "context": "An apartment building has five floors. Each floor has either one or two apartments. There are exactly eight apartments in the building. The residents of the building are J, K, L, M, N, O, P, and Q, who each live in a different apartment. J lives on a floor with two apartments. K lives on the floor directly above P. The second floor is made up of only one apartment. M and N live on the same floor. O does not live on the same floor as Q. L lives in the only apartment on her floor. Q does not live on the first or second floor.",
    "question": "If J lives on the fourth floor and K lives on the fifth floor, which one of the following can be true?",
    "answer": "A",
    "options": [
      "A) O lives on the first floor.",
      "B) Q lives on the fourth floor.",
      "C) N lives on the fifth floor.",
      "D) L lives on the fourth floor.",
      "E) P lives on the third floor."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([first, second, third, fourth, fifth])\napartments = EnumSort([J, K, L, M, N, O, P, Q])\nForAll([f:floors], Count([a:apartments], a == f) >= 1) ::: Each floor has either one or two apartments\nForAll([a:apartments], Count([f:floors], a == f) == 1) ::: There are exactly eight apartments in the building\nForAll([f:floors], Count([a:apartments], a == f) <= 2) ::: Each floor has either one or two apartments\n\n# Constraints\nAnd(apartments(J) == floors(fourth), apartments(K) == floors(fifth)) ::: J lives on the fourth floor and K lives on the fifth floor\napartments(J)!= apartments(P) ::: J lives on a floor with two apartments\napartments(K) > apartments(P) ::: K lives on the floor directly above P\napartments(second) == apartments(second) ::: The second floor is made up of only one apartment\napartments(M) == apartments(N) ::: M and N live on the same floor\napartments(O)!= apartments(Q) ::: O does not live on the same floor as Q\napartments(L) == apartments(L) ::: L lives in the only apartment on her floor\napartments(Q)!= apartments(first) ::: Q does not live on the first or second floor\n\n# Options\nQuestion ::: If J lives on the fourth floor and K lives on the fifth floor, which one of the following can be true?\nis_valid(Exists([f:floors], apartments(O) == f)) ::: (A)\nis_valid(Exists([f:floors], apartments(Q) == f)) ::: (B)\nis_valid(Exists([f:floors], apartments(N) == f)) ::: (C)\nis_valid(Exists([f:floors], apartments(L) == f)) ::: (D)\nis_valid(Exists([f:floors], apartments(P) == f)) ::: (E)\n------\nProblem:\nA certain company has five departments—A, B,"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_2_9",
    "context": "An apartment building has five floors. Each floor has either one or two apartments. There are exactly eight apartments in the building. The residents of the building are J, K, L, M, N, O, P, and Q, who each live in a different apartment. J lives on a floor with two apartments. K lives on the floor directly above P. The second floor is made up of only one apartment. M and N live on the same floor. O does not live on the same floor as Q. L lives in the only apartment on her floor. Q does not live on the first or second floor.",
    "question": "If O lives on the second floor, which one of the following CANNOT be true?",
    "answer": "E",
    "options": [
      "A) K lives on the fourth floor.",
      "B) K lives on the fifth floor.",
      "C) L lives on the first floor.",
      "D) L lives on the third floor.",
      "E) L lives on the fourth floor."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([first, second, third, fourth, fifth])\napartments = EnumSort([J, K, L, M, N, O, P, Q])\nlives = Function([apartments, floors] -> [bool])\n\n# Constraints\nForAll([f:floors], Count([a:apartments], lives(a, f)) == 1 + Count([f2:floors], f2 < f)) ::: Each floor has either one or two apartments\nForAll([a:apartments], lives(a, first) || lives(a, second) || lives(a, third) || lives(a, fourth) || lives(a, fifth)) ::: There are exactly eight apartments in the building\nForAll([a:apartments], lives(a, first) || lives(a, second) || lives(a, third) || lives(a, fourth) || lives(a, fifth)) ::: The residents of the building are J, K, L, M, N, O, P, and Q, who each live in a different apartment\nlives(J, f) && lives(J, f2) ::: J lives on a floor with two apartments\nlives(K, f) && lives(P, f2) && f > f2 ::: K lives on the floor directly above P\nlives(M, f) && lives(N, f) ::: M and N live on the same floor\nNot(lives(O, f) && lives(Q, f)) ::: O does not live on the same floor as Q\nlives(L, f) && lives(L, f2) ::: L lives in the only apartment on her floor\nNot(lives(Q, first) || lives(Q, second)) ::: Q does not live on the first or second floor\n\n# Options\nQuestion ::: If O lives on the second floor, which one of the following CANNOT be true?\nis_exception(is_sat(lives(K, fourth))) ::: (A)\nis_exception(is_sat(lives(K, fifth))) ::: (B)\nis_exception(is_sat(lives(L, first))) ::: (C)\nis_exception(is_sat(lives(L, third))) ::: (D)\nis_exception(is_sat(lives(L, fourth))) :::"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_2_10",
    "context": "An apartment building has five floors. Each floor has either one or two apartments. There are exactly eight apartments in the building. The residents of the building are J, K, L, M, N, O, P, and Q, who each live in a different apartment. J lives on a floor with two apartments. K lives on the floor directly above P. The second floor is made up of only one apartment. M and N live on the same floor. O does not live on the same floor as Q. L lives in the only apartment on her floor. Q does not live on the first or second floor.",
    "question": "If M lives on the fourth floor, which one of the following must be false?",
    "answer": "C",
    "options": [
      "A) O lives on the fifth floor.",
      "B) J lives on the first floor.",
      "C) L lives on the second floor.",
      "D) Q lives on the third floor.",
      "E) P lives on the first floor."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([1, 2, 3, 4, 5])\napartments = EnumSort([J, K, L, M, N, O, P, Q])\nfloors_with_apartments = Function([floors] -> [int])\nForAll([f:floors], And(1 <= floors_with_apartments(f), floors_with_apartments(f) <= 2))\n\n# Constraints\nCount([f:floors], floors_with_apartments(f)) == 8 ::: There are exactly eight apartments in the building\nAnd(floors_with_apartments(J) == 2, floors_with_apartments(P) == 1) ::: J lives on a floor with two apartments. K lives on the floor directly above P.\nfloors_with_apartments(2) == 1 ::: The second floor is made up of only one apartment\nAnd(floors_with_apartments(M) == floors_with_apartments(N), floors_with_apartments(O)!= floors_with_apartments(Q)) ::: M and N live on the same floor. O does not live on the same floor as Q\nfloors_with_apartments(L) == 1 ::: L lives in the only apartment on her floor\nNot(floors_with_apartments(Q) == 1, floors_with_apartments(Q) == 2) ::: Q does not live on the first or second floor\n\n# Options\nQuestion ::: If M lives on the fourth floor, which one of the following must be false?\nis_exception(is_sat(floors_with_apartments(O) == 5)) ::: (A)\nis_exception(is_sat(floors_with_apartments(J) == 1)) ::: (B)\nis_exception(is_sat(floors_with_apartments(L) == 2)) ::: (C)\nis_exception(is_sat(floors_with_apartments(Q) == 3)) ::: (D)\nis_exception(is_sat(floors_with_apartments(P) == 1)) :::"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_2_11",
    "context": "An apartment building has five floors. Each floor has either one or two apartments. There are exactly eight apartments in the building. The residents of the building are J, K, L, M, N, O, P, and Q, who each live in a different apartment. J lives on a floor with two apartments. K lives on the floor directly above P. The second floor is made up of only one apartment. M and N live on the same floor. O does not live on the same floor as Q. L lives in the only apartment on her floor. Q does not live on the first or second floor.",
    "question": "Which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) If J lives on the fourth floor, then Q does not live on the fifth floor.",
      "B) If O lives on the second floor, then L does not live on the fourth floor.",
      "C) If N lives on the fourth floor, then K does not live on the second floor.",
      "D) If K lives on the third floor, then O does not live on the fifth floor.",
      "E) If P lives on the fourth floor, then M does not live on the third floor."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([1, 2, 3, 4, 5])\napartments = EnumSort([J, K, L, M, N, O, P, Q])\napartment_on_floor = Function([floors, apartments] -> [bool])\n\n# Constraints\nForAll([f:floors], Count([a:apartments], apartment_on_floor(f, a)) == 1 + Count([a:apartments], apartment_on_floor(f, a))) ::: Each floor has either one or two apartments\nCount([a:apartments], apartment_on_floor(f, a)) == 8 ::: There are exactly eight apartments in the building\napartment_on_floor(J, f) ::: J lives on a floor with two apartments\napartment_on_floor(K, f) ::: K lives on the floor directly above P\napartment_on_floor(P, f) ::: P lives on the floor directly above K\napartment_on_floor(M, f) ::: M and N live on the same floor\napartment_on_floor(N, f) ::: M and N live on the same floor\napartment_on_floor(O, f) ::: O does not live on the same floor as Q\napartment_on_floor(L, f) ::: L lives in the only apartment on her floor\napartment_on_floor(Q, f) ::: Q does not live on the first or second floor\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([f:floors], apartment_on_floor(J, f) && Not(apartment_on_floor(Q, f)))) ::: (A)\nis_valid(Exists([f:floors], apartment_on_floor(O, f) && Not(apartment_on_floor(L, f)))) ::: (B)\nis_valid(Exists([f:floors], apartment_on_floor(N, f) && Not(apartment_on_floor(K, f)))) ::: (C)\nis_valid(Exists([f:floors], apartment_on_floor(K, f) && Not(apartment_on_floor(O, f)))) ::: (D)\nis_valid(Exists"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_2_12",
    "context": "An apartment building has five floors. Each floor has either one or two apartments. There are exactly eight apartments in the building. The residents of the building are J, K, L, M, N, O, P, and Q, who each live in a different apartment. J lives on a floor with two apartments. K lives on the floor directly above P. The second floor is made up of only one apartment. M and N live on the same floor. O does not live on the same floor as Q. L lives in the only apartment on her floor. Q does not live on the first or second floor.",
    "question": "If O lives on the fourth floor and P lives on the second floor, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) L lives on the first floor.",
      "B) M lives on the third floor.",
      "C) Q lives on the third floor.",
      "D) N lives on the fifth floor.",
      "E) Q lives on the fifth floor."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([first, second, third, fourth, fifth])\napartments = EnumSort([J, K, L, M, N, O, P, Q])\nForAll([f:floors], Count([a:apartments], a == f) == 1 + Count([a:apartments], a == f))\n\n# Constraints\nCount([f:floors], Count([a:apartments], a == f) == 1) == 3 ::: Each floor has either one or two apartments\nCount([a:apartments], a == J) == 1 ::: There are exactly eight apartments in the building\nCount([a:apartments], a == J) == 1 ::: The residents of the building are J, K, L, M, N, O, P, and Q, who each live in a different apartment\nCount([f:floors], Count([a:apartments], a == f) == 2) == 2 ::: J lives on a floor with two apartments\nCount([a:apartments], a == K) == 1 ::: K lives on the floor directly above P\nCount([a:apartments], a == second) == 1 ::: The second floor is made up of only one apartment\nCount([a:apartments], a == M) == 1 ::: M and N live on the same floor\nCount([a:apartments], a == O) == 1 ::: O does not live on the same floor as Q\nCount([a:apartments], a == L) == 1 ::: L lives in the only apartment on her floor\nCount([a:apartments], a == Q) == 1 ::: Q does not live on the first or second floor\n\n# Options\nQuestion ::: If O lives on the fourth floor and P lives on the second floor, which one of the following must be true?\nis_valid(Exists([f:floors], f == L)) ::: (A)\nis_valid(Exists([f:floors], f == M)) ::: (B)\nis_valid(Exists([f:floors], f == Q)) ::: (C)\nis_valid(Exists([f:floors], f == N)) ::: (D)\nis_valid(Exists([f:floors], f == Q)) ::: (E)\n------\nProblem:"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_3_13",
    "context": "Hannah spends 14 days, exclusive of travel time, in a total of six cities. Each city she visits is in one of three countries—X, Y, or Z. Each of the three countries has many cities. Hannah visits at least one city in each of the three countries. She spends at least two days in each city she visits. She spends only whole days in any city.",
    "question": "If Hannah spends exactly eight days in the cities of country X, then which one of the following CANNOT be true?",
    "answer": "A",
    "options": [
      "A) She visits exactly two cities in country X.",
      "B) She visits exactly two cities in country Y.",
      "C) She visits exactly two cities in country Z.",
      "D) She visits more cities in country Y than in country Z.",
      "E) She visits more cities in country Z than in country Y."
    ],
    "raw_logic_programs": [
      "# Declarations\ncountries = EnumSort([X, Y, Z])\ncities = EnumSort([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z])\nvisits = Function([countries, cities] -> [bool])\ndays = Function([countries, cities] -> [int])\n\n# Constraints\nForAll([c:countries], Count([c:cities], visits(c, c)) >= 1) ::: Hannah visits at least one city in each of the three countries\nForAll([c:countries, c:cities], And(visits(c, c), days(c, c) >= 2)) ::: She spends at least two days in each city she visits\nForAll([c:countries, c:cities], And(visits(c, c), 1 <= days(c, c), days(c, c) <= 14)) ::: She spends only whole days in any city\nCount([c:countries, c:cities], visits(c, c)) == 6 ::: Hannah visits a total of six cities\nCount([c:countries, c:cities], visits(X, c)) == 3 ::: Hannah spends exactly eight days in the cities of country X\n\n# Options\nQuestion ::: If Hannah spends exactly eight days in the cities of country X, then which one of the following CANNOT be true?\nis_exception(is_sat(ForAll([c:countries, c:cities], visits(X, c) == visits(c, c)))) ::: (A)\nis_exception(is_sat(ForAll([c:countries, c:cities], visits(Y, c) == visits(c, c)))) ::: (B)\nis_exception(is_sat(ForAll([c:countries, c:cities], visits(Z, c) == visits(c, c)))) ::: (C)\nis_exception(is_sat(Count([c:countries, c:cities], visits(Y, c)) > Count([c:countries, c:cities], visits(Z, c)))) ::: (D)\nis_exception(is_sat(Count"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_3_14",
    "context": "Hannah spends 14 days, exclusive of travel time, in a total of six cities. Each city she visits is in one of three countries—X, Y, or Z. Each of the three countries has many cities. Hannah visits at least one city in each of the three countries. She spends at least two days in each city she visits. She spends only whole days in any city.",
    "question": "If Hannah visits an equal number of cities in each of the countries, what is the greatest total number of days she can spend visiting cities in country X?",
    "answer": "D",
    "options": [
      "A) 3",
      "B) 4",
      "C) 5",
      "D) 6",
      "E) 7"
    ],
    "raw_logic_programs": [
      "# Declarations\ncountries = EnumSort([X, Y, Z])\ncities = EnumSort([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z])\nvisits = Function([countries, cities] -> [bool])\ndays = Function([countries, cities] -> [int])\n\n# Constraints\nForAll([c:countries], Count([c:cities], visits(c, c)) >= 1) ::: Hannah visits at least one city in each of the three countries\nForAll([c:countries], Count([c:cities], visits(c, c)) == Count([c:countries], Count([c:cities], visits(c, c)))) ::: Hannah visits an equal number of cities in each of the countries\nForAll([c:countries, c:cities], visits(c, c) ==> days(c, c) >= 2) ::: She spends at least two days in each city she visits\nForAll([c:countries, c:cities], visits(c, c) ==> And(1 <= days(c, c), days(c, c) <= 14)) ::: She spends only whole days in any city\n\n# Options\nQuestion ::: If Hannah visits an equal number of cities in each of the countries, what is the greatest total number of days she can spend visiting cities in country X?\nis_valid(Exists([c:countries, c:cities], visits(c, c) && days(c, c) == 3))) ::: A) 3\nis_valid(Exists([c:countries, c:cities], visits(c, c) && days(c, c) == 4))) ::: B) 4\nis_valid(Exists([c:countries, c:cities], visits(c, c) && days(c, c) == 5))) ::: C) 5\nis_valid(Exists([c:countries, c:cities], visits(c, c) && days(c, c) == 6))) ::: D) 6\nis_valid(Exists([c:countries, c:cities], visits(c, c) && days(c, c) == 7)))"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_3_15",
    "context": "Hannah spends 14 days, exclusive of travel time, in a total of six cities. Each city she visits is in one of three countries—X, Y, or Z. Each of the three countries has many cities. Hannah visits at least one city in each of the three countries. She spends at least two days in each city she visits. She spends only whole days in any city.",
    "question": "If Hannah spends three days in the cities of country Y and seven days in the cities of country Z, then which one of the following must be false?",
    "answer": "D",
    "options": [
      "A) She visits more cities in country X than in country Y.",
      "B) She visits exactly two cities in country X.",
      "C) She visits more cities in country Z than in country X.",
      "D) She visits exactly two cities in country Z.",
      "E) She visits exactly three cities in country Z."
    ],
    "raw_logic_programs": [
      "# Declarations\ncountries = EnumSort([X, Y, Z])\ncities = Function([countries] -> [EnumSort])\ndays = Function([countries, cities] -> [int])\n\n# Constraints\nForAll([c:countries], Count([c:countries], days(c, c)) >= 1) ::: Hannah visits at least one city in each of the three countries\nForAll([c:countries], Count([c:countries], days(c, c)) <= 1) ::: Hannah visits at least one city in each of the three countries\nForAll([c:countries], Count([c:cities], days(c, c)) >= 2) ::: She spends at least two days in each city she visits\nForAll([c:countries], Count([c:cities], days(c, c)) <= 14) ::: She spends 14 days, exclusive of travel time, in a total of six cities\nForAll([c:countries], Count([c:cities], days(c, c)) == 0) ::: She spends only whole days in any city\n\n# Options\nQuestion ::: If Hannah spends three days in the cities of country Y and seven days in the cities of country Z, then which one of the following must be false?\nis_exception(is_sat(ForAll([c:countries], days(X, c) > days(Y, c)))) ::: (A)\nis_exception(is_sat(Count([c:cities], days(X, c)) == 2)) ::: (B)\nis_exception(is_sat(ForAll([c:countries], days(Z, c) > days(X, c)))) ::: (C)\nis_exception(is_sat(Count([c:cities], days(Z, c)) == 2)) ::: (D)\nis_exception(is_sat(Count([c:cities], days(Z, c)) == 3)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 10"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_3_16",
    "context": "Hannah spends 14 days, exclusive of travel time, in a total of six cities. Each city she visits is in one of three countries—X, Y, or Z. Each of the three countries has many cities. Hannah visits at least one city in each of the three countries. She spends at least two days in each city she visits. She spends only whole days in any city.",
    "question": "If the city of Nomo is in country X, and if Hannah spends as many days as possible in Nomo and as few days as possible in each of the other cities that she visits, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Hannah cannot visit any other cities in country X.",
      "B) Hannah can visit four cities in country Y.",
      "C) Hannah can spend six days in Nomo.",
      "D) Hannah cannot spend more than four days in country Z.",
      "E) Hannah can visit, at most, a total of four cities in countries Y and Z."
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([Nomo])\ncountries = EnumSort([X, Y, Z])\nvisits = Function([cities, countries] -> [bool])\ndays = Function([cities] -> [int])\n\n# Constraints\nForAll([c:cities], Count([c:cities], visits(c, X)) + Count([c:cities], visits(c, Y)) + Count([c:cities], visits(c, Z)) == 1) ::: Each of the three countries has many cities\nForAll([c:cities], Count([c:cities], visits(c, X)) + Count([c:cities], visits(c, Y)) + Count([c:cities], visits(c, Z)) == 1) ::: Each of the three countries has many cities\nForAll([c:cities], Count([c:cities], visits(c, X)) + Count([c:cities], visits(c, Y)) + Count([c:cities], visits(c, Z)) == 1) ::: Each of the three countries has many cities\nForAll([c:cities], Count([c:countries], visits(c, c)) >= 1) ::: Hannah visits at least one city in each of the three countries\nForAll([c:cities], And(1 <= days(c), days(c) <= 14)) ::: She spends at least two days in each city she visits\nForAll([c:cities], And(1 <= days(c), days(c) <= 14)) ::: She spends at least two days in each city she visits\nForAll([c:cities], And(1 <= days(c), days(c) <= 14)) ::: She spends at least two days in each city she visits\nForAll([c:cities], And(1 <= days(c), days(c) <= 14)) ::: She spends at least two days in each city she visits\nForAll([c:cities], And(1 <= days(c), days(c) <= 14)) ::: She spends at least two days in each city she visits\nForAll([c:cities], And(1 <= days(c), days(c) <= 14)) ::: She spends at least two days in each city she visits\nForAll([c:c"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_3_17",
    "context": "Hannah spends 14 days, exclusive of travel time, in a total of six cities. Each city she visits is in one of three countries—X, Y, or Z. Each of the three countries has many cities. Hannah visits at least one city in each of the three countries. She spends at least two days in each city she visits. She spends only whole days in any city.",
    "question": "If Hannah visits a combined total of four cities in countries X and Y, what is the greatest total number of days she can spend visiting cities in country Y?",
    "answer": "C",
    "options": [
      "A) 6",
      "B) 7",
      "C) 8",
      "D) 9",
      "E) 10"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_4_18",
    "context": "Exactly six dogs—P, Q, R, S, T, and U—are entered in a dog show. The judge of the show awards exactly four ribbons, one for each of first, second, third, and fourth places, to four of the dogs. The information that follows is all that is available about the six dogs: Each dog is either a greyhound or a labrador, but not both. Two of the six dogs are female and four are male. The judge awards ribbons to both female dogs, exactly one of which is a labrador. Exactly one labrador wins a ribbon. Dogs P and R place ahead of dog S, and dog S places ahead of dogs Q and T. Dogs P and R are greyhounds. Dogs S and U are labradors.",
    "question": "Which one of the following is a complete and accurate list of the dogs that can be greyhounds?",
    "answer": "E",
    "options": [
      "A) P, Q",
      "B) P, R",
      "C) P, Q, R",
      "D) P, R, T",
      "E) P, Q, R, T"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_4_19",
    "context": "Exactly six dogs—P, Q, R, S, T, and U—are entered in a dog show. The judge of the show awards exactly four ribbons, one for each of first, second, third, and fourth places, to four of the dogs. The information that follows is all that is available about the six dogs: Each dog is either a greyhound or a labrador, but not both. Two of the six dogs are female and four are male. The judge awards ribbons to both female dogs, exactly one of which is a labrador. Exactly one labrador wins a ribbon. Dogs P and R place ahead of dog S, and dog S places ahead of dogs Q and T. Dogs P and R are greyhounds. Dogs S and U are labradors.",
    "question": "Which one of the following statements CANNOT be true?",
    "answer": "B",
    "options": [
      "A) A female greyhound wins the second place ribbon.",
      "B) A female labrador wins the second place ribbon.",
      "C) A female labrador wins the third place ribbon.",
      "D) A male greyhound wins the fourth place ribbon.",
      "E) A female greyhound wins the fourth place ribbon."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_4_20",
    "context": "Exactly six dogs—P, Q, R, S, T, and U—are entered in a dog show. The judge of the show awards exactly four ribbons, one for each of first, second, third, and fourth places, to four of the dogs. The information that follows is all that is available about the six dogs: Each dog is either a greyhound or a labrador, but not both. Two of the six dogs are female and four are male. The judge awards ribbons to both female dogs, exactly one of which is a labrador. Exactly one labrador wins a ribbon. Dogs P and R place ahead of dog S, and dog S places ahead of dogs Q and T. Dogs P and R are greyhounds. Dogs S and U are labradors.",
    "question": "Which one of the following dogs must be male?",
    "answer": "E",
    "options": [
      "A) dog P",
      "B) dog R",
      "C) dog S",
      "D) dog T",
      "E) dog U"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_4_21",
    "context": "Exactly six dogs—P, Q, R, S, T, and U—are entered in a dog show. The judge of the show awards exactly four ribbons, one for each of first, second, third, and fourth places, to four of the dogs. The information that follows is all that is available about the six dogs: Each dog is either a greyhound or a labrador, but not both. Two of the six dogs are female and four are male. The judge awards ribbons to both female dogs, exactly one of which is a labrador. Exactly one labrador wins a ribbon. Dogs P and R place ahead of dog S, and dog S places ahead of dogs Q and T. Dogs P and R are greyhounds. Dogs S and U are labradors.",
    "question": "Which one of the following statements can be false?",
    "answer": "A",
    "options": [
      "A) Dog P places ahead of dog R.",
      "B) Dog P places ahead of dog T.",
      "C) Dog R places ahead of dog U.",
      "D) Dog R places ahead of dog T.",
      "E) Dog S places ahead of dog U."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_4_22",
    "context": "Exactly six dogs—P, Q, R, S, T, and U—are entered in a dog show. The judge of the show awards exactly four ribbons, one for each of first, second, third, and fourth places, to four of the dogs. The information that follows is all that is available about the six dogs: Each dog is either a greyhound or a labrador, but not both. Two of the six dogs are female and four are male. The judge awards ribbons to both female dogs, exactly one of which is a labrador. Exactly one labrador wins a ribbon. Dogs P and R place ahead of dog S, and dog S places ahead of dogs Q and T. Dogs P and R are greyhounds. Dogs S and U are labradors.",
    "question": "If dog Q is female, which one of the following statements can be false?",
    "answer": "E",
    "options": [
      "A) Dog P is male.",
      "B) Dog R is male.",
      "C) Dog Q wins the fourth place ribbon.",
      "D) Dog Q is a greyhound.",
      "E) Dog T is a greyhound."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_4_23",
    "context": "Exactly six dogs—P, Q, R, S, T, and U—are entered in a dog show. The judge of the show awards exactly four ribbons, one for each of first, second, third, and fourth places, to four of the dogs. The information that follows is all that is available about the six dogs: Each dog is either a greyhound or a labrador, but not both. Two of the six dogs are female and four are male. The judge awards ribbons to both female dogs, exactly one of which is a labrador. Exactly one labrador wins a ribbon. Dogs P and R place ahead of dog S, and dog S places ahead of dogs Q and T. Dogs P and R are greyhounds. Dogs S and U are labradors.",
    "question": "If dog T wins the fourth place ribbon, then which one of the following statements must be true?",
    "answer": "B",
    "options": [
      "A) Dog P is male.",
      "B) Dog Q is male.",
      "C) Dog T is male.",
      "D) Dog Q is a labrador.",
      "E) Dog T is a labrador."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199110_3-G_4_24",
    "context": "Exactly six dogs—P, Q, R, S, T, and U—are entered in a dog show. The judge of the show awards exactly four ribbons, one for each of first, second, third, and fourth places, to four of the dogs. The information that follows is all that is available about the six dogs: Each dog is either a greyhound or a labrador, but not both. Two of the six dogs are female and four are male. The judge awards ribbons to both female dogs, exactly one of which is a labrador. Exactly one labrador wins a ribbon. Dogs P and R place ahead of dog S, and dog S places ahead of dogs Q and T. Dogs P and R are greyhounds. Dogs S and U are labradors.",
    "question": "Which one of the following statements could be true?",
    "answer": "D",
    "options": [
      "A) Dog P does not win a ribbon.",
      "B) Dog R does not win a ribbon.",
      "C) Dog S does not win a ribbon.",
      "D) Dog T wins a ribbon.",
      "E) Dog U wins a ribbon."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_1_1",
    "context": "Three couples—John and Kate, Lewis and Marie, and Nat and Olive have dinner in a restaurant together. Kate, Marie, and Olive are women; the other three are men. Each person orders one and only one of the following kinds of entrees: pork chops, roast beef, swordfish, tilefish, veal cutlet. The six people order in a manner consistent with the following conditions: The two people in each couple do not order the same kind of entree as each other. None of the men orders the same kind of entree as any of the other men. Marie orders swordfish. Neither John nor Nat orders a fish entree. Olive orders roast beef.",
    "question": "Which one of the following is a complete and accurate list of the entrees any one of which Lewis could order?",
    "answer": "D",
    "options": [
      "A) pork chops, roast beef",
      "B) pork chops, veal cutlet",
      "C) pork chops, swordfish, veal cutlet",
      "D) pork chops, roast beef, tilefish, veal cutlet",
      "E) pork chops, roast beef, swordfish, tilefish, veal cutlet"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_1_2",
    "context": "Three couples—John and Kate, Lewis and Marie, and Nat and Olive have dinner in a restaurant together. Kate, Marie, and Olive are women; the other three are men. Each person orders one and only one of the following kinds of entrees: pork chops, roast beef, swordfish, tilefish, veal cutlet. The six people order in a manner consistent with the following conditions: The two people in each couple do not order the same kind of entree as each other. None of the men orders the same kind of entree as any of the other men. Marie orders swordfish. Neither John nor Nat orders a fish entree. Olive orders roast beef.",
    "question": "Which one of the following statements could be true?",
    "answer": "B",
    "options": [
      "A) John orders the same kind of entree as Marie does.",
      "B) Kate orders the same kind of entree as Nat does.",
      "C) Lewis orders the same kind of entree as Nat does.",
      "D) Marie orders the same kind of entree as Olive does.",
      "E) Nat orders the same kind of entree as Olive does."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_1_3",
    "context": "Three couples—John and Kate, Lewis and Marie, and Nat and Olive have dinner in a restaurant together. Kate, Marie, and Olive are women; the other three are men. Each person orders one and only one of the following kinds of entrees: pork chops, roast beef, swordfish, tilefish, veal cutlet. The six people order in a manner consistent with the following conditions: The two people in each couple do not order the same kind of entree as each other. None of the men orders the same kind of entree as any of the other men. Marie orders swordfish. Neither John nor Nat orders a fish entree. Olive orders roast beef.",
    "question": "Which one of the following statements must be true?",
    "answer": "A",
    "options": [
      "A) One of the men orders pork chops or veal cutlet.",
      "B) One of the men orders swordfish or veal cutlet.",
      "C) Two of the women order tilefish.",
      "D) None of the men orders a fish entree.",
      "E) Exactly one of the women orders a fish entree."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([John, Kate, Lewis, Marie, Nat, Olive])\nmeals = EnumSort([pork_chops, roast_beef, swordfish, tilefish, veal_cutlet])\neats = Function([people, meals] -> [bool])\n\n# Constraints\nForAll([p:people], Count([m:meals], eats(p, m)) == 1) ::: Each person orders one and only one of the following kinds of entrees\nForAll([p:people], Implies(eats(p, m), Not(eats(p, m)))) ::: The two people in each couple do not order the same kind of entree as each other\nForAll([p:people], Implies(eats(p, m), Not(eats(p, m)))) ::: None of the men orders the same kind of entree as any of the other men\neats(Marie, swordfish) ::: Marie orders swordfish\nForAll([p:people], Implies(eats(p, m), Not(eats(p, m)))) ::: Neither John nor Nat orders a fish entree\neats(Olive, roast_beef) ::: Olive orders roast beef\n\n# Options\nQuestion ::: Which one of the following statements must be true?\nis_valid(Exists([m:meals], Or(eats(John, m), eats(Lewis, m), eats(Nat, m)) && m == pork_chops || m == veal_cutlet)) ::: (A)\nis_valid(Exists([m:meals], Or(eats(John, m), eats(Lewis, m), eats(Nat, m)) && m == swordfish || m == veal_cutlet)) ::: (B)\nis_valid(Exists([m:meals], Or(eats(Kate, m), eats(Marie, m), eats(Olive, m)) && m == tilefish)) ::: (C)\nis_valid(ForAll([p:people], Implies(eats(p, m), Not(eats(p, m))))) ::: (D)\nis_valid(Exists([p:people], Or(eats(p, m), eats(p, m)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_1_4",
    "context": "Three couples—John and Kate, Lewis and Marie, and Nat and Olive have dinner in a restaurant together. Kate, Marie, and Olive are women; the other three are men. Each person orders one and only one of the following kinds of entrees: pork chops, roast beef, swordfish, tilefish, veal cutlet. The six people order in a manner consistent with the following conditions: The two people in each couple do not order the same kind of entree as each other. None of the men orders the same kind of entree as any of the other men. Marie orders swordfish. Neither John nor Nat orders a fish entree. Olive orders roast beef.",
    "question": "If John orders veal cutlet, then which one of the following statements must be true?",
    "answer": "E",
    "options": [
      "A) Kate orders roast beef.",
      "B) Kate orders swordfish.",
      "C) Lewis orders tilefish.",
      "D) Lewis orders veal cutlet.",
      "E) Nat orders pork chops."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([John, Kate, Lewis, Marie, Nat, Olive])\nmeals = EnumSort([pork_chops, roast_beef, swordfish, tilefish, veal_cutlet])\neats = Function([people, meals] -> [bool])\n\n# Constraints\nForAll([p:people], Count([m:meals], eats(p, m)) == 1) ::: Each person orders one and only one of the following kinds of entrees\nForAll([p:people], Implies(eats(p, m), Not(eats(p, m)))) ::: The two people in each couple do not order the same kind of entree as each other\nForAll([p:people], Implies(eats(p, m), Not(eats(p, m)))) ::: None of the men orders the same kind of entree as any of the other men\neats(Marie, swordfish) ::: Marie orders swordfish\nForAll([p:people], Implies(eats(p, m), Not(eats(p, m)))) ::: Neither John nor Nat orders a fish entree\neats(Olive, roast_beef) ::: Olive orders roast beef\n\n# Options\nQuestion ::: If John orders veal cutlet, then which one of the following statements must be true?\nis_sat(ForAll([p:people], Implies(eats(John, veal_cutlet), eats(Kate, roast_beef)))) ::: (A)\nis_sat(ForAll([p:people], Implies(eats(John, veal_cutlet), eats(Kate, swordfish)))) ::: (B)\nis_sat(ForAll([p:people], Implies(eats(John, veal_cutlet), eats(Lewis, tilefish)))) ::: (C)\nis_sat(ForAll([p:people], Implies(eats(John, veal_cutlet), eats(Lewis, veal_cutlet)))) ::: (D)\nis_sat(ForAll([p:people], Implies(eats(John, veal_cutlet), eats(Nat, pork_chops)))) ::: (E)\n------\nProblem:\nA group of six people"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_1_5",
    "context": "Three couples—John and Kate, Lewis and Marie, and Nat and Olive have dinner in a restaurant together. Kate, Marie, and Olive are women; the other three are men. Each person orders one and only one of the following kinds of entrees: pork chops, roast beef, swordfish, tilefish, veal cutlet. The six people order in a manner consistent with the following conditions: The two people in each couple do not order the same kind of entree as each other. None of the men orders the same kind of entree as any of the other men. Marie orders swordfish. Neither John nor Nat orders a fish entree. Olive orders roast beef.",
    "question": "If none of the six people orders pork chops, then which one of the following statements must be true?",
    "answer": "C",
    "options": [
      "A) John orders veal cutlet.",
      "B) Kate orders tilefish.",
      "C) Lewis orders tilefish.",
      "D) One of the men orders swordfish.",
      "E) One of the women orders tilefish."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([John, Kate, Lewis, Marie, Nat, Olive])\nmeals = EnumSort([pork_chops, roast_beef, swordfish, tilefish, veal_cutlet])\neats = Function([people, meals] -> [bool])\n\n# Constraints\nForAll([p:people], Count([m:meals], eats(p, m)) == 1) ::: Each person orders one and only one of the following kinds of entrees\nForAll([p:people], Implies(eats(p, pork_chops), Not(eats(p, roast_beef)))) ::: The two people in each couple do not order the same kind of entree as each other\nForAll([p:people], Implies(eats(p, pork_chops), Not(eats(p, swordfish)))) ::: The two people in each couple do not order the same kind of entree as each other\nForAll([p:people], Implies(eats(p, pork_chops), Not(eats(p, tilefish)))) ::: The two people in each couple do not order the same kind of entree as each other\nForAll([p:people], Implies(eats(p, pork_chops), Not(eats(p, veal_cutlet)))) ::: The two people in each couple do not order the same kind of entree as each other\nForAll([p:people], Implies(eats(p, roast_beef), Not(eats(p, swordfish)))) ::: The two people in each couple do not order the same kind of entree as each other\nForAll([p:people], Implies(eats(p, roast_beef), Not(eats(p, tilefish)))) ::: The two people in each couple do not order the same kind of entree as each other\nForAll([p:people], Implies(eats(p, roast_beef), Not(eats(p, veal_cutlet)))) ::: The two people in each couple do not order the same kind of entree as each other\nForAll([p:people], Implies(eats(p, swordfish), Not(eats(p, tilefish)))) ::: The two people in each couple do not order the same kind of entree as each other"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_1_6",
    "context": "Three couples—John and Kate, Lewis and Marie, and Nat and Olive have dinner in a restaurant together. Kate, Marie, and Olive are women; the other three are men. Each person orders one and only one of the following kinds of entrees: pork chops, roast beef, swordfish, tilefish, veal cutlet. The six people order in a manner consistent with the following conditions: The two people in each couple do not order the same kind of entree as each other. None of the men orders the same kind of entree as any of the other men. Marie orders swordfish. Neither John nor Nat orders a fish entree. Olive orders roast beef.",
    "question": "If Lewis orders pork chops, then which one of the following is a complete and accurate list of the entrees any one of which John could order?",
    "answer": "A",
    "options": [
      "A) roast beef",
      "B) veal cutlet",
      "C) roast beef, veal cutlet",
      "D) roast beef, swordfish",
      "E) pork chops, roast beef, swordfish"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([John, Kate, Lewis, Marie, Nat, Olive])\nentrees = EnumSort([pork_chops, roast_beef, swordfish, tilefish, veal_cutlet])\norders = Function([people, entrees] -> [bool])\n\n# Constraints\nForAll([p:people], Count([e:entrees], orders(p, e)) == 1) ::: Each person orders one and only one of the following kinds of entrees\nAnd(orders(John, e1), orders(Kate, e2), e1!= e2) ::: The two people in each couple do not order the same kind of entree as each other\nAnd(orders(Lewis, e1), orders(Nat, e2), orders(John, e3), e1!= e2, e1!= e3, e2!= e3) ::: None of the men orders the same kind of entree as any of the other men\norders(Marie, swordfish) ::: Marie orders swordfish\nAnd(orders(John, e1), orders(Nat, e2), Not(e1 == swordfish), Not(e2 == swordfish)) ::: Neither John nor Nat orders a fish entree\norders(Olive, roast_beef) ::: Olive orders roast beef\n\n# Options\nQuestion ::: If Lewis orders pork chops, then which one of the following is a complete and accurate list of the entrees any one of which John could order?\nis_valid(Exists([e:entrees], orders(John, e) == orders(Lewis, pork_chops) == True) & e == roast_beef) ::: A) roast beef\nis_valid(Exists([e:entrees], orders(John, e) == orders(Lewis, pork_chops) == True) & e == veal_cutlet) ::: B) veal cutlet\nis_valid(Exists([e:entrees], orders(John, e) == orders(Lewis, pork_chops) == True) & e == roast_beef) & is_valid(Exists([e:entrees], orders(John, e) == orders(Lewis, pork_chops) == True) & e == veal_cutlet) ::: C) roast beef"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_1_7",
    "context": "Three couples—John and Kate, Lewis and Marie, and Nat and Olive have dinner in a restaurant together. Kate, Marie, and Olive are women; the other three are men. Each person orders one and only one of the following kinds of entrees: pork chops, roast beef, swordfish, tilefish, veal cutlet. The six people order in a manner consistent with the following conditions: The two people in each couple do not order the same kind of entree as each other. None of the men orders the same kind of entree as any of the other men. Marie orders swordfish. Neither John nor Nat orders a fish entree. Olive orders roast beef.",
    "question": "Suppose that the people in each couple both order the same kind of entree as each other rather than order different kinds of entrees. If all other conditions remain the same, and no two women order the same kind of entree, then which one of the following statements could be true?",
    "answer": "D",
    "options": [
      "A) John orders roast beef.",
      "B) John orders swordfish.",
      "C) Kate orders roast beef.",
      "D) Two of the people order pork chops.",
      "E) Two of the people order tilefish."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([John, Kate, Lewis, Marie, Nat, Olive])\nentrees = EnumSort([pork_chops, roast_beef, swordfish, tilefish, veal_cutlet])\norders = Function([people, entrees] -> [bool])\n\n# Constraints\nForAll([p:people], Count([e:entrees], orders(p, e)) == 1) ::: Each person orders one and only one of the following kinds of entrees\nAnd(orders(John, e1), orders(Kate, e2), e1!= e2) ::: The two people in each couple do not order the same kind of entree as each other\nAnd(orders(Lewis, e1), orders(Marie, e2), e1!= e2) ::: The two people in each couple do not order the same kind of entree as each other\nAnd(orders(Nat, e1), orders(Olive, e2), e1!= e2) ::: The two people in each couple do not order the same kind of entree as each other\nAnd(orders(John, e1), orders(Lewis, e2), e1!= e2) ::: None of the men orders the same kind of entree as any of the other men\nAnd(orders(John, e1), orders(Nat, e2), e1!= e2) ::: None of the men orders the same kind of entree as any of the other men\nAnd(orders(Lewis, e1), orders(Nat, e2), e1!= e2) ::: None of the men orders the same kind of entree as any of the other men\norders(Marie, swordfish) ::: Marie orders swordfish\nAnd(orders(John, e1), Not(e1 == fish_entree)) ::: Neither John nor Nat orders a fish entree\nAnd(orders(Nat, e1), Not(e1 == fish_entree)) ::: Neither John nor Nat orders a fish entree\norders(Olive, roast_beef) ::: Olive orders roast beef\n\n# Options\nQuestion ::: Suppose that the people in each couple both order the same kind of entree as each other rather than order different kinds of entrees. If all other conditions remain the same, and no two women order the same kind of entree, then which one of"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_2_8",
    "context": "There are exactly seven houses on a street. Each house is occupied by exactly one of seven families: the Kahns, Lowes, Muirs, Newmans, Owens, Piatts, Rutans. All the houses are on the same side of the street, which runs from west to east. The Rutans do not live in the first or the last house on the street. The Kahns live in the fourth house from the west end of the street. The Muirs live next to the Kahns. The Piatts live east of both the Kahns and the Muirs but west of the Lowes.",
    "question": "Which one of the following families could live in the house that is the farthest east?",
    "answer": "C",
    "options": [
      "A) the Kahns",
      "B) the Muirs",
      "C) the Newmans",
      "D) the Piatts",
      "E) the Rutans"
    ],
    "raw_logic_programs": [
      "# Declarations\nfamilies = EnumSort([Kahns, Lowes, Muirs, Newmans, Owens, Piatts, Rutans])\nhouses = EnumSort([house1, house2, house3, house4, house5, house6, house7])\nlives = Function([families, houses] -> [bool])\n\n# Constraints\nForAll([f:families], Count([h:houses], lives(f, h)) == 1) ::: Each house is occupied by exactly one of seven families\nAnd(lives(Rutans, house1), lives(Rutans, house7)) ::: The Rutans do not live in the first or the last house on the street\nlives(Kahns, house4) ::: The Kahns live in the fourth house from the west end of the street\nlives(Muirs, house3) ::: The Muirs live next to the Kahns\nlives(Piatts, house5) ::: The Piatts live east of both the Kahns and the Muirs but west of the Lowes\n\n# Options\nQuestion ::: Which one of the following families could live in the house that is the farthest east?\nis_sat(lives(Kahns, house7)) ::: (A)\nis_sat(lives(Muirs, house7)) ::: (B)\nis_sat(lives(Newmans, house7)) ::: (C)\nis_sat(lives(Piatts, house7)) ::: (D)\nis_sat(lives(Rutans, house7)) ::: (E)\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following departments: accounting, human resources, information technology, and marketing. The following conditions apply: B is assigned to work in the accounting department. C is assigned to work in the human resources department. D is assigned to work in the information technology department. E is assigned to work in the marketing department. A is assigned to work in the same department as F.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A is assigned to work in the accounting department.\n(B) A is assigned to work"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_2_9",
    "context": "There are exactly seven houses on a street. Each house is occupied by exactly one of seven families: the Kahns, Lowes, Muirs, Newmans, Owens, Piatts, Rutans. All the houses are on the same side of the street, which runs from west to east. The Rutans do not live in the first or the last house on the street. The Kahns live in the fourth house from the west end of the street. The Muirs live next to the Kahns. The Piatts live east of both the Kahns and the Muirs but west of the Lowes.",
    "question": "Which one of the following families CANNOT live next to the Kahns?",
    "answer": "A",
    "options": [
      "A) the Lowes",
      "B) the Newmans",
      "C) the Owens",
      "D) the Piatts",
      "E) the Rutans"
    ],
    "raw_logic_programs": [
      "# Declarations\nfamilies = EnumSort([Kahns, Lowes, Muirs, Newmans, Owens, Piatts, Rutans])\nhouses = EnumSort([1, 2, 3, 4, 5, 6, 7])\nlives = Function([families, houses] -> [bool])\n\n# Constraints\nForAll([f:families], Count([h:houses], lives(f, h)) == 1) ::: Each house is occupied by exactly one of seven families\nAnd(lives(Rutans, 1), lives(Rutans, 7)) ::: The Rutans do not live in the first or the last house on the street\nlives(Kahns, 4) ::: The Kahns live in the fourth house from the west end of the street\nlives(Muirs, h) ::: The Muirs live next to the Kahns\nlives(Piatts, h) ::: The Piatts live east of both the Kahns and the Muirs but west of the Lowes\n\n# Options\nQuestion ::: Which one of the following families CANNOT live next to the Kahns?\nis_exception(is_sat(lives(Lowes, 3))) ::: A) the Lowes\nis_exception(is_sat(lives(Newmans, 3))) ::: B) the Newmans\nis_exception(is_sat(lives(Owens, 3))) ::: C) the Owens\nis_exception(is_sat(lives(Piatts, 3))) ::: D) the Piatts\nis_exception(is_sat(lives(Rutans, 3))) ::: E) the Rutans\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee has a different job title: manager, assistant manager, salesperson, assistant salesperson, secretary, and assistant secretary. The following conditions apply: A is the manager. B is the assistant manager. C is the assistant secretary. D is the assistant salesperson. E is the secretary. F is the salesperson.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A is the manager.\n(B) B is the assistant manager."
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_2_10",
    "context": "There are exactly seven houses on a street. Each house is occupied by exactly one of seven families: the Kahns, Lowes, Muirs, Newmans, Owens, Piatts, Rutans. All the houses are on the same side of the street, which runs from west to east. The Rutans do not live in the first or the last house on the street. The Kahns live in the fourth house from the west end of the street. The Muirs live next to the Kahns. The Piatts live east of both the Kahns and the Muirs but west of the Lowes.",
    "question": "If the Muirs live west of the Kahns, then the Rutans CANNOT live next to both",
    "answer": "C",
    "options": [
      "A) the Kahns and the Piatts",
      "B) the Lowes and the Piatts",
      "C) the Muirs and the Piatts",
      "D) the Muirs and the Owens",
      "E) the Muirs and the Newmans"
    ],
    "raw_logic_programs": [
      "# Declarations\nfamilies = EnumSort([Kahns, Lowes, Muirs, Newmans, Owens, Piatts, Rutans])\nhouses = EnumSort([1, 2, 3, 4, 5, 6, 7])\nlives = Function([families, houses] -> [bool])\n\n# Constraints\nForAll([f:families], Count([h:houses], lives(f, h)) == 1) ::: Each house is occupied by exactly one of seven families\nAnd(lives(Rutans, 1), lives(Rutans, 7)) ::: The Rutans do not live in the first or the last house on the street\nlives(Kahns, 4) ::: The Kahns live in the fourth house from the west end of the street\nlives(Muirs, h) ::: The Muirs live next to the Kahns\nlives(Piatts, h) ::: The Piatts live east of both the Kahns and the Muirs but west of the Lowes\n\n# Options\nQuestion ::: If the Muirs live west of the Kahns, then the Rutans CANNOT live next to both\nis_exception(is_sat(lives(Muirs, 3) && lives(Rutans, 2) && lives(Rutans, 5) && lives(Piatts, 6))) ::: (A)\nis_exception(is_sat(lives(Muirs, 3) && lives(Rutans, 2) && lives(Rutans, 5) && lives(Lowes, 6))) ::: (B)\nis_exception(is_sat(lives(Muirs, 3) && lives(Rutans, 2) && lives(Rutans, 5) && lives(Piatts, 4))) ::: (C)\nis_exception(is_sat(lives(Muirs, 3) && lives(Rutans, 2) && lives(Rutans, 5) && lives(Owens, 6))) ::: (D)\nis_exception(is_sat(lives(Muirs, 3) && lives(Rutans, 2) && lives(Rutans, 5)"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_2_11",
    "context": "There are exactly seven houses on a street. Each house is occupied by exactly one of seven families: the Kahns, Lowes, Muirs, Newmans, Owens, Piatts, Rutans. All the houses are on the same side of the street, which runs from west to east. The Rutans do not live in the first or the last house on the street. The Kahns live in the fourth house from the west end of the street. The Muirs live next to the Kahns. The Piatts live east of both the Kahns and the Muirs but west of the Lowes.",
    "question": "If the Newmans live immediately west of the Kahns, which one of the following statements must be false?",
    "answer": "A",
    "options": [
      "A) The Owens live next to the Newmans.",
      "B) The Owens live next to the Rutans.",
      "C) The Piatts live next to the Lowes.",
      "D) The Piatts live next to the Muirs.",
      "E) The Rutans live next to the Newmans."
    ],
    "raw_logic_programs": [
      "# Declarations\nfamilies = EnumSort([Kahns, Lowes, Muirs, Newmans, Owens, Piatts, Rutans])\nhouses = EnumSort([1, 2, 3, 4, 5, 6, 7])\nlives = Function([families, houses] -> [bool])\n\n# Constraints\nForAll([f:families], Count([h:houses], lives(f, h)) == 1) ::: Each house is occupied by exactly one of seven families\nForAll([h:houses], Count([f:families], lives(f, h)) == 1) ::: There are exactly seven houses on a street\nAnd(lives(Rutans, 1), lives(Rutans, 7)) ::: The Rutans do not live in the first or the last house on the street\nlives(Kahns, 4) ::: The Kahns live in the fourth house from the west end of the street\nlives(Muirs, 3) ::: The Muirs live next to the Kahns\nlives(Piatts, 6) ::: The Piatts live east of both the Kahns and the Muirs but west of the Lowes\n\n# Options\nQuestion ::: If the Newmans live immediately west of the Kahns, which one of the following statements must be false?\nis_exception(is_sat(lives(Owens, 1))) ::: (A)\nis_exception(is_sat(lives(Owens, 7))) ::: (B)\nis_exception(is_sat(lives(Piatts, 5))) ::: (C)\nis_exception(is_sat(lives(Piatts, 3))) ::: (D)\nis_exception(is_sat(lives(Rutans, 5))) ::: (E)\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting, marketing, and sales. The following conditions apply: A is assigned to work in the accounting department. B is assigned to work in the marketing department. C is assigned to work in the same department as A. D is assigned to work in the"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_2_12",
    "context": "There are exactly seven houses on a street. Each house is occupied by exactly one of seven families: the Kahns, Lowes, Muirs, Newmans, Owens, Piatts, Rutans. All the houses are on the same side of the street, which runs from west to east. The Rutans do not live in the first or the last house on the street. The Kahns live in the fourth house from the west end of the street. The Muirs live next to the Kahns. The Piatts live east of both the Kahns and the Muirs but west of the Lowes.",
    "question": "If the Owens live east of the Muirs, which one of the following statements must be true?",
    "answer": "A",
    "options": [
      "A) The Kahns live east of the Muirs.",
      "B) The Kahns live west of the Rutans.",
      "C) The Owens live west of the Lowes.",
      "D) The Owens live east of the Piatts.",
      "E) The Owens live west of the Piatts."
    ],
    "raw_logic_programs": [
      "# Declarations\nfamilies = EnumSort([Kahns, Lowes, Muirs, Newmans, Owens, Piatts, Rutans])\nhouses = EnumSort([1, 2, 3, 4, 5, 6, 7])\nlives = Function([families, houses] -> [bool])\n\n# Constraints\nForAll([f:families], Count([h:houses], lives(f, h)) == 1) ::: Each house is occupied by exactly one of seven families\nForAll([h:houses], Count([f:families], lives(f, h)) == 1) ::: There are exactly seven houses on a street\nAnd(lives(Rutans, 1), lives(Rutans, 7)) ::: The Rutans do not live in the first or the last house on the street\nlives(Kahns, 4) ::: The Kahns live in the fourth house from the west end of the street\nlives(Muirs, h) ::: The Muirs live next to the Kahns\nlives(Piatts, h) ::: The Piatts live east of both the Kahns and the Muirs but west of the Lowes\nlives(Owens, h) ::: The Owens live east of the Muirs\n\n# Options\nQuestion ::: If the Owens live east of the Muirs, which one of the following statements must be true?\nis_valid(Exists([h:houses], lives(Kahns, h) && lives(Muirs, h + 1))) ::: (A)\nis_valid(Exists([h:houses], lives(Kahns, h) && lives(Rutans, h + 1))) ::: (B)\nis_valid(Exists([h:houses], lives(Owens, h) && lives(Lowes, h + 1))) ::: (C)\nis_valid(Exists([h:houses], lives(Owens, h) && lives(Piatts, h + 1))) ::: (D)\nis_valid(Exists([h:houses], lives(Owens, h) && lives(Piatts, h - 1))) ::: (E)\n------\nProblem:\nA certain company has exactly six employees: A, B, C"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_2_13",
    "context": "There are exactly seven houses on a street. Each house is occupied by exactly one of seven families: the Kahns, Lowes, Muirs, Newmans, Owens, Piatts, Rutans. All the houses are on the same side of the street, which runs from west to east. The Rutans do not live in the first or the last house on the street. The Kahns live in the fourth house from the west end of the street. The Muirs live next to the Kahns. The Piatts live east of both the Kahns and the Muirs but west of the Lowes.",
    "question": "If the Owens live east of the Kahns, which one of the following pairs of families must live next to each other?",
    "answer": "D",
    "options": [
      "A) the Kahns and the Piatts",
      "B) the Lowes and the Owens",
      "C) the Muirs and the Newmans",
      "D) the Newmans and the Rutans",
      "E) the Owens and the Piatts"
    ],
    "raw_logic_programs": [
      "# Declarations\nfamilies = EnumSort([Kahns, Lowes, Muirs, Newmans, Owens, Piatts, Rutans])\nhouses = EnumSort([1, 2, 3, 4, 5, 6, 7])\nlives = Function([families, houses] -> [bool])\n\n# Constraints\nForAll([f:families], Count([h:houses], lives(f, h)) == 1) ::: Each house is occupied by exactly one of seven families\nAnd(lives(Rutans, 1), lives(Rutans, 7)) ::: The Rutans do not live in the first or the last house on the street\nlives(Kahns, 4) ::: The Kahns live in the fourth house from the west end of the street\nlives(Muirs, houses[i]) ::: The Muirs live next to the Kahns\nlives(Piatts, houses[i]) ::: The Piatts live east of both the Kahns and the Muirs but west of the Lowes\nlives(Owens, houses[i]) ::: the Owens live east of the Kahns\n\n# Options\nQuestion ::: If the Owens live east of the Kahns, which one of the following pairs of families must live next to each other?\nis_sat(ForAll([h:houses], Implies(lives(Kahns, h), lives(Piatts, h + 1)))) ::: (A)\nis_sat(ForAll([h:houses], Implies(lives(Lowes, h), lives(Owens, h + 1)))) ::: (B)\nis_sat(ForAll([h:houses], Implies(lives(Muirs, h), lives(Newmans, h + 1)))) ::: (C)\nis_sat(ForAll([h:houses], Implies(lives(Newmans, h), lives(Rutans, h + 1)))) ::: (D)\nis_sat(ForAll([h:houses], Implies(lives(Owens, h), lives(Piatts, h + 1)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_3_14",
    "context": "At an automobile exhibition, cars are displayed on each floor of a three-floor building. On each floor the cars are either all family cars or all sports cars, either all new or all used, and either all production models or all research models. The following conditions apply to this exhibition: If the exhibition includes both family cars and sports cars, then each family car is displayed on a lower numbered floor than any sports car. The exhibition includes no used research models. The exhibition includes no research models that are sports cars. There are new cars on floor 1. There are used cars on floor 3.",
    "question": "If there are sports cars on exactly two floors, then which one of the following statements could be true?",
    "answer": "A",
    "options": [
      "A) There are research models on floor 1.",
      "B) There are sports cars on floor 1.",
      "C) There are family cars on floor 2.",
      "D) There are research models on floor 2.",
      "E) There are family cars on floor 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([1, 2, 3])\ncars = EnumSort([family, sports])\ntypes = EnumSort([new, used])\nmodels = EnumSort([production, research])\ndisplayed = Function([floors, cars, types, models] -> [bool])\n\n# Constraints\nForAll([f:floors], Count([c:cars], displayed(f, c, types, models)) >= 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([t:types], displayed(floors, c, t, models)) >= 1) ::: cars are displayed on each floor\nForAll([m:models], Count([t:types], displayed(floors, cars, t, m)) >= 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c, types, models)) == 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([t:types], displayed(floors, c, t, models)) == 1) ::: cars are displayed on each floor\nForAll([m:models], Count([t:types], displayed(floors, cars, t, m)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c, types, models)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c, types, models)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c, types, models)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c, types, models)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c, types, models)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars],"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_3_15",
    "context": "At an automobile exhibition, cars are displayed on each floor of a three-floor building. On each floor the cars are either all family cars or all sports cars, either all new or all used, and either all production models or all research models. The following conditions apply to this exhibition: If the exhibition includes both family cars and sports cars, then each family car is displayed on a lower numbered floor than any sports car. The exhibition includes no used research models. The exhibition includes no research models that are sports cars. There are new cars on floor 1. There are used cars on floor 3.",
    "question": "Which one of the following statements could be true?",
    "answer": "D",
    "options": [
      "A) The exhibition includes new research model sports cars.",
      "B) The exhibition includes used research model family cars.",
      "C) The exhibition includes used research model sports cars.",
      "D) There are research models on exactly one floor.",
      "E) There are research models on all three floors."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([1, 2, 3])\ncars = EnumSort([family, sports])\nnew_or_used = EnumSort([new, used])\nproduction_or_research = EnumSort([production, research])\ndisplayed = Function([floors, cars, new_or_used, production_or_research] -> [bool])\n\n# Constraints\nForAll([f:floors], Count([c:cars, n:new_or_used, p:production_or_research], displayed(f, c, n, p)) >= 1) ::: cars are displayed on each floor\nForAll([c:cars, n:new_or_used, p:production_or_research], Count([f:floors], displayed(f, c, n, p)) == 1) ::: each car is displayed on exactly one floor\nForAll([c:cars, n:new_or_used, p:production_or_research], Count([f:floors], displayed(f, c, n, p)) == 1) ::: each car is displayed on exactly one floor\nForAll([c:cars, n:new_or_used, p:production_or_research], Count([f:floors], displayed(f, c, n, p)) == 1) ::: each car is displayed on exactly one floor\nForAll([c:cars, n:new_or_used, p:production_or_research], Count([f:floors], displayed(f, c, n, p)) == 1) ::: each car is displayed on exactly one floor\nForAll([c:cars, n:new_or_used, p:production_or_research], Count([f:floors], displayed(f, c, n, p)) == 1) ::: each car is displayed on exactly one floor\nForAll([c:cars, n:new_or_used, p:production_or_research], Count([f:floors], displayed(f, c, n, p)) == 1) ::: each car is displayed on exactly one floor\nForAll([c:cars, n:new_or_used, p:production_or"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_3_16",
    "context": "At an automobile exhibition, cars are displayed on each floor of a three-floor building. On each floor the cars are either all family cars or all sports cars, either all new or all used, and either all production models or all research models. The following conditions apply to this exhibition: If the exhibition includes both family cars and sports cars, then each family car is displayed on a lower numbered floor than any sports car. The exhibition includes no used research models. The exhibition includes no research models that are sports cars. There are new cars on floor 1. There are used cars on floor 3.",
    "question": "Which one of the following statements must be true?",
    "answer": "D",
    "options": [
      "A) There are production models on floor 1.",
      "B) There are research models on floor 1.",
      "C) There are production models on floor 2.",
      "D) There are production models on floor 3.",
      "E) There are research models on floor 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([1, 2, 3])\ncars = EnumSort([family, sports, new, used, production, research])\ndisplayed = Function([floors, cars] -> [bool])\n\n# Constraints\nForAll([f:floors], Count([c:cars], displayed(f, c)) >= 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) <= 1) ::: cars are either all family cars or all sports cars, either all new or all used, and either all production models or all research models\nForAll([f:floors], Implies(And(displayed(f, family), displayed(f, sports)), f == 1)) ::: If the exhibition includes both family cars and sports cars, then each family car is displayed on a lower numbered floor than any sports car\nForAll([f:floors], Implies(displayed(f, used), Not(displayed(f, research)))) ::: The exhibition includes no used research models\nForAll([f:floors], Implies(displayed(f, research), Not(displayed(f, sports)))) ::: The exhibition includes no research models that are sports cars\ndisplayed(1, new) ::: There are new cars on floor 1\ndisplayed(3, used) ::: There are used cars on floor 3\n\n# Options\nQuestion ::: Which one of the following statements must be true?\nis_valid(ForAll([f:floors], Implies(displayed(f, production), displayed(f, family)))) ::: A) There are production models on floor 1.\nis_valid(ForAll([f:floors], Implies(displayed(f, research), displayed(f, family)))) ::: B) There are research models on floor 1.\nis_valid(ForAll([f:floors], Implies(displayed(f, production), displayed(f, new)))) ::: C) There are production models on floor 2.\nis_valid(ForAll([f:floors], Implies(displayed(f, production), displayed(f, used)))) ::: D) There are production models on floor 3.\nis_valid"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_3_17",
    "context": "At an automobile exhibition, cars are displayed on each floor of a three-floor building. On each floor the cars are either all family cars or all sports cars, either all new or all used, and either all production models or all research models. The following conditions apply to this exhibition: If the exhibition includes both family cars and sports cars, then each family car is displayed on a lower numbered floor than any sports car. The exhibition includes no used research models. The exhibition includes no research models that are sports cars. There are new cars on floor 1. There are used cars on floor 3.",
    "question": "If there are research models on exactly two floors, then which one of the following statements can be false?",
    "answer": "E",
    "options": [
      "A) There are family cars on floor 1.",
      "B) There are research models on floor 1.",
      "C) There are new cars on floor 2.",
      "D) There are research models on floor 2.",
      "E) There are family cars on floor 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([1, 2, 3])\ncars = EnumSort([family, sports, new, used, production, research])\ndisplayed = Function([floors, cars] -> [bool])\n\n# Constraints\nForAll([f:floors], Count([c:cars], displayed(f, c)) >= 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) == 1) ::: each car is displayed on exactly one floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) == 2) ::: each floor has exactly two cars\nForAll([c:cars], Implies(displayed(1, c), c == new)) ::: There are new cars on floor 1\nForAll([c:cars], Implies(displayed(3, c), c == used)) ::: There are used cars on floor 3\nForAll([c:cars], Implies(displayed(c, family), Not(displayed(c, sports)))) ::: If the exhibition includes both family cars and sports cars, then each family car is displayed on a lower numbered floor than any sports car\nForAll([c:cars], Implies(displayed(c, used), Not(displayed(c, research)))) ::: The exhibition includes no used research models\nForAll([c:cars], Implies(displayed(c, research), Not(displayed(c, sports)))) ::: The exhibition includes no research models that are sports cars\n\n# Options\nQuestion ::: If there are research models on exactly two floors, then which one of the following statements can be false?\nis_exception(is_sat(displayed(1, family))) ::: (A)\nis_exception(is_sat(displayed(1, research))) ::: (B)\nis_exception(is_sat(displayed(2, new))) ::: (C)\nis_exception(is_sat(displayed(2, research))) ::: (D)\nis_exception(is_sat(displayed(3, family))) ::: (E)\n------\nProblem:\nA certain company has a total of 1"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_3_18",
    "context": "At an automobile exhibition, cars are displayed on each floor of a three-floor building. On each floor the cars are either all family cars or all sports cars, either all new or all used, and either all production models or all research models. The following conditions apply to this exhibition: If the exhibition includes both family cars and sports cars, then each family car is displayed on a lower numbered floor than any sports car. The exhibition includes no used research models. The exhibition includes no research models that are sports cars. There are new cars on floor 1. There are used cars on floor 3.",
    "question": "If all the new cars in the exhibition are research models, then which one of the following statements must be true?",
    "answer": "D",
    "options": [
      "A) All the family cars in the exhibition are new.",
      "B) All the family cars in the exhibition are research models.",
      "C) All the family cars in the exhibition are used.",
      "D) All the new cars in the exhibition are family cars.",
      "E) All the production models in the exhibition are family cars."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([1, 2, 3])\ncars = EnumSort([family, sports, new, used, production, research])\ndisplayed = Function([floors, cars] -> [bool])\n\n# Constraints\nForAll([f:floors], Count([c:cars], displayed(f, c)) >= 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) >= 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) <= 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) <= 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([c:c"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_3_19",
    "context": "At an automobile exhibition, cars are displayed on each floor of a three-floor building. On each floor the cars are either all family cars or all sports cars, either all new or all used, and either all production models or all research models. The following conditions apply to this exhibition: If the exhibition includes both family cars and sports cars, then each family car is displayed on a lower numbered floor than any sports car. The exhibition includes no used research models. The exhibition includes no research models that are sports cars. There are new cars on floor 1. There are used cars on floor 3.",
    "question": "If all the production models in the exhibition are used, then which one of the following statements must be true?",
    "answer": "A",
    "options": [
      "A) There are family cars on floor 1.",
      "B) There are new cars on floor 2.",
      "C) There are research models on floor 2.",
      "D) There are family cars on floor 3.",
      "E) There are sports cars on floor 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nfloors = EnumSort([1, 2, 3])\ncars = EnumSort([family, sports, new, used, production, research])\ndisplayed = Function([floors, cars] -> [bool])\n\n# Constraints\nForAll([f:floors], Count([c:cars], displayed(f, c)) >= 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) >= 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) <= 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) <= 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([c:cars], Count([f:floors], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([f:floors], Count([c:cars], displayed(f, c)) == 1) ::: cars are displayed on each floor\nForAll([c:c"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_4_20",
    "context": "Planes 1, 2, 3, and 4—and no others—are available to fly in an air show. Pilots Anna, Bob, and Cindy are all aboard planes that are flying in the show and they are the only qualified pilots in the show. Copilots Dave, Ed, and Fran are all aboard planes that are flying in the show and they are the only qualified copilots in the show. No plane flies in the show without a qualified pilot aboard. No one but qualified pilots and qualified copilots flies in the show. Anna will only fly in either plane 1 or plane 4. Dave will only fly in either plane 2 or plane 3.",
    "question": "If Anna flies in plane 4 and Dave flies in plane 2, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Cindy flies in either plane 1 or plane 3.",
      "B) If Cindy flies in plane 3, Bob flies in plane 2.",
      "C) Bob and one other person fly in plane l.",
      "D) If Bob is aboard plane 4, Cindy flies in plane 3.",
      "E) If Cindy is in plane 2, Bob flies in plane 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nplanes = EnumSort([1, 2, 3, 4])\npilots = EnumSort([Anna, Bob, Cindy])\ncopilots = EnumSort([Dave, Ed, Fran])\nflies = Function([planes, pilots, copilots] -> [bool])\n\n# Constraints\nForAll([p:planes], Count([pilot:pilots], flies(p, pilot)) == 1) ::: No plane flies in the show without a qualified pilot aboard\nForAll([p:planes], Count([copilot:copilots], flies(p, copilot)) == 1) ::: No one but qualified pilots and qualified copilots flies in the show\nAnd(flies(1, Anna), flies(4, Anna)) ::: Anna will only fly in either plane 1 or plane 4\nAnd(flies(2, Dave), flies(3, Dave)) ::: Dave will only fly in either plane 2 or plane 3\n\n# Options\nQuestion ::: If Anna flies in plane 4 and Dave flies in plane 2, which one of the following must be true?\nis_valid(Exists([p:planes], And(flies(p, Cindy), Or(p == 1, p == 3)))) ::: (A)\nis_valid(Exists([p:planes], And(flies(p, Cindy), flies(3, Bob)))) ::: (B)\nis_valid(Exists([p:planes], And(flies(1, Bob), flies(1, _)))) ::: (C)\nis_valid(Exists([p:planes], And(flies(4, Bob), flies(3, Cindy)))) ::: (D)\nis_valid(Exists([p:planes], And(flies(2, Cindy), flies(3, Bob)))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_4_21",
    "context": "Planes 1, 2, 3, and 4—and no others—are available to fly in an air show. Pilots Anna, Bob, and Cindy are all aboard planes that are flying in the show and they are the only qualified pilots in the show. Copilots Dave, Ed, and Fran are all aboard planes that are flying in the show and they are the only qualified copilots in the show. No plane flies in the show without a qualified pilot aboard. No one but qualified pilots and qualified copilots flies in the show. Anna will only fly in either plane 1 or plane 4. Dave will only fly in either plane 2 or plane 3.",
    "question": "If Bob and Anna fly on the same plane, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Cindy flies with Dave and Ed.",
      "B) Cindy flies with Ed.",
      "C) Dave flies with Cindy.",
      "D) Dave flies with Cindy, Ed, and Fran.",
      "E) Fran flies with Ed."
    ],
    "raw_logic_programs": [
      "# Declarations\nplanes = EnumSort([1, 2, 3, 4])\npilots = EnumSort([Anna, Bob, Cindy])\ncopilots = EnumSort([Dave, Ed, Fran])\nflies = Function([planes, pilots, copilots] -> [bool])\n\n# Constraints\nForAll([p:pilots], Count([p:planes], flies(p, p)) == 1) ::: No plane flies in the show without a qualified pilot aboard\nForAll([c:copilots], Count([c:planes], flies(c, c)) == 1) ::: No one but qualified pilots and qualified copilots flies in the show\nAnd(flies(Anna, 1), flies(Anna, 4)) ::: Anna will only fly in either plane 1 or plane 4\nAnd(flies(Dave, 2), flies(Dave, 3)) ::: Dave will only fly in either plane 2 or plane 3\n\n# Options\nQuestion ::: If Bob and Anna fly on the same plane, which one of the following must be true?\nis_valid(Exists([p:planes], And(flies(Cindy, p), flies(Dave, p), flies(Ed, p)))) ::: (A)\nis_valid(Exists([p:planes], And(flies(Cindy, p), flies(Ed, p)))) ::: (B)\nis_valid(Exists([p:planes], And(flies(Dave, p), flies(Cindy, p)))) ::: (C)\nis_valid(Exists([p:planes], And(flies(Dave, p), flies(Cindy, p), flies(Ed, p), flies(Fran, p)))) ::: (D)\nis_valid(Exists([p:planes], And(flies(Fran, p), flies(Ed, p)))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_4_22",
    "context": "Planes 1, 2, 3, and 4—and no others—are available to fly in an air show. Pilots Anna, Bob, and Cindy are all aboard planes that are flying in the show and they are the only qualified pilots in the show. Copilots Dave, Ed, and Fran are all aboard planes that are flying in the show and they are the only qualified copilots in the show. No plane flies in the show without a qualified pilot aboard. No one but qualified pilots and qualified copilots flies in the show. Anna will only fly in either plane 1 or plane 4. Dave will only fly in either plane 2 or plane 3.",
    "question": "If Cindy and Fran are the only people in one of the planes, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Bob flies with Anna.",
      "B) Dave flies with Ed.",
      "C) Dave and Ed fly with Bob.",
      "D) Dave flies with Bob.",
      "E) Ed flies with Anna."
    ],
    "raw_logic_programs": [
      "# Declarations\nplanes = EnumSort([1, 2, 3, 4])\npilots = EnumSort([Anna, Bob, Cindy])\ncopilots = EnumSort([Dave, Ed, Fran])\nflies = Function([planes, pilots, copilots] -> [bool])\n\n# Constraints\nForAll([p:pilots], Count([p:planes], flies(p, p)) == 1) ::: No plane flies in the show without a qualified pilot aboard\nForAll([c:copilots], Count([c:planes], flies(c, c)) == 1) ::: No one but qualified pilots and qualified copilots flies in the show\nAnd(flies(Anna, 1), flies(Anna, 4)) ::: Anna will only fly in either plane 1 or plane 4\nAnd(flies(Dave, 2), flies(Dave, 3)) ::: Dave will only fly in either plane 2 or plane 3\n\n# Options\nQuestion ::: If Cindy and Fran are the only people in one of the planes, which one of the following must be true?\nis_valid(Exists([p:pilots], And(flies(p, p), flies(Anna, p)))) ::: (A)\nis_valid(Exists([c:copilots], And(flies(c, c), flies(Dave, c)))) ::: (B)\nis_valid(Exists([c:copilots], And(flies(c, c), flies(Dave, c), flies(Bob, c)))) ::: (C)\nis_valid(Exists([c:copilots], And(flies(c, c), flies(Dave, c), flies(Bob, c)))) ::: (D)\nis_valid(Exists([c:copilots], And(flies(c, c), flies(Ed, c), flies(Anna, c)))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_4_23",
    "context": "Planes 1, 2, 3, and 4—and no others—are available to fly in an air show. Pilots Anna, Bob, and Cindy are all aboard planes that are flying in the show and they are the only qualified pilots in the show. Copilots Dave, Ed, and Fran are all aboard planes that are flying in the show and they are the only qualified copilots in the show. No plane flies in the show without a qualified pilot aboard. No one but qualified pilots and qualified copilots flies in the show. Anna will only fly in either plane 1 or plane 4. Dave will only fly in either plane 2 or plane 3.",
    "question": "If plane 1 is used, its crew could consist of",
    "answer": "B",
    "options": [
      "A) Anna, Bob, Cindy, Fran",
      "B) Anna, Bob, Ed, Fran",
      "C) Bob, Cindy, Ed, Fran",
      "D) Bob, Cindy, Dave, Ed",
      "E) Bob, Dave, Ed, Fran"
    ],
    "raw_logic_programs": [
      "# Declarations\nplanes = EnumSort([1, 2, 3, 4])\npilots = EnumSort([Anna, Bob, Cindy])\ncopilots = EnumSort([Dave, Ed, Fran])\ncrew = Function([planes] -> [pilots + copilots])\n\n# Constraints\nForAll([p:planes], Count([pilot:pilots], crew(p) == pilot)) == 1 ::: No plane flies in the show without a qualified pilot aboard\nForAll([p:planes], Count([copilot:copilots], crew(p) == copilot)) == 1 ::: No one but qualified pilots and qualified copilots flies in the show\nAnd(crew(1) == Anna, crew(4) == Anna) ::: Anna will only fly in either plane 1 or plane 4\nAnd(crew(2) == Dave, crew(3) == Dave) ::: Dave will only fly in either plane 2 or plane 3\n\n# Options\nQuestion ::: If plane 1 is used, its crew could consist of\nis_exception(is_sat(crew(1) == Anna + Bob + Cindy + Fran)) ::: A)\nis_exception(is_sat(crew(1) == Anna + Bob + Ed + Fran)) ::: B)\nis_exception(is_sat(crew(1) == Bob + Cindy + Ed + Fran)) ::: C)\nis_exception(is_sat(crew(1) == Bob + Cindy + Dave + Ed)) ::: D)\nis_exception(is_sat(crew(1) == Bob + Dave + Ed + Fran)) ::: E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199112_1-G_4_24",
    "context": "Planes 1, 2, 3, and 4—and no others—are available to fly in an air show. Pilots Anna, Bob, and Cindy are all aboard planes that are flying in the show and they are the only qualified pilots in the show. Copilots Dave, Ed, and Fran are all aboard planes that are flying in the show and they are the only qualified copilots in the show. No plane flies in the show without a qualified pilot aboard. No one but qualified pilots and qualified copilots flies in the show. Anna will only fly in either plane 1 or plane 4. Dave will only fly in either plane 2 or plane 3.",
    "question": "If as many of the pilots and copilots as possible fly in plane 4, that group will consist of",
    "answer": "C",
    "options": [
      "A) exactly two people",
      "B) exactly three people",
      "C) exactly four people",
      "D) exactly five people",
      "E) three pilots and two copilots"
    ],
    "raw_logic_programs": [
      "# Declarations\nplanes = EnumSort([1, 2, 3, 4])\npilots = EnumSort([Anna, Bob, Cindy])\ncopilots = EnumSort([Dave, Ed, Fran])\nflies = Function([planes, pilots, copilots] -> [bool])\n\n# Constraints\nForAll([p:pilots], flies(p, 1) || flies(p, 2) || flies(p, 3) || flies(p, 4)) ::: No plane flies in the show without a qualified pilot aboard\nForAll([c:copilots], flies(c, 1) || flies(c, 2) || flies(c, 3) || flies(c, 4)) ::: No one but qualified pilots and qualified copilots flies in the show\nflies(Anna, 1) || flies(Anna, 4) ::: Anna will only fly in either plane 1 or plane 4\nflies(Dave, 2) || flies(Dave, 3) ::: Dave will only fly in either plane 2 or plane 3\n\n# Options\nQuestion ::: If as many of the pilots and copilots as possible fly in plane 4, that group will consist of\nis_sat(Count([p:pilots, c:copilots], flies(p, 4) || flies(c, 4)) == 2) ::: A) exactly two people\nis_sat(Count([p:pilots, c:copilots], flies(p, 4) || flies(c, 4)) == 3) ::: B) exactly three people\nis_sat"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_1_1",
    "context": "A law firm has exactly nine partners: Fox, Glassen, Hae, Inman, Jacoby, Kohn, Lopez, Malloy, and Nassar. Kohn's salary is greater than both Inman's and Lopez's. Lopez's salary is greater than Nassar's. Inman's salary is greater than Fox's. Fox's salary is greater than Malloy's. Malloy's salary is greater than Glassen's. Glassen's salary is greater than Jacoby's. Jacoby's salary is greater than Hae's.",
    "question": "Which one of the following partners cannot have the third highest salary?",
    "answer": "D",
    "options": [
      "A) Fox",
      "B) Inman",
      "C) Lopez",
      "D) Malloy",
      "E) Nassar"
    ],
    "raw_logic_programs": [
      "# Declarations\npartners = EnumSort([Fox, Glassen, Hae, Inman, Jacoby, Kohn, Lopez, Malloy, Nassar])\nsalaries = Function([partners] -> [int])\nForAll([p:partners], And(1 <= salaries(p), salaries(p) <= 9))\n\n# Constraints\nsalaries(Kohn) > salaries(Inman) ::: Kohn's salary is greater than both Inman's and Lopez's\nsalaries(Kohn) > salaries(Lopez) ::: Kohn's salary is greater than both Inman's and Lopez's\nsalaries(Lopez) > salaries(Nassar) ::: Lopez's salary is greater than Nassar's\nsalaries(Inman) > salaries(Fox) ::: Inman's salary is greater than Fox's\nsalaries(Fox) > salaries(Malloy) ::: Fox's salary is greater than Malloy's\nsalaries(Malloy) > salaries(Glassen) ::: Malloy's salary is greater than Glassen's\nsalaries(Glassen) > salaries(Jacoby) ::: Glassen's salary is greater than Jacoby's\nsalaries(Jacoby) > salaries(Hae) ::: Jacoby's salary is greater than Hae's\n\n# Options\nQuestion ::: Which one of the following partners cannot have the third highest salary?\nis_exception(is_sat(salaries(Fox) == 3)) ::: (A)\nis_exception(is_sat(salaries(Inman) == 3)) ::: (B)\nis"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_1_2",
    "context": "A law firm has exactly nine partners: Fox, Glassen, Hae, Inman, Jacoby, Kohn, Lopez, Malloy, and Nassar. Kohn's salary is greater than both Inman's and Lopez's. Lopez's salary is greater than Nassar's. Inman's salary is greater than Fox's. Fox's salary is greater than Malloy's. Malloy's salary is greater than Glassen's. Glassen's salary is greater than Jacoby's. Jacoby's salary is greater than Hae's.",
    "question": "If Malloy and Nassar earn the same salary, at least how many of the partners must have lower salaries than Lopez?",
    "answer": "C",
    "options": [
      "A) 3",
      "B) 4",
      "C) 5",
      "D) 6",
      "E) 7"
    ],
    "raw_logic_programs": [
      "# Declarations\npartners = EnumSort([Fox, Glassen, Hae, Inman, Jacoby, Kohn, Lopez, Malloy, Nassar])\nsalaries = Function([partners] -> [int])\nForAll([p:partners], And(1 <= salaries(p), salaries(p) <= 9))\n\n# Constraints\nsalaries(Kohn) > salaries(Inman) ::: Kohn's salary is greater than both Inman's and Lopez's\nsalaries(Kohn) > salaries(Lopez) ::: Kohn's salary is greater than both Inman's and Lopez's\nsalaries(Lopez) > salaries(Nassar) ::: Lopez's salary is greater than Nassar's\nsalaries(Inman) > salaries(Fox) ::: Inman's salary is greater than Fox's\nsalaries(Fox) > salaries(Malloy) ::: Fox's salary is greater than Malloy's\nsalaries(Malloy) > salaries(Glassen) ::: Malloy's salary is greater than Glassen's\nsalaries(Glassen) > salaries(Jacoby) ::: Glassen's salary is greater than Jacoby's\nsalaries(Jacoby) > salaries(Hae) ::: Jacoby's salary is greater than Hae's\n\n# Options\nQuestion ::: If Malloy and Nassar earn the same salary, at least how many of the partners must have lower salaries than Lopez?\nis_sat(ForAll([p:partners], Implies(salaries(Malloy) == salaries(Nassar), salaries(L"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_1_3",
    "context": "A law firm has exactly nine partners: Fox, Glassen, Hae, Inman, Jacoby, Kohn, Lopez, Malloy, and Nassar. Kohn's salary is greater than both Inman's and Lopez's. Lopez's salary is greater than Nassar's. Inman's salary is greater than Fox's. Fox's salary is greater than Malloy's. Malloy's salary is greater than Glassen's. Glassen's salary is greater than Jacoby's. Jacoby's salary is greater than Hae's.",
    "question": "The salary rankings of each of the nine partners could be completely determined if which one of the following statements were true?",
    "answer": "D",
    "options": [
      "A) Lopez's salary is greater than Fox's.",
      "B) Lopez's salary is greater than Inman's.",
      "C) Nassar's salary is greater than Fox's.",
      "D) Nassar's salary is greater than Inman's.",
      "E) Nassar's salary is greater than Malloy's."
    ],
    "raw_logic_programs": [
      "# Declarations\npartners = EnumSort([Fox, Glassen, Hae, Inman, Jacoby, Kohn, Lopez, Malloy, Nassar])\nsalaries = Function([partners] -> [int])\nForAll([p:partners], And(1 <= salaries(p), salaries(p) <= 9))\n\n# Constraints\nsalaries(Kohn) > salaries(Inman) ::: Kohn's salary is greater than both Inman's and Lopez's\nsalaries(Kohn) > salaries(Lopez) ::: Kohn's salary is greater than both Inman's and Lopez's\nsalaries(Lopez) > salaries(Nassar) ::: Lopez's salary is greater than Nassar's\nsalaries(Inman) > salaries(Fox) ::: Inman's salary is greater than Fox's\nsalaries(Fox) > salaries(Malloy) ::: Fox's salary is greater than Malloy's\nsalaries(Malloy) > salaries(Glassen) ::: Malloy's salary is greater than Glassen's\nsalaries(Glassen) > salaries(Jacoby) ::: Glassen's salary is greater than Jacoby's\nsalaries(Jacoby) > salaries(Hae) ::: Jacoby's salary is greater than Hae's\n\n# Options\nQuestion ::: The salary rankings of each of the nine partners could be completely determined if which one of the following statements were true?\nis_exception(is_sat(salaries(Lopez) > salaries(Fox))) ::: (A)\nis_exception(is_sat(salaries"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_1_4",
    "context": "A law firm has exactly nine partners: Fox, Glassen, Hae, Inman, Jacoby, Kohn, Lopez, Malloy, and Nassar. Kohn's salary is greater than both Inman's and Lopez's. Lopez's salary is greater than Nassar's. Inman's salary is greater than Fox's. Fox's salary is greater than Malloy's. Malloy's salary is greater than Glassen's. Glassen's salary is greater than Jacoby's. Jacoby's salary is greater than Hae's.",
    "question": "If Nassar's salary is the same as that of one other partner of the firm, which one of the following must be false?",
    "answer": "D",
    "options": [
      "A) Inman's salary is less than Lopez's.",
      "B) Jacoby's salary is less than Lopez's.",
      "C) Lopez's salary is less than Fox's.",
      "D) Lopez's salary is less than Hae's.",
      "E) Nassar's salary is less than Glassen's."
    ],
    "raw_logic_programs": [
      "# Declarations\npartners = EnumSort([Fox, Glassen, Hae, Inman, Jacoby, Kohn, Lopez, Malloy, Nassar])\nsalaries = Function([partners] -> [int])\nForAll([p:partners], And(1 <= salaries(p), salaries(p) <= 9))\n\n# Constraints\nsalaries(Kohn) > salaries(Inman) ::: Kohn's salary is greater than both Inman's and Lopez's\nsalaries(Kohn) > salaries(Lopez) ::: Kohn's salary is greater than both Inman's and Lopez's\nsalaries(Lopez) > salaries(Nassar) ::: Lopez's salary is greater than Nassar's\nsalaries(Inman) > salaries(Fox) ::: Inman's salary is greater than Fox's\nsalaries(Fox) > salaries(Malloy) ::: Fox's salary is greater than Malloy's\nsalaries(Malloy) > salaries(Glassen) ::: Malloy's salary is greater than Glassen's\nsalaries(Glassen) > salaries(Jacoby) ::: Glassen's salary is greater than Jacoby's\nsalaries(Jacoby) > salaries(Hae) ::: Jacoby's salary is greater than Hae's\n\n# Options\nQuestion ::: If Nassar's salary is the same as that of one other partner of the firm, which one of the following must be false?\nis_exception(is_sat(salaries(Inman) < salaries(Lopez))) ::: (A)\nis_exception(is_"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_1_5",
    "context": "A law firm has exactly nine partners: Fox, Glassen, Hae, Inman, Jacoby, Kohn, Lopez, Malloy, and Nassar. Kohn's salary is greater than both Inman's and Lopez's. Lopez's salary is greater than Nassar's. Inman's salary is greater than Fox's. Fox's salary is greater than Malloy's. Malloy's salary is greater than Glassen's. Glassen's salary is greater than Jacoby's. Jacoby's salary is greater than Hae's.",
    "question": "What is the minimum number of different salaries earned by the nine partners of the firm?",
    "answer": "C",
    "options": [
      "A) 5",
      "B) 6",
      "C) 7",
      "D) 8",
      "E) 9"
    ],
    "raw_logic_programs": [
      "# Declarations\npartners = EnumSort([Fox, Glassen, Hae, Inman, Jacoby, Kohn, Lopez, Malloy, Nassar])\nsalaries = EnumSort([int])\nsalary = Function([partners] -> [salaries])\n\n# Constraints\nForAll([p:partners], Count([s:salaries], salary(p) == s) == 1) ::: each partner has a unique salary\nsalary(Kohn) > salary(Inman) ::: Kohn's salary is greater than Inman's\nsalary(Kohn) > salary(Lopez) ::: Kohn's salary is greater than Lopez's\nsalary(Lopez) > salary(Nassar) ::: Lopez's salary is greater than Nassar's\nsalary(Inman) > salary(Fox) ::: Inman's salary is greater than Fox's\nsalary(Fox) > salary(Malloy) ::: Fox's salary is greater than Malloy's\nsalary(Malloy) > salary(Glassen) ::: Malloy's salary is greater than Glassen's\nsalary(Glassen) > salary(Jacoby) ::: Glassen's salary is greater than Jacoby's\nsalary(Jacoby) > salary(Hae) ::: Jacoby's salary is greater than Hae's\n\n# Options\nQuestion ::: What is the minimum number of different salaries earned by the nine partners of the firm?\nis_sat(Count([s:salaries], ForAll([p:partners], salary(p) == s)) == 5)) ::: A) 5"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_1_6",
    "context": "A law firm has exactly nine partners: Fox, Glassen, Hae, Inman, Jacoby, Kohn, Lopez, Malloy, and Nassar. Kohn's salary is greater than both Inman's and Lopez's. Lopez's salary is greater than Nassar's. Inman's salary is greater than Fox's. Fox's salary is greater than Malloy's. Malloy's salary is greater than Glassen's. Glassen's salary is greater than Jacoby's. Jacoby's salary is greater than Hae's.",
    "question": "Assume that the partners of the firm are ranked according to their salaries, from first (highest) to ninth (lowest), and that no two salaries are the same. Which one of the following is a complete and accurate list of Glassen's possible ranks?",
    "answer": "D",
    "options": [
      "A) fifth",
      "B) fifth, sixth",
      "C) fifth, seventh",
      "D) fifth, sixth, seventh",
      "E) fifth, sixth, seventh, eighth"
    ],
    "raw_logic_programs": [
      "# Declarations\npartners = EnumSort([Fox, Glassen, Hae, Inman, Jacoby, Kohn, Lopez, Malloy, Nassar])\nsalaries = Function([partners] -> [int])\nForAll([p:partners], And(1 <= salaries(p), salaries(p) <= 9))\n\n# Constraints\nsalaries(Kohn) > salaries(Inman) ::: Kohn's salary is greater than both Inman's and Lopez's\nsalaries(Kohn) > salaries(Lopez) ::: Kohn's salary is greater than both Inman's and Lopez's\nsalaries(Lopez) > salaries(Nassar) ::: Lopez's salary is greater than Nassar's\nsalaries(Inman) > salaries(Fox) ::: Inman's salary is greater than Fox's\nsalaries(Fox) > salaries(Malloy) ::: Fox's salary is greater than Malloy's\nsalaries(Malloy) > salaries(Glassen) ::: Malloy's salary is greater than Glassen's\nsalaries(Glassen) > salaries(Jacoby) ::: Glassen's salary is greater than Jacoby's\nsalaries(Jacoby) > salaries(Hae) ::: Jacoby's salary is greater than Hae's\n\n# Options\nQuestion ::: Assume that the partners of the firm are ranked according to their salaries, from first (highest) to ninth (lowest), and that no two salaries are the same. Which one of the following is a complete and accurate list of Glassen's possible ranks?\nis_exception(is_sat"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_2_7",
    "context": "Each of five illnesses—J, K, L, M, and N—is characterized by at least one of the following three symptoms: fever, headache, and sneezing. None of the illnesses has any symptom that is not one of these three. Illness J is characterized by headache and sneezing. Illnesses J and K have no symptoms in common. Illnesses J and L have at least one symptom in common. Illness L has a greater number of symptoms than illness K. Illnesses L and N have no symptoms in common. Illness M has more symptoms than illness J.",
    "question": "Which one of the following statements must be false?",
    "answer": "E",
    "options": [
      "A) Illness J has exactly two symptoms.",
      "B) Illness K has exactly one symptom.",
      "C) Illness L has exactly two symptoms.",
      "D) Illness M has exactly three symptoms.",
      "E) Illness N has exactly two symptoms."
    ],
    "raw_logic_programs": [
      "# Declarations\nillnesses = EnumSort([J, K, L, M, N])\nsymptoms = EnumSort([fever, headache, sneezing])\nhas = Function([illnesses, symptoms] -> [bool])\n\n# Constraints\nForAll([i:illnesses], Count([s:symptoms], has(i, s)) >= 1) ::: Each of five illnesses is characterized by at least one of the following three symptoms\nAnd(has(J, headache), has(J, sneezing)) ::: Illness J is characterized by headache and sneezing\nForAll([s:symptoms], Implies(has(J, s), Not(has(K, s)))) ::: Illnesses J and K have no symptoms in common\nAnd(has(J, s), has(L, s)) ::: Illnesses J and L have at least one symptom in common\nCount([s:symptoms], has(L, s)) > Count([s:symptoms], has(K, s)) ::: Illness L has a greater number of symptoms than illness K\nForAll([s:symptoms], Implies(has(L, s), Not(has(N, s)))) ::: Illnesses L and N have no symptoms in common\nCount([s:symptoms], has(M, s)) > Count([s:symptoms], has(J, s)) ::: Illness M has more symptoms than illness J\n\n# Options\nQuestion ::: Which one of the following statements must be false?\nis_exception(is_sat(And(has(J, fever), has(J, headache), has(J, sneezing)))) ::: (A)"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_2_8",
    "context": "Each of five illnesses—J, K, L, M, and N—is characterized by at least one of the following three symptoms: fever, headache, and sneezing. None of the illnesses has any symptom that is not one of these three. Illness J is characterized by headache and sneezing. Illnesses J and K have no symptoms in common. Illnesses J and L have at least one symptom in common. Illness L has a greater number of symptoms than illness K. Illnesses L and N have no symptoms in common. Illness M has more symptoms than illness J.",
    "question": "In which one of the following pairs could the first member of the pair be characterized by exactly the same number and types of symptoms as the second member of the pair?",
    "answer": "C",
    "options": [
      "A) J and N",
      "B) K and L",
      "C) K and N",
      "D) L and M",
      "E) M and N"
    ],
    "raw_logic_programs": [
      "# Declarations\nillnesses = EnumSort([J, K, L, M, N])\nsymptoms = EnumSort([fever, headache, sneezing])\nhas = Function([illnesses, symptoms] -> [bool])\n\n# Constraints\nForAll([i:illnesses], Count([s:symptoms], has(i, s)) >= 1) ::: Each of five illnesses is characterized by at least one of the following three symptoms\nAnd(has(J, headache), has(J, sneezing)) ::: Illness J is characterized by headache and sneezing\nForAll([s:symptoms], Implies(has(J, s), Not(has(K, s)))) ::: Illnesses J and K have no symptoms in common\nAnd(has(J, s), has(L, s)) ::: Illnesses J and L have at least one symptom in common\nCount([s:symptoms], has(L, s)) > Count([s:symptoms], has(K, s)) ::: Illness L has a greater number of symptoms than illness K\nForAll([s:symptoms], Implies(has(L, s), Not(has(N, s)))) ::: Illnesses L and N have no symptoms in common\nCount([s:symptoms], has(M, s)) > Count([s:symptoms], has(J, s)) ::: Illness M has more symptoms than illness J\n\n# Options\nQuestion ::: In which one of the following pairs could the first member of the pair be characterized by exactly the same number and types of symptoms as the second member of the pair?\nis_sat(ForAll([s:symptoms], has"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_2_9",
    "context": "Each of five illnesses—J, K, L, M, and N—is characterized by at least one of the following three symptoms: fever, headache, and sneezing. None of the illnesses has any symptom that is not one of these three. Illness J is characterized by headache and sneezing. Illnesses J and K have no symptoms in common. Illnesses J and L have at least one symptom in common. Illness L has a greater number of symptoms than illness K. Illnesses L and N have no symptoms in common. Illness M has more symptoms than illness J.",
    "question": "If illness L is characterized by a combination of symptoms different from any of the other illnesses, then which one of the following statements must be true?",
    "answer": "A",
    "options": [
      "A) Fever is a symptom of illness L.",
      "B) Sneezing is a symptom of illness L.",
      "C) Headache is a symptom of illness L.",
      "D) Illnesses K and N are characterized by exactly the same symptoms.",
      "E) Illnesses M and N are characterized by exactly the same symptoms."
    ],
    "raw_logic_programs": [
      "# Declarations\nillnesses = EnumSort([J, K, L, M, N])\nsymptoms = EnumSort([fever, headache, sneezing])\nhas = Function([illnesses, symptoms] -> [bool])\n\n# Constraints\nForAll([i:illnesses], Count([s:symptoms], has(i, s)) >= 1) ::: Each of five illnesses is characterized by at least one of the following three symptoms\nAnd(has(J, headache), has(J, sneezing)) ::: Illness J is characterized by headache and sneezing\nForAll([s:symptoms], Implies(has(J, s), Not(has(K, s)))) ::: Illnesses J and K have no symptoms in common\nAnd(has(J, s), has(L, s)) ::: Illnesses J and L have at least one symptom in common\nCount([s:symptoms], has(L, s)) > Count([s:symptoms], has(K, s)) ::: Illness L has a greater number of symptoms than illness K\nForAll([s:symptoms], Implies(has(L, s), Not(has(N, s)))) ::: Illnesses L and N have no symptoms in common\nCount([s:symptoms], has(M, s)) > Count([s:symptoms], has(J, s)) ::: Illness M has more symptoms than illness J\n\n# Options\nQuestion ::: If illness L is characterized by a combination of symptoms different from any of the other illnesses, then which one of the following statements must be true?\nis_valid(has(L, fever)) ::: (A)\nis_valid(has(L, sneezing)) ::: (B)\nis_valid(has(L, headache)) ::: (C)\nis_valid(ForAll([s:symptoms], has(K, s) == has(N, s))) ::: (D)\nis_valid(ForAll([s:symptoms], has(M, s) == has(N, s))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_2_10",
    "context": "Each of five illnesses—J, K, L, M, and N—is characterized by at least one of the following three symptoms: fever, headache, and sneezing. None of the illnesses has any symptom that is not one of these three. Illness J is characterized by headache and sneezing. Illnesses J and K have no symptoms in common. Illnesses J and L have at least one symptom in common. Illness L has a greater number of symptoms than illness K. Illnesses L and N have no symptoms in common. Illness M has more symptoms than illness J.",
    "question": "The illnesses in which one of the following pairs must have exactly one symptom in common?",
    "answer": "E",
    "options": [
      "A) J and L",
      "B) J and M",
      "C) J and N",
      "D) K and L",
      "E) M and N"
    ],
    "raw_logic_programs": [
      "# Declarations\nillnesses = EnumSort([J, K, L, M, N])\nsymptoms = EnumSort([fever, headache, sneezing])\nhas = Function([illnesses, symptoms] -> [bool])\n\n# Constraints\nForAll([i:illnesses], Count([s:symptoms], has(i, s)) >= 1) ::: Each of five illnesses is characterized by at least one of the following three symptoms\nAnd(has(J, headache), has(J, sneezing)) ::: Illness J is characterized by headache and sneezing\nForAll([s:symptoms], Implies(has(J, s), Not(has(K, s)))) ::: Illnesses J and K have no symptoms in common\nAnd(has(J, s), has(L, s)) ::: Illnesses J and L have at least one symptom in common\nCount([s:symptoms], has(L, s)) > Count([s:symptoms], has(K, s)) ::: Illness L has a greater number of symptoms than illness K\nForAll([s:symptoms], Implies(has(L, s), Not(has(N, s)))) ::: Illnesses L and N have no symptoms in common\nCount([s:symptoms], has(M, s)) > Count([s:symptoms], has(J, s)) ::: Illness M has more symptoms than illness J\n\n# Options\nQuestion ::: The illnesses in which one of the following pairs must have exactly one symptom in common?\nis_sat(ForAll([s:symptoms], Implies(has(J, s), has(L, s))))) ::: (A)\nis_sat(ForAll([s:symptoms], Implies(has(J, s), has(M, s))))) ::: (B)\nis_sat(ForAll([s:symptoms], Implies(has(J, s), has(N, s))))) ::: (C)\nis_sat(ForAll([s:symptoms], Implies(has(K, s), has"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_2_11",
    "context": "Each of five illnesses—J, K, L, M, and N—is characterized by at least one of the following three symptoms: fever, headache, and sneezing. None of the illnesses has any symptom that is not one of these three. Illness J is characterized by headache and sneezing. Illnesses J and K have no symptoms in common. Illnesses J and L have at least one symptom in common. Illness L has a greater number of symptoms than illness K. Illnesses L and N have no symptoms in common. Illness M has more symptoms than illness J.",
    "question": "If Walter has exactly two of the three symptoms, then he cannot have all of the symptoms of",
    "answer": "E",
    "options": [
      "A) both illness J and illness L",
      "B) both illness J and illness N",
      "C) both illness K and illness L",
      "D) both illness K and illness N",
      "E) both illness L and illness N"
    ],
    "raw_logic_programs": [
      "# Declarations\nillnesses = EnumSort([J, K, L, M, N])\nsymptoms = EnumSort([fever, headache, sneezing])\nhas = Function([illnesses, symptoms] -> [bool])\n\n# Constraints\nForAll([i:illnesses], Count([s:symptoms], has(i, s)) >= 1) ::: Each of five illnesses is characterized by at least one of the following three symptoms\nAnd(has(J, headache), has(J, sneezing)) ::: Illness J is characterized by headache and sneezing\nForAll([s:symptoms], Implies(has(J, s), Not(has(K, s)))) ::: Illnesses J and K have no symptoms in common\nAnd(has(J, s), has(L, s)) ::: Illnesses J and L have at least one symptom in common\nCount([s:symptoms], has(L, s)) > Count([s:symptoms], has(K, s)) ::: Illness L has a greater number of symptoms than illness K\nForAll([s:symptoms], Implies(has(L, s), Not(has(N, s)))) ::: Illnesses L and N have no symptoms in common\nCount([s:symptoms], has(M, s)) > Count([s:symptoms], has(J, s)) ::: Illness M has more symptoms than illness J\n\n# Options\nQuestion ::: If Walter has exactly two of the three symptoms, then he cannot have all of the symptoms of\nis_exception(is_sat(And(has(J, fever), has(J, headache), has(J, sneezing)))) ::: (A)\nis_exception(is_sat(And(has(J, fever), has(J, headache), has(N, sneezing)))) ::: (B)\nis_exception(is_sat(And(has(K, fever), has(K, headache), has(L, sneezing)))) ::: (C)\nis_exception(is_sat(And("
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_3_12",
    "context": "A street cleaning crew works only Monday to Friday, and only during the day. It takes the crew an entire morning or an entire afternoon to clean a street. During one week the crew cleaned exactly eight streets—First, Second, Third, Fourth, Fifth, Sixth, Seventh, and Eighth streets. The following is known about the crew's schedule for the week: The crew cleaned no street on Friday morning. The crew cleaned no street on Wednesday afternoon. It cleaned Fourth Street on Tuesday morning. It cleaned Seventh Street on Thursday morning. It cleaned Fourth Street before Sixth Street and after Eighth Street. It cleaned Second, Fifth, and Eighth streets on afternoons.",
    "question": "If the crew cleaned Second Street earlier in the week than Seventh Street, then it must have cleaned which one of the following streets on Tuesday afternoon?",
    "answer": "B",
    "options": [
      "A) First Street",
      "B) Second Street",
      "C) Third Street",
      "D) Fifth Street",
      "E) Eighth Street"
    ],
    "raw_logic_programs": [
      "# Declarations\nstreets = EnumSort([First, Second, Third, Fourth, Fifth, Sixth, Seventh, Eighth])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ntimes = EnumSort([morning, afternoon])\ncleaned = Function([streets, days, times] -> [bool])\n\n# Constraints\nForAll([s:streets], Count([d:days, t:times], cleaned(s, d, t)) == 1) ::: It takes the crew an entire morning or an entire afternoon to clean a street\nForAll([d:days], Count([s:streets, t:times], cleaned(s, d, t)) == 2) ::: The crew cleaned exactly eight streets\ncleaned(Fourth, Tuesday, morning) ::: It cleaned Fourth Street on Tuesday morning\ncleaned(Seventh, Thursday, morning) ::: It cleaned Seventh Street on Thursday morning\ncleaned(Second, _, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons\ncleaned(Fifth, _, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons\ncleaned(Eighth, _, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons\nNot(cleaned(_, Friday, morning)) ::: The crew cleaned no street on Friday morning\nNot(cleaned(_, Wednesday, afternoon)) ::: The crew cleaned no street on Wednesday afternoon\ncleaned(Fourth, _, _) < cleaned(Sixth, _, _) ::: It cleaned Fourth Street before Sixth Street\ncleaned(Fourth, _, _) > cleaned(Eighth, _, _) ::: It cleaned Fourth Street after Eighth Street\n\n# Options\nQuestion ::: If the crew cleaned Second Street earlier in the week than Seventh Street, then it must have cleaned which one of the following streets on Tuesday afternoon?\nis_exception(is_sat(cleaned(First, Tuesday, afternoon))) ::: A) First Street\nis_exception("
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_3_13",
    "context": "A street cleaning crew works only Monday to Friday, and only during the day. It takes the crew an entire morning or an entire afternoon to clean a street. During one week the crew cleaned exactly eight streets—First, Second, Third, Fourth, Fifth, Sixth, Seventh, and Eighth streets. The following is known about the crew's schedule for the week: The crew cleaned no street on Friday morning. The crew cleaned no street on Wednesday afternoon. It cleaned Fourth Street on Tuesday morning. It cleaned Seventh Street on Thursday morning. It cleaned Fourth Street before Sixth Street and after Eighth Street. It cleaned Second, Fifth, and Eighth streets on afternoons.",
    "question": "If the crew cleaned Sixth Street on a morning and cleaned Second Street before Seventh Street, then what is the maximum number of streets whose cleaning times cannot be determined?",
    "answer": "C",
    "options": [
      "A) 1",
      "B) 2",
      "C) 3",
      "D) 4",
      "E) 5"
    ],
    "raw_logic_programs": [
      "# Declares\nstreets = EnumSort([First, Second, Third, Fourth, Fifth, Sixth, Seventh, Eighth])\ncleaned = Function([streets, mornings, afternoons] -> [bool])\n\n# Constraints\nForAll([s:streets], Count([m:mornings, a:afternoons], cleaned(s, m, a)) == 1) ::: It takes the crew an entire morning or an entire afternoon to clean a street\ncleaned(First, Monday, morning) == false ::: The crew cleaned no street on Friday morning\ncleaned(First, Wednesday, afternoon) == false ::: The crew cleaned no street on Wednesday afternoon\ncleaned(Fourth, Tuesday, morning) ::: It cleaned Fourth Street on Tuesday morning\ncleaned(Seventh, Thursday, morning) ::: It cleaned Seventh Street on Thursday morning\ncleaned(Fourth, Monday, morning) ::: It cleaned Fourth Street before Sixth Street and after Eighth Street\ncleaned(Sixth, Monday, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons\ncleaned(Second, Monday, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons\ncleaned(Eighth, Monday, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons\n\n# Options\nQuestion ::: If the crew cleaned Sixth Street on a morning and cleaned Second Street before Seventh Street, then what is the maximum number of streets whose cleaning times cannot be determined?\nis_valid(Count([s:streets], Not(cleaned(s, Monday, morning))) == 1) ::: A) 1\nis_valid(Count([s:streets], Not(cleaned(s, Monday, morning))) == 2) ::: B) 2\nis_valid(Count([s:streets], Not(cleaned(s, Monday, morning))) == 3) ::: C) 3\nis_valid(Count([s:streets], Not(cleaned(s, Monday, morning))) == 4)"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_3_14",
    "context": "A street cleaning crew works only Monday to Friday, and only during the day. It takes the crew an entire morning or an entire afternoon to clean a street. During one week the crew cleaned exactly eight streets—First, Second, Third, Fourth, Fifth, Sixth, Seventh, and Eighth streets. The following is known about the crew's schedule for the week: The crew cleaned no street on Friday morning. The crew cleaned no street on Wednesday afternoon. It cleaned Fourth Street on Tuesday morning. It cleaned Seventh Street on Thursday morning. It cleaned Fourth Street before Sixth Street and after Eighth Street. It cleaned Second, Fifth, and Eighth streets on afternoons.",
    "question": "What is the maximum possible number of streets any one of which could be the one the crew cleaned on Friday afternoon?",
    "answer": "E",
    "options": [
      "A) 1",
      "B) 2",
      "C) 3",
      "D) 4",
      "E) 5"
    ],
    "raw_logic_programs": [
      "# Declarations\nstreets = EnumSort([First, Second, Third, Fourth, Fifth, Sixth, Seventh, Eighth])\ncleaned = Function([streets, days, mornings, afternoons] -> [bool])\n\n# Constraints\nForAll([s:streets], Count([d:days, m:mornings, a:afternoons], cleaned(s, d, m, a)) == 1) ::: The crew cleaned exactly eight streets\nForAll([d:days], Count([s:streets, m:mornings, a:afternoons], cleaned(s, d, m, a)) == 2) ::: The crew cleaned no street on Friday morning.\nForAll([d:days], Count([s:streets, m:mornings, a:afternoons], cleaned(s, d, m, a)) == 2) ::: The crew cleaned no street on Wednesday afternoon.\ncleaned(Fourth, Tuesday, morning, _) ::: It cleaned Fourth Street on Tuesday morning.\ncleaned(Seventh, Thursday, morning, _) ::: It cleaned Seventh Street on Thursday morning.\ncleaned(Fourth, _, _, _) > cleaned(Sixth, _, _, _) ::: It cleaned Fourth Street before Sixth Street\ncleaned(Fourth, _, _, _) > cleaned(Eighth, _, _, _) ::: It cleaned Fourth Street before Sixth Street\ncleaned(Second, _, _, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons.\ncleaned(Fifth, _, _, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons.\ncleaned(Eighth, _, _, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons.\n\n# Options\nQuestion ::: What is the maximum possible number of streets any one of which could be the one the crew cleaned on Friday afternoon?\nis_valid(Exists([s:streets], cleaned(s, Friday, _, afternoon))) ::: A) 1\nis_valid("
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_3_15",
    "context": "A street cleaning crew works only Monday to Friday, and only during the day. It takes the crew an entire morning or an entire afternoon to clean a street. During one week the crew cleaned exactly eight streets—First, Second, Third, Fourth, Fifth, Sixth, Seventh, and Eighth streets. The following is known about the crew's schedule for the week: The crew cleaned no street on Friday morning. The crew cleaned no street on Wednesday afternoon. It cleaned Fourth Street on Tuesday morning. It cleaned Seventh Street on Thursday morning. It cleaned Fourth Street before Sixth Street and after Eighth Street. It cleaned Second, Fifth, and Eighth streets on afternoons.",
    "question": "If the crew cleaned First Street earlier in the week than Third Street, then which one of the following statements must be false?",
    "answer": "A",
    "options": [
      "A) The crew cleaned First Street on Tuesday afternoon.",
      "B) The crew cleaned Second Street on Thursday afternoon.",
      "C) The crew cleaned Third Street on Wednesday morning.",
      "D) The crew cleaned Fifth Street on Thursday afternoon.",
      "E) The crew cleaned Sixth Street on Friday afternoon."
    ],
    "raw_logic_programs": [
      "# Declarations\nstreets = EnumSort([First, Second, Third, Fourth, Fifth, Sixth, Seventh, Eighth])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ntimes = EnumSort([morning, afternoon])\ncleaned = Function([streets, days, times] -> [bool])\n\n# Constraints\nForAll([s:streets], Count([d:days, t:times], cleaned(s, d, t)) == 1) ::: The crew cleaned exactly eight streets\nForAll([d:days], Count([s:streets, t:times], cleaned(s, d, t)) == 2) ::: The crew cleaned no street on Friday morning.\nForAll([d:days], Count([s:streets, t:times], cleaned(s, d, t)) == 2) ::: The crew cleaned no street on Wednesday afternoon.\ncleaned(Fourth, Tuesday, morning) ::: It cleaned Fourth Street on Tuesday morning.\ncleaned(Seventh, Thursday, morning) ::: It cleaned Seventh Street on Thursday morning.\ncleaned(Fourth, morning) < cleaned(Sixth, morning) ::: It cleaned Fourth Street before Sixth Street\ncleaned(Fourth, morning) > cleaned(Eighth, morning) ::: It cleaned Fourth Street after Eighth Street\ncleaned(Second, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons\ncleaned(Fifth, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons\ncleaned(Eighth, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons\n\n# Options\nQuestion ::: If the crew cleaned First Street earlier in the week than Third Street, then which one of the following statements must be false?\nis_exception(is_sat(cleaned(First, Tuesday, afternoon))) ::: A) The crew cleaned First Street on Tuesday afternoon.\nis_exception(is_sat(cleaned"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_3_16",
    "context": "A street cleaning crew works only Monday to Friday, and only during the day. It takes the crew an entire morning or an entire afternoon to clean a street. During one week the crew cleaned exactly eight streets—First, Second, Third, Fourth, Fifth, Sixth, Seventh, and Eighth streets. The following is known about the crew's schedule for the week: The crew cleaned no street on Friday morning. The crew cleaned no street on Wednesday afternoon. It cleaned Fourth Street on Tuesday morning. It cleaned Seventh Street on Thursday morning. It cleaned Fourth Street before Sixth Street and after Eighth Street. It cleaned Second, Fifth, and Eighth streets on afternoons.",
    "question": "If the crew cleaned Fifth, Sixth, and Seventh streets in numerical order, then what is the maximum number of different schedules any one of which the crew could have had for the entire week?",
    "answer": "D",
    "options": [
      "A) 1",
      "B) 2",
      "C) 3",
      "D) 4",
      "E) 5"
    ],
    "raw_logic_programs": [
      "# Declares\nstreets = EnumSort([First, Second, Third, Fourth, Fifth, Sixth, Seventh, Eighth])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ntimes = EnumSort([morning, afternoon])\ncleaned = Function([streets, days, times] -> [bool])\n\n# Constraints\nForAll([s:streets], Count([d:days, t:times], cleaned(s, d, t)) == 1) ::: It takes the crew an entire morning or an entire afternoon to clean a street\nForAll([d:days], Count([s:streets, t:times], cleaned(s, d, t)) == 2) ::: The crew cleaned exactly eight streets\ncleaned(Fourth, Tuesday, morning) ::: It cleaned Fourth Street on Tuesday morning\ncleaned(Seventh, Thursday, morning) ::: It cleaned Seventh Street on Thursday morning\ncleaned(Fourth, Eighth, Sixth) ::: It cleaned Fourth Street before Sixth Street and after Eighth Street\ncleaned(Second, Fifth, Eighth, afternoon) ::: It cleaned Second, Fifth, and Eighth streets on afternoons\n\n# Options\nQuestion ::: If the crew cleaned Fifth, Sixth, and Seventh streets in numerical order, then what is the maximum number of different schedules any one of which the crew could have had for the entire week?\nis_sat(ForAll([s:streets], Count([d:days, t:times], cleaned(s, d, t)) == 1)) ::: A) 1\nis_sat(ForAll([s:streets], Count([d:days, t:times], cleaned(s, d, t)) == 2)) ::: B) 2\nis_sat(ForAll([s:streets], Count([d:days, t:times], cleaned(s, d, t)) == 3)) ::: C) 3\nis_sat(ForAll([s:streets], Count([d:days, t:times], cleaned(s"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_3_17",
    "context": "A street cleaning crew works only Monday to Friday, and only during the day. It takes the crew an entire morning or an entire afternoon to clean a street. During one week the crew cleaned exactly eight streets—First, Second, Third, Fourth, Fifth, Sixth, Seventh, and Eighth streets. The following is known about the crew's schedule for the week: The crew cleaned no street on Friday morning. The crew cleaned no street on Wednesday afternoon. It cleaned Fourth Street on Tuesday morning. It cleaned Seventh Street on Thursday morning. It cleaned Fourth Street before Sixth Street and after Eighth Street. It cleaned Second, Fifth, and Eighth streets on afternoons.",
    "question": "Suppose the crew had cleaned Fourth Street on Tuesday afternoon instead of on Tuesday morning, but all other conditions remained the same. Which one of the following statements could be false?",
    "answer": "B",
    "options": [
      "A) The crew cleaned First Street before Second Street.",
      "B) The crew cleaned Second Street before Fifth Street.",
      "C) The crew cleaned Third Street before Second Street.",
      "D) The crew cleaned Sixth Street before Fifth Street.",
      "E) The crew cleaned Seventh Street before Second Street."
    ],
    "raw_logic_programs": [
      "# Declarations\nstreets = EnumSort([First, Second, Third, Fourth, Fifth, Sixth, Seventh, Eighth])\ncleaned = Function([streets] -> [bool])\nForAll([s:streets], And(cleaned(s), Not(cleaned(s))))\n\n# Constraints\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned(s)))) ::: The crew cleaned exactly eight streets\nForAll([s:streets], Or(cleaned(s), Not(cleaned"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_4_18",
    "context": "J, K, L, M, N, and O are square ski chalets of the same size, which are positioned in two straight rows as shown below: J K L row 1: ■ ■ ■ row 2: ■ ■ ■ M N O J is directly opposite M; K is directly opposite N; and L is directly opposite O. After a snowstorm, residents shovel a single continuous path that connects all of the chalets and meets the following conditions: The path is composed of five straight segments, each of which directly connects exactly two of the chalets. Each chalet is directly connected by a segment of the path to another chalet. No chalet is directly connected by segments of the path to more than two other chalets. No segment of the path crosses any other segment. One segment of the path directly connects chalets J and N, and another segment directly connects chalets K and L.",
    "question": "Which one of the following statements could be true?",
    "answer": "E",
    "options": [
      "A) One segment of the path directly connects chalets M and K.",
      "B) One segment of the path directly connects chalets M and L.",
      "C) One segment of the path directly connects chalets M and O.",
      "D) One segment of the path directly connects chalets J and K and another segment directly connects chalets K and M.",
      "E) One segment of the path directly connects chalets O and L and another segment directly connects chalets O and N."
    ],
    "raw_logic_programs": [
      "# Declarations\nchalets = EnumSort([J, K, L, M, N, O])\npath = Function([chalets, chalets] -> [bool])\n\n# Constraints\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 2) ::: Each chalet is directly connected by a segment of the path to another chalet\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) <= 2) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) >= 1) ::: The path is composed of five straight segments, each of which directly connects exactly two of the chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 1) ::: No segment of the path crosses any other segment\npath(J, N) ::: One segment of the path directly connects chalets J and N\npath(K, L) ::: Another segment directly connects chalets K and L\n\n# Options\nQuestion ::: Which one of the following statements could be true?\nis_valid(path(M, K)) ::: (A)\nis_valid(path(M, L)) ::: (B)\nis_valid(path(M, O)) ::: (C)\nis_valid(And(path(J, K), path(K, M))) ::: (D)\nis_valid(And(path(O, L), path(O, N))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10 more than the number of employees in department A. The number of employees in department B is 10 more than the number of employees in department C.\nQuestion:\nIf the"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_4_19",
    "context": "J, K, L, M, N, and O are square ski chalets of the same size, which are positioned in two straight rows as shown below: J K L row 1: ■ ■ ■ row 2: ■ ■ ■ M N O J is directly opposite M; K is directly opposite N; and L is directly opposite O. After a snowstorm, residents shovel a single continuous path that connects all of the chalets and meets the following conditions: The path is composed of five straight segments, each of which directly connects exactly two of the chalets. Each chalet is directly connected by a segment of the path to another chalet. No chalet is directly connected by segments of the path to more than two other chalets. No segment of the path crosses any other segment. One segment of the path directly connects chalets J and N, and another segment directly connects chalets K and L.",
    "question": "If one segment of the path directly connects chalets K and N, then the two chalets in which one of the following pairs must be directly connected to each other by a segment?",
    "answer": "C",
    "options": [
      "A) J and K",
      "B) K and O",
      "C) L and O",
      "D) M and N",
      "E) N and O"
    ],
    "raw_logic_programs": [
      "# Declarations\nchalets = EnumSort([J, K, L, M, N, O])\npath = Function([chalets, chalets] -> [bool])\n\n# Constraints\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 2) ::: Each chalet is directly connected by a segment of the path to another chalet\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) <= 2) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) >= 1) ::: The path is composed of five straight segments, each of which directly connects exactly two of the chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 1) ::: No segment of the path crosses any other segment\npath(J, N) ::: One segment of the path directly connects chalets J and N\npath(K, L) ::: Another segment directly connects chalets K and L\n\n# Options\nQuestion ::: If one segment of the path directly connects chalets K and N, then the two chalets in which one of the following pairs must be directly connected to each other by a segment?\nis_exception(is_sat(path(J, K))) ::: (A)\nis_exception(is_sat(path(K, O))) ::: (B)\nis_exception(is_sat(path(L, O))) ::: (C)\nis_exception(is_sat(path(M, N))) ::: (D)\nis_exception(is_sat(path(N, O))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_4_20",
    "context": "J, K, L, M, N, and O are square ski chalets of the same size, which are positioned in two straight rows as shown below: J K L row 1: ■ ■ ■ row 2: ■ ■ ■ M N O J is directly opposite M; K is directly opposite N; and L is directly opposite O. After a snowstorm, residents shovel a single continuous path that connects all of the chalets and meets the following conditions: The path is composed of five straight segments, each of which directly connects exactly two of the chalets. Each chalet is directly connected by a segment of the path to another chalet. No chalet is directly connected by segments of the path to more than two other chalets. No segment of the path crosses any other segment. One segment of the path directly connects chalets J and N, and another segment directly connects chalets K and L.",
    "question": "If a segment of the path directly connects chalets J and K, then the two chalets in which one of the following pairs must be directly connected to each other by a segment?",
    "answer": "D",
    "options": [
      "A) J and M",
      "B) K and N",
      "C) K and O",
      "D) L and O",
      "E) N and O"
    ],
    "raw_logic_programs": [
      "# Declarations\nchalets = EnumSort([J, K, L, M, N, O])\npath = Function([chalets, chalets] -> [bool])\n\n# Constraints\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 2) ::: Each chalet is directly connected by a segment of the path to another chalet\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) <= 2) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) >= 1) ::: The path is composed of five straight segments, each of which directly connects exactly two of the chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 1) ::: No segment of the path crosses any other segment\npath(J, N) ::: One segment of the path directly connects chalets J and N\npath(K, L) ::: Another segment directly connects chalets K and L\n\n# Options\nQuestion ::: If a segment of the path directly connects chalets J and K, then the two chalets in which one of the following pairs must be directly connected to each other by a segment?\nis_exception(is_sat(path(J, M))) ::: (A)\nis_exception(is_sat(path(K, N))) ::: (B)\nis_exception(is_sat(path(K, O))) ::: (C)\nis_exception(is_sat(path(L, O))) ::: (D)\nis_exception(is_sat(path(N, O))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_4_21",
    "context": "J, K, L, M, N, and O are square ski chalets of the same size, which are positioned in two straight rows as shown below: J K L row 1: ■ ■ ■ row 2: ■ ■ ■ M N O J is directly opposite M; K is directly opposite N; and L is directly opposite O. After a snowstorm, residents shovel a single continuous path that connects all of the chalets and meets the following conditions: The path is composed of five straight segments, each of which directly connects exactly two of the chalets. Each chalet is directly connected by a segment of the path to another chalet. No chalet is directly connected by segments of the path to more than two other chalets. No segment of the path crosses any other segment. One segment of the path directly connects chalets J and N, and another segment directly connects chalets K and L.",
    "question": "If one segment of the path directly connects chalets K and O, then which one of the following statements could be true?",
    "answer": "A",
    "options": [
      "A) Chalet J is directly connected to chalet M.",
      "B) Chalet K is directly connected to chalet N.",
      "C) Chalet L is directly connected to chalet O.",
      "D) Chalet L is directly connected to exactly two chalets.",
      "E) Chalet O is directly connected to exactly one chalet."
    ],
    "raw_logic_programs": [
      "# Declarations\nchalets = EnumSort([J, K, L, M, N, O])\npath = Function([chalets, chalets] -> [bool])\n\n# Constraints\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 2) ::: Each chalet is directly connected by a segment of the path to another chalet\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) <= 2) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) >= 1) ::: The path is composed of five straight segments, each of which directly connects exactly two of the chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 1) ::: Each chalet is directly connected by a segment of the path to another chalet\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 0) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 0) ::: The path is composed of five straight segments, each of which directly connects exactly two of the chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 0) ::: Each chalet is directly connected by a segment of the path to another chalet\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 0) ::: No chalet is directly connected by"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_4_22",
    "context": "J, K, L, M, N, and O are square ski chalets of the same size, which are positioned in two straight rows as shown below: J K L row 1: ■ ■ ■ row 2: ■ ■ ■ M N O J is directly opposite M; K is directly opposite N; and L is directly opposite O. After a snowstorm, residents shovel a single continuous path that connects all of the chalets and meets the following conditions: The path is composed of five straight segments, each of which directly connects exactly two of the chalets. Each chalet is directly connected by a segment of the path to another chalet. No chalet is directly connected by segments of the path to more than two other chalets. No segment of the path crosses any other segment. One segment of the path directly connects chalets J and N, and another segment directly connects chalets K and L.",
    "question": "Which one of the following statements, if true, guarantees that one segment of the path directly connects chalets M and N?",
    "answer": "A",
    "options": [
      "A) One segment of the path directly connects chalets K and J.",
      "B) One segment of the path directly connects chalets N and O.",
      "C) One segment of the path directly connects chalet K and a chalet in row 2.",
      "D) One segment of the path directly connects chalet L and a chalet in row 2.",
      "E) One segment of the path directly connects chalet O and a chalet in row 1."
    ],
    "raw_logic_programs": [
      "# Declarations\nchalets = EnumSort([J, K, L, M, N, O])\nrow = EnumSort([1, 2])\npath = Function([chalets, chalets] -> [bool])\n\n# Constraints\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 2) ::: Each chalet is directly connected by a segment of the path to another chalet\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) <= 2) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) >= 1) ::: The path is composed of five straight segments, each of which directly connects exactly two of the chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 1) ::: No segment of the path crosses any other segment\npath(J, N) ::: One segment of the path directly connects chalets J and N\npath(K, L) ::: Another segment directly connects chalets K and L\n\n# Options\nQuestion ::: Which one of the following statements, if true, guarantees that one segment of the path directly connects chalets M and N?\nis_valid(Exists([c:chalets], path(K, c) && path(c, J))) ::: (A)\nis_valid(Exists([c:chalets], path(N, c) && path(c, O))) ::: (B)\nis_valid(Exists([c:chalets], path(K, c) && row(c) == 2)) ::: (C)\nis_valid(Exists([c:chalets"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_4_23",
    "context": "J, K, L, M, N, and O are square ski chalets of the same size, which are positioned in two straight rows as shown below: J K L row 1: ■ ■ ■ row 2: ■ ■ ■ M N O J is directly opposite M; K is directly opposite N; and L is directly opposite O. After a snowstorm, residents shovel a single continuous path that connects all of the chalets and meets the following conditions: The path is composed of five straight segments, each of which directly connects exactly two of the chalets. Each chalet is directly connected by a segment of the path to another chalet. No chalet is directly connected by segments of the path to more than two other chalets. No segment of the path crosses any other segment. One segment of the path directly connects chalets J and N, and another segment directly connects chalets K and L.",
    "question": "Which one of the following chalets cannot be directly connected by segments of the path to exactly two other chalets?",
    "answer": "C",
    "options": [
      "A) K",
      "B) L",
      "C) M",
      "D) N",
      "E) O"
    ],
    "raw_logic_programs": [
      "# Declarations\nchalets = EnumSort([J, K, L, M, N, O])\npath = Function([chalets, chalets] -> [bool])\n\n# Constraints\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 2) ::: Each chalet is directly connected by a segment of the path to another chalet\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) <= 2) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) >= 1) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 1) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 0) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 2) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 1) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 0) ::: No chalet is directly connected by"
    ]
  },
  {
    "id": "ar_lsat_199202_3-G_4_24",
    "context": "J, K, L, M, N, and O are square ski chalets of the same size, which are positioned in two straight rows as shown below: J K L row 1: ■ ■ ■ row 2: ■ ■ ■ M N O J is directly opposite M; K is directly opposite N; and L is directly opposite O. After a snowstorm, residents shovel a single continuous path that connects all of the chalets and meets the following conditions: The path is composed of five straight segments, each of which directly connects exactly two of the chalets. Each chalet is directly connected by a segment of the path to another chalet. No chalet is directly connected by segments of the path to more than two other chalets. No segment of the path crosses any other segment. One segment of the path directly connects chalets J and N, and another segment directly connects chalets K and L.",
    "question": "If no segment of the path directly connects any chalet in row 1 with the chalet in row 2 that is directly opposite it, then each of the following statements must be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) A segment of the path directly connects chalets M and N.",
      "B) A segment of the path directly connects chalets N and O.",
      "C) Chalet L is directly connected to exactly one other chalet.",
      "D) Chalet N is directly connected to exactly two other chalets.",
      "E) Chalet O is directly connected to exactly two other chalets."
    ],
    "raw_logic_programs": [
      "# Declarations\nchalets = EnumSort([J, K, L, M, N, O])\nrow = EnumSort([1, 2])\npath = Function([chalets, chalets] -> [bool])\n\n# Constraints\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 2) ::: Each chalet is directly connected by a segment of the path to another chalet\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) <= 2) ::: No chalet is directly connected by segments of the path to more than two other chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) >= 1) ::: The path is composed of five straight segments, each of which directly connects exactly two of the chalets\nForAll([c:chalets], Count([c2:chalets], path(c, c2)) == 1) ::: No segment of the path crosses any other segment\npath(J, N) ::: One segment of the path directly connects chalets J and N\npath(K, L) ::: Another segment directly connects chalets K and L\n\n# Options\nQuestion ::: If no segment of the path directly connects any chalet in row 1 with the chalet in row 2 that is directly opposite it, then each of the following statements must be true EXCEPT:\nis_exception(is_sat(path(M, N))) ::: (A)\nis_exception(is_sat(path(N, O))) ::: (B)\nis_exception(is_sat(Count([c:chalets], path(L, c)) == 1))) ::: (C)\nis_exception(is_sat(Count([c:chalets"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_1_1",
    "context": "John receives one grade for each of the following six courses: economics, geology, history, Italian, physics, and Russian. From highest to lowest, the possible grades are A, B, C, D, and E. E is the only failing grade. Two letter grades are consecutive if and only if they are adjacent in the alphabet. John's grades in geology and physics are consecutive. His grades in Italian and Russian are consecutive. He receives a higher grade in economics than in history. He receives a higher grade in geology than in physics.",
    "question": "If John receives the same grade in economics and Italian, and if he fails Russian, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) John's geology grade is a B.",
      "B) John's history grade is a D.",
      "C) John's history grade is an E.",
      "D) John's physics grade is a B.",
      "E) John's physics grade is a C."
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([economics, geology, history, Italian, physics, Russian])\ngrades = EnumSort([A, B, C, D, E])\ngrade = Function([courses] -> [grades])\n\n# Constraints\nForAll([c:courses], Count([g:grades], grade(c) == g) == 1) ::: John receives one grade for each of the following six courses\nAnd(grade(geology) < grade(physics), grade(Italian) < grade(Russian)) ::: John's grades in geology and physics are consecutive. His grades in Italian and Russian are consecutive.\ngrade(economics) > grade(history) ::: He receives a higher grade in economics than in history.\ngrade(geology) > grade(physics) ::: He receives a higher grade in geology than in physics.\n\n# Options\nQuestion ::: If John receives the same grade in economics and Italian, and if he fails Russian, which one of the following must be true?\nis_sat(And(grade(economics) == grade(Italian), grade(Russian) == E, grade(geology) == B)) ::: (A)\nis_sat(And(grade(economics) == grade(Italian), grade(Russian) == E, grade(history) == D)) ::: (B)\nis_sat(And(grade(economics) == grade(Italian), grade(Russian) == E, grade(history) == E)) ::: (C)\nis_sat(And(grade(economics) == grade(Italian), grade(Russian) == E, grade(physics) == B)) ::: (D)\nis_sat(And(grade(economics) == grade(Italian), grade(Russian) == E, grade(physics) == C)) ::: (E)"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_1_2",
    "context": "John receives one grade for each of the following six courses: economics, geology, history, Italian, physics, and Russian. From highest to lowest, the possible grades are A, B, C, D, and E. E is the only failing grade. Two letter grades are consecutive if and only if they are adjacent in the alphabet. John's grades in geology and physics are consecutive. His grades in Italian and Russian are consecutive. He receives a higher grade in economics than in history. He receives a higher grade in geology than in physics.",
    "question": "If John passes all his courses and receives a higher grade in geology than in either language, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) He receives exactly one A.",
      "B) He receives exactly one B.",
      "C) He receives exactly two Bs.",
      "D) He receives at least one B and at least one C.",
      "E) He receives at least one C and at least one D."
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([economics, geology, history, Italian, physics, Russian])\ngrades = EnumSort([A, B, C, D, E])\ngrade = Function([courses] -> [grades])\n\n# Constraints\nForAll([c:courses], grade(c)!= E) ::: John passes all his courses\nAnd(grade(geology) > grade(physics), grade(Italian) > grade(Russian)) ::: John's grades in geology and physics are consecutive. His grades in Italian and Russian are consecutive.\ngrade(economics) > grade(history) ::: He receives a higher grade in economics than in history.\ngrade(geology) > grade(physics) ::: He receives a higher grade in geology than in physics.\n\n# Options\nQuestion ::: If John passes all his courses and receives a higher grade in geology than in either language, which one of the following must be true?\nis_sat(Count([g:grades], grade(economics) == g) == 1) ::: A) He receives exactly one A.\nis_sat(Count([g:grades], grade(economics) == g) == 1) ::: B) He receives exactly one B.\nis_sat(Count([g:grades], grade(economics) == g) == 2) ::: C) He receives exactly two Bs.\nis_sat(Count([g:grades], grade(economics) == g) >= 1) ::: D) He receives at least one B and at least one C.\nis_sat(Count([g:grades], grade(economics) == g) >= 1) ::: E) He receives at least one C and at least one D.\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either man"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_1_3",
    "context": "John receives one grade for each of the following six courses: economics, geology, history, Italian, physics, and Russian. From highest to lowest, the possible grades are A, B, C, D, and E. E is the only failing grade. Two letter grades are consecutive if and only if they are adjacent in the alphabet. John's grades in geology and physics are consecutive. His grades in Italian and Russian are consecutive. He receives a higher grade in economics than in history. He receives a higher grade in geology than in physics.",
    "question": "If John receives a higher grade in physics than in economics and receives a higher grade in economics than in either language, which one of the following allows all six of his grades to be determined?",
    "answer": "E",
    "options": [
      "A) His grade in history is D.",
      "B) His grade in Italian is D.",
      "C) His grades in history and Italian are identical.",
      "D) His grades in history and Russian are identical.",
      "E) His grade in history is higher than his grade in Russian."
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([economics, geology, history, Italian, physics, Russian])\ngrades = EnumSort([A, B, C, D, E])\ngrade = Function([courses] -> [grades])\n\n# Constraints\nForAll([c:courses], Count([g:grades], grade(c) == g) == 1) ::: John receives one grade for each of the following six courses\nAnd(grade(geology) > grade(physics), grade(Italian) > grade(Russian)) ::: John's grades in geology and physics are consecutive. His grades in Italian and Russian are consecutive.\ngrade(economics) > grade(history) ::: He receives a higher grade in economics than in history.\ngrade(geology) > grade(physics) ::: He receives a higher grade in geology than in physics.\n\n# Options\nQuestion ::: If John receives a higher grade in physics than in economics and receives a higher grade in economics than in either language, which one of the following allows all six of his grades to be determined?\nis_sat(And(grade(history) == D, ForAll([c:courses], Count([g:grades], grade(c) == g) == 1))) ::: (A)\nis_sat(And(grade(Italian) == D, ForAll([c:courses], Count([g:grades], grade(c) == g) == 1))) ::: (B)\nis_sat(And(grade(history) == grade(Italian), ForAll([c:courses], Count([g:grades], grade(c) == g) == 1))) ::: (C)\nis_sat(And(grade(history) == grade(Russian), ForAll([c:courses], Count([g:grades], grade(c) == g) == 1))) :::"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_1_4",
    "context": "John receives one grade for each of the following six courses: economics, geology, history, Italian, physics, and Russian. From highest to lowest, the possible grades are A, B, C, D, and E. E is the only failing grade. Two letter grades are consecutive if and only if they are adjacent in the alphabet. John's grades in geology and physics are consecutive. His grades in Italian and Russian are consecutive. He receives a higher grade in economics than in history. He receives a higher grade in geology than in physics.",
    "question": "If John receives a higher grade in physics than in economics and receives a higher grade in history than in Italian, exactly how many of his grades can be determined?",
    "answer": "E",
    "options": [
      "A) 2",
      "B) 3",
      "C) 4",
      "D) 5",
      "E) 6"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([economics, geology, history, Italian, physics, Russian])\ngrades = EnumSort([A, B, C, D, E])\ngrade = Function([courses] -> [grades])\n\n# Constraints\nForAll([c:courses], Count([g:grades], grade(c) == g) == 1) ::: John receives one grade for each of the following six courses\nForAll([g1:grades, g2:grades], Implies(g1 < g2, And(g1!= E, g2!= A))) ::: Two letter grades are consecutive if and only if they are adjacent in the alphabet\nAnd(grade(geology) < grade(physics), grade(Italian) < grade(Russian)) ::: John's grades in geology and physics are consecutive. His grades in Italian and Russian are consecutive\ngrade(economics) > grade(history) ::: He receives a higher grade in economics than in history\ngrade(geology) > grade(physics) ::: He receives a higher grade in geology than in physics\n\n# Options\nQuestion ::: If John receives a higher grade in physics than in economics and receives a higher grade in history than in Italian, exactly how many of his grades can be determined?\nis_sat(ForAll([c:courses], Count([g:grades], grade(c) == g) == 2)) ::: (A)\nis_sat(ForAll([c:courses], Count([g:grades], grade(c) == g) == 3)) ::: (B)\nis_sat(ForAll([c:courses], Count([g:grades], grade(c) == g) == 4)) ::: (C)\nis_sat(ForAll([c:courses], Count([g:grades], grade(c) == g) == 5))"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_1_5",
    "context": "John receives one grade for each of the following six courses: economics, geology, history, Italian, physics, and Russian. From highest to lowest, the possible grades are A, B, C, D, and E. E is the only failing grade. Two letter grades are consecutive if and only if they are adjacent in the alphabet. John's grades in geology and physics are consecutive. His grades in Italian and Russian are consecutive. He receives a higher grade in economics than in history. He receives a higher grade in geology than in physics.",
    "question": "Assume that John's grade in physics is higher than his grade in Italian and consecutive with it and that his grades in Russian and physics differ. Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) John receives both an A and a B.",
      "B) John receives both an A and a C.",
      "C) John receives both a B and a D.",
      "D) John receives both a B and an E.",
      "E) John receives both a D and an E."
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([economics, geology, history, Italian, physics, Russian])\ngrades = EnumSort([A, B, C, D, E])\ngrade = Function([courses] -> [grades])\n\n# Constraints\nForAll([c:courses], Count([g:grades], grade(c) == g) == 1) ::: John receives one grade for each of the following six courses\nAnd(grade(geology) > grade(physics), grade(geology) == grade(physics) + 1) ::: John's grades in geology and physics are consecutive\nAnd(grade(Italian) > grade(Russian), grade(Italian) == grade(Russian) + 1) ::: His grades in Italian and Russian are consecutive\ngrade(economics) > grade(history) ::: He receives a higher grade in economics than in history\ngrade(geology) > grade(physics) ::: He receives a higher grade in geology than in physics\n\n# Options\nQuestion ::: Assume that John's grade in physics is higher than his grade in Italian and consecutive with it and that his grades in Russian and physics differ. Which one of the following must be true?\nis_valid(Exists([g:grades], grade(economics) == g) && Exists([g:grades], grade(history) == g)) ::: (A)\nis_valid(Exists([g:grades], grade(economics) == g) && Exists([g:grades], grade(history) == g)) ::: (B)\nis_valid(Exists([g:grades], grade(economics) == g) && Exists([g:grades], grade(history) == g)) ::: (C)\nis_valid(Exists([g:grades], grade(economics) == g) && Exists([g:grades], grade(history) == g)) ::: (D)\nis_valid(Exists([g:grades], grade(economics) == g) && Exists([g:grades], grade(history) == g)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_1_6",
    "context": "John receives one grade for each of the following six courses: economics, geology, history, Italian, physics, and Russian. From highest to lowest, the possible grades are A, B, C, D, and E. E is the only failing grade. Two letter grades are consecutive if and only if they are adjacent in the alphabet. John's grades in geology and physics are consecutive. His grades in Italian and Russian are consecutive. He receives a higher grade in economics than in history. He receives a higher grade in geology than in physics.",
    "question": "Assume that John receives a lower grade in economics than in physics. He must have failed at least one course if which one of the following is also true?",
    "answer": "E",
    "options": [
      "A) He receives a lower grade in Italian than in economics.",
      "B) He receives a lower grade in Italian than in physics.",
      "C) He receives a lower grade in physics than in Italian.",
      "D) He receives a lower grade in Russian than in economics.",
      "E) He receives a lower grade in Russian than in history."
    ],
    "raw_logic_programs": [
      "# Declares\ncourses = EnumSort([economics, geology, history, Italian, physics, Russian])\ngrades = EnumSort([A, B, C, D, E])\ngrade = Function([courses] -> [grades])\n\n# Constraints\nForAll([c:courses], Count([g:grades], grade(c) == g) == 1) ::: John receives one grade for each of the following six courses\nAnd(grade(geology) < grade(physics), grade(Italian) < grade(Russian)) ::: John's grades in geology and physics are consecutive. His grades in Italian and Russian are consecutive.\ngrade(economics) > grade(history) ::: He receives a higher grade in economics than in history.\ngrade(geology) > grade(physics) ::: He receives a higher grade in geology than in physics.\n\n# Options\nQuestion ::: Assume that John receives a lower grade in economics than in physics. He must have failed at least one course if which one of the following is also true?\nis_exception(is_sat(And(grade(economics) < grade(physics), grade(Italian) < grade(economics)))) ::: (A)\nis_exception(is_sat(And(grade(economics) < grade(physics), grade(Italian) < grade(physics)))) ::: (B)\nis_exception(is_sat(And(grade(economics) < grade(physics), grade(physics) < grade(Italian)))) ::: (C)\nis_exception(is_sat(And(grade(economics) < grade(physics), grade(Russian) < grade(economics)))) ::: (D)\nis_exception(is_sat(And(grade(economics) < grade(physics), grade(Russian) < grade(history)))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers."
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_2_7",
    "context": "A store sells shirts only in small, medium, and large sizes, and only in red, yellow, and blue colors. Casey buys exactly three shirts from the store. A shirt type consists of both a size and a color. Casey does not buy two shirts of the same type. Casey does not buy both a small shirt and a large shirt. No small red shirts are available. No large blue shirts are available.",
    "question": "Which one of the following must be false?",
    "answer": "A",
    "options": [
      "A) Two of the shirts that Casey buys are small and two are red.",
      "B) Two of the shirts that Casey buys are medium and two are red.",
      "C) Two of the shirts that Casey buys are large and two are red.",
      "D) Two of the shirts that Casey buys are small, one is yellow, and one is blue.",
      "E) Two of the shirts that Casey buys are medium, one is yellow, and one is blue."
    ],
    "raw_logic_programs": [
      "# Declarations\nsizes = EnumSort([small, medium, large])\ncolors = EnumSort([red, yellow, blue])\nshirts = Function([sizes, colors] -> [bool])\n\n# Constraints\nForAll([s:sizes, c:colors], Count([t:shirts], shirts(s, c) == t) >= 1) ::: A shirt type consists of both a size and a color\nForAll([s:sizes, c:colors], Count([t:shirts], shirts(s, c) == t) <= 1) ::: Casey does not buy two shirts of the same type\nNot(shirts(small, red)) ::: No small red shirts are available\nNot(shirts(large, blue)) ::: No large blue shirts are available\n\n# Options\nQuestion ::: Which one of the following must be false?\nis_exception(is_sat(And(shirts(small, red), shirts(small, yellow), shirts(small, blue), shirts(medium, red), shirts(medium, yellow), shirts(medium, blue), shirts(large, red), shirts(large, yellow), shirts(large, blue)))) ::: (A)\nis_exception(is_sat(And(shirts(small, red), shirts(small, yellow), shirts(small, blue), shirts(medium, red), shirts(medium, yellow), shirts(medium, blue), shirts(large, red), shirts(large, yellow), shirts(large, blue)))) ::: (B)\nis_exception(is_sat(And(shirts(small, red), shirts(small, yellow), shirts(small, blue), shirts(medium, red), shirts(medium, yellow), shirts(medium, blue), shirts(large, red), shirts(large, yellow), shirts(large, blue)))) ::: (C)\nis_exception(is_sat(And(sh"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_2_8",
    "context": "A store sells shirts only in small, medium, and large sizes, and only in red, yellow, and blue colors. Casey buys exactly three shirts from the store. A shirt type consists of both a size and a color. Casey does not buy two shirts of the same type. Casey does not buy both a small shirt and a large shirt. No small red shirts are available. No large blue shirts are available.",
    "question": "If Casey buys a small blue shirt, which one of the following must be false?",
    "answer": "B",
    "options": [
      "A) Casey buys two blue shirts.",
      "B) Casey buys two red shirts.",
      "C) Casey buys two yellow shirts.",
      "D) Casey buys two small shirts.",
      "E) Casey buys two medium shirts."
    ],
    "raw_logic_programs": [
      "# Declarations\nshirt_types = EnumSort([small_red, small_yellow, small_blue, medium_red, medium_yellow, medium_blue, large_red, large_yellow, large_blue])\nbought = Function([shirt_types] -> [bool])\n\n# Constraints\nForAll([t:shirt_types], Count([b:bought], b == bought(t)) <= 1) ::: Casey does not buy two shirts of the same type\nNot(bought(small_red)) ::: No small red shirts are available\nNot(bought(large_blue)) ::: No large blue shirts are available\n\n# Options\nQuestion ::: If Casey buys a small blue shirt, which one of the following must be false?\nis_exception(is_sat(And(bought(small_red), bought(small_yellow)))) ::: A) Casey buys two blue shirts.\nis_exception(is_sat(And(bought(small_red), bought(small_yellow)))) ::: B) Casey buys two red shirts.\nis_exception(is_sat(And(bought(small_red), bought(small_yellow)))) ::: C) Casey buys two yellow shirts.\nis_exception(is_sat(And(bought(small_red), bought(small_yellow)))) ::: D) Casey buys two small shirts.\nis_exception(is_sat(And(bought(small_red), bought(small_yellow)))) ::: E) Casey buys two medium shirts.\n------\nProblem:\nA company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_2_9",
    "context": "A store sells shirts only in small, medium, and large sizes, and only in red, yellow, and blue colors. Casey buys exactly three shirts from the store. A shirt type consists of both a size and a color. Casey does not buy two shirts of the same type. Casey does not buy both a small shirt and a large shirt. No small red shirts are available. No large blue shirts are available.",
    "question": "If Casey does not buy a medium yellow shirt, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Casey buys either a medium red shirt or a small blue shirt.",
      "B) Casey buys either a medium red shirt or a medium blue shirt.",
      "C) Casey buys either a large red shirt or a small blue shirt.",
      "D) Casey buys either a large red shirt or a medium red shirt.",
      "E) Casey buys either a large yellow shirt or a small yellow shirt."
    ],
    "raw_logic_programs": [
      "# Declarations\nsizes = EnumSort([small, medium, large])\ncolors = EnumSort([red, yellow, blue])\nshirts = EnumSort([shirt_type(s, c) | s <- sizes, c <- colors])\nbought = Function([shirts] -> [bool])\n\n# Constraints\nForAll([s:sizes, c:colors], Count([t:shirts], t == shirt_type(s, c)) == 1) ::: A shirt type consists of both a size and a color\nForAll([t:shirts], Count([b:bought], b == bought(t)) == 1) ::: Casey buys exactly three shirts from the store\nForAll([t:shirts], Implies(bought(t), Not(bought(shirt_type(sizes(sizes(t)), colors(colors(t)))))))) ::: Casey does not buy two shirts of the same type\nForAll([s:sizes], Implies(s == small, Not(bought(shirt_type(s, red))))) ::: Casey does not buy both a small shirt and a large shirt\nForAll([s:sizes], Implies(s == large, Not(bought(shirt_type(s, blue))))) ::: No small red shirts are available\nForAll([s:sizes], Implies(s == large, Not(bought(shirt_type(s, blue))))) ::: No large blue shirts are available\n\n# Options\nQuestion ::: If Casey does not buy a medium yellow shirt, which one of the following must be true?\nis_valid(Exists([t:shirts], bought(t) && shirt_type(t) == shirt_type(medium, red) || shirt_type(t) == shirt_type(small, blue))) ::: A) Casey buys either a medium red shirt or a small blue shirt.\nis_valid(Exists([t:shirts], bought(t) && shirt_type(t) == shirt_type(medium,"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_2_10",
    "context": "A store sells shirts only in small, medium, and large sizes, and only in red, yellow, and blue colors. Casey buys exactly three shirts from the store. A shirt type consists of both a size and a color. Casey does not buy two shirts of the same type. Casey does not buy both a small shirt and a large shirt. No small red shirts are available. No large blue shirts are available.",
    "question": "If Casey buys exactly one medium shirt and does not buy two shirts of the same color, then she cannot buy which one of the following?",
    "answer": "B",
    "options": [
      "A) a medium red shirt",
      "B) a medium yellow shirt",
      "C) a medium blue shirt",
      "D) a large red shirt",
      "E) a large yellow shirt"
    ],
    "raw_logic_programs": [
      "# Declarations\nshirt_types = EnumSort([small_red, small_yellow, small_blue, medium_red, medium_yellow, medium_blue, large_red, large_yellow, large_blue])\nshirts = EnumSort([shirt1, shirt2, shirt3])\nbought = Function([shirts, shirt_types] -> [bool])\n\n# Constraints\nForAll([s:shirts], Count([t:shirt_types], bought(s, t)) == 1) ::: Casey buys exactly three shirts from the store\nForAll([s:shirts], Count([t:shirt_types], bought(s, t)) == 1) ::: Casey does not buy two shirts of the same type\nForAll([s:shirts], Implies(bought(s, small_red), Not(bought(s, large_red)))) ::: Casey does not buy both a small shirt and a large shirt\nForAll([s:shirts], Implies(bought(s, small_red), Not(bought(s, large_blue)))) ::: No small red shirts are available\nForAll([s:shirts], Implies(bought(s, large_blue), Not(bought(s, large_red)))) ::: No large blue shirts are available\n\n# Options\nQuestion ::: If Casey buys exactly one medium shirt and does not buy two shirts of the same color, then she cannot buy which one of the following?\nis_exception(is_sat(bought(shirt1, medium_red) && bought(shirt2, medium_yellow) && bought(shirt3, medium_blue))) ::: (A)\nis_exception(is_sat(bought(shirt1, medium_red) && bought(shirt2, medium_yellow) && bought(shirt3, medium_blue))) ::: (B)\nis_exception(is_sat(bought(shirt1, medium_red) && bought(shirt2, medium_yellow) && bought(shirt"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_2_11",
    "context": "A store sells shirts only in small, medium, and large sizes, and only in red, yellow, and blue colors. Casey buys exactly three shirts from the store. A shirt type consists of both a size and a color. Casey does not buy two shirts of the same type. Casey does not buy both a small shirt and a large shirt. No small red shirts are available. No large blue shirts are available.",
    "question": "If neither large red shirts nor small blue shirts are available, which one of the following must Casey buy?",
    "answer": "D",
    "options": [
      "A) a red shirt",
      "B) a medium yellow shirt",
      "C) either a large shirt or a small shirt",
      "D) either a medium red shirt or a medium blue shirt",
      "E) either a large yellow shirt or a medium blue shirt"
    ],
    "raw_logic_programs": [
      "# Declarations\nshirt_types = EnumSort([small_red, small_yellow, small_blue, medium_red, medium_yellow, medium_blue, large_red, large_yellow, large_blue])\nshirts = EnumSort([shirt_1, shirt_2, shirt_3])\nbought = Function([shirts, shirt_types] -> [bool])\n\n# Constraints\nForAll([s:shirts], Count([t:shirt_types], bought(s, t)) == 1) ::: Casey buys exactly three shirts from the store\nForAll([s:shirts], Count([t:shirt_types], bought(s, t)) == 1) ::: Casey does not buy two shirts of the same type\nForAll([s:shirts], Implies(bought(s, small_red), Not(bought(s, large_red)))) ::: Casey does not buy both a small shirt and a large shirt\nForAll([s:shirts], Implies(bought(s, small_red), Not(bought(s, large_red)))) ::: No small red shirts are available\nForAll([s:shirts], Implies(bought(s, large_blue), Not(bought(s, small_blue)))) ::: No large blue shirts are available\n\n# Options\nQuestion ::: If neither large red shirts nor small blue shirts are available, which one of the following must Casey buy?\nis_valid(Exists([s:shirts], bought(s, red))) ::: (A)\nis_valid(Exists([s:shirts], bought(s, medium_yellow))) ::: (B)\nis_valid(Exists([s:shirts], Or(bought(s, small), bought(s, large)))) ::: (C)\nis_valid(Exists([s:shirts], Or(bought(s, medium_red), bought(s, medium_blue)))) ::: (D)\nis_valid(Exists([s:shirts], Or(bought"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_3_12",
    "context": "A hobbyist is stocking her aquarium with exactly three fish of different types and with exactly two species of plants. The only fish under consideration are a G, an H, a J, a K, and an L, and the only kinds of plants under consideration are of the species W, X, Y, and Z. She will observe the following conditions: If she selects the G, she can select neither the H nor a Y. She cannot select the H unless she selects the K. She cannot select the J unless she selects a W. If she selects the K, she must select an X.",
    "question": "Which one of the following is an acceptable selection of fish and plants for the aquarium? Fish Plants",
    "answer": "B",
    "options": [
      "A) G, H, K W, Y",
      "B) G, J, K W, X",
      "C) G, J, L X, Z",
      "D) H, J, L W, Z",
      "E) H, K, L Y, Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nfish = EnumSort([G, H, J, K, L])\nplants = EnumSort([W, X, Y, Z])\nstocks = Function([fish, plants] -> [bool])\n\n# Constraints\nForAll([f:fish], Count([p:plants], stocks(f, p)) <= 1) ::: exactly three fish of different types\nForAll([p:plants], Count([f:fish], stocks(f, p)) <= 1) ::: exactly two species of plants\nNot(stocks(G, H) && stocks(G, Y)) ::: If she selects the G, she can select neither the H nor a Y\nNot(stocks(H, K)) ::: She cannot select the H unless she selects the K\nNot(stocks(J, W)) ::: She cannot select the J unless she selects a W\nstocks(K, X) ::: If she selects the K, she must select an X\n\n# Options\nQuestion ::: Which one of the following is an acceptable selection of fish and plants for the aquarium? Fish Plants\nis_sat(And(stocks(G, H), stocks(G, K), stocks(G, W), stocks(G, Y))) ::: A) G, H, K W, Y\nis_sat(And(stocks(G, J), stocks(G, K), stocks(G, W), stocks(G, X))) ::: B) G, J, K W, X\nis_sat(And(stocks(G, J), stocks(G, L), stocks(G, X), stocks(G, Z))) ::: C) G, J, L X, Z\nis_sat(And(stocks(H, J), stocks(H, L), stocks(H, W), stocks(H, Z))) ::: D) H, J, L W, Z\nis_sat(And(stocks(H, K), stocks(H, L), stocks(H, Y), stocks(H, Z))) ::: E) H, K, L Y, Z"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_3_13",
    "context": "A hobbyist is stocking her aquarium with exactly three fish of different types and with exactly two species of plants. The only fish under consideration are a G, an H, a J, a K, and an L, and the only kinds of plants under consideration are of the species W, X, Y, and Z. She will observe the following conditions: If she selects the G, she can select neither the H nor a Y. She cannot select the H unless she selects the K. She cannot select the J unless she selects a W. If she selects the K, she must select an X.",
    "question": "If the hobbyist selects the H, which one of the following must also be true?",
    "answer": "B",
    "options": [
      "A) She selects at least one W.",
      "B) She selects at least one X.",
      "C) She selects the J, but no Y's.",
      "D) She selects the K, but no X's.",
      "E) She selects at least one X, but no Y's."
    ],
    "raw_logic_programs": [
      "# Declarations\nfish = EnumSort([G, H, J, K, L])\nplants = EnumSort([W, X, Y, Z])\nselected = Function([fish, plants] -> [bool])\n\n# Constraints\nForAll([f:fish], Count([p:plants], selected(f, p)) >= 1) ::: exactly three fish of different types\nForAll([p:plants], Count([f:fish], selected(f, p)) >= 1) ::: exactly two species of plants\nImplies(selected(G, f), Not(selected(H, f))) ::: If she selects the G, she can select neither the H nor a Y\nImplies(selected(H, f), selected(K, f)) ::: She cannot select the H unless she selects the K\nImplies(selected(J, f), selected(W, f)) ::: She cannot select the J unless she selects a W\nImplies(selected(K, f), selected(X, f)) ::: If she selects the K, she must select an X\n\n# Options\nQuestion ::: If the hobbyist selects the H, which one of the following must also be true?\nis_sat(ForAll([f:fish], selected(H, f))) ::: A) She selects at least one W.\nis_sat(ForAll([f:fish], selected(H, f))) ::: B) She selects at least one X.\nis_sat(ForAll([f:fish], selected(H, f))) ::: C) She selects the J, but no Y's.\nis_sat(ForAll([f:fish], selected(H, f))) ::: D) She selects the K, but no X's.\nis_sat(ForAll([f:fish], selected(H, f))) ::: E) She selects at least one X, but no Y's.\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: sales, production, and accounting. The following conditions apply: A is assigned to work"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_3_14",
    "context": "A hobbyist is stocking her aquarium with exactly three fish of different types and with exactly two species of plants. The only fish under consideration are a G, an H, a J, a K, and an L, and the only kinds of plants under consideration are of the species W, X, Y, and Z. She will observe the following conditions: If she selects the G, she can select neither the H nor a Y. She cannot select the H unless she selects the K. She cannot select the J unless she selects a W. If she selects the K, she must select an X.",
    "question": "If the hobbyist selects both X's and Z's, which one of the following could be the group of fish she selects?",
    "answer": "C",
    "options": [
      "A) G, H, K",
      "B) G, J, K",
      "C) G, K, L",
      "D) H, J, L",
      "E) J, K, L"
    ],
    "raw_logic_programs": [
      "# Declarations\nfish = EnumSort([G, H, J, K, L])\nplants = EnumSort([W, X, Y, Z])\nselected = Function([fish, plants] -> [bool])\n\n# Constraints\nForAll([f:fish], Count([p:plants], selected(f, p)) <= 1) ::: exactly three fish of different types\nForAll([p:plants], Count([f:fish], selected(f, p)) <= 1) ::: exactly two species of plants\nImplies(selected(G, f), Not(selected(H, f))) ::: If she selects the G, she can select neither the H nor a Y\nImplies(selected(H, f), selected(K, f)) ::: She cannot select the H unless she selects the K\nImplies(selected(J, f), selected(W, f)) ::: She cannot select the J unless she selects a W\nImplies(selected(K, f), selected(X, f)) ::: If she selects the K, she must select an X\n\n# Options\nQuestion ::: If the hobbyist selects both X's and Z's, which one of the following could be the group of fish she selects?\nis_sat(And(selected(G, f), selected(H, f), selected(K, f))) ::: A) G, H, K\nis_sat(And(selected(G, f), selected(J, f), selected(K, f))) ::: B) G, J, K\nis_sat(And(selected(G, f), selected(K, f), selected(L, f))) ::: C) G, K, L\nis_sat(And(selected(H, f), selected(J, f), selected(L, f))) ::: D) H, J, L\nis_sat(And(selected(J, f), selected(K, f), selected(L, f))) ::: E) J, K, L\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_3_15",
    "context": "A hobbyist is stocking her aquarium with exactly three fish of different types and with exactly two species of plants. The only fish under consideration are a G, an H, a J, a K, and an L, and the only kinds of plants under consideration are of the species W, X, Y, and Z. She will observe the following conditions: If she selects the G, she can select neither the H nor a Y. She cannot select the H unless she selects the K. She cannot select the J unless she selects a W. If she selects the K, she must select an X.",
    "question": "The hobbyist could select any of the following groups of fish for the aquarium EXCEPT",
    "answer": "C",
    "options": [
      "A) G, K, L",
      "B) H, J, K",
      "C) H, J, L",
      "D) H, K, L",
      "E) J, K, L"
    ],
    "raw_logic_programs": [
      "# Declarations\nfish = EnumSort([G, H, J, K, L])\nplants = EnumSort([W, X, Y, Z])\nselected = Function([fish, plants] -> [bool])\n\n# Constraints\nForAll([f:fish], Count([p:plants], selected(f, p)) <= 1) ::: exactly three fish of different types\nForAll([p:plants], Count([f:fish], selected(f, p)) <= 1) ::: exactly two species of plants\nImplies(selected(G, f), Not(selected(H, f))) ::: If she selects the G, she can select neither the H nor a Y\nImplies(selected(H, f), selected(K, f)) ::: She cannot select the H unless she selects the K\nImplies(selected(J, f), selected(W, f)) ::: She cannot select the J unless she selects a W\nImplies(selected(K, f), selected(X, f)) ::: If she selects the K, she must select an X\n\n# Options\nQuestion ::: The hobbyist could select any of the following groups of fish for the aquarium EXCEPT\nis_exception(is_sat(And(selected(G, f), selected(K, f), selected(L, f)))) ::: A) G, K, L\nis_exception(is_sat(And(selected(H, f), selected(J, f), selected(K, f)))) ::: B) H, J, K\nis_exception(is_sat(And(selected(H, f), selected(J, f), selected(L, f)))) ::: C) H, J, L\nis_exception(is_sat(And(selected(H, f), selected(K, f), selected(L, f)))) ::: D) H, K, L\nis_exception(is_sat(And(selected(J, f), selected(K, f), selected(L, f)))) ::: E) J, K, L\n------"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_3_16",
    "context": "A hobbyist is stocking her aquarium with exactly three fish of different types and with exactly two species of plants. The only fish under consideration are a G, an H, a J, a K, and an L, and the only kinds of plants under consideration are of the species W, X, Y, and Z. She will observe the following conditions: If she selects the G, she can select neither the H nor a Y. She cannot select the H unless she selects the K. She cannot select the J unless she selects a W. If she selects the K, she must select an X.",
    "question": "If the hobbyist selects a Y, which one of the following must be the group of fish she selects?",
    "answer": "D",
    "options": [
      "A) G, H, K",
      "B) H, J, K",
      "C) H, J, L",
      "D) H, K, L",
      "E) J, K, L"
    ],
    "raw_logic_programs": [
      "# Declarations\nfish = EnumSort([G, H, J, K, L])\nplants = EnumSort([W, X, Y, Z])\nselected = Function([fish, plants] -> [bool])\n\n# Constraints\nForAll([f:fish], Count([p:plants], selected(f, p)) <= 1) ::: exactly three fish of different types\nForAll([p:plants], Count([f:fish], selected(f, p)) <= 1) ::: exactly two species of plants\nImplies(selected(G, f), Not(selected(H, f))) ::: If she selects the G, she can select neither the H nor a Y\nImplies(selected(H, f), selected(K, f)) ::: She cannot select the H unless she selects the K\nImplies(selected(J, f), selected(W, f)) ::: She cannot select the J unless she selects a W\nImplies(selected(K, f), selected(X, f)) ::: If she selects the K, she must select an X\n\n# Options\nQuestion ::: If the hobbyist selects a Y, which one of the following must be the group of fish she selects?\nis_sat(And(selected(G, f), selected(H, f), selected(K, f))) ::: A) G, H, K\nis_sat(And(selected(H, f), selected(J, f), selected(K, f))) ::: B) H, J, K\nis_sat(And(selected(H, f), selected(J, f), selected(L, f))) ::: C) H, J, L\nis_sat(And(selected(H, f), selected(K, f), selected(L, f))) ::: D) H, K, L\nis_sat(And(selected(J, f), selected(K, f), selected(L, f))) ::: E) J, K, L\n------\nProblem:\nA company has exactly six employees: A, B, C,"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_3_17",
    "context": "A hobbyist is stocking her aquarium with exactly three fish of different types and with exactly two species of plants. The only fish under consideration are a G, an H, a J, a K, and an L, and the only kinds of plants under consideration are of the species W, X, Y, and Z. She will observe the following conditions: If she selects the G, she can select neither the H nor a Y. She cannot select the H unless she selects the K. She cannot select the J unless she selects a W. If she selects the K, she must select an X.",
    "question": "The hobbyist could select any of the following plant combinations EXCEPT",
    "answer": "B",
    "options": [
      "A) W and X",
      "B) W and Y",
      "C) W and Z",
      "D) X and Y",
      "E) X and Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nfish = EnumSort([G, H, J, K, L])\nplants = EnumSort([W, X, Y, Z])\nspecies = EnumSort([fish, plants])\nselected = Function([species] -> [bool])\nForAll([s:species], And(selected(s) == true, selected(s) == false))\n\n# Constraints\nForAll([f:fish], Or(selected(f), Not(selected(f)))) ::: exactly three fish of different types\nForAll([p:plants], Or(selected(p), Not(selected(p)))) ::: exactly two species of plants\nImplies(selected(G), Not(selected(H))) ::: If she selects the G, she can select neither the H nor a Y\nImplies(selected(H), selected(K)) ::: She cannot select the H unless she selects the K\nImplies(selected(J), selected(W)) ::: She cannot select the J unless she selects a W\nImplies(selected(K), selected(X)) ::: If she selects the K, she must select an X\n\n# Options\nQuestion ::: The hobbyist could select any of the following plant combinations EXCEPT\nis_exception(is_sat(selected(W) && selected(X))) ::: A) W and X\nis_exception(is_sat(selected(W) && selected(Y))) ::: B) W and Y\nis_exception(is_sat(selected(W) && selected(Z))) ::: C) W and Z\nis_exception(is_sat(selected(X) && selected(Y))) ::: D) X and Y\nis_exception(is_sat(selected(X) && selected(Z))) ::: E) X and Z\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following departments: accounting, human resources, information technology, and marketing. The following conditions apply: B is assigned to work"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_4_18",
    "context": "A committee ranks five towns—Palmdale, Quietville, Riverdale, Seaside, Tidetown—from first (best) to fifth (worst) on each of three criteria: climate, location, friendliness. For each of the three criteria, none of the five towns receives the same ranking as any other town does. In climate, Tidetown is ranked third, and Seaside fourth. In location, Quietville is ranked second, Riverdale third, Palmdale fourth. In friendliness, Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth. Riverdale receives a better ranking in climate than in friendliness. Quietville's three ranking are all different from each other.",
    "question": "Which of the following is a complete and accurate list of the rankings any one of which could be the ranking on climate given to Riverdale?",
    "answer": "B",
    "options": [
      "A) first",
      "B) first, second",
      "C) first, fifth",
      "D) second, fifth",
      "E) first, second, fifth"
    ],
    "raw_logic_programs": [
      "# Declarations\ntowns = EnumSort([Palmdale, Quietville, Riverdale, Seaside, Tidetown])\ncriteria = EnumSort([climate, location, friendliness])\nranks = Function([towns, criteria] -> [int])\n\n# Constraints\nForAll([t:towns, c:criteria], And(1 <= ranks(t, c), ranks(t, c) <= 5)) ::: none of the five towns receives the same ranking as any other town does\nranks(Tidetown, climate) == 3 ::: Tidetown is ranked third, and Seaside fourth\nranks(Quietville, location) == 2 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Riverdale, friendliness) == 4 ::: Riverdale receives a better ranking in climate than in friendliness\nranks(Quietville, friendliness) == 4 ::: Quietville is ranked fourth and Seaside fifth\nranks(Tidetown, friendliness) > ranks(Palmdale, friendliness) ::: Tidetown's ranking is better than Palmdale's\nDistinct([r:int], ranks(Quietville, climate)) ::: Quietville's three ranking are all different from each other\n\n# Options\nQuestion ::: Which of the following is a complete and accurate list of the rankings any one of which could be the ranking on climate given to Riverdale?\nis_valid(Exists([r:int], ranks(Riverdale, climate) == r)) ::: A) first\nis_valid(Exists([r:int], Or(ranks(Riverdale, climate) == r, ranks(Riverdale, climate) == 2))) ::: B) first, second\nis_valid(Exists([r:int], Or(ranks(Riverdale, climate) == r, ranks(Riverdale, climate) == 5))) ::: C) first, fifth\nis_"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_4_19",
    "context": "A committee ranks five towns—Palmdale, Quietville, Riverdale, Seaside, Tidetown—from first (best) to fifth (worst) on each of three criteria: climate, location, friendliness. For each of the three criteria, none of the five towns receives the same ranking as any other town does. In climate, Tidetown is ranked third, and Seaside fourth. In location, Quietville is ranked second, Riverdale third, Palmdale fourth. In friendliness, Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth. Riverdale receives a better ranking in climate than in friendliness. Quietville's three ranking are all different from each other.",
    "question": "Which of the following is a town that CANNOT be ranked fifth on any one of the three criteria?",
    "answer": "C",
    "options": [
      "A) Palmdale",
      "B) Quietville",
      "C) Riverdale",
      "D) Seaside",
      "E) Tidetown"
    ],
    "raw_logic_programs": [
      "# Declarations\ntowns = EnumSort([Palmdale, Quietville, Riverdale, Seaside, Tidetown])\ncriteria = EnumSort([climate, location, friendliness])\nranks = Function([towns, criteria] -> [int])\n\n# Constraints\nForAll([t:towns], Count([c:criteria], ranks(t, c)) == 3) ::: each town receives three rankings\nForAll([c:criteria], Count([t:towns], ranks(t, c)) == 5) ::: each criterion receives five rankings\nForAll([t:towns, c:criteria], And(1 <= ranks(t, c), ranks(t, c) <= 5)) ::: each ranking is between 1 and 5\nForAll([t:towns, c:criteria], Implies(t!= t, ranks(t, c)!= ranks(t, c))) ::: none of the five towns receives the same ranking as any other town does\nranks(Tidetown, climate) == 3 ::: Tidetown is ranked third in climate\nranks(Seaside, climate) == 4 ::: Seaside fourth in climate\nranks(Quietville, location) == 2 ::: Quietville is ranked second in location\nranks(Riverdale, location) == 3 ::: Riverdale is ranked third in location\nranks(Palmdale, location) == 4 ::: Palmdale is ranked fourth in location\nranks(Tidetown, friendliness) > ranks(Palmdale, friendliness) ::: Tidetown's ranking is better than Palmdale's in friendliness\nranks(Quietville, friendliness) == 4 ::: Quietville is ranked fourth in friendliness\nranks(Seaside, friendliness) == 5 ::: Seaside is ranked fifth in friendliness\nranks(Riverdale, climate) > ranks(Riverdale, friend"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_4_20",
    "context": "A committee ranks five towns—Palmdale, Quietville, Riverdale, Seaside, Tidetown—from first (best) to fifth (worst) on each of three criteria: climate, location, friendliness. For each of the three criteria, none of the five towns receives the same ranking as any other town does. In climate, Tidetown is ranked third, and Seaside fourth. In location, Quietville is ranked second, Riverdale third, Palmdale fourth. In friendliness, Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth. Riverdale receives a better ranking in climate than in friendliness. Quietville's three ranking are all different from each other.",
    "question": "Which of the following could be true?",
    "answer": "C",
    "options": [
      "A) Palmdale is ranked first in both climate and friendliness.",
      "B) Quietville is ranked second in both climate and location.",
      "C) Riverdale is ranked first in climate and third in both location and friendliness.",
      "D) Seaside is ranked fifth in friendliness and fourth in both climate and location.",
      "E) Tidetown is ranked third in both climate and friendliness."
    ],
    "raw_logic_programs": [
      "# Declarations\ntowns = EnumSort([Palmdale, Quietville, Riverdale, Seaside, Tidetown])\ncriteria = EnumSort([climate, location, friendliness])\nranks = Function([towns, criteria] -> [int])\n\n# Constraints\nForAll([t:towns, c:criteria], And(1 <= ranks(t, c), ranks(t, c) <= 5)) ::: none of the five towns receives the same ranking as any other town does\nranks(Tidetown, climate) == 3 ::: Tidetown is ranked third, and Seaside fourth\nranks(Seaside, climate) == 4 ::: Tidetown is ranked third, and Seaside fourth\nranks(Quietville, location) == 2 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Riverdale, location) == 3 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Palmdale, location) == 4 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Tidetown, friendliness) > ranks(Palmdale, friendliness) ::: Tidetown's ranking is better than Palmdale's\nranks(Quietville, friendliness) == 4 ::: Quietville is ranked fourth\nranks(Seaside, friendliness) == 5 ::: Seaside is ranked fifth\nranks(Riverdale, climate) > ranks(Riverdale, friendliness) ::: Riverdale receives a better ranking in climate than in friendliness\nForAll([c:criteria], Distinct([r:int], ranks(Quietville, c) == r)) ::: Quietville's three ranking are all different from each other\n\n# Options\nQuestion ::: Which of the following could be true?\nis_valid(And(ranks(Palmdale, climate)"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_4_21",
    "context": "A committee ranks five towns—Palmdale, Quietville, Riverdale, Seaside, Tidetown—from first (best) to fifth (worst) on each of three criteria: climate, location, friendliness. For each of the three criteria, none of the five towns receives the same ranking as any other town does. In climate, Tidetown is ranked third, and Seaside fourth. In location, Quietville is ranked second, Riverdale third, Palmdale fourth. In friendliness, Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth. Riverdale receives a better ranking in climate than in friendliness. Quietville's three ranking are all different from each other.",
    "question": "If Quietville is ranked first in climate, then it must be true that",
    "answer": "D",
    "options": [
      "A) Palmdale is ranked second in climate",
      "B) Palmdale is ranked third in friendliness",
      "C) Riverdale is ranked second in friendliness",
      "D) Riverdale is ranked third in friendliness",
      "E) Tidetown is ranked fifth in location"
    ],
    "raw_logic_programs": [
      "# Declarations\ntowns = EnumSort([Palmdale, Quietville, Riverdale, Seaside, Tidetown])\ncriteria = EnumSort([climate, location, friendliness])\nranks = Function([towns, criteria] -> [int])\n\n# Constraints\nForAll([t:towns, c:criteria], And(1 <= ranks(t, c), ranks(t, c) <= 5)) ::: none of the five towns receives the same ranking as any other town does\nranks(Tidetown, climate) == 3 ::: Tidetown is ranked third, and Seaside fourth\nranks(Quietville, location) == 2 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Riverdale, location) == 3 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Palmdale, location) == 4 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Seaside, location) == 5 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Tidetown, friendliness) == 4 ::: Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth\nranks(Palmdale, friendliness) == 5 ::: Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth\nranks(Quietville, friendliness) == 4 ::: Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth\nranks(Seaside, friendliness) == 5 ::: Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth\nranks(Riverdale, climate) > ranks(Riverdale, friendlin"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_4_22",
    "context": "A committee ranks five towns—Palmdale, Quietville, Riverdale, Seaside, Tidetown—from first (best) to fifth (worst) on each of three criteria: climate, location, friendliness. For each of the three criteria, none of the five towns receives the same ranking as any other town does. In climate, Tidetown is ranked third, and Seaside fourth. In location, Quietville is ranked second, Riverdale third, Palmdale fourth. In friendliness, Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth. Riverdale receives a better ranking in climate than in friendliness. Quietville's three ranking are all different from each other.",
    "question": "If Palmdale is ranked second in climate, then which one of the following can be true?",
    "answer": "A",
    "options": [
      "A) Palmdale is ranked second in friendliness.",
      "B) Quietville is ranked first in climate.",
      "C) Riverdale is ranked first in friendliness.",
      "D) Riverdale is ranked fifth in climate.",
      "E) Tidetown is ranked third in friendliness."
    ],
    "raw_logic_programs": [
      "# Declarations\ntowns = EnumSort([Palmdale, Quietville, Riverdale, Seaside, Tidetown])\ncriteria = EnumSort([climate, location, friendliness])\nranks = Function([towns, criteria] -> [int])\n\n# Constraints\nForAll([t:towns, c:criteria], And(1 <= ranks(t, c), ranks(t, c) <= 5)) ::: none of the five towns receives the same ranking as any other town does\nranks(Tidetown, climate) == 3 ::: Tidetown is ranked third, and Seaside fourth\nranks(Quietville, location) == 2 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Riverdale, location) == 3 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Palmdale, location) == 4 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Seaside, location) == 5 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Tidetown, friendliness) == 4 ::: Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth\nranks(Palmdale, friendliness) == 5 ::: Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth\nranks(Quietville, friendliness) == 4 ::: Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth\nranks(Seaside, friendliness) == 5 ::: Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth\nranks(Riverdale, climate) > ranks(Riverdale, friendlin"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_4_23",
    "context": "A committee ranks five towns—Palmdale, Quietville, Riverdale, Seaside, Tidetown—from first (best) to fifth (worst) on each of three criteria: climate, location, friendliness. For each of the three criteria, none of the five towns receives the same ranking as any other town does. In climate, Tidetown is ranked third, and Seaside fourth. In location, Quietville is ranked second, Riverdale third, Palmdale fourth. In friendliness, Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth. Riverdale receives a better ranking in climate than in friendliness. Quietville's three ranking are all different from each other.",
    "question": "If Tidetown is ranked first in location and Riverdale is ranked second in friendliness, then it is possible to deduce with certainty all three rankings for exactly how many of the towns?",
    "answer": "E",
    "options": [
      "A) One",
      "B) Two",
      "C) Three",
      "D) Four",
      "E) Five"
    ],
    "raw_logic_programs": [
      "# Declarations\ntowns = EnumSort([Palmdale, Quietville, Riverdale, Seaside, Tidetown])\ncriteria = EnumSort([climate, location, friendliness])\nranks = Function([towns, criteria] -> [int])\n\n# Constraints\nForAll([t:towns, c:criteria], And(1 <= ranks(t, c), ranks(t, c) <= 5)) ::: none of the five towns receives the same ranking as any other town does\nranks(Tidetown, climate) == 3 ::: Tidetown is ranked third, and Seaside fourth\nranks(Quietville, location) == 2 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Tidetown, friendliness) > ranks(Palmdale, friendliness) ::: Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth\nranks(Riverdale, climate) > ranks(Riverdale, friendliness) ::: Riverdale receives a better ranking in climate than in friendliness\nForAll([c:criteria], Distinct([t:towns], ranks(t, c))) ::: Quietville's three ranking are all different from each other\nranks(Tidetown, location) == 1 ::: Tidetown is ranked first in location\nranks(Riverdale, friendliness) == 2 ::: Riverdale is ranked second in friendliness\n\n# Options\nQuestion ::: If Tidetown is ranked first in location and Riverdale is ranked second in friendliness, then it is possible to deduce with certainty all three rankings for exactly how many of the towns?\nis_sat(ForAll([t:towns, c:criteria], And(1 <= ranks(t, c), ranks(t, c) <= 5))) ::: A) One\nis_sat(ForAll([t:towns,"
    ]
  },
  {
    "id": "ar_lsat_199206_2-G_4_24",
    "context": "A committee ranks five towns—Palmdale, Quietville, Riverdale, Seaside, Tidetown—from first (best) to fifth (worst) on each of three criteria: climate, location, friendliness. For each of the three criteria, none of the five towns receives the same ranking as any other town does. In climate, Tidetown is ranked third, and Seaside fourth. In location, Quietville is ranked second, Riverdale third, Palmdale fourth. In friendliness, Tidetown's ranking is better than Palmdale's, Quietville is ranked fourth and Seaside fifth. Riverdale receives a better ranking in climate than in friendliness. Quietville's three ranking are all different from each other.",
    "question": "Which one of the following statements CANNOT be true?",
    "answer": "E",
    "options": [
      "A) Palmdale is ranked first in climate.",
      "B) Quietville is ranked fifth in climate.",
      "C) Riverdale is ranked third in friendliness.",
      "D) Seaside is ranked first in location.",
      "E) Tidetown is ranked second in friendliness."
    ],
    "raw_logic_programs": [
      "# Declarations\ntowns = EnumSort([Palmdale, Quietville, Riverdale, Seaside, Tidetown])\ncriteria = EnumSort([climate, location, friendliness])\nranks = Function([towns, criteria] -> [int])\n\n# Constraints\nForAll([t:towns, c:criteria], And(1 <= ranks(t, c), ranks(t, c) <= 5)) ::: none of the five towns receives the same ranking as any other town does\nranks(Tidetown, climate) == 3 ::: Tidetown is ranked third, and Seaside fourth\nranks(Seaside, climate) == 4 ::: Tidetown is ranked third, and Seaside fourth\nranks(Quietville, location) == 2 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Riverdale, location) == 3 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Palmdale, location) == 4 ::: Quietville is ranked second, Riverdale third, Palmdale fourth\nranks(Tidetown, friendliness) > ranks(Palmdale, friendliness) ::: Tidetown's ranking is better than Palmdale's\nranks(Quietville, friendliness) == 4 ::: Quietville is ranked fourth and Seaside fifth\nranks(Seaside, friendliness) == 5 ::: Quietville is ranked fourth and Seaside fifth\nranks(Riverdale, climate) > ranks(Riverdale, friendliness) ::: Riverdale receives a better ranking in climate than in friendliness\nForAll([c:criteria], Distinct([r:ranks(Quietville, c)], r)) ::: Quietville's three ranking are all different from each other\n\n# Options\nQuestion ::: Which one of the following statements CANNOT be true?\nis_"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_1_1",
    "context": "Petworld has exactly fourteen animals (three gerbils, three hamsters, three lizards, five snakes) that are kept in four separate cages (W, X, Y, Z) according to the following conditions: Each cage contains exactly two, four, or six animals. Any cage containing a gerbil also contains at least one hamster; any cage containing a hamster also contains at least one gerbil. Any cage containing a lizard also contains at least one snake; any cage containing a snake also contains at least one lizard. Neither cage Y nor cage Z contains a gerbil. Neither cage W nor cage X contains a lizard.",
    "question": "Which one of the following could be a complete and accurate list of the animals kept in cages W and Y?",
    "answer": "A",
    "options": [
      "A) W: one gerbil and one hamster Y: two lizards and two snakes",
      "B) W: one gerbil and two hamsters Y: one lizard and three snakes",
      "C) W: two gerbils and two hamsters Y: one lizard and four snakes",
      "D) W: two gerbils and two hamsters Y: three lizards and one snake",
      "E) W: two gerbils and two lizards Y: two hamsters and two snakes"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_1_2",
    "context": "Petworld has exactly fourteen animals (three gerbils, three hamsters, three lizards, five snakes) that are kept in four separate cages (W, X, Y, Z) according to the following conditions: Each cage contains exactly two, four, or six animals. Any cage containing a gerbil also contains at least one hamster; any cage containing a hamster also contains at least one gerbil. Any cage containing a lizard also contains at least one snake; any cage containing a snake also contains at least one lizard. Neither cage Y nor cage Z contains a gerbil. Neither cage W nor cage X contains a lizard.",
    "question": "If there are exactly two hamsters in cage W and the number of gerbils in cage X is equal to the number of snakes in cage Y, then the number of snakes in cage Z must be exactly",
    "answer": "D",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_1_3",
    "context": "Petworld has exactly fourteen animals (three gerbils, three hamsters, three lizards, five snakes) that are kept in four separate cages (W, X, Y, Z) according to the following conditions: Each cage contains exactly two, four, or six animals. Any cage containing a gerbil also contains at least one hamster; any cage containing a hamster also contains at least one gerbil. Any cage containing a lizard also contains at least one snake; any cage containing a snake also contains at least one lizard. Neither cage Y nor cage Z contains a gerbil. Neither cage W nor cage X contains a lizard.",
    "question": "If cage Z contains exactly twice as many lizards as cage Y, which one of the following can be true?",
    "answer": "C",
    "options": [
      "A) Cage Y contains exactly two lizards.",
      "B) Cage Y contains exactly two snakes.",
      "C) Cage Y contains exactly four animals.",
      "D) Cage Z contains exactly three snakes.",
      "E) Cage Z contains exactly two animals."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_1_4",
    "context": "Petworld has exactly fourteen animals (three gerbils, three hamsters, three lizards, five snakes) that are kept in four separate cages (W, X, Y, Z) according to the following conditions: Each cage contains exactly two, four, or six animals. Any cage containing a gerbil also contains at least one hamster; any cage containing a hamster also contains at least one gerbil. Any cage containing a lizard also contains at least one snake; any cage containing a snake also contains at least one lizard. Neither cage Y nor cage Z contains a gerbil. Neither cage W nor cage X contains a lizard.",
    "question": "If the number of animals in cage W is equal to the number of animals in cage Z, then which one of the following can be true?",
    "answer": "D",
    "options": [
      "A) Cage W contains exactly six animals.",
      "B) Cage X contains exactly six animals.",
      "C) Cage Y contains exactly one snake.",
      "D) Cage Y contains exactly three snakes.",
      "E) Cage Z contains exactly four snakes."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_1_5",
    "context": "Petworld has exactly fourteen animals (three gerbils, three hamsters, three lizards, five snakes) that are kept in four separate cages (W, X, Y, Z) according to the following conditions: Each cage contains exactly two, four, or six animals. Any cage containing a gerbil also contains at least one hamster; any cage containing a hamster also contains at least one gerbil. Any cage containing a lizard also contains at least one snake; any cage containing a snake also contains at least one lizard. Neither cage Y nor cage Z contains a gerbil. Neither cage W nor cage X contains a lizard.",
    "question": "If cage Y contains six animals, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Cage W contains two gerbils.",
      "B) Cage X contains four animals.",
      "C) Cage Z contains two snakes.",
      "D) The number of snakes in cage Y is equal to the number of lizards in cage Y.",
      "E) The number of snakes in cage Z is equal to the number of lizards in cage Z."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_1_6",
    "context": "Petworld has exactly fourteen animals (three gerbils, three hamsters, three lizards, five snakes) that are kept in four separate cages (W, X, Y, Z) according to the following conditions: Each cage contains exactly two, four, or six animals. Any cage containing a gerbil also contains at least one hamster; any cage containing a hamster also contains at least one gerbil. Any cage containing a lizard also contains at least one snake; any cage containing a snake also contains at least one lizard. Neither cage Y nor cage Z contains a gerbil. Neither cage W nor cage X contains a lizard.",
    "question": "At most, how many snakes can occupy cage Y at any one time?",
    "answer": "D",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_2_7",
    "context": "A soft drink manufacturer surveyed consumer preferences for exactly seven proposed names for its new soda: Jazz, Kola, Luck, Mist, Nipi, Oboy, and Ping. The manufacturer ranked the seven names according to the number of votes they received. The name that received the most votes was ranked first. Every name received a different number of votes. Some of the survey results are as follows: Jazz received more votes than Oboy. Oboy received more votes than Kola. Kola received more votes than Mist. Nipi did not receive the fewest votes. Ping received fewer votes than Luck but more votes than Nipi and more votes than Oboy.",
    "question": "Which one of the following could be an accurate list of the seven names in rank order from first through seventh?",
    "answer": "C",
    "options": [
      "A) Jazz, Luck, Ping, Nipi, Kola, Oboy, Mist",
      "B) Jazz, Luck, Ping, Oboy, Kola, Mist, Nipi",
      "C) Luck, Ping, Jazz, Nipi, Oboy, Kola, Mist",
      "D) Luck, Ping, Nipi, Oboy, Jazz, Kola, Mist",
      "E) Ping, Luck, Jazz, Oboy, Nipi, Kola, Mist"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_2_8",
    "context": "A soft drink manufacturer surveyed consumer preferences for exactly seven proposed names for its new soda: Jazz, Kola, Luck, Mist, Nipi, Oboy, and Ping. The manufacturer ranked the seven names according to the number of votes they received. The name that received the most votes was ranked first. Every name received a different number of votes. Some of the survey results are as follows: Jazz received more votes than Oboy. Oboy received more votes than Kola. Kola received more votes than Mist. Nipi did not receive the fewest votes. Ping received fewer votes than Luck but more votes than Nipi and more votes than Oboy.",
    "question": "Which one of the following statements must be true?",
    "answer": "E",
    "options": [
      "A) Jazz received more votes than Nipi.",
      "B) Kola received more votes than Nipi.",
      "C) Luck received more votes than Jazz.",
      "D) Nipi received more votes than Oboy.",
      "E) Ping received more votes than Kola."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_2_9",
    "context": "A soft drink manufacturer surveyed consumer preferences for exactly seven proposed names for its new soda: Jazz, Kola, Luck, Mist, Nipi, Oboy, and Ping. The manufacturer ranked the seven names according to the number of votes they received. The name that received the most votes was ranked first. Every name received a different number of votes. Some of the survey results are as follows: Jazz received more votes than Oboy. Oboy received more votes than Kola. Kola received more votes than Mist. Nipi did not receive the fewest votes. Ping received fewer votes than Luck but more votes than Nipi and more votes than Oboy.",
    "question": "If the ranks of Ping, Oboy, and Kola were consecutive, then which one of the following statements would have to be false?",
    "answer": "C",
    "options": [
      "A) Jazz received more votes than Luck.",
      "B) Jazz received more votes than Ping.",
      "C) Nipi received more votes than Oboy.",
      "D) Nipi received more votes than Mist.",
      "E) Oboy received more votes than Nipi."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_2_10",
    "context": "A soft drink manufacturer surveyed consumer preferences for exactly seven proposed names for its new soda: Jazz, Kola, Luck, Mist, Nipi, Oboy, and Ping. The manufacturer ranked the seven names according to the number of votes they received. The name that received the most votes was ranked first. Every name received a different number of votes. Some of the survey results are as follows: Jazz received more votes than Oboy. Oboy received more votes than Kola. Kola received more votes than Mist. Nipi did not receive the fewest votes. Ping received fewer votes than Luck but more votes than Nipi and more votes than Oboy.",
    "question": "What is the total number of the soft drink names whose exact ranks can be deduced from the partial survey results?",
    "answer": "A",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_2_11",
    "context": "A soft drink manufacturer surveyed consumer preferences for exactly seven proposed names for its new soda: Jazz, Kola, Luck, Mist, Nipi, Oboy, and Ping. The manufacturer ranked the seven names according to the number of votes they received. The name that received the most votes was ranked first. Every name received a different number of votes. Some of the survey results are as follows: Jazz received more votes than Oboy. Oboy received more votes than Kola. Kola received more votes than Mist. Nipi did not receive the fewest votes. Ping received fewer votes than Luck but more votes than Nipi and more votes than Oboy.",
    "question": "What is the maximum possible number of the soft drink names any one of which could be among the three most popular?",
    "answer": "B",
    "options": [
      "A) three",
      "B) four",
      "C) five",
      "D) six",
      "E) seven"
    ],
    "raw_logic_programs": [
      "# Declarations\nnames = EnumSort([Jazz, Kola, Luck, Mist, Nipi, Oboy, Ping])\nvotes = Function([names] -> [int])\nForAll([n:names], And(1 <= votes(n), votes(n) <= 7))\n\n# Constraints\nForAll([n:names], votes(n)!= votes(n.next)) ::: Every name received a different number of votes\nvotes(Jazz) > votes(Oboy) ::: Jazz received more votes than Oboy\nvotes(Oboy) > votes(Kola) ::: Oboy received more votes than Kola\nvotes(Kola) > votes(Mist) ::: Kola received more votes than Mist\nNot(votes(Nipi) == 1) ::: Nipi did not receive the fewest votes\nvotes(Ping) < votes(Luck) ::: Ping received fewer votes than Luck\nvotes(Ping) > votes(Nipi) ::: Ping received more votes than Nipi\nvotes(Ping) > votes(Oboy) ::: Ping received more votes than Oboy\n\n# Options\nQuestion ::: What is the maximum possible number of the soft drink names any one of which could be among the three most popular?\nis_sat(ForAll([n:names], Or(votes(n) == 1, votes(n) == 2, votes(n) == 3))) ::: A) three\nis_sat(ForAll([n:names], Or(votes(n) == 1, votes(n) == 2, votes(n) == 3, votes(n) == 4))) ::: B) four\nis_sat(ForAll([n:names], Or(votes(n) == 1, votes(n) == 2, votes(n) == 3, votes(n) == 4, votes(n) == 5))) ::: C) five\nis_sat(ForAll([n:names], Or(votes(n) == 1, votes(n) == 2, votes(n) == 3, votes(n) == 4, votes(n) == 5, votes(n) == 6))) ::: D) six\nis_sat(ForAll([n:names], Or(votes(n) == 1, votes(n) == 2, votes(n) == 3, votes(n) == 4, votes(n) == 5, votes(n) == 6, votes(n) == 7))) ::: E) seven\n------"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_2_12",
    "context": "A soft drink manufacturer surveyed consumer preferences for exactly seven proposed names for its new soda: Jazz, Kola, Luck, Mist, Nipi, Oboy, and Ping. The manufacturer ranked the seven names according to the number of votes they received. The name that received the most votes was ranked first. Every name received a different number of votes. Some of the survey results are as follows: Jazz received more votes than Oboy. Oboy received more votes than Kola. Kola received more votes than Mist. Nipi did not receive the fewest votes. Ping received fewer votes than Luck but more votes than Nipi and more votes than Oboy.",
    "question": "If Ping received more votes than Jazz, then what is the maximum possible number of names whose ranks can be determined?",
    "answer": "B",
    "options": [
      "A) two",
      "B) three",
      "C) four",
      "D) five",
      "E) six"
    ],
    "raw_logic_programs": [
      "# Declarations\nnames = EnumSort([Jazz, Kola, Luck, Mist, Nipi, Oboy, Ping])\nvotes = Function([names] -> [int])\nForAll([n:names], And(1 <= votes(n), votes(n) <= 7))\n\n# Constraints\nForAll([n:names], votes(n)!= votes(n.next)) ::: Every name received a different number of votes\nAnd(votes(Jazz) > votes(Oboy), votes(Oboy) > votes(Kola)) ::: Jazz received more votes than Oboy. Oboy received more votes than Kola.\nvotes(Kola) > votes(Mist) ::: Kola received more votes than Mist\nNot(votes(Nipi) == 1) ::: Nipi did not receive the fewest votes\nAnd(votes(Ping) < votes(Luck), votes(Ping) > votes(Nipi), votes(Ping) > votes(Oboy)) ::: Ping received fewer votes than Luck but more votes than Nipi and more votes than Oboy\n\n# Options\nQuestion ::: If Ping received more votes than Jazz, then what is the maximum possible number of names whose ranks can be determined?\nis_exception(is_sat(votes(Ping) > votes(Jazz))) ::: A) two\nis_exception(is_sat(votes(Ping) > votes(Jazz))) ::: B) three\nis_exception(is_sat(votes(Ping) > votes(Jazz))) ::: C) four\nis_exception(is_sat(votes(Ping) > votes(Jazz))) ::: D) five\nis_exception(is_sat(votes(Ping) > votes(Jazz))) ::: E) six\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: sales, marketing, and production. The following conditions apply: A is assigned to work in the same department as D. B is assigned to work in the same department as E. C is assigned to work in the same department as F. No more than two employees are assigned to work in the sales department. No more than two employees are assigned to work in the marketing department.\nQuestion:\nIf A is assigned to work in the production department, then which one of the following must be true?\nChoices:\n(A) B is assigned to work in the marketing department.\n(B) C is assigned to work in the sales department.\n(C"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_3_13",
    "context": "Eight benches—J, K, L, T, U, X, Y, and Z are arranged along the perimeter of a park as shown below: The following is true: J, K, and L are green; T and U are red; X, Y, and Z are pink. The green benches stand next to one another along the park's perimeter. The pink benches stand next to one another along the park's perimeter. No green bench stands next to a pink bench. The bench on the southeast corner is T. J stands at the center of the park's north side. If T stands next to X, then T does not also stand next to L.",
    "question": "Which one of the following benches could be on the northeast corner of the park?",
    "answer": "E",
    "options": [
      "A) Z",
      "B) Y",
      "C) X",
      "D) T",
      "E) L"
    ],
    "raw_logic_programs": [
      "# Declarations\nbenches = EnumSort([J, K, L, T, U, X, Y, Z])\ncolors = EnumSort([green, red, pink])\ncolor = Function([benches] -> [colors])\n\n# Constraints\nForAll([b:benches], color(b) == green) ::: J, K, and L are green\nForAll([b:benches], color(b) == red) ::: T and U are red\nForAll([b:benches], color(b) == pink) ::: X, Y, and Z are pink\nAnd(color(J) == color(K), color(K) == color(L)) ::: The green benches stand next to one another along the park's perimeter\nAnd(color(X) == color(Y), color(Y) == color(Z)) ::: The pink benches stand next to one another along the park's perimeter\nForAll([b:benches], Implies(color(b) == green, Not(color(b) == pink))) ::: No green bench stands next to a pink bench\ncolor(T) == red ::: The bench on the southeast corner is T\ncolor(J) == green ::: J stands at the center of the park's north side\nAnd(color(T) == color(X), color(T)!= color(L)) ::: If T stands next to X, then T does not also stand next to L\n\n# Options\nQuestion ::: Which one of the following benches could be on the northeast corner of the park?\nis_valid(color(Z) == pink) ::: (A)\nis_valid(color(Y) == pink) ::: (B)\nis_valid(color(X) == pink) ::: (C)\nis_valid(color(T) == red) ::: (D)\nis_valid(color(L) == green) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The following is true: The number of managers is 10 more than the number of nonmanagers. The number of female managers is 10 more than the number of female nonmanagers. The number of male managers is 10 more than the number of male nonmanagers.\nQuestion:\nIf the number of female employees is 10 more than the number of male employees, then the number of female managers is how many more than the number of male managers?\nChoices:\n(A) 10\n(B) 20\n("
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_3_14",
    "context": "Eight benches—J, K, L, T, U, X, Y, and Z are arranged along the perimeter of a park as shown below: The following is true: J, K, and L are green; T and U are red; X, Y, and Z are pink. The green benches stand next to one another along the park's perimeter. The pink benches stand next to one another along the park's perimeter. No green bench stands next to a pink bench. The bench on the southeast corner is T. J stands at the center of the park's north side. If T stands next to X, then T does not also stand next to L.",
    "question": "Each of the following statements must be true EXCEPT:",
    "answer": "A",
    "options": [
      "A) The bench on the northwest corner is pink.",
      "B) The bench on the northeast corner is green.",
      "C) The bench on the southwest corner is pink.",
      "D) The middle bench on the east side of the park is green.",
      "E) The middle bench on the west side of the park is pink."
    ],
    "raw_logic_programs": [
      "# Declarations\nbenches = EnumSort([J, K, L, T, U, X, Y, Z])\ncolors = EnumSort([green, red, pink])\ncolor = Function([benches] -> [colors])\n\n# Constraints\nForAll([b:benches], And(1 <= color(b), color(b) <= 3)) ::: J, K, and L are green; T and U are red; X, Y, and Z are pink\nAnd(color(J) == green, color(K) == green, color(L) == green) ::: The green benches stand next to one another along the park's perimeter\nAnd(color(X) == pink, color(Y) == pink, color(Z) == pink) ::: The pink benches stand next to one another along the park's perimeter\nForAll([b:benches], Implies(color(b) == green, Not(color(b) == pink))) ::: No green bench stands next to a pink bench\ncolor(T) == red ::: The bench on the southeast corner is T\ncolor(J) == green ::: J stands at the center of the park's north side\nImplies(color(T) == red, color(X) == pink), Implies(color(T) == red, color(L)!= green)) ::: If T stands next to X, then T does not also stand next to L\n\n# Options\nQuestion ::: Each of the following statements must be true EXCEPT:\nis_exception(is_sat(color(J) == pink)) ::: (A)\nis_exception(is_sat(color(J) == green)) ::: (B)\nis_exception(is_sat(color(J) == pink)) ::: (C)\nis_exception(is_sat(color(J) == green)) ::: (D)\nis_exception(is_sat(color(J) == pink)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following is true: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10 more than the number of employees in department A. The number of employees in department B is 10 more than the number of employees in department C.\nQuestion:\nWhich one of the following could be the number of employees in department A?\nChoices:\n(A) 20"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_3_15",
    "context": "Eight benches—J, K, L, T, U, X, Y, and Z are arranged along the perimeter of a park as shown below: The following is true: J, K, and L are green; T and U are red; X, Y, and Z are pink. The green benches stand next to one another along the park's perimeter. The pink benches stand next to one another along the park's perimeter. No green bench stands next to a pink bench. The bench on the southeast corner is T. J stands at the center of the park's north side. If T stands next to X, then T does not also stand next to L.",
    "question": "Which one of the following benches must be next to J?",
    "answer": "D",
    "options": [
      "A) K",
      "B) L",
      "C) T",
      "D) U",
      "E) X"
    ],
    "raw_logic_programs": [
      "# Declarations\nbenches = EnumSort([J, K, L, T, U, X, Y, Z])\ncolors = EnumSort([green, red, pink])\ncolor = Function([benches] -> [colors])\n\n# Constraints\nForAll([b:benches], Count([c:colors], color(b) == c) == 1) ::: each bench has a color\nAnd(color(J) == green, color(K) == green, color(L) == green) ::: J, K, and L are green\nAnd(color(T) == red, color(U) == red) ::: T and U are red\nAnd(color(X) == pink, color(Y) == pink, color(Z) == pink) ::: X, Y, and Z are pink\nAnd(color(J) == green, color(K) == green, color(L) == green) ::: The green benches stand next to one another along the park's perimeter\nAnd(color(X) == pink, color(Y) == pink, color(Z) == pink) ::: The pink benches stand next to one another along the park's perimeter\nForAll([b:benches], Implies(color(b) == green, Not(color(b) == pink))) ::: No green bench stands next to a pink bench\ncolor(T) == red ::: The bench on the southeast corner is T\ncolor(J) == green ::: J stands at the center of the park's north side\nForAll([b:benches], Implies(color(b) == green, Not(color(b) == pink))) ::: No green bench stands next to a pink bench\n\n# Options\nQuestion ::: Which one of the following benches must be next to J?\nis_valid(Exists([b:benches], color(b) == green)) ::: (A)\nis_valid(Exists([b:benches], color(b) == green)) ::: (B)\nis_valid(Exists([b:benches], color(b) == green)) ::: (C)\nis_valid(Exists([b:benches], color(b) == red)) ::: (D)\nis_valid(Exists([b:benches], color(b) == pink)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The following is true: The number of managers is 10 more than the number of nonmanagers. The number of managers who are"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_3_16",
    "context": "Eight benches—J, K, L, T, U, X, Y, and Z are arranged along the perimeter of a park as shown below: The following is true: J, K, and L are green; T and U are red; X, Y, and Z are pink. The green benches stand next to one another along the park's perimeter. The pink benches stand next to one another along the park's perimeter. No green bench stands next to a pink bench. The bench on the southeast corner is T. J stands at the center of the park's north side. If T stands next to X, then T does not also stand next to L.",
    "question": "For which one of the following benches are there two and no more than two locations either one of which could be the location the bench occupies?",
    "answer": "A",
    "options": [
      "A) K",
      "B) T",
      "C) X",
      "D) Y",
      "E) Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nbenches = EnumSort([J, K, L, T, U, X, Y, Z])\ncolors = EnumSort([green, red, pink])\ncolor = Function([benches] -> [colors])\nlocations = EnumSort([north, south, east, west, center])\nlocation = Function([benches] -> [locations])\n\n# Constraints\nForAll([b:benches], Count([c:colors], color(b) == c) == 1) ::: J, K, and L are green; T and U are red; X, Y, and Z are pink\nAnd(color(J) == green, color(K) == green, color(L) == green) ::: The green benches stand next to one another along the park's perimeter\nAnd(color(X) == pink, color(Y) == pink, color(Z) == pink) ::: The pink benches stand next to one another along the park's perimeter\nForAll([b:benches], Implies(color(b) == green, Not(color(b) == pink))) ::: No green bench stands next to a pink bench\nlocation(T) == southeast ::: The bench on the southeast corner is T\nlocation(J) == center ::: J stands at the center of the park's north side\nForAll([b:benches], Count([l:locations], location(b) == l) == 1) ::: each bench occupies exactly one location\n\n# Options\nQuestion ::: For which one of the following benches are there two and no more than two locations either one of which could be the location the bench occupies?\nis_sat(And(location(K) == north, location(K) == center)) ::: (A)\nis_sat(And(location(T) == north, location(T) == center)) ::: (B)\nis_sat(And(location(X) == north, location(X) == center)) ::: (C)\nis_sat(And(location(Y) == north, location(Y) == center)) ::: (D)\nis_sat(And(location(Z) == north, location(Z) == center)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following is true: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10 more than the number of"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_3_17",
    "context": "Eight benches—J, K, L, T, U, X, Y, and Z are arranged along the perimeter of a park as shown below: The following is true: J, K, and L are green; T and U are red; X, Y, and Z are pink. The green benches stand next to one another along the park's perimeter. The pink benches stand next to one another along the park's perimeter. No green bench stands next to a pink bench. The bench on the southeast corner is T. J stands at the center of the park's north side. If T stands next to X, then T does not also stand next to L.",
    "question": "If Z is directly north of Y, which one of the following statements must be true?",
    "answer": "D",
    "options": [
      "A) J is directly west of K.",
      "B) K is directly east of U.",
      "C) U is directly north of X.",
      "D) X is directly south of J.",
      "E) Z is directly south of J."
    ],
    "raw_logic_programs": [
      "# Declarations\nbenches = EnumSort([J, K, L, T, U, X, Y, Z])\ncolors = EnumSort([green, red, pink])\ncolor = Function([benches] -> [colors])\n\n# Constraints\nForAll([b:benches], color(b) == green | color(b) == red | color(b) == pink) ::: J, K, and L are green; T and U are red; X, Y, and Z are pink\nAnd(color(J) == green, color(K) == green, color(L) == green) ::: The green benches stand next to one another along the park's perimeter\nAnd(color(X) == pink, color(Y) == pink, color(Z) == pink) ::: The pink benches stand next to one another along the park's perimeter\nForAll([b:benches], Implies(color(b) == green, Not(color(b) == pink))) ::: No green bench stands next to a pink bench\ncolor(T) == red ::: The bench on the southeast corner is T\ncolor(J) == green ::: J stands at the center of the park's north side\nAnd(color(T) == red, color(X) == pink) ::: If T stands next to X, then T does not also stand next to L\n\n# Options\nQuestion ::: If Z is directly north of Y, which one of the following statements must be true?\nis_valid(Exists([b:benches], color(b) == green & b == J & b == K)) ::: (A)\nis_valid(Exists([b:benches], color(b) == red & b == K & b == U)) ::: (B)\nis_valid(Exists([b:benches], color(b) == red & b == U & b == X)) ::: (C)\nis_valid(Exists([b:benches], color(b) == pink & b == X & b == J)) ::: (D)\nis_valid(Exists([b:benches], color(b) == pink & b == Z & b == J)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The following is true: The number of managers is 10 more than the number of nonmanagers. The number of managers who are women is 10 more than the number of nonmanagers who are women. The number of managers who are men is 10 more than the number of"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_3_18",
    "context": "Eight benches—J, K, L, T, U, X, Y, and Z are arranged along the perimeter of a park as shown below: The following is true: J, K, and L are green; T and U are red; X, Y, and Z are pink. The green benches stand next to one another along the park's perimeter. The pink benches stand next to one another along the park's perimeter. No green bench stands next to a pink bench. The bench on the southeast corner is T. J stands at the center of the park's north side. If T stands next to X, then T does not also stand next to L.",
    "question": "If Y is in the middle of the west side of the park, then the two benches in which one of the following pairs CANNOT be two of the corner benches?",
    "answer": "B",
    "options": [
      "A) K and X",
      "B) K and Z",
      "C) L and U",
      "D) L and X",
      "E) L and Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nbenches = EnumSort([J, K, L, T, U, X, Y, Z])\ncolors = EnumSort([green, red, pink])\ncolor = Function([benches] -> [colors])\n\n# Constraints\nForAll([b:benches], color(b) == green) ::: J, K, and L are green\nForAll([b:benches], color(b) == red) ::: T and U are red\nForAll([b:benches], color(b) == pink) ::: X, Y, and Z are pink\nAnd(color(J) == color(K), color(K) == color(L)) ::: The green benches stand next to one another along the park's perimeter\nAnd(color(X) == color(Y), color(Y) == color(Z)) ::: The pink benches stand next to one another along the park's perimeter\nForAll([b:benches], Implies(color(b) == green, Not(color(b) == pink))) ::: No green bench stands next to a pink bench\ncolor(T) == red ::: The bench on the southeast corner is T\ncolor(J) == green ::: J stands at the center of the park's north side\nImplies(color(T) == color(X), Not(color(T) == color(L))) ::: If T stands next to X, then T does not also stand next to L\n\n# Options\nQuestion ::: If Y is in the middle of the west side of the park, then the two benches in which one of the following pairs CANNOT be two of the corner benches?\nis_exception(is_sat(color(K) == color(X))) ::: (A)\nis_exception(is_sat(color(K) == color(Z))) ::: (B)\nis_exception(is_sat(color(L) == color(U))) ::: (C)\nis_exception(is_sat(color(L) == color(X))) ::: (D)\nis_exception(is_sat(color(L) == color(Z))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The following is true: The number of managers is 10 more than the number of nonmanagers. The number of female managers is 10 more than the number of female nonmanagers. The number of male managers is 10 more than the number of male nonmanagers.\nQuestion:\nIf the number"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_3_19",
    "context": "Eight benches—J, K, L, T, U, X, Y, and Z are arranged along the perimeter of a park as shown below: The following is true: J, K, and L are green; T and U are red; X, Y, and Z are pink. The green benches stand next to one another along the park's perimeter. The pink benches stand next to one another along the park's perimeter. No green bench stands next to a pink bench. The bench on the southeast corner is T. J stands at the center of the park's north side. If T stands next to X, then T does not also stand next to L.",
    "question": "If Y is farther south than L and farther north than T, then the benches in each of the following pairs must be next to each other EXCEPT",
    "answer": "C",
    "options": [
      "A) J and L",
      "B) K and T",
      "C) T and X",
      "D) U and Y",
      "E) X and Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nbenches = EnumSort([J, K, L, T, U, X, Y, Z])\ncolors = EnumSort([green, red, pink])\ncolor = Function([benches] -> [colors])\n\n# Constraints\nForAll([b:benches], color(b) == green | color(b) == red | color(b) == pink) ::: J, K, and L are green; T and U are red; X, Y, and Z are pink\nAnd(color(J) == green, color(K) == green, color(L) == green) ::: The green benches stand next to one another along the park's perimeter\nAnd(color(X) == pink, color(Y) == pink, color(Z) == pink) ::: The pink benches stand next to one another along the park's perimeter\nForAll([b1:benches, b2:benches], Implies(color(b1) == green, color(b2) == pink, Not(b1 == b2))) ::: No green bench stands next to a pink bench\ncolor(T) == red ::: The bench on the southeast corner is T\ncolor(J) == green ::: J stands at the center of the park's north side\n\n# Options\nQuestion ::: If Y is farther south than L and farther north than T, then the benches in each of the following pairs must be next to each other EXCEPT\nis_exception(is_sat(color(J) == green, color(L) == green)) ::: (A)\nis_exception(is_sat(color(K) == red, color(T) == red)) ::: (B)\nis_exception(is_sat(color(T) == red, color(X) == pink)) ::: (C)\nis_exception(is_sat(color(U) == red, color(Y) == pink)) ::: (D)\nis_exception(is_sat(color(X) == pink, color(Z) == pink)) ::: (E)\n------\nProblem:\nThe following is a list of the six members of a committee:\nA, B, C, D, E, F\nThe committee is to be divided into two subcommittees, each of which will be composed of three members. The following conditions apply:\nA and B are to be on the same subcommittee.\nC and D are to be on the same subcommittee.\nE and F are to be on the same subcommittee.\nQuestion:\nWhich one of the following could be the"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_4_20",
    "context": "A lake contains exactly five islands—J, K, L, M, O—which are unconnected by bridges. Contractors will build a network of bridges that satisfies the following specifications: Each bridge directly connects exactly two islands with each other, and no two bridges intersect. No more than one bridge directly connects any two islands. No island has more than three bridges that directly connect it with other islands. J, K, and L are each directly connected by bridge with one or both of M and O. J is directly connected by bridge with exactly two islands. K is directly connected by bridge with exactly one island. A bridge directly connects J with O, and a bridge directly connects M with O.",
    "question": "Which one of the following is a complete and accurate list of the islands any one of which could be directly connected by bridge with L ?",
    "answer": "D",
    "options": [
      "A) J, K",
      "B) J, M",
      "C) J, O",
      "D) J, M, O",
      "E) J, K, M, O"
    ],
    "raw_logic_programs": [
      "# Declarations\nislands = EnumSort([J, K, L, M, O])\nbridges = Function([islands, islands] -> [bool])\nForAll([i:islands], And(1 <= Count([j:islands], bridges(i, j)), Count([j:islands], bridges(i, j)) <= 3))\n\n# Constraints\nForAll([i:islands], And(1 <= Count([j:islands], bridges(i, j)), Count([j:islands], bridges(i, j)) <= 3)) ::: No island has more than three bridges that directly connect it with other islands\nForAll([i:islands], And(1 <= Count([j:islands], bridges(j, i)), Count([j:islands], bridges(j, i)) <= 3)) ::: No island has more than three bridges that directly connect it with other islands\nForAll([i:islands], And(1 <= Count([j:islands], bridges(i, j)), Count([j:islands], bridges(i, j)) <= 3)) ::: No island has more than three bridges that directly connect it with other islands\nForAll([i:islands], And(1 <= Count([j:islands], bridges(j, i)), Count([j:islands], bridges(j, i)) <= 3)) ::: No island has more than three bridges that directly connect it with other islands\nForAll([i:islands], And(1 <= Count([j:islands], bridges(i, j)), Count([j:islands], bridges(i, j)) <= 3)) ::: No island has more than three bridges that directly connect it with other islands\nForAll([i:islands], And(1 <= Count([j:islands], bridges(j, i)), Count([j:islands], bridges(j, i)) <= 3)) ::: No island has more than three bridges that directly connect it with other islands\nForAll([i:islands], And(1 <= Count([j:islands], bridges(i, j)), Count([j:islands], bridges(i, j)) <= 3)) ::: No island has more than three bridges that directly connect it with other islands\nForAll([i:islands], And(1 <= Count([j:islands], bridges(j, i)), Count([j:islands], bridges(j, i)) <= 3)) ::: No island has more than three bridges that directly connect it with other islands\nForAll([i:islands], And(1 <= Count([j:islands], bridges("
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_4_21",
    "context": "A lake contains exactly five islands—J, K, L, M, O—which are unconnected by bridges. Contractors will build a network of bridges that satisfies the following specifications: Each bridge directly connects exactly two islands with each other, and no two bridges intersect. No more than one bridge directly connects any two islands. No island has more than three bridges that directly connect it with other islands. J, K, and L are each directly connected by bridge with one or both of M and O. J is directly connected by bridge with exactly two islands. K is directly connected by bridge with exactly one island. A bridge directly connects J with O, and a bridge directly connects M with O.",
    "question": "Which one of the following could be true about the completed network of bridges?",
    "answer": "C",
    "options": [
      "A) J is directly connected by bridge both with L and with M.",
      "B) K is directly connected by bridge both with M and with O.",
      "C) L is directly connected by bridge both with J and with M.",
      "D) M is directly connected by bridge with J, with K, and with L.",
      "E) O is directly connected by bridge with K, with L, and with M."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_4_22",
    "context": "A lake contains exactly five islands—J, K, L, M, O—which are unconnected by bridges. Contractors will build a network of bridges that satisfies the following specifications: Each bridge directly connects exactly two islands with each other, and no two bridges intersect. No more than one bridge directly connects any two islands. No island has more than three bridges that directly connect it with other islands. J, K, and L are each directly connected by bridge with one or both of M and O. J is directly connected by bridge with exactly two islands. K is directly connected by bridge with exactly one island. A bridge directly connects J with O, and a bridge directly connects M with O.",
    "question": "If a bridge directly connects K with O, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) No bridge directly connects L with M.",
      "B) A bridge directly connects J with L.",
      "C) A bridge directly connects L with O.",
      "D) There are exactly three bridges directly connecting L with other islands.",
      "E) There are exactly two bridges directly connecting O with other islands."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_4_23",
    "context": "A lake contains exactly five islands—J, K, L, M, O—which are unconnected by bridges. Contractors will build a network of bridges that satisfies the following specifications: Each bridge directly connects exactly two islands with each other, and no two bridges intersect. No more than one bridge directly connects any two islands. No island has more than three bridges that directly connect it with other islands. J, K, and L are each directly connected by bridge with one or both of M and O. J is directly connected by bridge with exactly two islands. K is directly connected by bridge with exactly one island. A bridge directly connects J with O, and a bridge directly connects M with O.",
    "question": "If a bridge directly connects L with M and a bridge directly connects L with O, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) A bridge directly connects J with M.",
      "B) A bridge directly connects K with M.",
      "C) A bridge directly connects K with O.",
      "D) There are exactly two bridges directly connecting L with other islands.",
      "E) There are exactly two bridges directly connecting M with other islands."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199210_4-G_4_24",
    "context": "A lake contains exactly five islands—J, K, L, M, O—which are unconnected by bridges. Contractors will build a network of bridges that satisfies the following specifications: Each bridge directly connects exactly two islands with each other, and no two bridges intersect. No more than one bridge directly connects any two islands. No island has more than three bridges that directly connect it with other islands. J, K, and L are each directly connected by bridge with one or both of M and O. J is directly connected by bridge with exactly two islands. K is directly connected by bridge with exactly one island. A bridge directly connects J with O, and a bridge directly connects M with O.",
    "question": "If no island that is directly connected by bridge with M is also directly connected by bridge with O, then there must be a bridge directly connecting",
    "answer": "A",
    "options": [
      "A) J with L",
      "B) J with M",
      "C) K with O",
      "D) L with M",
      "E) L with O"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_1_1",
    "context": "Each of five students—Hubert, Lori, Paul, Regina, and Sharon—will visit exactly one of three cities—Montreal, Toronto, or Vancouver—for the month of March, according to the following conditions: Sharon visits a different city than Paul. Hubert visits the same city as Regina. Lori visits Montreal or else Toronto. If Paul visits Vancouver, Hubert visits Vancouver with him. Each student visits one of the cities with at least one of the other four students.",
    "question": "Which one of the following could be true for March?",
    "answer": "C",
    "options": [
      "A) Hubert, Lori, and Paul visit Toronto, and Regina and Sharon visit Vancouver.",
      "B) Hubert, Lori, Paul, and Regina visit Montreal, and Sharon visits Vancouver.",
      "C) Hubert, Paul, and Regina visit Toronto, and Lori and Sharon visit Montreal.",
      "D) Hubert, Regina, and Sharon visit Montreal, and Lori and Paul visit Vancouver.",
      "E) Lori, Paul, and Sharon visit Montreal, and Hubert and Regina visit Toronto."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_1_2",
    "context": "Each of five students—Hubert, Lori, Paul, Regina, and Sharon—will visit exactly one of three cities—Montreal, Toronto, or Vancouver—for the month of March, according to the following conditions: Sharon visits a different city than Paul. Hubert visits the same city as Regina. Lori visits Montreal or else Toronto. If Paul visits Vancouver, Hubert visits Vancouver with him. Each student visits one of the cities with at least one of the other four students.",
    "question": "If Hubert and Sharon visit a city together, which one of the following could be true in March?",
    "answer": "D",
    "options": [
      "A) Hubert visits the same city as Paul.",
      "B) Lori visits the same city as Regina.",
      "C) Paul visits the same city as Regina.",
      "D) Paul visits Toronto.",
      "E) Paul visits Vancouver."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_1_3",
    "context": "Each of five students—Hubert, Lori, Paul, Regina, and Sharon—will visit exactly one of three cities—Montreal, Toronto, or Vancouver—for the month of March, according to the following conditions: Sharon visits a different city than Paul. Hubert visits the same city as Regina. Lori visits Montreal or else Toronto. If Paul visits Vancouver, Hubert visits Vancouver with him. Each student visits one of the cities with at least one of the other four students.",
    "question": "If Sharon visits Vancouver, which one of the following must be true for March?",
    "answer": "D",
    "options": [
      "A) Hubert visits Montreal.",
      "B) Lori visits Montreal.",
      "C) Paul visits Toronto.",
      "D) Lori visits the same city as Paul.",
      "E) Lori visits the same city as Regina."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_1_4",
    "context": "Each of five students—Hubert, Lori, Paul, Regina, and Sharon—will visit exactly one of three cities—Montreal, Toronto, or Vancouver—for the month of March, according to the following conditions: Sharon visits a different city than Paul. Hubert visits the same city as Regina. Lori visits Montreal or else Toronto. If Paul visits Vancouver, Hubert visits Vancouver with him. Each student visits one of the cities with at least one of the other four students.",
    "question": "Which one of the following could be false in March?",
    "answer": "A",
    "options": [
      "A) Sharon must visit Montreal if Paul visits Vancouver.",
      "B) Regina must visit Vancouver if Paul visits Vancouver.",
      "C) Regina visits a city with exactly two of the other four students.",
      "D) Lori visits a city with exactly one of the other four students.",
      "E) Lori visits a city with Paul or else with Sharon."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_1_5",
    "context": "Each of five students—Hubert, Lori, Paul, Regina, and Sharon—will visit exactly one of three cities—Montreal, Toronto, or Vancouver—for the month of March, according to the following conditions: Sharon visits a different city than Paul. Hubert visits the same city as Regina. Lori visits Montreal or else Toronto. If Paul visits Vancouver, Hubert visits Vancouver with him. Each student visits one of the cities with at least one of the other four students.",
    "question": "If Regina visits Toronto, which one of the following could be true in March?",
    "answer": "C",
    "options": [
      "A) Lori visits Toronto.",
      "B) Lori visits Vancouver.",
      "C) Paul visits Toronto.",
      "D) Paul visits Vancouver.",
      "E) Sharon visits Vancouver."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_1_6",
    "context": "Each of five students—Hubert, Lori, Paul, Regina, and Sharon—will visit exactly one of three cities—Montreal, Toronto, or Vancouver—for the month of March, according to the following conditions: Sharon visits a different city than Paul. Hubert visits the same city as Regina. Lori visits Montreal or else Toronto. If Paul visits Vancouver, Hubert visits Vancouver with him. Each student visits one of the cities with at least one of the other four students.",
    "question": "Which one of the following must be true for March?",
    "answer": "E",
    "options": [
      "A) If any of the students visits Montreal, Lori visits Montreal.",
      "B) If any of the students visits Montreal, exactly two of them do.",
      "C) If any of the students visits Toronto, exactly three of them do.",
      "D) If any of the students visits Vancouver, Paul visits Vancouver.",
      "E) If any of the students visits Vancouver, exactly three of them do."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_2_7",
    "context": "A college offers one course in each of three subjects—mathematics, nutrition, and oceanography—in the fall and again in the spring. Students' book orders for these course offerings are kept in six folders, numbered 1 through 6, from which labels identifying the folders' contents are missing. The following is known: Each folder contains only the orders for one of the six course offerings. Folder 1 contains orders for the same subject as folder 2 does. The orders in folder 3 are for a different subject than are the orders in folder 4. The fall mathematics orders are in folder 1 or else folder 4. The spring oceanography orders are in folder 1 or else folder 4. The spring nutrition orders are not in folder 5.",
    "question": "Which one of the following could be the list of the contents of the folders, in order from folder 1 to folder 6 ?",
    "answer": "D",
    "options": [
      "A) fall mathematics, spring mathematics, fall oceanography, fall nutrition, spring nutrition, spring oceanography",
      "B) fall oceanography, spring nutrition, fall nutrition, fall mathematics, spring mathematics, spring oceanography",
      "C) spring mathematics, fall mathematics, spring nutrition, fall oceanography, fall nutrition, spring oceanography",
      "D) spring oceanography, fall oceanography, fall nutrition, fall mathematics, spring mathematics, spring nutrition",
      "E) spring oceanography, fall oceanography, spring mathematics, fall mathematics, fall nutrition, spring nutrition"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_2_8",
    "context": "A college offers one course in each of three subjects—mathematics, nutrition, and oceanography—in the fall and again in the spring. Students' book orders for these course offerings are kept in six folders, numbered 1 through 6, from which labels identifying the folders' contents are missing. The following is known: Each folder contains only the orders for one of the six course offerings. Folder 1 contains orders for the same subject as folder 2 does. The orders in folder 3 are for a different subject than are the orders in folder 4. The fall mathematics orders are in folder 1 or else folder 4. The spring oceanography orders are in folder 1 or else folder 4. The spring nutrition orders are not in folder 5.",
    "question": "Which one of the following statements must be false?",
    "answer": "A",
    "options": [
      "A) The spring mathematics orders are in folder 3.",
      "B) The fall nutrition orders are in folder 3.",
      "C) The spring oceanography orders are in folder 1.",
      "D) The spring nutrition orders are in folder 6.",
      "E) The fall oceanography orders are in folder 5."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_2_9",
    "context": "A college offers one course in each of three subjects—mathematics, nutrition, and oceanography—in the fall and again in the spring. Students' book orders for these course offerings are kept in six folders, numbered 1 through 6, from which labels identifying the folders' contents are missing. The following is known: Each folder contains only the orders for one of the six course offerings. Folder 1 contains orders for the same subject as folder 2 does. The orders in folder 3 are for a different subject than are the orders in folder 4. The fall mathematics orders are in folder 1 or else folder 4. The spring oceanography orders are in folder 1 or else folder 4. The spring nutrition orders are not in folder 5.",
    "question": "If the fall oceanography orders are in folder 2, then which one of the following statements could be true?",
    "answer": "B",
    "options": [
      "A) The spring mathematics orders are in folder 4.",
      "B) The spring mathematics orders are in folder 6.",
      "C) The fall nutrition orders are in folder 1.",
      "D) The spring nutrition orders are in neither folder 3 nor folder 6.",
      "E) Neither the spring nor the fall nutrition orders are in folder 3."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_2_10",
    "context": "A college offers one course in each of three subjects—mathematics, nutrition, and oceanography—in the fall and again in the spring. Students' book orders for these course offerings are kept in six folders, numbered 1 through 6, from which labels identifying the folders' contents are missing. The following is known: Each folder contains only the orders for one of the six course offerings. Folder 1 contains orders for the same subject as folder 2 does. The orders in folder 3 are for a different subject than are the orders in folder 4. The fall mathematics orders are in folder 1 or else folder 4. The spring oceanography orders are in folder 1 or else folder 4. The spring nutrition orders are not in folder 5.",
    "question": "Which one of the following statements could be true?",
    "answer": "D",
    "options": [
      "A) The spring mathematics orders are in folder 1.",
      "B) The fall oceanography orders are in folder 1.",
      "C) The fall nutrition orders are in folder 4, and the fall oceanography orders are in folder 6.",
      "D) The fall oceanography orders are in folder 2, and the spring oceanography orders are in folder 1.",
      "E) The spring oceanography orders are in folder 1, and neither the spring nor the fall nutrition orders are in folder 3."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_2_11",
    "context": "A college offers one course in each of three subjects—mathematics, nutrition, and oceanography—in the fall and again in the spring. Students' book orders for these course offerings are kept in six folders, numbered 1 through 6, from which labels identifying the folders' contents are missing. The following is known: Each folder contains only the orders for one of the six course offerings. Folder 1 contains orders for the same subject as folder 2 does. The orders in folder 3 are for a different subject than are the orders in folder 4. The fall mathematics orders are in folder 1 or else folder 4. The spring oceanography orders are in folder 1 or else folder 4. The spring nutrition orders are not in folder 5.",
    "question": "If the fall oceanography orders are in folder 2, then for exactly how many of the remaining five folders can it be deduced which course offering's orders are in that folder?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_2_12",
    "context": "A college offers one course in each of three subjects—mathematics, nutrition, and oceanography—in the fall and again in the spring. Students' book orders for these course offerings are kept in six folders, numbered 1 through 6, from which labels identifying the folders' contents are missing. The following is known: Each folder contains only the orders for one of the six course offerings. Folder 1 contains orders for the same subject as folder 2 does. The orders in folder 3 are for a different subject than are the orders in folder 4. The fall mathematics orders are in folder 1 or else folder 4. The spring oceanography orders are in folder 1 or else folder 4. The spring nutrition orders are not in folder 5.",
    "question": "Which one of the following lists a pair of folders that must together contain orders for two different subjects?",
    "answer": "E",
    "options": [
      "A) 3 and 5",
      "B) 4 and 5",
      "C) 3 and 6",
      "D) 4 and 6",
      "E) 5 and 6"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_2_13",
    "context": "A college offers one course in each of three subjects—mathematics, nutrition, and oceanography—in the fall and again in the spring. Students' book orders for these course offerings are kept in six folders, numbered 1 through 6, from which labels identifying the folders' contents are missing. The following is known: Each folder contains only the orders for one of the six course offerings. Folder 1 contains orders for the same subject as folder 2 does. The orders in folder 3 are for a different subject than are the orders in folder 4. The fall mathematics orders are in folder 1 or else folder 4. The spring oceanography orders are in folder 1 or else folder 4. The spring nutrition orders are not in folder 5.",
    "question": "Which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) The fall mathematics and spring oceanography orders are in folders with consecutive numbers.",
      "B) Folder 5 contains the orders for a spring course in a subject other than mathematics.",
      "C) Folder 6 contains the orders for a subject other than nutrition.",
      "D) The mathematics orders are in folders 1 and 4.",
      "E) The orders for the fall courses are in folders 1, 3, and 6."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_3_14",
    "context": "Greenburg has exactly five subway lines: Ll, L2, L3, L4, and L5. Along each of the lines, trains run in both directions, stopping at every station. Ll runs in a loop connecting exactly seven stations, their order being Rincon-Tonka-French-Semplain-Urstine-Quetzal-Park-Rincon in one direction of travel, and the reverse in the other direction. L2 connects Tonka with Semplain, and with no other station. L3 connects Rincon with Urstine, and with no other station. L4 runs from Quetzal through exactly one other station, Greene, to Rincon. L5 connects Quetzal with Tonka, and with no other station.",
    "question": "How many different stations are there that a traveler starting at Rincon could reach by using the subway lines without making any intermediate stops?",
    "answer": "C",
    "options": [
      "A) two",
      "B) three",
      "C) four",
      "D) five",
      "E) six"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_3_15",
    "context": "Greenburg has exactly five subway lines: Ll, L2, L3, L4, and L5. Along each of the lines, trains run in both directions, stopping at every station. Ll runs in a loop connecting exactly seven stations, their order being Rincon-Tonka-French-Semplain-Urstine-Quetzal-Park-Rincon in one direction of travel, and the reverse in the other direction. L2 connects Tonka with Semplain, and with no other station. L3 connects Rincon with Urstine, and with no other station. L4 runs from Quetzal through exactly one other station, Greene, to Rincon. L5 connects Quetzal with Tonka, and with no other station.",
    "question": "In order to go from Greene to Semplain taking the fewest possible subway lines and making the fewest possible stops, a traveler must make a stop at",
    "answer": "C",
    "options": [
      "A) French",
      "B) Park",
      "C) Quetzal",
      "D) Rincon",
      "E) Tonka"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_3_16",
    "context": "Greenburg has exactly five subway lines: Ll, L2, L3, L4, and L5. Along each of the lines, trains run in both directions, stopping at every station. Ll runs in a loop connecting exactly seven stations, their order being Rincon-Tonka-French-Semplain-Urstine-Quetzal-Park-Rincon in one direction of travel, and the reverse in the other direction. L2 connects Tonka with Semplain, and with no other station. L3 connects Rincon with Urstine, and with no other station. L4 runs from Quetzal through exactly one other station, Greene, to Rincon. L5 connects Quetzal with Tonka, and with no other station.",
    "question": "If L3 is not running and a traveler goes by subway from Urstine to Rincon making the fewest possible stops, which one of the following lists all of the intermediate stations in sequence along one of the routes that the traveler could take?",
    "answer": "A",
    "options": [
      "A) Quetzal, Tonka",
      "B) Semplain, French",
      "C) Semplain, Park",
      "D) Quetzal, Park, Greene",
      "E) Semplain, French, Tonka"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_3_17",
    "context": "Greenburg has exactly five subway lines: Ll, L2, L3, L4, and L5. Along each of the lines, trains run in both directions, stopping at every station. Ll runs in a loop connecting exactly seven stations, their order being Rincon-Tonka-French-Semplain-Urstine-Quetzal-Park-Rincon in one direction of travel, and the reverse in the other direction. L2 connects Tonka with Semplain, and with no other station. L3 connects Rincon with Urstine, and with no other station. L4 runs from Quetzal through exactly one other station, Greene, to Rincon. L5 connects Quetzal with Tonka, and with no other station.",
    "question": "In order to go by subway from French to Greene, the minimum number of intermediate stops a traveler must make is",
    "answer": "C",
    "options": [
      "A) zero",
      "B) one",
      "C) two",
      "D) three",
      "E) four"
    ],
    "raw_logic_programs": [
      "# Declarations\nstations = EnumSort([French, Greene, Park, Quetzal, Rincon, Semplain, Tonka, Urstine])\nlines = EnumSort([L1, L2, L3, L4, L5])\nruns = Function([lines, stations] -> [bool])\n\n# Constraints\nForAll([l:lines], Count([s:stations], runs(l, s)) >= 2) ::: trains run in both directions, stopping at every station\nForAll([s:stations], Count([l:lines], runs(l, s)) >= 1) ::: each of the lines, trains run in both directions, stopping at every station\nAnd(runs(L1, Rincon), runs(L1, Tonka), runs(L1, French), runs(L1, Semplain), runs(L1, Urstine), runs(L1, Quetzal), runs(L1, Park)) ::: L1 runs in a loop connecting exactly seven stations\nAnd(runs(L2, Tonka), runs(L2, Semplain)) ::: L2 connects Tonka with Semplain, and with no other station\nAnd(runs(L3, Rincon), runs(L3, Urstine)) ::: L3 connects Rincon with Urstine, and with no other station\nAnd(runs(L4, Quetzal), runs(L4, Greene), runs(L4, Rincon)) ::: L4 runs from Quetzal through exactly one other station, Greene, to Rincon\nAnd(runs(L5, Quetzal), runs(L5, Tonka)) ::: L5 connects Quetzal with Tonka, and with no other station\n\n# Options\nQuestion ::: In order to go by subway from French to Greene, the minimum number of intermediate stops a traveler must make is\nis_sat(ForAll([l:lines], Not(runs(l, French) && runs(l, Greene)))) ::: A) zero\nis_sat(Exists([l:lines], runs(l, French) && runs(l, Greene))) ::: B) one\nis_sat(Exists([l:lines], runs(l, French) && runs(l, Greene) && runs(l, Rincon))) ::: C) two\nis_sat(Exists([l:lines], runs(l, French) && runs(l, Greene) && runs(l, Rincon) && runs(l, Quetzal))) ::: D) three\nis_sat(Exists([l:lines], runs(l, French) && runs(l, Greene) && runs(l, Rincon) && runs(l, Quetzal) && runs(l, Park))) ::: E) four\n------"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_3_18",
    "context": "Greenburg has exactly five subway lines: Ll, L2, L3, L4, and L5. Along each of the lines, trains run in both directions, stopping at every station. Ll runs in a loop connecting exactly seven stations, their order being Rincon-Tonka-French-Semplain-Urstine-Quetzal-Park-Rincon in one direction of travel, and the reverse in the other direction. L2 connects Tonka with Semplain, and with no other station. L3 connects Rincon with Urstine, and with no other station. L4 runs from Quetzal through exactly one other station, Greene, to Rincon. L5 connects Quetzal with Tonka, and with no other station.",
    "question": "If the tracks that directly connect Urstine and Quetzal are blocked in both directions, a traveler going from Semplain to Park and making the fewest possible intermediate stops must pass through",
    "answer": "E",
    "options": [
      "A) French or Tonka",
      "B) Greene or Urstine",
      "C) Quetzal or Tonka",
      "D) Quetzal or Urstine or both",
      "E) Rincon or Tonka or both"
    ],
    "raw_logic_programs": [
      "# Declarations\nstations = EnumSort([French, Greene, Park, Quetzal, Rincon, Semplain, Tonka, Urstine])\nlines = EnumSort([L1, L2, L3, L4, L5])\nruns = Function([lines, stations] -> [bool])\n\n# Constraints\nForAll([l:lines], Count([s:stations], runs(l, s)) >= 2) ::: trains run in both directions\nAnd(runs(L1, Rincon), runs(L1, Tonka), runs(L1, French), runs(L1, Semplain), runs(L1, Urstine), runs(L1, Quetzal), runs(L1, Park)) ::: L1 runs in a loop connecting exactly seven stations\nAnd(runs(L2, Tonka), runs(L2, Semplain)) ::: L2 connects Tonka with Semplain\nAnd(runs(L3, Rincon), runs(L3, Urstine)) ::: L3 connects Rincon with Urstine\nAnd(runs(L4, Quetzal), runs(L4, Greene), runs(L4, Rincon)) ::: L4 runs from Quetzal through exactly one other station, Greene, to Rincon\nAnd(runs(L5, Quetzal), runs(L5, Tonka)) ::: L5 connects Quetzal with Tonka\n\n# Options\nQuestion ::: If the tracks that directly connect Urstine and Quetzal are blocked in both directions, a traveler going from Semplain to Park and making the fewest possible intermediate stops must pass through\nis_exception(is_sat(And(runs(L1, French), runs(L1, Tonka)))) ::: (A)\nis_exception(is_sat(And(runs(L4, Greene), runs(L4, Urstine)))) ::: (B)\nis_exception(is_sat(And(runs(L1, Quetzal), runs(L1, Tonka)))) ::: (C)\nis_exception(is_sat(And(runs(L1, Quetzal), runs(L1, Urstine)))) ::: (D)\nis_exception(is_sat(And(runs(L1, Rincon), runs(L1, Tonka)))) ::: (E)\n------\nProblem:\nThe following is a list of the sixteen people who will be attending a dinner party: A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, and P. The host will seat the guests at a large round table. The following conditions apply: A sits next to B. C sits three seats to the"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_3_19",
    "context": "Greenburg has exactly five subway lines: Ll, L2, L3, L4, and L5. Along each of the lines, trains run in both directions, stopping at every station. Ll runs in a loop connecting exactly seven stations, their order being Rincon-Tonka-French-Semplain-Urstine-Quetzal-Park-Rincon in one direction of travel, and the reverse in the other direction. L2 connects Tonka with Semplain, and with no other station. L3 connects Rincon with Urstine, and with no other station. L4 runs from Quetzal through exactly one other station, Greene, to Rincon. L5 connects Quetzal with Tonka, and with no other station.",
    "question": "If a sixth subway line is to be constructed so that all of the stations would have two or more lines reaching them, the stations connected by the new subway line must include at least",
    "answer": "A",
    "options": [
      "A) French, Greene, and Park",
      "B) French, Greene, and Quetzal",
      "C) French, Greene, and Rincon",
      "D) Park, Tonka, and Urstine",
      "E) Park, Semplain, and Tonka"
    ],
    "raw_logic_programs": [
      "# Declarations\nstations = EnumSort([French, Greene, Park, Quetzal, Rincon, Semplain, Tonka, Urstine])\nlines = EnumSort([L1, L2, L3, L4, L5])\nruns = Function([lines, stations] -> [bool])\n\n# Constraints\nForAll([l:lines], Count([s:stations], runs(l, s)) == 2) ::: all of the stations would have two or more lines reaching them\nForAll([s:stations], Count([l:lines], runs(l, s)) >= 1) ::: each of the lines, trains run in both directions, stopping at every station\nForAll([s:stations], Implies(runs(L1, s), Or(s == Rincon, s == Tonka, s == French, s == Semplain, s == Urstine, s == Quetzal, s == Park))) ::: L1 runs in a loop connecting exactly seven stations\nForAll([s:stations], Implies(runs(L2, s), Or(s == Tonka, s == Semplain))) ::: L2 connects Tonka with Semplain, and with no other station\nForAll([s:stations], Implies(runs(L3, s), Or(s == Rincon, s == Urstine))) ::: L3 connects Rincon with Urstine, and with no other station\nForAll([s:stations], Implies(runs(L4, s), Or(s == Quetzal, s == Greene, s == Rincon))) ::: L4 runs from Quetzal through exactly one other station, Greene, to Rincon\nForAll([s:stations], Implies(runs(L5, s), Or(s == Quetzal, s == Tonka))) ::: L5 connects Quetzal with Tonka, and with no other station\n\n# Options\nQuestion ::: If a sixth subway line is to be constructed so that all of the stations would have two or more lines reaching them, the stations connected by the new subway line must include at least\nis_exception(is_sat(And(runs(L6, French), runs(L6, Greene), runs(L6, Park)))) ::: (A)\nis_exception(is_sat(And(runs(L6, French), runs(L6, Greene), runs(L6, Quetzal)))) ::: (B)\nis_exception(is_sat(And(runs(L6, French), runs(L6, Greene), runs(L6, Rincon)))) ::: (C)\nis_exception(is_sat(And(runs(L6, Park), runs(L6, Tonka), runs(L6"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_4_20",
    "context": "Prior to this year's annual promotion review, the staff of a law firm consisted of partners Harrison and Rafael, associate Olivos, and assistants Ganz, Johnson, Lowry, Stefano, Turner, and Wilford. During each annual review, each assistant and associate is considered for promotion to the next higher rank, and at least one person is promoted from each of the two lower ranks. An assistant is promoted to associate when a majority of higherranking staff votes for promotion. An associate is promoted to partner when a majority of partners vote for promotion. Everyone eligible votes on every promotion. No one joins or leaves the firm. Olivos never votes for promoting Ganz, Johnson, or Turner. Rafael never votes for promoting Lowry or Stefano. Harrison never votes for promoting Johnson or Wilford.",
    "question": "Which one of the following could be the distribution of staff resulting from this year's review?",
    "answer": "E",
    "options": [
      "A) Partner: Harrison, Olivos, Rafael. Associate: Ganz, Johnson, Lowry. Assistance: Stefano, Turner, Wilford",
      "B) Partner: Harrison, Rafael. Associate: Lowry, Olivos, Stefano. Assistance: Ganz, Johnson, Turner, Wilford",
      "C) Partner: Harrison, Olivos, Rafael, Stefano. Associate: Ganz, Lowry, Turner, Wilford. Assistance: Johnson",
      "D) Partner: Harrison, Olivos, Rafael. Assistance: Ganz, Johnson, Lowry, Stefano, Turner, Wilford",
      "E) Partner: Harrison, Olivos, Rafael. Associate: Ganz, Lowry Stefano, Turner. Assistance: Johnson, Wilford"
    ],
    "raw_logic_programs": [
      "# Declarations\nstaff = EnumSort([Ganz, Harrison, Johnson, Lowry, Olivos, Rafael, Stefano, Turner, Wilford])\nranks = EnumSort([associate, assistant, partner])\npromoted = Function([staff, ranks] -> [bool])\n\n# Constraints\nForAll([s:staff], Count([r:ranks], promoted(s, r)) == 1) ::: No one joins or leaves the firm\nForAll([s:staff], promoted(s, partner) == promoted(s, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([s:staff], promoted(s, associate) == promoted(s, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([s:staff], promoted(s, partner) == promoted(s, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([s:staff], promoted(s, associate) == promoted(s, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([s:staff], promoted(s, partner) == promoted(s, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([s:staff], promoted(s, associate) == promoted(s, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([s:staff], promoted(s, partner) == promoted(s, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([s:staff], promoted(s, associate) == promoted(s, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([s:staff], promoted(s, partner) == promoted(s, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([s:staff], promoted(s, associate) == promoted(s, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([s:staff], promoted(s, partner) == promoted(s, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([s:staff], promoted(s, associate) == promoted(s, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([s:staff], promoted(s, partner) == promoted(s, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([s:staff], promoted(s, associate) == promoted(s, assistant)) ::: An assistant is promoted to associate when a majority"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_4_21",
    "context": "Prior to this year's annual promotion review, the staff of a law firm consisted of partners Harrison and Rafael, associate Olivos, and assistants Ganz, Johnson, Lowry, Stefano, Turner, and Wilford. During each annual review, each assistant and associate is considered for promotion to the next higher rank, and at least one person is promoted from each of the two lower ranks. An assistant is promoted to associate when a majority of higherranking staff votes for promotion. An associate is promoted to partner when a majority of partners vote for promotion. Everyone eligible votes on every promotion. No one joins or leaves the firm. Olivos never votes for promoting Ganz, Johnson, or Turner. Rafael never votes for promoting Lowry or Stefano. Harrison never votes for promoting Johnson or Wilford.",
    "question": "If Rafael votes for promoting only Ganz, Olivos, and Wilford, and if Harrison votes for promoting only Lowry, Olivos, and Stefano, then which one of the following could be the complete roster of associates resulting from this year's review?",
    "answer": "D",
    "options": [
      "A) Ganz, Lowry, Wilford",
      "B) Johnson, Lowry, Stefano",
      "C) Lowry, Stefano, Turner",
      "D) Lowry, Stefano, Wilford",
      "E) Olivos, Turner, Wilford"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Ganz, Harrison, Johnson, Lowry, Olivos, Rafael, Stefano, Turner, Wilford])\nranks = EnumSort([associate, partner])\npromotes = Function([people, ranks] -> [bool])\n\n# Constraints\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: everyone eligible votes on every promotion\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promotes(p, associate), promotes(p,"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_4_22",
    "context": "Prior to this year's annual promotion review, the staff of a law firm consisted of partners Harrison and Rafael, associate Olivos, and assistants Ganz, Johnson, Lowry, Stefano, Turner, and Wilford. During each annual review, each assistant and associate is considered for promotion to the next higher rank, and at least one person is promoted from each of the two lower ranks. An assistant is promoted to associate when a majority of higherranking staff votes for promotion. An associate is promoted to partner when a majority of partners vote for promotion. Everyone eligible votes on every promotion. No one joins or leaves the firm. Olivos never votes for promoting Ganz, Johnson, or Turner. Rafael never votes for promoting Lowry or Stefano. Harrison never votes for promoting Johnson or Wilford.",
    "question": "If Johnson is to be promoted to associate during next year's review, which one of the following is the smallest number of assistants who must be promoted during this year's review?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Ganz, Harrison, Johnson, Lowry, Olivos, Rafael, Stefano, Turner, Wilford])\nranks = EnumSort([associate, partner])\npromoted = Function([people, ranks] -> [bool])\n\n# Constraints\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: no one joins or leaves the firm\nForAll([p:people],"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_4_23",
    "context": "Prior to this year's annual promotion review, the staff of a law firm consisted of partners Harrison and Rafael, associate Olivos, and assistants Ganz, Johnson, Lowry, Stefano, Turner, and Wilford. During each annual review, each assistant and associate is considered for promotion to the next higher rank, and at least one person is promoted from each of the two lower ranks. An assistant is promoted to associate when a majority of higherranking staff votes for promotion. An associate is promoted to partner when a majority of partners vote for promotion. Everyone eligible votes on every promotion. No one joins or leaves the firm. Olivos never votes for promoting Ganz, Johnson, or Turner. Rafael never votes for promoting Lowry or Stefano. Harrison never votes for promoting Johnson or Wilford.",
    "question": "Which one of the following must be true after next year's review?",
    "answer": "E",
    "options": [
      "A) Lowry is an assistant.",
      "B) Wilford is a partner.",
      "C) There are no assistants.",
      "D) There are at least two assistants.",
      "E) There are no more than four assistants."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Ganz, Harrison, Johnson, Lowry, Olivos, Rafael, Stefano, Turner, Wilford])\nranks = EnumSort([assistant, associate, partner])\npromoted = Function([people, ranks] -> [bool])\n\n# Constraints\nForAll([p:people], Count([r:ranks], promoted(p, r)) == 1) ::: No one joins or leaves the firm\nForAll([p:people], promoted(p, partner) == promoted(p, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([p:people], promoted(p, associate) == promoted(p, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([p:people], promoted(p, partner) == promoted(p, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([p:people], promoted(p, associate) == promoted(p, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([p:people], promoted(p, partner) == promoted(p, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([p:people], promoted(p, associate) == promoted(p, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([p:people], promoted(p, partner) == promoted(p, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([p:people], promoted(p, associate) == promoted(p, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([p:people], promoted(p, partner) == promoted(p, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([p:people], promoted(p, associate) == promoted(p, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([p:people], promoted(p, partner) == promoted(p, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([p:people], promoted(p, associate) == promoted(p, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([p:people], promoted(p, partner) == promoted(p, associate)) ::: An associate is promoted to partner when a majority of partners vote for promotion\nForAll([p:people], promoted(p, associate) == promoted(p, assistant)) ::: An assistant is promoted to associate when a majority of higherranking staff votes for promotion\nForAll([p:people], promoted"
    ]
  },
  {
    "id": "ar_lsat_199212_1-G_4_24",
    "context": "Prior to this year's annual promotion review, the staff of a law firm consisted of partners Harrison and Rafael, associate Olivos, and assistants Ganz, Johnson, Lowry, Stefano, Turner, and Wilford. During each annual review, each assistant and associate is considered for promotion to the next higher rank, and at least one person is promoted from each of the two lower ranks. An assistant is promoted to associate when a majority of higherranking staff votes for promotion. An associate is promoted to partner when a majority of partners vote for promotion. Everyone eligible votes on every promotion. No one joins or leaves the firm. Olivos never votes for promoting Ganz, Johnson, or Turner. Rafael never votes for promoting Lowry or Stefano. Harrison never votes for promoting Johnson or Wilford.",
    "question": "What is the smallest possible number of associates in the firm immediately after next year's review?",
    "answer": "B",
    "options": [
      "A) none",
      "B) one",
      "C) two",
      "D) three",
      "E) four"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Ganz, Harrison, Johnson, Lowry, Olivos, Rafael, Stefano, Turner, Wilford])\nranks = EnumSort([associate, partner])\npromoted = Function([people, ranks] -> [bool])\n\n# Constraints\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people], Or(promoted(p, associate), promoted(p, partner))) ::: No one joins or leaves the firm\nForAll([p:people],"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_1_1",
    "context": "Seven consecutive time slots for a broadcast, numbered in chronological order 1 through 7, will be filled by six song tapes—G, H, L, O, P, S—and exactly one news tape. Each tape is to be assigned to a different time slot, and no tape is longer than any other tape. The broadcast is subject to the following restrictions: L must be played immediately before O. The news tape must be played at some time after L. There must be exactly two time slots between G and P, regardless of whether G comes before P or whether G comes after P.",
    "question": "If G is played second, which one of the following tapes must be played third?",
    "answer": "C",
    "options": [
      "A) the news",
      "B) H",
      "C) L",
      "D) O",
      "E) S"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([G, H, L, O, P, S])\nnews = EnumSort([news])\nslots = EnumSort([1, 2, 3, 4, 5, 6, 7])\nplayed = Function([songs, slots] -> [bool])\n\n# Constraints\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([s:songs], Count([slot:slots], played(s, slot)) == 1) ::: Each tape is to be"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_1_2",
    "context": "Seven consecutive time slots for a broadcast, numbered in chronological order 1 through 7, will be filled by six song tapes—G, H, L, O, P, S—and exactly one news tape. Each tape is to be assigned to a different time slot, and no tape is longer than any other tape. The broadcast is subject to the following restrictions: L must be played immediately before O. The news tape must be played at some time after L. There must be exactly two time slots between G and P, regardless of whether G comes before P or whether G comes after P.",
    "question": "The news tape can be played in any one of the following time slots EXCEPT the",
    "answer": "A",
    "options": [
      "A) second",
      "B) third",
      "C) fourth",
      "D) fifth",
      "E) sixth"
    ],
    "raw_logic_programs": [
      "# Declarations\nslots = EnumSort([1, 2, 3, 4, 5, 6, 7])\ntapes = EnumSort([G, H, L, O, P, S])\nnews = EnumSort([news])\nplayed = Function([slots, tapes] -> [bool])\n\n# Constraints\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_1_3",
    "context": "Seven consecutive time slots for a broadcast, numbered in chronological order 1 through 7, will be filled by six song tapes—G, H, L, O, P, S—and exactly one news tape. Each tape is to be assigned to a different time slot, and no tape is longer than any other tape. The broadcast is subject to the following restrictions: L must be played immediately before O. The news tape must be played at some time after L. There must be exactly two time slots between G and P, regardless of whether G comes before P or whether G comes after P.",
    "question": "If H and S are to be scheduled as far from each other as possible, then the first, the second, and the third time slots could be filled, respectively, by",
    "answer": "C",
    "options": [
      "A) G, H, and L",
      "B) S, G, and the news",
      "C) H, G, and L",
      "D) H, L, and O",
      "E) L, O, and S"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([G, H, L, O, P, S])\nnews = EnumSort([news])\nslots = EnumSort([1, 2, 3, 4, 5, 6, 7])\nplayed = Function([songs, slots] -> [bool])\nForAll([s:songs], And(1 <= played(s, 1), played(s, 1) <= 7))\n\n# Constraints\nDistinct([s:songs], played(s, 1)) ::: Each tape is to be assigned to a different time slot\nAnd(played(L, 1) < played(O, 1), played(L, 1) > played(news, 1)) ::: L must be played immediately before O\nAnd(played(G, 1) < played(P, 1), played(G, 1) > played(P, 1)) ::: There must be exactly two time slots between G and P\n\n# Options\nQuestion ::: If H and S are to be scheduled as far from each other as possible, then the first, the second, and the third time slots could be filled, respectively, by\nis_sat(And(played(G, 1) == 1, played(H, 1) == 2, played(L, 1) == 3)) ::: (A)\nis_sat(And(played(S, 1) == 1, played(G, 1) == 2, played(news, 1) == 3)) ::: (B)\nis_sat(And(played(H, 1) == 1, played(G, 1) == 2, played(L, 1) == 3)) ::: (C)\nis_sat(And(played(H, 1) == 1, played(L, 1) == 2, played(O, 1) == 3)) ::: (D)\nis_sat(And(played(L, 1) == 1, played(O, 1) == 2, played(S, 1) == 3)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_1_4",
    "context": "Seven consecutive time slots for a broadcast, numbered in chronological order 1 through 7, will be filled by six song tapes—G, H, L, O, P, S—and exactly one news tape. Each tape is to be assigned to a different time slot, and no tape is longer than any other tape. The broadcast is subject to the following restrictions: L must be played immediately before O. The news tape must be played at some time after L. There must be exactly two time slots between G and P, regardless of whether G comes before P or whether G comes after P.",
    "question": "If P is played fifth, L must be played",
    "answer": "C",
    "options": [
      "A) first",
      "B) second",
      "C) third",
      "D) fourth",
      "E) sixth"
    ],
    "raw_logic_programs": [
      "# Declarations\nslots = EnumSort([1, 2, 3, 4, 5, 6, 7])\ntapes = EnumSort([G, H, L, O, P, S])\nplayed = Function([slots, tapes] -> [bool])\nForAll([s:slots], And(1 <= played(s, G), played(s, G) <= 7))\nForAll([s:slots], And(1 <= played(s, H), played(s, H) <= 7))\nForAll([s:slots], And(1 <= played(s, L), played(s, L) <= 7))\nForAll([s:slots], And(1 <= played(s, O), played(s, O) <= 7))\nForAll([s:slots], And(1 <= played(s, P), played(s, P) <= 7))\nForAll([s:slots], And(1 <= played(s, S), played(s, S) <= 7))\n\n# Constraints\nDistinct([s:slots], played(s, G)) ::: each tape is to be assigned to a different time slot\nDistinct([s:slots], played(s, H)) ::: each tape is to be assigned to a different time slot\nDistinct([s:slots], played(s, L)) ::: each tape is to be assigned to a different time slot\nDistinct([s:slots], played(s, O)) ::: each tape is to be assigned to a different time slot\nDistinct([s:slots], played(s, P)) ::: each tape is to be assigned to a different time slot\nDistinct([s:slots], played(s, S)) ::: each tape is to be assigned to a different time slot\nAnd(played(s, G) < played(s, H), played(s, L) < played(s, O), played(s, P) < played(s, S)) ::: no tape is longer than any other tape\nAnd(played(s, L) < played(s, O), played(s, O) < played(s, P)) ::: L must be played immediately before O"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_1_5",
    "context": "Seven consecutive time slots for a broadcast, numbered in chronological order 1 through 7, will be filled by six song tapes—G, H, L, O, P, S—and exactly one news tape. Each tape is to be assigned to a different time slot, and no tape is longer than any other tape. The broadcast is subject to the following restrictions: L must be played immediately before O. The news tape must be played at some time after L. There must be exactly two time slots between G and P, regardless of whether G comes before P or whether G comes after P.",
    "question": "What is the maximum number of tapes that can separate S from the news?",
    "answer": "E",
    "options": [
      "A) 1",
      "B) 2",
      "C) 3",
      "D) 4",
      "E) 5"
    ],
    "raw_logic_programs": [
      "# Declarations\ntapes = EnumSort([G, H, L, O, P, S])\nslots = EnumSort([1, 2, 3, 4, 5, 6, 7])\nplayed = Function([tapes, slots] -> [bool])\nForAll([t:tapes], And(1 <= played(t, 1), played(t, 1) <= 7))\n\n# Constraints\nDistinct([t:tapes], played(t, 1)) ::: Each tape is to be assigned to a different time slot\nAnd(played(L, 1) < played(O, 1), played(L, 1) > played(O, 1)) ::: L must be played immediately before O\nAnd(played(L, 1) < played(news, 1), played(L, 1) > played(news, 1)) ::: The news tape must be played at some time after L\nAnd(played(G, 1) < played(P, 1), played(G, 1) > played(P, 1)) ::: There must be exactly two time slots between G and P\n\n# Options\nQuestion ::: What is the maximum number of tapes that can separate S from the news?\nis_sat(ForAll([t:tapes], Implies(played(t, 1) < played(news, 1), played(t, 1) < played(S, 1)))) ::: A) 1\nis_sat(ForAll([t:tapes], Implies(played(t, 1) < played(news, 1), played(t, 1) < played(S, 1) + 2))) ::: B) 2\nis_sat(ForAll([t:tapes], Implies(played(t, 1) < played(news, 1), played(t, 1) < played(S, 1) + 3))) ::: C) 3\nis_sat(ForAll([t:tapes], Implies(played(t, 1) < played(news, 1), played(t, 1) < played(S, 1)"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_1_6",
    "context": "Seven consecutive time slots for a broadcast, numbered in chronological order 1 through 7, will be filled by six song tapes—G, H, L, O, P, S—and exactly one news tape. Each tape is to be assigned to a different time slot, and no tape is longer than any other tape. The broadcast is subject to the following restrictions: L must be played immediately before O. The news tape must be played at some time after L. There must be exactly two time slots between G and P, regardless of whether G comes before P or whether G comes after P.",
    "question": "Which one of the following is the latest time slot in which L can be played?",
    "answer": "C",
    "options": [
      "A) the third",
      "B) the fourth",
      "C) the fifth",
      "D) the sixth",
      "E) the seventh"
    ],
    "raw_logic_programs": [
      "# Declarations\nslots = EnumSort([1, 2, 3, 4, 5, 6, 7])\ntapes = EnumSort([G, H, L, O, P, S])\nnews = EnumSort([news])\nplayed = Function([slots, tapes] -> [bool])\n\n# Constraints\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_1_7",
    "context": "Seven consecutive time slots for a broadcast, numbered in chronological order 1 through 7, will be filled by six song tapes—G, H, L, O, P, S—and exactly one news tape. Each tape is to be assigned to a different time slot, and no tape is longer than any other tape. The broadcast is subject to the following restrictions: L must be played immediately before O. The news tape must be played at some time after L. There must be exactly two time slots between G and P, regardless of whether G comes before P or whether G comes after P.",
    "question": "The time slot in which O must be played is completely determined if G is assigned to which one of the following time slots?",
    "answer": "D",
    "options": [
      "A) the first",
      "B) the third",
      "C) the fourth",
      "D) the fifth",
      "E) the sixth"
    ],
    "raw_logic_programs": [
      "# Declarations\nslots = EnumSort([1, 2, 3, 4, 5, 6, 7])\ntapes = EnumSort([G, H, L, O, P, S])\nnews = EnumSort([news])\nplayed = Function([slots, tapes] -> [bool])\n\n# Constraints\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to be assigned to a different time slot\nForAll([t:tapes], Count([s:slots], played(s, t)) == 1) ::: Each tape is to"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_2_8",
    "context": "Doctor Yamata works only on Mondays, Tuesdays, Wednesdays, Fridays, and Saturdays. She performs four different activities—lecturing, operating, treating patients, and conducting research. Each working day she performs exactly one activity in the morning and exactly one activity in the afternoon. During each week her work schedule must satisfy the following restrictions: She performs operations on exactly three mornings. If she operates on Monday, she does not operate on Tuesday. She lectures in the afternoon on exactly two consecutive calendar days. She treats patients on exactly one morning and exactly three afternoons. She conducts research on exactly one morning. On Saturday she neither lectures nor performs operations.",
    "question": "Which one of the following must be a day on which Doctor Yamata lectures?",
    "answer": "B",
    "options": [
      "A) Monday",
      "B) Tuesday",
      "C) Wednesday",
      "D) Friday",
      "E) Saturday"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([Monday, Tuesday, Wednesday, Friday, Saturday])\nactivities = EnumSort([lecturing, operating, treating_patients, conducting_research])\nmorning = Function([days] -> [activities])\nafternoon = Function([days] -> [activities])\n\n# Constraints\nForAll([d:days], Or(morning(d) == lecturing, morning(d) == operating, morning(d) == treating_patients, morning(d) == conducting_research)) ::: She performs exactly one activity in the morning\nForAll([d:days], Or(afternoon(d) == lecturing, afternoon(d) == operating, afternoon(d) == treating_patients, afternoon(d) == conducting_research)) ::: She performs exactly one activity in the afternoon\nCount([d:days], morning(d) == operating) == 3 ::: She performs operations on exactly three mornings\nImplies(morning(Monday) == operating, Not(morning(Tuesday) == operating)) ::: If she operates on Monday, she does not operate on Tuesday\nCount([d:days], afternoon(d) == lecturing) == 2 ::: She lectures in the afternoon on exactly two consecutive calendar days\nCount([d:days], morning(d) == treating_patients) == 1 ::: She treats patients on exactly one morning\nCount([d:days], afternoon(d) == treating_patients) == 3 ::: She treats patients on exactly three afternoons\nCount([d:days], morning(d) == conducting_research) == 1 ::: She conducts research on exactly one morning\nNot(morning(Saturday) == lecturing) ::: On Saturday she neither lectures nor performs operations\n\n# Options\nQuestion ::: Which one of the following must be a day on which Doctor Yamata lectures?\nis_sat(afternoon(Monday) == lecturing) ::: A) Monday\nis_sat(afternoon(Tuesday) == lecturing) ::: B) Tuesday\nis_sat(afternoon(Wednesday) == lecturing) ::: C)"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_2_9",
    "context": "Doctor Yamata works only on Mondays, Tuesdays, Wednesdays, Fridays, and Saturdays. She performs four different activities—lecturing, operating, treating patients, and conducting research. Each working day she performs exactly one activity in the morning and exactly one activity in the afternoon. During each week her work schedule must satisfy the following restrictions: She performs operations on exactly three mornings. If she operates on Monday, she does not operate on Tuesday. She lectures in the afternoon on exactly two consecutive calendar days. She treats patients on exactly one morning and exactly three afternoons. She conducts research on exactly one morning. On Saturday she neither lectures nor performs operations.",
    "question": "On Wednesday Doctor Yamata could be scheduled to",
    "answer": "C",
    "options": [
      "A) conduct research in the morning and operate in the afternoon",
      "B) lecture in the morning and treat patients in the afternoon",
      "C) operate in the morning and lecture in the afternoon",
      "D) operate in the morning and conduct research in the afternoon",
      "E) treat patients in the morning and treat patients in the afternoon"
    ],
    "raw_logic_programs": [
      "# Declares\ndays = EnumSort([Monday, Tuesday, Wednesday, Friday, Saturday])\nactivities = EnumSort([lecturing, operating, treating_patients, conducting_research])\nmorning = Function([days] -> [activities])\nafternoon = Function([days] -> [activities])\n\n# Constraints\nForAll([d:days], Count([a:activities], morning(d) == a) == 1) ::: exactly one activity in the morning\nForAll([d:days], Count([a:activities], afternoon(d) == a) == 1) ::: exactly one activity in the afternoon\nCount([d:days], morning(d) == operating) == 3 ::: She performs operations on exactly three mornings\nImplies(morning(Monday) == operating, Not(morning(Tuesday) == operating)) ::: If she operates on Monday, she does not operate on Tuesday\nAnd(afternoon(d1) == lecturing, afternoon(d2) == lecturing) ::: She lectures in the afternoon on exactly two consecutive calendar days\nd1!= d2 ::: consecutive calendar days\nCount([d:days], afternoon(d) == lecturing) == 2 ::: She lectures in the afternoon on exactly two consecutive calendar days\nCount([d:days], morning(d) == treating_patients) == 1 ::: She treats patients on exactly one morning\nCount([d:days], afternoon(d) == treating_patients) == 3 ::: She treats patients on exactly three afternoons\nmorning(Saturday)!= conducting_research ::: On Saturday she neither lectures nor performs operations\n\n# Options\nQuestion ::: On Wednesday Doctor Yamata could be scheduled to\nis_exception(is_sat(morning(Wednesday) == conducting_research, afternoon(Wednesday) == operating)) ::: (A)\nis_exception(is_sat(morning(Wednesday) == lecturing, afternoon(Wednesday) == treating_patients)) ::: (B)\nis_exception(is_sat(morning(Wednesday) == operating, afternoon(Wed"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_2_10",
    "context": "Doctor Yamata works only on Mondays, Tuesdays, Wednesdays, Fridays, and Saturdays. She performs four different activities—lecturing, operating, treating patients, and conducting research. Each working day she performs exactly one activity in the morning and exactly one activity in the afternoon. During each week her work schedule must satisfy the following restrictions: She performs operations on exactly three mornings. If she operates on Monday, she does not operate on Tuesday. She lectures in the afternoon on exactly two consecutive calendar days. She treats patients on exactly one morning and exactly three afternoons. She conducts research on exactly one morning. On Saturday she neither lectures nor performs operations.",
    "question": "Which one of the following statements must be true?",
    "answer": "E",
    "options": [
      "A) There is one day on which the doctor treats patients both in the morning and in the afternoon.",
      "B) The doctor conducts research on one of the days on which she lectures.",
      "C) The doctor conducts research on one of the days on which she treats patients.",
      "D) The doctor lectures on one of the days on which she treats patients.",
      "E) The doctor lectures on one of the days on which she operates."
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([Monday, Tuesday, Wednesday, Friday, Saturday])\nactivities = EnumSort([lecturing, operating, treating_patients, conducting_research])\nmorning = Function([days] -> [activities])\nafternoon = Function([days] -> [activities])\n\n# Constraints\nForAll([d:days], Count([a:activities], morning(d) == a) == 1) ::: exactly one activity in the morning\nForAll([d:days], Count([a:activities], afternoon(d) == a) == 1) ::: exactly one activity in the afternoon\nAnd(morning(Monday) == operating, Not(morning(Tuesday) == operating)) ::: If she operates on Monday, she does not operate on Tuesday\nCount([d:days], morning(d) == operating) == 3 ::: She performs operations on exactly three mornings\nAnd(afternoon(d1) == lecturing, afternoon(d2) == lecturing, d1!= d2, d1 + 1 == d2) ::: She lectures in the afternoon on exactly two consecutive calendar days\nCount([d:days], afternoon(d) == lecturing) == 2 ::: She lectures in the afternoon on exactly two consecutive calendar days\nCount([d:days], morning(d) == treating_patients) == 1 ::: She treats patients on exactly one morning\nCount([d:days], afternoon(d) == treating_patients) == 3 ::: She treats patients on exactly three afternoons\nmorning(Saturday)!= conducting_research ::: On Saturday she neither lectures nor performs operations\n\n# Options\nQuestion ::: Which one of the following statements must be true?\nis_valid(Exists([d:days], morning(d) == treating_patients && afternoon(d) == treating_patients)) ::: (A)\nis_valid(Exists([d:days], morning(d) == conducting_research && afternoon(d) == lecturing)) ::: (B)\nis_valid(Exists([d:days], morning(d) == conducting_research && afternoon(d) == treating_pat"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_2_11",
    "context": "Doctor Yamata works only on Mondays, Tuesdays, Wednesdays, Fridays, and Saturdays. She performs four different activities—lecturing, operating, treating patients, and conducting research. Each working day she performs exactly one activity in the morning and exactly one activity in the afternoon. During each week her work schedule must satisfy the following restrictions: She performs operations on exactly three mornings. If she operates on Monday, she does not operate on Tuesday. She lectures in the afternoon on exactly two consecutive calendar days. She treats patients on exactly one morning and exactly three afternoons. She conducts research on exactly one morning. On Saturday she neither lectures nor performs operations.",
    "question": "If Doctor Yamata operates on Tuesday, then her schedule for treating patients could be",
    "answer": "E",
    "options": [
      "A) Monday morning, Monday afternoon, Friday morning, Friday afternoon",
      "B) Monday morning, Friday afternoon, Saturday morning, Saturday afternoon",
      "C) Monday afternoon, Wednesday morning, Wednesday afternoon, Saturday afternoon",
      "D) Wednesday morning, Wednesday afternoon, Friday afternoon, Saturday afternoon",
      "E) Wednesday afternoon, Friday afternoon, Saturday morning, Saturday afternoon"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([Monday, Tuesday, Wednesday, Friday, Saturday])\nactivities = EnumSort([lecturing, operating, treating_patients, conducting_research])\nmorning = Function([days] -> [activities])\nafternoon = Function([days] -> [activities])\n\n# Constraints\nForAll([d:days], Or(morning(d) == lecturing, morning(d) == operating, morning(d) == treating_patients, morning(d) == conducting_research)) ::: She performs exactly one activity in the morning\nForAll([d:days], Or(afternoon(d) == lecturing, afternoon(d) == operating, afternoon(d) == treating_patients, afternoon(d) == conducting_research)) ::: She performs exactly one activity in the afternoon\nCount([d:days], morning(d) == operating) == 3 ::: She performs operations on exactly three mornings\nAnd(morning(Monday) == operating, morning(Tuesday)!= operating) ::: If she operates on Monday, she does not operate on Tuesday\nAnd(afternoon(d1) == lecturing, afternoon(d2) == lecturing) ::: She lectures in the afternoon on exactly two consecutive calendar days\nAnd(d1!= d2, d1 < d2) ::: consecutive calendar days\nCount([d:days], morning(d) == treating_patients) == 1 ::: She treats patients on exactly one morning\nCount([d:days], afternoon(d) == treating_patients) == 3 ::: She treats patients on exactly three afternoons\nmorning(Saturday)!= operating ::: On Saturday she neither lectures nor performs operations\nmorning(Saturday)!= lecturing ::: On Saturday she neither lectures nor performs operations\nmorning(Saturday) == conducting_research ::: She conducts research on exactly one morning\n\n# Options\nQuestion ::: If Doctor Yamata operates on Tuesday, then her schedule for treating patients could be\nis_exception(is_sat(And(morning(Monday) == treating_patients, morning(Friday) == treating_"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_2_12",
    "context": "Doctor Yamata works only on Mondays, Tuesdays, Wednesdays, Fridays, and Saturdays. She performs four different activities—lecturing, operating, treating patients, and conducting research. Each working day she performs exactly one activity in the morning and exactly one activity in the afternoon. During each week her work schedule must satisfy the following restrictions: She performs operations on exactly three mornings. If she operates on Monday, she does not operate on Tuesday. She lectures in the afternoon on exactly two consecutive calendar days. She treats patients on exactly one morning and exactly three afternoons. She conducts research on exactly one morning. On Saturday she neither lectures nor performs operations.",
    "question": "Which one of the following is a pair of days on both of which Doctor Yamata must treat patients?",
    "answer": "E",
    "options": [
      "A) Monday and Tuesday",
      "B) Monday and Saturday",
      "C) Tuesday and Friday",
      "D) Tuesday and Saturday",
      "E) Friday and Saturday"
    ],
    "raw_logic_programs": [
      "# Declares\ndays = EnumSort([Monday, Tuesday, Wednesday, Friday, Saturday])\nactivities = EnumSort([lecturing, operating, treating_patients, conducting_research])\nmorning = Function([days] -> [activities])\nafternoon = Function([days] -> [activities])\n\n# Constraints\nForAll([d:days], Count([a:activities], morning(d) == a) == 1) ::: exactly one activity in the morning\nForAll([d:days], Count([a:activities], afternoon(d) == a) == 1) ::: exactly one activity in the afternoon\nAnd(morning(Monday) == operating, morning(Tuesday)!= operating) ::: If she operates on Monday, she does not operate on Tuesday\nAnd(afternoon(d) == lecturing, afternoon(d + 1) == lecturing) ::: lectures in the afternoon on exactly two consecutive calendar days\nAnd(morning(d) == treating_patients, afternoon(d)!= treating_patients) ::: treats patients on exactly one morning and exactly three afternoons\nAnd(morning(d) == conducting_research, afternoon(d)!= conducting_research) ::: conducts research on exactly one morning\nAnd(afternoon(Saturday)!= lecturing, morning(Saturday)!= operating) ::: On Saturday she neither lectures nor performs operations\n\n# Options\nQuestion ::: Which one of the following is a pair of days on both of which Doctor Yamata must treat patients?\nis_sat(And(morning(Monday) == treating_patients, morning(Tuesday) == treating_patients)) ::: A) Monday and Tuesday\nis_sat(And(morning(Monday) == treating_patients, morning(Saturday) == treating_patients)) ::: B) Monday and Saturday\nis_sat(And(morning(Tuesday) == treating_patients, morning(Friday) == treating_patients)) ::: C) Tuesday and Friday\nis_sat(And(morning(Tuesday) == treating_patients,"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_3_13",
    "context": "Each of seven judges voted for or else against granting Datalog Corporation's petition. Each judge is categorized as conservative, moderate, or liberal, and no judge is assigned more than one of those labels. Two judges are conservatives, two are moderates, and three are liberals. The following is known about how the judges voted: If the two conservatives and at least one liberal voted the same way as each other, then both moderates voted that way. If the three liberals voted the same way as each other, then no conservative voted that way. At least two of the judges voted for Datalog, and at least two voted against Datalog. At least one conservative voted against Datalog.",
    "question": "If the two moderates did not vote the same way as each other, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) No conservative and exactly two liberals voted for Datalog.",
      "B) Exactly one conservative and exactly one liberal voted for Datalog.",
      "C) Exactly one conservative and all three liberals voted for Datalog.",
      "D) Exactly two conservatives and exactly one liberal voted for Datalog.",
      "E) Exactly two conservatives and exactly two liberals voted for Datalog."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_3_14",
    "context": "Each of seven judges voted for or else against granting Datalog Corporation's petition. Each judge is categorized as conservative, moderate, or liberal, and no judge is assigned more than one of those labels. Two judges are conservatives, two are moderates, and three are liberals. The following is known about how the judges voted: If the two conservatives and at least one liberal voted the same way as each other, then both moderates voted that way. If the three liberals voted the same way as each other, then no conservative voted that way. At least two of the judges voted for Datalog, and at least two voted against Datalog. At least one conservative voted against Datalog.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) At least one conservative voted for Datalog.",
      "B) At least one liberal voted against Datalog.",
      "C) At least one liberal voted for Datalog.",
      "D) At least one moderate voted against Datalog.",
      "E) At least one moderate voted for Datalog."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_3_15",
    "context": "Each of seven judges voted for or else against granting Datalog Corporation's petition. Each judge is categorized as conservative, moderate, or liberal, and no judge is assigned more than one of those labels. Two judges are conservatives, two are moderates, and three are liberals. The following is known about how the judges voted: If the two conservatives and at least one liberal voted the same way as each other, then both moderates voted that way. If the three liberals voted the same way as each other, then no conservative voted that way. At least two of the judges voted for Datalog, and at least two voted against Datalog. At least one conservative voted against Datalog.",
    "question": "If the three liberals all voted the same way as each other, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Both moderates voted for Datalog.",
      "B) Both moderates voted against Datalog.",
      "C) One conservative voted for Datalog and one conservative voted against Datalog.",
      "D) One moderate voted for Datalog and one moderate voted against Datalog.",
      "E) All three liberals voted for Datalog."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_3_16",
    "context": "Each of seven judges voted for or else against granting Datalog Corporation's petition. Each judge is categorized as conservative, moderate, or liberal, and no judge is assigned more than one of those labels. Two judges are conservatives, two are moderates, and three are liberals. The following is known about how the judges voted: If the two conservatives and at least one liberal voted the same way as each other, then both moderates voted that way. If the three liberals voted the same way as each other, then no conservative voted that way. At least two of the judges voted for Datalog, and at least two voted against Datalog. At least one conservative voted against Datalog.",
    "question": "If exactly two judges voted against Datalog, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Both moderates voted for Datalog.",
      "B) Exactly one conservative voted for Datalog.",
      "C) No conservative voted for Datalog.",
      "D) Exactly two liberals voted for Datalog.",
      "E) Exactly three liberals voted for Datalog."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_3_17",
    "context": "Each of seven judges voted for or else against granting Datalog Corporation's petition. Each judge is categorized as conservative, moderate, or liberal, and no judge is assigned more than one of those labels. Two judges are conservatives, two are moderates, and three are liberals. The following is known about how the judges voted: If the two conservatives and at least one liberal voted the same way as each other, then both moderates voted that way. If the three liberals voted the same way as each other, then no conservative voted that way. At least two of the judges voted for Datalog, and at least two voted against Datalog. At least one conservative voted against Datalog.",
    "question": "Each of the following could be a complete and accurate list of those judges who voted for Datalog EXCEPT",
    "answer": "E",
    "options": [
      "A) two liberals",
      "B) one conservative, one liberal",
      "C) two moderates, three liberals",
      "D) one conservative, two moderates, two liberals",
      "E) one conservative, two moderates, three liberals"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_3_18",
    "context": "Each of seven judges voted for or else against granting Datalog Corporation's petition. Each judge is categorized as conservative, moderate, or liberal, and no judge is assigned more than one of those labels. Two judges are conservatives, two are moderates, and three are liberals. The following is known about how the judges voted: If the two conservatives and at least one liberal voted the same way as each other, then both moderates voted that way. If the three liberals voted the same way as each other, then no conservative voted that way. At least two of the judges voted for Datalog, and at least two voted against Datalog. At least one conservative voted against Datalog.",
    "question": "If the two conservatives voted the same way as each other, but the liberals did not all vote the same way as each other, then each of the following must be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) Both conservatives voted against Datalog.",
      "B) Both moderates voted for Datalog.",
      "C) At least one liberal voted against Datalog.",
      "D) Exactly two liberals voted for Datalog.",
      "E) Exactly five of the judges voted against Datalog."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_4_19",
    "context": "An official is assigning five runners—Larry, Ned, Olivia, Patricia, and Sonja—to parallel lanes numbered consecutively 1 through 5. The official will also assign each runner to represent a different charity—F, G, H, J, and K—not necessarily in order of the runner's names as given. The following ordering restrictions apply: The runner representing K is assigned to lane 4. Patricia is assigned to the only lane between the lanes of the runners representing F and G. There are exactly two lanes between Olivia's lane and the lane of the runner representing G. Sonja is assigned to a higher-numbered lane than the lane to which Ned is assigned.",
    "question": "Which one of the following is a possible assignment of runners to lanes by the charity they represent?",
    "answer": "E",
    "options": [
      "A) F G H K J",
      "B) G H J K F",
      "C) G K F J H",
      "D) H J G K F",
      "E) J H F K G"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_4_20",
    "context": "An official is assigning five runners—Larry, Ned, Olivia, Patricia, and Sonja—to parallel lanes numbered consecutively 1 through 5. The official will also assign each runner to represent a different charity—F, G, H, J, and K—not necessarily in order of the runner's names as given. The following ordering restrictions apply: The runner representing K is assigned to lane 4. Patricia is assigned to the only lane between the lanes of the runners representing F and G. There are exactly two lanes between Olivia's lane and the lane of the runner representing G. Sonja is assigned to a higher-numbered lane than the lane to which Ned is assigned.",
    "question": "The lane to which Patricia is assigned must be a lane that is",
    "answer": "D",
    "options": [
      "A) next to the lane to which Larry is assigned",
      "B) next to the lane to which Ned is assigned",
      "C) separated by exactly one lane from the lane to which Ned is assigned",
      "D) separated by exactly one lane from the lane to which Olivia is assigned",
      "E) separated by exactly one lane from the lane to which Sonja is assigned"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_4_21",
    "context": "An official is assigning five runners—Larry, Ned, Olivia, Patricia, and Sonja—to parallel lanes numbered consecutively 1 through 5. The official will also assign each runner to represent a different charity—F, G, H, J, and K—not necessarily in order of the runner's names as given. The following ordering restrictions apply: The runner representing K is assigned to lane 4. Patricia is assigned to the only lane between the lanes of the runners representing F and G. There are exactly two lanes between Olivia's lane and the lane of the runner representing G. Sonja is assigned to a higher-numbered lane than the lane to which Ned is assigned.",
    "question": "If Olivia is assigned to lane 2, which one of the following assignments must be made? Charity Lane",
    "answer": "B",
    "options": [
      "A) F 1",
      "B) G 5",
      "C) H 1",
      "D) H 3",
      "E) J 5"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_4_22",
    "context": "An official is assigning five runners—Larry, Ned, Olivia, Patricia, and Sonja—to parallel lanes numbered consecutively 1 through 5. The official will also assign each runner to represent a different charity—F, G, H, J, and K—not necessarily in order of the runner's names as given. The following ordering restrictions apply: The runner representing K is assigned to lane 4. Patricia is assigned to the only lane between the lanes of the runners representing F and G. There are exactly two lanes between Olivia's lane and the lane of the runner representing G. Sonja is assigned to a higher-numbered lane than the lane to which Ned is assigned.",
    "question": "Which one of the following, is a complete and accurate list of runners each of whom could be the runner representing F?",
    "answer": "D",
    "options": [
      "A) Larry, Ned",
      "B) Patricia, Sonja",
      "C) Larry, Ned, Olivia",
      "D) Larry, Ned, Sonja",
      "E) Ned, Patricia, Sonja"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_4_23",
    "context": "An official is assigning five runners—Larry, Ned, Olivia, Patricia, and Sonja—to parallel lanes numbered consecutively 1 through 5. The official will also assign each runner to represent a different charity—F, G, H, J, and K—not necessarily in order of the runner's names as given. The following ordering restrictions apply: The runner representing K is assigned to lane 4. Patricia is assigned to the only lane between the lanes of the runners representing F and G. There are exactly two lanes between Olivia's lane and the lane of the runner representing G. Sonja is assigned to a higher-numbered lane than the lane to which Ned is assigned.",
    "question": "If Ned is the runner representing J, then it must be true that",
    "answer": "B",
    "options": [
      "A) the runner representing G is assigned to lane 1",
      "B) the runner representing H is assigned to lane 2",
      "C) Larry is the runner representing K",
      "D) Olivia is the runner representing F",
      "E) Patricia is the runner representing H"
    ],
    "raw_logic_programs": [
      "# Declarations\nrunners = EnumSort([Larry, Ned, Olivia, Patricia, Sonja])\nlanes = EnumSort([1, 2, 3, 4, 5])\ncharities = EnumSort([F, G, H, J, K])\nrepresents = Function([runners, charities] -> [bool])\n\n# Constraints\nForAll([r:runners], Count([c:charities], represents(r, c)) == 1) ::: each runner to represent a different charity\nForAll([c:charities], Count([r:runners], represents(r, c)) == 1) ::: each charity to be represented by a different runner\nForAll([r:runners], Count([l:lanes], r == l) == 1) ::: each runner to be assigned to a different lane\nForAll([l:lanes], Count([r:runners], r == l) == 1) ::: each lane to be assigned to a different runner\nrepresents(Sonja, K) ::: The runner representing K is assigned to lane 4\nrepresents(Patricia, l) ::: Patricia is assigned to the only lane between the lanes of the runners representing F and G\nAnd(represents(Olivia, l), represents(Olivia, m), l!= m) ::: There are exactly two lanes between Olivia's lane and the lane of the runner representing G\nrepresents(Sonja, l) ::: Sonja is assigned to a higher-numbered lane than the lane to which Ned is assigned\n\n# Options\nQuestion ::: If Ned is the runner representing J, then it must be true that\nis_valid(represents(G, 1)) ::: (A)\nis_valid(represents(H, 2)) ::: (B)\nis_valid(represents(Larry, K)) ::: (C)\nis_valid(represents(Olivia, F)) ::: (D)\nis_valid(represents(Patricia, H)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199302_2-G_4_24",
    "context": "An official is assigning five runners—Larry, Ned, Olivia, Patricia, and Sonja—to parallel lanes numbered consecutively 1 through 5. The official will also assign each runner to represent a different charity—F, G, H, J, and K—not necessarily in order of the runner's names as given. The following ordering restrictions apply: The runner representing K is assigned to lane 4. Patricia is assigned to the only lane between the lanes of the runners representing F and G. There are exactly two lanes between Olivia's lane and the lane of the runner representing G. Sonja is assigned to a higher-numbered lane than the lane to which Ned is assigned.",
    "question": "If Larry represents J, which one of the following could be the assignment of runners to lanes?",
    "answer": "A",
    "options": [
      "A) Larry Olivia Ned Patricia Sonja",
      "B) Larry Ned Olivia Sonja Patricia",
      "C) Larry Sonja Patricia Ned Olivia",
      "D) Ned Olivia Larry Patricia Sonja",
      "E) Ned Sonja Olivia Patricia Larry"
    ],
    "raw_logic_programs": [
      "# Declarations\nrunners = EnumSort([Larry, Ned, Olivia, Patricia, Sonja])\nlanes = EnumSort([1, 2, 3, 4, 5])\ncharities = EnumSort([F, G, H, J, K])\nrepresents = Function([runners, charities] -> [bool])\nassigned = Function([runners, lanes] -> [bool])\n\n# Constraints\nForAll([r:runners], Count([c:charities], represents(r, c)) == 1) ::: each runner to represent a different charity\nForAll([l:lanes], Count([r:runners], assigned(r, l)) == 1) ::: each runner to a parallel lane\nAnd(assigned(Larry, 1), assigned(Ned, 2), assigned(Olivia, 3), assigned(Patricia, 4), assigned(Sonja, 5)) ::: Larry Olivia Ned Patricia Sonja\nAnd(assigned(Larry, 1), assigned(Ned, 3), assigned(Olivia, 2), assigned(Patricia, 4), assigned(Sonja, 5)) ::: Larry Ned Olivia Patricia Sonja\nAnd(assigned(Larry, 1), assigned(Ned, 4), assigned(Olivia, 2), assigned(Patricia, 3), assigned(Sonja, 5)) ::: Larry Sonja Patricia Ned Olivia\nAnd(assigned(Larry, 2), assigned(Ned, 1), assigned(Olivia, 3), assigned(Patricia, 4), assigned(Sonja, 5)) ::: Ned Olivia Larry Patricia Sonja\nAnd(assigned(Larry, 2), assigned(Ned, 3), assigned(Olivia, 1), assigned(Patricia, 4), assigned(Sonja, 5)) ::: Ned Sonja Olivia Patricia Larry\nAnd(assigned(Larry, 2), assigned(Ned, 4), assigned(Olivia, 1), assigned(Pat"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_1_1",
    "context": "A gymnastics instructor is planning a weekly schedule, Monday through Friday, of individual coaching sessions for each of six students—H, I, K, O, U, and Z. The instructor will coach exactly one student each day, except for one day when the instructor will coach two students in separate but consecutive sessions. The following restrictions apply: H's session must take place at some time before Z's session. I's session is on Thursday. K's session is always scheduled for the day immediately before or the day immediately after the day for which O's session is scheduled. Neither Monday nor Wednesday can be a day for which two students are scheduled.",
    "question": "Which one of the following is a pair of students whose sessions can both be scheduled for Tuesday, not necessarily in the order given?",
    "answer": "D",
    "options": [
      "A) H and U",
      "B) H and Z",
      "C) K and O",
      "D) O and U",
      "E) U and Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([H, I, K, O, U, Z])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ncoaches = Function([students, days] -> [bool])\n\n# Constraints\nForAll([s:students], Count([d:days], coaches(s, d)) == 1) ::: The instructor will coach exactly one student each day\nAnd(coaches(H, d1), coaches(Z, d2), d1 < d2) ::: H's session must take place at some time before Z's session\ncoaches(I, Thursday) ::: I's session is on Thursday\nAnd(coaches(K, d1), coaches(O, d2), d1 == d2 - 1 or d1 == d2 + 1) ::: K's session is always scheduled for the day immediately before or the day immediately after the day for which O's session is scheduled\nNot(And(coaches(s1, Monday), coaches(s2, Monday))) ::: Neither Monday nor Wednesday can be a day for which two students are scheduled\nNot(And(coaches(s1, Wednesday), coaches(s2, Wednesday))) ::: Neither Monday nor Wednesday can be a day for which two students are scheduled\n\n# Options\nQuestion ::: Which one of the following is a pair of students whose sessions can both be scheduled for Tuesday, not necessarily in the order given?\nis_sat(And(coaches(H, Tuesday), coaches(U, Tuesday))) ::: (A)\nis_sat(And(coaches(H, Tuesday), coaches(Z, Tuesday))) ::: (B)\nis_sat(And(coaches(K, Tuesday), coaches(O, Tuesday))) ::: (C)\nis_sat(And(coaches(O, Tuesday), coaches(U, Tuesday))) ::: (D)\nis_sat(And(coaches(U, Tuesday), coach"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_1_2",
    "context": "A gymnastics instructor is planning a weekly schedule, Monday through Friday, of individual coaching sessions for each of six students—H, I, K, O, U, and Z. The instructor will coach exactly one student each day, except for one day when the instructor will coach two students in separate but consecutive sessions. The following restrictions apply: H's session must take place at some time before Z's session. I's session is on Thursday. K's session is always scheduled for the day immediately before or the day immediately after the day for which O's session is scheduled. Neither Monday nor Wednesday can be a day for which two students are scheduled.",
    "question": "If K's session is scheduled for Tuesday, then which one of the following is the earliest day for which Z's session can be scheduled?",
    "answer": "B",
    "options": [
      "A) Monday",
      "B) Tuesday",
      "C) Wednesday",
      "D) Thursday",
      "E) Friday"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([H, I, K, O, U, Z])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ncoaches = Function([students, days] -> [bool])\n\n# Constraints\nForAll([s:students], Count([d:days], coaches(s, d)) == 1) ::: The instructor will coach exactly one student each day\nAnd(coaches(H, d1), coaches(Z, d2), d1 < d2) ::: H's session must take place at some time before Z's session\ncoaches(I, Thursday) ::: I's session is on Thursday\nAnd(coaches(K, d1), coaches(O, d2), d1 == d2 - 1 || d1 == d2 + 1) ::: K's session is always scheduled for the day immediately before or the day immediately after the day for which O's session is scheduled\nNot(And(coaches(s1, Monday), coaches(s2, Monday))) ::: Neither Monday nor Wednesday can be a day for which two students are scheduled\nNot(And(coaches(s1, Wednesday), coaches(s2, Wednesday))) ::: Neither Monday nor Wednesday can be a day for which two students are scheduled\ncoaches(K, Tuesday) ::: K's session is scheduled for Tuesday\n\n# Options\nQuestion ::: If K's session is scheduled for Tuesday, then which one of the following is the earliest day for which Z's session can be scheduled?\nis_sat(ForAll([d:days], coaches(Z, d) == coaches(H, d - 1))) ::: A) Monday\nis_sat(ForAll([d:days], coaches(Z, d) == coaches(H, d))) ::: B) Tuesday\nis_sat(ForAll([d:days], coaches(Z, d) == coaches(H, d + 1))) ::: C) Wednesday\nis_sat(For"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_1_3",
    "context": "A gymnastics instructor is planning a weekly schedule, Monday through Friday, of individual coaching sessions for each of six students—H, I, K, O, U, and Z. The instructor will coach exactly one student each day, except for one day when the instructor will coach two students in separate but consecutive sessions. The following restrictions apply: H's session must take place at some time before Z's session. I's session is on Thursday. K's session is always scheduled for the day immediately before or the day immediately after the day for which O's session is scheduled. Neither Monday nor Wednesday can be a day for which two students are scheduled.",
    "question": "Which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) If U's session is scheduled for Monday, H's session is scheduled for Tuesday.",
      "B) If U's session is scheduled for Tuesday, O's session is scheduled for Wednesday.",
      "C) If U's session is scheduled for Wednesday, Z's session is scheduled for Tuesday.",
      "D) If U's session is scheduled for Thursday, Z's session is scheduled for Friday.",
      "E) If U's session is scheduled for Friday, Z's session is scheduled for Thursday."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([H, I, K, O, U, Z])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ncoaches = Function([students, days] -> [bool])\n\n# Constraints\nForAll([s:students], Count([d:days], coaches(s, d)) == 1) ::: The instructor will coach exactly one student each day\nAnd(coaches(H, d1), coaches(Z, d2), d1 < d2) ::: H's session must take place at some time before Z's session\ncoaches(I, Thursday) ::: I's session is on Thursday\nAnd(coaches(K, d1), coaches(O, d2), d1 == d2 - 1, d1 == d2 + 1) ::: K's session is always scheduled for the day immediately before or the day immediately after the day for which O's session is scheduled\nNot(And(coaches(s1, Monday), coaches(s2, Monday))) ::: Neither Monday nor Wednesday can be a day for which two students are scheduled\nNot(And(coaches(s1, Wednesday), coaches(s2, Wednesday))) ::: Neither Monday nor Wednesday can be a day for which two students are scheduled\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_sat(And(coaches(U, Monday), coaches(H, Tuesday))) ::: A) If U's session is scheduled for Monday, H's session is scheduled for Tuesday.\nis_sat(And(coaches(U, Tuesday), coaches(O, Wednesday))) ::: B) If U's session is scheduled for Tuesday, O's session is scheduled for Wednesday.\nis_sat(And(coaches(U, Wednesday), coaches(Z, Tuesday))) ::: C) If U's session is scheduled for Wednesday, Z's session is scheduled for Tuesday.\nis_sat("
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_1_4",
    "context": "A gymnastics instructor is planning a weekly schedule, Monday through Friday, of individual coaching sessions for each of six students—H, I, K, O, U, and Z. The instructor will coach exactly one student each day, except for one day when the instructor will coach two students in separate but consecutive sessions. The following restrictions apply: H's session must take place at some time before Z's session. I's session is on Thursday. K's session is always scheduled for the day immediately before or the day immediately after the day for which O's session is scheduled. Neither Monday nor Wednesday can be a day for which two students are scheduled.",
    "question": "Scheduling Z's session for which one of the following days determines the day for which U's session must be scheduled?",
    "answer": "D",
    "options": [
      "A) Monday",
      "B) Tuesday",
      "C) Wednesday",
      "D) Thursday",
      "E) Friday"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([H, I, K, O, U, Z])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ncoaches = Function([students, days] -> [bool])\n\n# Constraints\nForAll([s:students], Count([d:days], coaches(s, d)) == 1) ::: The instructor will coach exactly one student each day\nAnd(coaches(H, d1), coaches(Z, d2), d1 < d2) ::: H's session must take place at some time before Z's session\ncoaches(I, Thursday) ::: I's session is on Thursday\nAnd(coaches(K, d1), coaches(O, d2), d1 == d2 - 1 or d1 == d2 + 1) ::: K's session is always scheduled for the day immediately before or the day immediately after the day for which O's session is scheduled\nNot(And(coaches(s1, Monday), coaches(s2, Monday))) ::: Neither Monday nor Wednesday can be a day for which two students are scheduled\nNot(And(coaches(s1, Wednesday), coaches(s2, Wednesday))) ::: Neither Monday nor Wednesday can be a day for which two students are scheduled\n\n# Options\nQuestion ::: Scheduling Z's session for which one of the following days determines the day for which U's session must be scheduled?\nis_sat(And(coaches(Z, Monday), coaches(U, Monday))) ::: A) Monday\nis_sat(And(coaches(Z, Tuesday), coaches(U, Tuesday))) ::: B) Tuesday\nis_sat(And(coaches(Z, Wednesday), coaches(U, Wednesday))) ::: C) Wednesday\nis_sat(And(coaches(Z, Thursday), coaches(U, Thursday))) ::: D) Thursday\nis_sat(And(coaches(Z, Friday), coach"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_1_5",
    "context": "A gymnastics instructor is planning a weekly schedule, Monday through Friday, of individual coaching sessions for each of six students—H, I, K, O, U, and Z. The instructor will coach exactly one student each day, except for one day when the instructor will coach two students in separate but consecutive sessions. The following restrictions apply: H's session must take place at some time before Z's session. I's session is on Thursday. K's session is always scheduled for the day immediately before or the day immediately after the day for which O's session is scheduled. Neither Monday nor Wednesday can be a day for which two students are scheduled.",
    "question": "If H's session is scheduled as the next session after U's session, which one of the following could be true about H's session and U's session?",
    "answer": "A",
    "options": [
      "A) U's session is scheduled for Monday, and H's session is scheduled for Tuesday.",
      "B) U's session is scheduled for Thursday, and H's session is scheduled for Friday.",
      "C) They are both scheduled for Tuesday.",
      "D) They are both scheduled for Thursday.",
      "E) They are both scheduled for Friday."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([H, I, K, O, U, Z])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ncoaches = Function([students, days] -> [bool])\n\n# Constraints\nForAll([s:students], Count([d:days], coaches(s, d)) == 1) ::: The instructor will coach exactly one student each day\nAnd(coaches(H, d1), coaches(Z, d2), d1 < d2) ::: H's session must take place at some time before Z's session\ncoaches(I, Thursday) ::: I's session is on Thursday\nAnd(coaches(K, d1), coaches(O, d2), d1 == d2 - 1, d1 == d2 + 1) ::: K's session is always scheduled for the day immediately before or the day immediately after the day for which O's session is scheduled\nNot(And(coaches(s1, Monday), coaches(s2, Monday))) ::: Neither Monday nor Wednesday can be a day for which two students are scheduled\nNot(And(coaches(s1, Wednesday), coaches(s2, Wednesday))) ::: Neither Monday nor Wednesday can be a day for which two students are scheduled\n\n# Options\nQuestion ::: If H's session is scheduled as the next session after U's session, which one of the following could be true about H's session and U's session?\nis_valid(And(coaches(U, Monday), coaches(H, Tuesday))) ::: A) U's session is scheduled for Monday, and H's session is scheduled for Tuesday.\nis_valid(And(coaches(U, Thursday), coaches(H, Friday))) ::: B) U's session is scheduled for Thursday, and H's session is scheduled for Friday.\nis_valid(And(coaches(U, Tuesday), coaches(H, Tuesday))) ::: C) They are both scheduled for Tuesday."
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_2_6",
    "context": "A square parking lot has exactly eight lights—numbered 1 through 8—situated along its perimeter as diagramed below. The lot must always be illuminated in such a way that the following specifications are met: At least one of any three consecutively numbered lights is off. Light 8 is on. Neither light 2 nor light 7 is on when light 1 is on. At least one of the three lights on each side is on. If any side has exactly one of its three lights on, then that light is its center light. Two of the lights on the north side are on.",
    "question": "Which one of the following could be a complete and accurate list of lights that are on together?",
    "answer": "C",
    "options": [
      "A) 1, 3, 5, 7",
      "B) 2, 4, 6, 8",
      "C) 2, 3, 5, 6, 8",
      "D) 3, 4, 6, 7, 8",
      "E) 1, 2, 4, 5, 6, 8"
    ],
    "raw_logic_programs": [
      "# Declarations\nlights = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\non = Function([lights] -> [bool])\n\n# Constraints\nForAll([l:lights], And(1 <= on(l), on(l) <= 1)) ::: At least one of any three consecutively numbered lights is off\non(8) ::: Light 8 is on\nImplies(on(1), Not(on(2))) ::: Neither light 2 nor light 7 is on when light 1 is on\nForAll([s:lights], And(1 <= on(s), on(s) <= 1)) ::: At least one of the three lights on each side is on\nForAll([s:lights], Implies(And(1 <= on(s), on(s) <= 1), And(s == 4, s == 5, s == 6))) ::: If any side has exactly one of its three lights on, then that light is its center light\nForAll([s:lights], Implies(And(1 <= on(s), on(s) <= 1), And(s == 1, s == 3))) ::: Two of the lights on the north side are on\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of lights that are on together?\nis_sat(ForAll([l:lights], Implies(on(l), l == 1) And Implies(on(l), l == 3) And Implies(on(l), l == 5) And Implies(on(l), l == 7))) ::: A) 1, 3, 5, 7\nis_sat(ForAll([l:lights], Implies(on(l), l == 2) And Implies(on(l), l == 4) And Implies(on(l), l == 6) And Implies(on(l), l == 8))) ::: B) 2, 4, 6, 8\nis_sat(ForAll([l:lights], Implies"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_2_7",
    "context": "A square parking lot has exactly eight lights—numbered 1 through 8—situated along its perimeter as diagramed below. The lot must always be illuminated in such a way that the following specifications are met: At least one of any three consecutively numbered lights is off. Light 8 is on. Neither light 2 nor light 7 is on when light 1 is on. At least one of the three lights on each side is on. If any side has exactly one of its three lights on, then that light is its center light. Two of the lights on the north side are on.",
    "question": "Which one of the following lights must be on?",
    "answer": "B",
    "options": [
      "A) light 2",
      "B) light 3",
      "C) light 4",
      "D) light 5",
      "E) light 6"
    ],
    "raw_logic_programs": [
      "# Declarations\nlights = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\non = Function([lights] -> [bool])\n\n# Constraints\nForAll([l:lights], And(1 <= on(l), on(l) <= 1)) ::: At least one of any three consecutively numbered lights is off\non(8) ::: Light 8 is on\nImplies(on(1), Not(on(2))) ::: Neither light 2 nor light 7 is on when light 1 is on\nForAll([s:lights], And(1 <= on(s), on(s) <= 1)) ::: At least one of the three lights on each side is on\nForAll([s:lights], Implies(Count([l:lights], And(l == s, on(l))) == 1, s == 4)) ::: If any side has exactly one of its three lights on, then that light is its center light\nCount([l:lights], on(l)) == 2 ::: Two of the lights on the north side are on\n\n# Options\nQuestion ::: Which one of the following lights must be on?\nis_valid(on(2)) ::: A) light 2\nis_valid(on(3)) ::: B) light 3\nis_valid(on(4)) ::: C) light 4\nis_valid(on(5)) ::: D) light 5\nis_valid(on(6)) ::: E) light 6\n------\nProblem:\nA certain company has exactly six employees—F, G, H, I, J, and K—who are assigned to work on exactly six projects—numbered 1 through 6. Each employee is assigned to work on exactly one project, and each project is assigned to exactly one employee. The following conditions apply: F is assigned to project 1. H is assigned to project 3. I is assigned to project 5. J is assigned to project 4. K is assigned to project 2.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) G is assigned to"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_2_8",
    "context": "A square parking lot has exactly eight lights—numbered 1 through 8—situated along its perimeter as diagramed below. The lot must always be illuminated in such a way that the following specifications are met: At least one of any three consecutively numbered lights is off. Light 8 is on. Neither light 2 nor light 7 is on when light 1 is on. At least one of the three lights on each side is on. If any side has exactly one of its three lights on, then that light is its center light. Two of the lights on the north side are on.",
    "question": "If light 1 is off, which one of the following is a light that must also be off?",
    "answer": "B",
    "options": [
      "A) light 3",
      "B) light 4",
      "C) light 5",
      "D) light 6",
      "E) light 7"
    ],
    "raw_logic_programs": [
      "# Declarations\nlights = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\non = Function([lights] -> [bool])\n\n# Constraints\nForAll([l:lights], And(1 <= on(l), on(l) <= 1)) ::: At least one of any three consecutively numbered lights is off\non(8) ::: Light 8 is on\nImplies(on(1), Not(on(2))) ::: Neither light 2 nor light 7 is on when light 1 is on\nForAll([s:lights], And(1 <= on(s), on(s) <= 1)) ::: At least one of the three lights on each side is on\nForAll([s:lights], Implies(Count([l:lights], And(l == s, on(l))) == 1, s == 4)) ::: If any side has exactly one of its three lights on, then that light is its center light\nCount([l:lights], on(l)) == 2 ::: Two of the lights on the north side are on\n\n# Options\nQuestion ::: If light 1 is off, which one of the following is a light that must also be off?\nis_valid(Exists([l:lights], And(l == 3, Not(on(l))))) ::: A) light 3\nis_valid(Exists([l:lights], And(l == 4, Not(on(l))))) ::: B) light 4\nis_valid(Exists([l:lights], And(l == 5, Not(on(l))))) ::: C) light 5\nis_valid(Exists([l:lights], And(l == 6, Not(on(l))))) ::: D) light 6\nis_valid(Exists([l:lights], And(l == 7, Not(on(l))))) ::: E) light 7\n------\nProblem:\nA certain company has exactly six employees—F, G, H, I, J, and K—who are assigned to work on exactly three projects—1, 2"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_2_9",
    "context": "A square parking lot has exactly eight lights—numbered 1 through 8—situated along its perimeter as diagramed below. The lot must always be illuminated in such a way that the following specifications are met: At least one of any three consecutively numbered lights is off. Light 8 is on. Neither light 2 nor light 7 is on when light 1 is on. At least one of the three lights on each side is on. If any side has exactly one of its three lights on, then that light is its center light. Two of the lights on the north side are on.",
    "question": "Which one of the following statements must be true?",
    "answer": "D",
    "options": [
      "A) If light 2 is on, then light 6 is off.",
      "B) If light 3 is on, then light 2 is on.",
      "C) If light 4 is on, then light 3 is off.",
      "D) If light 5 is off, then light 4 is on.",
      "E) If light 6 is off, then light 1 is on."
    ],
    "raw_logic_programs": [
      "# Declarations\nlights = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\non = Function([lights] -> [bool])\n\n# Constraints\nForAll([l:lights], And(1 <= on(l), on(l) <= 1)) ::: At least one of any three consecutively numbered lights is off\non(8) ::: Light 8 is on\nImplies(on(1), Not(on(2))) ::: Neither light 2 nor light 7 is on when light 1 is on\nForAll([s:lights], And(1 <= on(s), on(s) <= 1)) ::: At least one of the three lights on each side is on\nForAll([s:lights], Implies(And(1 <= on(s), on(s) <= 1), And(on(s) == 1, s == 4))) ::: If any side has exactly one of its three lights on, then that light is its center light\nForAll([s:lights], Implies(And(1 <= on(s), on(s) <= 1), And(on(s) == 1, s == 5))) ::: Two of the lights on the north side are on\n\n# Options\nQuestion ::: Which one of the following statements must be true?\nis_valid(Implies(on(2), Not(on(6)))) ::: A) If light 2 is on, then light 6 is off.\nis_valid(Implies(on(3), on(2))) ::: B) If light 3 is on, then light 2 is on.\nis_valid(Implies(on(4), Not(on(3)))) ::: C) If light 4 is on, then light 3 is off.\nis_valid(Implies(Not(on(5)), on(4))) ::: D) If light 5 is off, then light 4 is on.\nis_valid(Implies(Not(on(6)), on(1))) ::: E) If light 6 is off, then light 1 is on.\n------"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_2_10",
    "context": "A square parking lot has exactly eight lights—numbered 1 through 8—situated along its perimeter as diagramed below. The lot must always be illuminated in such a way that the following specifications are met: At least one of any three consecutively numbered lights is off. Light 8 is on. Neither light 2 nor light 7 is on when light 1 is on. At least one of the three lights on each side is on. If any side has exactly one of its three lights on, then that light is its center light. Two of the lights on the north side are on.",
    "question": "If light 5 is on, which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Light 1 is off and light 6 is off.",
      "B) Light 1 is on and light 7 is on.",
      "C) Light 2 is off and light 4 is on.",
      "D) Light 2 is off and light 6 is off.",
      "E) Light 6 is on and light 7 is on."
    ],
    "raw_logic_programs": [
      "# Declarations\nlights = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\non = Function([lights] -> [bool])\n\n# Constraints\nForAll([l:lights], And(1 <= on(l), on(l) <= 1)) ::: At least one of any three consecutively numbered lights is off\non(8) ::: Light 8 is on\nImplies(on(1), Not(on(2))) ::: Neither light 2 nor light 7 is on when light 1 is on\nForAll([s:lights], And(1 <= on(s), on(s) <= 1)) ::: At least one of the three lights on each side is on\nForAll([s:lights], Implies(Count([l:lights], And(l == s, on(l))) == 1, on(s) == 3)) ::: If any side has exactly one of its three lights on, then that light is its center light\nForAll([s:lights], Implies(Count([l:lights], And(l == s, on(l))) == 2, on(s)!= 3)) ::: Two of the lights on the north side are on\n\n# Options\nQuestion ::: If light 5 is on, which one of the following could be true?\nis_valid(And(Not(on(1)), Not(on(6)))) ::: A) Light 1 is off and light 6 is off.\nis_valid(And(on(1), on(7))) ::: B) Light 1 is on and light 7 is on.\nis_valid(And(Not(on(2)), on(4))) ::: C) Light 2 is off and light 4 is on.\nis_valid(And(Not(on(2)), Not(on(6)))) ::: D) Light 2 is off and light 6 is off.\nis_valid(And(on(6), on(7))) ::: E) Light 6 is on and light 7 is on.\n------\nProblem:\nA certain company has exactly six employees"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_2_11",
    "context": "A square parking lot has exactly eight lights—numbered 1 through 8—situated along its perimeter as diagramed below. The lot must always be illuminated in such a way that the following specifications are met: At least one of any three consecutively numbered lights is off. Light 8 is on. Neither light 2 nor light 7 is on when light 1 is on. At least one of the three lights on each side is on. If any side has exactly one of its three lights on, then that light is its center light. Two of the lights on the north side are on.",
    "question": "If light 4 is on, each of the following statements must be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) Light 1 is on.",
      "B) Light 2 is on.",
      "C) Light 5 is off.",
      "D) Light 6 is on.",
      "E) Light 7 is off."
    ],
    "raw_logic_programs": [
      "# Declarations\nlights = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\non = Function([lights] -> [bool])\n\n# Constraints\nForAll([l:lights], And(1 <= on(l), on(l) <= 1)) ::: At least one of any three consecutively numbered lights is off\non(8) ::: Light 8 is on\nImplies(on(1), Not(on(2))) ::: Neither light 2 nor light 7 is on when light 1 is on\nForAll([s:lights], And(1 <= on(s), on(s) <= 1)) ::: At least one of the three lights on each side is on\nForAll([s:lights], Implies(Count([l:lights], And(l == s, on(l))) == 1, s == 4)) ::: If any side has exactly one of its three lights on, then that light is its center light\nForAll([s:lights], Implies(Count([l:lights], And(l == s, on(l))) == 2, s == 1 or s == 3 or s == 5)) ::: Two of the lights on the north side are on\n\n# Options\nQuestion ::: If light 4 is on, each of the following statements must be true EXCEPT:\nis_exception(is_sat(on(1))) ::: A) Light 1 is on.\nis_exception(is_sat(on(2))) ::: B) Light 2 is on.\nis_exception(is_sat(on(5))) ::: C) Light 5 is off.\nis_exception(is_sat(on(6))) ::: D) Light 6 is on.\nis_exception(is_sat(on(7))) ::: E) Light 7 is off.\n------\nProblem:\nA certain company has exactly six employees—F, G, H, I, J, and K—who are assigned to work on exactly three projects—1, 2, and 3—in such a way that"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_2_12",
    "context": "A square parking lot has exactly eight lights—numbered 1 through 8—situated along its perimeter as diagramed below. The lot must always be illuminated in such a way that the following specifications are met: At least one of any three consecutively numbered lights is off. Light 8 is on. Neither light 2 nor light 7 is on when light 1 is on. At least one of the three lights on each side is on. If any side has exactly one of its three lights on, then that light is its center light. Two of the lights on the north side are on.",
    "question": "Suppose that it is no longer part of the specifications that two lights on the north side be on. If all of the other original specifications remain the same, and if exactly one light on the north side is on, which one of the following statements could be false?",
    "answer": "E",
    "options": [
      "A) Light 1 is off.",
      "B) Light 2 is on.",
      "C) Light 3 is off.",
      "D) Light 4 is on.",
      "E) Light 5 is on."
    ],
    "raw_logic_programs": [
      "# Declarations\nlights = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\non = Function([lights] -> [bool])\n\n# Constraints\nForAll([l:lights], And(1 <= on(l), on(l) <= 1)) ::: At least one of any three consecutively numbered lights is off\non(8) ::: Light 8 is on\nForAll([l:lights], Implies(on(1), Not(on(l)))) ::: Neither light 2 nor light 7 is on when light 1 is on\nForAll([l:lights], And(1 <= on(l), on(l) <= 1)) ::: At least one of the three lights on each side is on\nForAll([l:lights], Implies(on(l), Not(on(l)))) ::: If any side has exactly one of its three lights on, then that light is its center light\nForAll([l:lights], And(1 <= on(l), on(l) <= 1)) ::: Two of the lights on the north side are on\n\n# Options\nQuestion ::: Suppose that it is no longer part of the specifications that two lights on the north side be on. If all of the other original specifications remain the same, and if exactly one light on the north side is on, which one of the following statements could be false?\nis_exception(is_sat(on(1))) ::: A) Light 1 is off.\nis_exception(is_sat(on(2))) ::: B) Light 2 is on.\nis_exception(is_sat(on(3))) ::: C) Light 3 is off.\nis_exception(is_sat(on(4))) ::: D) Light 4 is on.\nis_exception(is_sat(on(5))) ::: E) Light 5 is on.\n------\nProblem:\nA certain company has exactly six employees—F, G, H, I, J, and K—who are to be assigned to exactly three departments—marketing, sales, and production."
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_3_13",
    "context": "Seven children are to be seated in seven chairs arranged in a row that runs from west to east. All seven children will face north. Four of the children are boys: Frank, Harry, Ivan, and Joel. Three are girls: Ruby, Sylvia, and Thelma. The children are assigned to chairs according to the following conditions: Exactly one child sits in each chair. No boy sits next to another boy. Ivan sits next to and east of the fourth child in the row. Sylvia sits east of Ivan. Frank sits next to Ruby.",
    "question": "What is the maximum possible number of different pairs of chairs in which Frank and Ruby could sit?",
    "answer": "C",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Frank, Harry, Ivan, Joel, Ruby, Sylvia, Thelma])\nchairs = EnumSort([1, 2, 3, 4, 5, 6, 7])\nseats = Function([children, chairs] -> [bool])\n\n# Constraints\nForAll([c:children], Count([ch:chairs], seats(c, ch)) == 1) ::: Exactly one child sits in each chair\nForAll([c:children], Implies(seats(c, ch), Not(seats(c, ch + 1)))) ::: No boy sits next to another boy\nseats(Ivan, 4) ::: Ivan sits next to and east of the fourth child in the row\nseats(Sylvia, 5) ::: Sylvia sits east of Ivan\nseats(Frank, 6) ::: Frank sits next to Ruby\n\n# Options\nQuestion ::: What is the maximum possible number of different pairs of chairs in which Frank and Ruby could sit?\nis_sat(ForAll([c:children], Count([ch:chairs], seats(c, ch)) == 1)) ::: A) one\nis_sat(ForAll([c:children], Count([ch:chairs], seats(c, ch)) == 2)) ::: B) two\nis_sat(ForAll([c:children], Count([ch:chairs], seats(c, ch)) == 3)) ::: C) three\nis_sat(ForAll([c:children], Count([ch:chairs], seats(c, ch)) == 4)) ::: D) four\nis_sat(ForAll([c:children], Count([ch:chairs], seats(c, ch)) == 5)) ::: E) five\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either man"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_3_14",
    "context": "Seven children are to be seated in seven chairs arranged in a row that runs from west to east. All seven children will face north. Four of the children are boys: Frank, Harry, Ivan, and Joel. Three are girls: Ruby, Sylvia, and Thelma. The children are assigned to chairs according to the following conditions: Exactly one child sits in each chair. No boy sits next to another boy. Ivan sits next to and east of the fourth child in the row. Sylvia sits east of Ivan. Frank sits next to Ruby.",
    "question": "Which one of the following statements must be false?",
    "answer": "C",
    "options": [
      "A) Both Harry and Joel sit east of Frank.",
      "B) Both Harry and Ruby sit east of Frank.",
      "C) Both Harry and Joel sit west of Frank.",
      "D) Both Harry and Ruby sit west of Frank.",
      "E) Both Joel and Ruby sit east of Frank."
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Frank, Harry, Ivan, Joel, Ruby, Sylvia, Thelma])\nchairs = EnumSort([1, 2, 3, 4, 5, 6, 7])\nseats = Function([children, chairs] -> [bool])\n\n# Constraints\nForAll([c:children], Count([ch:chairs], seats(c, ch)) == 1) ::: Exactly one child sits in each chair\nForAll([c:children], Not(Exists([c2:children], And(c!= c2, seats(c, chairs), seats(c2, chairs))))) ::: No boy sits next to another boy\nseats(Ivan, 4) ::: Ivan sits next to and east of the fourth child in the row\nseats(Sylvia, 5) ::: Sylvia sits east of Ivan\nseats(Frank, 3) ::: Frank sits next to Ruby\n\n# Options\nQuestion ::: Which one of the following statements must be false?\nis_exception(is_sat(Exists([c:children], And(c!= Frank, seats(c, chairs), seats(c, chairs))))) ::: A) Both Harry and Joel sit east of Frank.\nis_exception(is_sat(Exists([c:children], And(c!= Frank, seats(c, chairs), seats(c, chairs))))) ::: B) Both Harry and Ruby sit east of Frank.\nis_exception(is_sat(Exists([c:children], And(c!= Frank, seats(c, chairs), seats(c, chairs))))) ::: C) Both Harry and Joel sit west of Frank.\nis_exception(is_sat(Exists([c:children], And(c!= Frank, seats(c, chairs), seats(c, chairs))))) ::: D) Both Harry and Ruby sit west of Frank.\nis_exception(is_sat(Exists([c:children], And(c!= Frank, seats(c, chairs), seats(c, chairs))))) ::: E) Both Joel and Ruby"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_3_15",
    "context": "Seven children are to be seated in seven chairs arranged in a row that runs from west to east. All seven children will face north. Four of the children are boys: Frank, Harry, Ivan, and Joel. Three are girls: Ruby, Sylvia, and Thelma. The children are assigned to chairs according to the following conditions: Exactly one child sits in each chair. No boy sits next to another boy. Ivan sits next to and east of the fourth child in the row. Sylvia sits east of Ivan. Frank sits next to Ruby.",
    "question": "If Thelma sits next to Ivan, and if Frank sits next to Thelma, which one of the following statements could be false?",
    "answer": "E",
    "options": [
      "A) Both Frank and Ivan sit east of Ruby.",
      "B) Both Frank and Ruby sit west of Thelma.",
      "C) Both Frank and Sylvia sit east of Ruby.",
      "D) Both Frank and Thelma sit west of Sylvia.",
      "E) Both Frank and Ruby sit west of Joel."
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Frank, Harry, Ivan, Joel, Ruby, Sylvia, Thelma])\nchairs = EnumSort([1, 2, 3, 4, 5, 6, 7])\nseats = Function([children, chairs] -> [bool])\n\n# Constraints\nForAll([c:children], Count([ch:chairs], seats(c, ch)) == 1) ::: Exactly one child sits in each chair\nForAll([c:children], Not(And(seats(c, ch1), seats(c, ch2), ch1!= ch2, c == c))) ::: No boy sits next to another boy\nseats(Ivan, 4) ::: Ivan sits next to and east of the fourth child in the row\nseats(Sylvia, 5) ::: Sylvia sits east of Ivan\nseats(Frank, 6) ::: Frank sits next to Ruby\n\n# Options\nQuestion ::: If Thelma sits next to Ivan, and if Frank sits next to Thelma, which one of the following statements could be false?\nis_exception(is_sat(And(seats(Frank, 7), seats(Ivan, 6), seats(Ruby, 5)))) ::: (A)\nis_exception(is_sat(And(seats(Frank, 6), seats(Ruby, 5), seats(Thelma, 7)))) ::: (B)\nis_exception(is_sat(And(seats(Frank, 7), seats(Ruby, 5), seats(Sylvia, 6)))) ::: (C)\nis_exception(is_sat(And(seats(Frank, 6), seats(Sylvia, 7), seats(Thelma, 5)))) ::: (D)\nis_exception(is_sat(And(seats(Frank, 6), seats(Ruby, 5), seats(Joel, 7)))) ::: (E)\n------\nProblem:\nA group of six people—A, B,"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_3_16",
    "context": "Seven children are to be seated in seven chairs arranged in a row that runs from west to east. All seven children will face north. Four of the children are boys: Frank, Harry, Ivan, and Joel. Three are girls: Ruby, Sylvia, and Thelma. The children are assigned to chairs according to the following conditions: Exactly one child sits in each chair. No boy sits next to another boy. Ivan sits next to and east of the fourth child in the row. Sylvia sits east of Ivan. Frank sits next to Ruby.",
    "question": "If Frank does not sit next to any child who sits next to Ivan, which one of the following statements could be true?",
    "answer": "B",
    "options": [
      "A) Harry sits west of Frank.",
      "B) Joel sits west of Ivan.",
      "C) Ruby sits west of Frank.",
      "D) Thelma sits west of Frank.",
      "E) Thelma sits west of Ruby."
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Frank, Harry, Ivan, Joel, Ruby, Sylvia, Thelma])\nchairs = EnumSort([1, 2, 3, 4, 5, 6, 7])\nseats = Function([children, chairs] -> [bool])\n\n# Constraints\nForAll([c:children], Count([ch:chairs], seats(c, ch)) == 1) ::: Exactly one child sits in each chair\nForAll([c:children], Implies(seats(c, ch), Not(seats(c, ch + 1)))) ::: No boy sits next to another boy\nseats(Ivan, 4) ::: Ivan sits next to and east of the fourth child in the row\nseats(Sylvia, 5) ::: Sylvia sits east of Ivan\nseats(Frank, 6) ::: Frank sits next to Ruby\n\n# Options\nQuestion ::: If Frank does not sit next to any child who sits next to Ivan, which one of the following statements could be true?\nis_sat(ForAll([c:children], Implies(seats(c, 6), Not(seats(c, 5))))) ::: A) Harry sits west of Frank.\nis_sat(ForAll([c:children], Implies(seats(c, 6), Not(seats(c, 7))))) ::: B) Joel sits west of Ivan.\nis_sat(ForAll([c:children], Implies(seats(c, 6), Not(seats(c, 1))))) ::: C) Ruby sits west of Frank.\nis_sat(ForAll([c:children], Implies(seats(c, 6), Not(seats(c, 2))))) ::: D) Thelma sits west of Frank.\nis_sat(ForAll([c:children], Implies(seats(c, 6), Not(seats(c, 3))))) ::: E) Thelma sits west of Ruby.\n------\nProblem:\nA"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_3_17",
    "context": "Seven children are to be seated in seven chairs arranged in a row that runs from west to east. All seven children will face north. Four of the children are boys: Frank, Harry, Ivan, and Joel. Three are girls: Ruby, Sylvia, and Thelma. The children are assigned to chairs according to the following conditions: Exactly one child sits in each chair. No boy sits next to another boy. Ivan sits next to and east of the fourth child in the row. Sylvia sits east of Ivan. Frank sits next to Ruby.",
    "question": "If Frank sits east of Ruby, which one of the following pairs of children CANNOT sit next to each other?",
    "answer": "D",
    "options": [
      "A) Frank and Thelma",
      "B) Harry and Ruby",
      "C) Harry and Sylvia",
      "D) Ivan and Ruby",
      "E) Joel and Ruby"
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Frank, Harry, Ivan, Joel, Ruby, Sylvia, Thelma])\nchairs = EnumSort([1, 2, 3, 4, 5, 6, 7])\nseats = Function([children, chairs] -> [bool])\n\n# Constraints\nForAll([c:children], Count([ch:chairs], seats(c, ch)) == 1) ::: Exactly one child sits in each chair\nForAll([c:children], Not(Exists([c1:children], And(c1!= c, seats(c1, chairs), seats(c, chairs))))) ::: No boy sits next to another boy\nseats(Ivan, 4) ::: Ivan sits next to and east of the fourth child in the row\nseats(Sylvia, 5) ::: Sylvia sits east of Ivan\nseats(Frank, 6) ::: Frank sits next to Ruby\n\n# Options\nQuestion ::: If Frank sits east of Ruby, which one of the following pairs of children CANNOT sit next to each other?\nis_exception(is_sat(seats(Frank, 6) && seats(Thelma, 7))) ::: (A)\nis_exception(is_sat(seats(Harry, 6) && seats(Ruby, 7))) ::: (B)\nis_exception(is_sat(seats(Harry, 6) && seats(Sylvia, 7))) ::: (C)\nis_exception(is_sat(seats(Ivan, 6) && seats(Ruby, 7))) ::: (D)\nis_exception(is_sat(seats(Joel, 6) && seats(Ruby, 7))) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—are to be seated in a row of six chairs. The following conditions apply: A sits next to B. C sits next to D. E sits next to F. B s"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_4_18",
    "context": "The organisms W, X, Y, and Z respond to the antibiotics ferromycin, ganocyclene, and heptocillin in a manner consistent with the following: Each of the organisms responds to at least one of the antibiotics. No organism responds to all three antibiotics. At least two but not all four of the organisms respond to ferromycin. If W responds to any antibiotic, then X responds to that antibiotic. If an organism responds to ferromycin, then it responds to ganocyclene. Y responds to ferromycin.",
    "question": "Each of the following can be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) W responds to heptocillin.",
      "B) X responds to ganocyclene.",
      "C) X responds to heptocillin.",
      "D) Y responds to heptocillin.",
      "E) Z responds to ganocyclene."
    ],
    "raw_logic_programs": [
      "# Declarations\norganisms = EnumSort([W, X, Y, Z])\nantibiotics = EnumSort([ferromycin, ganocyclene, heptocillin])\nresponds = Function([organisms, antibiotics] -> [bool])\n\n# Constraints\nForAll([o:organisms], Count([a:antibiotics], responds(o, a)) >= 1) ::: Each of the organisms responds to at least one of the antibiotics\nCount([o:organisms], Count([a:antibiotics], responds(o, a)) == 3) == 0 ::: No organism responds to all three antibiotics\nCount([o:organisms], Count([a:antibiotics], responds(o, a)) == 1) >= 2 ::: At least two but not all four of the organisms respond to ferromycin\nImplies(responds(W, a), responds(X, a)) ::: If W responds to any antibiotic, then X responds to that antibiotic\nImplies(responds(o, ferromycin), responds(o, ganocyclene)) ::: If an organism responds to ferromycin, then it responds to ganocyclene\nresponds(Y, ferromycin) ::: Y responds to ferromycin\n\n# Options\nQuestion ::: Each of the following can be true EXCEPT:\nis_exception(is_sat(responds(W, heptocillin))) ::: (A)\nis_exception(is_sat(responds(X, ganocyclene))) ::: (B)\nis_exception(is_sat(responds(X, heptocillin))) ::: (C)\nis_exception(is_sat(responds(Y, heptocillin))) ::: (D)\nis_exception(is_sat(responds(Z, ganocyclene))) ::: (E)\n------\nProblem:\nThe following is a list of the six members of a committee: A, B, C, D"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_4_19",
    "context": "The organisms W, X, Y, and Z respond to the antibiotics ferromycin, ganocyclene, and heptocillin in a manner consistent with the following: Each of the organisms responds to at least one of the antibiotics. No organism responds to all three antibiotics. At least two but not all four of the organisms respond to ferromycin. If W responds to any antibiotic, then X responds to that antibiotic. If an organism responds to ferromycin, then it responds to ganocyclene. Y responds to ferromycin.",
    "question": "Which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) W, X, and Z all respond to ferromycin.",
      "B) W, X, and Z all respond to ganocyclene.",
      "C) W and exactly one other organism respond to ganocyclene.",
      "D) W responds to more of the antibiotics than X does.",
      "E) More of the organisms respond to ferromycin than to ganocyclene."
    ],
    "raw_logic_programs": [
      "# Declarations\norganisms = EnumSort([W, X, Y, Z])\nantibiotics = EnumSort([ferromycin, ganocyclene, heptocillin])\nresponds = Function([organisms, antibiotics] -> [bool])\n\n# Constraints\nForAll([o:organisms], Count([a:antibiotics], responds(o, a)) >= 1) ::: Each of the organisms responds to at least one of the antibiotics\nCount([o:organisms], Count([a:antibiotics], responds(o, a)) == 3) == 0 ::: No organism responds to all three antibiotics\nCount([o:organisms], Count([a:antibiotics], responds(o, a)) == 1) >= 2 ::: At least two but not all four of the organisms respond to ferromycin\nImplies(responds(W, a), responds(X, a)) ::: If W responds to any antibiotic, then X responds to that antibiotic\nImplies(responds(o, ferromycin), responds(o, ganocyclene)) ::: If an organism responds to ferromycin, then it responds to ganocyclene\nresponds(Y, ferromycin) ::: Y responds to ferromycin\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(ForAll([o:organisms], responds(o, ferromycin))) ::: (A)\nis_sat(ForAll([o:organisms], responds(o, ganocyclene))) ::: (B)\nis_sat(ForAll([o:organisms], Implies(responds(W, ganocyclene), responds(o, ganocyclene)))) ::: (C)\nis_sat(Count([a:antibiotics], responds(W, a)) > Count([a:antibiotics], responds(X, a))) ::: (D)\nis_sat(Count([o:organisms], responds(o, ferromycin)) > Count([o:organisms], responds(o, ganocyclene))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_4_20",
    "context": "The organisms W, X, Y, and Z respond to the antibiotics ferromycin, ganocyclene, and heptocillin in a manner consistent with the following: Each of the organisms responds to at least one of the antibiotics. No organism responds to all three antibiotics. At least two but not all four of the organisms respond to ferromycin. If W responds to any antibiotic, then X responds to that antibiotic. If an organism responds to ferromycin, then it responds to ganocyclene. Y responds to ferromycin.",
    "question": "Which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Exactly one of the organisms responds to ferromycin.",
      "B) All four of the organisms respond to heptocillin.",
      "C) At least one of the organisms responds both to ferromycin and to heptocillin.",
      "D) At least one of the organisms responds neither to ganocyclene nor to heptocillin.",
      "E) At least one of the organisms responds to ganocyclene but does not respond to ferromycin."
    ],
    "raw_logic_programs": [
      "# Declarations\norganisms = EnumSort([W, X, Y, Z])\nantibiotics = EnumSort([ferromycin, ganocyclene, heptocillin])\nresponds = Function([organisms, antibiotics] -> [bool])\n\n# Constraints\nForAll([o:organisms], Count([a:antibiotics], responds(o, a)) >= 1) ::: Each of the organisms responds to at least one of the antibiotics\nCount([o:organisms], Count([a:antibiotics], responds(o, a)) == 3) == 0 ::: No organism responds to all three antibiotics\nCount([o:organisms], Count([a:antibiotics], responds(o, a)) == 1) >= 2 ::: At least two but not all four of the organisms respond to ferromycin\nImplies(responds(W, a), responds(X, a)) ::: If W responds to any antibiotic, then X responds to that antibiotic\nImplies(responds(o, ferromycin), responds(o, ganocyclene)) ::: If an organism responds to ferromycin, then it responds to ganocyclene\nresponds(Y, ferromycin) ::: Y responds to ferromycin\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(Count([o:organisms], responds(o, ferromycin)) == 1) ::: (A)\nis_sat(Count([o:organisms], responds(o, heptocillin)) == 4) ::: (B)\nis_sat(Exists([o:organisms], responds(o, ferromycin) && responds(o, heptocillin))) ::: (C)\nis_sat(Exists([o:organisms], Not(responds(o, ganocyclene)) && Not(responds(o, heptocillin)))) ::: (D)\nis_sat(Exists([o:organisms], responds(o, ganocyclene) && Not(responds(o, ferromycin)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_4_21",
    "context": "The organisms W, X, Y, and Z respond to the antibiotics ferromycin, ganocyclene, and heptocillin in a manner consistent with the following: Each of the organisms responds to at least one of the antibiotics. No organism responds to all three antibiotics. At least two but not all four of the organisms respond to ferromycin. If W responds to any antibiotic, then X responds to that antibiotic. If an organism responds to ferromycin, then it responds to ganocyclene. Y responds to ferromycin.",
    "question": "If X does not respond to ferromycin, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) W responds to ganocyclene.",
      "B) X responds to ganocyclene.",
      "C) X responds to heptocillin.",
      "D) Z responds to ferromycin.",
      "E) Z responds to heptocillin."
    ],
    "raw_logic_programs": [
      "# Declarations\norganisms = EnumSort([W, X, Y, Z])\nantibiotics = EnumSort([ferromycin, ganocyclene, heptocillin])\nresponds = Function([organisms, antibiotics] -> [bool])\n\n# Constraints\nForAll([o:organisms], Count([a:antibiotics], responds(o, a)) >= 1) ::: Each of the organisms responds to at least one of the antibiotics\nForAll([o:organisms], Count([a:antibiotics], responds(o, a)) <= 2) ::: No organism responds to all three antibiotics\nCount([o:organisms], responds(o, ferromycin)) == 2 ::: At least two but not all four of the organisms respond to ferromycin\nImplies(responds(W, a), responds(X, a)) ::: If W responds to any antibiotic, then X responds to that antibiotic\nImplies(responds(o, ferromycin), responds(o, ganocyclene)) ::: If an organism responds to ferromycin, then it responds to ganocyclene\nresponds(Y, ferromycin) ::: Y responds to ferromycin\n\n# Options\nQuestion ::: If X does not respond to ferromycin, then which one of the following must be true?\nis_valid(Implies(Not(responds(X, ferromycin)), responds(W, ganocyclene))) ::: (A)\nis_valid(Implies(Not(responds(X, ferromycin)), responds(X, ganocyclene))) ::: (B)\nis_valid(Implies(Not(responds(X, ferromycin)), responds(X, heptocillin))) ::: (C)\nis_valid(Implies(Not(responds(X, ferromycin)), responds(Z, ferromycin))) ::: (D)\nis_valid(Implies(Not(responds(X, ferromycin)), responds(Z, heptocillin))) ::: (E)\n------\nProblem:\nThe following is a list of the six members"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_4_22",
    "context": "The organisms W, X, Y, and Z respond to the antibiotics ferromycin, ganocyclene, and heptocillin in a manner consistent with the following: Each of the organisms responds to at least one of the antibiotics. No organism responds to all three antibiotics. At least two but not all four of the organisms respond to ferromycin. If W responds to any antibiotic, then X responds to that antibiotic. If an organism responds to ferromycin, then it responds to ganocyclene. Y responds to ferromycin.",
    "question": "If any of the organisms responds to two of the antibiotics, then which one of the following is true about such an organism?",
    "answer": "B",
    "options": [
      "A) It must respond to ferromycin.",
      "B) It must respond to ganocyclene.",
      "C) It must respond to heptocillin.",
      "D) It cannot respond to ferromycin.",
      "E) It cannot respond to ganocyclene."
    ],
    "raw_logic_programs": [
      "# Declarations\norganisms = EnumSort([W, X, Y, Z])\nantibiotics = EnumSort([ferromycin, ganocyclene, heptocillin])\nresponds = Function([organisms, antibiotics] -> [bool])\n\n# Constraints\nForAll([o:organisms], Count([a:antibiotics], responds(o, a)) >= 1) ::: Each of the organisms responds to at least one of the antibiotics\nAnd(Count([o:organisms], Count([a:antibiotics], responds(o, a)) == 3) == 0, Count([o:organisms], Count([a:antibiotics], responds(o, a)) == 0) == 0) ::: No organism responds to all three antibiotics\nAnd(Count([o:organisms], Count([a:antibiotics], responds(o, a)) == 1) == 2, Count([o:organisms], Count([a:antibiotics], responds(o, a)) == 3) == 0) ::: At least two but not all four of the organisms respond to ferromycin\nImplies(responds(W, a), responds(X, a)) ::: If W responds to any antibiotic, then X responds to that antibiotic\nImplies(responds(o, ferromycin), responds(o, ganocyclene)) ::: If an organism responds to ferromycin, then it responds to ganocyclene\nresponds(Y, ferromycin) ::: Y responds to ferromycin\n\n# Options\nQuestion ::: If any of the organisms responds to two of the antibiotics, then which one of the following is true about such an organism?\nis_valid(ForAll([o:organisms], And(Count([a:antibiotics], responds(o, a)) == 2, responds(o, ferromycin)))) ::: A) It must respond to ferromycin.\nis_valid(ForAll([o:organisms], And(Count([a:antibiotics], responds(o, a)) == 2, responds(o, ganocyclene"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_4_23",
    "context": "The organisms W, X, Y, and Z respond to the antibiotics ferromycin, ganocyclene, and heptocillin in a manner consistent with the following: Each of the organisms responds to at least one of the antibiotics. No organism responds to all three antibiotics. At least two but not all four of the organisms respond to ferromycin. If W responds to any antibiotic, then X responds to that antibiotic. If an organism responds to ferromycin, then it responds to ganocyclene. Y responds to ferromycin.",
    "question": "If none of the organisms responds to heptocillin, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) W responds to ferromycin.",
      "B) X responds to ferromycin.",
      "C) Z responds to ferromycin.",
      "D) Exactly three of the organisms respond to ganocyclene.",
      "E) Exactly four of the organisms respond to ganocyclene."
    ],
    "raw_logic_programs": [
      "# Declarations\norganisms = EnumSort([W, X, Y, Z])\nantibiotics = EnumSort([ferromycin, ganocyclene, heptocillin])\nresponds = Function([organisms, antibiotics] -> [bool])\n\n# Constraints\nForAll([o:organisms], Count([a:antibiotics], responds(o, a)) >= 1) ::: Each of the organisms responds to at least one of the antibiotics\nForAll([o:organisms], Count([a:antibiotics], responds(o, a)) <= 2) ::: No organism responds to all three antibiotics\nCount([o:organisms], responds(o, ferromycin)) == 2 ::: At least two but not all four of the organisms respond to ferromycin\nImplies(responds(W, _), responds(X, _)) ::: If W responds to any antibiotic, then X responds to that antibiotic\nImplies(responds(_, ferromycin), responds(_, ganocyclene)) ::: If an organism responds to ferromycin, then it responds to ganocyclene\nresponds(Y, ferromycin) ::: Y responds to ferromycin\n\n# Options\nQuestion ::: If none of the organisms responds to heptocillin, then which one of the following must be true?\nis_valid(responds(W, ferromycin)) ::: (A)\nis_valid(responds(X, ferromycin)) ::: (B)\nis_valid(responds(Z, ferromycin)) ::: (C)\nis_valid(Count([o:organisms], responds(o, ganocyclene)) == 3) ::: (D)\nis_valid(Count([o:organisms], responds(o, ganocyclene)) == 4) ::: (E)\n------\nProblem:\nThe following is a list of the six members of the board of directors of a company:\nA, B, C, D, E, F\nThe board members are to be divided into two committees, committee 1 and committee 2. For each of the following pairs of board members"
    ]
  },
  {
    "id": "ar_lsat_199306_2-G_4_24",
    "context": "The organisms W, X, Y, and Z respond to the antibiotics ferromycin, ganocyclene, and heptocillin in a manner consistent with the following: Each of the organisms responds to at least one of the antibiotics. No organism responds to all three antibiotics. At least two but not all four of the organisms respond to ferromycin. If W responds to any antibiotic, then X responds to that antibiotic. If an organism responds to ferromycin, then it responds to ganocyclene. Y responds to ferromycin.",
    "question": "If three of the organisms respond to exactly the same set of antibiotics as each other, and if Z does not respond to ferromycin, then each of the following must be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) W responds to ferromycin.",
      "B) X responds to ganocyclene.",
      "C) Z responds to ganocyclene.",
      "D) W responds to exactly the same set of antibiotics as Y.",
      "E) X responds to exactly the same set of antibiotics as Y."
    ],
    "raw_logic_programs": [
      "# Declarations\norganisms = EnumSort([W, X, Y, Z])\nantibiotics = EnumSort([ferromycin, ganocyclene, heptocillin])\nresponds = Function([organisms, antibiotics] -> [bool])\n\n# Constraints\nForAll([o:organisms], Count([a:antibiotics], responds(o, a)) >= 1) ::: Each of the organisms responds to at least one of the antibiotics\nCount([o:organisms], Count([a:antibiotics], responds(o, a)) == 3) == 0 ::: No organism responds to all three antibiotics\nCount([o:organisms], Count([a:antibiotics], responds(o, a)) == 1) >= 2 ::: At least two but not all four of the organisms respond to ferromycin\nImplies(responds(W, a), responds(X, a)) ::: If W responds to any antibiotic, then X responds to that antibiotic\nImplies(responds(o, ferromycin), responds(o, ganocyclene)) ::: If an organism responds to ferromycin, then it responds to ganocyclene\nresponds(Y, ferromycin) ::: Y responds to ferromycin\n\n# Options\nQuestion ::: If three of the organisms respond to exactly the same set of antibiotics as each other, and if Z does not respond to ferromycin, then each of the following must be true EXCEPT:\nis_exception(is_sat(responds(W, ferromycin))) ::: (A)\nis_exception(is_sat(responds(X, ganocyclene))) ::: (B)\nis_exception(is_sat(responds(Z, ganocyclene))) ::: (C)\nis_exception(is_sat(responds(W, ferromycin) == responds(Y, ferromycin) == responds(W, ganocyclene) == responds(Y, ganocyclene) == responds(W, heptocillin) == responds(Y, heptocillin))) ::: (D"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_1_1",
    "context": "A florist is making three corsages from four types of flowers: gardenias, orchids, roses, and violets. Each of the corsages will contain exactly three flowers. The nine flowers used in the corsages must include at least one flower from each of the four types, and at least twice as many roses as orchids must be used. The corsages must also meet the following specifications: Corsage 1 must contain exactly two types of flowers. Corsage 2 must contain at least one rose. Corsage 3 must contain at least one gardenia but no orchids.",
    "question": "Which one of the following is an acceptable selection of flowers for the three corsages? Corsage 1 Corsage 2 Corsage 3",
    "answer": "C",
    "options": [
      "A) 2 gardenias 1 orchid 1 gardenia 1 rose 1 rose 1 orchid 1 violet 1 violet",
      "B) 2 orchids 2 orchids 2 gardenias 1 rose 1 rose 1 rose",
      "C) 2 orchids 3 roses 1 gardenia 1 rose 2 violets",
      "D) 1 gardenia 1 gardenia 1 gardenia 1 orchid 1 rose 1 rose 1 rose 1 violet 1 violet",
      "E) 1 orchid 3 violets 3 gardenias 2 roses"
    ],
    "raw_logic_programs": [
      "# Declarations\ncorsages = EnumSort([1, 2, 3])\nflowers = EnumSort([gardenias, orchids, roses, violets])\nflowers_in_corsage = Function([corsages] -> [flowers])\n\n# Constraints\nForAll([c:corsages], Count([f:flowers], flowers_in_corsage(c) == f) == 3) ::: Each of the corsages will contain exactly three flowers\nForAll([f:flowers], Count([c:corsages], flowers_in_corsage(c) == f) >= 1) ::: The nine flowers used in the corsages must include at least one flower from each of the four types\nCount([f:flowers], flowers_in_corsage(1) == f) == 2 ::: Corsage 1 must contain exactly two types of flowers\nExists([f:flowers], flowers_in_corsage(2) == f) ::: Corsage 2 must contain at least one rose\nExists([f:flowers], flowers_in_corsage(3) == f) ::: Corsage 3 must contain at least one gardenia\nNotExists([f:flowers], flowers_in_corsage(3) == f) ::: Corsage 3 must contain no orchids\nCount([f:flowers], flowers_in_corsage(c) == f) >= 2 * Count([f:flowers], flowers_in_corsage(c) == f) ::: at least twice as many roses as orchids must be used\n\n# Options\nQuestion ::: Which one of the following is an acceptable selection of flowers for the three corsages? Corsage 1 Corsage 2 Corsage 3\nis_sat(And(flowers_in_corsage(1) == [gardenias, orchids], flowers_in_corsage(2) == [orchid, orchid, gardenia], flowers_in_corsage(3) == [rose, rose, orchid, violet, violet]))) ::: A) 2 gardenias 1 orchid 1 gardenia 1 rose 1 rose 1 orchid 1 violet 1 violet\nis_sat(And(flowers"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_1_2",
    "context": "A florist is making three corsages from four types of flowers: gardenias, orchids, roses, and violets. Each of the corsages will contain exactly three flowers. The nine flowers used in the corsages must include at least one flower from each of the four types, and at least twice as many roses as orchids must be used. The corsages must also meet the following specifications: Corsage 1 must contain exactly two types of flowers. Corsage 2 must contain at least one rose. Corsage 3 must contain at least one gardenia but no orchids.",
    "question": "The maximum total number of roses that can be used in the three corsages is",
    "answer": "D",
    "options": [
      "A) three",
      "B) four",
      "C) five",
      "D) six",
      "E) seven"
    ],
    "raw_logic_programs": [
      "# Declarations\ncorsages = EnumSort([1, 2, 3])\nflowers = EnumSort([gardenia, orchid, rose, violet])\ncontains = Function([corsages, flowers] -> [bool])\n\n# Constraints\nForAll([c:corsages], Count([f:flowers], contains(c, f)) == 3) ::: Each of the corsages will contain exactly three flowers\nForAll([f:flowers], Count([c:corsages], contains(c, f)) >= 1) ::: The nine flowers used in the corsages must include at least one flower from each of the four types\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(2, f)) >= 1 ::: Corsage 2 must contain at least one rose\nCount([f:flowers], contains(3, f)) >= 1 ::: Corsage 3 must contain at least one gardenia\nCount([f:flowers], contains(3, f)) == 0 ::: Corsage 3 must contain at least one gardenia but no orchids\nCount([f:flowers], contains(c, f)) >= 2 * Count([f:flowers], contains(c, f)) ::: at least twice as many roses as orchids must be used\n\n# Options\nQuestion ::: The maximum total number of roses that can be used in the three corsages is\nis_sat(Count([f:flowers], contains(c, f)) == 3)) ::: A) three\nis_sat(Count([f:flowers], contains(c, f)) == 4)) ::: B) four\nis_sat(Count([f:flowers], contains(c, f)) == 5)) ::: C) five\nis_sat(Count([f:flowers], contains(c, f)) == 6)) ::: D) six\nis_sat(Count([f:flowers], contains(c, f)) == 7)) ::: E) seven\n------\nProblem:\nA company has four departments: A, B, C, and D. Each department has at least one employee. The following conditions apply: The number of employees in department A is"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_1_3",
    "context": "A florist is making three corsages from four types of flowers: gardenias, orchids, roses, and violets. Each of the corsages will contain exactly three flowers. The nine flowers used in the corsages must include at least one flower from each of the four types, and at least twice as many roses as orchids must be used. The corsages must also meet the following specifications: Corsage 1 must contain exactly two types of flowers. Corsage 2 must contain at least one rose. Corsage 3 must contain at least one gardenia but no orchids.",
    "question": "If corsage 1 contains two orchids and one rose, what is the maximum total number of violets that the florist can use in making the three corsages?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\ncorsages = EnumSort([1, 2, 3])\nflowers = EnumSort([gardenia, orchid, rose, violet])\ncontains = Function([corsages, flowers] -> [bool])\n\n# Constraints\nForAll([c:corsages], Count([f:flowers], contains(c, f)) == 3) ::: Each of the corsages will contain exactly three flowers\nForAll([f:flowers], Count([c:corsages], contains(c, f)) >= 1) ::: The nine flowers used in the corsages must include at least one flower from each of the four types\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(2, f)) >= 1 ::: Corsage 2 must contain at least one rose\nCount([f:flowers], contains(3, f)) >= 1 ::: Corsage 3 must contain at least one gardenia\nCount([f:flowers], contains(3, f)) == 0 ::: Corsage 3 must contain at least one gardenia but no orchids\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flow"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_1_4",
    "context": "A florist is making three corsages from four types of flowers: gardenias, orchids, roses, and violets. Each of the corsages will contain exactly three flowers. The nine flowers used in the corsages must include at least one flower from each of the four types, and at least twice as many roses as orchids must be used. The corsages must also meet the following specifications: Corsage 1 must contain exactly two types of flowers. Corsage 2 must contain at least one rose. Corsage 3 must contain at least one gardenia but no orchids.",
    "question": "If corsage 2 is exactly the same as corsage 3, the nine flowers used in the corsages can include exactly",
    "answer": "A",
    "options": [
      "A) two orchids",
      "B) three gardenias",
      "C) three roses",
      "D) five roses",
      "E) five violets"
    ],
    "raw_logic_programs": [
      "# Declarations\ncorsages = EnumSort([1, 2, 3])\nflowers = EnumSort([gardenias, orchids, roses, violets])\ncontains = Function([corsages, flowers] -> [bool])\n\n# Constraints\nForAll([c:corsages], Count([f:flowers], contains(c, f)) == 3) ::: Each of the corsages will contain exactly three flowers\nForAll([f:flowers], Count([c:corsages], contains(c, f)) >= 1) ::: The nine flowers used in the corsages must include at least one flower from each of the four types\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(2, f)) >= 1 ::: Corsage 2 must contain at least one rose\nCount([f:flowers], contains(3, f)) >= 1 ::: Corsage 3 must contain at least one gardenia\nCount([f:flowers], contains(3, f)) == 0 ::: Corsage 3 must contain no orchids\nCount([f:flowers], contains(c, f)) >= 2 ::: at least twice as many roses as orchids must be used\n\n# Options\nQuestion ::: If corsage 2 is exactly the same as corsage 3, the nine flowers used in the corsages can include exactly\nis_sat(Count([f:flowers], contains(2, f)) == 2) ::: A) two orchids\nis_sat(Count([f:flowers], contains(2, f)) == 3) ::: B) three gardenias\nis_sat(Count([f:flowers], contains(2, f)) == 3) ::: C) three roses\nis_sat(Count([f:flowers], contains(2, f)) == 5) ::: D) five roses\nis_sat(Count([f:flowers], contains(2, f)) == 5) ::: E) five violets\n------\nProblem:\nA company has four departments: A, B, C, and D. Each department has at least one employee. The following conditions apply: The number of employees in department A is"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_1_5",
    "context": "A florist is making three corsages from four types of flowers: gardenias, orchids, roses, and violets. Each of the corsages will contain exactly three flowers. The nine flowers used in the corsages must include at least one flower from each of the four types, and at least twice as many roses as orchids must be used. The corsages must also meet the following specifications: Corsage 1 must contain exactly two types of flowers. Corsage 2 must contain at least one rose. Corsage 3 must contain at least one gardenia but no orchids.",
    "question": "If two of the corsages contain at least one orchid each, then the flowers in corsage 2 must include at least",
    "answer": "C",
    "options": [
      "A) one gardenia and one orchid",
      "B) one gardenia and one rose",
      "C) one orchid and one rose",
      "D) one orchid and one violet",
      "E) one rose and one violet"
    ],
    "raw_logic_programs": [
      "# Declarations\ncorsages = EnumSort([1, 2, 3])\nflowers = EnumSort([gardenia, orchid, rose, violet])\ncontains = Function([corsages, flowers] -> [bool])\n\n# Constraints\nForAll([c:corsages], Count([f:flowers], contains(c, f)) == 3) ::: Each of the corsages will contain exactly three flowers\nForAll([f:flowers], Count([c:corsages], contains(c, f)) >= 1) ::: The nine flowers used in the corsages must include at least one flower from each of the four types\nCount([c:corsages], Count([f:flowers], contains(c, f)) == 3) >= 2 ::: at least twice as many roses as orchids must be used\nAnd(contains(1, gardenia), contains(1, orchid)) ::: Corsage 1 must contain exactly two types of flowers\ncontains(2, rose) ::: Corsage 2 must contain at least one rose\ncontains(3, gardenia) ::: Corsage 3 must contain at least one gardenia\nNot(contains(3, orchid)) ::: Corsage 3 must contain at least one gardenia but no orchids\n\n# Options\nQuestion ::: If two of the corsages contain at least one orchid each, then the flowers in corsage 2 must include at least\nis_sat(And(contains(2, gardenia), contains(2, orchid))) ::: A) one gardenia and one orchid\nis_sat(And(contains(2, gardenia), contains(2, rose))) ::: B) one gardenia and one rose\nis_sat(And(contains(2, orchid), contains(2, rose))) ::: C) one orchid and one rose\nis_sat(And(contains(2, orchid), contains(2, violet))) ::: D) one orchid and one violet\nis_sat(And(contains(2, rose), contains(2, violet))) ::: E) one rose and one violet\n------"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_1_6",
    "context": "A florist is making three corsages from four types of flowers: gardenias, orchids, roses, and violets. Each of the corsages will contain exactly three flowers. The nine flowers used in the corsages must include at least one flower from each of the four types, and at least twice as many roses as orchids must be used. The corsages must also meet the following specifications: Corsage 1 must contain exactly two types of flowers. Corsage 2 must contain at least one rose. Corsage 3 must contain at least one gardenia but no orchids.",
    "question": "If the greatest possible number of violets is used in the three corsages, the florist must use",
    "answer": "D",
    "options": [
      "A) exactly one rose and exactly one gardenia",
      "B) exactly one orchid and exactly four violets",
      "C) exactly two orchids",
      "D) exactly two roses",
      "E) exactly six violets"
    ],
    "raw_logic_programs": [
      "# Declarations\ncorsages = EnumSort([1, 2, 3])\nflowers = EnumSort([gardenias, orchids, roses, violets])\nused = Function([corsages, flowers] -> [int])\nForAll([c:corsages], And(1 <= used(c, gardenias), used(c, gardenias) <= 3))\nForAll([c:corsages], And(1 <= used(c, orchids), used(c, orchids) <= 3))\nForAll([c:corsages], And(1 <= used(c, roses), used(c, roses) <= 3))\nForAll([c:corsages], And(1 <= used(c, violets), used(c, violets) <= 3))\n\n# Constraints\nForAll([c:corsages], Count([f:flowers], used(c, f)) == 3) ::: Each of the corsages will contain exactly three flowers\nForAll([f:flowers], Count([c:corsages], used(c, f)) >= 1) ::: The nine flowers used in the corsages must include at least one flower from each of the four types\nCount([c:corsages], used(c, roses)) >= 2 * Count([c:corsages], used(c, orchids)) ::: at least twice as many roses as orchids must be used\nForAll([f:flowers], Implies(f == gardenias, Not(f == orchids))) ::: Corsage 1 must contain exactly two types of flowers\nForAll([f:flowers], Implies(f == roses, Not(f == orchids))) ::: Corsage 2 must contain at least one rose\nForAll([f:flowers], Implies(f == gardenias, Not(f == orchids))) ::: Corsage 3 must contain at least one gardenia but no orchids\n\n# Options\nQuestion ::: If the greatest possible number of violets is used in the three corsages, the florist must use\nis_exception(is_sat(used(1, ros"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_1_7",
    "context": "A florist is making three corsages from four types of flowers: gardenias, orchids, roses, and violets. Each of the corsages will contain exactly three flowers. The nine flowers used in the corsages must include at least one flower from each of the four types, and at least twice as many roses as orchids must be used. The corsages must also meet the following specifications: Corsage 1 must contain exactly two types of flowers. Corsage 2 must contain at least one rose. Corsage 3 must contain at least one gardenia but no orchids.",
    "question": "If corsage 1 contains at least one gardenia and at least one violet, and if corsage 3 contains three different types of flowers, which one of the following could be used to make corsage 2?",
    "answer": "A",
    "options": [
      "A) one rose, one orchid, and one gardenia",
      "B) one rose and two orchids",
      "C) one rose and two violets",
      "D) two roses and one gardenia",
      "E) two roses and one violet"
    ],
    "raw_logic_programs": [
      "# Declarations\ncorsages = EnumSort([1, 2, 3])\nflowers = EnumSort([gardenia, orchid, rose, violet])\ncontains = Function([corsages, flowers] -> [bool])\n\n# Constraints\nForAll([c:corsages], Count([f:flowers], contains(c, f)) == 3) ::: Each of the corsages will contain exactly three flowers\nForAll([f:flowers], Count([c:corsages], contains(c, f)) >= 1) ::: The nine flowers used in the corsages must include at least one flower from each of the four types\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(2, f)) >= 1 ::: Corsage 2 must contain at least one rose\nCount([f:flowers], contains(3, f)) >= 1 ::: Corsage 3 must contain at least one gardenia\nCount([f:flowers], contains(3, f)) == 0 ::: Corsage 3 must contain at least one gardenia but no orchids\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(2, f)) >= 1 ::: Corsage 2 must contain at least one rose\nCount([f:flowers], contains(3, f)) >= 1 ::: Corsage 3 must contain at least one gardenia\nCount([f:flowers], contains(3, f)) == 0 ::: Corsage 3 must contain at least one gardenia but no orchids\nCount([f:flowers], contains(1, f)) == 2 ::: Corsage 1 must contain exactly two types of flowers\nCount([f:flowers], contains(2, f)) >= 1 ::: Corsage 2 must contain at least one rose\nCount([f:flowers], contains(3, f)) >= 1 ::: Corsage 3 must"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_2_8",
    "context": "From a group of seven people—J, K, L, M, N, P, and Q—exactly four will be selected to attend a diplomat's retirement dinner. Selection must conform to the following conditions: Either J or K must be selected, but J and K cannot both be selected. Either N or P must be selected, but N and P cannot both be selected. N cannot be selected unless L is selected. Q cannot be selected unless K is selected.",
    "question": "Which one of the following could be the four people selected to attend the retirement dinner?",
    "answer": "D",
    "options": [
      "A) J, K, M, P",
      "B) J, L, N, Q",
      "C) J, M, N, Q",
      "D) K, M, P, Q",
      "E) L, M, N, P"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([J, K, L, M, N, P, Q])\nselected = Function([people] -> [bool])\nForAll([p:people], And(selected(p) == false, Not(selected(p))))\n\n# Constraints\nOr(selected(J), selected(K)) ::: Either J or K must be selected, but J and K cannot both be selected\nOr(selected(N), selected(P)) ::: Either N or P must be selected, but N and P cannot both be selected\nImplies(selected(N), selected(L)) ::: N cannot be selected unless L is selected\nImplies(selected(Q), selected(K)) ::: Q cannot be selected unless K is selected\n\n# Options\nQuestion ::: Which one of the following could be the four people selected to attend the retirement dinner?\nis_sat(And(selected(J), selected(K), selected(M), selected(P))) ::: (A)\nis_sat(And(selected(J), selected(L), selected(N), selected(Q))) ::: (B)\nis_sat(And(selected(J), selected(M), selected(N), selected(Q))) ::: (C)\nis_sat(And(selected(K), selected(M), selected(P), selected(Q))) ::: (D)\nis_sat(And(selected(L), selected(M), selected(N), selected(P))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, some of whom are managers and some of whom are not. The company has a total of 100 employees, some of whom are managers and some of whom are not. The company has a total of 100 employees, some of whom are managers and some of whom are not. The company has a total of 100 employees, some of whom are managers and some of whom are not. The company has a total of 100 employees, some of whom are managers and some of whom are not. The company has a total of 100 employees, some of whom are managers and some"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_2_9",
    "context": "From a group of seven people—J, K, L, M, N, P, and Q—exactly four will be selected to attend a diplomat's retirement dinner. Selection must conform to the following conditions: Either J or K must be selected, but J and K cannot both be selected. Either N or P must be selected, but N and P cannot both be selected. N cannot be selected unless L is selected. Q cannot be selected unless K is selected.",
    "question": "Among the people selected to attend the retirement dinner there must be",
    "answer": "B",
    "options": [
      "A) K or Q or both",
      "B) L or M or both",
      "C) N or M or both",
      "D) N or Q or both",
      "E) P or Q or both"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([J, K, L, M, N, P, Q])\nselected = Function([people] -> [bool])\nForAll([p:people], And(selected(p) == false, Not(selected(p))))\n\n# Constraints\nOr(selected(J), selected(K)) ::: Either J or K must be selected, but J and K cannot both be selected\nOr(selected(N), selected(P)) ::: Either N or P must be selected, but N and P cannot both be selected\nImplies(selected(N), selected(L)) ::: N cannot be selected unless L is selected\nImplies(selected(Q), selected(K)) ::: Q cannot be selected unless K is selected\n\n# Options\nQuestion ::: Among the people selected to attend the retirement dinner there must be\nis_sat(ForAll([p:people], Implies(selected(p), Or(p == K, p == Q)))) ::: (A)\nis_sat(ForAll([p:people], Implies(selected(p), Or(p == L, p == M)))) ::: (B)\nis_sat(ForAll([p:people], Implies(selected(p), Or(p == N, p == M)))) ::: (C)\nis_sat(ForAll([p:people], Implies(selected(p), Or(p == N, p == Q)))) ::: (D)\nis_sat(ForAll([p:people], Implies(selected(p), Or(p == P, p == Q)))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10 more than the number of employees in department B. The number of employees in department A is 10 more than the number of employees in department C.\nQuestion:\nIf the number of employees in department B is 20, then the number of"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_2_10",
    "context": "From a group of seven people—J, K, L, M, N, P, and Q—exactly four will be selected to attend a diplomat's retirement dinner. Selection must conform to the following conditions: Either J or K must be selected, but J and K cannot both be selected. Either N or P must be selected, but N and P cannot both be selected. N cannot be selected unless L is selected. Q cannot be selected unless K is selected.",
    "question": "Which one of the following is a pair of people who CANNOT both be selected to attend the retirement dinner?",
    "answer": "B",
    "options": [
      "A) J and N",
      "B) J and Q",
      "C) K and L",
      "D) K and N",
      "E) N and Q"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([J, K, L, M, N, P, Q])\nselected = Function([people] -> [bool])\nForAll([p:people], And(selected(p) == false, Not(selected(p))))\n\n# Constraints\nOr(selected(J), selected(K)) ::: Either J or K must be selected, but J and K cannot both be selected\nOr(selected(N), selected(P)) ::: Either N or P must be selected, but N and P cannot both be selected\nImplies(selected(N), selected(L)) ::: N cannot be selected unless L is selected\nImplies(selected(Q), selected(K)) ::: Q cannot be selected unless K is selected\n\n# Options\nQuestion ::: Which one of the following is a pair of people who CANNOT both be selected to attend the retirement dinner?\nis_exception(is_sat(And(selected(J), selected(N)))) ::: (A)\nis_exception(is_sat(And(selected(J), selected(Q)))) ::: (B)\nis_exception(is_sat(And(selected(K), selected(L)))) ::: (C)\nis_exception(is_sat(And(selected(K), selected(N)))) ::: (D)\nis_exception(is_sat(And(selected(N), selected(Q)))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10 more than the number of employees in department B. The number of employees in department A is 10 more than the number of employees in department C.\nQuestion:\nIf the number of employees in department B is 20, how many employees are there in department A?\nChoices:\n(A) 30\n(B) 40\n(C) 50\n(D) 60\n("
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_2_11",
    "context": "From a group of seven people—J, K, L, M, N, P, and Q—exactly four will be selected to attend a diplomat's retirement dinner. Selection must conform to the following conditions: Either J or K must be selected, but J and K cannot both be selected. Either N or P must be selected, but N and P cannot both be selected. N cannot be selected unless L is selected. Q cannot be selected unless K is selected.",
    "question": "If M is not selected to attend the retirement dinner, the four people selected to attend must include which one of the following pairs of people?",
    "answer": "B",
    "options": [
      "A) J and Q",
      "B) K and L",
      "C) K and P",
      "D) L and P",
      "E) N and Q"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([J, K, L, M, N, P, Q])\nselected = Function([people] -> [bool])\nForAll([p:people], And(selected(p) == true, selected(p) == false))\n\n# Constraints\nAnd(selected(J) == true, selected(K) == false) ::: Either J or K must be selected, but J and K cannot both be selected\nAnd(selected(N) == true, selected(P) == false) ::: Either N or P must be selected, but N and P cannot both be selected\nImplies(selected(N), selected(L)) ::: N cannot be selected unless L is selected\nImplies(selected(Q), selected(K)) ::: Q cannot be selected unless K is selected\n\n# Options\nQuestion ::: If M is not selected to attend the retirement dinner, the four people selected to attend must include which one of the following pairs of people?\nis_sat(And(selected(J), selected(Q))) ::: (A)\nis_sat(And(selected(K), selected(L))) ::: (B)\nis_sat(And(selected(K), selected(P))) ::: (C)\nis_sat(And(selected(L), selected(P))) ::: (D)\nis_sat(And(selected(N), selected(Q))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10 more than the number of employees in department B. The number of employees in department A is 10 more than the number of employees in department C.\nQuestion:\nIf the number of employees in department B is 20, the number of employees in department A is:\nChoices:\n(A) 30\n(B) 40\n(C) 50\n(D) 60\n(E)"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_2_12",
    "context": "From a group of seven people—J, K, L, M, N, P, and Q—exactly four will be selected to attend a diplomat's retirement dinner. Selection must conform to the following conditions: Either J or K must be selected, but J and K cannot both be selected. Either N or P must be selected, but N and P cannot both be selected. N cannot be selected unless L is selected. Q cannot be selected unless K is selected.",
    "question": "If P is not selected to attend the retirement dinner, then exactly how many different groups of four are there each of which would be an acceptable selection?",
    "answer": "C",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([J, K, L, M, N, P, Q])\nselected = Function([people] -> [bool])\nForAll([p:people], And(selected(p) == false, Not(selected(p))))\n\n# Constraints\nOr(selected(J), selected(K)) ::: Either J or K must be selected, but J and K cannot both be selected\nOr(selected(N), selected(P)) ::: Either N or P must be selected, but N and P cannot both be selected\nImplies(selected(N), selected(L)) ::: N cannot be selected unless L is selected\nImplies(selected(Q), selected(K)) ::: Q cannot be selected unless K is selected\n\n# Options\nQuestion ::: If P is not selected to attend the retirement dinner, then exactly how many different groups of four are there each of which would be an acceptable selection?\nis_sat(ForAll([p:people], And(selected(p) == false, Not(selected(p))))) ::: A) one\nis_sat(ForAll([p:people], And(selected(p) == false, Not(selected(p))))) ::: B) two\nis_sat(ForAll([p:people], And(selected(p) == false, Not(selected(p))))) ::: C) three\nis_sat(ForAll([p:people], And(selected(p) == false, Not(selected(p))))) ::: D) four\nis_sat(ForAll([p:people], And(selected(p) == false, Not(selected(p))))) ::: E) five\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_2_13",
    "context": "From a group of seven people—J, K, L, M, N, P, and Q—exactly four will be selected to attend a diplomat's retirement dinner. Selection must conform to the following conditions: Either J or K must be selected, but J and K cannot both be selected. Either N or P must be selected, but N and P cannot both be selected. N cannot be selected unless L is selected. Q cannot be selected unless K is selected.",
    "question": "There is only one acceptable group of four that can be selected to attend the retirement dinner if which one of the following pairs of people is selected?",
    "answer": "E",
    "options": [
      "A) J and L",
      "B) K and M",
      "C) L and N",
      "D) L and Q",
      "E) M and Q"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([J, K, L, M, N, P, Q])\nselected = Function([people] -> [bool])\nForAll([p:people], And(selected(p) == false, Not(selected(p))))\n\n# Constraints\nOr(selected(J), selected(K)) ::: Either J or K must be selected, but J and K cannot both be selected\nOr(selected(N), selected(P)) ::: Either N or P must be selected, but N and P cannot both be selected\nImplies(selected(N), selected(L)) ::: N cannot be selected unless L is selected\nImplies(selected(Q), selected(K)) ::: Q cannot be selected unless K is selected\n\n# Options\nQuestion ::: There is only one acceptable group of four that can be selected to attend the retirement dinner if which one of the following pairs of people is selected?\nis_sat(And(selected(J), selected(L))) ::: (A)\nis_sat(And(selected(K), selected(M))) ::: (B)\nis_sat(And(selected(L), selected(N))) ::: (C)\nis_sat(And(selected(L), selected(Q))) ::: (D)\nis_sat(And(selected(M), selected(Q))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10 more than the number of employees in department B. The number of employees in department A is 10 more than the number of employees in department C.\nQuestion:\nIf the number of employees in department B is 20, how many employees are there in department A?\nChoices:\n(A) 30\n(B) 40\n(C) 50\n(D) 60\n(E) 70\n###\n# Declarations"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_3_14",
    "context": "Three boys—Karl, Luis, and Miguel—and three girls—Rita, Sarah, and Tura—are giving a dance recital. Three dances—1, 2, and 3—are to be performed. Each dance involves three pairs of children, a boy and a girl partnering each other in each pair, according to the following conditions: Karl partners Sarah in either dance 1 or dance 2. Whoever partners Rita in dance 2 must partner Sarah in dance 3. No two children can partner each other in more than one dance.",
    "question": "If Sarah partners Luis in dance 3, which one of the following is a complete and accurate list of the girls any one of whom could partner Miguel in dance 1?",
    "answer": "D",
    "options": [
      "A) Rita",
      "B) Sarah",
      "C) Tura",
      "D) Rita, Sarah",
      "E) Rita, Tura"
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Karl, Luis, Miguel, Rita, Sarah, Tura])\ndances = EnumSort([1, 2, 3])\npairs = Function([children, dances] -> [children])\n\n# Constraints\nForAll([d:dances], Count([c:children], pairs(c, d)) == 3) ::: Three dances—1, 2, and 3—are to be performed. Each dance involves three pairs of children, a boy and a girl partnering each other in each pair\nAnd(pairs(Karl, 1), pairs(Karl, 2)) ::: Karl partners Sarah in either dance 1 or dance 2\nAnd(pairs(Rita, 2), pairs(Sarah, 3)) ::: Whoever partners Rita in dance 2 must partner Sarah in dance 3\nForAll([c:children], Count([d:dances], pairs(c, d)) == 1) ::: No two children can partner each other in more than one dance\npairs(Sarah, 3) == Luis ::: Sarah partners Luis in dance 3\n\n# Options\nQuestion ::: If Sarah partners Luis in dance 3, which one of the following is a complete and accurate list of the girls any one of whom could partner Miguel in dance 1?\nis_valid(Exists([g:children], pairs(Miguel, 1) == g)) ::: A) Rita\nis_valid(Exists([g:children], pairs(Miguel, 1) == g)) ::: B) Sarah\nis_valid(Exists([g:children], pairs(Miguel, 1) == g)) ::: C) Tura\nis_valid(Exists([g:children], pairs(Miguel, 1) == g)) ::: D) Rita, Sarah\nis_valid(Exists([g:children], pairs(Miguel, 1) == g)) ::: E) Rita, Tura\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_3_15",
    "context": "Three boys—Karl, Luis, and Miguel—and three girls—Rita, Sarah, and Tura—are giving a dance recital. Three dances—1, 2, and 3—are to be performed. Each dance involves three pairs of children, a boy and a girl partnering each other in each pair, according to the following conditions: Karl partners Sarah in either dance 1 or dance 2. Whoever partners Rita in dance 2 must partner Sarah in dance 3. No two children can partner each other in more than one dance.",
    "question": "If Miguel partners Rita in dance 2, which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Karl partners Tura in dance 1.",
      "B) Luis partners Sarah in dance 2.",
      "C) Luis partners Sarah in dance 3.",
      "D) Miguel partners Sarah in dance 1.",
      "E) Miguel partners Tura in dance 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Karl, Luis, Miguel, Rita, Sarah, Tura])\ndances = EnumSort([1, 2, 3])\npairs = Function([children, dances] -> [children])\n\n# Constraints\nForAll([d:dances], Count([c:children], pairs(c, d)) == 3) ::: Three dances—1, 2, and 3—are to be performed. Each dance involves three pairs of children, a boy and a girl partnering each other in each pair\nForAll([c:children], Count([d:dances], pairs(c, d)) == 1) ::: No two children can partner each other in more than one dance\npairs(Karl, 1) == Sarah ::: Karl partners Sarah in either dance 1 or dance 2\npairs(Rita, 2) == pairs(Sarah, 3) ::: Whoever partners Rita in dance 2 must partner Sarah in dance 3\npairs(Miguel, 2) == Rita ::: Miguel partners Rita in dance 2\n\n# Options\nQuestion ::: If Miguel partners Rita in dance 2, which one of the following could be true?\nis_sat(pairs(Karl, 1) == Tura) ::: (A)\nis_sat(pairs(Luis, 2) == Sarah) ::: (B)\nis_sat(pairs(Luis, 3) == Sarah) ::: (C)\nis_sat(pairs(Miguel, 1) == Sarah) ::: (D)\nis_sat(pairs(Miguel, 3) == Tura) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_3_16",
    "context": "Three boys—Karl, Luis, and Miguel—and three girls—Rita, Sarah, and Tura—are giving a dance recital. Three dances—1, 2, and 3—are to be performed. Each dance involves three pairs of children, a boy and a girl partnering each other in each pair, according to the following conditions: Karl partners Sarah in either dance 1 or dance 2. Whoever partners Rita in dance 2 must partner Sarah in dance 3. No two children can partner each other in more than one dance.",
    "question": "If Miguel partners Sarah in dance 1, which one of the following is a pair of children who must partner each other in dance 3?",
    "answer": "B",
    "options": [
      "A) Karl and Rita",
      "B) Karl and Tura",
      "C) Luis and Rita",
      "D) Luis and Tura",
      "E) Miguel and Tura"
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Karl, Luis, Miguel, Rita, Sarah, Tura])\ndances = EnumSort([1, 2, 3])\npairs = Function([children, dances] -> [children])\n\n# Constraints\nForAll([d:dances], Count([c:children], pairs(c, d)) == 3) ::: Three dances—1, 2, and 3—are to be performed. Each dance involves three pairs of children, a boy and a girl partnering each other in each pair\nForAll([c:children], Count([d:dances], pairs(c, d)) == 1) ::: No two children can partner each other in more than one dance\npairs(Karl, 1) == pairs(Karl, 2) == Sarah ::: Karl partners Sarah in either dance 1 or dance 2\npairs(Rita, 2) == pairs(Sarah, 3) ::: Whoever partners Rita in dance 2 must partner Sarah in dance 3\n\n# Options\nQuestion ::: If Miguel partners Sarah in dance 1, which one of the following is a pair of children who must partner each other in dance 3?\nis_valid(pairs(Karl, 3) == Rita) ::: A) Karl and Rita\nis_valid(pairs(Karl, 3) == Tura) ::: B) Karl and Tura\nis_valid(pairs(Luis, 3) == Rita) ::: C) Luis and Rita\nis_valid(pairs(Luis, 3) == Tura) ::: D) Luis and Tura\nis_valid(pairs(Miguel, 3) == Tura) ::: E"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_3_17",
    "context": "Three boys—Karl, Luis, and Miguel—and three girls—Rita, Sarah, and Tura—are giving a dance recital. Three dances—1, 2, and 3—are to be performed. Each dance involves three pairs of children, a boy and a girl partnering each other in each pair, according to the following conditions: Karl partners Sarah in either dance 1 or dance 2. Whoever partners Rita in dance 2 must partner Sarah in dance 3. No two children can partner each other in more than one dance.",
    "question": "If Luis partners Sarah in dance 2, which one of the following is a pair of children who must partner each other in dance 1?",
    "answer": "C",
    "options": [
      "A) Karl and Rita",
      "B) Karl and Tura",
      "C) Luis and Rita",
      "D) Luis and Tura",
      "E) Miguel and Rita"
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Karl, Luis, Miguel, Rita, Sarah, Tura])\ndances = EnumSort([1, 2, 3])\npairs = Function([children, dances] -> [children])\n\n# Constraints\nForAll([d:dances], Count([c:children], pairs(c, d)) == 3) ::: Three dances—1, 2, and 3—are to be performed. Each dance involves three pairs of children, a boy and a girl partnering each other in each pair\nForAll([c:children], Count([d:dances], pairs(c, d)) == 1) ::: No two children can partner each other in more than one dance\npairs(Karl, 1) == pairs(Karl, 2) == Sarah ::: Karl partners Sarah in either dance 1 or dance 2\npairs(Rita, 2) == pairs(Sarah, 3) ::: Whoever partners Rita in dance 2 must partner Sarah in dance 3\n\n# Options\nQuestion ::: If Luis partners Sarah in dance 2, which one of the following is a pair of children who must partner each other in dance 1?\nis_valid(pairs(Karl, 1) == pairs(Rita, 1)) ::: (A)\nis_valid(pairs(Karl, 1) == pairs(Tura, 1)) ::: (B)\nis_valid(pairs(Luis, 1) == pairs(Rita, 1)) ::: (C)\nis_valid(pairs(Luis, 1) == pairs(Tura, 1)) ::: (D)\nis_valid(pairs(Miguel, 1"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_3_18",
    "context": "Three boys—Karl, Luis, and Miguel—and three girls—Rita, Sarah, and Tura—are giving a dance recital. Three dances—1, 2, and 3—are to be performed. Each dance involves three pairs of children, a boy and a girl partnering each other in each pair, according to the following conditions: Karl partners Sarah in either dance 1 or dance 2. Whoever partners Rita in dance 2 must partner Sarah in dance 3. No two children can partner each other in more than one dance.",
    "question": "If Miguel partners Rita in dance 1, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Karl partners Rita in dance 2.",
      "B) Karl partners Sarah in dance 3.",
      "C) Karl partners Tura in dance 1.",
      "D) Luis partners Rita in dance 2.",
      "E) Luis partners Tura in dance 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Karl, Luis, Miguel, Rita, Sarah, Tura])\ndances = EnumSort([1, 2, 3])\npartners = Function([children, dances] -> [children])\n\n# Constraints\nForAll([c:children], Count([d:dances], partners(c, d)) == 1) ::: No two children can partner each other in more than one dance\nAnd(partners(Karl, 1), partners(Karl, 2)) ::: Karl partners Sarah in either dance 1 or dance 2\nAnd(partners(Rita, 2), partners(Sarah, 3)) ::: Whoever partners Rita in dance 2 must partner Sarah in dance 3\n\n# Options\nQuestion ::: If Miguel partners Rita in dance 1, which one of the following must be true?\nis_sat(And(partners(Karl, 2), partners(Rita, 2))) ::: (A)\nis_sat(And(partners(Karl, 3), partners(Sarah, 3))) ::: (B)\nis_sat(And(partners(Karl, 1), partners(Tura, 1))) ::: (C)\nis_sat(And(partners(Luis, 2), partners(Rita, 2))) ::: (D)\nis_sat(And(partners(Luis, 3), partners(Tura, 3))) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—are to be divided into two groups of three each. Each group of three will be assigned to one of two tasks—1"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_4_19",
    "context": "Six cities are located within the numbered areas as follows: Within the six-city area there are exactly four hospitals, two jails, and two universities. These eight institutions are located as follows: No institution is in more than one of the cities. None of the cities contains more than one jail, and none contains more than one university. None of the cities contains both a jail and a university. Each jail is located in a city that contains at least one hospital. The universities are located in two cities that do not share a common boundary. City 3 contains a university, and city 6 contains a jail.",
    "question": "Which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) City 5 contains a university.",
      "B) City 6 contains a university.",
      "C) City 2 contains a jail.",
      "D) City 3 contains a jail.",
      "E) City 3 contains a hospital."
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([1, 2, 3, 4, 5, 6])\ninstitutions = EnumSort([hospitals, jails, universities])\nlocations = Function([cities, institutions] -> [bool])\n\n# Constraints\nForAll([c:cities], Count([i:institutions], locations(c, i)) <= 1) ::: No institution is in more than one of the cities\nForAll([c:cities], Count([i:institutions], locations(c, i)) >= 1) ::: None of the cities contains more than one jail, and none contains more than one university\nForAll([c:cities], Count([i:institutions], locations(c, i)) >= 1) ::: None of the cities contains both a jail and a university\nForAll([c:cities], Count([i:institutions], locations(c, i)) >= 1) ::: Each jail is located in a city that contains at least one hospital\nForAll([c:cities], Count([i:institutions], locations(c, i)) >= 1) ::: The universities are located in two cities that do not share a common boundary\nlocations(3, universities) ::: City 3 contains a university, and city 6 contains a jail\nlocations(6, jails) ::: City 3 contains a university, and city 6 contains a jail\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(locations(5, universities)) ::: A) City 5 contains a university.\nis_valid(locations(6, universities)) ::: B) City 6 contains a university.\nis"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_4_20",
    "context": "Six cities are located within the numbered areas as follows: Within the six-city area there are exactly four hospitals, two jails, and two universities. These eight institutions are located as follows: No institution is in more than one of the cities. None of the cities contains more than one jail, and none contains more than one university. None of the cities contains both a jail and a university. Each jail is located in a city that contains at least one hospital. The universities are located in two cities that do not share a common boundary. City 3 contains a university, and city 6 contains a jail.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) City 1 contains exactly one hospital.",
      "B) City 1 contains exactly one university.",
      "C) City 2 contains exactly one jail.",
      "D) City 5 contains exactly one university.",
      "E) City 6 contains exactly one university."
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([1, 2, 3, 4, 5, 6])\ninstitutions = EnumSort([hospitals, jails, universities])\nlocations = Function([cities, institutions] -> [bool])\n\n# Constraints\nForAll([c:cities], Count([i:institutions], locations(c, i)) <= 1) ::: No institution is in more than one of the cities\nForAll([c:cities], Count([i:institutions], locations(c, i)) >= 1) ::: None of the cities contains more than one jail, and none contains more than one university\nForAll([c:cities], Count([i:institutions], locations(c, i)) >= 1) ::: None of the cities contains both a jail and a university\nForAll([c:cities], Count([i:institutions], locations(c, i)) >= 1) ::: Each jail is located in a city that contains at least one hospital\nForAll([c:cities], Count([i:institutions], locations(c, i)) >= 1) ::: The universities are located in two cities that do not share a common boundary\nlocations(3, universities) ::: City 3 contains a university\nlocations(6, jails) ::: city 6 contains a jail\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(ForAll([c:cities], Count([i:institutions], locations(c, i)) == 1)) ::: A) City 1 contains exactly one hospital.\nis_sat(ForAll([c:cities], Count([i:institutions], locations"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_4_21",
    "context": "Six cities are located within the numbered areas as follows: Within the six-city area there are exactly four hospitals, two jails, and two universities. These eight institutions are located as follows: No institution is in more than one of the cities. None of the cities contains more than one jail, and none contains more than one university. None of the cities contains both a jail and a university. Each jail is located in a city that contains at least one hospital. The universities are located in two cities that do not share a common boundary. City 3 contains a university, and city 6 contains a jail.",
    "question": "Which one of the following is a complete and accurate list of the cities any one of which could contain the jail that is not in city 6?",
    "answer": "D",
    "options": [
      "A) 1, 4",
      "B) 2, 4",
      "C) 4, 5",
      "D) 1, 4, 5",
      "E) 1, 2, 4, 5"
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([1, 2, 3, 4, 5, 6])\ninstitutions = EnumSort([hospitals, jails, universities])\nlocations = Function([cities, institutions] -> [bool])\n\n# Constraints\nForAll([c:cities], Count([i:institutions], locations(c, i)) >= 1) ::: No institution is in more than one of the cities\nForAll([c:cities], Count([i:institutions], locations(c, i)) <= 1) ::: None of the cities contains more than one jail, and none contains more than one university\nForAll([c:cities], Count([i:institutions], locations(c, i)) <= 1) ::: None of the cities contains both a jail and a university\nForAll([j:jails], Count([h:hospitals], locations(j, h)) >= 1) ::: Each jail is located in a city that contains at least one hospital\nForAll([u:universities], Count([c:cities], locations(c, u)) == 2) ::: The universities are located in two cities that do not share a common boundary\nForAll([u:universities], Count([c:cities], locations(c, u)) == 1) ::: The universities are located in two cities that do not share a common boundary\nlocations(3, universities) ::: City 3 contains a university\nlocations(6, jails) ::: city 6 contains a jail\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the cities any one of which could contain the jail that is not in city 6?\nis"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_4_22",
    "context": "Six cities are located within the numbered areas as follows: Within the six-city area there are exactly four hospitals, two jails, and two universities. These eight institutions are located as follows: No institution is in more than one of the cities. None of the cities contains more than one jail, and none contains more than one university. None of the cities contains both a jail and a university. Each jail is located in a city that contains at least one hospital. The universities are located in two cities that do not share a common boundary. City 3 contains a university, and city 6 contains a jail.",
    "question": "If each of the six cities contains at least one of the eight institutions, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) There is a jail in city 1.",
      "B) There is a hospital in city 2.",
      "C) There is a hospital in city 3.",
      "D) There is a hospital in city 4.",
      "E) There is a jail in city 4."
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([1, 2, 3, 4, 5, 6])\ninstitutions = EnumSort([hospitals, jails, universities])\nin = Function([cities, institutions] -> [bool])\n\n# Constraints\nForAll([c:cities], Count([i:institutions], in(c, i)) >= 1) ::: each of the six cities contains at least one of the eight institutions\nForAll([c:cities], Count([i:institutions], in(c, i)) <= 1) ::: no institution is in more than one of the cities\nForAll([c:cities], Count([i:institutions], in(c, i)) == 1) ::: none of the cities contains more than one jail, and none contains more than one university\nForAll([c:cities], Count([i:institutions], in(c, i)) == 1) ::: none of the cities contains both a jail and a university\nForAll([c:cities], Count([i:institutions], in(c, i)) == 1) ::: each jail is located in a city that contains at least one hospital\nForAll([c:cities], Count([i:institutions], in(c, i)) == 1) ::: the universities are located in two cities that do not share a common boundary\nin(3, universities) ::: City 3 contains a university\nin(6, jails) ::: city 6 contains a jail\n\n# Options\nQuestion ::: If each of the six cities contains at least one of the eight institutions, then which one of the following must be true?\nis_valid(Exists([c:cities],"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_4_23",
    "context": "Six cities are located within the numbered areas as follows: Within the six-city area there are exactly four hospitals, two jails, and two universities. These eight institutions are located as follows: No institution is in more than one of the cities. None of the cities contains more than one jail, and none contains more than one university. None of the cities contains both a jail and a university. Each jail is located in a city that contains at least one hospital. The universities are located in two cities that do not share a common boundary. City 3 contains a university, and city 6 contains a jail.",
    "question": "In which one of the following cities must there be fewer than three hospitals?",
    "answer": "B",
    "options": [
      "A) 1",
      "B) 2",
      "C) 4",
      "D) 5",
      "E) 6"
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([1, 2, 3, 4, 5, 6])\ninstitutions = EnumSort([hospitals, jails, universities])\nhas = Function([cities, institutions] -> [bool])\n\n# Constraints\nForAll([c:cities], Count([i:institutions], has(c, i)) >= 1) ::: No institution is in more than one of the cities\nForAll([c:cities], Count([i:institutions], has(c, i)) <= 1) ::: No institution is in more than one of the cities\nForAll([c:cities], Count([i:institutions], has(c, i)) <= 1) ::: No institution is in more than one of the cities\nForAll([c:cities], Count([i:institutions], has(c, i)) <= 1) ::: No institution is in more than one of the cities\nForAll([c:cities], Count([i:institutions], has(c, i)) <= 1) ::: No institution is in more than one of the cities\nForAll([c:cities], Count([i:institutions], has(c, i)) <= 1) ::: No institution is in more than one of the cities\nForAll([c:cities], Count([i:institutions], has(c, i)) <= 1) ::: No institution is in more than one of the cities\nForAll([c:cities], Count([i:institutions], has(c, i)) <= 1) ::: No institution is in more than one of the cities\nForAll([c:cities], Count([i:institutions], has(c, i"
    ]
  },
  {
    "id": "ar_lsat_199310_3-G_4_24",
    "context": "Six cities are located within the numbered areas as follows: Within the six-city area there are exactly four hospitals, two jails, and two universities. These eight institutions are located as follows: No institution is in more than one of the cities. None of the cities contains more than one jail, and none contains more than one university. None of the cities contains both a jail and a university. Each jail is located in a city that contains at least one hospital. The universities are located in two cities that do not share a common boundary. City 3 contains a university, and city 6 contains a jail.",
    "question": "If one of the cities contains exactly two hospitals and exactly one university, then which one of the following lists three cities that might, among them, contain no hospital?",
    "answer": "A",
    "options": [
      "A) 1, 3, 5",
      "B) 1, 4, 5",
      "C) 2, 3, 5",
      "D) 2, 4, 6",
      "E) 4, 5, 6"
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([1, 2, 3, 4, 5, 6])\ninstitutions = EnumSort([hospitals, jails, universities])\nlocations = Function([cities, institutions] -> [bool])\n\n# Constraints\nForAll([c:cities], Count([i:institutions], locations(c, i)) >= 1) ::: No institution is in more than one of the cities\nAnd(locations(1, hospitals), locations(2, hospitals), locations(3, hospitals), locations(4, hospitals), locations(5, hospitals), locations(6, hospitals)) ::: None of the cities contains more than one jail, and none contains more than one university\nAnd(locations(1, jails), locations(2, jails), locations(3, jails), locations(4, jails), locations(5, jails), locations(6, jails)) ::: None of the cities contains both a jail and a university\nForAll([c:cities], Implies(locations(c, jails), Not(locations(c, universities)))) ::: None of the cities contains both a jail and a university\nForAll([c:cities], Implies(locations(c, universities), Not(locations(c, jails)))) ::: None of the cities contains both a jail and a university\nAnd(locations(3, universities), locations(6, jails)) ::: City 3 contains a university, and city 6 contains a jail\n\n# Options\nQuestion ::: If one of the cities contains exactly two hospitals and exactly one university, then which one of the following lists three cities that might, among them,"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_1_1",
    "context": "On the basis of an examination, nine students—Fred, Glen, Hilary, Ida, Jan, Kathy, Laura, Mike, and Nick—are each placed in one of three classes. The three highest scorers are placed in the level 1 class; the three lowest scorers are placed in the level 3 class. The remaining three are placed in the level 2 class. Each class has exactly three students. Ida scores higher than Glen. Glen scores higher than both Jan and Kathy. Jan scores higher than Mike. Mike scores higher than Hilary. Hilary scores higher than Nick. Kathy scores higher than both Fred and Laura.",
    "question": "How many different combinations of students could form the level 1 class?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) six"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Fred, Glen, Hilary, Ida, Jan, Kathy, Laura, Mike, Nick])\nclasses = EnumSort([level1, level2, level3])\nscores = Function([students] -> [int])\nForAll([s:students], And(1 <= scores(s), scores(s) <= 9))\n\n# Constraints\nForAll([s:students], Count([c:classes], scores(s) == c) == 1) ::: Each student is placed in exactly one class\nAnd(scores(Ida) > scores(Glen), scores(Glen) > scores(Jan), scores(Glen) > scores(Kathy)) ::: Ida scores higher than Glen. Glen scores higher than both Jan and Kathy.\nscores(Jan) > scores(Mike) ::: Jan scores higher than Mike.\nscores(Mike) > scores(Hilary) ::: Mike scores higher than Hilary.\nscores(Hilary) > scores(Nick) ::: Hilary scores higher than Nick.\nAnd(scores(Kathy) > scores(Fred), scores(Kathy) > scores(Laura)) ::: Kathy scores higher than both Fred and Laura.\n\n# Options\nQuestion ::: How many different combinations of students could form the level 1 class?\nis_sat(Count([s:students], scores(s) == level1) == 1) ::: A) one\nis_sat(Count([s:students], scores(s) == level1) == 2) ::: B) two\nis_sat(Count([s:students], scores(s) == level1) == 3) ::: C) three\nis_sat(Count([s:students], scores(s) == level1) == 4) ::: D) four\nis_sat(Count([s:students], scores(s) == level1) == 6) ::: E) six\n------"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_1_2",
    "context": "On the basis of an examination, nine students—Fred, Glen, Hilary, Ida, Jan, Kathy, Laura, Mike, and Nick—are each placed in one of three classes. The three highest scorers are placed in the level 1 class; the three lowest scorers are placed in the level 3 class. The remaining three are placed in the level 2 class. Each class has exactly three students. Ida scores higher than Glen. Glen scores higher than both Jan and Kathy. Jan scores higher than Mike. Mike scores higher than Hilary. Hilary scores higher than Nick. Kathy scores higher than both Fred and Laura.",
    "question": "Which one of the following students could be in the level 2 class but cannot be in the level 3 class?",
    "answer": "C",
    "options": [
      "A) Fred",
      "B) Glen",
      "C) Jan",
      "D) Kathy",
      "E) Nick"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Fred, Glen, Hilary, Ida, Jan, Kathy, Laura, Mike, Nick])\nclasses = EnumSort([level1, level2, level3])\nscores = Function([students] -> [int])\nForAll([s:students], And(1 <= scores(s), scores(s) <= 9))\n\n# Constraints\nForAll([c:classes], Count([s:students], scores(s) == c) == 3) ::: Each class has exactly three students\nAnd(scores(Ida) > scores(Glen), scores(Glen) > scores(Jan), scores(Glen) > scores(Kathy)) ::: Ida scores higher than Glen. Glen scores higher than both Jan and Kathy.\nscores(Jan) > scores(Mike) ::: Jan scores higher than Mike.\nscores(Mike) > scores(Hilary) ::: Mike scores higher than Hilary.\nscores(Hilary) > scores(Nick) ::: Hilary scores higher than Nick.\nAnd(scores(Kathy) > scores(Fred), scores(Kathy) > scores(Laura)) ::: Kathy scores higher than both Fred and Laura.\n\n# Options\nQuestion ::: Which one of the following students could be in the level 2 class but cannot be in the level 3 class?\nis_sat(And(scores(Fred) == level2, scores(Fred)!= level3)) ::: (A)\nis_sat(And(scores(Glen) == level2, scores(Glen)!= level3)) ::: (B)\nis_sat(And(scores(Jan) == level2, scores(Jan)!= level3)) ::: (C)\nis_sat(And(scores(Kathy) == level2, scores(Kathy)!= level3)) ::: (D)\nis_sat(And(scores(Nick) == level"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_1_3",
    "context": "On the basis of an examination, nine students—Fred, Glen, Hilary, Ida, Jan, Kathy, Laura, Mike, and Nick—are each placed in one of three classes. The three highest scorers are placed in the level 1 class; the three lowest scorers are placed in the level 3 class. The remaining three are placed in the level 2 class. Each class has exactly three students. Ida scores higher than Glen. Glen scores higher than both Jan and Kathy. Jan scores higher than Mike. Mike scores higher than Hilary. Hilary scores higher than Nick. Kathy scores higher than both Fred and Laura.",
    "question": "Which one of the following students could be placed in any one of the three classes?",
    "answer": "C",
    "options": [
      "A) Fred",
      "B) Jan",
      "C) Kathy",
      "D) Laura",
      "E) Mike"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Fred, Glen, Hilary, Ida, Jan, Kathy, Laura, Mike, Nick])\nclasses = EnumSort([level1, level2, level3])\nscores = Function([students] -> [int])\nForAll([s:students], And(1 <= scores(s), scores(s) <= 9))\n\n# Constraints\nForAll([s:students], Count([c:classes], scores(s) == c) == 1) ::: Each class has exactly three students\nAnd(scores(Ida) > scores(Glen), scores(Glen) > scores(Jan), scores(Glen) > scores(Kathy)) ::: Ida scores higher than Glen. Glen scores higher than both Jan and Kathy.\nscores(Jan) > scores(Mike) ::: Jan scores higher than Mike.\nscores(Mike) > scores(Hilary) ::: Mike scores higher than Hilary.\nscores(Hilary) > scores(Nick) ::: Hilary scores higher than Nick.\nAnd(scores(Kathy) > scores(Fred), scores(Kathy) > scores(Laura)) ::: Kathy scores higher than both Fred and Laura.\n\n# Options\nQuestion ::: Which one of the following students could be placed in any one of the three classes?\nis_valid(Exists([c:classes], scores(Fred) == c)) ::: (A)\nis_valid(Exists([c:classes], scores(Jan) == c)) ::: (B)\nis_valid(Exists([c:classes], scores(Kathy) == c)) ::: (C)\nis_valid(Exists([c:classes], scores(Laura) == c)) ::: (D)\nis_valid(Exists([c:classes], scores(Mike) == c)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_1_4",
    "context": "On the basis of an examination, nine students—Fred, Glen, Hilary, Ida, Jan, Kathy, Laura, Mike, and Nick—are each placed in one of three classes. The three highest scorers are placed in the level 1 class; the three lowest scorers are placed in the level 3 class. The remaining three are placed in the level 2 class. Each class has exactly three students. Ida scores higher than Glen. Glen scores higher than both Jan and Kathy. Jan scores higher than Mike. Mike scores higher than Hilary. Hilary scores higher than Nick. Kathy scores higher than both Fred and Laura.",
    "question": "The composition of each class can be completely determined if which one of the following pairs of students is known to be in the level 2 class?",
    "answer": "C",
    "options": [
      "A) Fred and Kathy",
      "B) Fred and Mike",
      "C) Hilary and Jan",
      "D) Kathy and Laura",
      "E) Laura and Mike"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Fred, Glen, Hilary, Ida, Jan, Kathy, Laura, Mike, Nick])\nclasses = EnumSort([level1, level2, level3])\nscores = Function([students] -> [int])\nForAll([s:students], And(1 <= scores(s), scores(s) <= 9))\n\n# Constraints\nForAll([s:students], Or(scores(s) == 1, scores(s) == 2, scores(s) == 3)) ::: The three highest scorers are placed in the level 1 class; the three lowest scorers are placed in the level 3 class. The remaining three are placed in the level 2 class.\nAnd(scores(Ida) > scores(Glen), scores(Glen) > scores(Jan), scores(Glen) > scores(Kathy)) ::: Ida scores higher than Glen. Glen scores higher than both Jan and Kathy.\nscores(Jan) > scores(Mike) ::: Jan scores higher than Mike.\nscores(Mike) > scores(Hilary) ::: Mike scores higher than Hilary.\nscores(Hilary) > scores(Nick) ::: Hilary scores higher than Nick.\nAnd(scores(Kathy) > scores(Fred), scores(Kathy) > scores(Laura)) ::: Kathy scores higher than both Fred and Laura.\n\n# Options\nQuestion ::: The composition of each class can be completely determined if which one of the following pairs of students is known to be in the level 2 class?\nis_exception(is_sat(scores(Fred) == 2, scores(Kathy) == 2)) ::: (A)\nis_exception(is_sat(scores(Fred) == 2, scores(Mike) == 2)) ::: (B)\nis_exception(is_sat(scores(Hilary) == 2, scores(Jan"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_1_5",
    "context": "On the basis of an examination, nine students—Fred, Glen, Hilary, Ida, Jan, Kathy, Laura, Mike, and Nick—are each placed in one of three classes. The three highest scorers are placed in the level 1 class; the three lowest scorers are placed in the level 3 class. The remaining three are placed in the level 2 class. Each class has exactly three students. Ida scores higher than Glen. Glen scores higher than both Jan and Kathy. Jan scores higher than Mike. Mike scores higher than Hilary. Hilary scores higher than Nick. Kathy scores higher than both Fred and Laura.",
    "question": "Which one of the following pairs of students cannot be in the same class as Fred?",
    "answer": "E",
    "options": [
      "A) Hilary and Nick",
      "B) Jan and Laura",
      "C) Kathy and Laura",
      "D) Jan and Mike",
      "E) Laura and Mike"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Fred, Glen, Hilary, Ida, Jan, Kathy, Laura, Mike, Nick])\nclasses = EnumSort([level1, level2, level3])\nscores = Function([students] -> [int])\nForAll([s:students], And(1 <= scores(s), scores(s) <= 9))\n\n# Constraints\nForAll([c:classes], Count([s:students], scores(s) == c) == 3) ::: Each class has exactly three students\nAnd(scores(Ida) > scores(Glen), scores(Glen) > scores(Jan), scores(Glen) > scores(Kathy)) ::: Ida scores higher than Glen. Glen scores higher than both Jan and Kathy.\nscores(Jan) > scores(Mike) ::: Jan scores higher than Mike.\nscores(Mike) > scores(Hilary) ::: Mike scores higher than Hilary.\nscores(Hilary) > scores(Nick) ::: Hilary scores higher than Nick.\nAnd(scores(Kathy) > scores(Fred), scores(Kathy) > scores(Laura)) ::: Kathy scores higher than both Fred and Laura.\n\n# Options\nQuestion ::: Which one of the following pairs of students cannot be in the same class as Fred?\nis_exception(is_sat(scores(Hilary) == scores(Nick))) ::: (A)\nis_exception(is_sat(scores(Jan) == scores(Laura))) ::: (B)\nis_exception(is_sat(scores(Kathy) == scores(Laura))) ::: (C)\nis_exception(is_sat(scores(Jan) == scores(Mike))) ::: (D)\nis_exception(is_sat(scores(Laura) == scores(Mike))) ::: (E)\n------\nProblem:\nA company has three departments: A, B"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_2_6",
    "context": "Six reviewers—Frank, George, Hilda, Jackie, Karl, and Lena—will review four movies—Mystery, Retreat, Seasonings, and Wolves—according to the following conditions: Each reviewer reviews exactly one movie, and each movie is reviewed by at least one of the six reviewers. Hilda reviews the same movie as Frank. Lena reviews the same movie as exactly one other reviewer. George reviews Mystery. Jackie reviews either Mystery or else Wolves. Hilda does not review Wolves.",
    "question": "If Lena reviews Seasonings, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Hilda reviews Retreat.",
      "B) Jackie reviews Seasonings.",
      "C) Karl reviews Mystery.",
      "D) Karl reviews Retreat.",
      "E) Karl reviews Wolves."
    ],
    "raw_logic_programs": [
      "# Declarations\nreviewers = EnumSort([Frank, George, Hilda, Jackie, Karl, Lena])\nmovies = EnumSort([Mystery, Retreat, Seasonings, Wolves])\nreviews = Function([reviewers, movies] -> [bool])\n\n# Constraints\nForAll([r:reviewers], Count([m:movies], reviews(r, m)) == 1) ::: Each reviewer reviews exactly one movie\nForAll([m:movies], Count([r:reviewers], reviews(r, m)) >= 1) ::: each movie is reviewed by at least one of the six reviewers\nreviews(Hilda, m) == reviews(Frank, m) ::: Hilda reviews the same movie as Frank\nreviews(Lena, m) == reviews(r, m) ::: Lena reviews the same movie as exactly one other reviewer\nreviews(George, Mystery) ::: George reviews Mystery\nOr(reviews(Jackie, Mystery), reviews(Jackie, Wolves)) ::: Jackie reviews either Mystery or else Wolves\nNot(reviews(Hilda, Wolves)) ::: Hilda does not review Wolves\n\n# Options\nQuestion ::: If Lena reviews Seasonings, which one of the following must be true?\nis_sat(reviews(Hilda, Retreat)) ::: (A)\nis_sat(reviews(Jackie, Seasonings)) ::: (B)\nis_sat(reviews(Karl, Mystery)) ::: (C)\nis_sat(reviews(Karl, Retreat)) ::: (D)\nis_sat(reviews(Karl, Wolves)) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—will be divided into two teams of three people each. Each team will consist of exactly one person from each of the following three groups: Group 1, Group 2, and Group 3."
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_2_7",
    "context": "Six reviewers—Frank, George, Hilda, Jackie, Karl, and Lena—will review four movies—Mystery, Retreat, Seasonings, and Wolves—according to the following conditions: Each reviewer reviews exactly one movie, and each movie is reviewed by at least one of the six reviewers. Hilda reviews the same movie as Frank. Lena reviews the same movie as exactly one other reviewer. George reviews Mystery. Jackie reviews either Mystery or else Wolves. Hilda does not review Wolves.",
    "question": "If Karl does not review Seasonings, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Lena reviews Mystery.",
      "B) Lena reviews Retreat.",
      "C) Lena reviews Seasonings.",
      "D) Frank and Hilda review Retreat.",
      "E) Frank and Hilda review Seasonings."
    ],
    "raw_logic_programs": [
      "# Declarations\nreviewers = EnumSort([Frank, George, Hilda, Jackie, Karl, Lena])\nmovies = EnumSort([Mystery, Retreat, Seasonings, Wolves])\nreviews = Function([reviewers, movies] -> [bool])\n\n# Constraints\nForAll([r:reviewers], Count([m:movies], reviews(r, m)) == 1) ::: Each reviewer reviews exactly one movie\nForAll([m:movies], Count([r:reviewers], reviews(r, m)) >= 1) ::: each movie is reviewed by at least one of the six reviewers\nreviews(Hilda, m) == reviews(Frank, m) ::: Hilda reviews the same movie as Frank\nreviews(Lena, m) == reviews(r:reviewers, m) ::: Lena reviews the same movie as exactly one other reviewer\nreviews(George, Mystery) ::: George reviews Mystery\nOr(reviews(Jackie, Mystery), reviews(Jackie, Wolves)) ::: Jackie reviews either Mystery or else Wolves\nNot(reviews(Hilda, Wolves)) ::: Hilda does not review Wolves\n\n# Options\nQuestion ::: If Karl does not review Seasonings, which one of the following must be true?\nis_sat(ForAll([m:movies], reviews(Lena, m) == reviews(Mystery, m))) ::: A) Lena reviews Mystery.\nis_sat(ForAll([m:movies], reviews(Lena, m) == reviews(Retreat, m))) ::: B) Lena reviews Retreat.\nis_sat(ForAll([m:movies], reviews(Lena, m) == reviews(Seasonings, m))) ::: C) Lena reviews Seasonings.\nis_sat(ForAll([m:movies], reviews(Frank, m) == reviews(Hilda, m) == reviews(Retreat, m))) ::: D)"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_2_8",
    "context": "Six reviewers—Frank, George, Hilda, Jackie, Karl, and Lena—will review four movies—Mystery, Retreat, Seasonings, and Wolves—according to the following conditions: Each reviewer reviews exactly one movie, and each movie is reviewed by at least one of the six reviewers. Hilda reviews the same movie as Frank. Lena reviews the same movie as exactly one other reviewer. George reviews Mystery. Jackie reviews either Mystery or else Wolves. Hilda does not review Wolves.",
    "question": "Which one of the following is a complete and accurate list of the movies each of which could be the movie that Lena reviews?",
    "answer": "E",
    "options": [
      "A) Mystery, Retreat",
      "B) Retreat, Seasonings",
      "C) Mystery, Seasonings, Wolves",
      "D) Retreat, Seasonings, Wolves",
      "E) Mystery, Retreat, Seasonings, Wolves"
    ],
    "raw_logic_programs": [
      "# Declarations\nreviewers = EnumSort([Frank, George, Hilda, Jackie, Karl, Lena])\nmovies = EnumSort([Mystery, Retreat, Seasonings, Wolves])\nreviews = Function([reviewers, movies] -> [bool])\n\n# Constraints\nForAll([r:reviewers], Count([m:movies], reviews(r, m)) == 1) ::: Each reviewer reviews exactly one movie\nForAll([m:movies], Count([r:reviewers], reviews(r, m)) >= 1) ::: each movie is reviewed by at least one of the six reviewers\nreviews(Hilda, m) == reviews(Frank, m) ::: Hilda reviews the same movie as Frank\nreviews(Lena, m) == reviews(r, m) ::: Lena reviews the same movie as exactly one other reviewer\nreviews(George, Mystery) ::: George reviews Mystery\nOr(reviews(Jackie, Mystery), reviews(Jackie, Wolves)) ::: Jackie reviews either Mystery or else Wolves\nNot(reviews(Hilda, Wolves)) ::: Hilda does not review Wolves\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the movies each of which could be the movie that Lena reviews?\nis_valid(Exists([m:movies], reviews(Lena, m) == reviews(Mystery, m) && reviews(Lena, m) == reviews(Retreat, m))) ::: A) Mystery, Retreat\nis_valid(Exists([m:movies], reviews(Lena, m) == reviews(Retreat, m) && reviews(Lena, m) == reviews(Seasonings, m))) ::: B) Retreat, Seasonings\nis_valid(Exists([m:movies], reviews(Lena, m) == reviews(Mystery, m) && reviews(Lena, m) == reviews(Seasonings, m) &&"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_2_9",
    "context": "Six reviewers—Frank, George, Hilda, Jackie, Karl, and Lena—will review four movies—Mystery, Retreat, Seasonings, and Wolves—according to the following conditions: Each reviewer reviews exactly one movie, and each movie is reviewed by at least one of the six reviewers. Hilda reviews the same movie as Frank. Lena reviews the same movie as exactly one other reviewer. George reviews Mystery. Jackie reviews either Mystery or else Wolves. Hilda does not review Wolves.",
    "question": "Which one of the following can be true?",
    "answer": "E",
    "options": [
      "A) Frank and George review Mystery.",
      "B) Frank and Lena review Wolves.",
      "C) George and Jackie review Mystery.",
      "D) Karl reviews Wolves and Lena reviews Mystery.",
      "E) Lena reviews Retreat and Frank reviews Seasonings."
    ],
    "raw_logic_programs": [
      "# Declarations\nreviewers = EnumSort([Frank, George, Hilda, Jackie, Karl, Lena])\nmovies = EnumSort([Mystery, Retreat, Seasonings, Wolves])\nreviews = Function([reviewers, movies] -> [bool])\n\n# Constraints\nForAll([r:reviewers], Count([m:movies], reviews(r, m)) == 1) ::: Each reviewer reviews exactly one movie\nForAll([m:movies], Count([r:reviewers], reviews(r, m)) >= 1) ::: each movie is reviewed by at least one of the six reviewers\nreviews(Hilda, m) == reviews(Frank, m) ::: Hilda reviews the same movie as Frank\nAnd(reviews(Lena, m) == reviews(r, m), r!= Lena) ::: Lena reviews the same movie as exactly one other reviewer\nreviews(George, Mystery) ::: George reviews Mystery\nOr(reviews(Jackie, Mystery), reviews(Jackie, Wolves)) ::: Jackie reviews either Mystery or else Wolves\nNot(reviews(Hilda, Wolves)) ::: Hilda does not review Wolves\n\n# Options\nQuestion ::: Which one of the following can be true?\nis_sat(And(reviews(Frank, Mystery), reviews(George, Mystery))) ::: (A)\nis_sat(And(reviews(Frank, Wolves), reviews(Lena, Mystery))) ::: (B)\nis_sat(And(reviews(George, Mystery), reviews(Jackie, Mystery))) ::: (C)\nis_sat(And(reviews(Karl, Wolves), reviews(Lena, Mystery))) ::: (D)\nis_sat(And(reviews(Lena, Retreat), reviews(Frank, Seasonings))) ::: (E)\n------\nProblem:\nA group of six people—A, B,"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_2_10",
    "context": "Six reviewers—Frank, George, Hilda, Jackie, Karl, and Lena—will review four movies—Mystery, Retreat, Seasonings, and Wolves—according to the following conditions: Each reviewer reviews exactly one movie, and each movie is reviewed by at least one of the six reviewers. Hilda reviews the same movie as Frank. Lena reviews the same movie as exactly one other reviewer. George reviews Mystery. Jackie reviews either Mystery or else Wolves. Hilda does not review Wolves.",
    "question": "Lena can review any of the following EXCEPT",
    "answer": "B",
    "options": [
      "A) Mystery with George",
      "B) Mystery with Karl",
      "C) Retreat with Karl",
      "D) Seasonings with Karl",
      "E) Wolves with Jackie"
    ],
    "raw_logic_programs": [
      "# Declarations\nreviewers = EnumSort([Frank, George, Hilda, Jackie, Karl, Lena])\nmovies = EnumSort([Mystery, Retreat, Seasonings, Wolves])\nreviews = Function([reviewers, movies] -> [bool])\n\n# Constraints\nForAll([r:reviewers], Count([m:movies], reviews(r, m)) == 1) ::: Each reviewer reviews exactly one movie\nForAll([m:movies], Count([r:reviewers], reviews(r, m)) >= 1) ::: each movie is reviewed by at least one of the six reviewers\nreviews(Hilda, m) == reviews(Frank, m) ::: Hilda reviews the same movie as Frank\nreviews(Lena, m) == reviews(r, m) ::: Lena reviews the same movie as exactly one other reviewer\nreviews(George, Mystery) ::: George reviews Mystery\nOr(reviews(Jackie, Mystery), reviews(Jackie, Wolves)) ::: Jackie reviews either Mystery or else Wolves\nNot(reviews(Hilda, Wolves)) ::: Hilda does not review Wolves\n\n# Options\nQuestion ::: Lena can review any of the following EXCEPT\nis_exception(is_sat(reviews(Lena, Mystery) && reviews(George, Mystery))) ::: (A)\nis_exception(is_sat(reviews(Lena, Mystery) && reviews(Karl, Mystery))) ::: (B)\nis_exception(is_sat(reviews(Lena, Retreat) && reviews(Karl, Retreat))) ::: (C)\nis_exception(is_sat(reviews(Lena, Seasonings) && reviews(Karl, Seasonings))) ::: (D)\nis_exception(is_sat(reviews(Lena, Wolves) && reviews(Jackie, Wolves))) ::: (E)\n------\nProblem:"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_2_11",
    "context": "Six reviewers—Frank, George, Hilda, Jackie, Karl, and Lena—will review four movies—Mystery, Retreat, Seasonings, and Wolves—according to the following conditions: Each reviewer reviews exactly one movie, and each movie is reviewed by at least one of the six reviewers. Hilda reviews the same movie as Frank. Lena reviews the same movie as exactly one other reviewer. George reviews Mystery. Jackie reviews either Mystery or else Wolves. Hilda does not review Wolves.",
    "question": "If Karl reviews the same movie as exactly one other reviewer, which one of the following is a complete and accurate list of the movies any one of which could be the movie that these two reviewers review?",
    "answer": "C",
    "options": [
      "A) Mystery, Retreat",
      "B) Mystery, Seasonings",
      "C) Retreat, Seasonings",
      "D) Mystery, Seasonings, Wolves",
      "E) Retreat, Seasonings, Wolves"
    ],
    "raw_logic_programs": [
      "# Declarations\nreviewers = EnumSort([Frank, George, Hilda, Jackie, Karl, Lena])\nmovies = EnumSort([Mystery, Retreat, Seasonings, Wolves])\nreviews = Function([reviewers, movies] -> [bool])\n\n# Constraints\nForAll([r:reviewers], Count([m:movies], reviews(r, m)) == 1) ::: Each reviewer reviews exactly one movie\nForAll([m:movies], Count([r:reviewers], reviews(r, m)) >= 1) ::: each movie is reviewed by at least one of the six reviewers\nreviews(Hilda, m) == reviews(Frank, m) ::: Hilda reviews the same movie as Frank\nreviews(Lena, m) == reviews(r:reviewers, m) ::: Lena reviews the same movie as exactly one other reviewer\nreviews(George, Mystery) ::: George reviews Mystery\nreviews(Jackie, Mystery) || reviews(Jackie, Wolves) ::: Jackie reviews either Mystery or else Wolves\nNot(reviews(Hilda, Wolves)) ::: Hilda does not review Wolves\n\n# Options\nQuestion ::: If Karl reviews the same movie as exactly one other reviewer, which one of the following is a complete and accurate list of the movies any one of which could be the movie that these two reviewers review?\nis_valid(Exists([m:movies], reviews(Karl, m) && reviews(r:reviewers, m))) ::: Karl reviews the same movie as exactly one other reviewer\nis_sat(ForAll([m:movies], reviews(Karl, m) == reviews(r:reviewers, m))) ::: (A)\nis_sat(ForAll([m:movies], reviews(Karl, m) == reviews(r:reviewers, m))) ::: (B)\nis_sat(ForAll([m:movies], reviews(Karl, m) == reviews(r:reviewers, m))) ::: (C)\nis_sat(ForAll([m:movies], reviews(Karl, m) == reviews(r:reviewers, m))) ::: (D)\nis_sat(ForAll([m:movies], reviews(Karl, m) == reviews(r:reviewers, m))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_2_12",
    "context": "Six reviewers—Frank, George, Hilda, Jackie, Karl, and Lena—will review four movies—Mystery, Retreat, Seasonings, and Wolves—according to the following conditions: Each reviewer reviews exactly one movie, and each movie is reviewed by at least one of the six reviewers. Hilda reviews the same movie as Frank. Lena reviews the same movie as exactly one other reviewer. George reviews Mystery. Jackie reviews either Mystery or else Wolves. Hilda does not review Wolves.",
    "question": "Which one of the following is an acceptable assignment of reviewers to movies? Mystery Retreat Seasonings Wolves",
    "answer": "B",
    "options": [
      "A) George Frank, Hilda Jackie, Lena Karl",
      "B) George Frank, Hilda Karl, Lena Jackie",
      "C) George Karl, Lena Jackie Frank, Hilda",
      "D) George, Karl Frank, Hilda Lena Jackie",
      "E) Jackie George, Lena Frank, Hilda Karl"
    ],
    "raw_logic_programs": [
      "# Declarations\nreviewers = EnumSort([Frank, George, Hilda, Jackie, Karl, Lena])\nmovies = EnumSort([Mystery, Retreat, Seasonings, Wolves])\nreviews = Function([reviewers, movies] -> [bool])\n\n# Constraints\nForAll([r:reviewers], Count([m:movies], reviews(r, m)) == 1) ::: Each reviewer reviews exactly one movie\nForAll([m:movies], Count([r:reviewers], reviews(r, m)) >= 1) ::: each movie is reviewed by at least one of the six reviewers\nAnd(reviews(Hilda, m), reviews(Frank, m)) ::: Hilda reviews the same movie as Frank\nAnd(reviews(Lena, m), reviews(r:reviewers, reviews(r, m))) ::: Lena reviews the same movie as exactly one other reviewer\nreviews(George, Mystery) ::: George reviews Mystery\nOr(reviews(Jackie, Mystery), reviews(Jackie, Wolves)) ::: Jackie reviews either Mystery or else Wolves\nNot(reviews(Hilda, Wolves)) ::: Hilda does not review Wolves\n\n# Options\nQuestion ::: Which one of the following is an acceptable assignment of reviewers to movies?\nis_sat(And(reviews(George, Mystery), reviews(Frank, Hilda), reviews(Jackie, Lena), reviews(Karl, Retreat), reviews(Seasonings, Wolves))) ::: A) George Frank, Hilda Jackie, Lena Karl\nis_sat(And(reviews(George, Mystery), reviews(Frank, Hilda), reviews(Karl, Lena), reviews(Jackie, Retreat), reviews(Seasonings, Wolves))) ::: B) George Frank, Hilda Karl, Lena Jackie\nis_sat(And(reviews(George, Karl), reviews(Lena, Jackie), reviews(Frank, Hilda), reviews(Retreat, Seasonings), reviews(Wolves))) ::: C) George Karl, Lena Jackie Frank, Hilda\nis_sat(And(reviews(George, Karl), reviews(Lena, Frank), reviews(Hilda, Jackie), reviews(Retreat, Seasonings), reviews(Wolves))) ::: D)"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_3_13",
    "context": "In a game, \"words\" (real or nonsensical) consist of any combination of at least four letters of the English alphabet. Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order. The sentence is started by any word, and each successive word is formed by applying exactly one of three operations to the word immediately to its left: delete one letter; add one letter; replace one letter with another letter. At most three of the five words begin with the same letter as one another. Except for the leftmost word, each word is formed by a different operation from that which formed the word immediately to its left.",
    "question": "Which one of the following could be a sentence in the word game?",
    "answer": "B",
    "options": [
      "A) bzeak bleak leak peak pea",
      "B) crbek creek reek seek sxeek",
      "C) dteam gleam glean lean mean",
      "D) feed freed reed seed seeg",
      "E) food fool fools fopls opls"
    ],
    "raw_logic_programs": [
      "# Declarations\nwords = EnumSort([bzeak, bleak, leak, peak, pea, crbek, creek, reek, sxeek, dteam, gleam, glean, lean, mean, feed, freed, reed, seed, seeg, food, fool, fools, fopls, opls])\nsentence = Function([words] -> [words])\n\n# Constraints\nForAll([w:words], Count([l:letters], w == l) >= 4) ::: words consist of any combination of at least four letters of the English alphabet\nForAll([w:words], Count([l:letters], w == l) <= 5) ::: words consist of any combination of at least four letters of the English alphabet\nForAll([w:words], Count([l:letters], w == l) <= 5) ::: words consist of any combination of at least four letters of the English alphabet\nForAll([w:words], Count([l:letters], w == l) <= 5) ::: words consist of any combination of at least four letters of the English alphabet\nForAll([w:words], Count([l:letters], w == l) <= 5) ::: words consist of any combination of at least four letters of the English alphabet\nForAll([w:words], Count([l:letters], w == l) <= 5) ::: words consist of any combination of at least four letters of the English alphabet\nForAll([w:words], Count([l:letters], w == l) <= 5) ::: words consist of any combination of at least four letters of the English alphabet\nForAll([w:words], Count([l:letters], w == l) <= 5) ::: words consist of any combination of at least four letters of the English alphabet\nForAll([w:words], Count([l:letters], w == l) <= 5) ::: words consist of any combination of at least four letters of the English alphabet\nForAll([w:words], Count([l:letters], w == l) <= 5) ::: words consist of any combination of at least four letters of the English alphabet\nForAll([w:words], Count([l:letters], w == l) <= 5) ::: words consist of any combination of at least four letters of the English alphabet\nForAll([w:words], Count([l:letters], w == l) <= 5) ::: words"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_3_14",
    "context": "In a game, \"words\" (real or nonsensical) consist of any combination of at least four letters of the English alphabet. Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order. The sentence is started by any word, and each successive word is formed by applying exactly one of three operations to the word immediately to its left: delete one letter; add one letter; replace one letter with another letter. At most three of the five words begin with the same letter as one another. Except for the leftmost word, each word is formed by a different operation from that which formed the word immediately to its left.",
    "question": "The last letter of the alphabet that the first word of a sentence in the word game can begin with is",
    "answer": "D",
    "options": [
      "A) t",
      "B) w",
      "C) x",
      "D) y",
      "E) z"
    ],
    "raw_logic_programs": [
      "# Declarations\nwords = EnumSort([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z])\nsentences = EnumSort([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z])\nletters = EnumSort([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z])\n\n# Constraints\nForAll([w:words], Count([l:letters], w == l) >= 4) ::: words consist of any combination of at least four letters of the English alphabet\nForAll([s:sentences], Count([w:words], s == w) == 5) ::: Any \"sentence\" consists of exactly five words\nForAll([s:sentences], And(ForAll([w:words], s == w ==> w == w), ForAll([w:words], s == w ==> w == w))) ::: The five words are written from left to right on a single line in alphabetical order\nForAll([s:sentences], And(ForAll([w:words], s == w ==> w == w), ForAll([w:words], s == w ==> w == w))) ::: The five words are written from left to right on a single line in alphabetical order\nForAll([s:sentences], And(ForAll([w:words], s == w ==> w == w), ForAll([w:words], s == w ==> w == w))) ::: The five words are written from left to right on a single line in alphabetical order\nForAll([s:sentences], And(ForAll([w:words], s == w ==> w == w), ForAll([w:words], s == w ==> w == w))) ::: The five words are written from left to right on a single line in alphabetical order\nForAll([s:sentences], And(ForAll([w:words], s == w ==> w == w), ForAll([w:words], s == w ==> w == w))) ::: The five words are written from"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_3_15",
    "context": "In a game, \"words\" (real or nonsensical) consist of any combination of at least four letters of the English alphabet. Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order. The sentence is started by any word, and each successive word is formed by applying exactly one of three operations to the word immediately to its left: delete one letter; add one letter; replace one letter with another letter. At most three of the five words begin with the same letter as one another. Except for the leftmost word, each word is formed by a different operation from that which formed the word immediately to its left.",
    "question": "If the first word in a sentence is \"blender\" and the third word is \"slender\", then the second word can be",
    "answer": "C",
    "options": [
      "A) bender",
      "B) gender",
      "C) lender",
      "D) sender",
      "E) tender"
    ],
    "raw_logic_programs": [
      "# Declarations\nwords = EnumSort([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z])\nsentences = EnumSort([s1, s2, s3, s4, s5])\nletters = EnumSort([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z])\nwords_in_sentence = Function([sentences] -> [words])\nletters_in_word = Function([words] -> [letters])\n\n# Constraints\nForAll([s:sentences], Count([w:words], words_in_sentence(s) == w) == 5) ::: Any \"sentence\" consists of exactly five words\nForAll([s:sentences], And(words_in_sentence(s) == words_in_sentence(s), words_in_sentence(s) == words_in_sentence(s))) ::: The five words are written from left to right on a single line in alphabetical order\nForAll([s:sentences], And(words_in_sentence(s) == words_in_sentence(s), words_in_sentence(s) == words_in_sentence(s))) ::: The five words are written from left to right on a single line in alphabetical order\nForAll([s:sentences], And(words_in_sentence(s) == words_in_sentence(s), words_in_sentence(s) == words_in_sentence(s))) ::: The five words are written from left to right on a single line in alphabetical order\nForAll([s:sentences], And(words_in_sentence(s) == words_in_sentence(s), words_in_sentence(s) == words_in_sentence(s))) ::: The five words are written from left to right on a single line in alphabetical order\nForAll([s:sentences], And(words_in_sentence(s) == words_in_sentence(s), words_in_sentence(s) == words_in_sentence(s))) :::"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_3_16",
    "context": "In a game, \"words\" (real or nonsensical) consist of any combination of at least four letters of the English alphabet. Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order. The sentence is started by any word, and each successive word is formed by applying exactly one of three operations to the word immediately to its left: delete one letter; add one letter; replace one letter with another letter. At most three of the five words begin with the same letter as one another. Except for the leftmost word, each word is formed by a different operation from that which formed the word immediately to its left.",
    "question": "If the first word in a sentence consists of nine letters, then the minimum number of letters that the fourth word can contain is",
    "answer": "D",
    "options": [
      "A) four",
      "B) five",
      "C) six",
      "D) seven",
      "E) eight"
    ],
    "raw_logic_programs": [
      "# Declarations\nwords = EnumSort([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z])\nsentences = EnumSort([s1, s2, s3, s4, s5])\nletters = EnumSort([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z])\noperations = EnumSort([delete, add, replace])\n\n# Constraints\nForAll([s:sentences], Count([w:words], s == w) == 5) ::: Any \"sentence\" consists of exactly five words\nForAll([s:sentences], And(s == words(1), words(2) == words(1) + letters(1), words(3) == words(2) + letters(2), words(4) == words(3) + letters(3), words(5) == words(4) + letters(4))) ::: The five words are written from left to right on a single line in alphabetical order\nForAll([s:sentences], And(s == words(1), words(2) == words(1) - letters(1), words(3) == words(2) - letters(2), words(4) == words(3) - letters(3), words(5) == words(4) - letters(4))) ::: The five words are written from left to right on a single line in alphabetical order\nForAll([s:sentences], And(s == words(1), words(2) == words(1) + letters(1), words(3) == words(2) + letters(2), words(4) == words(3) + letters(3), words(5) == words(4) + letters(4))) ::: The five words are written from left to right on a single line in alphabetical order\nForAll([s:sentences], And(s == words(1), words(2) == words(1) - letters(1), words(3) == words(2) - letters(2), words(4) == words(3) - letters(3), words(5) == words(4) - letters(4))) :::"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_3_17",
    "context": "In a game, \"words\" (real or nonsensical) consist of any combination of at least four letters of the English alphabet. Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order. The sentence is started by any word, and each successive word is formed by applying exactly one of three operations to the word immediately to its left: delete one letter; add one letter; replace one letter with another letter. At most three of the five words begin with the same letter as one another. Except for the leftmost word, each word is formed by a different operation from that which formed the word immediately to its left.",
    "question": "If \"clean\" is the first word in a sentence and \"learn\" is another word in the sentence, then which one of the following is a complete and accurate list of the positions each of which could be the position in which \"learn\" occurs in the sentence?",
    "answer": "E",
    "options": [
      "A) second",
      "B) third",
      "C) fourth, fifth",
      "D) second, third, fourth",
      "E) third, fourth, fifth"
    ],
    "raw_logic_programs": [
      "# Declarations\nwords = EnumSort([clean, learn, other])\nletters = EnumSort([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z])\nsentence = Function([words] -> [words])\nForAll([w:words], Count([l:letters], w == l) >= 4) ::: Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order.\n\n# Constraints\nForAll([w:words], Count([l:letters], w == l) >= 4) ::: Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order.\nForAll([w:words], Count([l:letters], w == l) >= 4) ::: Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order.\nForAll([w:words], Count([l:letters], w == l) >= 4) ::: Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order.\nForAll([w:words], Count([l:letters], w == l) >= 4) ::: Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order.\nForAll([w:words], Count([l:letters], w == l) >= 4) ::: Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order.\nForAll([w:words], Count([l:letters], w == l) >= 4) ::: Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order.\nForAll([w:words], Count([l:letters], w == l) >= 4) ::: Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_3_18",
    "context": "In a game, \"words\" (real or nonsensical) consist of any combination of at least four letters of the English alphabet. Any \"sentence\" consists of exactly five words and satisfies the following conditions: The five words are written from left to right on a single line in alphabetical order. The sentence is started by any word, and each successive word is formed by applying exactly one of three operations to the word immediately to its left: delete one letter; add one letter; replace one letter with another letter. At most three of the five words begin with the same letter as one another. Except for the leftmost word, each word is formed by a different operation from that which formed the word immediately to its left.",
    "question": "If the first word in a sentence consists of four letters, then the maximum number of letters that the fifth word in this sentence could contain is",
    "answer": "C",
    "options": [
      "A) four",
      "B) five",
      "C) six",
      "D) seven",
      "E) eight"
    ],
    "raw_logic_programs": [
      "# Declarations\nwords = EnumSort([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z])\nsentences = EnumSort([s1, s2, s3, s4, s5])\nletters = EnumSort([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z])\noperations = EnumSort([delete, add, replace])\nwords_in_sentence = Function([sentences] -> [words])\nletters_in_word = Function([words] -> [letters])\noperations_in_sentence = Function([sentences] -> [operations])\n\n# Constraints\nForAll([s:sentences], Count([w:words], words_in_sentence(s) == w) == 5) ::: Any \"sentence\" consists of exactly five words\nForAll([s:sentences], And(words_in_sentence(s) == words_in_sentence(s), ForAll([w:words], words_in_sentence(s) == w) == 1))) ::: The five words are written from left to right on a single line in alphabetical order\nForAll([s:sentences], ForAll([w:words], words_in_sentence(s) == w, Count([l:letters], letters_in_word(w) == l) >= 4)) ::: \"words\" (real or nonsensical) consist of any combination of at least four letters of the English alphabet\nForAll([s:sentences], ForAll([w:words], words_in_sentence(s) == w, ForAll([o:operations], operations_in_sentence(s) == o, Count([w2:words], words_in_sentence(s) == w2, operations_in_sentence(s) == o, words_in_sentence(s) == w)) == 1)) ::: Each successive word is formed by applying exactly one of three operations to the word immediately to its left\nForAll([s:sentences], ForAll([w:words], words_in_sentence(s"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_4_19",
    "context": "A soloist will play six different guitar concertos, exactly one each Sunday for six consecutive weeks. Two concertos will be selected from among three concertos by Giuliani—H, J, and K; two from among four concertos by Rodrigo—M, N, O, and P; and two from among three concertos by Vivaldi—X, Y, and Z. The following conditions apply without exception: If N is selected, then J is also selected. If M is selected, then neither J nor O can be selected. If X is selected, then neither Z nor P can be selected. If both J and O are selected, then J is played at some time before O. X cannot be played on the fifth Sunday unless one of Rodrigo's concertos is played on the first Sunday.",
    "question": "Which one of the following is an acceptable selection of concertos that the soloist could play on the first through the sixth Sunday?",
    "answer": "B",
    "options": [
      "A) H Z M N Y K",
      "B) K J Y O Z N",
      "C) K Y P J Z M",
      "D) P Y J H X O",
      "E) X N K O J Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nconcertos = EnumSort([Giuliani, Rodrigo, Vivaldi])\nconcerto_types = EnumSort([H, J, K, M, N, O, P, X, Y, Z])\nconcerto_type_sets = EnumSort([Giuliani_concertos, Rodrigo_concertos, Vivaldi_concertos])\nconcerto_type_set_types = EnumSort([Giuliani, Rodrigo, Vivaldi])\nconcerto_type_set_concerto_types = EnumSort([H, J, K, M, N, O, P, X, Y, Z])\nconcerto_type_set_concerto_type_sets = EnumSort([Giuliani_concertos, Rodrigo_concertos, Vivaldi_concertos])\nconcerto_type_set_concerto_type_set_types = EnumSort([Giuliani, Rodrigo, Vivaldi])\nconcerto_type_set_concerto_type_set_concerto_types = EnumSort([H, J, K, M, N, O, P, X, Y, Z])\nconcerto_type_set_concerto_type_set_concerto_type_sets = EnumSort([Giuliani_concertos, Rodrigo_concertos, Vivaldi_concertos])\nconcerto_type_set_concerto_type_set_concerto_type_set_types = EnumSort([Giuliani, Rodrigo, Vivaldo])\nconcerto_type_set_concerto_type_set_concerto_type_set_concerto_types = EnumSort([H, J, K, M, N, O, P, X, Y, Z])\nconcerto_type_set_concerto_type_set_concerto_type_set_concerto_type_sets = EnumSort([Giuliani_concertos, Rodrigo_concertos, Vivaldi_concertos])\nconcerto_type_set_concerto_type_set_concerto_type_set_concerto_type_set_types = EnumSort([Giuliani, Rodrigo, Vivaldi])\nconcer"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_4_20",
    "context": "A soloist will play six different guitar concertos, exactly one each Sunday for six consecutive weeks. Two concertos will be selected from among three concertos by Giuliani—H, J, and K; two from among four concertos by Rodrigo—M, N, O, and P; and two from among three concertos by Vivaldi—X, Y, and Z. The following conditions apply without exception: If N is selected, then J is also selected. If M is selected, then neither J nor O can be selected. If X is selected, then neither Z nor P can be selected. If both J and O are selected, then J is played at some time before O. X cannot be played on the fifth Sunday unless one of Rodrigo's concertos is played on the first Sunday.",
    "question": "If the six concertos to be played are J, K, N, O, Y, and Z and if N is to be played on the first Sunday, then which one of the following concertos CANNOT be played on the second Sunday?",
    "answer": "C",
    "options": [
      "A) J",
      "B) K",
      "C) O",
      "D) Y",
      "E) Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nconcertos = EnumSort([Giuliani, Rodrigo, Vivaldi])\nconcerto_types = EnumSort([H, J, K, M, N, O, P, X, Y, Z])\nconcerto_type_sets = EnumSort([Giuliani_concertos, Rodrigo_concertos, Vivaldi_concertos])\nconcerto_type_set_members = EnumSort([H, J, K, M, N, O, P, X, Y, Z])\nconcertos_played = Function([concertos] -> [concerto_type_sets])\nconcerto_type_set_members_played = Function([concerto_type_sets] -> [concerto_type_set_members])\nconcerto_type_set_members_played_on_sunday = Function([concerto_type_set_members, int] -> [bool])\n\n# Constraints\nForAll([c:concertos], Count([c_t:concerto_type_sets], concerto_type_set_members_played(c_t) == c)) == 2 ::: two concertos will be selected from among three concertos by Giuliani—H, J, and K; two from among four concertos by Rodrigo—M, N, O, and P; and two from among three concertos by Vivaldi—X, Y, and Z\nForAll([c:concertos], Count([c_t:concerto_type_sets], concerto_type_set_members_played(c_t) == c) == 2) ::: two concertos will be selected from among three concertos by Giuliani—H, J, and K; two from among four concertos by Rodrigo—M, N, O, and P; and two from among three concertos by Vivaldi—X, Y, and Z\nForAll([c:concertos], Count([c_t:concerto_type_sets], concerto_type_set_members_played(c_t) == c) == 2) ::: two concertos will be selected from among three concertos by Giuliani—H, J, and K; two from among four concertos by Rodrigo—M, N, O, and P; and two from among three concertos by V"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_4_21",
    "context": "A soloist will play six different guitar concertos, exactly one each Sunday for six consecutive weeks. Two concertos will be selected from among three concertos by Giuliani—H, J, and K; two from among four concertos by Rodrigo—M, N, O, and P; and two from among three concertos by Vivaldi—X, Y, and Z. The following conditions apply without exception: If N is selected, then J is also selected. If M is selected, then neither J nor O can be selected. If X is selected, then neither Z nor P can be selected. If both J and O are selected, then J is played at some time before O. X cannot be played on the fifth Sunday unless one of Rodrigo's concertos is played on the first Sunday.",
    "question": "If J, O, and Y are the first three concertos to be played, not necessarily in the order given, which one of the following is a concerto that CANNOT be played on the fifth Sunday?",
    "answer": "E",
    "options": [
      "A) H",
      "B) K",
      "C) N",
      "D) P",
      "E) X"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_4_22",
    "context": "A soloist will play six different guitar concertos, exactly one each Sunday for six consecutive weeks. Two concertos will be selected from among three concertos by Giuliani—H, J, and K; two from among four concertos by Rodrigo—M, N, O, and P; and two from among three concertos by Vivaldi—X, Y, and Z. The following conditions apply without exception: If N is selected, then J is also selected. If M is selected, then neither J nor O can be selected. If X is selected, then neither Z nor P can be selected. If both J and O are selected, then J is played at some time before O. X cannot be played on the fifth Sunday unless one of Rodrigo's concertos is played on the first Sunday.",
    "question": "If O is selected for the first Sunday, which one of the following is a concerto that must also be selected?",
    "answer": "B",
    "options": [
      "A) J",
      "B) K",
      "C) M",
      "D) N",
      "E) X"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_4_23",
    "context": "A soloist will play six different guitar concertos, exactly one each Sunday for six consecutive weeks. Two concertos will be selected from among three concertos by Giuliani—H, J, and K; two from among four concertos by Rodrigo—M, N, O, and P; and two from among three concertos by Vivaldi—X, Y, and Z. The following conditions apply without exception: If N is selected, then J is also selected. If M is selected, then neither J nor O can be selected. If X is selected, then neither Z nor P can be selected. If both J and O are selected, then J is played at some time before O. X cannot be played on the fifth Sunday unless one of Rodrigo's concertos is played on the first Sunday.",
    "question": "Which one of the following is a concerto that must be selected?",
    "answer": "D",
    "options": [
      "A) J",
      "B) K",
      "C) O",
      "D) Y",
      "E) Z"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199402_2-G_4_24",
    "context": "A soloist will play six different guitar concertos, exactly one each Sunday for six consecutive weeks. Two concertos will be selected from among three concertos by Giuliani—H, J, and K; two from among four concertos by Rodrigo—M, N, O, and P; and two from among three concertos by Vivaldi—X, Y, and Z. The following conditions apply without exception: If N is selected, then J is also selected. If M is selected, then neither J nor O can be selected. If X is selected, then neither Z nor P can be selected. If both J and O are selected, then J is played at some time before O. X cannot be played on the fifth Sunday unless one of Rodrigo's concertos is played on the first Sunday.",
    "question": "Which one of the following is a concerto that CANNOT be selected together with N?",
    "answer": "A",
    "options": [
      "A) M",
      "B) O",
      "C) P",
      "D) X",
      "E) Z"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_1_1",
    "context": "Eight camp counselors—Fran, George, Henry, Joan, Kathy, Lewis, Nathan, and Olga—must each be assigned to supervise exactly one of three activities—swimming, tennis, and volleyball. The assignment of counselors must conform to the following conditions: Each activity is supervised by at least two, but not more than three, of the eight counselors. Henry supervises swimming. Neither Kathy nor Olga supervises tennis. Neither Kathy nor Nathan supervises the same activity as Joan. If George supervises swimming, both Nathan and Olga supervise volleyball.",
    "question": "Which one of the following is an acceptable assignment of the counselors to the activities?",
    "answer": "A",
    "options": [
      "A) Swimming: Fran, George, Henry; Tennis: Joan, Lewis; Volleyball: Kathy, Nathan, Olga",
      "B) Swimming: George, Henry, Olga; Tennis: Fran, Joan, Lewis; Volleyball: Kathy, Nathan",
      "C) Swimming: Henry; Tennis: Fran, George, Joan, Lewis; Volleyball: Kathy, Nathan, Olga",
      "D) Swimming: Henry, Joan, Kathy; Tennis: George, Nathan; Volleyball: Fran, Lewis, Olga",
      "E) Swimming: Henry, Nathan; Tennis: Fran, Kathy, Lewis; Volleyball: George, Joan, Olga"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_1_2",
    "context": "Eight camp counselors—Fran, George, Henry, Joan, Kathy, Lewis, Nathan, and Olga—must each be assigned to supervise exactly one of three activities—swimming, tennis, and volleyball. The assignment of counselors must conform to the following conditions: Each activity is supervised by at least two, but not more than three, of the eight counselors. Henry supervises swimming. Neither Kathy nor Olga supervises tennis. Neither Kathy nor Nathan supervises the same activity as Joan. If George supervises swimming, both Nathan and Olga supervise volleyball.",
    "question": "Which one of the following is a pair of counselors who could be two of three counselors assigned to supervise swimming?",
    "answer": "E",
    "options": [
      "A) George and Nathan",
      "B) George and Olga",
      "C) Joan and Kathy",
      "D) Joan and Nathan",
      "E) Joan and Olga"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_1_3",
    "context": "Eight camp counselors—Fran, George, Henry, Joan, Kathy, Lewis, Nathan, and Olga—must each be assigned to supervise exactly one of three activities—swimming, tennis, and volleyball. The assignment of counselors must conform to the following conditions: Each activity is supervised by at least two, but not more than three, of the eight counselors. Henry supervises swimming. Neither Kathy nor Olga supervises tennis. Neither Kathy nor Nathan supervises the same activity as Joan. If George supervises swimming, both Nathan and Olga supervise volleyball.",
    "question": "Which one of the following is a pair of counselors who could together be assigned to supervise tennis?",
    "answer": "B",
    "options": [
      "A) Fran and Kathy",
      "B) George and Nathan",
      "C) Henry and Lewis",
      "D) Joan and Nathan",
      "E) Joan and Olga"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_1_4",
    "context": "Eight camp counselors—Fran, George, Henry, Joan, Kathy, Lewis, Nathan, and Olga—must each be assigned to supervise exactly one of three activities—swimming, tennis, and volleyball. The assignment of counselors must conform to the following conditions: Each activity is supervised by at least two, but not more than three, of the eight counselors. Henry supervises swimming. Neither Kathy nor Olga supervises tennis. Neither Kathy nor Nathan supervises the same activity as Joan. If George supervises swimming, both Nathan and Olga supervise volleyball.",
    "question": "If George and Kathy are two of three counselors assigned to supervise swimming, which one of the following could be true of the assignment?",
    "answer": "D",
    "options": [
      "A) Fran supervises swimming.",
      "B) Henry supervises tennis.",
      "C) Joan supervises volleyball.",
      "D) Lewis supervises volleyball.",
      "E) Nathan supervises tennis."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_1_5",
    "context": "Eight camp counselors—Fran, George, Henry, Joan, Kathy, Lewis, Nathan, and Olga—must each be assigned to supervise exactly one of three activities—swimming, tennis, and volleyball. The assignment of counselors must conform to the following conditions: Each activity is supervised by at least two, but not more than three, of the eight counselors. Henry supervises swimming. Neither Kathy nor Olga supervises tennis. Neither Kathy nor Nathan supervises the same activity as Joan. If George supervises swimming, both Nathan and Olga supervise volleyball.",
    "question": "If Fran and Lewis are two of three counselors assigned to supervise swimming, which one of the following must be true of the assignment?",
    "answer": "C",
    "options": [
      "A) George supervises volleyball.",
      "B) Henry supervises volleyball.",
      "C) Joan supervises tennis.",
      "D) Kathy supervises swimming.",
      "E) Nathan supervises tennis."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_1_6",
    "context": "Eight camp counselors—Fran, George, Henry, Joan, Kathy, Lewis, Nathan, and Olga—must each be assigned to supervise exactly one of three activities—swimming, tennis, and volleyball. The assignment of counselors must conform to the following conditions: Each activity is supervised by at least two, but not more than three, of the eight counselors. Henry supervises swimming. Neither Kathy nor Olga supervises tennis. Neither Kathy nor Nathan supervises the same activity as Joan. If George supervises swimming, both Nathan and Olga supervise volleyball.",
    "question": "If Joan is assigned to supervise the same activity as Olga, which one of the following CANNOT be true of the assignment?",
    "answer": "B",
    "options": [
      "A) Fran supervises swimming.",
      "B) George supervises swimming.",
      "C) Kathy supervises volleyball.",
      "D) Lewis supervises volleyball.",
      "E) Nathan supervises tennis."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_2_7",
    "context": "A fire chief is determining the work schedules of five firefighters: Fuentes, Graber, Howell, Iman, and Jackson. The schedule must meet the following conditions: Except for Saturday and Sunday, when none of them works, exactly one of the firefighters works each day. None of the firefighters can work more than two days per week. No firefighter works on two consecutive days. Fuentes never works later in the week than Jackson. If Howell works, then Graber must work on the following day.",
    "question": "Which one of the following CANNOT be a Monday-to-Friday work schedule?",
    "answer": "B",
    "options": [
      "A) Fuentes, Iman, Fuentes, Jackson, Iman",
      "B) Fuentes, Jackson, Howell, Graber, Fuentes",
      "C) Graber, Fuentes, Graber, Fuentes, Jackson",
      "D) Graber, Howell, Graber, Fuentes, Jackson",
      "E) Howell, Graber, Iman, Graber, Iman"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_2_8",
    "context": "A fire chief is determining the work schedules of five firefighters: Fuentes, Graber, Howell, Iman, and Jackson. The schedule must meet the following conditions: Except for Saturday and Sunday, when none of them works, exactly one of the firefighters works each day. None of the firefighters can work more than two days per week. No firefighter works on two consecutive days. Fuentes never works later in the week than Jackson. If Howell works, then Graber must work on the following day.",
    "question": "If each firefighter is required to have at least two consecutive days off during the Monday-to-Friday workweek, which one of the following could be a possible work schedule?",
    "answer": "D",
    "options": [
      "A) Howell, Graber, Howell, Graber, Iman",
      "B) Howell, Howell, Graber, Fuentes, Iman",
      "C) Iman, Fuentes, Jackson, Iman, Iman",
      "D) Fuentes, Howell, Graber, Fuentes, Jackson",
      "E) Jackson, Howell, Graber, Iman, Fuentes"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_2_9",
    "context": "A fire chief is determining the work schedules of five firefighters: Fuentes, Graber, Howell, Iman, and Jackson. The schedule must meet the following conditions: Except for Saturday and Sunday, when none of them works, exactly one of the firefighters works each day. None of the firefighters can work more than two days per week. No firefighter works on two consecutive days. Fuentes never works later in the week than Jackson. If Howell works, then Graber must work on the following day.",
    "question": "If both Fuentes and Jackson work during a week, which one of the following statements CANNOT be true?",
    "answer": "B",
    "options": [
      "A) Fuentes works on Monday and Wednesday.",
      "B) Jackson works on Monday and Wednesday.",
      "C) Fuentes works on Tuesday and Thursday.",
      "D) Jackson works on Tuesday and Thursday.",
      "E) Jackson works on Wednesday and Friday."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_2_10",
    "context": "A fire chief is determining the work schedules of five firefighters: Fuentes, Graber, Howell, Iman, and Jackson. The schedule must meet the following conditions: Except for Saturday and Sunday, when none of them works, exactly one of the firefighters works each day. None of the firefighters can work more than two days per week. No firefighter works on two consecutive days. Fuentes never works later in the week than Jackson. If Howell works, then Graber must work on the following day.",
    "question": "If Fuentes works two days during the week and Jackson works on Thursday, which one of the following statements could be true?",
    "answer": "B",
    "options": [
      "A) Fuentes works on Tuesday.",
      "B) Graber works on Tuesday.",
      "C) Howell works on Tuesday.",
      "D) Graber works on Wednesday.",
      "E) Howell works on Wednesday."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_2_11",
    "context": "A fire chief is determining the work schedules of five firefighters: Fuentes, Graber, Howell, Iman, and Jackson. The schedule must meet the following conditions: Except for Saturday and Sunday, when none of them works, exactly one of the firefighters works each day. None of the firefighters can work more than two days per week. No firefighter works on two consecutive days. Fuentes never works later in the week than Jackson. If Howell works, then Graber must work on the following day.",
    "question": "If Graber does not work during the week, which one of the following statements must be true?",
    "answer": "D",
    "options": [
      "A) Fuentes works exactly one day during the week.",
      "B) Fuentes works exactly two days during the week.",
      "C) Iman works exactly one day during the week.",
      "D) Iman works exactly two days during the week.",
      "E) Jackson works exactly one day during the week."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_3_12",
    "context": "A housing committee will consist of exactly five representatives, one of whom will be its chairperson. The representatives will be selected from among a group of five tenants—F, G, J, K, and M—and a group of four homeowners—P, Q, R, and S. The following conditions must be met: The committee must include at least two representatives from each group. The chairperson must be a representative belonging to the group from which exactly two representatives are selected. If F is selected, Q must be selected. If G is selected, K must be selected. If either J or M is selected, the other must also be selected. M and P cannot both be selected.",
    "question": "Which one of the following is an acceptable selection of representatives for the committee?",
    "answer": "D",
    "options": [
      "A) F, G, Q, R, S",
      "B) F, J, K, P, Q",
      "C) F, P, Q, R, S",
      "D) J, K, M, Q, S",
      "E) J, M, P, Q, S"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_3_13",
    "context": "A housing committee will consist of exactly five representatives, one of whom will be its chairperson. The representatives will be selected from among a group of five tenants—F, G, J, K, and M—and a group of four homeowners—P, Q, R, and S. The following conditions must be met: The committee must include at least two representatives from each group. The chairperson must be a representative belonging to the group from which exactly two representatives are selected. If F is selected, Q must be selected. If G is selected, K must be selected. If either J or M is selected, the other must also be selected. M and P cannot both be selected.",
    "question": "Which one of the following lists three representatives who could be selected together for the committee?",
    "answer": "C",
    "options": [
      "A) F, G, J",
      "B) F, G, M",
      "C) F, J, M",
      "D) G, J, K",
      "E) G, J, M"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_3_14",
    "context": "A housing committee will consist of exactly five representatives, one of whom will be its chairperson. The representatives will be selected from among a group of five tenants—F, G, J, K, and M—and a group of four homeowners—P, Q, R, and S. The following conditions must be met: The committee must include at least two representatives from each group. The chairperson must be a representative belonging to the group from which exactly two representatives are selected. If F is selected, Q must be selected. If G is selected, K must be selected. If either J or M is selected, the other must also be selected. M and P cannot both be selected.",
    "question": "If M is the chairperson of the committee, which one of the following is among the people who must also be on the committee?",
    "answer": "E",
    "options": [
      "A) F",
      "B) G",
      "C) K",
      "D) P",
      "E) R"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_3_15",
    "context": "A housing committee will consist of exactly five representatives, one of whom will be its chairperson. The representatives will be selected from among a group of five tenants—F, G, J, K, and M—and a group of four homeowners—P, Q, R, and S. The following conditions must be met: The committee must include at least two representatives from each group. The chairperson must be a representative belonging to the group from which exactly two representatives are selected. If F is selected, Q must be selected. If G is selected, K must be selected. If either J or M is selected, the other must also be selected. M and P cannot both be selected.",
    "question": "If F is the chairperson of the committee, which one of the following is among the people who must also be on the committee?",
    "answer": "B",
    "options": [
      "A) G",
      "B) K",
      "C) P",
      "D) R",
      "E) S"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_3_16",
    "context": "A housing committee will consist of exactly five representatives, one of whom will be its chairperson. The representatives will be selected from among a group of five tenants—F, G, J, K, and M—and a group of four homeowners—P, Q, R, and S. The following conditions must be met: The committee must include at least two representatives from each group. The chairperson must be a representative belonging to the group from which exactly two representatives are selected. If F is selected, Q must be selected. If G is selected, K must be selected. If either J or M is selected, the other must also be selected. M and P cannot both be selected.",
    "question": "If F is selected, any one of the following people could be the chairperson of the committee EXCEPT:",
    "answer": "A",
    "options": [
      "A) G",
      "B) K",
      "C) P",
      "D) Q",
      "E) S"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_3_17",
    "context": "A housing committee will consist of exactly five representatives, one of whom will be its chairperson. The representatives will be selected from among a group of five tenants—F, G, J, K, and M—and a group of four homeowners—P, Q, R, and S. The following conditions must be met: The committee must include at least two representatives from each group. The chairperson must be a representative belonging to the group from which exactly two representatives are selected. If F is selected, Q must be selected. If G is selected, K must be selected. If either J or M is selected, the other must also be selected. M and P cannot both be selected.",
    "question": "If neither F nor K is selected for the committee, which one of the following can be true?",
    "answer": "C",
    "options": [
      "A) G is selected.",
      "B) P is selected.",
      "C) J is the chairperson.",
      "D) Q is the chairperson.",
      "E) S is the chairperson."
    ],
    "raw_logic_programs": [
      "# Declarations\nrepresentatives = EnumSort([F, G, J, K, M, P, Q, R, S])\nchairperson = Function([representatives] -> [representatives])\nForAll([r:representatives], And(1 <= chairperson(r), chairperson(r) <= 5))\n\n# Constraints\nForAll([r:representatives], Or(r == chairperson(r), r!= chairperson(r))) ::: The chairperson must be a representative belonging to the group from which exactly two representatives are selected\nAnd(Count([r:representatives], r == F) >= 1, Count([r:representatives], r == G) >= 1) ::: The committee must include at least two representatives from each group\nAnd(Count([r:representatives], r == F) == 1, Count([r:representatives], r == Q) == 1) ::: If F is selected, Q must be selected\nAnd(Count([r:representatives], r == G) == 1, Count([r:representatives], r == K) == 1) ::: If G is selected, K must be selected\nAnd(Count([r:representatives], r == J) == 1, Count([r:representatives], r == M) == 1) ::: If either J or M is selected, the other must also be selected\nAnd(Count([r:representatives], r == M) == 1, Count([r:representatives], r == P) == 0) ::: M and P cannot both be selected\n\n# Options\nQuestion ::: If neither F nor K is selected for the committee, which one of the following can be true?\nis_valid(Exists([r:representatives], r == G)) ::: A) G is selected.\nis_valid(Exists([r:representatives], r == P)) ::: B) P is selected.\nis_valid(Exists([r:representatives], r == J)) ::: C) J is the chairperson.\nis_valid(Exists([r:representatives], r == Q)) ::: D) Q is the chairperson.\nis_valid(Exists([r:representatives], r == S)) ::: E) S is the chairperson.\n------"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_3_18",
    "context": "A housing committee will consist of exactly five representatives, one of whom will be its chairperson. The representatives will be selected from among a group of five tenants—F, G, J, K, and M—and a group of four homeowners—P, Q, R, and S. The following conditions must be met: The committee must include at least two representatives from each group. The chairperson must be a representative belonging to the group from which exactly two representatives are selected. If F is selected, Q must be selected. If G is selected, K must be selected. If either J or M is selected, the other must also be selected. M and P cannot both be selected.",
    "question": "If the chairperson of the committee is to be a homeowner, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) If G is selected, Q is also selected.",
      "B) If G is selected, R is also selected.",
      "C) If J is selected, F is also selected.",
      "D) If J is selected, Q is also selected.",
      "E) If J is selected, R is also selected."
    ],
    "raw_logic_programs": [
      "# Declarations\nrepresentatives = EnumSort([F, G, J, K, M, P, Q, R, S])\nchairperson = Function([representatives] -> [representatives])\ntenants = EnumSort([F, G, J, K, M])\nhomeowners = EnumSort([P, Q, R, S])\n\n# Constraints\nForAll([r:representatives], Or(r == F, r == G, r == J, r == K, r == M, r == P, r == Q, r == R, r == S)) ::: The representatives will be selected from among a group of five tenants—F, G, J, K, and M—and a group of four homeowners—P, Q, R, and S\nAnd(Count([r:representatives], r == F) >= 2, Count([r:representatives], r == G) >= 2, Count([r:representatives], r == J) >= 2, Count([r:representatives], r == K) >= 2, Count([r:representatives], r == M) >= 2, Count([r:representatives], r == P) >= 2, Count([r:representatives], r == Q) >= 2, Count([r:representatives], r == R) >= 2, Count([r:representatives], r == S) >= 2) ::: The committee must include at least two representatives from each group\nAnd(chairperson(F) == F, chairperson(G) == G, chairperson(J) == J, chairperson(K) == K, chairperson(M) == M, chairperson(P) == P, chairperson(Q) == Q, chairperson(R) == R, chairperson(S) == S) ::: The chairperson must be a representative belonging to the group from which exactly two representatives are selected\nForAll([r:representatives], Implies(r == F, r == Q)) ::: If F is selected, Q must be selected\nForAll([r:representatives], Implies(r == G, r == K)) ::: If G is selected, K must be selected\nForAll([r:representatives], Implies(r == J, r == M)) :"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_3_19",
    "context": "A housing committee will consist of exactly five representatives, one of whom will be its chairperson. The representatives will be selected from among a group of five tenants—F, G, J, K, and M—and a group of four homeowners—P, Q, R, and S. The following conditions must be met: The committee must include at least two representatives from each group. The chairperson must be a representative belonging to the group from which exactly two representatives are selected. If F is selected, Q must be selected. If G is selected, K must be selected. If either J or M is selected, the other must also be selected. M and P cannot both be selected.",
    "question": "The committee must include at least one representative from which one of the following pairs?",
    "answer": "C",
    "options": [
      "A) F, P",
      "B) G, J",
      "C) K, Q",
      "D) M, P",
      "E) R, S"
    ],
    "raw_logic_programs": [
      "# Declarations\nrepresentatives = EnumSort([F, G, J, K, M, P, Q, R, S])\nchairperson = Function([representatives] -> [representatives])\ntenants = EnumSort([F, G, J, K, M])\nhomeowners = EnumSort([P, Q, R, S])\n\n# Constraints\nForAll([r:representatives], Or(r == chairperson, r!= chairperson)) ::: The committee must include at least two representatives from each group\nAnd(r == chairperson, Count([g:group], r == g) == 2) ::: The chairperson must be a representative belonging to the group from which exactly two representatives are selected\nIf(r == F, r == Q) ::: If F is selected, Q must be selected\nIf(r == G, r == K) ::: If G is selected, K must be selected\nIf(r == J, r == M) ::: If either J or M is selected, the other must also be selected\nIf(r == M, Not(r == P)) ::: M and P cannot both be selected\n\n# Options\nQuestion ::: The committee must include at least one representative from which one of the following pairs?\nis_sat(ForAll([r:representatives], Or(r == F, r == P))) ::: A) F, P\nis_sat(ForAll([r:representatives], Or(r == G, r == J))) ::: B) G, J\nis_sat(ForAll([r:representatives], Or(r == K, r == Q))) ::: C) K, Q\nis_sat(ForAll([r:representatives], Or(r == M, r == P))) ::: D) M, P\nis_sat(ForAll([r:representatives], Or(r == R, r == S))) ::: E) R, S\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete specific projects. The following conditions apply: F and G are a team. H and J are a team. K and L are a team. F and H are a team. J and L are a team.\nQuestion:\nWhich"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_4_20",
    "context": "Four apprentices—Louis, Madelyn, Nora, and Oliver—are initially assigned to projects Q, R, S, and T, respectively. During the year in which they are apprentices, two reassignments of apprentices to projects will be made, each time according to a different one of the following plans, which can be used in any order: Plan 1. The apprentice assigned to project Q switches projects with the apprentice assigned to project S and the apprentice assigned to project R switches projects with the apprentice assigned to project T. Plan 2. The apprentice assigned to project S switches projects with the apprentice assigned to project T. Plan 3. Louis and Madelyn switch projects with each other.",
    "question": "Which one of the following must be true after the second reassignment of apprentices to projects during the year if that reassignment assigns Nora to project T ?",
    "answer": "E",
    "options": [
      "A) Louis is assigned to project S.",
      "B) Madelyn is assigned to project R.",
      "C) Madelyn is assigned to project S.",
      "D) Oliver is assigned to project R.",
      "E) Oliver is assigned to project S."
    ],
    "raw_logic_programs": [
      "# Declarations\napprentices = EnumSort([Louis, Madelyn, Nora, Oliver])\nprojects = EnumSort([Q, R, S, T])\nassigned = Function([apprentices, projects] -> [bool])\n\n# Constraints\nForAll([a:apprentices], Count([p:projects], assigned(a, p)) == 1) ::: each apprentice is assigned to exactly one project\nForAll([p:projects], Count([a:apprentices], assigned(a, p)) == 1) ::: each project is assigned to exactly one apprentice\nassigned(Louis, Q) ::: Louis is initially assigned to project Q\nassigned(Madelyn, R) ::: Madelyn is initially assigned to project R\nassigned(Nora, S) ::: Nora is initially assigned to project S\nassigned(Oliver, T) ::: Oliver is initially assigned to project T\n\n# Options\nQuestion ::: Which one of the following must be true after the second reassignment of apprentices to projects during the year if that reassignment assigns Nora to project T?\nis_sat(ForAll([a:apprentices], assigned(a, S) == assigned(a, S))) ::: A) Louis is assigned to project S.\nis_sat(ForAll([a:apprentices], assigned(a, R) == assigned(a, R))) ::: B) Madelyn is assigned to project R.\nis_sat(ForAll([a:apprentices], assigned(a, S) == assigned(a, S))) ::: C) Madelyn is assigned to project S.\nis_sat(ForAll([a:apprentices], assigned(a, R) == assigned(a, R))) ::: D) Oliver is assigned to project R.\nis_sat(ForAll([a:apprentices], assigned(a, S) == assigned(a, S))) ::: E) Oliver is assigned to project S.\n------\nProblem:\nA certain company has five employees—A, B, C, D, and E—who are assigned to five different projects—1, 2, 3, 4, and 5—in such a way that each employee is assigned to exactly one project and each project is assigned to exactly one employee. The"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_4_21",
    "context": "Four apprentices—Louis, Madelyn, Nora, and Oliver—are initially assigned to projects Q, R, S, and T, respectively. During the year in which they are apprentices, two reassignments of apprentices to projects will be made, each time according to a different one of the following plans, which can be used in any order: Plan 1. The apprentice assigned to project Q switches projects with the apprentice assigned to project S and the apprentice assigned to project R switches projects with the apprentice assigned to project T. Plan 2. The apprentice assigned to project S switches projects with the apprentice assigned to project T. Plan 3. Louis and Madelyn switch projects with each other.",
    "question": "Which one of the following could be true after only one reassignment during the year?",
    "answer": "E",
    "options": [
      "A) Louis is assigned to project T.",
      "B) Nora is assigned to project R.",
      "C) Oliver is assigned to project Q.",
      "D) Louis and Nora each remain assigned to the same projects as before.",
      "E) Nora and Oliver each remain assigned to the same projects as before."
    ],
    "raw_logic_programs": [
      "# Declarations\napprentices = EnumSort([Louis, Madelyn, Nora, Oliver])\nprojects = EnumSort([Q, R, S, T])\nassigned = Function([apprentices, projects] -> [bool])\n\n# Constraints\nForAll([a:apprentices], Count([p:projects], assigned(a, p)) == 1) ::: each apprentice is assigned to exactly one project\nForAll([p:projects], Count([a:apprentices], assigned(a, p)) == 1) ::: each project is assigned to exactly one apprentice\nassigned(Louis, Q) ::: Louis is initially assigned to project Q\nassigned(Madelyn, R) ::: Madelyn is initially assigned to project R\nassigned(Nora, S) ::: Nora is initially assigned to project S\nassigned(Oliver, T) ::: Oliver is initially assigned to project T\n\n# Options\nQuestion ::: Which one of the following could be true after only one reassignment during the year?\nis_sat(assigned(Louis, T)) ::: (A)\nis_sat(assigned(Nora, R)) ::: (B)\nis_sat(assigned(Oliver, Q)) ::: (C)\nis_sat(And(assigned(Louis, Q), assigned(Nora, S))) ::: (D)\nis_sat(And(assigned(Nora, S), assigned(Oliver, T))) ::: (E)\n------\nProblem:\nA certain company has four departments—A, B, C, and D—each of which has a manager. The managers are named F, G, H, and I. The following conditions apply: F is the manager of department A. G is the manager of department B. H is the manager of department C. I is the manager of department D.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) F is the manager of department B.\n(B) G is the manager of department A.\n(C) H is the manager of department D.\n(D) I is the manager of department C.\n(E) I is the manager of department B.\n###\n# Declarations\ndepartments = EnumSort([A"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_4_22",
    "context": "Four apprentices—Louis, Madelyn, Nora, and Oliver—are initially assigned to projects Q, R, S, and T, respectively. During the year in which they are apprentices, two reassignments of apprentices to projects will be made, each time according to a different one of the following plans, which can be used in any order: Plan 1. The apprentice assigned to project Q switches projects with the apprentice assigned to project S and the apprentice assigned to project R switches projects with the apprentice assigned to project T. Plan 2. The apprentice assigned to project S switches projects with the apprentice assigned to project T. Plan 3. Louis and Madelyn switch projects with each other.",
    "question": "If at some time during the year, Louis is reassigned to project R, which one of the following could have been the assignment of apprentices to the projects immediately before the reassignment?",
    "answer": "A",
    "options": [
      "A) Q: Louis; R: Madelyn; S: Oliver; T: Nora",
      "B) Q: Louis; R: Nora; S: Oliver; T: Madelyn",
      "C) Q: Nora; R: Madelyn; S: Louis; T: Oliver",
      "D) Q: Nora; R: Oliver; S: Louis; T: Madelyn",
      "E) Q: Oliver; R: Nora; S: Louis; T: Madelyn"
    ],
    "raw_logic_programs": [
      "# Declarations\napprentices = EnumSort([Louis, Madelyn, Nora, Oliver])\nprojects = EnumSort([Q, R, S, T])\nassigned = Function([apprentices, projects] -> [apprentices])\n\n# Constraints\nForAll([a:apprentices], Count([p:projects], assigned(a, p) == a) == 1) ::: each apprentice is assigned to exactly one project\nForAll([p:projects], Count([a:apprentices], assigned(a, p) == a) == 1) ::: each project is assigned to exactly one apprentice\nForAll([a:apprentices], assigned(a, Q) == Louis) ::: Louis is initially assigned to project Q\nForAll([a:apprentices], assigned(a, R) == Madelyn) ::: Madelyn is initially assigned to project R\nForAll([a:apprentices], assigned(a, S) == Nora) ::: Nora is initially assigned to project S\nForAll([a:apprentices], assigned(a, T) == Oliver) ::: Oliver is initially assigned to project T\n\n# Options\nQuestion ::: If at some time during the year, Louis is reassigned to project R, which one of the following could have been the assignment of apprentices to the projects immediately before the reassignment?\nis_valid(ForAll([a:apprentices], assigned(a, Q) == a) && ForAll([a:apprentices], assigned(a, R) == Madelyn) && ForAll([a:apprentices], assigned(a, S) == Oliver) && ForAll([a:apprentices], assigned(a, T) == Nora)) ::: (A)\nis_valid(ForAll([a:apprentices], assigned(a, Q) == a) && ForAll([a:apprentices], assigned(a, R) == Nora) && ForAll([a:apprentices], assigned(a, S) == Oliver) && ForAll([a:apprentices], assigned(a, T) == Madelyn)) ::: (B)\nis_valid(ForAll([a:apprentices], assigned(a, Q) == a) && ForAll([a:apprentices], assigned(a, R"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_4_23",
    "context": "Four apprentices—Louis, Madelyn, Nora, and Oliver—are initially assigned to projects Q, R, S, and T, respectively. During the year in which they are apprentices, two reassignments of apprentices to projects will be made, each time according to a different one of the following plans, which can be used in any order: Plan 1. The apprentice assigned to project Q switches projects with the apprentice assigned to project S and the apprentice assigned to project R switches projects with the apprentice assigned to project T. Plan 2. The apprentice assigned to project S switches projects with the apprentice assigned to project T. Plan 3. Louis and Madelyn switch projects with each other.",
    "question": "Which one of the following is an acceptable assignment of apprentices to the projects after only one reassignment during the year?",
    "answer": "B",
    "options": [
      "A) Q: Louis; R: Madelyn; S: Nora; T: Oliver",
      "B) Q: Madelyn; R: Louis; S: Nora; T: Oliver",
      "C) Q: Madelyn; R: Oliver; S: Nora; T: Louis",
      "D) Q: Nora; R: Louis; S: Oliver; T: Madelyn",
      "E) Q: Nora; R: Madelyn; S: Oliver; T: Louis"
    ],
    "raw_logic_programs": [
      "# Declarations\napprentices = EnumSort([Louis, Madelyn, Nora, Oliver])\nprojects = EnumSort([Q, R, S, T])\nassigned = Function([apprentices, projects] -> [apprentices])\n\n# Constraints\nForAll([a:apprentices], Count([p:projects], assigned(a, p)) == 1) ::: each apprentice is assigned to exactly one project\nForAll([p:projects], Count([a:apprentices], assigned(a, p)) == 1) ::: each project is assigned to exactly one apprentice\nassigned(Louis, Q) ::: Louis is initially assigned to project Q\nassigned(Madelyn, R) ::: Madelyn is initially assigned to project R\nassigned(Nora, S) ::: Nora is initially assigned to project S\nassigned(Oliver, T) ::: Oliver is initially assigned to project T\n\n# Options\nQuestion ::: Which one of the following is an acceptable assignment of apprentices to the projects after only one reassignment during the year?\nis_valid(And(assigned(Louis, Q), assigned(Madelyn, R), assigned(Nora, S), assigned(Oliver, T))) ::: (A)\nis_valid(And(assigned(Madelyn, Q), assigned(Louis, R), assigned(Nora, S), assigned(Oliver, T))) ::: (B)\nis_valid(And(assigned(Madelyn, Q), assigned(Oliver, R), assigned(Nora, S), assigned(Louis, T))) ::: (C)\nis_valid(And(assigned(Nora, Q), assigned(Louis, R), assigned(Oliver, S), assigned(Madelyn, T))) ::: (D)\nis_valid(And(assigned(Nora, Q), assigned(Madelyn, R), assigned(Oliver, S), assigned(Louis, T))) ::: (E)\n------\nProblem:\nA company has four departments—A, B, C, and D—and each department has four employees—E, F, G, and H. The following conditions apply: E is in department A. F is in department B. G is in department C. H is in department D.\nQuestion:\nWhich"
    ]
  },
  {
    "id": "ar_lsat_199406_1-G_4_24",
    "context": "Four apprentices—Louis, Madelyn, Nora, and Oliver—are initially assigned to projects Q, R, S, and T, respectively. During the year in which they are apprentices, two reassignments of apprentices to projects will be made, each time according to a different one of the following plans, which can be used in any order: Plan 1. The apprentice assigned to project Q switches projects with the apprentice assigned to project S and the apprentice assigned to project R switches projects with the apprentice assigned to project T. Plan 2. The apprentice assigned to project S switches projects with the apprentice assigned to project T. Plan 3. Louis and Madelyn switch projects with each other.",
    "question": "If the first reassignment is made according to plan 1, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Louis is assigned to project T as a result of the second reassignment.",
      "B) Madelyn is assigned to project Q as a result of the second reassignment.",
      "C) Madelyn is assigned to project T as a result of the second reassignment.",
      "D) Oliver is assigned to project S as a result of the second reassignment.",
      "E) Oliver is assigned to project T as a result of the second reassignment."
    ],
    "raw_logic_programs": [
      "# Declarations\napprentices = EnumSort([Louis, Madelyn, Nora, Oliver])\nprojects = EnumSort([Q, R, S, T])\nassigned = Function([apprentices, projects] -> [apprentices])\n\n# Constraints\nForAll([a:apprentices], Count([p:projects], assigned(a, p)) == 1) ::: each apprentice is assigned to exactly one project\nForAll([p:projects], Count([a:apprentices], assigned(a, p)) == 1) ::: each project is assigned to exactly one apprentice\nassigned(Louis, Q) ::: Louis is initially assigned to project Q\nassigned(Madelyn, R) ::: Madelyn is initially assigned to project R\nassigned(Nora, S) ::: Nora is initially assigned to project S\nassigned(Oliver, T) ::: Oliver is initially assigned to project T\n\n# Options\nQuestion ::: If the first reassignment is made according to plan 1, which one of the following must be true?\nis_sat(ForAll([a:apprentices], assigned(a, T) == Louis)) ::: (A)\nis_sat(ForAll([a:apprentices], assigned(a, Q) == Madelyn)) ::: (B)\nis_sat(ForAll([a:apprentices], assigned(a, T) == Madelyn)) ::: (C)\nis_sat(ForAll([a:apprentices], assigned(a, S) == Oliver)) ::: (D)\nis_sat(ForAll([a:apprentices], assigned(a, T) == Oliver)) ::: (E)\n------\nProblem:\nA company has four departments—A, B, C, and D—and each department has four employees—E, F, G, and H. The following conditions apply: E is in department A. F is in department B. G is in department C. H is in department D.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) E is in department B.\n(B) F is in department C.\n(C) G is in department D.\n(D) H is in department A.\n(E) H is in"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_1_1",
    "context": "A piano instructor will schedule exactly one lesson for each of six students—Grace, Henry, Janet, Steve, Tom, and Una—one lesson per day for six consecutive days. The schedule must conform to the following conditions: Henry's lesson is later in the schedule than Janet's lesson. Una's lesson is later in the schedule than Steve's lesson. Steve's lesson is exactly three days after Grace's lesson. Janet's lesson is on the first day or else the third day.",
    "question": "If Janet's lesson is scheduled for the first day, then the lesson for which one of the following students must be scheduled for the sixth day?",
    "answer": "E",
    "options": [
      "A) Grace",
      "B) Henry",
      "C) Steve",
      "D) Tom",
      "E) Una"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Grace, Henry, Janet, Steve, Tom, Una])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\nlessons = Function([students, days] -> [bool])\n\n# Constraints\nForAll([s:students], Count([d:days], lessons(s, d)) == 1) ::: exactly one lesson for each of six students\nForAll([d:days], Count([s:students], lessons(s, d)) == 1) ::: one lesson per day for six consecutive days\nlessons(Henry, d) > lessons(Janet, d) ::: Henry's lesson is later in the schedule than Janet's lesson\nlessons(Una, d) > lessons(Steve, d) ::: Una's lesson is later in the schedule than Steve's lesson\nlessons(Steve, d) - lessons(Grace, d) == 3 ::: Steve's lesson is exactly three days after Grace's lesson\nOr(lessons(Janet, Monday), lessons(Janet, Thursday)) ::: Janet's lesson is on the first day or else the third day\n\n# Options\nQuestion ::: If Janet's lesson is scheduled for the first day, then the lesson for which one of the following students must be scheduled for the sixth day?\nis_valid(Exists([s:students], lessons(s, Saturday))) ::: A) Grace\nis_valid(Exists([s:students], lessons(s, Saturday))) ::: B) Henry\nis_valid(Exists([s:students], lessons(s, Saturday))) ::: C) Steve\nis_valid(Exists([s:students], lessons(s, Saturday))) ::: D) Tom\nis_valid(Exists([s:students], lessons(s, Saturday))) ::: E) Una\n------\nProblem:\nA company has exactly six employees—Fred, Gail, Hank, Iris, Jan, and Kim—who work in either or both of two departments, sales and research. The following conditions apply: Hank and exactly three other employees work in the sales department. Iris and exactly"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_1_2",
    "context": "A piano instructor will schedule exactly one lesson for each of six students—Grace, Henry, Janet, Steve, Tom, and Una—one lesson per day for six consecutive days. The schedule must conform to the following conditions: Henry's lesson is later in the schedule than Janet's lesson. Una's lesson is later in the schedule than Steve's lesson. Steve's lesson is exactly three days after Grace's lesson. Janet's lesson is on the first day or else the third day.",
    "question": "For which one of the following students is there an acceptable schedule in which the student's lesson is on the third day and another acceptable schedule in which the student's lesson is on the fifth day?",
    "answer": "B",
    "options": [
      "A) Grace",
      "B) Henry",
      "C) Steve",
      "D) Tom",
      "E) Una"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Grace, Henry, Janet, Steve, Tom, Una])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\nlessons = Function([students, days] -> [bool])\n\n# Constraints\nForAll([s:students], Count([d:days], lessons(s, d)) == 1) ::: one lesson for each of six students\nForAll([d:days], Count([s:students], lessons(s, d)) == 1) ::: one lesson per day for six consecutive days\nlessons(Henry, d) > lessons(Janet, d) ::: Henry's lesson is later in the schedule than Janet's lesson\nlessons(Una, d) > lessons(Steve, d) ::: Una's lesson is later in the schedule than Steve's lesson\nlessons(Steve, d) - lessons(Grace, d) == 3 ::: Steve's lesson is exactly three days after Grace's lesson\nOr(lessons(Janet, Monday), lessons(Janet, Thursday)) ::: Janet's lesson is on the first day or else the third day\n\n# Options\nQuestion ::: For which one of the following students is there an acceptable schedule in which the student's lesson is on the third day and another acceptable schedule in which the student's lesson is on the fifth day?\nis_sat(ForAll([d:days], lessons(Grace, d) == Wednesday)) ::: A) Grace\nis_sat(ForAll([d:days], lessons(Henry, d) == Wednesday)) ::: B) Henry\nis_sat(ForAll([d:days], lessons(Steve, d) == Wednesday)) ::: C) Steve\nis_sat(ForAll([d:days], lessons(Tom, d) == Wednesday)) ::: D) Tom\nis_sat(ForAll([d:days], lessons(Una, d) == Wednesday)) ::: E) Una\n------\nProblem:\nA company has six employees—Fred, Gina, Hank, Iris,"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_1_3",
    "context": "A piano instructor will schedule exactly one lesson for each of six students—Grace, Henry, Janet, Steve, Tom, and Una—one lesson per day for six consecutive days. The schedule must conform to the following conditions: Henry's lesson is later in the schedule than Janet's lesson. Una's lesson is later in the schedule than Steve's lesson. Steve's lesson is exactly three days after Grace's lesson. Janet's lesson is on the first day or else the third day.",
    "question": "Which one of the following is a complete and accurate list of the students any one of whom could be the student whose lesson is scheduled for the second day?",
    "answer": "C",
    "options": [
      "A) Grace",
      "B) Tom",
      "C) Grace, Tom",
      "D) Henry, Tom",
      "E) Grace, Henry, Tom"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Grace, Henry, Janet, Steve, Tom, Una])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\nlessons = Function([students, days] -> [bool])\n\n# Constraints\nForAll([s:students], Count([d:days], lessons(s, d)) == 1) ::: one lesson for each of six students\nForAll([d:days], Count([s:students], lessons(s, d)) == 1) ::: one lesson per day for six consecutive days\nlessons(Henry, d) > lessons(Janet, d) ::: Henry's lesson is later in the schedule than Janet's lesson\nlessons(Una, d) > lessons(Steve, d) ::: Una's lesson is later in the schedule than Steve's lesson\nlessons(Steve, d) - lessons(Grace, d) == 3 ::: Steve's lesson is exactly three days after Grace's lesson\nOr(lessons(Janet, Monday), lessons(Janet, Thursday)) ::: Janet's lesson is on the first day or else the third day\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the students any one of whom could be the student whose lesson is scheduled for the second day?\nis_valid(Exists([s:students], lessons(s, Tuesday))) ::: A) Grace\nis_valid(Exists([s:students], lessons(s, Tuesday))) ::: B) Tom\nis_valid(Exists([s:students], lessons(s, Tuesday))) ::: C) Grace, Tom\nis_valid(Exists([s:students], lessons(s, Tuesday))) ::: D) Henry, Tom\nis_valid(Exists([s:students], lessons(s, Tuesday))) ::: E) Grace, Henry, Tom\n------"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_1_4",
    "context": "A piano instructor will schedule exactly one lesson for each of six students—Grace, Henry, Janet, Steve, Tom, and Una—one lesson per day for six consecutive days. The schedule must conform to the following conditions: Henry's lesson is later in the schedule than Janet's lesson. Una's lesson is later in the schedule than Steve's lesson. Steve's lesson is exactly three days after Grace's lesson. Janet's lesson is on the first day or else the third day.",
    "question": "If Henry's lesson is scheduled for a day either immediately before or immediately after Tom's lesson, then Grace's lesson must be scheduled for the",
    "answer": "B",
    "options": [
      "A) first day",
      "B) second day",
      "C) third day",
      "D) fourth day",
      "E) fifth day"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Grace, Henry, Janet, Steve, Tom, Una])\ndays = EnumSort([first, second, third, fourth, fifth, sixth])\nlessons = Function([students, days] -> [bool])\n\n# Constraints\nForAll([s:students], Count([d:days], lessons(s, d)) == 1) ::: exactly one lesson for each of six students\nAnd(lessons(Henry, d1), lessons(Janet, d2), d1 > d2) ::: Henry's lesson is later in the schedule than Janet's lesson\nAnd(lessons(Una, d1), lessons(Steve, d2), d1 > d2) ::: Una's lesson is later in the schedule than Steve's lesson\nAnd(lessons(Steve, d1), lessons(Grace, d2), d1 - d2 == 3) ::: Steve's lesson is exactly three days after Grace's lesson\nAnd(lessons(Janet, d1), Or(d1 == first, d1 == third)) ::: Janet's lesson is on the first day or else the third day\n\n# Options\nQuestion ::: If Henry's lesson is scheduled for a day either immediately before or immediately after Tom's lesson, then Grace's lesson must be scheduled for the\nis_sat(ForAll([d:days], Or(lessons(Henry, d), lessons(Tom, d)))) ::: Henry's lesson is scheduled for a day either immediately before or immediately after Tom's lesson\nis_sat(ForAll([d:days], Or(lessons(Grace, d), d == first))) ::: (A)\nis_sat(ForAll([d:days], Or(lessons(Grace, d), d == second))) ::: (B)\nis_sat(ForAll([d:days], Or(lessons(Grace, d), d == third))) ::: (C)\nis_"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_1_5",
    "context": "A piano instructor will schedule exactly one lesson for each of six students—Grace, Henry, Janet, Steve, Tom, and Una—one lesson per day for six consecutive days. The schedule must conform to the following conditions: Henry's lesson is later in the schedule than Janet's lesson. Una's lesson is later in the schedule than Steve's lesson. Steve's lesson is exactly three days after Grace's lesson. Janet's lesson is on the first day or else the third day.",
    "question": "If Janet's lesson is scheduled for the third day, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Grace's lesson is scheduled for a later day than Henry's lesson.",
      "B) Grace's lesson is scheduled for a later day than Una's lesson.",
      "C) Henry's lesson is scheduled for a later day than Una's lesson.",
      "D) Tom's lesson is scheduled for a later day than Henry's lesson.",
      "E) Tom's lesson is scheduled for a later day than Una's lesson."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Grace, Henry, Janet, Steve, Tom, Una])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\nlessons = Function([students, days] -> [bool])\n\n# Constraints\nForAll([s:students], Count([d:days], lessons(s, d)) == 1) ::: exactly one lesson for each of six students\nAnd(lessons(Henry, d1), lessons(Janet, d2), d1 > d2) ::: Henry's lesson is later in the schedule than Janet's lesson\nAnd(lessons(Una, d1), lessons(Steve, d2), d1 > d2) ::: Una's lesson is later in the schedule than Steve's lesson\nAnd(lessons(Grace, d1), lessons(Steve, d2), d2 - d1 == 3) ::: Steve's lesson is exactly three days after Grace's lesson\nAnd(lessons(Janet, d1), d1 == Monday, d1 == Thursday) ::: Janet's lesson is on the first day or else the third day\n\n# Options\nQuestion ::: If Janet's lesson is scheduled for the third day, which one of the following could be true?\nis_exception(is_sat(And(lessons(Grace, d1), lessons(Henry, d2), d1 > d2))) ::: A) Grace's lesson is scheduled for a later day than Henry's lesson.\nis_exception(is_sat(And(lessons(Grace, d1), lessons(Una, d2), d1 > d2))) ::: B) Grace's lesson is scheduled for a later day than Una's lesson.\nis_exception(is_sat(And(lessons(Henry, d1), lessons(Una, d2), d1 > d2))) ::: C"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_1_6",
    "context": "A piano instructor will schedule exactly one lesson for each of six students—Grace, Henry, Janet, Steve, Tom, and Una—one lesson per day for six consecutive days. The schedule must conform to the following conditions: Henry's lesson is later in the schedule than Janet's lesson. Una's lesson is later in the schedule than Steve's lesson. Steve's lesson is exactly three days after Grace's lesson. Janet's lesson is on the first day or else the third day.",
    "question": "Which one of the following is a complete and accurate list of days any one of which could be the day for which Tom's lesson is scheduled?",
    "answer": "D",
    "options": [
      "A) first, second, third",
      "B) second, third, fourth",
      "C) second, fifth, sixth",
      "D) first, second, third, fourth",
      "E) second, third, fourth, sixth"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Grace, Henry, Janet, Steve, Tom, Una])\ndays = EnumSort([first, second, third, fourth, fifth, sixth])\nlessons = Function([students, days] -> [bool])\n\n# Constraints\nForAll([s:students], Count([d:days], lessons(s, d)) == 1) ::: exactly one lesson for each of six students\nAnd(lessons(Henry, d1), lessons(Janet, d2), d1 > d2) ::: Henry's lesson is later in the schedule than Janet's lesson\nAnd(lessons(Una, d1), lessons(Steve, d2), d1 > d2) ::: Una's lesson is later in the schedule than Steve's lesson\nAnd(lessons(Steve, d1), lessons(Grace, d2), d1 - d2 == 3) ::: Steve's lesson is exactly three days after Grace's lesson\nOr(lessons(Janet, first), lessons(Janet, third)) ::: Janet's lesson is on the first day or else the third day\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of days any one of which could be the day for which Tom's lesson is scheduled?\nis_valid(Exists([d:days], lessons(Tom, d) && d == first)) ::: A) first, second, third\nis_valid(Exists([d:days], lessons(Tom, d) && d == second)) ::: B) second, third, fourth\nis_valid(Exists([d:days], lessons(Tom, d) && d == fifth)) ::: C) second, fifth, sixth\nis_valid(Exists([d:days], lessons(Tom, d) && d == first)) ::: D) first, second, third, fourth\nis_valid(Exists([d:days], lessons(Tom, d) && d == sixth)) ::: E) second, third"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_2_7",
    "context": "Five children—F, G, H, J, and K—and four adults—Q, R, S, and T—are planning a canoeing trip. The canoeists will be divided into three groups—groups 1, 2, and 3—of three canoeists each, according to the following conditions: There must be at least one adult in each group. F must be in the same group as J. G cannot be in the same group as T. H cannot be in the same group as R. Neither H nor T can be in group 2.",
    "question": "If F is in group 1, which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) G and K are in group 3.",
      "B) G and R are in group 3.",
      "C) J and S are in group 2.",
      "D) K and R are in group 1.",
      "E) Q and S are in group 2."
    ],
    "raw_logic_programs": [
      "# Declarations\ncanoeists = EnumSort([F, G, H, J, K, Q, R, S, T])\ngroups = EnumSort([group1, group2, group3])\nin_group = Function([canoeists, groups] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([c:canoeists], in_group(c, g)) == 3) ::: There must be at least one adult in each group\nAnd(in_group(F, group1), in_group(J, group1)) ::: F must be in the same group as J\nNot(in_group(G, group1)) ::: G cannot be in the same group as T\nNot(in_group(H, group1)) ::: H cannot be in the same group as R\nNot(in_group(H, group2)) ::: Neither H nor T can be in group 2\nNot(in_group(T, group2)) ::: Neither H nor T can be in group 2\n\n# Options\nQuestion ::: If F is in group 1, which one of the following could be true?\nis_sat(And(in_group(G, group3), in_group(K, group3))) ::: (A)\nis_sat(And(in_group(G, group3), in_group(R, group3))) ::: (B)\nis_sat(And(in_group(J, group2), in_group(S, group2))) ::: (C)\nis_sat(And(in_group(K, group1), in_group(R, group1))) ::: (D)\nis_sat(And(in_group(Q, group2), in_group(S, group2))) ::: (E)\n------\nProblem:\nA group of six people—F, G, H, J, K, and L—is to be divided into two groups, each of which will participate in a different activity. The following conditions apply: F and G must be in the same group."
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_2_8",
    "context": "Five children—F, G, H, J, and K—and four adults—Q, R, S, and T—are planning a canoeing trip. The canoeists will be divided into three groups—groups 1, 2, and 3—of three canoeists each, according to the following conditions: There must be at least one adult in each group. F must be in the same group as J. G cannot be in the same group as T. H cannot be in the same group as R. Neither H nor T can be in group 2.",
    "question": "If F and S are in group 3, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) G is in group 2.",
      "B) H is in group 3.",
      "C) K is in group 1.",
      "D) Q is in group 2.",
      "E) R is in group 1."
    ],
    "raw_logic_programs": [
      "# Declarations\ncanoeists = EnumSort([F, G, H, J, K, Q, R, S, T])\ngroups = EnumSort([group1, group2, group3])\nin_group = Function([canoeists, groups] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([c:canoeists], in_group(c, g)) == 3) ::: There must be at least one adult in each group\nForAll([g:groups], Count([c:canoeists], in_group(c, g)) == 3) ::: There must be at least one adult in each group\nForAll([c:canoeists], Implies(in_group(c, group1), in_group(c, group2))) ::: F must be in the same group as J\nForAll([c:canoeists], Implies(in_group(c, group1), Not(in_group(c, group2)))) ::: G cannot be in the same group as T\nForAll([c:canoeists], Implies(in_group(c, group1), Not(in_group(c, group2)))) ::: H cannot be in the same group as R\nForAll([c:canoeists], Implies(in_group(c, group1), Not(in_group(c, group2)))) ::: Neither H nor T can be in group 2\n\n# Options\nQuestion ::: If F and S are in group 3, which one of the following must be true?\nis_valid(ForAll([c:canoeists], Implies(in_group(c, group3), in_group(G, group2)))) ::: A) G is in group 2.\nis_valid(ForAll([c:canoeists], Implies(in_group(c, group3), in_group(H, group3)))) ::: B) H is in group 3.\nis_valid(ForAll([c:canoeists], Implies(in_group(c, group3), in_group(K,"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_2_9",
    "context": "Five children—F, G, H, J, and K—and four adults—Q, R, S, and T—are planning a canoeing trip. The canoeists will be divided into three groups—groups 1, 2, and 3—of three canoeists each, according to the following conditions: There must be at least one adult in each group. F must be in the same group as J. G cannot be in the same group as T. H cannot be in the same group as R. Neither H nor T can be in group 2.",
    "question": "If G and K are in group 3, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) H is in group 3.",
      "B) J is in group 1.",
      "C) R is in group 2.",
      "D) S is in group 3.",
      "E) T is in group 1."
    ],
    "raw_logic_programs": [
      "# Declarations\ncanoeists = EnumSort([F, G, H, J, K, Q, R, S, T])\ngroups = EnumSort([group1, group2, group3])\nin_group = Function([canoeists, groups] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([c:canoeists], in_group(c, g)) == 3) ::: There must be at least one adult in each group\nForAll([g:groups], Count([c:canoeists], in_group(c, g)) == 3) ::: There must be at least one adult in each group\nForAll([c:canoeists], Implies(in_group(c, group1), Not(in_group(c, group2)))) ::: F must be in the same group as J\nForAll([c:canoeists], Implies(in_group(c, group1), Not(in_group(c, group3)))) ::: F must be in the same group as J\nForAll([c:canoeists], Implies(in_group(c, group2), Not(in_group(c, group3)))) ::: F must be in the same group as J\nForAll([c:canoeists], Implies(in_group(c, group1), Not(in_group(c, group2)))) ::: G cannot be in the same group as T\nForAll([c:canoeists], Implies(in_group(c, group1), Not(in_group(c, group3)))) ::: G cannot be in the same group as T\nForAll([c:canoeists], Implies(in_group(c, group2), Not(in_group(c, group3)))) ::: G cannot be in the same group as T\nForAll([c:canoeists], Implies(in_group(c, group1), Not(in_group(c, group2)))) ::: H cannot be in the same group as R\nForAll([c:canoeists], Implies(in_group(c,"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_2_10",
    "context": "Five children—F, G, H, J, and K—and four adults—Q, R, S, and T—are planning a canoeing trip. The canoeists will be divided into three groups—groups 1, 2, and 3—of three canoeists each, according to the following conditions: There must be at least one adult in each group. F must be in the same group as J. G cannot be in the same group as T. H cannot be in the same group as R. Neither H nor T can be in group 2.",
    "question": "If Q is in group 1 and S is in group 3, which one of the following CANNOT be true?",
    "answer": "D",
    "options": [
      "A) G is in group 2.",
      "B) T is in group 1.",
      "C) There is exactly one child in group 1.",
      "D) There is exactly one child in group 2.",
      "E) There is exactly one child in group 3."
    ],
    "raw_logic_programs": [
      "# Declarations\ncanoeists = EnumSort([F, G, H, J, K, Q, R, S, T])\ngroups = EnumSort([1, 2, 3])\nin_group = Function([canoeists, groups] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([c:canoeists], in_group(c, g)) == 3) ::: There must be at least one adult in each group\nForAll([g:groups], Or(in_group(Q, g), in_group(R, g), in_group(S, g), in_group(T, g))) ::: There must be at least one adult in each group\nAnd(in_group(F, g), in_group(J, g)) ::: F must be in the same group as J\nNot(in_group(G, g), in_group(T, g)) ::: G cannot be in the same group as T\nNot(in_group(H, g), in_group(R, g)) ::: H cannot be in the same group as R\nNot(in_group(H, 2), in_group(T, 2)) ::: Neither H nor T can be in group 2\n\n# Options\nQuestion ::: If Q is in group 1 and S is in group 3, which one of the following CANNOT be true?\nis_exception(is_sat(in_group(G, 2))) ::: (A)\nis_exception(is_sat(in_group(T, 1))) ::: (B)\nis_exception(is_sat(Count([c:canoeists], in_group(c, 1)) == 1)) ::: (C)\nis_exception(is_sat(Count([c:canoeists], in_group(c, 2)) == 1)) ::: (D)\nis_exception(is_sat(Count([c:canoeists], in_group(c, 3)) == 1)) ::: (E)"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_2_11",
    "context": "Five children—F, G, H, J, and K—and four adults—Q, R, S, and T—are planning a canoeing trip. The canoeists will be divided into three groups—groups 1, 2, and 3—of three canoeists each, according to the following conditions: There must be at least one adult in each group. F must be in the same group as J. G cannot be in the same group as T. H cannot be in the same group as R. Neither H nor T can be in group 2.",
    "question": "If G is the only child in group 1, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) F is in group 3.",
      "B) K is in group 3.",
      "C) Q is in group 2.",
      "D) R is in group 1.",
      "E) S is in group 2."
    ],
    "raw_logic_programs": [
      "# Declarations\ncanoeists = EnumSort([F, G, H, J, K, Q, R, S, T])\ngroups = EnumSort([group1, group2, group3])\nin_group = Function([canoeists, groups] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([c:canoeists], in_group(c, g)) == 3) ::: There must be at least one adult in each group\nForAll([g:groups], Or(in_group(F, g), in_group(J, g))) ::: F must be in the same group as J\nNot(in_group(G, T)) ::: G cannot be in the same group as T\nNot(in_group(H, R)) ::: H cannot be in the same group as R\nNot(in_group(H, group2)) ::: Neither H nor T can be in group 2\nNot(in_group(T, group2)) ::: Neither H nor T can be in group 2\n\n# Options\nQuestion ::: If G is the only child in group 1, which one of the following must be true?\nis_sat(ForAll([c:canoeists], in_group(c, group3) == F)) ::: A) F is in group 3.\nis_sat(ForAll([c:canoeists], in_group(c, group3) == K)) ::: B) K is in group 3.\nis_sat(ForAll([c:canoeists], in_group(c, group2) == Q)) ::: C) Q is in group 2.\nis_sat(ForAll([c:canoeists], in_group(c, group1) == R)) ::: D) R is in group 1.\nis_sat(ForAll([c:canoeists], in_group(c, group2) == S)) ::: E) S is in group 2.\n------\nProblem:\nA group of five people—A, B, C,"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_3_12",
    "context": "Lara, Mendel, and Nastassia each buy at least one kind of food from a street vendor who sells only fruit cups, hot dogs, pretzels, and shish kebabs. They make their selections in accordance with the following restrictions: None of the three buys more than one portion of each kind of food. If any of the three buys a hot dog, that person does not also buy a shish kebab. At least one of the three buys a hot dog, and at least one buys a pretzel. Mendel buys a shish kebab. Nastassia buys a fruit cup. Neither Lara nor Nastassia buys a pretzel. Mendel does not buy any kind of food that Nastassia buys.",
    "question": "Which one of the following statements must be true?",
    "answer": "D",
    "options": [
      "A) Lara buys a hot dog.",
      "B) Lara buys a shish kebab.",
      "C) Mendel buys a hot dog.",
      "D) Mendel buys a pretzel.",
      "E) Nastassia buys a hot dog."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Lara, Mendel, Nastassia])\nfoods = EnumSort([fruit_cups, hot_dogs, pretzels, shish_kebabs])\nbuys = Function([people, foods] -> [bool])\n\n# Constraints\nForAll([p:people], Count([f:foods], buys(p, f)) >= 1) ::: each buys at least one kind of food\nForAll([p:people], Count([f:foods], buys(p, f)) <= 1) ::: none buys more than one portion of each kind of food\nImplies(buys(Mendel, hot_dogs), Not(buys(Mendel, shish_kebabs))) ::: if any buys a hot dog, that person does not also buy a shish kebab\nExists([p:people], buys(p, hot_dogs)) ::: at least one buys a hot dog\nExists([p:people], buys(p, pretzels)) ::: at least one buys a pretzel\nbuys(Mendel, shish_kebabs) ::: Mendel buys a shish kebab\nbuys(Nastassia, fruit_cups) ::: Nastassia buys a fruit cup\nForAll([f:foods], Implies(buys(Nastassia, f), Not(buys(Mendel, f)))) ::: Mendel does not buy any kind of food that Nastassia buys\nForAll([f:foods], Implies(buys(Nastassia, f), Not(buys(Lara, f)))) ::: Neither Lara nor Nastassia buys a pretzel\n\n# Options\nQuestion ::: Which one of the following statements must be true?\nis_valid(buys(Lara, hot_dogs)) ::: (A)\nis_valid(buys(Lara, shish_kebabs)) ::: (B)\nis_valid"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_3_13",
    "context": "Lara, Mendel, and Nastassia each buy at least one kind of food from a street vendor who sells only fruit cups, hot dogs, pretzels, and shish kebabs. They make their selections in accordance with the following restrictions: None of the three buys more than one portion of each kind of food. If any of the three buys a hot dog, that person does not also buy a shish kebab. At least one of the three buys a hot dog, and at least one buys a pretzel. Mendel buys a shish kebab. Nastassia buys a fruit cup. Neither Lara nor Nastassia buys a pretzel. Mendel does not buy any kind of food that Nastassia buys.",
    "question": "If the vendor charges $1 for each portion of food, what is the minimum amount the three people could spend?",
    "answer": "B",
    "options": [
      "A) $3",
      "B) $4",
      "C) $5",
      "D) $6",
      "E) $7"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Lara, Mendel, Nastassia])\nfoods = EnumSort([fruit_cups, hot_dogs, pretzels, shish_kebabs])\nbuys = Function([people, foods] -> [bool])\n\n# Constraints\nForAll([p:people], Count([f:foods], buys(p, f)) >= 1) ::: each buys at least one kind of food\nForAll([p:people], Count([f:foods], buys(p, f)) <= 1) ::: none buys more than one portion of each kind of food\nImplies(buys(Mendel, hot_dogs), Not(buys(Mendel, shish_kebabs))) ::: if any buys a hot dog, that person does not also buy a shish kebab\nExists([p:people], buys(p, hot_dogs)) ::: at least one buys a hot dog\nExists([p:people], buys(p, pretzels)) ::: at least one buys a pretzel\nbuys(Mendel, shish_kebabs) ::: Mendel buys a shish kebab\nbuys(Nastassia, fruit_cups) ::: Nastassia buys a fruit cup\nForAll([f:foods], Implies(buys(Nastassia, f), Not(buys(Mendel, f)))) ::: Mendel does not buy any kind of food that Nastassia buys\nForAll([f:foods], Implies(buys(Nastassia, f), Not(buys(Lara, f)))) ::: Neither Lara nor Nastassia buys a pretzel\n\n# Options\nQuestion ::: If the vendor charges $1 for each portion of food, what is the minimum amount the three people could spend?\nis_valid(Exists([p:people], buys(p, fruit_cups))) ::: A) $3\nis_valid(Exists([p:people], buys(p, hot_dogs))) ::: B) $4\nis_valid(Exists([p:people], buys(p, pretzels))) ::: C) $5\nis_valid(Exists([p:people], buys(p, shish_kebabs))) ::: D) $6\nis_valid(Exists([p:people], buys(p, fruit_cups)) && Exists([p:people], buys(p, hot_dogs))) ::: E) $7\n------"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_3_14",
    "context": "Lara, Mendel, and Nastassia each buy at least one kind of food from a street vendor who sells only fruit cups, hot dogs, pretzels, and shish kebabs. They make their selections in accordance with the following restrictions: None of the three buys more than one portion of each kind of food. If any of the three buys a hot dog, that person does not also buy a shish kebab. At least one of the three buys a hot dog, and at least one buys a pretzel. Mendel buys a shish kebab. Nastassia buys a fruit cup. Neither Lara nor Nastassia buys a pretzel. Mendel does not buy any kind of food that Nastassia buys.",
    "question": "If the vendor charges $1 for each portion of food, what is the greatest amount the three people could spend?",
    "answer": "B",
    "options": [
      "A) $5",
      "B) $6",
      "C) $7",
      "D) $8",
      "E) $9"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Lara, Mendel, Nastassia])\nfoods = EnumSort([fruit_cups, hot_dogs, pretzels, shish_kebabs])\nbuys = Function([people, foods] -> [bool])\n\n# Constraints\nForAll([p:people], Count([f:foods], buys(p, f)) >= 1) ::: each buys at least one kind of food\nForAll([p:people], Count([f:foods], buys(p, f)) <= 1) ::: none buys more than one portion of each kind of food\nImplies(buys(Mendel, hot_dogs), Not(buys(Mendel, shish_kebabs))) ::: if any buys a hot dog, that person does not also buy a shish kebab\nExists([p:people], buys(p, hot_dogs)) ::: at least one buys a hot dog\nExists([p:people], buys(p, pretzels)) ::: at least one buys a pretzel\nbuys(Mendel, shish_kebabs) ::: Mendel buys a shish kebab\nbuys(Nastassia, fruit_cups) ::: Nastassia buys a fruit cup\nForAll([f:foods], Implies(buys(Nastassia, f), Not(buys(Mendel, f)))) ::: Mendel does not buy any kind of food that Nastassia buys\nForAll([f:foods], Implies(buys(Nastassia, f), Not(buys(Lara, f)))) ::: Neither Lara nor Nastassia buys a pretzel\n\n# Options\nQuestion ::: If the vendor charges $1 for each portion of food, what is the greatest amount the three people could spend?\nis_valid(Exists([p:people], buys(p, fruit_cups))) ::: A) $5\nis_valid(Exists([p:people], buys(p, hot_dogs))) ::: B) $6\nis_valid(Exists([p:people], buys(p, pretzels))) ::: C) $7\nis_valid(Exists([p:people], buys(p, shish_kebabs))) ::: D) $8\nis_valid(Exists([p:people], buys(p, fruit_cups)) && Exists([p:people], buys(p, hot_dogs))) ::: E) $9\n------"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_3_15",
    "context": "Lara, Mendel, and Nastassia each buy at least one kind of food from a street vendor who sells only fruit cups, hot dogs, pretzels, and shish kebabs. They make their selections in accordance with the following restrictions: None of the three buys more than one portion of each kind of food. If any of the three buys a hot dog, that person does not also buy a shish kebab. At least one of the three buys a hot dog, and at least one buys a pretzel. Mendel buys a shish kebab. Nastassia buys a fruit cup. Neither Lara nor Nastassia buys a pretzel. Mendel does not buy any kind of food that Nastassia buys.",
    "question": "If Lara and Mendel buy exactly two kinds of food each, which one of the following statements must be true.",
    "answer": "A",
    "options": [
      "A) Lara buys a fruit cup.",
      "B) Lara buys a hot dog.",
      "C) Mendel buys a fruit cup.",
      "D) There is exactly one kind of food that Lara and Mendel both buy.",
      "E) There is exactly one kind of food that Lara and Nastassia both buy."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Lara, Mendel, Nastassia])\nfoods = EnumSort([fruit_cup, hot_dog, pretzel, shish_kebab])\nbuys = Function([people, foods] -> [bool])\n\n# Constraints\nForAll([p:people], Count([f:foods], buys(p, f)) >= 1) ::: each buys at least one kind of food\nForAll([p:people], Count([f:foods], buys(p, f)) <= 1) ::: none buys more than one portion of each kind of food\nImplies(buys(Mendel, hot_dog), Not(buys(Mendel, shish_kebab))) ::: if any buys a hot dog, that person does not also buy a shish kebab\nExists([p:people], buys(p, hot_dog)) ::: at least one buys a hot dog\nExists([p:people], buys(p, pretzel)) ::: at least one buys a pretzel\nbuys(Mendel, shish_kebab) ::: Mendel buys a shish kebab\nbuys(Nastassia, fruit_cup) ::: Nastassia buys a fruit cup\nForAll([f:foods], Implies(buys(Nastassia, f), Not(buys(Mendel, f)))) ::: Mendel does not buy any kind of food that Nastassia buys\nForAll([f:foods], Implies(buys(Nastassia, f), Not(buys(Lara, f)))) ::: Neither Lara nor Nastassia buys a pretzel\n\n# Options\nQuestion ::: If Lara and Mendel buy exactly two kinds of food each, which one of the following statements must be true.\nis_valid(Exists([f:foods], buys(Lara, f) && buys(Mendel, f))) ::: D) There is exactly one kind of food that Lara and Mendel both buy.\nis_valid(Exists([f:foods], buys(Lara, f) && buys(Nastassia, f))) ::: E) There is exactly one kind of food that Lara and Nastassia both buy.\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is 20 more than the"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_3_16",
    "context": "Lara, Mendel, and Nastassia each buy at least one kind of food from a street vendor who sells only fruit cups, hot dogs, pretzels, and shish kebabs. They make their selections in accordance with the following restrictions: None of the three buys more than one portion of each kind of food. If any of the three buys a hot dog, that person does not also buy a shish kebab. At least one of the three buys a hot dog, and at least one buys a pretzel. Mendel buys a shish kebab. Nastassia buys a fruit cup. Neither Lara nor Nastassia buys a pretzel. Mendel does not buy any kind of food that Nastassia buys.",
    "question": "If Lara buys a shish kebab, which one of the following statements must be true?",
    "answer": "C",
    "options": [
      "A) Lara buys a fruit cup.",
      "B) Mendel buys a fruit cup.",
      "C) Nastassia buys a hot dog.",
      "D) Nastassia buys exactly one kind of food.",
      "E) Exactly one person buys a fruit cup."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Lara, Mendel, Nastassia])\nfoods = EnumSort([fruit_cup, hot_dog, pretzel, shish_kebab])\nbuys = Function([people, foods] -> [bool])\n\n# Constraints\nForAll([p:people], Count([f:foods], buys(p, f)) >= 1) ::: each buys at least one kind of food\nForAll([p:people], Count([f:foods], buys(p, f)) <= 1) ::: none buys more than one portion of each kind of food\nImplies(buys(Mendel, hot_dog), Not(buys(Mendel, shish_kebab))) ::: if any buys a hot dog, that person does not also buy a shish kebab\nExists([p:people], buys(p, hot_dog)) ::: at least one buys a hot dog\nExists([p:people], buys(p, pretzel)) ::: at least one buys a pretzel\nbuys(Mendel, shish_kebab) ::: Mendel buys a shish kebab\nbuys(Nastassia, fruit_cup) ::: Nastassia buys a fruit cup\nForAll([f:foods], Implies(buys(Nastassia, f), Not(buys(Mendel, f)))) ::: Mendel does not buy any kind of food that Nastassia buys\nForAll([f:foods], Implies(buys(Lara, f), Not(buys(Nastassia, f)))) ::: Neither Lara nor Nastassia buys a pretzel\n\n# Options\nQuestion ::: If Lara buys a shish kebab, which one of the following statements must be true?\nis_valid(Exists([p:people], buys(p, fruit_cup))) ::: (A)\nis_valid(Exists([p:people], buys(p, fruit_cup))) ::: (B)\nis_valid(Exists([p:people], buys(p, hot_dog))) ::: (C)\nis_valid(Exists([p:people], buys(p, fruit_cup))) ::: (D)\nis_valid(Exists([p:people], buys(p, fruit_cup))) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—are to be seated in a row of six chairs. The"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_3_17",
    "context": "Lara, Mendel, and Nastassia each buy at least one kind of food from a street vendor who sells only fruit cups, hot dogs, pretzels, and shish kebabs. They make their selections in accordance with the following restrictions: None of the three buys more than one portion of each kind of food. If any of the three buys a hot dog, that person does not also buy a shish kebab. At least one of the three buys a hot dog, and at least one buys a pretzel. Mendel buys a shish kebab. Nastassia buys a fruit cup. Neither Lara nor Nastassia buys a pretzel. Mendel does not buy any kind of food that Nastassia buys.",
    "question": "Assume that the condition is removed that prevents a customer who buys a hot dog from buying a shish kebab but all other conditions remain the same. If the vendor charges $1 for each portion of food, what is the maximum amount the three people could spend?",
    "answer": "C",
    "options": [
      "A) $5",
      "B) $6",
      "C) $7",
      "D) $8",
      "E) $9"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Lara, Mendel, Nastassia])\nfoods = EnumSort([fruit_cups, hot_dogs, pretzels, shish_kebabs])\nbuys = Function([people, foods] -> [bool])\n\n# Constraints\nForAll([p:people], Count([f:foods], buys(p, f)) >= 1) ::: each buys at least one kind of food\nForAll([p:people], Count([f:foods], buys(p, f)) <= 1) ::: none buys more than one portion of each kind of food\nImplies(buys(Mendel, hot_dogs), Not(buys(Mendel, shish_kebabs))) ::: if any buys a hot dog, that person does not also buy a shish kebab\nExists([p:people], buys(p, hot_dogs)) ::: at least one buys a hot dog\nExists([p:people], buys(p, pretzels)) ::: at least one buys a pretzel\nbuys(Mendel, shish_kebabs) ::: Mendel buys a shish kebab\nbuys(Nastassia, fruit_cups) ::: Nastassia buys a fruit cup\nForAll([p:people], Implies(buys(Lara, p), Not(buys(Nastassia, p)))) ::: neither Lara nor Nastassia buys a pretzel\nForAll([f:foods], Implies(buys(Mendel, f), Not(buys(Nastassia, f)))) ::: Mendel does not buy any kind of food that Nastassia buys\n\n# Options\nQuestion ::: Assume that the condition is removed that prevents a customer who buys a hot dog from buying a shish kebab but all other conditions remain the same. If the vendor charges $1 for each portion of food, what is the maximum amount the three people could spend?\nis_valid(Exists([p:people], buys(p, hot_dogs) && buys(p, shish_kebabs))) ::: $5\nis_valid(Exists([p:people], buys(p, hot_dogs) && buys(p, shish_kebabs))) ::: $6\nis_valid(Exists([p:people], buys(p, hot_dogs) && buys(p, shish_kebabs))) ::: $7\nis_valid(Exists([p:people],"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_4_18",
    "context": "A science student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively. An experiment consists of mixing exactly two of these chemicals together by completely emptying the contents of one of the flasks into another of the flasks. The following conditions apply: The product of an experiment cannot be used in further experiments. Mixing the contents of 1 and 2 produces a red chemical. Mixing the contents of 2 and 3 produces an orange chemical. Mixing the contents of 3 with the contents of either 1 or 4 produces a blue chemical. Mixing the contents of 4 with the contents of either 1 or 2 produces a green chemical.",
    "question": "If the student performs exactly one experiment, which one of the following could be the colors of the chemicals in the resulting three nonempty flasks?",
    "answer": "D",
    "options": [
      "A) blue, blue, green",
      "B) blue, orange, orange",
      "C) blue, orange, red",
      "D) green, green, red",
      "E) green, orange, orange"
    ],
    "raw_logic_programs": [
      "# Declarations\nflasks = EnumSort([1, 2, 3, 4])\ncolors = EnumSort([blue, green, orange, red])\nchemicals = Function([flasks] -> [colors])\n\n# Constraints\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_4_19",
    "context": "A science student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively. An experiment consists of mixing exactly two of these chemicals together by completely emptying the contents of one of the flasks into another of the flasks. The following conditions apply: The product of an experiment cannot be used in further experiments. Mixing the contents of 1 and 2 produces a red chemical. Mixing the contents of 2 and 3 produces an orange chemical. Mixing the contents of 3 with the contents of either 1 or 4 produces a blue chemical. Mixing the contents of 4 with the contents of either 1 or 2 produces a green chemical.",
    "question": "If the student performs exactly two experiments, which one of the following could be the colors of the chemicals in the resulting two nonempty flasks?",
    "answer": "C",
    "options": [
      "A) blue, blue",
      "B) blue, orange",
      "C) blue, red",
      "D) green, red",
      "E) orange, orange"
    ],
    "raw_logic_programs": [
      "# Declarations\nflasks = EnumSort([1, 2, 3, 4])\ncolors = EnumSort([blue, green, orange, red])\nchemicals = Function([flasks] -> [colors])\n\n# Constraints\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_4_20",
    "context": "A science student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively. An experiment consists of mixing exactly two of these chemicals together by completely emptying the contents of one of the flasks into another of the flasks. The following conditions apply: The product of an experiment cannot be used in further experiments. Mixing the contents of 1 and 2 produces a red chemical. Mixing the contents of 2 and 3 produces an orange chemical. Mixing the contents of 3 with the contents of either 1 or 4 produces a blue chemical. Mixing the contents of 4 with the contents of either 1 or 2 produces a green chemical.",
    "question": "If the student performs exactly one experiment and none of the resulting three nonempty flasks contains a red chemical, which one of the following could be the colors of the chemicals in the three flasks?",
    "answer": "B",
    "options": [
      "A) blue, blue, green",
      "B) blue, green, green",
      "C) blue, green, orange",
      "D) blue, orange, orange",
      "E) green, green, orange"
    ],
    "raw_logic_programs": [
      "# Declarations\nflasks = EnumSort([1, 2, 3, 4])\ncolors = EnumSort([blue, green, orange, red])\nchemicals = Function([flasks] -> [colors])\n\n# Constraints\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a different color\nForAll([f:flasks], chemicals(f)!= red) ::: the student performs exactly one experiment and none of the resulting three nonempty flasks contains a red chemical\nAnd(chemicals(1) == red, chemicals(2) == blue, chemicals(3) == green, chemicals(4) == orange) ::: the student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively\nAnd(chemicals(1) == red, chemicals(2) == blue, chemicals(3) == green, chemicals(4) == orange) ::: the student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively\nAnd(chemicals(1) == red, chemicals(2) == blue, chemicals(3) == green, chemicals(4) == orange) ::: the student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively\nAnd(chemicals(1) == red, chemicals(2) == blue, chemicals(3) == green, chemicals(4) == orange) ::: the student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively\nAnd(chemicals(1) == red, chemicals(2) == blue, chemicals(3) == green, chemicals(4) == orange) ::: the student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively\nAnd(chemicals(1) == red, chemicals(2) == blue, chemicals(3) == green, chemicals(4) == orange) ::: the student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively\nAnd(chemicals"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_4_21",
    "context": "A science student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively. An experiment consists of mixing exactly two of these chemicals together by completely emptying the contents of one of the flasks into another of the flasks. The following conditions apply: The product of an experiment cannot be used in further experiments. Mixing the contents of 1 and 2 produces a red chemical. Mixing the contents of 2 and 3 produces an orange chemical. Mixing the contents of 3 with the contents of either 1 or 4 produces a blue chemical. Mixing the contents of 4 with the contents of either 1 or 2 produces a green chemical.",
    "question": "If the student performs exactly one experiment and exactly one of the resulting three nonempty flasks contains a blue chemical, which one of the following must be the colors of the chemicals in the other two flasks?",
    "answer": "A",
    "options": [
      "A) both green",
      "B) both orange",
      "C) both red",
      "D) one green and one red",
      "E) one orange and one red"
    ],
    "raw_logic_programs": [
      "# Declarations\nflasks = EnumSort([1, 2, 3, 4])\ncolors = EnumSort([blue, green, orange, red])\nchemicals = Function([flasks] -> [colors])\n\n# Constraints\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a red, a blue, a green, and an orange chemical\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a red, a blue, a green, and an orange chemical\nAnd(chemicals(1) == red, chemicals(2) == blue, chemicals(3) == green, chemicals(4) == orange) ::: flasks 1, 2, 3, and 4 originally containing a red, a blue, a green, and an orange chemical, respectively\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a red, a blue, a green, and an orange chemical\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a red, a blue, a green, and an orange chemical\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a red, a blue, a green, and an orange chemical\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a red, a blue, a green, and an orange chemical\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a red, a blue, a green, and an orange chemical\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a red, a blue, a green, and an orange chemical\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a red, a blue, a green, and an orange chemical\nForAll([f:flasks], Count([c:colors], chemicals(f) == c) == 1) ::: each flask contains a red, a blue, a green, and an orange chemical\nForAll([f:flasks"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_4_22",
    "context": "A science student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively. An experiment consists of mixing exactly two of these chemicals together by completely emptying the contents of one of the flasks into another of the flasks. The following conditions apply: The product of an experiment cannot be used in further experiments. Mixing the contents of 1 and 2 produces a red chemical. Mixing the contents of 2 and 3 produces an orange chemical. Mixing the contents of 3 with the contents of either 1 or 4 produces a blue chemical. Mixing the contents of 4 with the contents of either 1 or 2 produces a green chemical.",
    "question": "If the student will perform exactly two experiments and after the first experiment exactly one of the resulting three nonempty flasks contains an orange chemical, then in the second experiment the student could mix together the contents of flasks",
    "answer": "E",
    "options": [
      "A) 1 and 2",
      "B) 1 and 3",
      "C) 1 and 4",
      "D) 2 and 3",
      "E) 3 and 4"
    ],
    "raw_logic_programs": [
      "# Declarations\nflasks = EnumSort([1, 2, 3, 4])\nchemicals = EnumSort([red, blue, green, orange])\ncontents = Function([flasks] -> [chemicals])\n\n# Constraints\nForAll([f:flasks], Count([c:chemicals], contents(f) == c) == 1) ::: each flask contains exactly one chemical\nForAll([f:flasks], contents(f) == red) ::: flask 1 contains red\nForAll([f:flasks], contents(f) == blue) ::: flask 2 contains blue\nForAll([f:flasks], contents(f) == green) ::: flask 3 contains green\nForAll([f:flasks], contents(f) == orange) ::: flask 4 contains orange\nForAll([f1:flasks, f2:flasks], contents(f1) == contents(f2)) ::: the product of an experiment cannot be used in further experiments\nForAll([f1:flasks, f2:flasks], contents(f1) == red, contents(f2) == blue) ::: Mixing the contents of 1 and 2 produces a red chemical\nForAll([f1:flasks, f2:flasks], contents(f1) == blue, contents(f2) == orange) ::: Mixing the contents of 2 and 3 produces an orange chemical\nForAll([f1:flasks, f2:flasks], contents(f1) == blue, contents(f2) == green) ::: Mixing the contents of 3 with the contents of either 1 or 4 produces a blue chemical\nForAll([f1:flasks, f2:flasks], contents(f1) == green, contents(f2) == red) ::: Mixing the contents of 4 with the contents of either 1 or 2 produces a green chemical\n\n# Options\nQuestion ::: If the student will perform exactly two experiments and after the first experiment exactly one of the resulting three nonempty flasks contains an orange chemical, then in the second experiment the student could mix together the contents of flasks\nis_valid(Exists([f1:flasks, f2:flasks], contents(f1) == red, contents(f2) == blue))) ::: A) 1 and 2\nis_valid(Exists([f1:flasks, f2:flasks], contents(f1) == red, contents(f2) == green))) ::: B) 1 and 3\nis_valid"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_4_23",
    "context": "A science student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively. An experiment consists of mixing exactly two of these chemicals together by completely emptying the contents of one of the flasks into another of the flasks. The following conditions apply: The product of an experiment cannot be used in further experiments. Mixing the contents of 1 and 2 produces a red chemical. Mixing the contents of 2 and 3 produces an orange chemical. Mixing the contents of 3 with the contents of either 1 or 4 produces a blue chemical. Mixing the contents of 4 with the contents of either 1 or 2 produces a green chemical.",
    "question": "If the student performs exactly one experiment and none of the resulting three nonempty flasks contains an orange chemical, then the student must have mixed the contents of",
    "answer": "E",
    "options": [
      "A) flask 1 with flask 2",
      "B) flask 1 with flask 4",
      "C) flask 2 with flask 4",
      "D) flask 2 with one of the other flasks",
      "E) flask 4 with one of the other flasks"
    ],
    "raw_logic_programs": [
      "# Declarations\nflasks = EnumSort([1, 2, 3, 4])\nchemicals = EnumSort([red, blue, green, orange])\nmixes = Function([flasks, flasks] -> [chemicals])\nForAll([f:flasks], Count([c:chemicals], mixes(f, f) == c) == 1)\n\n# Constraints\nForAll([f:flasks], Count([c:chemicals], mixes(f, f) == c) == 1) ::: The product of an experiment cannot be used in further experiments\nmixes(1, 2) == red ::: Mixing the contents of 1 and 2 produces a red chemical\nmixes(2, 3) == orange ::: Mixing the contents of 2 and 3 produces an orange chemical\nmixes(3, 1) == blue ::: Mixing the contents of 3 with the contents of either 1 or 4 produces a blue chemical\nmixes(3, 4) == blue ::: Mixing the contents of 3 with the contents of either 1 or 4 produces a blue chemical\nmixes(4, 1) == green ::: Mixing the contents of 4 with the contents of either 1 or 2 produces a green chemical\nmixes(4, 2) == green ::: Mixing the contents of 4 with the contents of either 1 or 2 produces a green chemical\n\n# Options\nQuestion ::: If the student performs exactly one experiment and none of the resulting three nonempty flasks contains an orange chemical, then the student must have mixed the contents of\nis_valid(Exists([f1:flasks, f2:flasks], And(f1!= f2, mixes(f1, f2) == red)))) ::: A) flask 1 with flask 2\nis_valid(Exists([f1:flasks, f2:flasks], And(f1!= f2, mixes(f1, f2) == blue)))) ::: B) flask 1 with flask 4\nis_valid(Exists([f1:flasks, f2:flasks], And(f1!= f2, mixes(f1, f2) == green)))) ::: C) flask 2 with flask 4\nis_valid(Exists([f1:flasks, f2:flasks], And(f1!= f2, mixes(f1, f2) == green)))) ::: D) flask 2 with one of the other flasks\nis_valid(Exists([f1:flasks, f2:flasks], And(f1!= f2, mixes(f1, f2) == blue)))) ::: E) flask 4 with one of the other flasks\n------"
    ]
  },
  {
    "id": "ar_lsat_199410_2-G_4_24",
    "context": "A science student has exactly four flasks—1, 2, 3, and 4—originally containing a red, a blue, a green, and an orange chemical, respectively. An experiment consists of mixing exactly two of these chemicals together by completely emptying the contents of one of the flasks into another of the flasks. The following conditions apply: The product of an experiment cannot be used in further experiments. Mixing the contents of 1 and 2 produces a red chemical. Mixing the contents of 2 and 3 produces an orange chemical. Mixing the contents of 3 with the contents of either 1 or 4 produces a blue chemical. Mixing the contents of 4 with the contents of either 1 or 2 produces a green chemical.",
    "question": "If the student performs exactly two experiments and exactly one of the resulting two nonempty flasks contains an orange chemical, then it must be true that the contents of the other nonempty flask is",
    "answer": "D",
    "options": [
      "A) obtained by mixing flasks 1 and 2",
      "B) obtained by mixing flasks 2 and 4",
      "C) blue",
      "D) green",
      "E) red"
    ],
    "raw_logic_programs": [
      "# Declarations\nflasks = EnumSort([1, 2, 3, 4])\nchemicals = EnumSort([blue, green, orange, red])\nmixes = Function([flasks, flasks] -> [chemicals])\nForAll([f:flasks], Count([m:chemicals], mixes(f, f) == m) == 1)\n\n# Constraints\nForAll([f:flasks], mixes(f, f) == chemicals(f)) ::: The product of an experiment cannot be used in further experiments\nmixes(1, 2) == red ::: Mixing the contents of 1 and 2 produces a red chemical\nmixes(2, 3) == orange ::: Mixing the contents of 2 and 3 produces an orange chemical\nmixes(3, 1) == blue ::: Mixing the contents of 3 with the contents of either 1 or 4 produces a blue chemical\nmixes(3, 4) == blue ::: Mixing the contents of 3 with the contents of either 1 or 4 produces a blue chemical\nmixes(4, 1) == green ::: Mixing the contents of 4 with the contents of either 1 or 2 produces a green chemical\nmixes(4, 2) == green ::: Mixing the contents of 4 with the contents of either 1 or 2 produces a green chemical\n\n# Options\nQuestion ::: If the student performs exactly two experiments and exactly one of the resulting two nonempty flasks contains an orange chemical, then it must be true that the contents of the other nonempty flask is\nis_valid(Exists([f1:flasks, f2:flasks], mixes(f1, f2) == orange))) ::: A) obtained by mixing flasks 1 and 2\nis_valid(Exists([f1:flasks, f2:flasks], mixes(f1, f2) == blue))) ::: B) obtained by mixing flasks 2 and 4\nis_valid(Exists([f1:flasks, f2:flasks], mixes(f1, f2) == blue))) ::: C) blue\nis_valid(Exists([f1:flasks, f2:flasks], mixes(f1, f2) == green))) ::: D) green\nis_valid(Exists([f1:flasks, f2:flasks], mixes(f1, f2) == red))) ::: E) red\n------\nProblem:\nA certain company has exactly five employees—A, B, C, D, and E—who are assigned to work on exactly five projects—1, 2, 3, 4, and 5—in accordance with the following conditions: A is assigned to"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_1_1",
    "context": "Exactly eight consumers—F, G, H, J, K, L, M, and N—will be interviewed by market researchers. The eight will be divided into exactly two 4-person groups—group 1 and group 2—before interviews begin. Each person is assigned to exactly one of the two groups according to the following conditions: F must be in the same group as J. G must be in a different group from M. If H is in group 1, then L must be in group 1. If N is in group 2, then G must be in group 1.",
    "question": "Group 1 could consist of",
    "answer": "D",
    "options": [
      "A) F, G, H, and J",
      "B) F, H, L, and M",
      "C) F, J, K, and L",
      "D) G, H, L, and N",
      "E) G, K, M, and N"
    ],
    "raw_logic_programs": [
      "# Declarations\nconsumers = EnumSort([F, G, H, J, K, L, M, N])\ngroups = EnumSort([group1, group2])\nin_group = Function([consumers, groups] -> [bool])\n\n# Constraints\nForAll([c:consumers], Count([g:groups], in_group(c, g)) == 1) ::: each person is assigned to exactly one of the two groups\nAnd(in_group(F, g1), in_group(J, g1)) ::: F must be in the same group as J\nAnd(in_group(G, g1), in_group(M, g2)) ::: G must be in a different group from M\nAnd(in_group(H, g1), in_group(L, g1)) ::: If H is in group 1, then L must be in group 1\nAnd(in_group(N, g2), in_group(G, g1)) ::: If N is in group 2, then G must be in group 1\n\n# Options\nQuestion ::: Group 1 could consist of\nis_sat(ForAll([c:consumers], in_group(c, group1) == (c == F) || (c == G) || (c == H) || (c == J))) ::: (A)\nis_sat(ForAll([c:consumers], in_group(c, group1) == (c == F) || (c == H) || (c == L) || (c == M))) ::: (B)\nis_sat(ForAll([c:consumers], in_group(c, group1) == (c == F) || (c == J) || (c == K) || (c == L))) ::: (C)\nis_sat(ForAll([c:consumers], in_group(c, group1) == (c == G) || (c == H) || (c == L) || (c == N))) ::: (D)\nis_sat(ForAll([c:consumers], in_group(c, group1) == (c == G) || (c == K) || (c == M) || (c == N))) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who are to be assigned to exactly three departments—marketing, sales, and production—according to the following conditions: F and G are to be assigned to the same department. H and J are to be assigned to different departments. K and L are to be assigned to different departments. If F is assigned to marketing, then H is assigned to production. If G is assigned to sales, then J is assigned to production.\nQuestion:"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_1_2",
    "context": "Exactly eight consumers—F, G, H, J, K, L, M, and N—will be interviewed by market researchers. The eight will be divided into exactly two 4-person groups—group 1 and group 2—before interviews begin. Each person is assigned to exactly one of the two groups according to the following conditions: F must be in the same group as J. G must be in a different group from M. If H is in group 1, then L must be in group 1. If N is in group 2, then G must be in group 1.",
    "question": "If K is in the same group as N, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) G is in group 1.",
      "B) H is in group 2.",
      "C) J is in group 1.",
      "D) K is in group 2.",
      "E) M is in group 1."
    ],
    "raw_logic_programs": [
      "# Declarations\nconsumers = EnumSort([F, G, H, J, K, L, M, N])\ngroups = EnumSort([group1, group2])\nin_group = Function([consumers, groups] -> [bool])\n\n# Constraints\nForAll([c:consumers], Count([g:groups], in_group(c, g)) == 1) ::: each person is assigned to exactly one of the two groups\nAnd(in_group(F, g1), in_group(J, g1)) ::: F must be in the same group as J\nAnd(in_group(G, g1), in_group(M, g2)) ::: G must be in a different group from M\nAnd(in_group(H, g1), in_group(L, g1)) ::: If H is in group 1, then L must be in group 1\nAnd(in_group(N, g2), in_group(G, g1)) ::: If N is in group 2, then G must be in group 1\n\n# Options\nQuestion ::: If K is in the same group as N, which one of the following must be true?\nis_valid(in_group(G, g1)) ::: (A)\nis_valid(in_group(H, g2)) ::: (B)\nis_valid(in_group(J, g1)) ::: (C)\nis_valid(in_group(K, g2)) ::: (D)\nis_valid(in_group(M, g1)) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who are to be assigned to exactly three departments—marketing, sales, and production. Each employee is assigned to exactly one department according to the following conditions: F and G are assigned to the same department. H and J are assigned to different departments. K is assigned to the same department as F. L is assigned to the same department as J.\nQuestion:\nIf H is assigned to the marketing department, which one of the following must be true?\nChoices:\n(A) F is assigned to the sales department.\n(B) G is assigned to the production department.\n(C) J is assigned to the sales department.\n(D) K is assigned to the production department.\n(E) L is assigned to the marketing department.\n###\n# Declarations\nemployees = EnumSort([F, G, H, J, K, L])\ndepartments = EnumSort([marketing, sales, production])\nin_department = Function([employees, departments] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([d:depart"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_1_3",
    "context": "Exactly eight consumers—F, G, H, J, K, L, M, and N—will be interviewed by market researchers. The eight will be divided into exactly two 4-person groups—group 1 and group 2—before interviews begin. Each person is assigned to exactly one of the two groups according to the following conditions: F must be in the same group as J. G must be in a different group from M. If H is in group 1, then L must be in group 1. If N is in group 2, then G must be in group 1.",
    "question": "If F is in the same group as H, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) G is in group 2.",
      "B) J is in group 1.",
      "C) K is in group 1.",
      "D) L is in group 2.",
      "E) M is in group 2."
    ],
    "raw_logic_programs": [
      "# Declarations\nconsumers = EnumSort([F, G, H, J, K, L, M, N])\ngroups = EnumSort([group1, group2])\nin_group = Function([consumers, groups] -> [bool])\n\n# Constraints\nForAll([c:consumers], Count([g:groups], in_group(c, g)) == 1) ::: each person is assigned to exactly one of the two groups\nAnd(in_group(F, g1), in_group(J, g1)) ::: F must be in the same group as J\nAnd(in_group(G, g1), in_group(M, g2)) ::: G must be in a different group from M\nAnd(in_group(H, g1), in_group(L, g1)) ::: If H is in group 1, then L must be in group 1\nAnd(in_group(N, g2), in_group(G, g1)) ::: If N is in group 2, then G must be in group 1\n\n# Options\nQuestion ::: If F is in the same group as H, which one of the following must be true?\nis_sat(ForAll([c:consumers], in_group(c, group2) == in_group(G, group2))) ::: (A)\nis_sat(ForAll([c:consumers], in_group(c, group1) == in_group(J, group1))) ::: (B)\nis_sat(ForAll([c:consumers], in_group(c, group1) == in_group(K, group1))) ::: (C)\nis_sat(ForAll([c:consumers], in_group(c, group2) == in_group(L, group2))) ::: (D)\nis_sat(ForAll([c:consumers], in_group(c, group2) == in_group(M, group2))) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who are to be assigned to exactly three departments—marketing, sales, and production. Each employee is assigned to exactly one department according to the following conditions: F and G are assigned to the same department. H and J are assigned to different departments. K is assigned to the same department as F. L is assigned to the same department as J.\nQuestion:\nIf F is assigned to marketing, which one of the following must be true?\nChoices:\n(A) G is assigned to marketing.\n(B) H is assigned to sales.\n(C) J is assigned to production.\n(D) K is assigned to sales.\n(E) L is assigned to production.\n###"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_1_4",
    "context": "Exactly eight consumers—F, G, H, J, K, L, M, and N—will be interviewed by market researchers. The eight will be divided into exactly two 4-person groups—group 1 and group 2—before interviews begin. Each person is assigned to exactly one of the two groups according to the following conditions: F must be in the same group as J. G must be in a different group from M. If H is in group 1, then L must be in group 1. If N is in group 2, then G must be in group 1.",
    "question": "If L and M are in group 2, then a person who could be assigned either to group 1 or, alternatively, to group 2 is",
    "answer": "E",
    "options": [
      "A) F",
      "B) G",
      "C) H",
      "D) J",
      "E) K"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([F, G, H, J, K, L, M, N])\ngroups = EnumSort([group1, group2])\nassigned = Function([people, groups] -> [bool])\n\n# Constraints\nForAll([p:people], Count([g:groups], assigned(p, g)) == 1) ::: Each person is assigned to exactly one of the two groups\nAnd(assigned(F, g), assigned(J, g)) ::: F must be in the same group as J\nAnd(assigned(G, g1), assigned(M, g2)) ::: G must be in a different group from M\nAnd(assigned(H, group1), assigned(L, group1)) ::: If H is in group 1, then L must be in group 1\nAnd(assigned(N, group2), assigned(G, group1)) ::: If N is in group 2, then G must be in group 1\n\n# Options\nQuestion ::: If L and M are in group 2, then a person who could be assigned either to group 1 or, alternatively, to group 2 is\nis_sat(ForAll([g:groups], assigned(F, g) == assigned(J, g))) ::: A) F\nis_sat(ForAll([g:groups], assigned(G, g) == assigned(M, g))) ::: B) G\nis_sat(ForAll([g:groups], assigned(H, g) == assigned(L, g))) ::: C) H\nis_sat(ForAll([g:groups], assigned(J, g) == assigned(K, g))) ::: D) J\nis_sat(ForAll([g:groups], assigned(K, g) == assigned(L, g))) ::: E) K\n------\nProblem:\nA group of six people—F, G, H, J, K, and L—will be divided into two groups of three people each. Each person will be assigned to exactly one of the two groups according to the following conditions: F and G must be in the same group. H and J must be in the same group. K and L must be in the same group.\nQuestion:\nIf F and H are in the same group, then which one of the following must be true?\nChoices:\n(A) G and J are in the same group.\n(B) G and K are in the same group.\n(C) H and J are in the same group.\n(D) H and K are in the same group.\n(E) J and L are in the same group.\n###\n# Declarations\npeople = EnumSort([F, G, H, J, K, L])\ngroups = EnumSort([group1, group2])\nassigned"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_1_5",
    "context": "Exactly eight consumers—F, G, H, J, K, L, M, and N—will be interviewed by market researchers. The eight will be divided into exactly two 4-person groups—group 1 and group 2—before interviews begin. Each person is assigned to exactly one of the two groups according to the following conditions: F must be in the same group as J. G must be in a different group from M. If H is in group 1, then L must be in group 1. If N is in group 2, then G must be in group 1.",
    "question": "Each of the following is a pair of people who could be in group 1 together EXCEPT",
    "answer": "B",
    "options": [
      "A) F and G",
      "B) F and H",
      "C) F and L",
      "D) H and G",
      "E) H and N"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([F, G, H, J, K, L, M, N])\ngroups = EnumSort([group1, group2])\nin_group = Function([people, groups] -> [bool])\n\n# Constraints\nForAll([p:people], Count([g:groups], in_group(p, g)) == 1) ::: each person is assigned to exactly one of the two groups\nAnd(in_group(F, g1), in_group(J, g1)) ::: F must be in the same group as J\nAnd(in_group(G, g1), in_group(M, g2)) ::: G must be in a different group from M\nAnd(in_group(H, g1), in_group(L, g1)) ::: If H is in group 1, then L must be in group 1\nAnd(in_group(N, g2), in_group(G, g1)) ::: If N is in group 2, then G must be in group 1\n\n# Options\nQuestion ::: Each of the following is a pair of people who could be in group 1 together EXCEPT\nis_exception(is_sat(And(in_group(F, g1), in_group(G, g1)))) ::: (A)\nis_exception(is_sat(And(in_group(F, g1), in_group(H, g1)))) ::: (B)\nis_exception(is_sat(And(in_group(F, g1), in_group(L, g1)))) ::: (C)\nis_exception(is_sat(And(in_group(H, g1), in_group(G, g1)))) ::: (D)\nis_exception(is_sat(And(in_group(H, g1), in_group(N, g1)))) ::: (E)\n------\nProblem:\nA group of six people—F, G, H, J, K, and L—will be divided into two groups of three people each. Each person will be assigned to exactly one of the two groups according to the following conditions: F and G must be in the same group. H and J must be in the same group. K and L must be in the same group.\nQuestion:\nWhich one of the following could be the two groups?\nChoices:\n(A) F, G, and H; J, K, and L\n(B) F, G, and J; H, K, and L\n(C) F, G, and J; H, K, and L\n(D) F, G, and K; H, J, and L\n(E) F, G, and L; H, J, and K\n###\n# Dec"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_1_6",
    "context": "Exactly eight consumers—F, G, H, J, K, L, M, and N—will be interviewed by market researchers. The eight will be divided into exactly two 4-person groups—group 1 and group 2—before interviews begin. Each person is assigned to exactly one of the two groups according to the following conditions: F must be in the same group as J. G must be in a different group from M. If H is in group 1, then L must be in group 1. If N is in group 2, then G must be in group 1.",
    "question": "If L is in group 2, then each of the following is a pair of people who could be in group 1 together EXCEPT",
    "answer": "D",
    "options": [
      "A) F and M",
      "B) G and N",
      "C) J and N",
      "D) K and M",
      "E) M and N"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([F, G, H, J, K, L, M, N])\ngroups = EnumSort([group1, group2])\nin_group = Function([people, groups] -> [bool])\n\n# Constraints\nForAll([p:people], Count([g:groups], in_group(p, g)) == 1) ::: each person is assigned to exactly one of the two groups\nAnd(in_group(F, g1), in_group(J, g1)) ::: F must be in the same group as J\nAnd(in_group(G, g1), in_group(M, g2)) ::: G must be in a different group from M\nAnd(in_group(H, g1), in_group(L, g1)) ::: If H is in group 1, then L must be in group 1\nAnd(in_group(N, g2), in_group(G, g1)) ::: If N is in group 2, then G must be in group 1\nin_group(L, g2) ::: L is in group 2\n\n# Options\nQuestion ::: If L is in group 2, then each of the following is a pair of people who could be in group 1 together EXCEPT\nis_exception(is_sat(And(in_group(F, g1), in_group(M, g1)))) ::: (A)\nis_exception(is_sat(And(in_group(G, g1), in_group(N, g1)))) ::: (B)\nis_exception(is_sat(And(in_group(J, g1), in_group(N, g1)))) ::: (C)\nis_exception(is_sat(And(in_group(K, g1), in_group(M, g1)))) ::: (D)\nis_exception(is_sat(And(in_group(M, g1), in_group(N, g1)))) ::: (E)\n------\nProblem:\nA group of six people—F, G, H, J, K, and L—will be divided into two groups of three people each. Each person will be assigned to exactly one of the two groups according to the following conditions: F and G must be in the same group. H and J must be in the same group. K and L must be in the same group.\nQuestion:\nIf F is in the same group as J, then each of the following must be true EXCEPT:\nChoices:\n(A) G is in the same group as J.\n(B) H is in the same group as K.\n(C) H is in the same group as L.\n(D) J is in the same group as K.\n("
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_2_7",
    "context": "Five people—Harry, Iris, Kate, Nancy, and Victor—are to be scheduled as contestants on a television show, one contestant per day, for five consecutive days from Monday through Friday. The following restrictions governing the scheduling of contestants must be observed: Nancy is not scheduled for Monday. If Harry is scheduled for Monday, Nancy is scheduled for Friday. If Nancy is scheduled for Tuesday, Iris is scheduled for Monday. Kate is scheduled for the next day after the day for which Victor is scheduled.",
    "question": "Victor can be scheduled for any day EXCEPT",
    "answer": "E",
    "options": [
      "A) Monday",
      "B) Tuesday",
      "C) Wednesday",
      "D) Thursday",
      "E) Friday"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Harry, Iris, Kate, Nancy, Victor])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nscheduled = Function([people, days] -> [bool])\n\n# Constraints\nForAll([p:people], Count([d:days], scheduled(p, d)) == 1) ::: one contestant per day\nForAll([d:days], Count([p:people], scheduled(p, d)) == 1) ::: one contestant per day\nNot(scheduled(Nancy, Monday)) ::: Nancy is not scheduled for Monday\nAnd(scheduled(Harry, Monday), scheduled(Nancy, Friday)) ::: If Harry is scheduled for Monday, Nancy is scheduled for Friday\nAnd(scheduled(Nancy, Tuesday), scheduled(Iris, Monday)) ::: If Nancy is scheduled for Tuesday, Iris is scheduled for Monday\nscheduled(Kate, NextDay(scheduled(Victor, _))) ::: Kate is scheduled for the next day after the day for which Victor is scheduled\n\n# Options\nQuestion ::: Victor can be scheduled for any day EXCEPT\nis_exception(is_sat(scheduled(Victor, Monday))) ::: (A)\nis_exception(is_sat(scheduled(Victor, Tuesday))) ::: (B)\nis_exception(is_sat(scheduled(Victor, Wednesday))) ::: (C)\nis_exception(is_sat(scheduled(Victor, Thursday))) ::: (D)\nis_exception(is_sat(scheduled(Victor, Friday))) ::: (E)\n------\nProblem:\nA certain company has five employees—A, B, C, D, and E—who are to be assigned to five different positions—president, vice president, treasurer, secretary, and office manager. The following conditions apply: B is assigned to a position that is ranked higher than the position assigned to C. D is assigned to a position that is ranked higher than the position assigned to E. A is not assigned to the position of treasurer.\nQuestion:\nWhich one of the following could be a complete and accurate list of the positions assigned to A, B, and C?\nChoices:\n(A) president, vice president, secretary\n(B) president, vice president, treasurer\n(C) president, secretary, treasurer\n(D) vice president, secretary, treasurer\n(E) vice president, secretary, office manager\n###\n# Declarations\nemployees = EnumSort([A, B, C, D, E])\npositions = EnumSort([president, vice_president, treasurer, secretary, office_manager"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_2_8",
    "context": "Five people—Harry, Iris, Kate, Nancy, and Victor—are to be scheduled as contestants on a television show, one contestant per day, for five consecutive days from Monday through Friday. The following restrictions governing the scheduling of contestants must be observed: Nancy is not scheduled for Monday. If Harry is scheduled for Monday, Nancy is scheduled for Friday. If Nancy is scheduled for Tuesday, Iris is scheduled for Monday. Kate is scheduled for the next day after the day for which Victor is scheduled.",
    "question": "If Iris is scheduled for the next day after Harry, which one of the following lists all those days any one of which could be the day for which Harry is scheduled?",
    "answer": "E",
    "options": [
      "A) Monday, Tuesday",
      "B) Monday, Wednesday",
      "C) Monday, Thursday",
      "D) Monday, Tuesday, Wednesday",
      "E) Monday, Wednesday, Thursday"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Harry, Iris, Kate, Nancy, Victor])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nscheduled = Function([people, days] -> [bool])\n\n# Constraints\nForAll([p:people], Count([d:days], scheduled(p, d)) == 1) ::: one contestant per day\nNot(scheduled(Nancy, Monday)) ::: Nancy is not scheduled for Monday\nAnd(scheduled(Harry, Monday), scheduled(Nancy, Friday)) ::: If Harry is scheduled for Monday, Nancy is scheduled for Friday\nAnd(scheduled(Nancy, Tuesday), scheduled(Iris, Monday)) ::: If Nancy is scheduled for Tuesday, Iris is scheduled for Monday\nAnd(scheduled(Kate, d), scheduled(Victor, d - 1)) ::: Kate is scheduled for the next day after the day for which Victor is scheduled\n\n# Options\nQuestion ::: If Iris is scheduled for the next day after Harry, which one of the following lists all those days any one of which could be the day for which Harry is scheduled?\nis_sat(ForAll([d:days], scheduled(Harry, d) == scheduled(Iris, d + 1))) ::: Iris is scheduled for the next day after Harry\nis_sat(ForAll([d:days], scheduled(Harry, d) == scheduled(Iris, d + 1))) ::: Iris is scheduled for the next day after Harry\nis_sat(ForAll([d:days], scheduled(Harry, d) == scheduled(Iris, d + 1))) ::: Iris is scheduled for the next day after Harry\nis_sat(ForAll([d:days], scheduled(Harry, d) == scheduled(Iris, d + 1))) ::: Iris is scheduled for the next day after Harry\nis_sat(ForAll([d:days], scheduled(Harry, d) == scheduled(Iris, d + 1))) ::: Iris is scheduled for the next day after Harry\nis_sat(ForAll([d:days], scheduled(Harry, d) == scheduled(Iris, d + 1))) ::: Iris is scheduled for the next day after Harry\nis_sat(ForAll([d:days], scheduled(Harry, d) == scheduled(Iris, d + 1))) ::: Iris is scheduled for the next day after Harry\nis_sat(ForAll([d:days], scheduled(Harry, d) == scheduled(Iris, d + 1))) ::: Iris is scheduled for the next day after Harry\nis_sat(ForAll([d:days], scheduled(Harry, d) == scheduled(Iris, d"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_2_9",
    "context": "Five people—Harry, Iris, Kate, Nancy, and Victor—are to be scheduled as contestants on a television show, one contestant per day, for five consecutive days from Monday through Friday. The following restrictions governing the scheduling of contestants must be observed: Nancy is not scheduled for Monday. If Harry is scheduled for Monday, Nancy is scheduled for Friday. If Nancy is scheduled for Tuesday, Iris is scheduled for Monday. Kate is scheduled for the next day after the day for which Victor is scheduled.",
    "question": "If Kate is scheduled for Wednesday, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Iris is scheduled for Friday.",
      "B) Nancy is scheduled for Tuesday.",
      "C) Nancy is scheduled for an earlier day than the day for which Harry is scheduled.",
      "D) Nancy is scheduled for an earlier day than the day for which Iris is scheduled.",
      "E) Nancy is scheduled for an earlier day than the day for which Kate is scheduled."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Harry, Iris, Kate, Nancy, Victor])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nscheduled = Function([people, days] -> [bool])\n\n# Constraints\nForAll([p:people], Count([d:days], scheduled(p, d)) == 1) ::: one contestant per day\nForAll([d:days], Count([p:people], scheduled(p, d)) == 1) ::: one contestant per day\nNot(scheduled(Nancy, Monday)) ::: Nancy is not scheduled for Monday\nAnd(scheduled(Harry, Monday), scheduled(Nancy, Friday)) ::: If Harry is scheduled for Monday, Nancy is scheduled for Friday\nAnd(scheduled(Nancy, Tuesday), scheduled(Iris, Monday)) ::: If Nancy is scheduled for Tuesday, Iris is scheduled for Monday\nscheduled(Kate, Wednesday) ::: Kate is scheduled for Wednesday\n\n# Options\nQuestion ::: If Kate is scheduled for Wednesday, which one of the following could be true?\nis_valid(ForAll([p:people], scheduled(Iris, Friday) == scheduled(p, Friday))) ::: (A)\nis_valid(ForAll([p:people], scheduled(Nancy, Tuesday) == scheduled(p, Tuesday))) ::: (B)\nis_valid(ForAll([p:people], scheduled(Nancy, Monday) == scheduled(p, Monday))) ::: (C)\nis_valid(ForAll([p:people], scheduled(Nancy, Monday) == scheduled(Iris, Monday))) ::: (D)\nis_valid(ForAll([p:people], scheduled(Nancy, Monday) == scheduled(Kate, Monday))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_2_10",
    "context": "Five people—Harry, Iris, Kate, Nancy, and Victor—are to be scheduled as contestants on a television show, one contestant per day, for five consecutive days from Monday through Friday. The following restrictions governing the scheduling of contestants must be observed: Nancy is not scheduled for Monday. If Harry is scheduled for Monday, Nancy is scheduled for Friday. If Nancy is scheduled for Tuesday, Iris is scheduled for Monday. Kate is scheduled for the next day after the day for which Victor is scheduled.",
    "question": "If Kate is scheduled for Friday, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Harry is scheduled for Tuesday.",
      "B) Harry is scheduled for Wednesday.",
      "C) Iris is scheduled for Monday.",
      "D) Iris is scheduled for Wednesday.",
      "E) Nancy is scheduled for Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Harry, Iris, Kate, Nancy, Victor])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nscheduled = Function([people, days] -> [bool])\n\n# Constraints\nForAll([p:people], Count([d:days], scheduled(p, d)) == 1) ::: one contestant per day\nForAll([d:days], Count([p:people], scheduled(p, d)) == 1) ::: one contestant per day\nNot(scheduled(Nancy, Monday)) ::: Nancy is not scheduled for Monday\nAnd(scheduled(Harry, Monday), scheduled(Nancy, Friday)) ::: If Harry is scheduled for Monday, Nancy is scheduled for Friday\nAnd(scheduled(Nancy, Tuesday), scheduled(Iris, Monday)) ::: If Nancy is scheduled for Tuesday, Iris is scheduled for Monday\nscheduled(Kate, Friday) ::: Kate is scheduled for Friday\n\n# Options\nQuestion ::: If Kate is scheduled for Friday, which one of the following must be true?\nis_sat(ForAll([d:days], scheduled(Harry, d) == scheduled(Tuesday, d))) ::: (A)\nis_sat(ForAll([d:days], scheduled(Harry, d) == scheduled(Wednesday, d))) ::: (B)\nis_sat(ForAll([d:days], scheduled(Iris, d) == scheduled(Monday, d))) ::: (C)\nis_sat(ForAll([d:days], scheduled(Iris, d) == scheduled(Wednesday, d))) ::: (D)\nis_sat(ForAll([d:days], scheduled(Nancy, d) == scheduled(Wednesday, d))) :"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_2_11",
    "context": "Five people—Harry, Iris, Kate, Nancy, and Victor—are to be scheduled as contestants on a television show, one contestant per day, for five consecutive days from Monday through Friday. The following restrictions governing the scheduling of contestants must be observed: Nancy is not scheduled for Monday. If Harry is scheduled for Monday, Nancy is scheduled for Friday. If Nancy is scheduled for Tuesday, Iris is scheduled for Monday. Kate is scheduled for the next day after the day for which Victor is scheduled.",
    "question": "If Iris is scheduled for Wednesday, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Harry is scheduled for an earlier day than the day for which Nancy is scheduled.",
      "B) Harry is scheduled for an earlier day than the day for which Kate is scheduled.",
      "C) Kate is scheduled for an earlier day than the day for which Harry is scheduled.",
      "D) Nancy is scheduled for an earlier day than the day for which Kate is scheduled.",
      "E) Nancy is scheduled for an earlier day than the day for which Iris is scheduled."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Harry, Iris, Kate, Nancy, Victor])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nscheduled = Function([people, days] -> [bool])\n\n# Constraints\nForAll([p:people], Count([d:days], scheduled(p, d)) == 1) ::: one contestant per day\nNot(scheduled(Nancy, Monday)) ::: Nancy is not scheduled for Monday\nAnd(scheduled(Harry, Monday), scheduled(Nancy, Friday)) ::: If Harry is scheduled for Monday, Nancy is scheduled for Friday\nAnd(scheduled(Nancy, Tuesday), scheduled(Iris, Monday)) ::: If Nancy is scheduled for Tuesday, Iris is scheduled for Monday\nAnd(scheduled(Kate, d), scheduled(Victor, d - 1)) ::: Kate is scheduled for the next day after the day for which Victor is scheduled\n\n# Options\nQuestion ::: If Iris is scheduled for Wednesday, which one of the following must be true?\nis_valid(ForAll([d:days], scheduled(Harry, d) < scheduled(Nancy, d))) ::: (A)\nis_valid(ForAll([d:days], scheduled(Harry, d) < scheduled(Kate, d))) ::: (B)\nis_valid(ForAll([d:days], scheduled(Kate, d) < scheduled(Harry, d))) ::: (C)\nis_valid(ForAll([d:days], scheduled(Nancy, d) < scheduled(Kate, d))) ::: (D)\nis_valid(ForAll([d:days], scheduled(Nancy, d) < scheduled(Iris, d))) ::: (E)\n------\nProblem:\nA certain company has five employees—A"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_3_12",
    "context": "An art teacher will schedule exactly six of eight lectures—fresco, history, lithography, naturalism, oils, pastels, sculpture, and watercolors—for three days—1, 2, and 3. There will be exactly two lectures each day—morning and afternoon. Scheduling is governed by the following conditions: Day 2 is the only day for which oils can be scheduled. Neither sculpture nor watercolors can be scheduled for the afternoon. Neither oils nor pastels can be scheduled for the same day as lithography. If pastels is scheduled for day 1 or day 2, then the lectures scheduled for the day immediately following pastels must be fresco and history, not necessarily in that order.",
    "question": "Which one of the following is an acceptable schedule of lectures for days 1, 2, and 3, respectively?",
    "answer": "B",
    "options": [
      "A) Morning: lithography, history, sculpture Afternoon: pastels, fresco, naturalism",
      "B) Morning: naturalism, oils, fresco Afternoon: lithography, pastels, history",
      "C) Morning: oils, history, naturalism Afternoon: pastels, fresco, lithography",
      "D) Morning: sculpture, lithography, naturalism Afternoon: watercolors, fresco, pastels",
      "E) Morning: sculpture, pastels, fresco Afternoon: lithography, history, naturalism"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([1, 2, 3])\nlectures = EnumSort([fresco, history, lithography, naturalism, oils, pastels, sculpture, watercolors])\nscheduled = Function([days, lectures] -> [bool])\n\n# Constraints\nForAll([d:days], Count([l:lectures], scheduled(d, l)) == 2) ::: exactly two lectures each day\nAnd(scheduled(2, oils), Not(scheduled(1, oils))) ::: Day 2 is the only day for which oils can be scheduled\nAnd(Not(scheduled(1, sculpture)), Not(scheduled(1, watercolors))) ::: Neither sculpture nor watercolors can be scheduled for the afternoon\nAnd(Not(scheduled(1, oils)), Not(scheduled(1, pastels))) ::: Neither oils nor pastels can be scheduled for the same day as lithography\nAnd(scheduled(1, pastels), scheduled(2, fresco), scheduled(2, history)) ::: If pastels is scheduled for day 1 or day 2, then the lectures scheduled for the day immediately following pastels must be fresco and history, not necessarily in that order\n\n# Options\nQuestion ::: Which one of the following is an acceptable schedule of lectures for days 1, 2, and 3, respectively?\nis_sat(And(scheduled(1, lithography), scheduled(1, history), scheduled(1, sculpture), scheduled(2, oils), scheduled(2, pastels), scheduled(2, fresco), scheduled(3, naturalism), scheduled(3, watercolors))) ::: A) Morning: lithography, history, sculpture Afternoon: pastels, fresco, naturalism\nis_sat(And(scheduled(1, natural"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_3_13",
    "context": "An art teacher will schedule exactly six of eight lectures—fresco, history, lithography, naturalism, oils, pastels, sculpture, and watercolors—for three days—1, 2, and 3. There will be exactly two lectures each day—morning and afternoon. Scheduling is governed by the following conditions: Day 2 is the only day for which oils can be scheduled. Neither sculpture nor watercolors can be scheduled for the afternoon. Neither oils nor pastels can be scheduled for the same day as lithography. If pastels is scheduled for day 1 or day 2, then the lectures scheduled for the day immediately following pastels must be fresco and history, not necessarily in that order.",
    "question": "If lithography and fresco are scheduled for the afternoons of day 2 and day 3, respectively, which one of the following is a lecture that could be scheduled for the afternoon of day 1?",
    "answer": "A",
    "options": [
      "A) history",
      "B) oils",
      "C) pastels",
      "D) sculpture",
      "E) watercolors"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([1, 2, 3])\nlectures = EnumSort([fresco, history, lithography, naturalism, oils, pastels, sculpture, watercolors])\nscheduled = Function([days, lectures] -> [bool])\n\n# Constraints\nForAll([d:days], Count([l:lectures], scheduled(d, l)) == 2) ::: There will be exactly two lectures each day\nAnd(scheduled(2, oils), Not(scheduled(1, oils))) ::: Day 2 is the only day for which oils can be scheduled\nAnd(Not(scheduled(1, sculpture)), Not(scheduled(2, sculpture)), Not(scheduled(3, sculpture))) ::: Neither sculpture nor watercolors can be scheduled for the afternoon\nAnd(Not(scheduled(1, oils)), Not(scheduled(2, oils)), Not(scheduled(3, oils))) ::: Neither oils nor pastels can be scheduled for the same day as lithography\nAnd(scheduled(1, pastels), scheduled(2, fresco), scheduled(2, history)) ::: If pastels is scheduled for day 1 or day 2, then the lectures scheduled for the day immediately following pastels must be fresco and history, not necessarily in that order\nAnd(scheduled(2, lithography), scheduled(3, fresco)) ::: lithography and fresco are scheduled for the afternoons of day 2 and day 3, respectively\n\n# Options\nQuestion ::: If lithography and fresco are scheduled for the afternoons of day 2 and day 3, respectively, which one of the following is a lecture that could be scheduled for the afternoon of day 1?\nis_valid(Exists([l:lectures], scheduled(1, l"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_3_14",
    "context": "An art teacher will schedule exactly six of eight lectures—fresco, history, lithography, naturalism, oils, pastels, sculpture, and watercolors—for three days—1, 2, and 3. There will be exactly two lectures each day—morning and afternoon. Scheduling is governed by the following conditions: Day 2 is the only day for which oils can be scheduled. Neither sculpture nor watercolors can be scheduled for the afternoon. Neither oils nor pastels can be scheduled for the same day as lithography. If pastels is scheduled for day 1 or day 2, then the lectures scheduled for the day immediately following pastels must be fresco and history, not necessarily in that order.",
    "question": "If lithography and history are scheduled for the mornings of day 2 and day 3, respectively, which one of the following lectures could be scheduled for the morning of day 1?",
    "answer": "E",
    "options": [
      "A) fresco",
      "B) naturalism",
      "C) oils",
      "D) pastels",
      "E) sculpture"
    ],
    "raw_logic_programs": [
      "# Declarations\nlectures = EnumSort([fresco, history, lithography, naturalism, oils, pastels, sculpture, watercolors])\ndays = EnumSort([1, 2, 3])\nmornings = EnumSort([1, 2, 3])\nafternoons = EnumSort([1, 2, 3])\nscheduled = Function([lectures, days] -> [bool])\n\n# Constraints\nForAll([d:days], Count([l:lectures], scheduled(l, d)) == 2) ::: There will be exactly two lectures each day\nForAll([l:lectures], Count([d:days], scheduled(l, d)) == 1) ::: An art teacher will schedule exactly six of eight lectures\nscheduled(oils, 2) ::: Day 2 is the only day for which oils can be scheduled\nForAll([l:lectures], Implies(scheduled(l, 1), l!= sculpture)) ::: Neither sculpture nor watercolors can be scheduled for the afternoon\nForAll([l:lectures], Implies(scheduled(l, 1), l!= watercolors)) ::: Neither sculpture nor watercolors can be scheduled for the afternoon\nForAll([l:lectures], Implies(scheduled(l, 2), l!= sculpture)) ::: Neither sculpture nor watercolors can be scheduled for the afternoon\nForAll([l:lectures], Implies(scheduled(l, 2), l!= watercolors)) ::: Neither sculpture nor watercolors can be scheduled for the afternoon\nForAll([l:lectures], Implies(scheduled(l, 3), l!= sculpture)) ::: Neither sculpture nor watercolors can be scheduled for the afternoon\nForAll([l:lectures], Implies(scheduled(l, 3"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_3_15",
    "context": "An art teacher will schedule exactly six of eight lectures—fresco, history, lithography, naturalism, oils, pastels, sculpture, and watercolors—for three days—1, 2, and 3. There will be exactly two lectures each day—morning and afternoon. Scheduling is governed by the following conditions: Day 2 is the only day for which oils can be scheduled. Neither sculpture nor watercolors can be scheduled for the afternoon. Neither oils nor pastels can be scheduled for the same day as lithography. If pastels is scheduled for day 1 or day 2, then the lectures scheduled for the day immediately following pastels must be fresco and history, not necessarily in that order.",
    "question": "If oils and lithography are scheduled for the mornings of day 2 and day 3, respectively, which one of the following CANNOT be scheduled for any day?",
    "answer": "D",
    "options": [
      "A) fresco",
      "B) history",
      "C) naturalism",
      "D) pastels",
      "E) sculpture"
    ],
    "raw_logic_programs": [
      "# Declarations\nlectures = EnumSort([fresco, history, lithography, naturalism, oils, pastels, sculpture, watercolors])\ndays = EnumSort([1, 2, 3])\nmorning = Function([days] -> [lectures])\nafternoon = Function([days] -> [lectures])\n\n# Constraints\nForAll([d:days], And(Count([l:lectures], morning(d) == l) == 1, Count([l:lectures], afternoon(d) == l) == 1)) ::: There will be exactly two lectures each day—morning and afternoon\nAnd(morning(2) == oils, afternoon(2)!= oils) ::: Day 2 is the only day for which oils can be scheduled\nAnd(morning(1)!= sculpture, afternoon(1)!= sculpture) ::: Neither sculpture nor watercolors can be scheduled for the afternoon\nAnd(morning(1)!= pastels, afternoon(1)!= pastels) ::: Neither oils nor pastels can be scheduled for the same day as lithography\nAnd(morning(1) == pastels, morning(2) == fresco, morning(2) == history) ::: If pastels is scheduled for day 1 or day 2, then the lectures scheduled for the day immediately following pastels must be fresco and history, not necessarily in that order\nAnd(morning(2) == lithography, afternoon(2)!= lithography) ::: oils and lithography are scheduled for the mornings of day 2 and day 3, respectively\n\n# Options\nQuestion ::: If oils and lithography are scheduled for the mornings of day 2 and day 3, respectively, which one of the following CANNOT be scheduled for any day?\nis_exception(is_sat"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_3_16",
    "context": "An art teacher will schedule exactly six of eight lectures—fresco, history, lithography, naturalism, oils, pastels, sculpture, and watercolors—for three days—1, 2, and 3. There will be exactly two lectures each day—morning and afternoon. Scheduling is governed by the following conditions: Day 2 is the only day for which oils can be scheduled. Neither sculpture nor watercolors can be scheduled for the afternoon. Neither oils nor pastels can be scheduled for the same day as lithography. If pastels is scheduled for day 1 or day 2, then the lectures scheduled for the day immediately following pastels must be fresco and history, not necessarily in that order.",
    "question": "If neither fresco nor naturalism is scheduled for any day, which one of the following must be scheduled for day 1?",
    "answer": "B",
    "options": [
      "A) history",
      "B) lithography",
      "C) oils",
      "D) pastels",
      "E) sculpture"
    ],
    "raw_logic_programs": [
      "# Declarations\nlectures = EnumSort([fresco, history, lithography, naturalism, oils, pastels, sculpture, watercolors])\ndays = EnumSort([1, 2, 3])\nmorning = EnumSort([1, 2])\nafternoon = EnumSort([3, 4])\nscheduled = Function([lectures, days, morning, afternoon] -> [bool])\n\n# Constraints\nForAll([d:days], Count([l:lectures], scheduled(l, d, morning)) == 1) ::: exactly two lectures each day\nForAll([d:days], Count([l:lectures], scheduled(l, d, afternoon)) == 1) ::: exactly two lectures each day\nForAll([l:lectures], Count([d:days], scheduled(l, d, morning)) + Count([d:days], scheduled(l, d, afternoon)) == 1) ::: each lecture is scheduled exactly once\nscheduled(oils, 2, morning) ::: Day 2 is the only day for which oils can be scheduled\nForAll([d:days], Implies(scheduled(sculpture, d, morning), scheduled(watercolors, d, afternoon))) ::: Neither sculpture nor watercolors can be scheduled for the afternoon\nForAll([d:days], Implies(scheduled(oils, d, morning), Not(scheduled(pastels, d, afternoon)))) ::: Neither oils nor pastels can be scheduled for the same day as lithography\nForAll([d:days], Implies(scheduled(pastels, d, morning), scheduled(fresco, d, afternoon))) ::: If pastels is scheduled for day 1 or day 2, then the lectures scheduled for the day immediately following pastels must be fresco and history, not necessarily in that order\nForAll(["
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_3_17",
    "context": "An art teacher will schedule exactly six of eight lectures—fresco, history, lithography, naturalism, oils, pastels, sculpture, and watercolors—for three days—1, 2, and 3. There will be exactly two lectures each day—morning and afternoon. Scheduling is governed by the following conditions: Day 2 is the only day for which oils can be scheduled. Neither sculpture nor watercolors can be scheduled for the afternoon. Neither oils nor pastels can be scheduled for the same day as lithography. If pastels is scheduled for day 1 or day 2, then the lectures scheduled for the day immediately following pastels must be fresco and history, not necessarily in that order.",
    "question": "If the lectures scheduled for the mornings are fresco, history, and lithography, not necessarily in that order, which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Lithography is scheduled for day 3.",
      "B) Naturalism is scheduled for day 2.",
      "C) Fresco is scheduled for the same day as naturalism.",
      "D) History is scheduled for the same day as naturalism.",
      "E) History is scheduled for the same day as oils."
    ],
    "raw_logic_programs": [
      "# Declares\ndays = EnumSort([1, 2, 3])\nlectures = EnumSort([fresco, history, lithography, naturalism, oils, pastels, sculpture, watercolors])\nscheduled = Function([days, lectures] -> [bool])\n\n# Constraints\nForAll([d:days], Count([l:lectures], scheduled(d, l)) == 2) ::: There will be exactly two lectures each day\nAnd(scheduled(2, oils), Not(scheduled(1, oils))) ::: Day 2 is the only day for which oils can be scheduled\nAnd(scheduled(1, sculpture), scheduled(1, watercolors)) ::: Neither sculpture nor watercolors can be scheduled for the afternoon\nAnd(scheduled(1, lithography), Not(scheduled(1, oils))) ::: Neither oils nor pastels can be scheduled for the same day as lithography\nAnd(scheduled(1, pastels), scheduled(2, fresco)) ::: If pastels is scheduled for day 1 or day 2, then the lectures scheduled for the day immediately following pastels must be fresco and history, not necessarily in that order\nAnd(scheduled(1, pastels), scheduled(2, history)) ::: If pastels is scheduled for day 1 or day 2, then the lectures scheduled for the day immediately following pastels must be fresco and history, not necessarily in that order\n\n# Options\nQuestion ::: If the lectures scheduled for the mornings are fresco, history, and lithography, not necessarily in that order, which one of the following could be true?\nis_valid(scheduled(3, lithography)) ::: A) Lithography is scheduled for day 3.\nis_valid(scheduled(2, naturalism)) ::: B) Naturalism is"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_4_18",
    "context": "The population of a small country is organized into five clans—N, O, P, S, and T. Each year exactly three of the five clans participate in the annual harvest ceremonies. The rules specifying the order of participation of the clans in the ceremonies are as follows: Each clan must participate at least once in any two consecutive years. No clan participates for three consecutive years. Participation takes place in cycles, with each cycle ending when each of the five clans has participated three times. Only then does a new cycle begin. No clan participates more than three times within any cycle.",
    "question": "If the clans participating in the first year of a given cycle are N, O, and P, which one of the following could be the clans participating in the second year of that cycle?",
    "answer": "E",
    "options": [
      "A) N, O, S",
      "B) N, O, T",
      "C) N, P, S",
      "D) O, P, T",
      "E) O, S, T"
    ],
    "raw_logic_programs": [
      "# Declarations\nclans = EnumSort([N, O, P, S, T])\nyears = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nparticipates = Function([clans, years] -> [bool])\n\n# Constraints\nForAll([c:clans], Count([y:years], participates(c, y)) >= 2) ::: Each clan must participate at least once in any two consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) <= 3) ::: No clan participates for three consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) <= 3) ::: No clan participates more than three times within any cycle\n\n# Options\nQuestion ::: If the clans participating in the first year of a given cycle are N, O, and P, which one of the following could be the clans participating in the second year of that cycle?\nis_exception(is_sat(participates(N, 2) && participates(O, 2) && participates(S, 2))) ::: A) N, O, S\nis_exception(is_sat(participates(N, 2) && participates(O, 2) && participates(T, 2))) ::: B) N, O, T\nis_exception(is_sat(participates(N, 2) && participates(P, 2) && participates(S, 2))) ::: C) N, P, S\nis_exception(is_sat(participates(O, 2) && participates(P, 2) && participates(T,"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_4_19",
    "context": "The population of a small country is organized into five clans—N, O, P, S, and T. Each year exactly three of the five clans participate in the annual harvest ceremonies. The rules specifying the order of participation of the clans in the ceremonies are as follows: Each clan must participate at least once in any two consecutive years. No clan participates for three consecutive years. Participation takes place in cycles, with each cycle ending when each of the five clans has participated three times. Only then does a new cycle begin. No clan participates more than three times within any cycle.",
    "question": "Which one of the following can be true about the clans' participation in the ceremonies?",
    "answer": "C",
    "options": [
      "A) N participates in the first, second, and third years.",
      "B) N participates in the second, third, and fourth years.",
      "C) Both O and S participate in the first and third years.",
      "D) Both N and S participate in the first, third, and fifth years.",
      "E) Both S and T participate in the second, third, and fifth years."
    ],
    "raw_logic_programs": [
      "# Declarations\nclans = EnumSort([N, O, P, S, T])\nyears = EnumSort([1, 2, 3, 4, 5])\nparticipates = Function([clans, years] -> [bool])\n\n# Constraints\nForAll([c:clans], Count([y:years], participates(c, y)) >= 3) ::: Each clan must participate at least once in any two consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) <= 3) ::: No clan participates for three consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) == 3) ::: Participation takes place in cycles, with each cycle ending when each of the five clans has participated three times\n\n# Options\nQuestion ::: Which one of the following can be true about the clans' participation in the ceremonies?\nis_valid(ForAll([y:years], participates(N, y))) ::: (A)\nis_valid(ForAll([y:years], participates(N, y))) ::: (B)\nis_valid(ForAll([y:years], participates(O, y))) ::: (C)\nis_valid(ForAll([y:years], participates(N, y))) ::: (D)\nis_valid(ForAll([y:years], participates(S, y))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_4_20",
    "context": "The population of a small country is organized into five clans—N, O, P, S, and T. Each year exactly three of the five clans participate in the annual harvest ceremonies. The rules specifying the order of participation of the clans in the ceremonies are as follows: Each clan must participate at least once in any two consecutive years. No clan participates for three consecutive years. Participation takes place in cycles, with each cycle ending when each of the five clans has participated three times. Only then does a new cycle begin. No clan participates more than three times within any cycle.",
    "question": "Any cycle for the clans' participation in the ceremonies must be completed at the end of exactly how many years?",
    "answer": "A",
    "options": [
      "A) five",
      "B) six",
      "C) seven",
      "D) eight",
      "E) nine"
    ],
    "raw_logic_programs": [
      "# Declarations\nclans = EnumSort([N, O, P, S, T])\nyears = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9])\nparticipates = Function([clans, years] -> [bool])\n\n# Constraints\nForAll([c:clans], Count([y:years], participates(c, y)) >= 3) ::: Each clan must participate at least once in any two consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) <= 3) ::: No clan participates for three consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) == 3) ::: Participation takes place in cycles, with each cycle ending when each of the five clans has participated three times\n\n# Options\nQuestion ::: Any cycle for the clans' participation in the ceremonies must be completed at the end of exactly how many years?\nis_sat(ForAll([c:clans], Count([y:years], participates(c, y)) == 3)) ::: A) five\nis_sat(ForAll([c:clans], Count([y:years], participates(c, y)) == 4)) ::: B) six\nis_sat(ForAll([c:clans], Count([y:years], participates(c, y)) == 5)) ::: C)"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_4_21",
    "context": "The population of a small country is organized into five clans—N, O, P, S, and T. Each year exactly three of the five clans participate in the annual harvest ceremonies. The rules specifying the order of participation of the clans in the ceremonies are as follows: Each clan must participate at least once in any two consecutive years. No clan participates for three consecutive years. Participation takes place in cycles, with each cycle ending when each of the five clans has participated three times. Only then does a new cycle begin. No clan participates more than three times within any cycle.",
    "question": "Which one of the following must be true about the three clans that participate in the ceremonies in the first year?",
    "answer": "A",
    "options": [
      "A) At most two of them participate together in the third year.",
      "B) At least two of them participate together in the second year.",
      "C) All three of them participate together in the fourth year.",
      "D) All three of them participate together in the fifth year.",
      "E) None of them participates in the third year."
    ],
    "raw_logic_programs": [
      "# Declarations\nclans = EnumSort([N, O, P, S, T])\nyears = EnumSort([1, 2, 3, 4, 5])\nparticipates = Function([clans, years] -> [bool])\n\n# Constraints\nForAll([c:clans], Count([y:years], participates(c, y)) >= 3) ::: Each clan must participate at least once in any two consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) <= 3) ::: No clan participates for three consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) == 3) ::: Participation takes place in cycles, with each cycle ending when each of the five clans has participated three times\nForAll([c:clans], Count([y:years], participates(c, y)) == 3) ::: No clan participates more than three times within any cycle\n\n# Options\nQuestion ::: Which one of the following must be true about the three clans that participate in the ceremonies in the first year?\nis_valid(Exists([c1, c2, c3:clans], And(participates(c1, 1), participates(c2, 1), participates(c3, 1), Count([c:clans], And(c!= c1, c!= c2, c!= c3, participates(c, 3"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_4_22",
    "context": "The population of a small country is organized into five clans—N, O, P, S, and T. Each year exactly three of the five clans participate in the annual harvest ceremonies. The rules specifying the order of participation of the clans in the ceremonies are as follows: Each clan must participate at least once in any two consecutive years. No clan participates for three consecutive years. Participation takes place in cycles, with each cycle ending when each of the five clans has participated three times. Only then does a new cycle begin. No clan participates more than three times within any cycle.",
    "question": "If, in a particular cycle, N, O, and S participate in the ceremonies in the first year, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) N participates in the second and third years.",
      "B) O participates in the third and fourth years.",
      "C) N and O both participate in the third year.",
      "D) P and T both participate in the fifth year.",
      "E) S and T both participate in the fifth year."
    ],
    "raw_logic_programs": [
      "# Declarations\nclans = EnumSort([N, O, P, S, T])\nyears = EnumSort([1, 2, 3, 4, 5])\nparticipates = Function([clans, years] -> [bool])\n\n# Constraints\nForAll([c:clans], Count([y:years], participates(c, y)) >= 3) ::: Each clan must participate at least once in any two consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) <= 3) ::: No clan participates for three consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) == 3) ::: Participation takes place in cycles, with each cycle ending when each of the five clans has participated three times\n\n# Options\nQuestion ::: If, in a particular cycle, N, O, and S participate in the ceremonies in the first year, which one of the following must be true?\nis_valid(ForAll([y:years], participates(N, y) == participates(N, y - 1))) ::: (A)\nis_valid(ForAll([y:years], participates(O, y) == participates(O, y - 1))) ::: (B)\nis_valid(ForAll([y:years], participates(N, y) == participates(O, y))) ::: (C)\nis_valid(ForAll(["
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_4_23",
    "context": "The population of a small country is organized into five clans—N, O, P, S, and T. Each year exactly three of the five clans participate in the annual harvest ceremonies. The rules specifying the order of participation of the clans in the ceremonies are as follows: Each clan must participate at least once in any two consecutive years. No clan participates for three consecutive years. Participation takes place in cycles, with each cycle ending when each of the five clans has participated three times. Only then does a new cycle begin. No clan participates more than three times within any cycle.",
    "question": "If, in a particular cycle, N, O, and T participate in the first year and if O and P participate in the fourth year, any of the following could be a clan that participates in the third year EXCEPT",
    "answer": "C",
    "options": [
      "A) N",
      "B) O",
      "C) P",
      "D) S",
      "E) T"
    ],
    "raw_logic_programs": [
      "# Declarations\nclans = EnumSort([N, O, P, S, T])\nyears = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nparticipates = Function([clans, years] -> [bool])\n\n# Constraints\nForAll([c:clans], Count([y:years], participates(c, y)) >= 3) ::: Each clan must participate at least once in any two consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) <= 3) ::: No clan participates for three consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) <= 3) ::: No clan participates more than three times within any cycle\n\n# Options\nQuestion ::: If, in a particular cycle, N, O, and T participate in the first year and if O and P participate in the fourth year, any of the following could be a clan that participates in the third year EXCEPT\nis_exception(is_sat(participates(N, 3))) ::: (A)\nis_exception(is_sat(participates(O, 3))) ::: (B)\nis_exception(is_sat(participates(P, 3))) ::: (C)\nis_exception(is_sat(participates(S, 3))) :"
    ]
  },
  {
    "id": "ar_lsat_199412_1-G_4_24",
    "context": "The population of a small country is organized into five clans—N, O, P, S, and T. Each year exactly three of the five clans participate in the annual harvest ceremonies. The rules specifying the order of participation of the clans in the ceremonies are as follows: Each clan must participate at least once in any two consecutive years. No clan participates for three consecutive years. Participation takes place in cycles, with each cycle ending when each of the five clans has participated three times. Only then does a new cycle begin. No clan participates more than three times within any cycle.",
    "question": "If, in a particular cycle, N, O, and S participate in the ceremonies in the first year and O, S, and T participate in the third year, then which one of the following could be the clans that participate in the fifth year?",
    "answer": "E",
    "options": [
      "A) N, O, P",
      "B) N, O, S",
      "C) N, P, S",
      "D) O, P, S",
      "E) P, S, T"
    ],
    "raw_logic_programs": [
      "# Declarations\nclans = EnumSort([N, O, P, S, T])\nyears = EnumSort([1, 2, 3, 4, 5])\nparticipates = Function([clans, years] -> [bool])\n\n# Constraints\nForAll([c:clans], Count([y:years], participates(c, y)) >= 3) ::: Each clan must participate at least once in any two consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) <= 3) ::: No clan participates for three consecutive years\nForAll([c:clans], Count([y:years], participates(c, y)) <= 3) ::: No clan participates more than three times within any cycle\n\n# Options\nQuestion ::: If, in a particular cycle, N, O, and S participate in the ceremonies in the first year and O, S, and T participate in the third year, then which one of the following could be the clans that participate in the fifth year?\nis_valid(Exists([c:clans], participates(c, 5))) ::: A) N, O, P\nis_valid(Exists([c:clans], participates(c, 5))) ::: B) N, O, S\nis_valid(Exists([c:clans], participates(c, 5))) ::: C) N, P, S\nis_valid(Exists([c:clans], participates"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_1_1",
    "context": "A newly formed company has five employees—F, G, H, K, and L. Each employee holds exactly one of the following positions: president, manager, or technician. Only the president is not supervised. Other employees are each supervised by exactly one employee, who is either the president or a manager. Each supervised employee holds a different position than his or her supervisor. The following conditions apply: There is exactly one president. At least one of the employees whom the president supervises is a manager. Each manager supervises at least one employee. F does not supervise any employee. G supervises exactly two employees.",
    "question": "Which one of the following is an acceptable assignment of employees to the positions? President Manager Technician",
    "answer": "B",
    "options": [
      "A) G H, K, L F",
      "B) G H F, K, L",
      "C) H F, G K, L",
      "D) H, K G F, L",
      "E) K F, G, H, L"
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L])\npositions = EnumSort([president, manager, technician])\nsupervises = Function([employees, employees] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([p:positions], e == p) == 1) ::: Each employee holds exactly one of the following positions\nAnd(e == president, ForAll([e:employees], Not(supervises(e, president)))) ::: Only the president is not supervised\nForAll([e:employees], Implies(Not(e == president), And(supervises(e, president), supervises(e, manager)))) ::: Other employees are each supervised by exactly one employee, who is either the president or a manager\nForAll([e:employees], Implies(supervises(e, president), Not(e == president))) ::: Each supervised employee holds a different position than his or her supervisor\nCount([e:employees], e == president) == 1 ::: There is exactly one president\nAnd(supervises(president, e), supervises(president, e)) ::: At least one of the employees whom the president supervises is a manager\nForAll([e:employees], Implies(e == manager, Count([e:employees], supervises(e, manager)) > 0)) ::: Each manager supervises at least one employee\nNot(supervises(F, e))"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_1_2",
    "context": "A newly formed company has five employees—F, G, H, K, and L. Each employee holds exactly one of the following positions: president, manager, or technician. Only the president is not supervised. Other employees are each supervised by exactly one employee, who is either the president or a manager. Each supervised employee holds a different position than his or her supervisor. The following conditions apply: There is exactly one president. At least one of the employees whom the president supervises is a manager. Each manager supervises at least one employee. F does not supervise any employee. G supervises exactly two employees.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) There are at most three technicians.",
      "B) There is exactly one technician.",
      "C) There are at least two managers.",
      "D) There are exactly two managers.",
      "E) There are exactly two employees who supervise no one."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L])\npositions = EnumSort([president, manager, technician])\nsupervises = Function([employees, employees] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([p:positions], supervises(e, p)) == 1) ::: Each employee holds exactly one of the following positions\nForAll([e:employees], Count([p:positions], supervises(p, e)) == 1) ::: Only the president is not supervised\nForAll([e:employees], Implies(supervises(e, p), Or(p == president, p == manager))) ::: Other employees are each supervised by exactly one employee, who is either the president or a manager\nForAll([e:employees], Implies(supervises(e, p), Not(e == p))) ::: Each supervised employee holds a different position than his or her supervisor\nCount([p:positions], supervises(president, p)) == 1 ::: There is exactly one president\nCount([e:employees], supervises(president, e)) >= 1 ::: At least one of the employees whom the president supervises is a manager\nForAll([m:managers], Count([e:employees], supervises(m, e)) >= 1) ::: Each manager supervises at least one employee\nsupervises(F, _) == false ::: F does"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_1_3",
    "context": "A newly formed company has five employees—F, G, H, K, and L. Each employee holds exactly one of the following positions: president, manager, or technician. Only the president is not supervised. Other employees are each supervised by exactly one employee, who is either the president or a manager. Each supervised employee holds a different position than his or her supervisor. The following conditions apply: There is exactly one president. At least one of the employees whom the president supervises is a manager. Each manager supervises at least one employee. F does not supervise any employee. G supervises exactly two employees.",
    "question": "Which one of the following is a pair of employees who could serve as managers together?",
    "answer": "E",
    "options": [
      "A) F, H",
      "B) F, L",
      "C) G, K",
      "D) G, L",
      "E) K, L"
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L])\npositions = EnumSort([president, manager, technician])\nsupervises = Function([employees, employees] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([p:positions], e == p) == 1) ::: Each employee holds exactly one of the following positions\nAnd(supervises(president, e), Not(supervises(e, president))) ::: Only the president is not supervised\nForAll([e:employees], Implies(Not(e == president), And(supervises(president, e), Or(supervises(manager, e), supervises(e, manager))))) ::: Other employees are each supervised by exactly one employee, who is either the president or a manager\nForAll([e:employees], Implies(supervises(e, president), Not(e == president))) ::: Each supervised employee holds a different position than his or her supervisor\nCount([e:employees], supervises(president, e)) == 1 ::: There is exactly one president\nCount([e:employees], supervises(president, e)) > 0 ::: At least one of the employees whom the president supervises is a manager\nForAll([e:employees], Implies(supervises(e, manager), Count([e:employees], supervises(manager, e)) > 0)) ::: Each manager super"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_1_4",
    "context": "A newly formed company has five employees—F, G, H, K, and L. Each employee holds exactly one of the following positions: president, manager, or technician. Only the president is not supervised. Other employees are each supervised by exactly one employee, who is either the president or a manager. Each supervised employee holds a different position than his or her supervisor. The following conditions apply: There is exactly one president. At least one of the employees whom the president supervises is a manager. Each manager supervises at least one employee. F does not supervise any employee. G supervises exactly two employees.",
    "question": "Which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) There is exactly one technician.",
      "B) There are exactly two managers.",
      "C) There are exactly two employees who are not supervised.",
      "D) There are more managers than technicians.",
      "E) The president supervises all of the other employees."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L])\npositions = EnumSort([president, manager, technician])\nsupervises = Function([employees, employees] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([p:positions], supervises(e, p)) == 1) ::: Each employee holds exactly one of the following positions\nForAll([e:employees], Count([p:positions], supervises(p, e)) == 1) ::: Only the president is not supervised\nForAll([e:employees], Implies(supervises(e, p), Or(p == president, p == manager))) ::: Other employees are each supervised by exactly one employee, who is either the president or a manager\nForAll([e:employees], Implies(supervises(e, p), Not(e == p))) ::: Each supervised employee holds a different position than his or her supervisor\nCount([p:positions], supervises(president, p)) == 1 ::: There is exactly one president\nCount([e:employees], supervises(president, e)) >= 1 ::: At least one of the employees whom the president supervises is a manager\nForAll([m:managers], Count([e:employees], supervises(m, e)) >= 1) ::: Each manager supervises at least one employee\nForAll([e:employees], Implies(super"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_1_5",
    "context": "A newly formed company has five employees—F, G, H, K, and L. Each employee holds exactly one of the following positions: president, manager, or technician. Only the president is not supervised. Other employees are each supervised by exactly one employee, who is either the president or a manager. Each supervised employee holds a different position than his or her supervisor. The following conditions apply: There is exactly one president. At least one of the employees whom the president supervises is a manager. Each manager supervises at least one employee. F does not supervise any employee. G supervises exactly two employees.",
    "question": "If F is supervised by the president, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) G is the president.",
      "B) H is the president.",
      "C) L is a technician.",
      "D) There is exactly one manager.",
      "E) There are exactly two technicians."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L])\npositions = EnumSort([president, manager, technician])\nsupervises = Function([employees, employees] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([p:positions], supervises(e, p)) == 1) ::: Each employee holds exactly one of the following positions\nAnd(supervises(president, F), Not(supervises(F, president))) ::: Only the president is not supervised\nForAll([e:employees], Implies(Not(supervises(president, e)), supervises(e, manager))) ::: Other employees are each supervised by exactly one employee, who is either the president or a manager\nForAll([e:employees], Implies(supervises(e, president), Not(supervises(e, manager)))) ::: Each supervised employee holds a different position than his or her supervisor\nCount([e:employees], supervises(president, e)) == 1 ::: There is exactly one president\nAnd(supervises(president, e), Count([e:employees], supervises(president, e)) > 0) ::: At least one of the employees whom the president supervises is a manager\nForAll([e:employees], Implies(supervises(e, manager), Count([e:employees], supervises(e, manager)) > 0)) ::: Each manager supervises at least one employee\nNot(supervises(F, e)) ::: F does not supervise any employee\nCount([e:employees], supervises(G, e)) == 2 ::: G supervises exactly two employees\n\n# Options\nQuestion ::: If F is supervised by the president, which one of the following must be true?\nis_valid(supervises(G, president)) ::: A) G is the president.\nis_valid(supervises(H, president)) ::: B) H is the president.\nis_valid(supervises(L, technician)) ::: C) L is a technician.\nis_valid(Count([e:employees], supervises(e, manager)) == 1) ::: D) There is exactly one manager.\nis_valid(Count([e:employees], supervises(e, technician)) == 2) ::: E) There are exactly two technicians.\n------"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_1_6",
    "context": "A newly formed company has five employees—F, G, H, K, and L. Each employee holds exactly one of the following positions: president, manager, or technician. Only the president is not supervised. Other employees are each supervised by exactly one employee, who is either the president or a manager. Each supervised employee holds a different position than his or her supervisor. The following conditions apply: There is exactly one president. At least one of the employees whom the president supervises is a manager. Each manager supervises at least one employee. F does not supervise any employee. G supervises exactly two employees.",
    "question": "If K supervises exactly two employees, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) F is supervised by K.",
      "B) G is a manager.",
      "C) L is supervised.",
      "D) There are exactly two managers.",
      "E) There are exactly two technicians."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L])\npositions = EnumSort([president, manager, technician])\nsupervises = Function([employees, employees] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([p:positions], supervises(e, p)) == 1) ::: Each employee holds exactly one of the following positions\nAnd(supervises(president, F), supervises(president, G), supervises(president, H), supervises(president, K), supervises(president, L)) ::: There is exactly one president\nAnd(supervises(president, F), supervises(president, G), supervises(president, H), supervises(president, K), supervises(president, L)) ::: At least one of the employees whom the president supervises is a manager\nForAll([e:employees], Implies(supervises(e, manager), Count([p:positions], supervises(e, p)) > 0)) ::: Each manager supervises at least one employee\nForAll([e:employees], Implies(supervises(e, F), Not(supervises(e, e)))) ::: F does not supervise any employee\nCount([e:employees], supervises(G, e)) == 2 ::: G supervises exactly two employees\n\n# Options\nQuestion ::: If K supervises exactly two employees, which one of the following must be true?\nis_valid(Exists([e:employees], supervises(K, e) && supervises(e, F))) ::: A) F is supervised by K.\nis_valid(Exists([e:employees], supervises(e, G) && supervises(G, e))) ::: B) G is a manager.\nis_valid(Exists([e:employees], supervises(e, L))) ::: C) L is supervised.\nis_valid(Count([e:employees], supervises(e, manager)) == 2) ::: D) There are exactly two managers.\nis_valid(Count([e:employees], supervises(e, technician)) == 2) ::: E) There are exactly two technicians.\n------\nProblem:\nA company has five employees—F, G, H, K, and L—who are assigned to work on"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_2_7",
    "context": "Ron washed a total of seven objects after eating his lunch. Two of the objects were pieces of china: a mug and a plate. Two were pieces of glassware: a water glass and a juice glass. Three were utensils: a fork, a knife, and a spoon. Ron washed the two pieces of china consecutively, the two glasses consecutively, and the three utensils consecutively. He washed the objects as follows: Ron washed each of the objects exactly once. Ron washed the glassware after either the china or the utensils but not after both. He washed the knife before the spoon, and he washed the mug before the plate. He did not wash any two objects at the same time.",
    "question": "Which one of the following statements CANNOT be true?",
    "answer": "E",
    "options": [
      "A) Ron washed the fork first.",
      "B) Ron washed the fork second.",
      "C) Ron washed the mug first.",
      "D) Ron washed the plate second.",
      "E) Ron washed the plate third."
    ],
    "raw_logic_programs": [
      "# Declarations\nobjects = EnumSort([china, glassware, utensils])\nwashed = Function([objects] -> [int])\nForAll([o:objects], And(1 <= washed(o), washed(o) <= 7))\n\n# Constraints\nDistinct([o:objects], washed(o)) ::: Ron washed each of the objects exactly once\nAnd(washed(glassware) > washed(china), washed(glassware) > washed(utensils)) ::: Ron washed the glassware after either the china or the utensils but not after both\nwashed(knife) < washed(spoon) ::: He washed the knife before the spoon\nwashed(mug) < washed(plate) ::: He washed the mug before the plate\n\n# Options\nQuestion ::: Which one of the following statements CANNOT be true?\nis_exception(is_sat(washed(fork) == 1)) ::: (A)\nis_exception(is_sat(washed(fork) == 2)) ::: (B)\nis_exception(is_sat(washed(mug) == 1)) ::: (C)\nis_exception(is_sat(washed(plate) == 2)) ::: (D)\nis_exception(is_sat(washed(plate) == 3)) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—are to be seated in a row of six chairs. The following conditions apply: A is seated next to B. C is seated next to D. E is seated next to F. A is seated next to E. B is seated next to F.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A is seated next to C\n(B) A is seated next to D\n(C) B is seated next to C\n(D) B is seated next to D\n(E) C is seated next to E\n###\n# Declarations\npeople = EnumSort([A, B, C, D, E, F])\nseats = EnumSort([1, 2, 3, 4, 5, 6])\nseated = Function([people, seats] -> [bool])\nForAll([p:people], Count([s:seats], seated(p, s)) == 1"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_2_8",
    "context": "Ron washed a total of seven objects after eating his lunch. Two of the objects were pieces of china: a mug and a plate. Two were pieces of glassware: a water glass and a juice glass. Three were utensils: a fork, a knife, and a spoon. Ron washed the two pieces of china consecutively, the two glasses consecutively, and the three utensils consecutively. He washed the objects as follows: Ron washed each of the objects exactly once. Ron washed the glassware after either the china or the utensils but not after both. He washed the knife before the spoon, and he washed the mug before the plate. He did not wash any two objects at the same time.",
    "question": "Which one of the following statements can be true?",
    "answer": "A",
    "options": [
      "A) Ron washed the knife second.",
      "B) Ron washed the knife seventh.",
      "C) Ron washed the mug second.",
      "D) Ron washed the mug third.",
      "E) Ron washed the mug fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\nobjects = EnumSort([mug, plate, water_glass, juice_glass, fork, knife, spoon])\nwashed = Function([objects] -> [int])\nForAll([o:objects], And(1 <= washed(o), washed(o) <= 7))\n\n# Constraints\nDistinct([o:objects], washed(o)) ::: Ron washed each of the objects exactly once\nAnd(washed(water_glass) > washed(mug), washed(water_glass) > washed(plate)) ::: Ron washed the glassware after either the china or the utensils but not after both\nwashed(knife) < washed(spoon) ::: He washed the knife before the spoon\nwashed(mug) < washed(plate) ::: He washed the mug before the plate\n\n# Options\nQuestion ::: Which one of the following statements can be true?\nis_sat(washed(knife) == 2) ::: (A)\nis_sat(washed(knife) == 7) ::: (B)\nis_sat(washed(mug) == 2) ::: (C)\nis_sat(washed(mug) == 3) ::: (D)\nis_sat(washed(mug) == 4) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—is to be divided into two groups of three. Each of the six people will be in exactly one of the two groups. The following conditions apply: A and B are in the same group. C and D are in the same group. E and F are in the same group.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A and C are in the same group.\n(B) A and D are in the same group.\n(C) B and C are in the same group.\n(D) B and D are in the same group.\n(E) C and E are in the same group.\n###\n# Declarations\npeople = EnumSort([A, B, C, D, E, F])\ngroups = EnumSort([group1, group2])\nin_group = Function([people, groups] -> [bool])\n\n# Constraints\nForAll([p:people], Count([g:groups], in_group(p, g)) == 1) ::: Each"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_2_9",
    "context": "Ron washed a total of seven objects after eating his lunch. Two of the objects were pieces of china: a mug and a plate. Two were pieces of glassware: a water glass and a juice glass. Three were utensils: a fork, a knife, and a spoon. Ron washed the two pieces of china consecutively, the two glasses consecutively, and the three utensils consecutively. He washed the objects as follows: Ron washed each of the objects exactly once. Ron washed the glassware after either the china or the utensils but not after both. He washed the knife before the spoon, and he washed the mug before the plate. He did not wash any two objects at the same time.",
    "question": "Which one of the following CANNOT be an accurate list of the objects Ron washed second, third, and fourth, respectively?",
    "answer": "B",
    "options": [
      "A) fork, spoon, water glass",
      "B) knife, fork, juice glass",
      "C) knife, spoon, juice glass",
      "D) knife, spoon, water glass",
      "E) plate, water glass, juice glass"
    ],
    "raw_logic_programs": [
      "# Declarations\nobjects = EnumSort([china, glassware, utensils])\nwashed = Function([objects] -> [int])\nForAll([o:objects], And(1 <= washed(o), washed(o) <= 7))\n\n# Constraints\nDistinct([o:objects], washed(o)) ::: Ron washed each of the objects exactly once\nAnd(washed(glassware) > washed(china), washed(glassware) > washed(utensils)) ::: Ron washed the glassware after either the china or the utensils but not after both\nwashed(knife) < washed(spoon) ::: He washed the knife before the spoon\nwashed(mug) < washed(plate) ::: He washed the mug before the plate\n\n# Options\nQuestion ::: Which one of the following CANNOT be an accurate list of the objects Ron washed second, third, and fourth, respectively?\nis_exception(is_sat(washed(fork) == 2, washed(spoon) == 3, washed(water_glass) == 4)) ::: (A)\nis_exception(is_sat(washed(knife) == 2, washed(fork) == 3, washed(juice_glass) == 4)) ::: (B)\nis_exception(is_sat(washed(knife) == 2, washed(spoon) == 3, washed(juice_glass) == 4)) ::: (C)\nis_exception(is_sat(washed(knife) == 2, washed(spoon) == 3, washed(water_glass) == 4)) ::: (D)\nis_exception(is_sat(washed(plate) == 2, washed(water_glass) == 3, washed(juice_glass) == 4)) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—is to be divided into two groups of three. Each of the six people will be in exactly one of the two groups. The following conditions apply: A and B are in the same group. C and D are in the same group. E and F are in the same group.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A and C are in the same group.\n(B) A and D are in"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_2_10",
    "context": "Ron washed a total of seven objects after eating his lunch. Two of the objects were pieces of china: a mug and a plate. Two were pieces of glassware: a water glass and a juice glass. Three were utensils: a fork, a knife, and a spoon. Ron washed the two pieces of china consecutively, the two glasses consecutively, and the three utensils consecutively. He washed the objects as follows: Ron washed each of the objects exactly once. Ron washed the glassware after either the china or the utensils but not after both. He washed the knife before the spoon, and he washed the mug before the plate. He did not wash any two objects at the same time.",
    "question": "It is NOT possible that Ron washed the knife",
    "answer": "C",
    "options": [
      "A) first",
      "B) second",
      "C) third",
      "D) fifth",
      "E) sixth"
    ],
    "raw_logic_programs": [
      "# Declarations\nobjects = EnumSort([mug, plate, water_glass, juice_glass, fork, knife, spoon])\nwashed = Function([objects] -> [int])\nForAll([o:objects], And(1 <= washed(o), washed(o) <= 7))\n\n# Constraints\nDistinct([o:objects], washed(o)) ::: Ron washed each of the objects exactly once\nAnd(washed(water_glass) > washed(mug), washed(water_glass) > washed(plate)) ::: Ron washed the glassware after either the china or the utensils but not after both\nAnd(washed(knife) < washed(spoon), washed(mug) < washed(plate)) ::: He washed the knife before the spoon, and he washed the mug before the plate\n\n# Options\nQuestion ::: It is NOT possible that Ron washed the knife\nis_exception(is_sat(washed(knife) == 1)) ::: (A)\nis_exception(is_sat(washed(knife) == 2)) ::: (B)\nis_exception(is_sat(washed(knife) == 3)) ::: (C)\nis_exception(is_sat(washed(knife) == 5)) ::: (D)\nis_exception(is_sat(washed(knife) == 6)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_2_11",
    "context": "Ron washed a total of seven objects after eating his lunch. Two of the objects were pieces of china: a mug and a plate. Two were pieces of glassware: a water glass and a juice glass. Three were utensils: a fork, a knife, and a spoon. Ron washed the two pieces of china consecutively, the two glasses consecutively, and the three utensils consecutively. He washed the objects as follows: Ron washed each of the objects exactly once. Ron washed the glassware after either the china or the utensils but not after both. He washed the knife before the spoon, and he washed the mug before the plate. He did not wash any two objects at the same time.",
    "question": "If Ron washed the spoon immediately before the fork, then which one of the following statements can be true?",
    "answer": "E",
    "options": [
      "A) He washed the knife second.",
      "B) He washed the knife third.",
      "C) He washed the plate third.",
      "D) He washed the plate sixth.",
      "E) He washed the plate seventh."
    ],
    "raw_logic_programs": [
      "# Declarations\nobjects = EnumSort([china, glassware, utensils])\nwashed = Function([objects] -> [int])\nForAll([o:objects], And(1 <= washed(o), washed(o) <= 7))\n\n# Constraints\nDistinct([o:objects], washed(o)) ::: Ron washed each of the objects exactly once\nAnd(washed(glassware) > washed(china), washed(glassware) > washed(utensils)) ::: Ron washed the glassware after either the china or the utensils but not after both\nwashed(knife) < washed(spoon) ::: He washed the knife before the spoon\nwashed(mug) < washed(plate) ::: He washed the mug before the plate\n\n# Options\nQuestion ::: If Ron washed the spoon immediately before the fork, then which one of the following statements can be true?\nis_valid(Exists([o:objects], washed(o) == 2)) ::: (A)\nis_valid(Exists([o:objects], washed(o) == 3)) ::: (B)\nis_valid(Exists([o:objects], washed(o) == 3)) ::: (C)\nis_valid(Exists([o:objects], washed(o) == 6)) ::: (D)\nis_valid(Exists([o:objects], washed(o) == 7)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees. Each employee is assigned to one of the following three departments: accounting, marketing, or sales. The following conditions apply: The number of employees in the accounting department is 20 more than the number of employees in the marketing department. The number of employees in the sales department is 10 more than the number of employees in the marketing department. The number of employees in the accounting department is 10 more than the number of employees in the sales department.\nQuestion:\nIf the number of employees in the marketing department is 20, then how many employees are in the sales department?\nChoices:\n(A) 30\n(B) 40\n(C) 50\n(D) 60\n(E) 70\n###\n# Declarations\ndepartments = EnumSort([accounting, marketing, sales])\nemployees = Function([departments] -> [int])\nForAll([d:de"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_2_12",
    "context": "Ron washed a total of seven objects after eating his lunch. Two of the objects were pieces of china: a mug and a plate. Two were pieces of glassware: a water glass and a juice glass. Three were utensils: a fork, a knife, and a spoon. Ron washed the two pieces of china consecutively, the two glasses consecutively, and the three utensils consecutively. He washed the objects as follows: Ron washed each of the objects exactly once. Ron washed the glassware after either the china or the utensils but not after both. He washed the knife before the spoon, and he washed the mug before the plate. He did not wash any two objects at the same time.",
    "question": "If Ron washed a glass and the knife consecutively, but not necessarily in that order, then which one of the following statements must be false?",
    "answer": "A",
    "options": [
      "A) He washed the fork before the plate.",
      "B) He washed the fork before the spoon.",
      "C) He washed the juice glass before the knife.",
      "D) He washed the plate before the water glass.",
      "E) He washed the spoon before the fork."
    ],
    "raw_logic_programs": [
      "# Declarations\nobjects = EnumSort([mug, plate, water_glass, juice_glass, fork, knife, spoon])\nwashed = Function([objects] -> [int])\nForAll([o:objects], And(1 <= washed(o), washed(o) <= 7))\n\n# Constraints\nDistinct([o:objects], washed(o)) ::: Ron washed each of the objects exactly once\nAnd(washed(water_glass) > washed(mug), washed(water_glass) < washed(plate)) ::: Ron washed the glassware after either the china or the utensils but not after both\nAnd(washed(knife) < washed(spoon), washed(knife) > washed(mug)) ::: He washed the knife before the spoon, and he washed the mug before the plate\n\n# Options\nQuestion ::: If Ron washed a glass and the knife consecutively, but not necessarily in that order, then which one of the following statements must be false?\nis_exception(is_sat(washed(fork) < washed(plate))) ::: (A)\nis_exception(is_sat(washed(fork) < washed(spoon))) ::: (B)\nis_exception(is_sat(washed(juice_glass) < washed(knife))) ::: (C)\nis_exception(is_sat(washed(plate) < washed(water_glass))) ::: (D)\nis_exception(is_sat(washed(spoon) < washed(fork))) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—are to be seated in a row of six chairs. The following conditions apply: A is seated next to B. C is seated next to D. E is seated next to F. A is seated next to E. B is seated next to F.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A is seated next to C\n(B) A is seated next to D\n(C) B is seated next to C\n(D) B is seated next to D\n(E) C is seated next to E\n###\n# Declarations\npeople = EnumSort([A, B, C, D, E, F])\nchairs = EnumSort([1, 2"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_3_13",
    "context": "A breeder has ten birds: Kind Male Female Goldfinches H J, K Lovebirds M N Parakeets Q, R, S T, W The breeder exhibits pairs of birds consisting of one male and one female of the same kind. At most two pairs can be exhibited at a time; the remaining birds must be distributed between two cages. The breeder is constrained by the following conditions: Neither cage can contain more than four birds. Any two birds that are both of the same sex and of the same kind as each other cannot be caged together. Whenever either J or W is exhibited, S cannot be exhibited.",
    "question": "Which one of the following is a possible assignment of the birds? First Cage Second Cage Exhibition",
    "answer": "D",
    "options": [
      "A) H, M, N J, K, S Q, R, T, W",
      "B) K, M, Q N, R, W H, J, S, T",
      "C) K, Q, S R, T, W H, J, M, N",
      "D) H, J, M, R K, N, S, W Q, T",
      "E) H, J, M, R, W K, N, S Q, T, W"
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([H, J, K, M, N, Q, R, S, T, W])\ncages = EnumSort([first, second])\nexhibition = EnumSort([])\nmale = Function([birds] -> [bool])\nfemale = Function([birds] -> [bool])\ngoldfinches = Function([birds] -> [bool])\nlovebirds = Function([birds] -> [bool])\nparakeets = Function([birds] -> [bool])\nForAll([b:birds], Or(male(b), female(b))) ::: each bird is either male or female\nForAll([b:birds], Or(goldfinches(b), lovebirds(b), parakeets(b))) ::: each bird is either a goldfinch, a lovebird, or a parakeet\n\n# Constraints\nForAll([c:cages], Count([b:birds], c == cages(b)) <= 4) ::: Neither cage can contain more than four birds\nForAll([b1:birds, b2:birds], Implies(And(male(b1), male(b2)), Not(And(goldfinches(b1), goldfinches(b2)), And(lovebirds(b1), lovebirds(b2)), And(parakeets(b1), parakeets(b2))))) ::: Any two birds that are both of the same sex and of the same kind as each other cannot be caged together\nImplies(And(exhibition(J), exhibition(W)), Not(exhibition(S))) ::: Whenever either J or W is exhibited, S cannot be exhibited\n\n# Options\nQuestion ::: Which one of the following is a possible assignment of the birds? First Cage Second Cage Exhibition\nis_valid(And(cages(H) == first, cages(M) == first, cages(N) == first, cages(J) == second, cages(K) == second, cages(S) == second, exhibition(Q) == exhibition, exhibition(R) == exhibition, exhibition(T) == exhibition, exhibition(W) == exhibition)) ::: A) H, M, N J, K, S Q, R, T, W\nis_valid(And(cages(K) == first, cages(M) == first, cages(Q) == first, cages(N) == second, cages(R) == second, cages("
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_3_14",
    "context": "A breeder has ten birds: Kind Male Female Goldfinches H J, K Lovebirds M N Parakeets Q, R, S T, W The breeder exhibits pairs of birds consisting of one male and one female of the same kind. At most two pairs can be exhibited at a time; the remaining birds must be distributed between two cages. The breeder is constrained by the following conditions: Neither cage can contain more than four birds. Any two birds that are both of the same sex and of the same kind as each other cannot be caged together. Whenever either J or W is exhibited, S cannot be exhibited.",
    "question": "Which one of the following lists two pairs of birds that the breeder can exhibit at the same time?",
    "answer": "D",
    "options": [
      "A) H and J; M and N",
      "B) H and J; S and T",
      "C) H and K; M and N",
      "D) H and K; R and W",
      "E) M and N; S and W"
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([H, J, K, M, N, Q, R, S, T, W])\ncages = EnumSort([cage1, cage2])\nexhibited = Function([birds] -> [bool])\ncaged = Function([birds, cages] -> [bool])\n\n# Constraints\nForAll([b:birds], Count([c:cages], caged(b, c)) == 1) ::: Each bird is either exhibited or caged\nForAll([c:cages], Count([b:birds], caged(b, c)) <= 4) ::: Neither cage can contain more than four birds\nForAll([b1:birds, b2:birds], Implies(And(exhibited(b1), exhibited(b2)), Not(And(b1!= b2, caged(b1, b2), caged(b2, b1))))) ::: Any two birds that are both of the same sex and of the same kind as each other cannot be caged together\nImplies(exhibited(J), Not(exhibited(S))) ::: Whenever either J or W is exhibited, S cannot be exhibited\n\n# Options\nQuestion ::: Which one of the following lists two pairs of birds that the breeder can exhibit at the same time?\nis_sat(And(exhibited(H), exhibited(J), exhibited(M), exhibited(N))) ::: A) H and J; M and N\nis_sat(And(exhibited(H), exhibited(J), exhibited(S), exhibited(T))) ::: B) H and J; S and T\nis_sat(And(exhibited(H), exhibited(K), exhibited(M), exhibited(N))) ::: C) H and K; M and N\nis_sat(And(exhibited(H), exhibited(K), exhibited(R), exhibited(W))) ::: D) H and K; R and W\nis_sat(And(exhibited(M), exhibited(N), exhibited(S), exhibited(W))) ::: E) M and N; S and W\n------\nProblem:\nA company has six employees: A, B, C, D, E, and F. Each employee is assigned to work in one of the following three departments: accounting, marketing, or sales. The following conditions apply: B and C are assigned to the same department. D is assigned"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_3_15",
    "context": "A breeder has ten birds: Kind Male Female Goldfinches H J, K Lovebirds M N Parakeets Q, R, S T, W The breeder exhibits pairs of birds consisting of one male and one female of the same kind. At most two pairs can be exhibited at a time; the remaining birds must be distributed between two cages. The breeder is constrained by the following conditions: Neither cage can contain more than four birds. Any two birds that are both of the same sex and of the same kind as each other cannot be caged together. Whenever either J or W is exhibited, S cannot be exhibited.",
    "question": "If Q and R are among the birds that are assigned to the cages, then it must be true that",
    "answer": "D",
    "options": [
      "A) H is exhibited",
      "B) K is exhibited",
      "C) N is exhibited",
      "D) J is assigned to one of the cages",
      "E) T is assigned to one of the cages"
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([H, J, K, M, N, Q, R, S, T, W])\ncages = EnumSort([cage1, cage2])\nexhibited = Function([birds] -> [bool])\ncaged = Function([birds] -> [cages])\n\n# Constraints\nForAll([b:birds], Count([c:cages], caged(b) == c) <= 1) ::: Any two birds that are both of the same sex and of the same kind as each other cannot be caged together\nForAll([c:cages], Count([b:birds], caged(b) == c) <= 4) ::: Neither cage can contain more than four birds\nAnd(exhibited(Q), exhibited(R)) ::: At most two pairs can be exhibited at a time\nAnd(exhibited(J), exhibited(W)) ::: the remaining birds must be distributed between two cages\nAnd(exhibited(J), Not(exhibited(S))) ::: Whenever either J or W is exhibited, S cannot be exhibited\n\n# Options\nQuestion ::: If Q and R are among the birds that are assigned to the cages, then it must be true that\nis_valid(Exists([b:birds], exhibited(b) == H)) ::: A) H is exhibited\nis_valid(Exists([b:birds], exhibited(b) == K)) ::: B) K is exhibited\nis_valid(Exists([b:birds], exhibited(b) == N)) ::: C) N is exhibited\nis_valid(Exists([b:birds], caged(b) == cage1)) ::: D) J is assigned to one of the cages\nis_valid(Exists([b:birds], caged(b) == cage2)) ::: E) T is assigned to one of the cages\n------"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_3_16",
    "context": "A breeder has ten birds: Kind Male Female Goldfinches H J, K Lovebirds M N Parakeets Q, R, S T, W The breeder exhibits pairs of birds consisting of one male and one female of the same kind. At most two pairs can be exhibited at a time; the remaining birds must be distributed between two cages. The breeder is constrained by the following conditions: Neither cage can contain more than four birds. Any two birds that are both of the same sex and of the same kind as each other cannot be caged together. Whenever either J or W is exhibited, S cannot be exhibited.",
    "question": "If Q and T are among the birds assigned to the cages, which one of the following is a pair of birds that must be exhibited?",
    "answer": "D",
    "options": [
      "A) H and J",
      "B) H and K",
      "C) M and N",
      "D) R and W",
      "E) S and W"
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([H, J, K, M, N, Q, R, S, T, W])\ncages = EnumSort([cage1, cage2])\nexhibited = Function([birds] -> [birds])\ncaged = Function([birds] -> [birds])\nForAll([b:birds], Or(exhibited(b), caged(b)))\n\n# Constraints\nForAll([c:cages], Count([b:birds], caged(b) == c) <= 4) ::: Neither cage can contain more than four birds\nForAll([b1, b2:birds], Implies(And(exhibited(b1), exhibited(b2)), Not(And(b1!= b2, SameSex(b1, b2), SameKind(b1, b2))))) ::: Any two birds that are both of the same sex and of the same kind as each other cannot be caged together\nImplies(And(exhibited(J), exhibited(W)), Not(exhibited(S))) ::: Whenever either J or W is exhibited, S cannot be exhibited\n\n# Options\nQuestion ::: If Q and T are among the birds assigned to the cages, which one of the following is a pair of birds that must be exhibited?\nis_valid(ForAll([b:birds], Or(exhibited(b) == H, exhibited(b) == J))) ::: (A)\nis_valid(ForAll([b:birds], Or(exhibited(b) == H, exhibited(b) == K))) ::: (B)\nis_valid(ForAll([b:birds], Or(exhibited(b) == M, exhibited(b) == N))) ::: (C)\nis_valid(ForAll([b:birds], Or(exhibited(b) == R, exhibited"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_3_17",
    "context": "A breeder has ten birds: Kind Male Female Goldfinches H J, K Lovebirds M N Parakeets Q, R, S T, W The breeder exhibits pairs of birds consisting of one male and one female of the same kind. At most two pairs can be exhibited at a time; the remaining birds must be distributed between two cages. The breeder is constrained by the following conditions: Neither cage can contain more than four birds. Any two birds that are both of the same sex and of the same kind as each other cannot be caged together. Whenever either J or W is exhibited, S cannot be exhibited.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "B",
    "options": [
      "A) One pair of parakeets are the only birds exhibited together.",
      "B) One pair of goldfinches and one pair of lovebirds are exhibited together.",
      "C) One pair of goldfinches and one pair of parakeets are exhibited together.",
      "D) One pair of lovebirds and one pair of parakeets are exhibited together.",
      "E) Two pairs of parakeets are exhibited together."
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([H, J, K, M, N, Q, R, S, T, W])\ncages = EnumSort([cage1, cage2])\nexhibited = Function([birds] -> [bool])\ncaged = Function([birds, cages] -> [bool])\n\n# Constraints\nForAll([b:birds], Count([c:cages], caged(b, c)) == 1) ::: Each bird is either exhibited or caged\nForAll([c:cages], Count([b:birds], caged(b, c)) <= 4) ::: Neither cage can contain more than four birds\nForAll([b1, b2:birds], And(exhibited(b1), exhibited(b2), b1!= b2, b1 == b2, b1 == b2) => Not(caged(b1, b2))) ::: Any two birds that are both of the same sex and of the same kind as each other cannot be caged together\nAnd(exhibited(J), exhibited(W)) => Not(exhibited(S)) ::: Whenever either J or W is exhibited, S cannot be exhibited\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(ForAll([b:birds], exhibited(b) == (b == H) || (b == J) || (b == K)))) ::: A) One pair of parakeets are the only birds exhibited together.\nis_exception(is_sat(ForAll([b:birds], exhibited(b) == (b == H) || (b == J) || (b == M) || (b == N)))) ::: B) One pair of goldfinches and one pair of lovebirds are exhibited together.\nis_exception(is_sat(ForAll([b:birds"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_3_18",
    "context": "A breeder has ten birds: Kind Male Female Goldfinches H J, K Lovebirds M N Parakeets Q, R, S T, W The breeder exhibits pairs of birds consisting of one male and one female of the same kind. At most two pairs can be exhibited at a time; the remaining birds must be distributed between two cages. The breeder is constrained by the following conditions: Neither cage can contain more than four birds. Any two birds that are both of the same sex and of the same kind as each other cannot be caged together. Whenever either J or W is exhibited, S cannot be exhibited.",
    "question": "If S is one of the birds exhibited, it must be true that",
    "answer": "E",
    "options": [
      "A) H is exhibited",
      "B) M is exhibited",
      "C) K is assigned to a cage",
      "D) N is assigned to a cage",
      "E) R is assigned to a cage"
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([H, J, K, M, N, Q, R, S, T, W])\ncages = EnumSort([cage1, cage2])\nexhibited = Function([birds] -> [birds])\ncaged = Function([birds] -> [birds])\n\n# Constraints\nForAll([b:birds], Or(exhibited(b), caged(b))) ::: At most two pairs can be exhibited at a time; the remaining birds must be distributed between two cages\nForAll([c:cages], Count([b:birds], caged(b) == c) <= 4) ::: Neither cage can contain more than four birds\nForAll([b1, b2:birds], Implies(And(exhibited(b1), exhibited(b2)), Not(And(b1!= b2, Male(b1) == Male(b2), Female(b1) == Female(b2))))) ::: Any two birds that are both of the same sex and of the same kind as each other cannot be caged together\nImplies(exhibited(S), Not(exhibited(W))) ::: Whenever either J or W is exhibited, S cannot be exhibited\n\n# Options\nQuestion ::: If S is one of the birds exhibited, it must be true that\nis_valid(Exists([b:birds], exhibited(b) == H)) ::: A) H is exhibited\nis_valid(Exists([b:birds], exhibited(b) == M)) ::: B) M is exhibited\nis_valid(Exists([b:birds], caged(b) == K)) ::: C) K is assigned to a cage\nis_valid(Exists([b:birds], caged(b) == N)) ::: D) N is assigned to a cage\nis_valid(Exists([b:birds],"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_4_19",
    "context": "During each of the fall, winter, spring, and summer seasons of one year, Nikki and Otto each participate in exactly one of the following five sports: hockey, kayaking, mountaineering, running, and volleyball. Each child participates in exactly four different sports during the year. In the fall, each child participates in mountaineering, running, or volleyball. In the winter, each child participates in hockey or volleyball. In the spring, each child participates in kayaking, mountaineering, running, or volleyball. In the summer, each child participates in kayaking, mountaineering, or volleyball. Nikki and Otto do not participate in the same sport during the same season. Otto's summer sport is volleyball.",
    "question": "Which one of the following statements must be true?",
    "answer": "B",
    "options": [
      "A) Nikki's fall sport is running.",
      "B) Nikki's winter sport is volleyball.",
      "C) Nikki's spring sport is mountaineering.",
      "D) Otto's fall sport is mountaineering.",
      "E) Otto's spring sport is kayaking."
    ],
    "raw_logic_programs": [
      "# Declarations\nseasons = EnumSort([fall, winter, spring, summer])\nsports = EnumSort([hockey, kayaking, mountaineering, running, volleyball])\nparticipates = Function([seasons, sports] -> [bool])\n\n# Constraints\nForAll([s:sports], Count([s:seasons], participates(s, s)) == 4) ::: Each child participates in exactly four different sports during the year\nAnd(participates(fall, mountaineering), participates(fall, running), participates(fall, volleyball)) ::: In the fall, each child participates in mountaineering, running, or volleyball\nAnd(participates(winter, hockey), participates(winter, volleyball)) ::: In the winter, each child participates in hockey or volleyball\nAnd(participates(spring, kayaking), participates(spring, mountaineering), participates(spring, running), participates(spring, volleyball)) ::: In the spring, each child participates in kayaking, mountaineering, running, or volleyball\nAnd(participates(summer, kayaking), participates(summer, mountaineering), participates(summer, volleyball)) ::: In the summer, each child participates in kayaking, mountaineering, or volleyball\nForAll([s:sports], Implies(participates(Nikki, s), Not(participates(Otto, s)))) ::: Nikki and Otto do not participate in the same sport during the same season\nparticipates(Otto, summer, volleyball) ::: Otto's summer sport is volleyball\n\n# Options\nQuestion ::: Which one of the following statements must be true?\nis_valid(participates(Nikki, fall, running)) ::: (A)\nis_valid(participates(Nikki, winter,"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_4_20",
    "context": "During each of the fall, winter, spring, and summer seasons of one year, Nikki and Otto each participate in exactly one of the following five sports: hockey, kayaking, mountaineering, running, and volleyball. Each child participates in exactly four different sports during the year. In the fall, each child participates in mountaineering, running, or volleyball. In the winter, each child participates in hockey or volleyball. In the spring, each child participates in kayaking, mountaineering, running, or volleyball. In the summer, each child participates in kayaking, mountaineering, or volleyball. Nikki and Otto do not participate in the same sport during the same season. Otto's summer sport is volleyball.",
    "question": "It CANNOT be true that both Nikki and Otto participate during the year in which one of the following sports?",
    "answer": "A",
    "options": [
      "A) hockey",
      "B) kayaking",
      "C) mountaineering",
      "D) running",
      "E) volleyball"
    ],
    "raw_logic_programs": [
      "# Declarations\nseasons = EnumSort([fall, winter, spring, summer])\nsports = EnumSort([hockey, kayaking, mountaineering, running, volleyball])\nparticipates = Function([seasons, sports] -> [bool])\n\n# Constraints\nForAll([s:sports], Count([s:seasons], participates(s, s)) == 4) ::: Each child participates in exactly four different sports during the year\nAnd(participates(fall, mountaineering), participates(fall, running), participates(fall, volleyball)) ::: In the fall, each child participates in mountaineering, running, or volleyball\nAnd(participates(winter, hockey), participates(winter, volleyball)) ::: In the winter, each child participates in hockey or volleyball\nAnd(participates(spring, kayaking), participates(spring, mountaineering), participates(spring, running), participates(spring, volleyball)) ::: In the spring, each child participates in kayaking, mountaineering, running, or volleyball\nAnd(participates(summer, kayaking), participates(summer, mountaineering), participates(summer, volleyball)) ::: In the summer, each child participates in kayaking, mountaineering, or volleyball\nForAll([s:sports], Implies(participates(Nikki, s), Not(participates(Otto, s)))) ::: Nikki and Otto do not participate in the same sport during the same season\nparticipates(Otto, summer, volleyball) ::: Otto's summer sport is volleyball\n\n# Options\nQuestion ::: It CANNOT be true that both Nikki and Otto participate during the year in which one of the following sports?\nis_exception(is_sat(participates(Nikki, hockey))) :::"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_4_21",
    "context": "During each of the fall, winter, spring, and summer seasons of one year, Nikki and Otto each participate in exactly one of the following five sports: hockey, kayaking, mountaineering, running, and volleyball. Each child participates in exactly four different sports during the year. In the fall, each child participates in mountaineering, running, or volleyball. In the winter, each child participates in hockey or volleyball. In the spring, each child participates in kayaking, mountaineering, running, or volleyball. In the summer, each child participates in kayaking, mountaineering, or volleyball. Nikki and Otto do not participate in the same sport during the same season. Otto's summer sport is volleyball.",
    "question": "If Nikki's fall sport is running, then which one of the following statements must be true?",
    "answer": "C",
    "options": [
      "A) Nikki's spring sport is kayaking.",
      "B) Nikki's summer sport is mountaineering.",
      "C) Otto's fall sport is mountaineering.",
      "D) Otto's spring sport is kayaking.",
      "E) Otto's spring sport is running."
    ],
    "raw_logic_programs": [
      "# Declarations\nseasons = EnumSort([fall, winter, spring, summer])\nsports = EnumSort([hockey, kayaking, mountaineering, running, volleyball])\nparticipates = Function([seasons, sports] -> [bool])\n\n# Constraints\nForAll([s:sports], Count([s:seasons], participates(s, s)) == 4) ::: Each child participates in exactly four different sports during the year\nAnd(participates(fall, mountaineering), participates(fall, running), participates(fall, volleyball)) ::: In the fall, each child participates in mountaineering, running, or volleyball\nAnd(participates(winter, hockey), participates(winter, volleyball)) ::: In the winter, each child participates in hockey or volleyball\nAnd(participates(spring, kayaking), participates(spring, mountaineering), participates(spring, running), participates(spring, volleyball)) ::: In the spring, each child participates in kayaking, mountaineering, running, or volleyball\nAnd(participates(summer, kayaking), participates(summer, mountaineering), participates(summer, volleyball)) ::: In the summer, each child participates in kayaking, mountaineering, or volleyball\nForAll([s:sports], Implies(participates(Nikki, s), Not(participates(Otto, s)))) ::: Nikki and Otto do not participate in the same sport during the same season\nparticipates(Otto, summer, volleyball) ::: Otto's summer sport is volleyball\n\n# Options\nQuestion ::: If Nikki's fall sport is running, then which one of the following statements must be true?\nis_valid(Exists([s:sports], participates(Nikki, spring, s) == participates"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_4_22",
    "context": "During each of the fall, winter, spring, and summer seasons of one year, Nikki and Otto each participate in exactly one of the following five sports: hockey, kayaking, mountaineering, running, and volleyball. Each child participates in exactly four different sports during the year. In the fall, each child participates in mountaineering, running, or volleyball. In the winter, each child participates in hockey or volleyball. In the spring, each child participates in kayaking, mountaineering, running, or volleyball. In the summer, each child participates in kayaking, mountaineering, or volleyball. Nikki and Otto do not participate in the same sport during the same season. Otto's summer sport is volleyball.",
    "question": "Which one of the following statements could be true?",
    "answer": "B",
    "options": [
      "A) Nikki's fall sport is neither mountaineering nor running.",
      "B) Nikki's spring sport is neither mountaineering nor running.",
      "C) Nikki's summer sport is neither kayaking nor mountaineering.",
      "D) Otto's fall sport is neither mountaineering nor running.",
      "E) Otto's spring sport is neither kayaking, nor mountaineering, nor running."
    ],
    "raw_logic_programs": [
      "# Declarations\nseasons = EnumSort([fall, winter, spring, summer])\nsports = EnumSort([hockey, kayaking, mountaineering, running, volleyball])\nparticipates = Function([seasons, sports] -> [bool])\n\n# Constraints\nForAll([s:sports], Count([s:seasons], participates(s, s)) == 4) ::: Each child participates in exactly four different sports during the year\nAnd(participates(fall, mountaineering), participates(fall, running), participates(fall, volleyball)) ::: In the fall, each child participates in mountaineering, running, or volleyball\nAnd(participates(winter, hockey), participates(winter, volleyball)) ::: In the winter, each child participates in hockey or volleyball\nAnd(participates(spring, kayaking), participates(spring, mountaineering), participates(spring, running), participates(spring, volleyball)) ::: In the spring, each child participates in kayaking, mountaineering, running, or volleyball\nAnd(participates(summer, kayaking), participates(summer, mountaineering), participates(summer, volleyball)) ::: In the summer, each child participates in kayaking, mountaineering, or volleyball\nForAll([s:sports], Implies(participates(Nikki, s), Not(participates(Otto, s)))) ::: Nikki and Otto do not participate in the same sport during the same season\nparticipates(Otto, summer, volleyball) ::: Otto's summer sport is volleyball\n\n# Options\nQuestion ::: Which one of the following statements could be true?\nis_valid(Not(participates(Nikki, fall, mountaineering))) ::: A) Nikki's fall sport is neither mountaineering nor"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_4_23",
    "context": "During each of the fall, winter, spring, and summer seasons of one year, Nikki and Otto each participate in exactly one of the following five sports: hockey, kayaking, mountaineering, running, and volleyball. Each child participates in exactly four different sports during the year. In the fall, each child participates in mountaineering, running, or volleyball. In the winter, each child participates in hockey or volleyball. In the spring, each child participates in kayaking, mountaineering, running, or volleyball. In the summer, each child participates in kayaking, mountaineering, or volleyball. Nikki and Otto do not participate in the same sport during the same season. Otto's summer sport is volleyball.",
    "question": "If Otto does not run during the year, then which one of the following statements must be false?",
    "answer": "B",
    "options": [
      "A) Nikki's fall sport is running.",
      "B) Nikki's spring sport is running.",
      "C) Nikki's summer sport is kayaking.",
      "D) Otto's fall sport is mountaineering.",
      "E) Otto's spring sport is kayaking."
    ],
    "raw_logic_programs": [
      "# Declarations\nseasons = EnumSort([fall, winter, spring, summer])\nsports = EnumSort([hockey, kayaking, mountaineering, running, volleyball])\nparticipates = Function([seasons, sports] -> [bool])\n\n# Constraints\nForAll([s:sports], Count([s:seasons], participates(s, s)) == 4) ::: Each child participates in exactly four different sports during the year\nAnd(participates(fall, mountaineering), participates(fall, running), participates(fall, volleyball)) ::: In the fall, each child participates in mountaineering, running, or volleyball\nAnd(participates(winter, hockey), participates(winter, volleyball)) ::: In the winter, each child participates in hockey or volleyball\nAnd(participates(spring, kayaking), participates(spring, mountaineering), participates(spring, running), participates(spring, volleyball)) ::: In the spring, each child participates in kayaking, mountaineering, running, or volleyball\nAnd(participates(summer, kayaking), participates(summer, mountaineering), participates(summer, volleyball)) ::: In the summer, each child participates in kayaking, mountaineering, or volleyball\nForAll([s:sports], Implies(participates(Nikki, s), Not(participates(Otto, s)))) ::: Nikki and Otto do not participate in the same sport during the same season\nparticipates(Otto, summer, volleyball) ::: Otto's summer sport is volleyball\n\n# Options\nQuestion ::: If Otto does not run during the year, then which one of the following statements must be false?\nis_exception(is_sat(participates(Nikki, fall, running))) ::: (A)"
    ]
  },
  {
    "id": "ar_lsat_199502_1-G_4_24",
    "context": "During each of the fall, winter, spring, and summer seasons of one year, Nikki and Otto each participate in exactly one of the following five sports: hockey, kayaking, mountaineering, running, and volleyball. Each child participates in exactly four different sports during the year. In the fall, each child participates in mountaineering, running, or volleyball. In the winter, each child participates in hockey or volleyball. In the spring, each child participates in kayaking, mountaineering, running, or volleyball. In the summer, each child participates in kayaking, mountaineering, or volleyball. Nikki and Otto do not participate in the same sport during the same season. Otto's summer sport is volleyball.",
    "question": "Which one of the following statements could be true?",
    "answer": "C",
    "options": [
      "A) Nikki's fall sport is mountaineering and Otto's spring sport is running.",
      "B) Nikki's spring sport is running and her summer sport is mountaineering.",
      "C) Nikki's spring sport is mountaineering and Otto's fall sport is mountaineering.",
      "D) Nikki's spring sport is running and Otto's fall sport is mountaineering.",
      "E) Nikki's summer sport is mountaineering and Otto's spring sport is mountaineering."
    ],
    "raw_logic_programs": [
      "# Declarations\nseasons = EnumSort([fall, winter, spring, summer])\nsports = EnumSort([hockey, kayaking, mountaineering, running, volleyball])\nparticipates = Function([seasons, sports] -> [bool])\n\n# Constraints\nForAll([s:sports], Count([s:seasons], participates(s, s)) == 4) ::: Each child participates in exactly four different sports during the year\nAnd(participates(fall, mountaineering), participates(fall, running), participates(fall, volleyball)) ::: In the fall, each child participates in mountaineering, running, or volleyball\nAnd(participates(winter, hockey), participates(winter, volleyball)) ::: In the winter, each child participates in hockey or volleyball\nAnd(participates(spring, kayaking), participates(spring, mountaineering), participates(spring, running), participates(spring, volleyball)) ::: In the spring, each child participates in kayaking, mountaineering, running, or volleyball\nAnd(participates(summer, kayaking), participates(summer, mountaineering), participates(summer, volleyball)) ::: In the summer, each child participates in kayaking, mountaineering, or volleyball\nForAll([s:sports], Implies(participates(Nikki, s), Not(participates(Otto, s)))) ::: Nikki and Otto do not participate in the same sport during the same season\nparticipates(Otto, summer, volleyball) ::: Otto's summer sport is volleyball\n\n# Options\nQuestion ::: Which one of the following statements could be true?\nis_valid(And(participates(Nikki, fall, mountaineering), participates(Otto, spring, running))) ::: (A)"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_1_1",
    "context": "A professor will listen to exactly one speech from each of six students—H, J, K, R, S, and T. The six speeches will be delivered one at a time, consecutively, according to the following conditions: The speeches delivered by H, J, and K, no matter what their order relative to each other, cannot form a sequence of three consecutive speeches. The speeches delivered by R, S, and T, no matter what their order relative to each other, cannot form a sequence of three consecutive speeches. H's speech must be earlier than S's speech. J's speech can be neither first nor sixth. T's speech can be neither immediately before nor immediately after J's speech.",
    "question": "Which one of the following could be the order, from first to last, in which the students deliver their speeches?",
    "answer": "D",
    "options": [
      "A) H, J, R, S, T, K",
      "B) H, R, T, K, S, J",
      "C) K, J, T, H, S, R",
      "D) R, J, K, T, H, S",
      "E) T, R, J, S, K, H"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_1_2",
    "context": "A professor will listen to exactly one speech from each of six students—H, J, K, R, S, and T. The six speeches will be delivered one at a time, consecutively, according to the following conditions: The speeches delivered by H, J, and K, no matter what their order relative to each other, cannot form a sequence of three consecutive speeches. The speeches delivered by R, S, and T, no matter what their order relative to each other, cannot form a sequence of three consecutive speeches. H's speech must be earlier than S's speech. J's speech can be neither first nor sixth. T's speech can be neither immediately before nor immediately after J's speech.",
    "question": "If T delivers the third speech, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) H delivers the first speech.",
      "B) J delivers the fifth speech.",
      "C) K delivers the fourth speech.",
      "D) R delivers the sixth speech.",
      "E) S delivers the fourth speech."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_1_3",
    "context": "A professor will listen to exactly one speech from each of six students—H, J, K, R, S, and T. The six speeches will be delivered one at a time, consecutively, according to the following conditions: The speeches delivered by H, J, and K, no matter what their order relative to each other, cannot form a sequence of three consecutive speeches. The speeches delivered by R, S, and T, no matter what their order relative to each other, cannot form a sequence of three consecutive speeches. H's speech must be earlier than S's speech. J's speech can be neither first nor sixth. T's speech can be neither immediately before nor immediately after J's speech.",
    "question": "If S delivers the third speech and T delivers the fourth speech, then which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) H delivers the second speech.",
      "B) J delivers the fifth speech.",
      "C) K delivers the fifth speech.",
      "D) K delivers the first speech.",
      "E) R delivers the first speech."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_1_4",
    "context": "A professor will listen to exactly one speech from each of six students—H, J, K, R, S, and T. The six speeches will be delivered one at a time, consecutively, according to the following conditions: The speeches delivered by H, J, and K, no matter what their order relative to each other, cannot form a sequence of three consecutive speeches. The speeches delivered by R, S, and T, no matter what their order relative to each other, cannot form a sequence of three consecutive speeches. H's speech must be earlier than S's speech. J's speech can be neither first nor sixth. T's speech can be neither immediately before nor immediately after J's speech.",
    "question": "If K delivers the first speech and H delivers the fifth speech, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) R delivers the third speech.",
      "B) T delivers the fourth speech.",
      "C) J's speech is immediately before H's speech.",
      "D) K's speech is immediately before T's speech.",
      "E) R's speech is immediately before J's speech."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_1_5",
    "context": "A professor will listen to exactly one speech from each of six students—H, J, K, R, S, and T. The six speeches will be delivered one at a time, consecutively, according to the following conditions: The speeches delivered by H, J, and K, no matter what their order relative to each other, cannot form a sequence of three consecutive speeches. The speeches delivered by R, S, and T, no matter what their order relative to each other, cannot form a sequence of three consecutive speeches. H's speech must be earlier than S's speech. J's speech can be neither first nor sixth. T's speech can be neither immediately before nor immediately after J's speech.",
    "question": "If R's speech is immediately after S's speech and immediately before K's speech, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) H's speech is immediately before S's speech.",
      "B) H's speech is immediately before T's speech.",
      "C) K's speech is immediately before J's speech.",
      "D) K's speech is immediately before T's speech.",
      "E) T's speech is immediately before S's speech."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_1_6",
    "context": "A professor will listen to exactly one speech from each of six students—H, J, K, R, S, and T. The six speeches will be delivered one at a time, consecutively, according to the following conditions: The speeches delivered by H, J, and K, no matter what their order relative to each other, cannot form a sequence of three consecutive speeches. The speeches delivered by R, S, and T, no matter what their order relative to each other, cannot form a sequence of three consecutive speeches. H's speech must be earlier than S's speech. J's speech can be neither first nor sixth. T's speech can be neither immediately before nor immediately after J's speech.",
    "question": "If K delivers the third speech, any of the following could be the student who makes the fourth speech EXCEPT",
    "answer": "A",
    "options": [
      "A) H",
      "B) J",
      "C) R",
      "D) S",
      "E) T"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_2_7",
    "context": "The country of Zendu contains exactly four areas for radar detection: R, S, T, and U. Each detection area is circular and falls completely within Zendu. Part of R intersects T; part of S also intersects T; R does not intersect S. Area U is completely within R and also completely within T. At noon exactly four planes J, K, L, M—are over Zendu, in a manner consistent with the following statements: Each plane is in at least one of the four areas. J is in area S. K is not in any detection area that J is in. L is not in any detection area that M is in. M is in exactly one of the areas.",
    "question": "Which one of the following could be a complete listing of the planes located in the four areas at noon, with each plane listed in every area in which it is located?",
    "answer": "D",
    "options": [
      "A) R: J, L; S: J, M; T: L; U: L",
      "B) R: J, L; S: K; T: M; U: none",
      "C) R: K; S: J; T: L; U: M",
      "D) R: K, M; S: J, L; T: J; U: none",
      "E) R: M; S: J, K; T: J, L; U: none"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_2_8",
    "context": "The country of Zendu contains exactly four areas for radar detection: R, S, T, and U. Each detection area is circular and falls completely within Zendu. Part of R intersects T; part of S also intersects T; R does not intersect S. Area U is completely within R and also completely within T. At noon exactly four planes J, K, L, M—are over Zendu, in a manner consistent with the following statements: Each plane is in at least one of the four areas. J is in area S. K is not in any detection area that J is in. L is not in any detection area that M is in. M is in exactly one of the areas.",
    "question": "If at noon K is within exactly two of the four areas, then which one of the following CANNOT be true at that time?",
    "answer": "A",
    "options": [
      "A) J is within area T.",
      "B) K is within area R.",
      "C) K is within area T.",
      "D) L is within area R.",
      "E) L is within area T."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_2_9",
    "context": "The country of Zendu contains exactly four areas for radar detection: R, S, T, and U. Each detection area is circular and falls completely within Zendu. Part of R intersects T; part of S also intersects T; R does not intersect S. Area U is completely within R and also completely within T. At noon exactly four planes J, K, L, M—are over Zendu, in a manner consistent with the following statements: Each plane is in at least one of the four areas. J is in area S. K is not in any detection area that J is in. L is not in any detection area that M is in. M is in exactly one of the areas.",
    "question": "Which one of the following is a complete and accurate list of those planes any one of which could be within area T at noon?",
    "answer": "E",
    "options": [
      "A) M",
      "B) J, L",
      "C) J, L, M",
      "D) K, L, M",
      "E) J, K, L, M"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_2_10",
    "context": "The country of Zendu contains exactly four areas for radar detection: R, S, T, and U. Each detection area is circular and falls completely within Zendu. Part of R intersects T; part of S also intersects T; R does not intersect S. Area U is completely within R and also completely within T. At noon exactly four planes J, K, L, M—are over Zendu, in a manner consistent with the following statements: Each plane is in at least one of the four areas. J is in area S. K is not in any detection area that J is in. L is not in any detection area that M is in. M is in exactly one of the areas.",
    "question": "Which one of the following statements CANNOT be true at noon about the planes?",
    "answer": "E",
    "options": [
      "A) K is within area T.",
      "B) K is within area U.",
      "C) L is within area R.",
      "D) M is within area R.",
      "E) M is within area U."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_2_11",
    "context": "The country of Zendu contains exactly four areas for radar detection: R, S, T, and U. Each detection area is circular and falls completely within Zendu. Part of R intersects T; part of S also intersects T; R does not intersect S. Area U is completely within R and also completely within T. At noon exactly four planes J, K, L, M—are over Zendu, in a manner consistent with the following statements: Each plane is in at least one of the four areas. J is in area S. K is not in any detection area that J is in. L is not in any detection area that M is in. M is in exactly one of the areas.",
    "question": "It CANNOT be true that at noon there is at least one plane that is within both area",
    "answer": "D",
    "options": [
      "A) R and area T",
      "B) R and area U",
      "C) S and area T",
      "D) S and area U",
      "E) T and area U"
    ],
    "raw_logic_programs": [
      "# Declarations\nareas = EnumSort([R, S, T, U])\nplanes = EnumSort([J, K, L, M])\nin_area = Function([planes, areas] -> [bool])\n\n# Constraints\nForAll([p:planes], Count([a:areas], in_area(p, a)) >= 1) ::: Each plane is in at least one of the four areas\nin_area(J, S) ::: J is in area S\nForAll([a:areas], Implies(in_area(J, a), Not(in_area(K, a)))) ::: K is not in any detection area that J is in\nForAll([a:areas], Implies(in_area(L, a), Not(in_area(M, a)))) ::: L is not in any detection area that M is in\nCount([a:areas], in_area(M, a)) == 1 ::: M is in exactly one of the areas\n\n# Options\nQuestion ::: It CANNOT be true that at noon there is at least one plane that is within both area\nis_exception(is_sat(And(in_area(J, R), in_area(J, T)))) ::: A) R and area T\nis_exception(is_sat(And(in_area(J, R), in_area(J, U)))) ::: B) R and area U\nis_exception(is_sat(And(in_area(J, S), in_area(J, T)))) ::: C) S and area T\nis_exception(is_sat(And(in_area(J, S), in_area(J, U)))) ::: D) S and area U\nis_exception(is_sat(And(in_area(J, T), in_area(J, U)))) ::: E) T and area U\n------"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_2_12",
    "context": "The country of Zendu contains exactly four areas for radar detection: R, S, T, and U. Each detection area is circular and falls completely within Zendu. Part of R intersects T; part of S also intersects T; R does not intersect S. Area U is completely within R and also completely within T. At noon exactly four planes J, K, L, M—are over Zendu, in a manner consistent with the following statements: Each plane is in at least one of the four areas. J is in area S. K is not in any detection area that J is in. L is not in any detection area that M is in. M is in exactly one of the areas.",
    "question": "If at noon M is within area T, then which one of the following statements CANNOT be true at that time?",
    "answer": "E",
    "options": [
      "A) J is within area T.",
      "B) L is within area R.",
      "C) L is within area S.",
      "D) K is within exactly two areas.",
      "E) L is within exactly two areas."
    ],
    "raw_logic_programs": [
      "# Declarations\nareas = EnumSort([R, S, T, U])\nplanes = EnumSort([J, K, L, M])\nin_area = Function([planes, areas] -> [bool])\n\n# Constraints\nForAll([p:planes], Count([a:areas], in_area(p, a)) >= 1) ::: Each plane is in at least one of the four areas\nin_area(J, S) ::: J is in area S\nForAll([a:areas], Implies(in_area(J, a), Not(in_area(K, a)))) ::: K is not in any detection area that J is in\nForAll([a:areas], Implies(in_area(L, a), Not(in_area(M, a)))) ::: L is not in any detection area that M is in\nin_area(M, T) ::: M is in exactly one of the areas\n\n# Options\nQuestion ::: If at noon M is within area T, then which one of the following statements CANNOT be true at that time?\nis_exception(is_sat(in_area(J, T))) ::: (A)\nis_exception(is_sat(in_area(L, R))) ::: (B)\nis_exception(is_sat(in_area(L, S))) ::: (C)\nis_exception(is_sat(Count([a:areas], in_area(K, a)) == 2)) ::: (D)\nis_exception(is_sat(Count([a:areas], in_area(L, a)) == 2)) ::: (E)\n------\nProblem:\nThe country of Zendu contains exactly four areas for radar detection: R, S, T, and U. Each detection area is circular and falls completely within Zendu. Part of R intersects T;"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_2_13",
    "context": "The country of Zendu contains exactly four areas for radar detection: R, S, T, and U. Each detection area is circular and falls completely within Zendu. Part of R intersects T; part of S also intersects T; R does not intersect S. Area U is completely within R and also completely within T. At noon exactly four planes J, K, L, M—are over Zendu, in a manner consistent with the following statements: Each plane is in at least one of the four areas. J is in area S. K is not in any detection area that J is in. L is not in any detection area that M is in. M is in exactly one of the areas.",
    "question": "If at noon plane L is within exactly three of the areas, which one of the following could be true at that time?",
    "answer": "A",
    "options": [
      "A) J is within exactly two of the areas.",
      "B) J is within exactly three of the areas.",
      "C) K is within area S.",
      "D) M is within area R.",
      "E) M is within area T."
    ],
    "raw_logic_programs": [
      "# Declarations\nareas = EnumSort([R, S, T, U])\nplanes = EnumSort([J, K, L, M])\nin_area = Function([planes, areas] -> [bool])\n\n# Constraints\nForAll([p:planes], Count([a:areas], in_area(p, a)) >= 1) ::: Each plane is in at least one of the four areas\nin_area(J, S) ::: J is in area S\nForAll([a:areas], Implies(in_area(J, a), Not(in_area(K, a)))) ::: K is not in any detection area that J is in\nForAll([a:areas], Implies(in_area(L, a), Not(in_area(M, a)))) ::: L is not in any detection area that M is in\nin_area(M, R) ::: M is in exactly one of the areas\n\n# Options\nQuestion ::: If at noon plane L is within exactly three of the areas, which one of the following could be true at that time?\nis_sat(ForAll([a:areas], in_area(J, a) == 2)) ::: (A)\nis_sat(ForAll([a:areas], in_area(J, a) == 3)) ::: (B)\nis_sat(in_area(K, S)) ::: (C)\nis_sat(in_area(M, R)) ::: (D)\nis_sat(in_area(M, T)) ::: (E)\n------\nProblem:\nThe country of Zendu contains exactly four areas for radar detection: R, S, T, and U. Each detection area is circular and falls completely within Zendu. Part of R intersects T; part of S also intersects T; R does not intersect S. Area U is completely"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_3_14",
    "context": "Four people—Fritz, Gina, Helen, and Jerry—have formed a car pool to commute to work together six days a week from Monday through Saturday. Each day exactly one of the people drives. The schedule of the car pool's drivers for any given week must meet the following conditions: Each person drives on at least one day. No person drives on two consecutive days. Fritz does not drive on Monday. Jerry drives on Wednesday or Saturday or both, and he may also drive on other days. If Gina drives on Monday, then Jerry does not drive on Saturday.",
    "question": "Which one of the following could be the schedule of drivers for one week, for the days Monday through Saturday, respectively?",
    "answer": "D",
    "options": [
      "A) Gina, Fritz, Jerry, Helen, Gina, Gina",
      "B) Gina, Fritz, Jerry, Helen, Fritz, Jerry",
      "C) Helen, Fritz, Gina, Jerry, Helen, Fritz",
      "D) Helen, Gina, Jerry, Fritz, Helen, Fritz",
      "E) Helen, Gina, Jerry, Helen, Jerry, Gina"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fritz, Gina, Helen, Jerry])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndrives = Function([people, days] -> [bool])\n\n# Constraints\nForAll([p:people], Count([d:days], drives(p, d)) >= 1) ::: Each person drives on at least one day\nForAll([p:people], Count([d:days], drives(p, d)) <= 1) ::: No person drives on two consecutive days\nForAll([d:days], Implies(d == Monday, Not(drives(Fritz, d)))) ::: Fritz does not drive on Monday\nAnd(drives(Jerry, Wednesday), drives(Jerry, Saturday)) ::: Jerry drives on Wednesday or Saturday or both\nForAll([d:days], Implies(drives(Gina, Monday), Not(drives(Jerry, Saturday)))) ::: If Gina drives on Monday, then Jerry does not drive on Saturday\n\n# Options\nQuestion ::: Which one of the following could be the schedule of drivers for one week, for the days Monday through Saturday, respectively?\nis_sat(ForAll([d:days], drives(Gina, d) == (d == Monday))) ::: A) Gina, Fritz, Jerry, Helen, Gina, Gina\nis_sat(ForAll([d:days], drives(Gina, d) == (d == Monday))) ::: B) Gina, Fritz, Jerry, Helen, Fritz, Jerry\nis_sat(ForAll([d:days], drives(Helen, d) == (d == Monday))) ::: C) Helen, Fritz, Gina, Jerry, Helen, Fritz\nis_sat(ForAll([d:days], drives(Helen, d) == (d == Monday))) :::"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_3_15",
    "context": "Four people—Fritz, Gina, Helen, and Jerry—have formed a car pool to commute to work together six days a week from Monday through Saturday. Each day exactly one of the people drives. The schedule of the car pool's drivers for any given week must meet the following conditions: Each person drives on at least one day. No person drives on two consecutive days. Fritz does not drive on Monday. Jerry drives on Wednesday or Saturday or both, and he may also drive on other days. If Gina drives on Monday, then Jerry does not drive on Saturday.",
    "question": "Which one of the following could be true of one week's schedule of drivers?",
    "answer": "E",
    "options": [
      "A) Fritz drives on both Wednesday and Saturday.",
      "B) Gina drives on both Monday and Wednesday.",
      "C) Jerry drives on both Tuesday and Friday.",
      "D) Gina drives on Monday and Jerry drives on Thursday.",
      "E) Jerry drives on Wednesday and Gina drives on Saturday."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fritz, Gina, Helen, Jerry])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndrives = Function([people, days] -> [bool])\n\n# Constraints\nForAll([p:people], Count([d:days], drives(p, d)) >= 1) ::: Each person drives on at least one day\nForAll([p:people], Count([d:days], drives(p, d)) <= 1) ::: No person drives on two consecutive days\nForAll([d:days], Implies(drives(Fritz, d), Not(d == Monday))) ::: Fritz does not drive on Monday\nAnd(drives(Jerry, Wednesday), drives(Jerry, Saturday)) ::: Jerry drives on Wednesday or Saturday or both\nForAll([d:days], Implies(drives(Gina, Monday), Not(drives(Jerry, Saturday)))) ::: If Gina drives on Monday, then Jerry does not drive on Saturday\n\n# Options\nQuestion ::: Which one of the following could be true of one week's schedule of drivers?\nis_sat(ForAll([d:days], drives(Fritz, d) == drives(Wednesday, d) == drives(Saturday, d))) ::: (A)\nis_sat(ForAll([d:days], drives(Gina, d) == drives(Monday, d) == drives(Wednesday, d))) ::: (B)\nis_sat(ForAll([d:days], drives(Jerry, d) == drives(Tuesday, d) == drives(Friday, d))) ::: (C)\nis_sat(ForAll([d:days], drives(Gina, d) == drives(Monday, d) == drives("
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_3_16",
    "context": "Four people—Fritz, Gina, Helen, and Jerry—have formed a car pool to commute to work together six days a week from Monday through Saturday. Each day exactly one of the people drives. The schedule of the car pool's drivers for any given week must meet the following conditions: Each person drives on at least one day. No person drives on two consecutive days. Fritz does not drive on Monday. Jerry drives on Wednesday or Saturday or both, and he may also drive on other days. If Gina drives on Monday, then Jerry does not drive on Saturday.",
    "question": "If during one week Jerry drives on Wednesday and Saturday only, which one of the following must be true of that week?",
    "answer": "C",
    "options": [
      "A) Fritz drives on Tuesday.",
      "B) Gina drives on Friday.",
      "C) Helen drives on Monday.",
      "D) Fritz drives on exactly two days.",
      "E) Helen drives on exactly two days."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fritz, Gina, Helen, Jerry])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndrives = Function([people, days] -> [bool])\n\n# Constraints\nForAll([p:people], Count([d:days], drives(p, d)) >= 1) ::: Each person drives on at least one day\nForAll([p:people], Count([d:days], drives(p, d)) <= 1) ::: No person drives on two consecutive days\nNot(drives(Fritz, Monday)) ::: Fritz does not drive on Monday\nAnd(drives(Jerry, Wednesday), drives(Jerry, Saturday)) ::: Jerry drives on Wednesday or Saturday or both, and he may also drive on other days\nImplies(drives(Gina, Monday), Not(drives(Jerry, Saturday))) ::: If Gina drives on Monday, then Jerry does not drive on Saturday\n\n# Options\nQuestion ::: If during one week Jerry drives on Wednesday and Saturday only, which one of the following must be true of that week?\nis_sat(ForAll([d:days], drives(Fritz, d) == drives(Tuesday, d))) ::: (A)\nis_sat(ForAll([d:days], drives(Gina, d) == drives(Friday, d))) ::: (B)\nis_sat(ForAll([d:days], drives(Helen, d) == drives(Monday, d))) ::: (C)\nis_sat(ForAll([d:days], drives(Fritz, d) == drives(Tuesday, d))) ::: (D)\nis_sat(ForAll([d:days], drives(Helen, d) == drives(Tuesday, d))) :"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_3_17",
    "context": "Four people—Fritz, Gina, Helen, and Jerry—have formed a car pool to commute to work together six days a week from Monday through Saturday. Each day exactly one of the people drives. The schedule of the car pool's drivers for any given week must meet the following conditions: Each person drives on at least one day. No person drives on two consecutive days. Fritz does not drive on Monday. Jerry drives on Wednesday or Saturday or both, and he may also drive on other days. If Gina drives on Monday, then Jerry does not drive on Saturday.",
    "question": "If during one week Gina drives on Monday and Saturday only, which one of the following must be true of that week?",
    "answer": "A",
    "options": [
      "A) One other person besides Gina drives on exactly two days.",
      "B) The person who drives on Wednesday does not drive on Friday.",
      "C) Helen drives on a day immediately before a day on which Fritz drives.",
      "D) Either Fritz or Helen drives on Friday.",
      "E) Either Helen or Jerry drives on Tuesday."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fritz, Gina, Helen, Jerry])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndrives = Function([people, days] -> [bool])\n\n# Constraints\nForAll([p:people], Count([d:days], drives(p, d)) >= 1) ::: Each person drives on at least one day\nForAll([p:people], Count([d:days], drives(p, d)) <= 1) ::: No person drives on two consecutive days\nNot(drives(Fritz, Monday)) ::: Fritz does not drive on Monday\nAnd(drives(Jerry, Wednesday), drives(Jerry, Saturday)) ::: Jerry drives on Wednesday or Saturday or both, and he may also drive on other days\nImplies(drives(Gina, Monday), Not(drives(Jerry, Saturday))) ::: If Gina drives on Monday, then Jerry does not drive on Saturday\n\n# Options\nQuestion ::: If during one week Gina drives on Monday and Saturday only, which one of the following must be true of that week?\nis_valid(Exists([p:people], Count([d:days], drives(p, d)) == 2))) ::: (A)\nis_valid(Exists([d:days], drives(Jerry, d) && Not(drives(d, Friday)))) ::: (B)\nis_valid(Exists([d:days], drives(Helen, d) && drives(Fritz, d + 1))) ::: (C)\nis_valid(Exists([d:days], drives(Fritz, d) || drives(Helen, d))) ::: (D)\nis_valid(Exists([d:days], drives(Helen, d) || drives(Jerry, d))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_3_18",
    "context": "Four people—Fritz, Gina, Helen, and Jerry—have formed a car pool to commute to work together six days a week from Monday through Saturday. Each day exactly one of the people drives. The schedule of the car pool's drivers for any given week must meet the following conditions: Each person drives on at least one day. No person drives on two consecutive days. Fritz does not drive on Monday. Jerry drives on Wednesday or Saturday or both, and he may also drive on other days. If Gina drives on Monday, then Jerry does not drive on Saturday.",
    "question": "Which one of the following CANNOT be true of one week's schedule of drivers?",
    "answer": "B",
    "options": [
      "A) Fritz drives on Tuesday and Gina drives on Friday.",
      "B) Gina drives on Monday and Jerry drives on Tuesday.",
      "C) Gina drives on Monday and Jerry drives on Friday.",
      "D) Helen drives on Monday and Jerry drives on Tuesday.",
      "E) Helen drives on Tuesday and Jerry drives on Friday."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fritz, Gina, Helen, Jerry])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndrives = Function([people, days] -> [bool])\n\n# Constraints\nForAll([p:people], Count([d:days], drives(p, d)) >= 1) ::: Each person drives on at least one day\nForAll([p:people], Count([d:days], drives(p, d)) <= 1) ::: No person drives on two consecutive days\nForAll([d:days], Implies(drives(Fritz, d), d!= Monday)) ::: Fritz does not drive on Monday\nAnd(drives(Jerry, Wednesday), drives(Jerry, Saturday)) ::: Jerry drives on Wednesday or Saturday or both\nForAll([d:days], Implies(drives(Gina, Monday), Not(drives(Jerry, Saturday)))) ::: If Gina drives on Monday, then Jerry does not drive on Saturday\n\n# Options\nQuestion ::: Which one of the following CANNOT be true of one week's schedule of drivers?\nis_exception(is_sat(And(drives(Fritz, Tuesday), drives(Gina, Friday)))) ::: (A)\nis_exception(is_sat(And(drives(Gina, Monday), drives(Jerry, Tuesday)))) ::: (B)\nis_exception(is_sat(And(drives(Gina, Monday), drives(Jerry, Friday)))) ::: (C)\nis_exception(is_sat(And(drives(Helen, Monday), drives(Jerry, Tuesday)))) ::: (D)\nis_exception(is_sat(And(drives(Helen, Tuesday"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_3_19",
    "context": "Four people—Fritz, Gina, Helen, and Jerry—have formed a car pool to commute to work together six days a week from Monday through Saturday. Each day exactly one of the people drives. The schedule of the car pool's drivers for any given week must meet the following conditions: Each person drives on at least one day. No person drives on two consecutive days. Fritz does not drive on Monday. Jerry drives on Wednesday or Saturday or both, and he may also drive on other days. If Gina drives on Monday, then Jerry does not drive on Saturday.",
    "question": "If during one week Fritz drives exactly twice but he drives on neither Tuesday nor Wednesday, which one of the following could be true of that week?",
    "answer": "E",
    "options": [
      "A) One person drives exactly three times during the week.",
      "B) Three people drive exactly one time each during the week.",
      "C) Jerry drives on no day that is immediately before a day on which Fritz drives.",
      "D) Gina drives on Wednesday.",
      "E) Jerry drives on Friday."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fritz, Gina, Helen, Jerry])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndrives = Function([people, days] -> [bool])\n\n# Constraints\nForAll([p:people], Count([d:days], drives(p, d)) >= 1) ::: Each person drives on at least one day\nForAll([p:people], Count([d:days], drives(p, d)) <= 6) ::: No person drives on two consecutive days\nNot(drives(Fritz, Monday)) ::: Fritz does not drive on Monday\nAnd(drives(Jerry, Wednesday), drives(Jerry, Saturday)) ::: Jerry drives on Wednesday or Saturday or both, and he may also drive on other days\nImplies(drives(Gina, Monday), Not(drives(Jerry, Saturday))) ::: If Gina drives on Monday, then Jerry does not drive on Saturday\n\n# Options\nQuestion ::: If during one week Fritz drives exactly twice but he drives on neither Tuesday nor Wednesday, which one of the following could be true of that week?\nis_sat(ForAll([p:people], Count([d:days], drives(p, d)) == 3)) ::: (A)\nis_sat(ForAll([p:people], Count([d:days], drives(p, d)) == 1)) ::: (B)\nis_sat(ForAll([d:days], Not(drives(Jerry, d) && drives(Fritz, d - 1)))) ::: (C)\nis_sat(drives(Gina, Wednesday)) ::: (D)\nis_sat(drives(Jerry, Friday)) ::: (E)\n------\nProblem:\nA"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_4_20",
    "context": "Five experienced plumbers—Frank, Gene, Jill, Kathy, and Mark—and four inexperienced plumbers—Roberta, Sally, Tim, and Vernon—must decide which of them will be assigned to four work teams of exactly two plumbers each. Assignments must meet the following restrictions: Each plumber is assigned to at most one team. At least one plumber on each team must be experienced. Neither Mark nor Roberta nor Vernon can be assigned to a team with Frank. If Tim is assigned to a team, either Gene or Kathy must be assigned to that team. Jill cannot be assigned to a team with Roberta.",
    "question": "Which one of the following is an inexperienced plumber who can be assigned to a team with Frank?",
    "answer": "C",
    "options": [
      "A) Kathy",
      "B) Roberta",
      "C) Sally",
      "D) Tim",
      "E) Vernon"
    ],
    "raw_logic_programs": [
      "# Declarations\nplumbers = EnumSort([Frank, Gene, Jill, Kathy, Mark, Roberta, Sally, Tim, Vernon])\nteams = EnumSort([A, B, C, D])\nassigned = Function([plumbers, teams] -> [bool])\n\n# Constraints\nForAll([p:plumbers], Count([t:teams], assigned(p, t)) <= 1) ::: Each plumber is assigned to at most one team\nForAll([t:teams], Count([p:plumbers], assigned(p, t)) == 2) ::: Each team has exactly two plumbers\nForAll([t:teams], Count([p:plumbers], And(assigned(p, t), p is experienced)) >= 1) ::: At least one plumber on each team must be experienced\nForAll([t:teams], Implies(assigned(Frank, t), Not(assigned(Mark, t)))) ::: Neither Mark nor Roberta nor Vernon can be assigned to a team with Frank\nForAll([t:teams], Implies(assigned(Tim, t), Or(assigned(Gene, t), assigned(Kathy, t)))) ::: If Tim is assigned to a team, either Gene or Kathy must be assigned to that team\nForAll([t:teams], Implies(assigned(Jill, t), Not(assigned(Roberta, t)))) ::: Jill cannot be assigned to a team with Roberta\n\n# Options\nQuestion ::: Which one of the following is an inexperienced plumber who can be assigned to a team with Frank?\nis_sat(ForAll([t:teams], Implies(assigned(Frank, t), Not(assigned(Kathy, t))))) ::: A) Kathy\nis_sat(ForAll([t:teams], Implies(ass"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_4_21",
    "context": "Five experienced plumbers—Frank, Gene, Jill, Kathy, and Mark—and four inexperienced plumbers—Roberta, Sally, Tim, and Vernon—must decide which of them will be assigned to four work teams of exactly two plumbers each. Assignments must meet the following restrictions: Each plumber is assigned to at most one team. At least one plumber on each team must be experienced. Neither Mark nor Roberta nor Vernon can be assigned to a team with Frank. If Tim is assigned to a team, either Gene or Kathy must be assigned to that team. Jill cannot be assigned to a team with Roberta.",
    "question": "Which one of the following is a pair of plumbers who can be assigned together to a team?",
    "answer": "C",
    "options": [
      "A) Frank and Roberta",
      "B) Frank and Vernon",
      "C) Jill and Mark",
      "D) Roberta and Tim",
      "E) Sally and Vernon"
    ],
    "raw_logic_programs": [
      "# Declarations\nplumbers = EnumSort([Frank, Gene, Jill, Kathy, Mark, Roberta, Sally, Tim, Vernon])\nteams = EnumSort([A, B, C, D])\nassigned = Function([plumbers, teams] -> [bool])\n\n# Constraints\nForAll([p:plumbers], Count([t:teams], assigned(p, t)) <= 1) ::: Each plumber is assigned to at most one team\nForAll([t:teams], Count([p:plumbers], assigned(p, t)) == 2) ::: Each team has exactly two plumbers\nForAll([t:teams], Or(assigned(Frank, t), assigned(Gene, t), assigned(Jill, t), assigned(Kathy, t), assigned(Mark, t))) ::: At least one plumber on each team must be experienced\nForAll([t:teams], Implies(assigned(Frank, t), Not(assigned(Mark, t)))) ::: Neither Mark nor Roberta nor Vernon can be assigned to a team with Frank\nForAll([t:teams], Implies(assigned(Tim, t), Or(assigned(Gene, t), assigned(Kathy, t)))) ::: If Tim is assigned to a team, either Gene or Kathy must be assigned to that team\nForAll([t:teams], Implies(assigned(Jill, t), Not(assigned(Roberta, t)))) ::: Jill cannot be assigned to a team with Roberta\n\n# Options\nQuestion ::: Which one of the following is a pair of plumbers who can be assigned together to a team?\nis_sat(And(assigned(Frank, A), assigned(Roberta, A))) ::: (A)\nis_sat(And(assigned(Frank, A), assigned(Vernon, A))) ::: (B)\nis_sat(And(assigned(Jill, A), assigned(Mark, A))) ::: (C)\nis_sat(And(assigned(Roberta, A), assigned(Tim, A))) ::: (D)\nis_sat(And(assigned(Sally, A), assigned(Vernon, A))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_4_22",
    "context": "Five experienced plumbers—Frank, Gene, Jill, Kathy, and Mark—and four inexperienced plumbers—Roberta, Sally, Tim, and Vernon—must decide which of them will be assigned to four work teams of exactly two plumbers each. Assignments must meet the following restrictions: Each plumber is assigned to at most one team. At least one plumber on each team must be experienced. Neither Mark nor Roberta nor Vernon can be assigned to a team with Frank. If Tim is assigned to a team, either Gene or Kathy must be assigned to that team. Jill cannot be assigned to a team with Roberta.",
    "question": "If Tim is assigned to a team, and if Sally is assigned to a team with a plumber who could have been assigned to a team with Tim, then the only plumber with whom Frank could be assigned to a team is",
    "answer": "B",
    "options": [
      "A) Gene",
      "B) Jill",
      "C) Mark",
      "D) Roberta",
      "E) Vernon"
    ],
    "raw_logic_programs": [
      "# Declarations\nplumbers = EnumSort([Frank, Gene, Jill, Kathy, Mark, Roberta, Sally, Tim, Vernon])\nteams = EnumSort([A, B, C, D])\nassigned = Function([plumbers, teams] -> [bool])\n\n# Constraints\nForAll([p:plumbers], Count([t:teams], assigned(p, t)) <= 1) ::: Each plumber is assigned to at most one team\nForAll([t:teams], Count([p:plumbers], assigned(p, t)) == 2) ::: At least one plumber on each team must be experienced\nForAll([t:teams], Implies(assigned(Frank, t), Not(assigned(Mark, t)))) ::: Neither Mark nor Roberta nor Vernon can be assigned to a team with Frank\nForAll([t:teams], Implies(assigned(Tim, t), Or(assigned(Gene, t), assigned(Kathy, t)))) ::: If Tim is assigned to a team, either Gene or Kathy must be assigned to that team\nForAll([t:teams], Implies(assigned(Jill, t), Not(assigned(Roberta, t)))) ::: Jill cannot be assigned to a team with Roberta\n\n# Options\nQuestion ::: If Tim is assigned to a team, and if Sally is assigned to a team with a plumber who could have been assigned to a team with Tim, then the only plumber with whom Frank could be assigned to a team is\nis_valid(Exists([t:teams], assigned(Tim, t))) ::: Tim is assigned to a team\nis_valid(Exists([t:teams], assigned(Sally, t))) ::: Sally is assigned to a team\nis_valid(Exists([t:teams], assigned(Sally, t) && assigned(Tim, t))) ::: Sally is assigned to a team with a plumber who could have been assigned to a team with Tim\nis_valid(Exists([t:teams], assigned(Frank, t))) ::: Frank could be assigned to a team\nis_valid(Exists([t:teams], assigned(Frank, t) && assigned(Gene, t))) ::: Gene is the only plumber with whom Frank could be assigned to a team"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_4_23",
    "context": "Five experienced plumbers—Frank, Gene, Jill, Kathy, and Mark—and four inexperienced plumbers—Roberta, Sally, Tim, and Vernon—must decide which of them will be assigned to four work teams of exactly two plumbers each. Assignments must meet the following restrictions: Each plumber is assigned to at most one team. At least one plumber on each team must be experienced. Neither Mark nor Roberta nor Vernon can be assigned to a team with Frank. If Tim is assigned to a team, either Gene or Kathy must be assigned to that team. Jill cannot be assigned to a team with Roberta.",
    "question": "If Gene is not assigned to a team, then Jill must be assigned to a team with",
    "answer": "A",
    "options": [
      "A) Vernon",
      "B) Tim",
      "C) Mark",
      "D) Kathy",
      "E) Frank"
    ],
    "raw_logic_programs": [
      "# Declarations\nplumbers = EnumSort([Frank, Gene, Jill, Kathy, Mark, Roberta, Sally, Tim, Vernon])\nteams = EnumSort([A, B, C, D])\nassigned = Function([plumbers, teams] -> [bool])\n\n# Constraints\nForAll([p:plumbers], Count([t:teams], assigned(p, t)) <= 1) ::: Each plumber is assigned to at most one team\nForAll([t:teams], Count([p:plumbers], assigned(p, t)) == 2) ::: Each team has exactly two plumbers\nForAll([t:teams], Count([p:plumbers], And(assigned(p, t), p == Frank)) == 0) ::: Neither Mark nor Roberta nor Vernon can be assigned to a team with Frank\nForAll([t:teams], Count([p:plumbers], And(assigned(p, t), p == Gene)) == 0) ::: If Tim is assigned to a team, either Gene or Kathy must be assigned to that team\nForAll([t:teams], Count([p:plumbers], And(assigned(p, t), p == Jill)) == 0) ::: Jill cannot be assigned to a team with Roberta\n\n# Options\nQuestion ::: If Gene is not assigned to a team, then Jill must be assigned to a team with\nis_sat(ForAll([t:teams], Count([p:plumbers], And(assigned(p, t), p == Vernon)) == 0)) ::: (A)\nis_sat(ForAll([t:teams], Count([p:plumbers], And(assigned(p, t), p == Tim)) == 0)) ::: (B)\nis_sat(ForAll([t:teams], Count([p:plumbers], And(assigned(p, t), p == Mark)) == 0)) ::: (C)\nis_sat(ForAll([t:teams], Count([p:plumbers], And(assigned(p, t), p == Kathy)) == 0)) ::: (D)\nis_sat(ForAll([t:teams], Count([p:plumbers],"
    ]
  },
  {
    "id": "ar_lsat_199506_4-G_4_24",
    "context": "Five experienced plumbers—Frank, Gene, Jill, Kathy, and Mark—and four inexperienced plumbers—Roberta, Sally, Tim, and Vernon—must decide which of them will be assigned to four work teams of exactly two plumbers each. Assignments must meet the following restrictions: Each plumber is assigned to at most one team. At least one plumber on each team must be experienced. Neither Mark nor Roberta nor Vernon can be assigned to a team with Frank. If Tim is assigned to a team, either Gene or Kathy must be assigned to that team. Jill cannot be assigned to a team with Roberta.",
    "question": "If all of the inexperienced plumbers are assigned to teams, and neither Roberta nor Tim nor Vernon is assigned to a team with Gene, then Sally must be assigned to a team with either",
    "answer": "A",
    "options": [
      "A) Frank or else Gene",
      "B) Frank or else Mark",
      "C) Gene or else Mark",
      "D) Jill or else Kathy",
      "E) Jill or else Mark"
    ],
    "raw_logic_programs": [
      "# Declarations\nplumbers = EnumSort([Frank, Gene, Jill, Kathy, Mark, Roberta, Sally, Tim, Vernon])\nteams = EnumSort([A, B, C, D])\nassigned = Function([plumbers, teams] -> [bool])\n\n# Constraints\nForAll([p:plumbers], Count([t:teams], assigned(p, t)) <= 1) ::: Each plumber is assigned to at most one team\nForAll([t:teams], Count([p:plumbers], assigned(p, t)) == 2) ::: At least one plumber on each team must be experienced\nForAll([t:teams], Implies(assigned(Frank, t), Not(assigned(Mark, t)))) ::: Neither Mark nor Roberta nor Vernon can be assigned to a team with Frank\nForAll([t:teams], Implies(assigned(Tim, t), Or(assigned(Gene, t), assigned(Kathy, t)))) ::: If Tim is assigned to a team, either Gene or Kathy must be assigned to that team\nForAll([t:teams], Implies(assigned(Jill, t), Not(assigned(Roberta, t)))) ::: Jill cannot be assigned to a team with Roberta\n\n# Options\nQuestion ::: If all of the inexperienced plumbers are assigned to teams, and neither Roberta nor Tim nor Vernon is assigned to a team with Gene, then Sally must be assigned to a team with either\nis_sat(ForAll([t:teams], Implies(assigned(Sally, t), Or(assigned(Frank, t), assigned(Gene, t))))) ::: (A)\nis_sat(ForAll([t:teams], Implies(assigned(Sally, t), Or(assigned(Frank, t), assigned(Mark, t))))) ::: (B)\nis_sat(ForAll([t:teams], Implies(assigned(Sally, t), Or(assigned(Gene, t), assigned(Mark, t))))) ::: (C)\nis_sat(ForAll([t:teams], Implies(assigned(Sally, t), Or(assigned(Jill, t),"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_1_1",
    "context": "Eight new students—R, S, T, V, W, X, Y, Z—are being divided among exactly three classes—class 1, class 2, and class 3. Classes 1 and 2 will gain three new students each; class 3 will gain two new students. The following restrictions apply: R must be added to class 1. S must be added to class 3. Neither S nor W can be added to the same class as Y. V cannot be added to the same class as Z. If T is added to class 1, Z must also be added to class 1.",
    "question": "Which one of the following is an acceptable assignment of students to the three classes?",
    "answer": "D",
    "options": [
      "A) R, T, Y V, W, X S, Z",
      "B) R, T, Z S, V, Y W, X",
      "C) R, W, X V, Y, Z S, T",
      "D) R, X, Z T, V, Y S, W",
      "E) R, X, Z V, W, Y S, T"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([R, S, T, V, W, X, Y, Z])\nclasses = EnumSort([class_1, class_2, class_3])\nadded = Function([students, classes] -> [bool])\n\n# Constraints\nForAll([s:students], Count([c:classes], added(s, c)) == 1) ::: each student is added to exactly one class\nAnd(added(R, class_1), added(S, class_3)) ::: R must be added to class 1; S must be added to class 3\nForAll([s:students], Implies(added(S, s), Not(added(W, s)))) ::: Neither S nor W can be added to the same class as Y\nForAll([s:students], Implies(added(V, s), Not(added(Z, s)))) ::: V cannot be added to the same class as Z\nAnd(added(T, class_1), added(Z, class_1)) ::: If T is added to class 1, Z must also be added to class 1\n\n# Options\nQuestion ::: Which one of the following is an acceptable assignment of students to the three classes?\nis_sat(And(added(R, class_1), added(T, class_1), added(Y, class_1), added(V, class_2), added(W, class_2), added(X, class_2), added(S, class_3), added(Z, class_3))) ::: A) R, T, Y V, W, X S, Z\nis_sat(And(added(R, class_1), added(T, class_1), added(Z, class_1), added(S, class_2), added(V, class_2), added(Y, class_2), added(W, class_3), added(X, class_3))) ::: B) R, T, Z S, V, Y W, X\nis_sat(And(added(R, class_1), added(W, class_1), added(X, class_1), added(V, class_2), added(Y, class_2), added(Z, class_2), added(S, class_3), added(T, class_3))) :"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_1_2",
    "context": "Eight new students—R, S, T, V, W, X, Y, Z—are being divided among exactly three classes—class 1, class 2, and class 3. Classes 1 and 2 will gain three new students each; class 3 will gain two new students. The following restrictions apply: R must be added to class 1. S must be added to class 3. Neither S nor W can be added to the same class as Y. V cannot be added to the same class as Z. If T is added to class 1, Z must also be added to class 1.",
    "question": "Which one of the following is a complete and accurate list of classes any one of which could be the class to which V is added?",
    "answer": "E",
    "options": [
      "A) class 1",
      "B) class 3",
      "C) class 1, class 3",
      "D) class 2, class 3",
      "E) class 1, class 2, class 3"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([R, S, T, V, W, X, Y, Z])\nclasses = EnumSort([class_1, class_2, class_3])\nadded = Function([students, classes] -> [bool])\n\n# Constraints\nForAll([s:students], Count([c:classes], added(s, c)) == 1) ::: each student is added to exactly one class\nAnd(added(R, class_1), Count([s:students], added(s, class_1)) == 3) ::: Classes 1 and 2 will gain three new students each\nAnd(added(S, class_3), Count([s:students], added(s, class_3)) == 2) ::: class 3 will gain two new students\nImplies(added(S, c), Not(added(W, c))) ::: Neither S nor W can be added to the same class as Y\nImplies(added(V, c), Not(added(Z, c))) ::: V cannot be added to the same class as Z\nImplies(added(T, class_1), added(Z, class_1)) ::: If T is added to class 1, Z must also be added to class 1\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of classes any one of which could be the class to which V is added?\nis_sat(ForAll([c:classes], added(V, c) == added(class_1, c))) ::: A) class 1\nis_sat(ForAll([c:classes], added(V, c) == added(class_3, c))) ::: B) class 3\nis_sat(ForAll([c:classes], added(V, c) == added(class_1, c) || added(V, c) == added(class_3, c))) ::: C) class 1, class 3\nis_sat(ForAll([c:classes], added(V, c) == added(class_2, c) || added(V, c) == added(class_3, c))) ::: D) class 2, class 3\nis_sat(ForAll([c:classes], added(V, c) == added(class_1, c)"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_1_3",
    "context": "Eight new students—R, S, T, V, W, X, Y, Z—are being divided among exactly three classes—class 1, class 2, and class 3. Classes 1 and 2 will gain three new students each; class 3 will gain two new students. The following restrictions apply: R must be added to class 1. S must be added to class 3. Neither S nor W can be added to the same class as Y. V cannot be added to the same class as Z. If T is added to class 1, Z must also be added to class 1.",
    "question": "If X is added to class 1, which one of the following is a student who must be added to class 2?",
    "answer": "A",
    "options": [
      "A) T",
      "B) V",
      "C) W",
      "D) Y",
      "E) Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([R, S, T, V, W, X, Y, Z])\nclasses = EnumSort([class_1, class_2, class_3])\nadded = Function([students, classes] -> [bool])\n\n# Constraints\nForAll([s:students], Count([c:classes], added(s, c)) == 1) ::: each student is added to exactly one class\nAnd(added(R, class_1), added(S, class_3)) ::: R must be added to class 1; S must be added to class 3\nForAll([s:students], Implies(added(s, class_1), Not(added(s, class_2)))) ::: no student is added to both class 1 and class 2\nForAll([s:students], Implies(added(s, class_2), Not(added(s, class_3)))) ::: no student is added to both class 2 and class 3\nForAll([s:students], Implies(added(s, class_3), Not(added(s, class_1)))) ::: no student is added to both class 3 and class 1\nCount([s:students], added(s, class_1)) == 3 ::: Classes 1 and 2 will gain three new students each\nCount([s:students], added(s, class_2)) == 3 ::: Classes 1 and 2 will gain three new students each\nCount([s:students], added(s, class_3)) == 2 ::: Class 3 will gain two new students\nForAll([s:students], Implies(added(s, class_1), Not(added(s, class_2)))) ::: no student is added to both class 1 and class 2\nForAll([s:students], Implies(added(s, class_2), Not(added(s, class_3)))) ::: no student is added to both class 2 and class 3\nForAll([s:students], Implies(added(s, class_3), Not(added(s, class_1)))) ::: no student is added to both class 3 and class 1\nForAll([s:students], Implies(added(s, class_1), Not(added(s, class"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_1_4",
    "context": "Eight new students—R, S, T, V, W, X, Y, Z—are being divided among exactly three classes—class 1, class 2, and class 3. Classes 1 and 2 will gain three new students each; class 3 will gain two new students. The following restrictions apply: R must be added to class 1. S must be added to class 3. Neither S nor W can be added to the same class as Y. V cannot be added to the same class as Z. If T is added to class 1, Z must also be added to class 1.",
    "question": "If X is added to class 3, each of the following is a pair of students who can be added to class 1 EXCEPT",
    "answer": "E",
    "options": [
      "A) Y and Z",
      "B) W and Z",
      "C) V and Y",
      "D) V and W",
      "E) T and Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([R, S, T, V, W, X, Y, Z])\nclasses = EnumSort([class_1, class_2, class_3])\nadded = Function([students, classes] -> [bool])\n\n# Constraints\nForAll([s:students], Count([c:classes], added(s, c)) == 1) ::: each student is added to exactly one class\nAnd(added(R, class_1), added(S, class_3)) ::: R must be added to class 1; S must be added to class 3\nForAll([s:students], Implies(added(s, class_1), Not(added(s, class_2)))) ::: no student is added to both class 1 and class 2\nForAll([s:students], Implies(added(s, class_2), Not(added(s, class_3)))) ::: no student is added to both class 2 and class 3\nForAll([s:students], Implies(added(s, class_3), Not(added(s, class_1)))) ::: no student is added to both class 3 and class 1\nCount([s:students], added(s, class_1)) == 3 ::: Classes 1 and 2 will gain three new students each\nCount([s:students], added(s, class_2)) == 3 ::: Classes 1 and 2 will gain three new students each\nCount([s:students], added(s, class_3)) == 2 ::: Class 3 will gain two new students\nForAll([s:students], Implies(added(s, class_3), Not(added(s, class_1)))) ::: no student is added to both class 3 and class 1\nForAll([s:students], Implies(added(s, class_3), Not(added(s, class_2)))) ::: no student is added to both class 3 and class 2\nForAll([s:students], Implies(added(s, class_1), Not(added(s, class_3)))) ::: no student is added to both class 1 and class 3\nForAll([s:students], Implies(added(s, class_2), Not(added(s, class"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_1_5",
    "context": "Eight new students—R, S, T, V, W, X, Y, Z—are being divided among exactly three classes—class 1, class 2, and class 3. Classes 1 and 2 will gain three new students each; class 3 will gain two new students. The following restrictions apply: R must be added to class 1. S must be added to class 3. Neither S nor W can be added to the same class as Y. V cannot be added to the same class as Z. If T is added to class 1, Z must also be added to class 1.",
    "question": "If T is added to class 3, which one of the following is a student who must be added to class 2?",
    "answer": "C",
    "options": [
      "A) V",
      "B) W",
      "C) X",
      "D) Y",
      "E) Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([R, S, T, V, W, X, Y, Z])\nclasses = EnumSort([class_1, class_2, class_3])\nadded = Function([students, classes] -> [bool])\n\n# Constraints\nForAll([s:students], Count([c:classes], added(s, c)) == 1) ::: each student is added to exactly one class\nAnd(added(R, class_1), added(S, class_3)) ::: R must be added to class 1; S must be added to class 3\nForAll([s:students], Implies(added(s, class_1), Not(added(s, class_2)))) ::: no student is added to both class 1 and class 2\nForAll([s:students], Implies(added(s, class_2), Not(added(s, class_3)))) ::: no student is added to both class 2 and class 3\nForAll([s:students], Implies(added(s, class_3), Not(added(s, class_1)))) ::: no student is added to both class 3 and class 1\nForAll([s:students], Implies(added(s, class_1), Not(added(s, class_3)))) ::: no student is added to both class 1 and class 3\nForAll([s:students], Implies(added(s, class_2), Not(added(s, class_1)))) ::: no student is added to both class 2 and class 1\nForAll([s:students], Implies(added(s, class_3), Not(added(s, class_2)))) ::: no student is added to both class 3 and class 2\nForAll([s:students], Implies(added(s, class_1), Not(added(s, class_2)))) ::: no student is added to both class 1 and class 2\nForAll([s:students], Implies(added(s, class_2), Not(added(s, class_3)))) ::: no student is added to both class 2 and class 3\nForAll([s:students], Implies(added(s, class_3), Not(added(s, class_1)))) ::: no student"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_1_6",
    "context": "Eight new students—R, S, T, V, W, X, Y, Z—are being divided among exactly three classes—class 1, class 2, and class 3. Classes 1 and 2 will gain three new students each; class 3 will gain two new students. The following restrictions apply: R must be added to class 1. S must be added to class 3. Neither S nor W can be added to the same class as Y. V cannot be added to the same class as Z. If T is added to class 1, Z must also be added to class 1.",
    "question": "Which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) If T and X are added to class 2, V is added to class 3.",
      "B) If V and W are added to class 1, T is added to class 3.",
      "C) If V and W are added to class 1, Z is added to class 3.",
      "D) If V and X are added to class 1, W is added to class 3.",
      "E) If Y and Z are added to class 2, X is added to class 2."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([R, S, T, V, W, X, Y, Z])\nclasses = EnumSort([class_1, class_2, class_3])\nadded = Function([students, classes] -> [bool])\n\n# Constraints\nForAll([s:students], Count([c:classes], added(s, c)) == 1) ::: Eight new students—R, S, T, V, W, X, Y, Z—are being divided among exactly three classes—class 1, class 2, and class 3\nAnd(added(R, class_1), Count([s:students], added(s, class_1)) == 3) ::: Classes 1 and 2 will gain three new students each; class 3 will gain two new students\nAnd(added(S, class_3), Count([s:students], added(s, class_3)) == 2) ::: Classes 1 and 2 will gain three new students each; class 3 will gain two new students\nImplies(added(R, class_1), added(S, class_3)) ::: R must be added to class 1\nImplies(added(S, class_3), added(R, class_1)) ::: S must be added to class 3\nImplies(added(S, class_3), Not(added(W, class_3))) ::: Neither S nor W can be added to the same class as Y\nImplies(added(W, class_3), Not(added(S, class_3))) ::: Neither S nor W can be added to the same class as Y\nImplies(added(V, class_1), Not(added(Z, class_1))) ::: V cannot be added to the same class as Z\nImplies(added(Z, class_1), Not(added(V, class_1))) ::: V cannot be added to the same class as Z\nImplies(added(T, class_1), added(Z, class_1)) ::: If T is added to class 1, Z must also be added to class 1\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([c:classes], And(added(T, c), added(X, c), Not(added(V"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_2_7",
    "context": "Four lions—F, G, H, J—and two tigers—K and M—will be assigned to exactly six stalls, one animal per stall. The stalls are arranged as follows: First Row: 1 2 3 Second Row: 4 5 6 The only stalls that face each other are stalls 1 and 4, stalls 2 and 5, and stalls 3 and 6. The following conditions apply: The tigers' stalls cannot face each other. A lion must be assigned to stall 1. H must be assigned to stall 6. J must be assigned to a stall numbered one higher than K's stall. K cannot be assigned to the stall that faces H's stall.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) F is assigned to an even-numbered stall.",
      "B) F is assigned to stall 1.",
      "C) J is assigned to stall 2 or else stall 3.",
      "D) J is assigned to stall 3 or else stall 4.",
      "E) K is assigned to stall 2 or else stall 4."
    ],
    "raw_logic_programs": [
      "# Declarations\nanimals = EnumSort([F, G, H, J, K, M])\nstalls = EnumSort([1, 2, 3, 4, 5, 6])\nassigned = Function([animals, stalls] -> [bool])\n\n# Constraints\nForAll([a:animals], Count([s:stalls], assigned(a, s)) == 1) ::: one animal per stall\nForAll([s:stalls], Implies(assigned(K, s), Not(assigned(M, s)))) ::: The tigers' stalls cannot face each other\nassigned(F, 1) ::: A lion must be assigned to stall 1\nassigned(H, 6) ::: H must be assigned to stall 6\nAnd(assigned(J, s), Count([s:stalls], assigned(K, s)) == Count([s:stalls], s == s + 1)) ::: J must be assigned to a stall numbered one higher than K's stall\nForAll([s:stalls], Implies(assigned(K, s), Not(assigned(H, s)))) ::: K cannot be assigned to the stall that faces H's stall\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([s:stalls], assigned(F, s) && s % 2 == 0)) ::: (A)\nis_valid(Exists([s:stalls], assigned(F, s) && s == 1)) ::: (B)\nis_valid(Exists([s:stalls], assigned(J, s) && s == 2 || s == 3)) ::: (C)\nis_valid(Exists([s:stalls], assigned(J, s) && s == 3 || s == 4)) ::: (D)\nis_valid(Exists([s:stalls], assigned(K, s) && s == 2 || s == 4)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_2_8",
    "context": "Four lions—F, G, H, J—and two tigers—K and M—will be assigned to exactly six stalls, one animal per stall. The stalls are arranged as follows: First Row: 1 2 3 Second Row: 4 5 6 The only stalls that face each other are stalls 1 and 4, stalls 2 and 5, and stalls 3 and 6. The following conditions apply: The tigers' stalls cannot face each other. A lion must be assigned to stall 1. H must be assigned to stall 6. J must be assigned to a stall numbered one higher than K's stall. K cannot be assigned to the stall that faces H's stall.",
    "question": "Which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) F's stall is numbered one higher than J's stall.",
      "B) H's stall faces M's stall.",
      "C) J is assigned to stall 4.",
      "D) K's stall faces J's stall.",
      "E) K's stall is in a different row than J's stall."
    ],
    "raw_logic_programs": [
      "# Declarations\nanimals = EnumSort([F, G, H, J, K, M])\nstalls = EnumSort([1, 2, 3, 4, 5, 6])\nassigned = Function([animals, stalls] -> [bool])\n\n# Constraints\nForAll([a:animals], Count([s:stalls], assigned(a, s)) == 1) ::: one animal per stall\nForAll([s:stalls], Count([a:animals], assigned(a, s)) == 1) ::: one animal per stall\nForAll([a:animals], Implies(assigned(a, 1), a == H)) ::: A lion must be assigned to stall 1\nForAll([a:animals], Implies(assigned(a, 6), a == H)) ::: H must be assigned to stall 6\nForAll([a:animals], Implies(assigned(a, 1), a!= K)) ::: K cannot be assigned to the stall that faces H's stall\nForAll([a:animals], Implies(assigned(a, 4), a!= K)) ::: K cannot be assigned to the stall that faces H's stall\nForAll([a:animals], Implies(assigned(a, 6), a!= K)) ::: K cannot be assigned to the stall that faces H's stall\nForAll([a:animals], Implies(assigned(a, 1), a!= M)) ::: The tigers' stalls cannot face each other\nForAll([a:animals], Implies(assigned(a, 4), a!= M)) ::: The tigers' stalls cannot face each other\nForAll([a:animals], Implies(assigned(a, 6), a!= M)) ::: The tigers' stalls cannot face each other\nForAll([a:animals], Implies(assigned(a, 2), a!= M)) ::: The tig"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_2_9",
    "context": "Four lions—F, G, H, J—and two tigers—K and M—will be assigned to exactly six stalls, one animal per stall. The stalls are arranged as follows: First Row: 1 2 3 Second Row: 4 5 6 The only stalls that face each other are stalls 1 and 4, stalls 2 and 5, and stalls 3 and 6. The following conditions apply: The tigers' stalls cannot face each other. A lion must be assigned to stall 1. H must be assigned to stall 6. J must be assigned to a stall numbered one higher than K's stall. K cannot be assigned to the stall that faces H's stall.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) A tiger is assigned to stall 2.",
      "B) A tiger is assigned to stall 5.",
      "C) K's stall is in a different row from M's stall.",
      "D) Each tiger is assigned to an even-numbered stall.",
      "E) Each lion is assigned to a stall that faces a tiger's stall."
    ],
    "raw_logic_programs": [
      "# Declarations\nanimals = EnumSort([F, G, H, J, K, M])\nstalls = EnumSort([1, 2, 3, 4, 5, 6])\nassigned = Function([animals, stalls] -> [bool])\n\n# Constraints\nForAll([a:animals], Count([s:stalls], assigned(a, s)) == 1) ::: one animal per stall\nForAll([s:stalls], Implies(assigned(K, s), Not(assigned(M, s)))) ::: The tigers' stalls cannot face each other\nassigned(F, 1) ::: A lion must be assigned to stall 1\nassigned(H, 6) ::: H must be assigned to stall 6\nassigned(J, s) -> (s == 7 - assigned(K, 7 - s)) ::: J must be assigned to a stall numbered one higher than K's stall\nassigned(K, s) -> (s!= 7 - assigned(H, 7 - s)) ::: K cannot be assigned to the stall that faces H's stall\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(ForAll([a:animals], assigned(a, 2))) ::: (A)\nis_valid(ForAll([a:animals], assigned(a, 5))) ::: (B)\nis_valid(ForAll([a:animals], assigned(a, s) -> (s % 2 == 0))) ::: (C)\nis_valid(ForAll([a:animals], assigned(a, s) -> (s % 2 == 0))) ::: (D)\nis_valid(ForAll([a:animals], assigned(a, s) -> (s % 2 == 0))) ::: (E)\n------\nProblem:\nA group of six people—F, G, H, J, K, and M—will be assigned to exactly six"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_2_10",
    "context": "Four lions—F, G, H, J—and two tigers—K and M—will be assigned to exactly six stalls, one animal per stall. The stalls are arranged as follows: First Row: 1 2 3 Second Row: 4 5 6 The only stalls that face each other are stalls 1 and 4, stalls 2 and 5, and stalls 3 and 6. The following conditions apply: The tigers' stalls cannot face each other. A lion must be assigned to stall 1. H must be assigned to stall 6. J must be assigned to a stall numbered one higher than K's stall. K cannot be assigned to the stall that faces H's stall.",
    "question": "If K's stall is in the same row as H's stall, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) F's stall is in the same row as J's stall.",
      "B) F is assigned to a lower-numbered stall than G.",
      "C) G is assigned to a lower-numbered stall than M.",
      "D) G's stall faces H's stall.",
      "E) M's stall is in the same row as G's stall."
    ],
    "raw_logic_programs": [
      "# Declarations\nanimals = EnumSort([F, G, H, J, K, M])\nstalls = EnumSort([1, 2, 3, 4, 5, 6])\nassigned = Function([animals, stalls] -> [bool])\n\n# Constraints\nForAll([a:animals], Count([s:stalls], assigned(a, s)) == 1) ::: one animal per stall\nForAll([s:stalls], Count([a:animals], assigned(a, s)) == 1) ::: one animal per stall\nForAll([a:animals], Implies(assigned(a, 1), a == H)) ::: A lion must be assigned to stall 1\nForAll([a:animals], Implies(assigned(a, 6), a == H)) ::: H must be assigned to stall 6\nForAll([a:animals], Implies(assigned(a, 6), a == H)) ::: H must be assigned to stall 6\nForAll([a:animals], Implies(assigned(a, 6), a == H)) ::: H must be assigned to stall 6\nForAll([a:animals], Implies(assigned(a, 6), a == H)) ::: H must be assigned to stall 6\nForAll([a:animals], Implies(assigned(a, 6), a == H)) ::: H must be assigned to stall 6\nForAll([a:animals], Implies(assigned(a, 6), a == H)) ::: H must be assigned to stall 6\nForAll([a:animals], Implies(assigned(a, 6), a == H)) ::: H must be assigned to stall 6\nForAll([a:animals], Implies(assigned(a, 6), a == H)) ::: H must be assigned to stall 6\nForAll([a:animals], Implies(assigned(a,"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_2_11",
    "context": "Four lions—F, G, H, J—and two tigers—K and M—will be assigned to exactly six stalls, one animal per stall. The stalls are arranged as follows: First Row: 1 2 3 Second Row: 4 5 6 The only stalls that face each other are stalls 1 and 4, stalls 2 and 5, and stalls 3 and 6. The following conditions apply: The tigers' stalls cannot face each other. A lion must be assigned to stall 1. H must be assigned to stall 6. J must be assigned to a stall numbered one higher than K's stall. K cannot be assigned to the stall that faces H's stall.",
    "question": "If J is assigned to stall 3, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) F is assigned to stall 2.",
      "B) F is assigned to stall 4.",
      "C) G is assigned to stall 1.",
      "D) G is assigned to stall 4.",
      "E) M is assigned to stall 5."
    ],
    "raw_logic_programs": [
      "# Declarations\nanimals = EnumSort([F, G, H, J, K, M])\nstalls = EnumSort([1, 2, 3, 4, 5, 6])\nassigned = Function([animals, stalls] -> [bool])\n\n# Constraints\nForAll([a:animals], Count([s:stalls], assigned(a, s)) == 1) ::: one animal per stall\nForAll([s:stalls], Implies(assigned(K, s), Not(assigned(M, s)))) ::: The tigers' stalls cannot face each other\nassigned(F, 1) ::: A lion must be assigned to stall 1\nassigned(H, 6) ::: H must be assigned to stall 6\nassigned(J, s) > assigned(K, s) ::: J must be assigned to a stall numbered one higher than K's stall\nassigned(K, s)!= assigned(H, s) ::: K cannot be assigned to the stall that faces H's stall\n\n# Options\nQuestion ::: If J is assigned to stall 3, which one of the following could be true?\nis_valid(ForAll([a:animals], Count([s:stalls], assigned(a, s)) == 1)) ::: A) F is assigned to stall 2.\nis_valid(ForAll([a:animals], Count([s:stalls], assigned(a, s)) == 1)) ::: B) F is assigned to stall 4.\nis_valid(ForAll([a:animals], Count([s:stalls], assigned(a, s)) == 1)) ::: C) G is assigned to stall 1.\nis_valid(ForAll([a:animals], Count([s:stalls], assigned(a, s)) == 1)) ::: D) G is assigned to stall 4.\nis_valid(ForAll([a:animals], Count([s:stalls"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_2_12",
    "context": "Four lions—F, G, H, J—and two tigers—K and M—will be assigned to exactly six stalls, one animal per stall. The stalls are arranged as follows: First Row: 1 2 3 Second Row: 4 5 6 The only stalls that face each other are stalls 1 and 4, stalls 2 and 5, and stalls 3 and 6. The following conditions apply: The tigers' stalls cannot face each other. A lion must be assigned to stall 1. H must be assigned to stall 6. J must be assigned to a stall numbered one higher than K's stall. K cannot be assigned to the stall that faces H's stall.",
    "question": "Which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) A tiger is assigned to stall 2.",
      "B) A tiger is assigned to stall 4.",
      "C) A tiger is assigned to stall 5.",
      "D) A lion is assigned to stall 3.",
      "E) A lion is assigned to stall 4."
    ],
    "raw_logic_programs": [
      "# Declarations\nanimals = EnumSort([F, G, H, J, K, M])\nstalls = EnumSort([1, 2, 3, 4, 5, 6])\nassigned = Function([animals, stalls] -> [bool])\n\n# Constraints\nForAll([a:animals], Count([s:stalls], assigned(a, s)) == 1) ::: one animal per stall\nForAll([s:stalls], Implies(assigned(K, s), Not(assigned(M, s)))) ::: The tigers' stalls cannot face each other\nassigned(F, 1) ::: A lion must be assigned to stall 1\nassigned(H, 6) ::: H must be assigned to stall 6\nassigned(J, s) -> (s > assigned(K, s) + 1) ::: J must be assigned to a stall numbered one higher than K's stall\nassigned(K, s) -> (s!= assigned(H, s) + 1) ::: K cannot be assigned to the stall that faces H's stall\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(ForAll([a:animals], assigned(a, 2))) ::: (A)\nis_valid(ForAll([a:animals], assigned(a, 4))) ::: (B)\nis_valid(ForAll([a:animals], assigned(a, 5))) ::: (C)\nis_valid(ForAll([a:animals], assigned(a, 3))) ::: (D)\nis_valid(ForAll([a:animals], assigned(a, 4))) ::: (E)\n------\nProblem:\nA company has six employees—F, G, H, J, K, and M—who are to be assigned to exactly six offices, one employee per office. The offices are arranged as follows: First Row: 1 2 3 Second Row: 4"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_3_13",
    "context": "On an undeveloped street, a developer will simultaneously build four houses on one side, numbered consecutively 1, 3, 5, and 7, and fos on the opposite side, numbered consecutively 2, 4, 6, and 8. Houses 2, 4, 6, and 8 will face houses 1, 3, 5, and 7, respectively. Each house will be exactly one of three styles—ranch, split-level, or Tudor—according to the following conditions: Adjacent houses are of different styles. No split-level house faces another split-level house. Every ranch house has at least one Tudor house adjacent to it. House 3 is a ranch house. House 6 is a split-level house.",
    "question": "Any of the following could be a Tudor house EXCEPT house",
    "answer": "D",
    "options": [
      "A) 1",
      "B) 2",
      "C) 4",
      "D) 7",
      "E) 8"
    ],
    "raw_logic_programs": [
      "# Declarations\nhouses = EnumSort([1, 3, 5, 7, 2, 4, 6, 8])\nstyles = EnumSort([ranch, split_level, Tudor])\nstyle = Function([houses] -> [styles])\n\n# Constraints\nForAll([h:houses], Count([s:styles], style(h) == s) == 1) ::: Each house will be exactly one of three styles\nForAll([h:houses], Implies(style(h) == style(h + 1), h!= 8)) ::: Adjacent houses are of different styles\nForAll([h:houses], Implies(style(h) == split_level, style(h + 1)!= split_level)) ::: No split-level house faces another split-level house\nForAll([h:houses], Implies(style(h) == ranch, Count([h2:houses], style(h2) == Tudor) > 0)) ::: Every ranch house has at least one Tudor house adjacent to it\nstyle(3) == ranch ::: House 3 is a ranch house\nstyle(6) == split_level ::: House 6 is a split-level house\n\n# Options\nQuestion ::: Any of the following could be a Tudor house EXCEPT house\nis_exception(is_sat(style(1) == Tudor)) ::: A) 1\nis_exception(is_sat(style(2) == Tudor)) ::: B) 2\nis_exception(is_sat(style(4) == Tudor)) ::: C) 4\nis_exception(is_sat(style(7) == Tudor)) ::: D) 7\nis_exception(is_sat(style(8) == Tudor)) ::: E) 8\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_3_14",
    "context": "On an undeveloped street, a developer will simultaneously build four houses on one side, numbered consecutively 1, 3, 5, and 7, and fos on the opposite side, numbered consecutively 2, 4, 6, and 8. Houses 2, 4, 6, and 8 will face houses 1, 3, 5, and 7, respectively. Each house will be exactly one of three styles—ranch, split-level, or Tudor—according to the following conditions: Adjacent houses are of different styles. No split-level house faces another split-level house. Every ranch house has at least one Tudor house adjacent to it. House 3 is a ranch house. House 6 is a split-level house.",
    "question": "If there is one ranch house directly opposite another ranch house, which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) House 8 is a ranch house.",
      "B) House 7 is a split-level house.",
      "C) House 4 is a Tudor house.",
      "D) House 2 is a split-level house.",
      "E) House 1 is a ranch house."
    ],
    "raw_logic_programs": [
      "# Declarations\nhouses = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nstyles = EnumSort([ranch, split_level, Tudor])\nstyle = Function([houses] -> [styles])\n\n# Constraints\nForAll([h:houses], Count([s:styles], style(h) == s) == 1) ::: Each house will be exactly one of three styles\nForAll([h:houses], Implies(style(h) == style(h + 1), h!= 8)) ::: Adjacent houses are of different styles\nForAll([h:houses], Implies(style(h) == split_level, style(h + 1)!= split_level)) ::: No split-level house faces another split-level house\nForAll([h:houses], Implies(style(h) == ranch, Count([h2:houses], style(h2) == Tudor) > 0)) ::: Every ranch house has at least one Tudor house adjacent to it\nstyle(3) == ranch ::: House 3 is a ranch house\nstyle(6) == split_level ::: House 6 is a split-level house\n\n# Options\nQuestion ::: If there is one ranch house directly opposite another ranch house, which one of the following could be true?\nis_valid(Exists([h:houses], style(h) == ranch && style(h + 1) == ranch)) ::: A) House 8 is a ranch house.\nis_valid(Exists([h:houses], style(h) == split_level && style(h + 1) == split_level)) ::: B) House 7 is a split-level house.\nis_valid(Exists([h:houses], style(h) == Tudor && style(h + 1) == Tudor)) ::: C) House 4 is a Tudor house.\nis_valid(Exists([h:houses], style("
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_3_15",
    "context": "On an undeveloped street, a developer will simultaneously build four houses on one side, numbered consecutively 1, 3, 5, and 7, and fos on the opposite side, numbered consecutively 2, 4, 6, and 8. Houses 2, 4, 6, and 8 will face houses 1, 3, 5, and 7, respectively. Each house will be exactly one of three styles—ranch, split-level, or Tudor—according to the following conditions: Adjacent houses are of different styles. No split-level house faces another split-level house. Every ranch house has at least one Tudor house adjacent to it. House 3 is a ranch house. House 6 is a split-level house.",
    "question": "If house 4 is a Tudor house, then it could be true that house",
    "answer": "A",
    "options": [
      "A) 1 is a Tudor house",
      "B) 2 is a Tudor house",
      "C) 5 is a ranch house",
      "D) 7 is a Tudor house",
      "E) 8 is a ranch house"
    ],
    "raw_logic_programs": [
      "# Declarations\nhouses = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nstyles = EnumSort([ranch, split_level, Tudor])\nstyle = Function([houses] -> [styles])\n\n# Constraints\nForAll([h:houses], Count([s:styles], style(h) == s) == 1) ::: Each house will be exactly one of three styles\nForAll([h:houses], Implies(style(h) == style(h + 1), h!= 8)) ::: Adjacent houses are of different styles\nForAll([h:houses], Implies(style(h) == split_level, style(h + 1)!= split_level)) ::: No split-level house faces another split-level house\nForAll([h:houses], Implies(style(h) == ranch, Count([h2:houses], style(h2) == Tudor) >= 1)) ::: Every ranch house has at least one Tudor house adjacent to it\nstyle(3) == ranch ::: House 3 is a ranch house\nstyle(6) == split_level ::: House 6 is a split-level house\n\n# Options\nQuestion ::: If house 4 is a Tudor house, then it could be true that house\nis_valid(Exists([h:houses], style(h) == Tudor)) ::: (A)\nis_valid(Exists([h:houses], style(h) == Tudor)) ::: (B)\nis_valid(Exists([h:houses], style(h) == ranch)) ::: (C)\nis_valid(Exists([h:houses], style(h) == Tudor)) ::: (D)\nis_valid(Exists([h:houses], style(h) == ranch)) ::: (E)\n------\nProblem:\nA company has six employees: A, B, C, D, E, and F. Each employee is assigned"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_3_16",
    "context": "On an undeveloped street, a developer will simultaneously build four houses on one side, numbered consecutively 1, 3, 5, and 7, and fos on the opposite side, numbered consecutively 2, 4, 6, and 8. Houses 2, 4, 6, and 8 will face houses 1, 3, 5, and 7, respectively. Each house will be exactly one of three styles—ranch, split-level, or Tudor—according to the following conditions: Adjacent houses are of different styles. No split-level house faces another split-level house. Every ranch house has at least one Tudor house adjacent to it. House 3 is a ranch house. House 6 is a split-level house.",
    "question": "On the street, there could be exactly",
    "answer": "A",
    "options": [
      "A) one ranch house",
      "B) one Tudor house",
      "C) two Tudor houses",
      "D) four ranch houses",
      "E) five ranch houses"
    ],
    "raw_logic_programs": [
      "# Declarations\nhouses = EnumSort([1, 3, 5, 7, 2, 4, 6, 8])\nstyles = EnumSort([ranch, split_level, Tudor])\nstyle = Function([houses] -> [styles])\n\n# Constraints\nForAll([h:houses], Count([s:styles], style(h) == s) == 1) ::: Each house will be exactly one of three styles\nForAll([h:houses], Implies(style(h) == style(h + 1), h!= 8)) ::: Adjacent houses are of different styles\nForAll([h:houses], Implies(style(h) == split_level, style(h + 1)!= split_level)) ::: No split-level house faces another split-level house\nForAll([h:houses], Implies(style(h) == ranch, Count([h2:houses], style(h2) == Tudor) >= 1)) ::: Every ranch house has at least one Tudor house adjacent to it\nstyle(3) == ranch ::: House 3 is a ranch house\nstyle(6) == split_level ::: House 6 is a split-level house\n\n# Options\nQuestion ::: On the street, there could be exactly\nis_sat(Count([h:houses], style(h) == ranch) == 1) ::: (A)\nis_sat(Count([h:houses], style(h) == Tudor) == 1) ::: (B)\nis_sat(Count([h:houses], style(h) == Tudor) == 2) ::: (C)\nis_sat(Count([h:houses], style(h) == ranch) == 4) ::: (D)\nis_sat(Count([h:houses], style(h) == ranch) == 5) ::: (E)\n------\nProblem:\nA certain company has a total of 1"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_3_17",
    "context": "On an undeveloped street, a developer will simultaneously build four houses on one side, numbered consecutively 1, 3, 5, and 7, and fos on the opposite side, numbered consecutively 2, 4, 6, and 8. Houses 2, 4, 6, and 8 will face houses 1, 3, 5, and 7, respectively. Each house will be exactly one of three styles—ranch, split-level, or Tudor—according to the following conditions: Adjacent houses are of different styles. No split-level house faces another split-level house. Every ranch house has at least one Tudor house adjacent to it. House 3 is a ranch house. House 6 is a split-level house.",
    "question": "If no house faces a house of the same style, then it must be true that house",
    "answer": "E",
    "options": [
      "A) 1 is a split-level house",
      "B) 1 is a Tudor house",
      "C) 2 is a ranch house",
      "D) 2 is a split-level house",
      "E) 4 is a Tudor house"
    ],
    "raw_logic_programs": [
      "# Declarations\nhouses = EnumSort([1, 3, 5, 7, 2, 4, 6, 8])\nstyles = EnumSort([ranch, split_level, Tudor])\nstyle = Function([houses] -> [styles])\n\n# Constraints\nForAll([h:houses], Count([s:styles], style(h) == s) == 1) ::: Each house will be exactly one of three styles\nForAll([h:houses], Implies(style(h) == style(h + 1), h!= 8)) ::: Adjacent houses are of different styles\nForAll([h:houses], Implies(style(h) == split_level, style(h + 1)!= split_level)) ::: No split-level house faces another split-level house\nForAll([h:houses], Implies(style(h) == ranch, Count([h2:houses], style(h2) == Tudor) > 0)) ::: Every ranch house has at least one Tudor house adjacent to it\nstyle(3) == ranch ::: House 3 is a ranch house\nstyle(6) == split_level ::: House 6 is a split-level house\n\n# Options\nQuestion ::: If no house faces a house of the same style, then it must be true that house\nis_valid(Exists([h:houses], style(h) == split_level)) ::: A) 1 is a split-level house\nis_valid(Exists([h:houses], style(h) == Tudor)) ::: B) 1 is a Tudor house\nis_valid(Exists([h:houses], style(h) == ranch)) ::: C) 2 is a ranch house\nis_valid(Exists([h:houses], style(h) == split_level)) ::: D) 2 is a split-level house\nis_valid(Exists([h:houses], style(h) == Tudor)) ::: E) 4 is a Tudor house\n------"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_3_18",
    "context": "On an undeveloped street, a developer will simultaneously build four houses on one side, numbered consecutively 1, 3, 5, and 7, and fos on the opposite side, numbered consecutively 2, 4, 6, and 8. Houses 2, 4, 6, and 8 will face houses 1, 3, 5, and 7, respectively. Each house will be exactly one of three styles—ranch, split-level, or Tudor—according to the following conditions: Adjacent houses are of different styles. No split-level house faces another split-level house. Every ranch house has at least one Tudor house adjacent to it. House 3 is a ranch house. House 6 is a split-level house.",
    "question": "If the condition requiring house 6 to be a split-level house is suspended but all other original conditions remain the same, then any of the following could be an accurate list of the styles of houses 2, 4, 6, and 8, respectively, EXCEPT:",
    "answer": "A",
    "options": [
      "A) ranch, split-level, ranch, Tudor",
      "B) split-level, ranch, Tudor, split-level",
      "C) split-level, Tudor, ranch, split-level",
      "D) Tudor, ranch, Tudor, split-level",
      "E) Tudor, split-level, ranch, Tudor"
    ],
    "raw_logic_programs": [
      "# Declarations\nhouses = EnumSort([1, 3, 5, 7, 2, 4, 6, 8])\nstyles = EnumSort([ranch, split_level, Tudor])\nstyle = Function([houses] -> [styles])\n\n# Constraints\nForAll([h:houses], Count([s:styles], style(h) == s) == 1) ::: Each house will be exactly one of three styles\nForAll([h:houses], Implies(style(h) == style(h + 1), h!= 8)) ::: Adjacent houses are of different styles\nForAll([h:houses], Implies(style(h) == split_level, style(h + 1)!= split_level)) ::: No split-level house faces another split-level house\nForAll([h:houses], Implies(style(h) == ranch, Count([s:styles], style(h + 1) == Tudor) >= 1)) ::: Every ranch house has at least one Tudor house adjacent to it\nstyle(3) == ranch ::: House 3 is a ranch house\nstyle(6) == split_level ::: House 6 is a split-level house\n\n# Options\nQuestion ::: If the condition requiring house 6 to be a split-level house is suspended but all other original conditions remain the same, then any of the following could be an accurate list of the styles of houses 2, 4, 6, and 8, respectively, EXCEPT:\nis_exception(is_sat(style(2) == ranch, style(4) == split_level, style(6) == ranch, style(8) == Tudor)) ::: A) ranch, split-level, ranch, Tudor\nis_exception(is_sat(style(2) == split_level, style(4) == ranch, style(6) == Tudor, style(8) == split_level)) ::: B) split-level, ranch, Tudor, split-"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_4_19",
    "context": "Within a tennis league each of five teams occupies one of five positions, numbered 1 through 5 in order of rank, with number 1 as the highest position. The teams are initially in the order R, J, S, M, L, with R in position 1. Teams change positions only when a lower-positioned team defeats a higher-positioned team. The rules are as follows: Matches are played alternately in odd-position rounds and in even-position rounds. In an odd-position round, teams in positions 3 and 5 play against teams positioned immediately above them. In an even-position round, teams in positions 2 and 4 play against teams positioned immediately above them. When a lower-positioned team defeats a higher-positioned team, the two teams switch positions after the round is completed.",
    "question": "Which one of the following could be the order of teams, from position 1 through position 5 respectively, after exactly one round of even-position matches if no odd-position round has yet been played?",
    "answer": "D",
    "options": [
      "A) J, R, M, L, S",
      "B) J, R, S, L, M",
      "C) R, J, M, L, S",
      "D) R, J, M, S, L",
      "E) R, S, J, L, M"
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([J, R, S, M, L])\npositions = EnumSort([1, 2, 3, 4, 5])\nrank = Function([teams, positions] -> [int])\n\n# Constraints\nForAll([t:teams], And(1 <= rank(t, 1), rank(t, 1) <= 5)) ::: each of five teams occupies one of five positions, numbered 1 through 5 in order of rank, with number 1 as the highest position\nForAll([t:teams], And(1 <= rank(t, 2), rank(t, 2) <= 5)) ::: each of five teams occupies one of five positions, numbered 1 through 5 in order of rank, with number 1 as the highest position\nForAll([t:teams], And(1 <= rank(t, 3), rank(t, 3) <= 5)) ::: each of five teams occupies one of five positions, numbered 1 through 5 in order of rank, with number 1 as the highest position\nForAll([t:teams], And(1 <= rank(t, 4), rank(t, 4) <= 5)) ::: each of five teams occupies one of five positions, numbered 1 through 5 in order of rank, with number 1 as the highest position\nForAll([t:teams], And(1 <= rank(t, 5), rank(t, 5) <= 5)) ::: each of five teams occupies one of five positions, numbered 1 through 5 in order of rank, with number 1 as the highest position\nForAll([t:teams], And(rank(t, 1) == 1, rank(t, 2) == 1, rank(t, 3) == 1, rank(t, 4) == 1, rank(t, 5) == 1)) ::: The teams are initially in the order R, J, S, M, L, with R in position 1\nForAll([t"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_4_20",
    "context": "Within a tennis league each of five teams occupies one of five positions, numbered 1 through 5 in order of rank, with number 1 as the highest position. The teams are initially in the order R, J, S, M, L, with R in position 1. Teams change positions only when a lower-positioned team defeats a higher-positioned team. The rules are as follows: Matches are played alternately in odd-position rounds and in even-position rounds. In an odd-position round, teams in positions 3 and 5 play against teams positioned immediately above them. In an even-position round, teams in positions 2 and 4 play against teams positioned immediately above them. When a lower-positioned team defeats a higher-positioned team, the two teams switch positions after the round is completed.",
    "question": "If exactly two rounds of matches have been played, beginning with an odd-position round, and if the lower-positioned teams have won every match in those two rounds, then each of the following must be true EXCEPT:",
    "answer": "E",
    "options": [
      "A) L is one position higher than J.",
      "B) R is one position higher than L.",
      "C) S is one position higher than R.",
      "D) J is in position 4.",
      "E) M is in position 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([J, L, M, R, S])\npositions = EnumSort([1, 2, 3, 4, 5])\nrank = Function([teams] -> [positions])\n\n# Constraints\nForAll([t:teams], rank(t) == 1 + Count([t2:teams], t2 < t)) ::: each of five teams occupies one of five positions, numbered 1 through 5 in order of rank\nrank(R) == 1 ::: R in position 1\nrank(J) == 2 ::: J in position 2\nrank(S) == 3 ::: S in position 3\nrank(M) == 4 ::: M in position 4\nrank(L) == 5 ::: L in position 5\n\n# Options\nQuestion ::: If exactly two rounds of matches have been played, beginning with an odd-position round, and if the lower-positioned teams have won every match in those two rounds, then each of the following must be true EXCEPT:\nis_exception(is_sat(rank(L) == rank(J) + 1)) ::: (A)\nis_exception(is_sat(rank(R) == rank(L) + 1)) ::: (B)\nis_exception(is_sat(rank(S) == rank(R) + 1)) ::: (C)\nis_exception(is_sat(rank(J) == 4)) ::: (D)\nis_exception(is_sat(rank(M) == 3)) ::: (E)\n------\nProblem:\nA certain company has five departments—A, B, C, D, and E—each of which has a manager. The managers are named F, G, H, I, and J. The following conditions apply: F manages department A. G manages department B. H manages department C. I manages department D. J manages department E.\nQuestion:\nWhich one of the following must be true?\nChoices:"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_4_21",
    "context": "Within a tennis league each of five teams occupies one of five positions, numbered 1 through 5 in order of rank, with number 1 as the highest position. The teams are initially in the order R, J, S, M, L, with R in position 1. Teams change positions only when a lower-positioned team defeats a higher-positioned team. The rules are as follows: Matches are played alternately in odd-position rounds and in even-position rounds. In an odd-position round, teams in positions 3 and 5 play against teams positioned immediately above them. In an even-position round, teams in positions 2 and 4 play against teams positioned immediately above them. When a lower-positioned team defeats a higher-positioned team, the two teams switch positions after the round is completed.",
    "question": "Which one of the following could be true after exactly two rounds of matches have been played?",
    "answer": "A",
    "options": [
      "A) J has won two matches.",
      "B) L has lost two matches.",
      "C) R has won two matches.",
      "D) L's only match was played against J.",
      "E) M played against S in two matches."
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([J, L, M, R, S])\npositions = EnumSort([1, 2, 3, 4, 5])\nwins = Function([teams, positions] -> [int])\nForAll([t:teams], And(1 <= wins(t, 1), wins(t, 1) <= 2))\nForAll([t:teams], And(1 <= wins(t, 2), wins(t, 2) <= 2))\nForAll([t:teams], And(1 <= wins(t, 3), wins(t, 3) <= 2))\nForAll([t:teams], And(1 <= wins(t, 4), wins(t, 4) <= 2))\nForAll([t:teams], And(1 <= wins(t, 5), wins(t, 5) <= 2))\n\n# Constraints\nForAll([t:teams], wins(t, 1) + wins(t, 2) + wins(t, 3) + wins(t, 4) + wins(t, 5) == 2) ::: Matches are played alternately in odd-position rounds and in even-position rounds\nAnd(wins(J, 3) == 1, wins(L, 3) == 1) ::: In an odd-position round, teams in positions 3 and 5 play against teams positioned immediately above them\nAnd(wins(M, 4) == 1, wins(S, 4) == 1) ::: In an even-position round, teams in positions 2 and 4 play against teams positioned immediately above them\nAnd(wins(R, 1) == 0, wins(J, 1) == 0, wins(S, 1) == 0, wins(M, 1) == 0, wins(L, 1) == 0) ::: When a lower-positioned team defeats a higher-positioned team, the two teams switch positions after the round"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_4_22",
    "context": "Within a tennis league each of five teams occupies one of five positions, numbered 1 through 5 in order of rank, with number 1 as the highest position. The teams are initially in the order R, J, S, M, L, with R in position 1. Teams change positions only when a lower-positioned team defeats a higher-positioned team. The rules are as follows: Matches are played alternately in odd-position rounds and in even-position rounds. In an odd-position round, teams in positions 3 and 5 play against teams positioned immediately above them. In an even-position round, teams in positions 2 and 4 play against teams positioned immediately above them. When a lower-positioned team defeats a higher-positioned team, the two teams switch positions after the round is completed.",
    "question": "If after exactly three rounds of matches M is in position 4, and J and L have won all of their matches, then which one of the following can be true?",
    "answer": "C",
    "options": [
      "A) J is in position 2.",
      "B) J is in position 3.",
      "C) L is in position 2.",
      "D) R is in position 1.",
      "E) S is in position 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([J, L, M, R, S])\npositions = EnumSort([1, 2, 3, 4, 5])\nrank = Function([teams, positions] -> [int])\n\n# Constraints\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank(t, t) == 1) ::: each team occupies one of five positions\nForAll([t:teams], rank"
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_4_23",
    "context": "Within a tennis league each of five teams occupies one of five positions, numbered 1 through 5 in order of rank, with number 1 as the highest position. The teams are initially in the order R, J, S, M, L, with R in position 1. Teams change positions only when a lower-positioned team defeats a higher-positioned team. The rules are as follows: Matches are played alternately in odd-position rounds and in even-position rounds. In an odd-position round, teams in positions 3 and 5 play against teams positioned immediately above them. In an even-position round, teams in positions 2 and 4 play against teams positioned immediately above them. When a lower-positioned team defeats a higher-positioned team, the two teams switch positions after the round is completed.",
    "question": "If after exactly three rounds M has won three matches and the rankings of the other four teams relative to each other remain the same, then which one of the following must be in position 3?",
    "answer": "A",
    "options": [
      "A) J",
      "B) L",
      "C) M",
      "D) R",
      "E) S"
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([J, L, M, R, S])\npositions = EnumSort([1, 2, 3, 4, 5])\nrank = Function([teams, positions] -> [int])\n\n# Constraints\nForAll([t:teams], And(1 <= rank(t, 1), rank(t, 1) <= 5)) ::: each team occupies one of five positions\nForAll([t:teams], And(1 <= rank(t, 2), rank(t, 2) <= 5)) ::: each team occupies one of five positions\nForAll([t:teams], And(1 <= rank(t, 3), rank(t, 3) <= 5)) ::: each team occupies one of five positions\nForAll([t:teams], And(1 <= rank(t, 4), rank(t, 4) <= 5)) ::: each team occupies one of five positions\nForAll([t:teams], And(1 <= rank(t, 5), rank(t, 5) <= 5)) ::: each team occupies one of five positions\nForAll([t:teams], And(1 <= rank(t, 6), rank(t, 6) <= 5)) ::: each team occupies one of five positions\nForAll([t:teams], And(1 <= rank(t, 7), rank(t, 7) <= 5)) ::: each team occupies one of five positions\nForAll([t:teams], And(1 <= rank(t, 8), rank(t, 8) <= 5)) ::: each team occupies one of five positions\nForAll([t:teams], And(1 <= rank(t, 9), rank(t, 9) <= 5)) ::: each team occupies one of five positions\nForAll([t:teams], And(1 <= rank(t, 10), rank(t, 10) <= 5)) ::: each team occupies one of five positions\nForAll(["
    ]
  },
  {
    "id": "ar_lsat_199509_1-G_4_24",
    "context": "Within a tennis league each of five teams occupies one of five positions, numbered 1 through 5 in order of rank, with number 1 as the highest position. The teams are initially in the order R, J, S, M, L, with R in position 1. Teams change positions only when a lower-positioned team defeats a higher-positioned team. The rules are as follows: Matches are played alternately in odd-position rounds and in even-position rounds. In an odd-position round, teams in positions 3 and 5 play against teams positioned immediately above them. In an even-position round, teams in positions 2 and 4 play against teams positioned immediately above them. When a lower-positioned team defeats a higher-positioned team, the two teams switch positions after the round is completed.",
    "question": "If after exactly three rounds the teams, in order from first to fifth position, are R, J, L, S, and M, then which one of the following could be the order, from first to fifth position, of the teams after the second round?",
    "answer": "C",
    "options": [
      "A) J, R, M, S, L",
      "B) J, L, S, M, R",
      "C) R, J, S, L, M",
      "D) R, L, M, S, J",
      "E) R, M, L, S, J"
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([R, J, S, M, L])\npositions = EnumSort([1, 2, 3, 4, 5])\nrank = Function([teams, positions] -> [int])\n\n# Constraints\nForAll([t:teams], And(1 <= rank(t, 1), rank(t, 1) <= 5)) ::: each of five teams occupies one of five positions, numbered 1 through 5 in order of rank, with number 1 as the highest position\nForAll([t:teams], rank(t, 1) == 1) ::: The teams are initially in the order R, J, S, M, L, with R in position 1\nForAll([t:teams], And(1 <= rank(t, 2), rank(t, 2) <= 5)) ::: Matches are played alternately in odd-position rounds and in even-position rounds\nForAll([t:teams], And(1 <= rank(t, 3), rank(t, 3) <= 5)) ::: In an odd-position round, teams in positions 3 and 5 play against teams positioned immediately above them\nForAll([t:teams], And(1 <= rank(t, 4), rank(t, 4) <= 5)) ::: In an even-position round, teams in positions 2 and 4 play against teams positioned immediately above them\nForAll([t:teams], And(1 <= rank(t, 5), rank(t, 5) <= 5)) ::: When a lower-positioned team defeats a higher-positioned team, the two teams switch positions after the round is completed\nForAll([t:teams], And(1 <= rank(t, 6), rank(t, 6) <= 5)) ::: If after exactly three rounds the teams, in order from first to fifth position, are R, J, L, S, and M, then which one of the following could be the order, from first to fifth position, of the teams after the"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_1_1",
    "context": "On Wednesday a physician will have exactly one appointment with seven patients—P, Q, R, S, T, U, W—one patient per appointment. The schedule of appointments, chronologically numbered 1 through 7, must meet the following conditions: Q's appointment is at some time before W's appointment. U's appointment is at some time before P's appointment. Either R or T has appointment 3. S's appointment is either the appointment immediately before or the appointment immediately after R's appointment.",
    "question": "Which one of the following is an acceptable schedule of appointments in order from 1 to 7?",
    "answer": "E",
    "options": [
      "A) Q, S, R, P, W, U, T",
      "B) Q, U, W, S, R, T, P",
      "C) S, Q, R, T, W, U, P",
      "D) T, U, R, S, W, P, Q",
      "E) U, Q, T, P, R, S, W"
    ],
    "raw_logic_programs": [
      "# Declarations\npatients = EnumSort([P, Q, R, S, T, U, W])\nappointments = EnumSort([1, 2, 3, 4, 5, 6, 7])\nappointment = Function([patients, appointments] -> [bool])\n\n# Constraints\nForAll([p:patients], Count([a:appointments], appointment(p, a)) == 1) ::: one patient per appointment\nappointment(Q, a) < appointment(W, a) ::: Q's appointment is at some time before W's appointment\nappointment(U, a) < appointment(P, a) ::: U's appointment is at some time before P's appointment\nOr(appointment(R, 3), appointment(T, 3)) ::: Either R or T has appointment 3\nOr(appointment(S, 2), appointment(S, 4)) ::: S's appointment is either the appointment immediately before or the appointment immediately after R's appointment\n\n# Options\nQuestion ::: Which one of the following is an acceptable schedule of appointments in order from 1 to 7?\nis_sat(ForAll([p:patients], appointment(p, p))) ::: A) Q, S, R, P, W, U, T\nis_sat(ForAll([p:patients], appointment(p, p))) ::: B) Q, U, W, S, R, T, P\nis_sat(ForAll([p:patients], appointment(p, p))) ::: C) S, Q, R, T, W, U, P\nis_sat(ForAll([p:patients], appointment(p, p))) ::: D) T, U, R, S, W, P, Q\nis_sat(ForAll([p:patients], appointment(p, p))) ::: E) U, Q, T, P, R, S, W\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K,"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_1_2",
    "context": "On Wednesday a physician will have exactly one appointment with seven patients—P, Q, R, S, T, U, W—one patient per appointment. The schedule of appointments, chronologically numbered 1 through 7, must meet the following conditions: Q's appointment is at some time before W's appointment. U's appointment is at some time before P's appointment. Either R or T has appointment 3. S's appointment is either the appointment immediately before or the appointment immediately after R's appointment.",
    "question": "If W has appointment 2 and P has appointment 5, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) R has appointment 6.",
      "B) S has appointment 4.",
      "C) S has appointment 7.",
      "D) U has appointment 1.",
      "E) U has appointment 4."
    ],
    "raw_logic_programs": [
      "# Declarations\npatients = EnumSort([P, Q, R, S, T, U, W])\nappointments = EnumSort([1, 2, 3, 4, 5, 6, 7])\nappointment = Function([patients, appointments] -> [bool])\n\n# Constraints\nForAll([p:patients], Count([a:appointments], appointment(p, a)) == 1) ::: one patient per appointment\nForAll([a:appointments], Count([p:patients], appointment(p, a)) == 1) ::: one patient per appointment\nForAll([p:patients], And(1 <= appointment(p, 1), appointment(p, 1) <= 7)) ::: chronologically numbered 1 through 7\nForAll([p:patients], And(1 <= appointment(p, 2), appointment(p, 2) <= 7)) ::: chronologically numbered 1 through 7\nForAll([p:patients], And(1 <= appointment(p, 3), appointment(p, 3) <= 7)) ::: chronologically numbered 1 through 7\nForAll([p:patients], And(1 <= appointment(p, 4), appointment(p, 4) <= 7)) ::: chronologically numbered 1 through 7\nForAll([p:patients], And(1 <= appointment(p, 5), appointment(p, 5) <= 7)) ::: chronologically numbered 1 through 7\nForAll([p:patients], And(1 <= appointment(p, 6), appointment(p, 6) <= 7)) ::: chronologically numbered 1 through 7\nForAll([p:patients], And(1 <= appointment(p, 7), appointment(p, 7) <= 7)) ::: chronologically numbered 1 through 7\nappointment(Q, 1) < appointment(W, 2) ::: Q's appointment is at some time before W's appointment\napp"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_1_3",
    "context": "On Wednesday a physician will have exactly one appointment with seven patients—P, Q, R, S, T, U, W—one patient per appointment. The schedule of appointments, chronologically numbered 1 through 7, must meet the following conditions: Q's appointment is at some time before W's appointment. U's appointment is at some time before P's appointment. Either R or T has appointment 3. S's appointment is either the appointment immediately before or the appointment immediately after R's appointment.",
    "question": "If U's appointment is immediately after T's appointment and immediately before R's appointment, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Q's appointment is at some time before P's appointment.",
      "B) S's appointment is at some time before P's appointment.",
      "C) S's appointment is immediately before Q's appointment.",
      "D) W's appointment is immediately before P's appointment.",
      "E) W's appointment is at some time before S's appointment."
    ],
    "raw_logic_programs": [
      "# Declarations\npatients = EnumSort([P, Q, R, S, T, U, W])\nappointments = EnumSort([1, 2, 3, 4, 5, 6, 7])\nappointment = Function([patients, appointments] -> [bool])\n\n# Constraints\nForAll([p:patients], Count([a:appointments], appointment(p, a)) == 1) ::: one patient per appointment\nAnd(appointment(Q, a), ForAll([a:appointments], Implies(appointment(W, a), a < a))) ::: Q's appointment is at some time before W's appointment\nAnd(appointment(U, a), ForAll([a:appointments], Implies(appointment(P, a), a < a))) ::: U's appointment is at some time before P's appointment\nOr(appointment(R, 3), appointment(T, 3)) ::: Either R or T has appointment 3\nAnd(appointment(S, a), ForAll([a:appointments], Implies(appointment(R, a), a < a) | Implies(appointment(R, a), a > a))) ::: S's appointment is either the appointment immediately before or the appointment immediately after R's appointment\n\n# Options\nQuestion ::: If U's appointment is immediately after T's appointment and immediately before R's appointment, then which one of the following must be true?\nis_valid(Exists([a:appointments], appointment(Q, a) && ForAll([a:appointments], Implies(appointment(P, a), a < a)))) ::: (A)\nis_valid(Exists([a:appointments], appointment(S, a) && ForAll([a:appointments], Implies(appointment(P, a), a < a)))) ::: (B)\nis_valid(Exists([a:appointments], appointment(S, a) && appointment(Q, a + 1))) ::: (C)\nis_valid(Exists([a:appointments], appointment(W, a) && ForAll([a:appointments], Implies(appointment(P, a), a < a)))) ::: (D)\nis_valid(Exists([a:appointments], appointment(W, a) && ForAll([a:appointments], Implies(appointment(S, a), a < a)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_1_4",
    "context": "On Wednesday a physician will have exactly one appointment with seven patients—P, Q, R, S, T, U, W—one patient per appointment. The schedule of appointments, chronologically numbered 1 through 7, must meet the following conditions: Q's appointment is at some time before W's appointment. U's appointment is at some time before P's appointment. Either R or T has appointment 3. S's appointment is either the appointment immediately before or the appointment immediately after R's appointment.",
    "question": "If P's appointment is immediately before S's appointment, then each of the following could be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) R's appointment is immediately before W's appointment.",
      "B) T's appointment is immediately before Q's appointment.",
      "C) U's appointment is immediately before P's appointment.",
      "D) U's appointment is immediately before Q's appointment.",
      "E) W's appointment is immediately before T's appointment."
    ],
    "raw_logic_programs": [
      "# Declarations\npatients = EnumSort([P, Q, R, S, T, U, W])\nappointments = EnumSort([1, 2, 3, 4, 5, 6, 7])\nappointment = Function([patients, appointments] -> [bool])\n\n# Constraints\nForAll([p:patients], Count([a:appointments], appointment(p, a)) == 1) ::: one patient per appointment\nAnd(appointment(Q, a), a < appointment(W, b)) ::: Q's appointment is at some time before W's appointment\nAnd(appointment(U, a), a < appointment(P, b)) ::: U's appointment is at some time before P's appointment\nOr(appointment(R, 3), appointment(T, 3)) ::: Either R or T has appointment 3\nAnd(appointment(S, a), appointment(R, b)) ::: S's appointment is either the appointment immediately before or the appointment immediately after R's appointment\n\n# Options\nQuestion ::: If P's appointment is immediately before S's appointment, then each of the following could be true EXCEPT:\nis_exception(is_sat(And(appointment(R, a), a < appointment(W, b)))) ::: (A)\nis_exception(is_sat(And(appointment(T, a), a < appointment(Q, b)))) ::: (B)\nis_exception(is_sat(And(appointment(U, a), a < appointment(P, b)))) ::: (C)\nis_exception(is_sat(And(appointment(U, a), a < appointment(Q, b)))) ::: (D)\nis_exception(is_sat(And(appointment(W, a), a < appointment(T, b)))) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete six projects—M, N, O, P, Q, and R. Each employee works on exactly one project, and each project is completed by exactly one pair of employees. The following conditions apply: F and G work together on project M. H and J work together on project N. K and L work together on project O. F and H do not work together. J and L do not work together.\nQuestion:\nIf G and K work together on project P, then which one of the following must be"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_1_5",
    "context": "On Wednesday a physician will have exactly one appointment with seven patients—P, Q, R, S, T, U, W—one patient per appointment. The schedule of appointments, chronologically numbered 1 through 7, must meet the following conditions: Q's appointment is at some time before W's appointment. U's appointment is at some time before P's appointment. Either R or T has appointment 3. S's appointment is either the appointment immediately before or the appointment immediately after R's appointment.",
    "question": "If T's appointment is immediately after P's appointment and immediately before W's appointment, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) W's appointment is at some time before R's appointment.",
      "B) U's appointment is at some time before R's appointment.",
      "C) S's appointment is at some time before U's appointment.",
      "D) R's appointment is at some time before P's appointment.",
      "E) Q's appointment is at some time before S's appointment."
    ],
    "raw_logic_programs": [
      "# Declarations\npatients = EnumSort([P, Q, R, S, T, U, W])\nappointments = EnumSort([1, 2, 3, 4, 5, 6, 7])\nappointment = Function([patients, appointments] -> [bool])\n\n# Constraints\nForAll([p:patients], Count([a:appointments], appointment(p, a)) == 1) ::: one patient per appointment\nAnd(appointment(Q, a), Not(appointment(W, a))) ::: Q's appointment is at some time before W's appointment\nAnd(appointment(U, a), Not(appointment(P, a))) ::: U's appointment is at some time before P's appointment\nOr(appointment(R, 3), appointment(T, 3)) ::: Either R or T has appointment 3\nAnd(appointment(S, a), appointment(R, b)) ::: S's appointment is either the appointment immediately before or the appointment immediately after R's appointment\n\n# Options\nQuestion ::: If T's appointment is immediately after P's appointment and immediately before W's appointment, then which one of the following must be true?\nis_valid(Exists([a:appointments], appointment(W, a) < appointment(R, a))) ::: (A)\nis_valid(Exists([a:appointments], appointment(U, a) < appointment(R, a))) ::: (B)\nis_valid(Exists([a:appointments], appointment(S, a) < appointment(U, a))) ::: (C)\nis_valid(Exists([a:appointments], appointment(R, a) < appointment(P, a))) ::: (D)\nis_valid(Exists([a:appointments], appointment(Q, a) < appointment(S, a))) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete specific projects. The following conditions apply: F and G work together on a project. H and J work together on a project. K and L work together on a project. F and H do not work together on any project. J and L do not work together on any project.\nQuestion:\nIf G and K work together on a project, then which one of the following must be true?\nChoices:\n(A) F and J work together on a project.\n(B) F and L work"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_2_6",
    "context": "Exactly six employees—officers F, G, and H, and supervisors K, L, and M—must be assigned to exactly three committees—Policy, Quality, and Sales—with exactly three employees per committee. Committee assignments must conform to the following conditions: Each committee must have at least one officer assigned to it. Each employee must be assigned to at least one committee. All three officers must be assigned to the Policy Committee. G cannot be assigned to the same committee as L. K must be assigned to the Sales Committee.",
    "question": "Which one of the following is a group of three employees who can be assigned together to the Sales Committee?",
    "answer": "D",
    "options": [
      "A) F, G, and H",
      "B) F, G, and M",
      "C) G, K, and L",
      "D) H, K, and L",
      "E) K, L, and M"
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L, M])\ncommittees = EnumSort([Policy, Quality, Sales])\nassigned = Function([employees, committees] -> [bool])\n\n# Constraints\nForAll([c:committees], Count([e:employees], assigned(e, c)) == 3) ::: exactly three employees per committee\nForAll([e:employees], Count([c:committees], assigned(e, c)) >= 1) ::: Each employee must be assigned to at least one committee\nForAll([c:committees], Count([e:employees], And(assigned(e, c), e == officer)) >= 1) ::: Each committee must have at least one officer assigned to it\nAnd(assigned(F, Policy), assigned(G, Policy), assigned(H, Policy)) ::: All three officers must be assigned to the Policy Committee\nNot(assigned(G, c) == assigned(L, c)) ::: G cannot be assigned to the same committee as L\nassigned(K, Sales) ::: K must be assigned to the Sales Committee\n\n# Options\nQuestion ::: Which one of the following is a group of three employees who can be assigned together to the Sales Committee?\nis_sat(ForAll([e:employees], assigned(e, Sales) == assigned(F, Sales))) ::: A) F, G, and H\nis_sat(ForAll([e:employees], assigned(e, Sales) == assigned(F, Sales))) ::: B) F, G, and M\nis_sat(ForAll([e:employees], assigned(e, Sales) == assigned(G, Sales))) ::: C) G, K, and L\nis_sat(ForAll([e:employees], assigned(e, Sales) == assigned(H, Sales))) ::: D) H, K, and L\nis_sat(ForAll([e:employees], assigned(e, Sales) == assigned(K, Sales))) ::: E) K, L, and M\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to exactly three departments—Marketing, Production, and Sales—with exactly two employees per department. Department assignments must conform to the following conditions: F and G are assigned to the same department. H and I are assigned to the same department. J and K are assigned to the same department. F and J are"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_2_7",
    "context": "Exactly six employees—officers F, G, and H, and supervisors K, L, and M—must be assigned to exactly three committees—Policy, Quality, and Sales—with exactly three employees per committee. Committee assignments must conform to the following conditions: Each committee must have at least one officer assigned to it. Each employee must be assigned to at least one committee. All three officers must be assigned to the Policy Committee. G cannot be assigned to the same committee as L. K must be assigned to the Sales Committee.",
    "question": "If H is assigned to exactly one committee, and if no committee has both F and M assigned to it, then it must be true that",
    "answer": "C",
    "options": [
      "A) G and M are both assigned to the Quality Committee",
      "B) K and L are both assigned to the Sales Committee",
      "C) K is assigned to exactly two committees",
      "D) L is assigned to exactly two committees",
      "E) M is assigned to exactly two committees"
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L, M])\ncommittees = EnumSort([Policy, Quality, Sales])\nassigned = Function([employees, committees] -> [bool])\n\n# Constraints\nForAll([c:committees], Count([e:employees], assigned(e, c)) == 3) ::: exactly three employees per committee\nForAll([c:committees], Count([e:employees], assigned(e, c)) >= 1) ::: each employee must be assigned to at least one committee\nForAll([c:committees], Count([e:employees], And(assigned(e, c), e == officer)) >= 1) ::: Each committee must have at least one officer assigned to it\nAnd(assigned(F, Policy), assigned(G, Policy), assigned(H, Policy)) ::: All three officers must be assigned to the Policy Committee\nNot(assigned(G, c) && assigned(L, c)) ::: G cannot be assigned to the same committee as L\nassigned(K, Sales) ::: K must be assigned to the Sales Committee\n\n# Options\nQuestion ::: If H is assigned to exactly one committee, and if no committee has both F and M assigned to it, then it must be true that\nis_sat(ForAll([c:committees], assigned(G, c) == assigned(M, c))) ::: (A)\nis_sat(ForAll([c:committees], assigned(K, c) == assigned(L, c))) ::: (B)\nis_sat(ForAll([c:committees], Count([e:employees], assigned(e, c)) == 2)) ::: (C)\nis_sat(ForAll([c:committees], Count([e:employees], assigned(e, c)) == 2)) ::: (D)\nis_sat(ForAll([c:committees], Count([e:employees], assigned(e, c)) == 2)) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to exactly three departments—Marketing, Production, and Sales—with exactly two employees per department. The following conditions apply: F and G are assigned to the same department. H and I are assigned to the same department. J and K are assigned to the same department. F and J are assigned to different departments.\nQuestion"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_2_8",
    "context": "Exactly six employees—officers F, G, and H, and supervisors K, L, and M—must be assigned to exactly three committees—Policy, Quality, and Sales—with exactly three employees per committee. Committee assignments must conform to the following conditions: Each committee must have at least one officer assigned to it. Each employee must be assigned to at least one committee. All three officers must be assigned to the Policy Committee. G cannot be assigned to the same committee as L. K must be assigned to the Sales Committee.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "B",
    "options": [
      "A) F is assigned to exactly one committee.",
      "B) G is assigned to exactly three committees.",
      "C) H is assigned to exactly three committees.",
      "D) K is assigned to exactly one committee.",
      "E) L is assigned to exactly two committees."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L, M])\ncommittees = EnumSort([Policy, Quality, Sales])\nassigned = Function([employees, committees] -> [bool])\n\n# Constraints\nForAll([c:committees], Count([e:employees], assigned(e, c)) == 3) ::: exactly three employees per committee\nForAll([e:employees], Count([c:committees], assigned(e, c)) >= 1) ::: Each employee must be assigned to at least one committee\nForAll([c:committees], Count([e:employees], And(assigned(e, c), e == officer)) >= 1) ::: Each committee must have at least one officer assigned to it\nAnd(assigned(F, Policy), assigned(G, Policy), assigned(H, Policy)) ::: All three officers must be assigned to the Policy Committee\nNot(assigned(G, c) == assigned(L, c)) ::: G cannot be assigned to the same committee as L\nassigned(K, Sales) ::: K must be assigned to the Sales Committee\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(ForAll([c:committees], assigned(F, c) == 1))) ::: A) F is assigned to exactly one committee.\nis_exception(is_sat(ForAll([c:committees], assigned(G, c) == 3))) ::: B) G is assigned to exactly three committees.\nis_exception(is_sat(ForAll([c:committees], assigned(H, c) == 3))) ::: C) H is assigned to exactly three committees.\nis_exception(is_sat(ForAll([c:committees], assigned(K, c) == 1))) ::: D) K is assigned to exactly one committee.\nis_exception(is_sat(ForAll([c:committees], assigned(L, c) == 2))) ::: E) L is assigned to exactly two committees.\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to exactly three departments—Marketing, Production, and Sales—with exactly two employees per department. Department assignments must conform to the following conditions: F and G are assigned to the same department. H and I are assigned to the same department. J and K"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_2_9",
    "context": "Exactly six employees—officers F, G, and H, and supervisors K, L, and M—must be assigned to exactly three committees—Policy, Quality, and Sales—with exactly three employees per committee. Committee assignments must conform to the following conditions: Each committee must have at least one officer assigned to it. Each employee must be assigned to at least one committee. All three officers must be assigned to the Policy Committee. G cannot be assigned to the same committee as L. K must be assigned to the Sales Committee.",
    "question": "If F is assigned to exactly three committees, and G is assigned to exactly two committees, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) G is assigned to the Quality Committee.",
      "B) G is assigned to the Sales Committee.",
      "C) K is assigned to the Quality Committee.",
      "D) L is assigned to the Sales Committee.",
      "E) M is assigned to the Quality Committee."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L, M])\ncommittees = EnumSort([Policy, Quality, Sales])\nassigned = Function([employees, committees] -> [bool])\n\n# Constraints\nForAll([c:committees], Count([e:employees], assigned(e, c)) == 3) ::: exactly three employees per committee\nForAll([e:employees], Count([c:committees], assigned(e, c)) >= 1) ::: Each employee must be assigned to at least one committee\nForAll([c:committees], Count([e:employees], And(assigned(e, c), e == officer)) >= 1) ::: Each committee must have at least one officer assigned to it\nAnd(assigned(F, Policy), assigned(G, Policy), assigned(H, Policy)) ::: All three officers must be assigned to the Policy Committee\nNot(assigned(G, c) && assigned(L, c)) ::: G cannot be assigned to the same committee as L\nassigned(K, Sales) ::: K must be assigned to the Sales Committee\n\n# Options\nQuestion ::: If F is assigned to exactly three committees, and G is assigned to exactly two committees, then which one of the following must be true?\nis_sat(ForAll([c:committees], assigned(G, c) == assigned(F, c))) ::: (A)\nis_sat(ForAll([c:committees], assigned(G, c)!= assigned(F, c))) ::: (B)\nis_sat(ForAll([c:committees], assigned(K, c) == assigned(F, c))) ::: (C)\nis_sat(ForAll([c:committees], assigned(L, c) == assigned(F, c))) ::: (D)\nis_sat(ForAll([c:committees], assigned(M, c) == assigned(F, c))) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to exactly three departments—Marketing, Production, and Sales—with exactly two employees per department. The following conditions apply: F and G are assigned to the same department. H and I are assigned to the same department. J and K are assigned to the same department. F and H are assigned to different departments. G and J are assigned to different departments.\nQuestion:"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_2_10",
    "context": "Exactly six employees—officers F, G, and H, and supervisors K, L, and M—must be assigned to exactly three committees—Policy, Quality, and Sales—with exactly three employees per committee. Committee assignments must conform to the following conditions: Each committee must have at least one officer assigned to it. Each employee must be assigned to at least one committee. All three officers must be assigned to the Policy Committee. G cannot be assigned to the same committee as L. K must be assigned to the Sales Committee.",
    "question": "Which one of the following is a group of three employees who can be assigned together to the Quality Committee?",
    "answer": "E",
    "options": [
      "A) F, G, and H",
      "B) F, G, and K",
      "C) G, H, and K",
      "D) G, K, and L",
      "E) H, L, and M"
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L, M])\ncommittees = EnumSort([Policy, Quality, Sales])\nassigned = Function([employees, committees] -> [bool])\n\n# Constraints\nForAll([c:committees], Count([e:employees], assigned(e, c)) == 3) ::: exactly three employees per committee\nForAll([e:employees], Count([c:committees], assigned(e, c)) >= 1) ::: Each employee must be assigned to at least one committee\nForAll([c:committees], Count([e:employees], And(assigned(e, c), e == officer)) >= 1) ::: Each committee must have at least one officer assigned to it\nAnd(assigned(F, Policy), assigned(G, Policy), assigned(H, Policy)) ::: All three officers must be assigned to the Policy Committee\nNot(assigned(G, c) == assigned(L, c)) ::: G cannot be assigned to the same committee as L\nassigned(K, Sales) ::: K must be assigned to the Sales Committee\n\n# Options\nQuestion ::: Which one of the following is a group of three employees who can be assigned together to the Quality Committee?\nis_sat(ForAll([e:employees], assigned(e, Quality) == assigned(F, Quality))) ::: A) F, G, and H\nis_sat(ForAll([e:employees], assigned(e, Quality) == assigned(F, Quality))) ::: B) F, G, and K\nis_sat(ForAll([e:employees], assigned(e, Quality) == assigned(G, Quality))) ::: C) G, H, and K\nis_sat(ForAll([e:employees], assigned(e, Quality) == assigned(G, Quality))) ::: D) G, K, and L\nis_sat(ForAll([e:employees], assigned(e, Quality) == assigned(H, Quality))) ::: E) H, L, and M\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to exactly three departments—Marketing, Production, and Sales—with exactly two employees per department. Department assignments must conform to the following conditions: F and G are assigned to the same department. H and I are assigned to the same department. J and K"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_2_11",
    "context": "Exactly six employees—officers F, G, and H, and supervisors K, L, and M—must be assigned to exactly three committees—Policy, Quality, and Sales—with exactly three employees per committee. Committee assignments must conform to the following conditions: Each committee must have at least one officer assigned to it. Each employee must be assigned to at least one committee. All three officers must be assigned to the Policy Committee. G cannot be assigned to the same committee as L. K must be assigned to the Sales Committee.",
    "question": "If L is assigned to exactly two committees, which of the following must be true?",
    "answer": "E",
    "options": [
      "A) F is assigned to the Sales Committee.",
      "B) G is assigned to the Sales Committee.",
      "C) H is assigned to the Quality Committee.",
      "D) K is assigned to the Quality Committee.",
      "E) M is assigned to the Quality Committee."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L, M])\ncommittees = EnumSort([Policy, Quality, Sales])\nassigned = Function([employees, committees] -> [bool])\n\n# Constraints\nForAll([c:committees], Count([e:employees], assigned(e, c)) == 3) ::: exactly three employees per committee\nForAll([e:employees], Count([c:committees], assigned(e, c)) >= 1) ::: Each employee must be assigned to at least one committee\nForAll([c:committees], Count([e:employees], And(assigned(e, c), e == officer)) >= 1) ::: Each committee must have at least one officer assigned to it\nAnd(assigned(F, Policy), assigned(G, Policy), assigned(H, Policy)) ::: All three officers must be assigned to the Policy Committee\nNot(assigned(G, c) == assigned(L, c)) ::: G cannot be assigned to the same committee as L\nassigned(K, Sales) ::: K must be assigned to the Sales Committee\n\n# Options\nQuestion ::: If L is assigned to exactly two committees, which of the following must be true?\nis_sat(ForAll([c:committees], Not(assigned(F, c)))) ::: A) F is assigned to the Sales Committee.\nis_sat(ForAll([c:committees], Not(assigned(G, c)))) ::: B) G is assigned to the Sales Committee.\nis_sat(ForAll([c:committees], Not(assigned(H, Quality)))) ::: C) H is assigned to the Quality Committee.\nis_sat(ForAll([c:committees], Not(assigned(K, Quality)))) ::: D) K is assigned to the Quality Committee.\nis_sat(ForAll([c:committees], Not(assigned(M, Quality)))) ::: E) M is assigned to the Quality Committee.\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to exactly three departments—Marketing, Production, and Sales—with exactly two employees per department. Department assignments must conform to the following conditions: F and G are assigned to the same department. H and I are assigned to the same department. J and K are assigned to the same department. The Marketing Department has at least one more employee"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_2_12",
    "context": "Exactly six employees—officers F, G, and H, and supervisors K, L, and M—must be assigned to exactly three committees—Policy, Quality, and Sales—with exactly three employees per committee. Committee assignments must conform to the following conditions: Each committee must have at least one officer assigned to it. Each employee must be assigned to at least one committee. All three officers must be assigned to the Policy Committee. G cannot be assigned to the same committee as L. K must be assigned to the Sales Committee.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "B",
    "options": [
      "A) F and G are each assigned to exactly one committee.",
      "B) F and H are each assigned to exactly one committee.",
      "C) G and H are each assigned to exactly one committee.",
      "D) F and M are both assigned to the Sales Committee.",
      "E) G and K are both assigned to the Quality Committee."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([F, G, H, K, L, M])\ncommittees = EnumSort([Policy, Quality, Sales])\nassigned = Function([employees, committees] -> [bool])\n\n# Constraints\nForAll([c:committees], Count([e:employees], assigned(e, c)) == 3) ::: exactly three employees per committee\nForAll([e:employees], Count([c:committees], assigned(e, c)) >= 1) ::: Each employee must be assigned to at least one committee\nForAll([c:committees], Count([e:employees], And(assigned(e, c), e == officer)) >= 1) ::: Each committee must have at least one officer assigned to it\nAnd(assigned(F, Policy), assigned(G, Policy), assigned(H, Policy)) ::: All three officers must be assigned to the Policy Committee\nNot(assigned(G, c) && assigned(L, c)) ::: G cannot be assigned to the same committee as L\nassigned(K, Sales) ::: K must be assigned to the Sales Committee\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(And(assigned(F, c1), assigned(G, c2), assigned(H, c3), Not(c1 == c2), Not(c1 == c3), Not(c2 == c3)))) ::: A) F and G are each assigned to exactly one committee.\nis_exception(is_sat(And(assigned(F, c1), assigned(H, c2), assigned(M, c3), Not(c1 == c2), Not(c1 == c3), Not(c2 == c3)))) ::: B) F and H are each assigned to exactly one committee.\nis_exception(is_sat(And(assigned(G, c1), assigned(H, c2), assigned(M, c3), Not(c1 == c2), Not(c1 == c3), Not(c2 == c3)))) ::: C) G and H are each assigned to exactly one committee.\nis_exception(is_sat(And(assigned(F, Sales), assigned(M, Sales)))) ::: D) F and M are both assigned to the Sales Committee.\nis_exception(is_sat(And(assigned(G, Quality), assigned(K, Quality)))) ::: E) G and K are"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_3_13",
    "context": "On Tuesday Vladimir and Wendy each eat exactly four separate meals: breakfast, lunch, dinner, and a snack. The following is all that is known about what they eat during that day: At no meal does Vladimir eat the same kind of food as Wendy. Neither of them eats the same kind of food more than once during the day. For breakfast, each eats exactly one of the following: hot cakes, poached eggs, or omelet. For lunch, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For dinner, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For a snack, each eats exactly one of the following: fish or omelet. Wendy eats an omelet for lunch.",
    "question": "Which one of the following statements must be true?",
    "answer": "E",
    "options": [
      "A) Vladimir eats fish for lunch.",
      "B) Vladimir eats fish for dinner.",
      "C) Vladimir eats fish for his snack.",
      "D) Wendy eats fish for dinner.",
      "E) Wendy eats fish for her snack."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Vladimir, Wendy])\nmeals = EnumSort([breakfast, lunch, dinner, snack])\nfoods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])\neats = Function([people, meals] -> [foods])\n\n# Constraints\nForAll([m:meals], eats(Vladimir, m)!= eats(Wendy, m)) ::: At no meal does Vladimir eat the same kind of food as Wendy\nForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1) ::: Neither of them eats the same kind of food more than once during the day\nForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet)) ::: For breakfast, each eats exactly one of the following: hot cakes, poached eggs, or omelet\nForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet)) ::: For lunch, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet\nForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet)) ::: For dinner, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet\nForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet)) ::: For a snack, each eats exactly one of the following: fish or omelet\neats(Wendy, lunch) == omelet ::: Wendy eats an omelet for lunch\n\n# Options\nQuestion ::: Which one of the following statements must be true?\nis_valid(Exists([m:meals], eats(Vladimir, m) == fish)) ::: (A)\nis_valid(Exists([m:meals], eats(Vladimir, m) == fish)) ::: (B)\nis_valid(Exists([m:meals], eats(Vladimir, m) == fish)) ::: (C)\nis_valid(Exists([m:meals], eats(Wendy, m) == fish)) ::: (D)\nis_valid(Exists([m:meals], eats(Wendy, m) == fish)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_3_14",
    "context": "On Tuesday Vladimir and Wendy each eat exactly four separate meals: breakfast, lunch, dinner, and a snack. The following is all that is known about what they eat during that day: At no meal does Vladimir eat the same kind of food as Wendy. Neither of them eats the same kind of food more than once during the day. For breakfast, each eats exactly one of the following: hot cakes, poached eggs, or omelet. For lunch, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For dinner, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For a snack, each eats exactly one of the following: fish or omelet. Wendy eats an omelet for lunch.",
    "question": "Vladimir must eat which one of the following foods?",
    "answer": "D",
    "options": [
      "A) fish",
      "B) hot cakes",
      "C) macaroni",
      "D) omelet",
      "E) poached eggs"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Vladimir, Wendy])\nmeals = EnumSort([breakfast, lunch, dinner, snack])\nfoods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])\neats = Function([people, meals] -> [foods])\n\n# Constraints\nForAll([m:meals], eats(Vladimir, m)!= eats(Wendy, m)) ::: At no meal does Vladimir eat the same kind of food as Wendy\nForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1) ::: Neither of them eats the same kind of food more than once during the day\nForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet)) ::: For breakfast, each eats exactly one of the following: hot cakes, poached eggs, or omelet\nForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet)) ::: For lunch, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet\nForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet)) ::: For dinner, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet\nForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet)) ::: For a snack, each eats exactly one of the following: fish or omelet\neats(Wendy, lunch) == omelet ::: Wendy eats an omelet for lunch\n\n# Options\nQuestion ::: Vladimir must eat which one of the following foods?\nis_valid(Exists([m:meals], eats(Vladimir, m) == fish)) ::: (A)\nis_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes)) ::: (B)\nis_valid(Exists([m:meals], eats(Vladimir, m) == macaroni)) ::: (C)\nis_valid(Exists([m:meals], eats(Vladimir, m) == omelet)) ::: (D)\nis_valid(Exists([m:meals], eats(Vladimir, m) == po"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_3_15",
    "context": "On Tuesday Vladimir and Wendy each eat exactly four separate meals: breakfast, lunch, dinner, and a snack. The following is all that is known about what they eat during that day: At no meal does Vladimir eat the same kind of food as Wendy. Neither of them eats the same kind of food more than once during the day. For breakfast, each eats exactly one of the following: hot cakes, poached eggs, or omelet. For lunch, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For dinner, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For a snack, each eats exactly one of the following: fish or omelet. Wendy eats an omelet for lunch.",
    "question": "If both Vladimir and Wendy eat macaroni on Tuesday, then which one of the following statements could be true?",
    "answer": "D",
    "options": [
      "A) Vladimir eats fish for lunch.",
      "B) Vladimir eats hot cakes for lunch.",
      "C) Vladimir eats macaroni for dinner.",
      "D) Wendy eats hot cakes for breakfast.",
      "E) Wendy eats hot cakes for dinner."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Vladimir, Wendy])\nmeals = EnumSort([breakfast, lunch, dinner, snack])\nfoods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])\neats = Function([people, meals] -> [foods])\n\n# Constraints\nForAll([m:meals], eats(Vladimir, m)!= eats(Wendy, m)) ::: At no meal does Vladimir eat the same kind of food as Wendy\nForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1) ::: Neither of them eats the same kind of food more than once during the day\nForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet)) ::: For breakfast, each eats exactly one of the following: hot cakes, poached eggs, or omelet\nForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet)) ::: For lunch, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet\nForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet)) ::: For dinner, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet\nForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet)) ::: For a snack, each eats exactly one of the following: fish or omelet\neats(Wendy, lunch) == omelet ::: Wendy eats an omelet for lunch\neats(Vladimir, lunch) == macaroni ::: Vladimir eats macaroni for lunch\n\n# Options\nQuestion ::: If both Vladimir and Wendy eat macaroni on Tuesday, then which one of the following statements could be true?\nis_valid(Exists([m:meals], eats(Vladimir, m) == fish)) ::: (A)\nis_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes)) ::: (B)\nis_valid(Exists([m:meals], eats(Vladimir, m) == macaroni)) ::: (C)\nis_valid(Exists([m:meals], e"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_3_16",
    "context": "On Tuesday Vladimir and Wendy each eat exactly four separate meals: breakfast, lunch, dinner, and a snack. The following is all that is known about what they eat during that day: At no meal does Vladimir eat the same kind of food as Wendy. Neither of them eats the same kind of food more than once during the day. For breakfast, each eats exactly one of the following: hot cakes, poached eggs, or omelet. For lunch, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For dinner, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For a snack, each eats exactly one of the following: fish or omelet. Wendy eats an omelet for lunch.",
    "question": "If Wendy does not eat macaroni on Tuesday, then which one of the following statements could be true?",
    "answer": "B",
    "options": [
      "A) Vladimir eats poached eggs for breakfast.",
      "B) Vladimir eats fish for lunch.",
      "C) Vladimir eats hot cakes for lunch.",
      "D) Wendy eats hot cakes for breakfast.",
      "E) Wendy eats fish for dinner."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Vladimir, Wendy])\nmeals = EnumSort([breakfast, lunch, dinner, snack])\nfoods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])\neats = Function([people, meals] -> [foods])\n\n# Constraints\nForAll([m:meals], eats(Vladimir, m)!= eats(Wendy, m)) ::: At no meal does Vladimir eat the same kind of food as Wendy\nForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1) ::: Neither of them eats the same kind of food more than once during the day\nForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet)) ::: For breakfast, each eats exactly one of the following: hot cakes, poached eggs, or omelet\nForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet)) ::: For lunch, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet\nForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet)) ::: For dinner, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet\nForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet)) ::: For a snack, each eats exactly one of the following: fish or omelet\neats(Wendy, lunch) == omelet ::: Wendy eats an omelet for lunch\neats(Wendy, lunch)!= macaroni ::: Wendy does not eat macaroni on Tuesday\n\n# Options\nQuestion ::: If Wendy does not eat macaroni on Tuesday, then which one of the following statements could be true?\nis_valid(Exists([m:meals], eats(Vladimir, m) == poached_eggs)) ::: (A)\nis_valid(Exists([m:meals], eats(Vladimir, m) == fish)) ::: (B)\nis_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes)) ::: (C)\nis_valid(Exists([m:"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_3_17",
    "context": "On Tuesday Vladimir and Wendy each eat exactly four separate meals: breakfast, lunch, dinner, and a snack. The following is all that is known about what they eat during that day: At no meal does Vladimir eat the same kind of food as Wendy. Neither of them eats the same kind of food more than once during the day. For breakfast, each eats exactly one of the following: hot cakes, poached eggs, or omelet. For lunch, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For dinner, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet. For a snack, each eats exactly one of the following: fish or omelet. Wendy eats an omelet for lunch.",
    "question": "If Wendy eats poached eggs for breakfast, then which one of the following statements cannot be true?",
    "answer": "B",
    "options": [
      "A) Vladimir eats fish for lunch.",
      "B) Vladimir eats hot cakes for lunch.",
      "C) Vladimir eats macaroni for dinner.",
      "D) Wendy eats hot cakes for dinner.",
      "E) Wendy eats macaroni for dinner."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Vladimir, Wendy])\nmeals = EnumSort([breakfast, lunch, dinner, snack])\nfoods = EnumSort([fish, hot_cakes, macaroni, omelet, poached_eggs])\neats = Function([people, meals] -> [foods])\n\n# Constraints\nForAll([m:meals], eats(Vladimir, m)!= eats(Wendy, m)) ::: At no meal does Vladimir eat the same kind of food as Wendy\nForAll([p:people, f:foods], Count([m:meals], eats(p, m) == f) <= 1) ::: Neither of them eats the same kind of food more than once during the day\nForAll([p:people], Or(eats(p, breakfast) == hot_cakes, eats(p, breakfast) == poached_eggs, eats(p, breakfast) == omelet)) ::: For breakfast, each eats exactly one of the following: hot cakes, poached eggs, or omelet\nForAll([p:people], Or(eats(p, lunch) == fish, eats(p, lunch) == hot_cakes, eats(p, lunch) == macaroni, eats(p, lunch) == omelet)) ::: For lunch, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet\nForAll([p:people], Or(eats(p, dinner) == fish, eats(p, dinner) == hot_cakes, eats(p, dinner) == macaroni, eats(p, dinner) == omelet)) ::: For dinner, each eats exactly one of the following: fish, hot cakes, macaroni, or omelet\nForAll([p:people], Or(eats(p, snack) == fish, eats(p, snack) == omelet)) ::: For a snack, each eats exactly one of the following: fish or omelet\neats(Wendy, lunch) == omelet ::: Wendy eats an omelet for lunch\neats(Wendy, breakfast) == poached_eggs ::: Wendy eats poached eggs for breakfast\n\n# Options\nQuestion ::: If Wendy eats poached eggs for breakfast, then which one of the following statements cannot be true?\nis_valid(Exists([m:meals], eats(Vladimir, m) == fish)) ::: (A)\nis_valid(Exists([m:meals], eats(Vladimir, m) == hot_cakes)) ::: (B)\nis_valid(Exists([m:meals], eats(Vladimir, m) == macaroni)) ::: (C)\nis_valid(Exists([m:meals], eats(W"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_4_18",
    "context": "Eight people—Jack, Karen, Laura, Mark, Nick, Owen, Peggy, and Ruth—will be placed on two four-person teams—X and Y—for a relay race that is run in four successive legs: first, second, third, and fourth. The teams race concurrently. Each team member runs exactly one of the legs, one team member per leg, according to the following conditions: Jack is on the same team as Karen. Karen is not on the same team as Nick. Ruth runs an earlier leg of the race than Peggy runs, whether or not they are on the same team as each other. Mark and Nick are both on team Y. Neither Jack nor Mark runs third. Karen and Laura both run second. Owen runs fourth.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) If Jack and Owen are assigned to the same team as each other, Jack runs first.",
      "B) If Jack and Peggy are assigned to the same team as each other, Jack runs fourth.",
      "C) If Jack and Ruth are assigned to the same team as each other, Ruth runs third.",
      "D) If Mark and Owen are assigned to the same team as each other, Mark runs fourth.",
      "E) If Mark and Ruth are assigned to the same team as each other, Ruth runs third."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Jack, Karen, Laura, Mark, Nick, Owen, Peggy, Ruth])\nteams = EnumSort([X, Y])\nlegs = EnumSort([first, second, third, fourth])\nruns = Function([people, teams, legs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([t:teams], runs(p, t, first)) == 1) ::: Each team member runs exactly one of the legs\nAnd(runs(Jack, X, first), runs(Karen, X, first)) ::: Jack is on the same team as Karen\nAnd(runs(Karen, X, first), runs(Nick, X, first)) ::: Karen is not on the same team as Nick\nAnd(runs(Ruth, X, first), runs(Peggy, X, first)) ::: Ruth runs an earlier leg of the race than Peggy runs\nAnd(runs(Mark, Y, first), runs(Nick, Y, first)) ::: Mark and Nick are both on team Y\nAnd(runs(Jack, X, third), runs(Mark, X, third)) ::: Neither Jack nor Mark runs third\nAnd(runs(Karen, X, second), runs(Laura, X, second)) ::: Karen and Laura both run second\nruns(Owen, X, fourth) ::: Owen runs fourth\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([t:teams], And(runs(Jack, t, first), runs(Owen, t, first)))) ::: (A)\nis_valid(Exists([t:teams], And(runs(Jack, t, fourth), runs(Peggy, t, fourth)))) ::: (B)\nis_valid(Exists([t:teams], And(runs(Jack, t, third), runs(Ruth, t, third)))) ::: (C)\nis_valid(Exists([t:teams], And(runs(Mark, t, fourth), runs(Owen, t, fourth)))) ::: (D)\nis_valid(Exists([t:teams], And(runs(Mark, t, third), runs(Ruth, t, third)))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10 more than the number of employees in department B. The number of employees in department A is 10 more than the number of employees in department C.\nQuestion:\nIf the number of employees in department B is 20, how many employees are there in department A?\nChoices:\n(A) 30\n(B) 40\n("
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_4_19",
    "context": "Eight people—Jack, Karen, Laura, Mark, Nick, Owen, Peggy, and Ruth—will be placed on two four-person teams—X and Y—for a relay race that is run in four successive legs: first, second, third, and fourth. The teams race concurrently. Each team member runs exactly one of the legs, one team member per leg, according to the following conditions: Jack is on the same team as Karen. Karen is not on the same team as Nick. Ruth runs an earlier leg of the race than Peggy runs, whether or not they are on the same team as each other. Mark and Nick are both on team Y. Neither Jack nor Mark runs third. Karen and Laura both run second. Owen runs fourth.",
    "question": "If Ruth is assigned to team X, which one of the following is a complete and accurate list of the legs that she could run?",
    "answer": "D",
    "options": [
      "A) first",
      "B) second",
      "C) first, second",
      "D) first, third",
      "E) second, third"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Jack, Karen, Laura, Mark, Nick, Owen, Peggy, Ruth])\nteams = EnumSort([X, Y])\nlegs = EnumSort([first, second, third, fourth])\nruns = Function([people, teams, legs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([t:teams], runs(p, t, first)) == 1) ::: Each team member runs exactly one of the legs\nAnd(runs(Jack, _, first), runs(Karen, _, first)) ::: Jack is on the same team as Karen\nNot(runs(Karen, _, first), runs(Nick, _, first)) ::: Karen is not on the same team as Nick\nAnd(runs(Ruth, _, first), runs(Peggy, _, first)) ::: Ruth runs an earlier leg of the race than Peggy runs\nAnd(runs(Mark, Y, first), runs(Nick, Y, first)) ::: Mark and Nick are both on team Y\nNot(runs(Jack, _, third), runs(Mark, _, third)) ::: Neither Jack nor Mark runs third\nAnd(runs(Karen, _, second), runs(Laura, _, second)) ::: Karen and Laura both run second\nruns(Owen, _, fourth) ::: Owen runs fourth\n\n# Options\nQuestion ::: If Ruth is assigned to team X, which one of the following is a complete and accurate list of the legs that she could run?\nis_sat(ForAll([l:legs], runs(Ruth, X, l) == runs(Ruth, X, first))) ::: A) first\nis_sat(ForAll([l:legs], runs(Ruth, X, l) == runs(Ruth, X, second))) ::: B) second\nis_sat(ForAll([l:legs], runs(Ruth, X, l) == runs(Ruth, X, first) || runs(Ruth, X, l) == runs(Ruth, X, second))) ::: C) first, second\nis_sat(ForAll([l:legs], runs(Ruth, X, l) == runs(Ruth, X, first) || runs(Ruth, X, l) == runs(Ruth, X, third))) ::: D) first, third\nis_sat(ForAll([l:legs], runs(Ruth, X, l) == runs(Ruth, X, second) || runs(Ruth, X, l) == runs(Ruth, X, third))) ::: E) second, third\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_4_20",
    "context": "Eight people—Jack, Karen, Laura, Mark, Nick, Owen, Peggy, and Ruth—will be placed on two four-person teams—X and Y—for a relay race that is run in four successive legs: first, second, third, and fourth. The teams race concurrently. Each team member runs exactly one of the legs, one team member per leg, according to the following conditions: Jack is on the same team as Karen. Karen is not on the same team as Nick. Ruth runs an earlier leg of the race than Peggy runs, whether or not they are on the same team as each other. Mark and Nick are both on team Y. Neither Jack nor Mark runs third. Karen and Laura both run second. Owen runs fourth.",
    "question": "If Owen and Ruth are assigned to the same team as each other, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Mark runs fourth.",
      "B) Nick runs first.",
      "C) Nick runs fourth.",
      "D) Peggy runs first.",
      "E) Peggy runs fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Jack, Karen, Laura, Mark, Nick, Owen, Peggy, Ruth])\nteams = EnumSort([X, Y])\nlegs = EnumSort([first, second, third, fourth])\nruns = Function([people, teams, legs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([t:teams], runs(p, t, first)) == 1) ::: Each team member runs exactly one of the legs\nForAll([t:teams], Count([p:people], runs(p, t, first)) == 1) ::: Each team member runs exactly one of the legs\nForAll([t:teams], Count([p:people], runs(p, t, second)) == 1) ::: Each team member runs exactly one of the legs\nForAll([t:teams], Count([p:people], runs(p, t, third)) == 1) ::: Each team member runs exactly one of the legs\nForAll([t:teams], Count([p:people], runs(p, t, fourth)) == 1) ::: Each team member runs exactly one of the legs\nForAll([p:people], Count([t:teams], runs(p, t, first)) + Count([t:teams], runs(p, t, second)) + Count([t:teams], runs(p, t, third)) + Count([t:teams], runs(p, t, fourth)) == 1) ::: Each team member runs exactly one of the legs\nAnd(runs(Jack, X, first), runs(Karen, X, second)) ::: Jack is on the same team as Karen\nAnd(runs(Karen, X, first), runs(Karen, Y, second)) ::: Karen is not on the same team as Nick\nAnd(runs(Ruth, X, first), runs(Ruth, Y, second)) ::: Ruth runs an earlier leg of the race than Peggy runs\nAnd(runs(Mark, Y, first), runs(Nick, Y, second)) ::: Mark and Nick are both on team Y\nAnd(runs(Karen, X, first), runs(Laura, X, second)) ::: Karen and Laura both run second\nAnd(runs(Owen, X, first), runs(Owen, Y, second)) ::: Owen runs fourth\n\n# Options\nQuestion ::: If Owen and Ruth are assigned to the same team as each other, which one of the following must be true?\nis_valid(Exists([t:teams], And(runs(Owen, t, fourth), runs(Mark, t, fourth)))) ::: A) Mark runs fourth.\nis_valid(Exists([t:teams], And(runs(Nick, t, first), runs(Mark, t, first)))) ::: B) Nick runs first.\nis_valid(Exists([t:teams], And(runs(Nick, t, fourth),"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_4_21",
    "context": "Eight people—Jack, Karen, Laura, Mark, Nick, Owen, Peggy, and Ruth—will be placed on two four-person teams—X and Y—for a relay race that is run in four successive legs: first, second, third, and fourth. The teams race concurrently. Each team member runs exactly one of the legs, one team member per leg, according to the following conditions: Jack is on the same team as Karen. Karen is not on the same team as Nick. Ruth runs an earlier leg of the race than Peggy runs, whether or not they are on the same team as each other. Mark and Nick are both on team Y. Neither Jack nor Mark runs third. Karen and Laura both run second. Owen runs fourth.",
    "question": "Any of the following can be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) Jack runs first.",
      "B) Mark runs fourth.",
      "C) Nick runs first.",
      "D) Nick and Peggy both run third.",
      "E) Owen and Peggy both run fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Jack, Karen, Laura, Mark, Nick, Owen, Peggy, Ruth])\nteams = EnumSort([X, Y])\nlegs = EnumSort([first, second, third, fourth])\nruns = Function([people, teams, legs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([t:teams], runs(p, t, first)) == 1) ::: Each team member runs exactly one of the legs\nForAll([t:teams], Count([l:legs], runs(Jack, t, l)) == 1) ::: Jack is on the same team as Karen\nForAll([t:teams], Count([l:legs], runs(Karen, t, l)) == 1) ::: Karen is not on the same team as Nick\nForAll([t:teams], Count([l:legs], runs(Nick, t, l)) == 1) ::: Ruth runs an earlier leg of the race than Peggy runs\nForAll([t:teams], Count([l:legs], runs(Ruth, t, l)) == 1) ::: Mark and Nick are both on team Y\nForAll([t:teams], Count([l:legs], runs(Mark, t, l)) == 1) ::: Neither Jack nor Mark runs third\nForAll([t:teams], Count([l:legs], runs(Nick, t, l)) == 1) ::: Karen and Laura both run second\nForAll([t:teams], Count([l:legs], runs(Laura, t, l)) == 1) ::: Owen runs fourth\nForAll([t:teams], Count([l:legs], runs(Owen, t, l)) == 1) ::: Peggy runs fourth\n\n# Options\nQuestion ::: Any of the following can be true EXCEPT:\nis_exception(is_sat(runs(Jack, X, first))) ::: (A)\nis_exception(is_sat(runs(Mark, Y, fourth))) ::: (B)\nis_exception(is_sat(runs(Nick, Y, first))) ::: (C)\nis_exception(is_sat(runs(Nick, Y, third) && runs(Peggy, X, third))) ::: (D)\nis_exception(is_sat(runs(Owen, Y, fourth) && runs(Peggy, X, fourth))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10 more than the number of employees in department B. The number of employees in department A is 1"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_4_22",
    "context": "Eight people—Jack, Karen, Laura, Mark, Nick, Owen, Peggy, and Ruth—will be placed on two four-person teams—X and Y—for a relay race that is run in four successive legs: first, second, third, and fourth. The teams race concurrently. Each team member runs exactly one of the legs, one team member per leg, according to the following conditions: Jack is on the same team as Karen. Karen is not on the same team as Nick. Ruth runs an earlier leg of the race than Peggy runs, whether or not they are on the same team as each other. Mark and Nick are both on team Y. Neither Jack nor Mark runs third. Karen and Laura both run second. Owen runs fourth.",
    "question": "If Ruth and Peggy are assigned to the same team as each other, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Jack runs first.",
      "B) Mark runs fourth.",
      "C) Nick runs third.",
      "D) Peggy runs third.",
      "E) Ruth runs first."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Jack, Karen, Laura, Mark, Nick, Owen, Peggy, Ruth])\nteams = EnumSort([X, Y])\nlegs = EnumSort([first, second, third, fourth])\nruns = Function([people, teams, legs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([t:teams], runs(p, t, first)) == 1) ::: Each team member runs exactly one of the legs\nForAll([t:teams], Count([p:people], runs(p, t, first)) == 1) ::: Each team member runs exactly one of the legs\nForAll([t:teams], Count([p:people], runs(p, t, second)) == 1) ::: Each team member runs exactly one of the legs\nForAll([t:teams], Count([p:people], runs(p, t, third)) == 1) ::: Each team member runs exactly one of the legs\nForAll([t:teams], Count([p:people], runs(p, t, fourth)) == 1) ::: Each team member runs exactly one of the legs\nForAll([t:teams], Count([l:legs], Count([p:people], runs(p, t, l)) == 1) == 4) ::: Each team member runs exactly one of the legs\nAnd(runs(Jack, X, first), runs(Karen, X, first)) ::: Jack is on the same team as Karen\nImplies(runs(Karen, X, first), Not(runs(Nick, X, first))) ::: Karen is not on the same team as Nick\nImplies(runs(Ruth, X, first), runs(Peggy, X, first)) ::: Ruth runs an earlier leg of the race than Peggy runs\nruns(Mark, Y, first) ::: Mark and Nick are both on team Y\nruns(Nick, Y, first) ::: Mark and Nick are both on team Y\nruns(Neither(Jack, Mark), Y, third) ::: Neither Jack nor Mark runs third\nruns(Karen, X, second) ::: Karen and Laura both run second\nruns(Laura, X, second) ::: Karen and Laura both run second\nruns(Owen, X, fourth) ::: Owen runs fourth\n\n# Options\nQuestion ::: If Ruth and Peggy are assigned to the same team as each other, which one of the following must be true?\nis_valid(Exists([t:teams], runs(Jack, t, first))) ::: (A)\nis_valid(Exists([t:teams], runs(Mark, t, fourth))) ::: (B)\nis_valid(Exists([t:teams], runs(Nick, t, third))) ::: (C)\nis_valid(Exists([t:teams], runs(Peggy, t, third))) ::: (D)"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_4_23",
    "context": "Eight people—Jack, Karen, Laura, Mark, Nick, Owen, Peggy, and Ruth—will be placed on two four-person teams—X and Y—for a relay race that is run in four successive legs: first, second, third, and fourth. The teams race concurrently. Each team member runs exactly one of the legs, one team member per leg, according to the following conditions: Jack is on the same team as Karen. Karen is not on the same team as Nick. Ruth runs an earlier leg of the race than Peggy runs, whether or not they are on the same team as each other. Mark and Nick are both on team Y. Neither Jack nor Mark runs third. Karen and Laura both run second. Owen runs fourth.",
    "question": "Any of the following can be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) Jack runs fourth.",
      "B) Nick runs fourth.",
      "C) Peggy runs fourth.",
      "D) Ruth runs first.",
      "E) Ruth runs third."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Jack, Karen, Laura, Mark, Nick, Owen, Peggy, Ruth])\nteams = EnumSort([X, Y])\nlegs = EnumSort([first, second, third, fourth])\nruns = Function([people, teams, legs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([t:teams], runs(p, t, _)) == 1) ::: Each team member runs exactly one of the legs\nAnd(runs(Jack, _, _), runs(Karen, _, _)) ::: Jack is on the same team as Karen\nNot(runs(Karen, _, _), runs(Nick, _, _)) ::: Karen is not on the same team as Nick\nAnd(runs(Ruth, _, first), runs(Ruth, _, second), runs(Ruth, _, third), runs(Ruth, _, fourth)) ::: Ruth runs an earlier leg of the race than Peggy runs\nAnd(runs(Mark, Y, _), runs(Nick, Y, _)) ::: Mark and Nick are both on team Y\nNot(runs(Jack, _, third), runs(Mark, _, third)) ::: Neither Jack nor Mark runs third\nAnd(runs(Karen, _, second), runs(Laura, _, second)) ::: Karen and Laura both run second\nruns(Owen, _, fourth) ::: Owen runs fourth\n\n# Options\nQuestion ::: Any of the following can be true EXCEPT:\nis_exception(is_sat(runs(Jack, _, fourth))) ::: (A)\nis_exception(is_sat(runs(Nick, _, fourth))) ::: (B)\nis_exception(is_sat(runs(Peggy, _, fourth))) ::: (C)\nis_exception(is_sat(runs(Ruth, _, first))) ::: (D)\nis_exception(is_sat(runs(Ruth, _, third))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199512_1-G_4_24",
    "context": "Eight people—Jack, Karen, Laura, Mark, Nick, Owen, Peggy, and Ruth—will be placed on two four-person teams—X and Y—for a relay race that is run in four successive legs: first, second, third, and fourth. The teams race concurrently. Each team member runs exactly one of the legs, one team member per leg, according to the following conditions: Jack is on the same team as Karen. Karen is not on the same team as Nick. Ruth runs an earlier leg of the race than Peggy runs, whether or not they are on the same team as each other. Mark and Nick are both on team Y. Neither Jack nor Mark runs third. Karen and Laura both run second. Owen runs fourth.",
    "question": "If Peggy runs third on the same team to which Jack is assigned, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Jack runs the first leg on the team to which he is assigned.",
      "B) Ruth runs the first leg on the team to which she is assigned.",
      "C) Owen runs on the same team as Jack.",
      "D) Owen runs on the same team as Mark.",
      "E) Ruth runs on the same team as Mark."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Jack, Karen, Laura, Mark, Nick, Owen, Peggy, Ruth])\nteams = EnumSort([X, Y])\nlegs = EnumSort([first, second, third, fourth])\nruns = Function([people, teams, legs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([t:teams], runs(p, t, first)) == 1) ::: Each team member runs exactly one of the legs\nAnd(runs(Jack, X, first), runs(Karen, X, first)) ::: Jack is on the same team as Karen\nNot(runs(Karen, X, first), runs(Nick, X, first)) ::: Karen is not on the same team as Nick\nAnd(runs(Ruth, X, first), runs(Peggy, X, first)) ::: Ruth runs an earlier leg of the race than Peggy runs\nAnd(runs(Mark, Y, first), runs(Nick, Y, first)) ::: Mark and Nick are both on team Y\nNot(runs(Jack, X, third), runs(Mark, Y, third)) ::: Neither Jack nor Mark runs third\nAnd(runs(Karen, X, second), runs(Laura, X, second)) ::: Karen and Laura both run second\nruns(Owen, Y, fourth) ::: Owen runs fourth\n\n# Options\nQuestion ::: If Peggy runs third on the same team to which Jack is assigned, which one of the following must be true?\nis_valid(Exists([t:teams], And(runs(Jack, t, first), runs(Peggy, t, third)))) ::: A) Jack runs the first leg on the team to which he is assigned.\nis_valid(Exists([t:teams], And(runs(Ruth, t, first), runs(Peggy, t, third)))) ::: B) Ruth runs the first leg on the team to which she is assigned.\nis_valid(Exists([t:te"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_1_1",
    "context": "A contractor is scheduling construction of seven decks—F, G, H, J, K, L, and M—during a seven-week period: week 1 through week 7. Because of customers' requirements, exactly one deck must be built each week according to the following conditions: G must be built at some time before K is built. L must be built either immediately before or immediately after M is built. F must be built during week 5. J must be built during week 2 or week 6.",
    "question": "Which one of the following is an acceptable construction schedule for the decks, in order from the deck built in week 1 to that built in week 7?",
    "answer": "D",
    "options": [
      "A) G, K, H, M, F, J, L",
      "B) H, G, L, M, F, K, J",
      "C) H, J, G, F, M, L, K",
      "D) H, M, L, G, F, J, K",
      "E) K, J, H, G, F, M, L"
    ],
    "raw_logic_programs": [
      "# Declarations\ndecks = EnumSort([F, G, H, J, K, L, M])\nweeks = EnumSort([week1, week2, week3, week4, week5, week6, week7])\nbuilt = Function([decks, weeks] -> [bool])\n\n# Constraints\nForAll([d:decks], Count([w:weeks], built(d, w)) == 1) ::: exactly one deck must be built each week\nAnd(built(G, w), built(K, w2), w < w2) ::: G must be built at some time before K is built\nAnd(built(L, w), built(M, w2), w == w2 - 1) ::: L must be built either immediately before or immediately after M is built\nbuilt(F, week5) ::: F must be built during week 5\nAnd(built(J, week2), built(J, week6)) ::: J must be built during week 2 or week 6\n\n# Options\nQuestion ::: Which one of the following is an acceptable construction schedule for the decks, in order from the deck built in week 1 to that built in week 7?\nis_sat(And(built(G, week1), built(K, week2), built(H, week3), built(M, week4), built(F, week5), built(J, week6), built(L, week7))) ::: A) G, K, H, M, F, J, L\nis_sat(And(built(H, week1), built(G, week2), built(L, week3), built(M, week4), built(F, week5), built(K, week6), built(J, week7))) ::: B) H, G, L, M, F, K, J\nis_sat(And(built(H, week1), built(J, week2), built(G, week3), built(F, week4), built(M, week5), built(L, week6), built("
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_1_2",
    "context": "A contractor is scheduling construction of seven decks—F, G, H, J, K, L, and M—during a seven-week period: week 1 through week 7. Because of customers' requirements, exactly one deck must be built each week according to the following conditions: G must be built at some time before K is built. L must be built either immediately before or immediately after M is built. F must be built during week 5. J must be built during week 2 or week 6.",
    "question": "If G is built at some time after F is built, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) G is built during week 7.",
      "B) H is built during week 1.",
      "C) J is built during week 6.",
      "D) L is built during week 3.",
      "E) M is built during week 1."
    ],
    "raw_logic_programs": [
      "# Declarations\ndecks = EnumSort([F, G, H, J, K, L, M])\nweeks = EnumSort([week1, week2, week3, week4, week5, week6, week7])\nbuilt = Function([decks, weeks] -> [bool])\n\n# Constraints\nForAll([d:decks], Count([w:weeks], built(d, w)) == 1) ::: exactly one deck must be built each week\nAnd(built(G, w), built(K, w')) ::: G must be built at some time before K is built\nAnd(built(L, w), built(M, w')) ::: L must be built either immediately before or immediately after M is built\nbuilt(F, week5) ::: F must be built during week 5\nAnd(built(J, week2), built(J, week6)) ::: J must be built during week 2 or week 6\n\n# Options\nQuestion ::: If G is built at some time after F is built, which one of the following must be true?\nis_sat(ForAll([w:weeks], built(G, w) == built(F, w))) ::: A) G is built during week 7.\nis_sat(ForAll([w:weeks], built(H, w) == built(F, w))) ::: B) H is built during week 1.\nis_sat(ForAll([w:weeks], built(J, w) == built(F, w))) ::: C) J is built during week 6.\nis_sat(ForAll([w:weeks], built(L, w) == built(F, w))) ::: D) L is built during week 3.\nis_sat(ForAll([w:weeks], built(M, w) == built(F, w))) ::: E) M is built during week 1.\n------\nProblem:\nA company has six employees—F, G, H, J, K, and L—who work in pairs to complete six"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_1_3",
    "context": "A contractor is scheduling construction of seven decks—F, G, H, J, K, L, and M—during a seven-week period: week 1 through week 7. Because of customers' requirements, exactly one deck must be built each week according to the following conditions: G must be built at some time before K is built. L must be built either immediately before or immediately after M is built. F must be built during week 5. J must be built during week 2 or week 6.",
    "question": "Which one of the following is a complete and accurate list of the weeks any one of which could be the week in which K is built?",
    "answer": "E",
    "options": [
      "A) 2, 3, 6",
      "B) 2, 3, 7",
      "C) 2, 5, 6, 7",
      "D) 1, 2, 3, 6, 7",
      "E) 2, 3, 4, 6, 7"
    ],
    "raw_logic_programs": [
      "# Declarations\ndecks = EnumSort([F, G, H, J, K, L, M])\nweeks = EnumSort([week1, week2, week3, week4, week5, week6, week7])\nbuilt = Function([decks, weeks] -> [bool])\n\n# Constraints\nForAll([d:decks], Count([w:weeks], built(d, w)) == 1) ::: exactly one deck must be built each week\nAnd(built(G, w), built(K, w')) ::: G must be built at some time before K is built\nAnd(built(L, w), built(M, w')) ::: L must be built either immediately before or immediately after M is built\nbuilt(F, week5) ::: F must be built during week 5\nbuilt(J, week2) ::: J must be built during week 2 or week 6\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the weeks any one of which could be the week in which K is built?\nis_valid(ForAll([w:weeks], built(K, w) == (w == week2 || w == week3 || w == week6))) ::: A) 2, 3, 6\nis_valid(ForAll([w:weeks], built(K, w) == (w == week2 || w == week3 || w == week7))) ::: B) 2, 3, 7\nis_valid(ForAll([w:weeks], built(K, w) == (w == week2 || w == week5 || w == week6 || w == week7))) ::: C) 2, 5, 6, 7\nis_valid(ForAll([w:weeks], built(K, w) == (w == week1 || w == week2 || w == week3 || w == week6 || w == week7))) ::: D) 1, 2, 3, 6, 7\nis_valid(ForAll([w:weeks],"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_1_4",
    "context": "A contractor is scheduling construction of seven decks—F, G, H, J, K, L, and M—during a seven-week period: week 1 through week 7. Because of customers' requirements, exactly one deck must be built each week according to the following conditions: G must be built at some time before K is built. L must be built either immediately before or immediately after M is built. F must be built during week 5. J must be built during week 2 or week 6.",
    "question": "Which one of the following is a complete and accurate list of decks any one of which could be the deck built in week 3?",
    "answer": "D",
    "options": [
      "A) K, L, M",
      "B) F, G, H, K",
      "C) F, H, K, M",
      "D) G, H, K, L, M",
      "E) H, J, K, L, M"
    ],
    "raw_logic_programs": [
      "# Declarations\ndecks = EnumSort([F, G, H, J, K, L, M])\nweeks = EnumSort([week1, week2, week3, week4, week5, week6, week7])\nbuilt = Function([decks, weeks] -> [bool])\n\n# Constraints\nForAll([d:decks], Count([w:weeks], built(d, w)) == 1) ::: exactly one deck must be built each week\nAnd(built(G, w), built(K, w2), w < w2) ::: G must be built at some time before K is built\nAnd(built(L, w), built(M, w2), w == w2 - 1) ::: L must be built either immediately before or immediately after M is built\nbuilt(F, week5) ::: F must be built during week 5\nAnd(built(J, week2), built(J, week6)) ::: J must be built during week 2 or week 6\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of decks any one of which could be the deck built in week 3?\nis_sat(ForAll([d:decks], built(d, week3) == (d == K) || (d == L) || (d == M))) ::: A) K, L, M\nis_sat(ForAll([d:decks], built(d, week3) == (d == F) || (d == G) || (d == H) || (d == K))) ::: B) F, G, H, K\nis_sat(ForAll([d:decks], built(d, week3) == (d == F) || (d == H) || (d == K) || (d == M))) ::: C) F, H, K, M\nis_sat(ForAll([d:decks], built(d, week3) == (d == G) || (d == H) || (d == K) || (d == L)"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_1_5",
    "context": "A contractor is scheduling construction of seven decks—F, G, H, J, K, L, and M—during a seven-week period: week 1 through week 7. Because of customers' requirements, exactly one deck must be built each week according to the following conditions: G must be built at some time before K is built. L must be built either immediately before or immediately after M is built. F must be built during week 5. J must be built during week 2 or week 6.",
    "question": "If G is built during week 4, then there are exactly how many acceptable orders any one of which could be the order in which the seven decks are built?",
    "answer": "D",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\ndecks = EnumSort([F, G, H, J, K, L, M])\nweeks = EnumSort([week1, week2, week3, week4, week5, week6, week7])\nbuilt = Function([decks, weeks] -> [bool])\n\n# Constraints\nForAll([d:decks], Count([w:weeks], built(d, w)) == 1) ::: exactly one deck must be built each week\nAnd(built(G, week4), built(K, week5)) ::: G must be built at some time before K is built\nAnd(built(L, week6), built(M, week7)) ::: L must be built either immediately before or immediately after M is built\nbuilt(F, week5) ::: F must be built during week 5\nAnd(built(J, week2), built(J, week6)) ::: J must be built during week 2 or week 6\n\n# Options\nQuestion ::: If G is built during week 4, then there are exactly how many acceptable orders any one of which could be the order in which the seven decks are built?\nis_sat(ForAll([d:decks], Count([w:weeks], built(d, w)) == 1)) ::: A) one\nis_sat(ForAll([d:decks], Count([w:weeks], built(d, w)) == 2)) ::: B) two\nis_sat(ForAll([d:decks], Count([w:weeks], built(d, w)) == 3)) ::: C) three\nis_sat(ForAll([d:decks], Count([w:weeks], built(d, w)) == 4)) ::: D) four\nis_sat(ForAll([d:decks], Count([w:weeks], built(d, w)) == 5)) ::: E) five\n------\nProblem:\nA company has six employees—F, G, H, J, K, and L—who are to be assigned"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_2_6",
    "context": "Each of five salespeople—F, G, H, I, and J—will present a different one of a company's products—L, M, N, O, and P—at a convention running from Monday through Wednesday. Exactly two products will be presented on Monday, exactly one on Tuesday, and exactly two on Wednesday. The scheduling of presentations is governed by the following conditions: F cannot present a product on the same day as H. Either I or else J must present product N on Tuesday. G must present a product on the day that product O is presented, whether or not G is the salesperson who presents product O.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) If F presents a product on Monday, then G presents product O.",
      "B) If I presents a product on Tuesday, then J presents a product on Monday.",
      "C) If J presents a product on Tuesday, then G presents a product on Monday.",
      "D) If both F and J present products on Monday, then H presents product O.",
      "E) If both H and I present products on Wednesday, then product O is presented on Monday."
    ],
    "raw_logic_programs": [
      "# Declarations\nsalespeople = EnumSort([F, G, H, I, J])\nproducts = EnumSort([L, M, N, O, P])\npresent = Function([salespeople, products] -> [bool])\n\n# Constraints\nForAll([s:salespeople], Count([p:products], present(s, p)) == 1) ::: Each of five salespeople will present a different one of a company's products\nAnd(present(F, _), present(H, _)) ::: F cannot present a product on the same day as H\nAnd(present(I, N), present(J, N)) ::: Either I or else J must present product N on Tuesday\nAnd(present(G, _), present(O, _)) ::: G must present a product on the day that product O is presented\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(And(present(F, _), present(G, O))) ::: (A)\nis_valid(And(present(I, _), present(J, _))) ::: (B)\nis_valid(And(present(J, _), present(G, _))) ::: (C)\nis_valid(And(present(F, _), present(J, _))) ::: (D)\nis_valid(And(present(H, _), present(O, _))) ::: (E)\n------\nProblem:\nA company has five employees—F, G, H, I, and J—who are to be assigned to five different positions—manager, assistant manager, salesperson, bookkeeper, and receptionist. The assignment of employees to positions is governed by the following conditions: Either F or G must be the manager. Either H or I must be the assistant manager. Either J or H must be the salesperson. Either F or I must be the bookkeeper. Either G or J must be the receptionist.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) If F is the manager, then H is the assistant"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_2_7",
    "context": "Each of five salespeople—F, G, H, I, and J—will present a different one of a company's products—L, M, N, O, and P—at a convention running from Monday through Wednesday. Exactly two products will be presented on Monday, exactly one on Tuesday, and exactly two on Wednesday. The scheduling of presentations is governed by the following conditions: F cannot present a product on the same day as H. Either I or else J must present product N on Tuesday. G must present a product on the day that product O is presented, whether or not G is the salesperson who presents product O.",
    "question": "If salespeople H and I present products on Monday, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) F presents product M.",
      "B) G presents product L.",
      "C) I presents product N.",
      "D) Product O is presented on Wednesday.",
      "E) Product P is presented on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\nsalespeople = EnumSort([F, G, H, I, J])\nproducts = EnumSort([L, M, N, O, P])\npresent = Function([salespeople, products] -> [bool])\n\n# Constraints\nForAll([s:salespeople], Count([p:products], present(s, p)) == 1) ::: Each of five salespeople will present a different one of a company's products\nAnd(present(F, p), present(H, p)) == false ::: F cannot present a product on the same day as H\nAnd(present(I, N), present(J, N)) == false ::: Either I or else J must present product N on Tuesday\nAnd(present(G, O), present(O, p)) == false ::: G must present a product on the day that product O is presented\n\n# Options\nQuestion ::: If salespeople H and I present products on Monday, which one of the following must be true?\nis_sat(ForAll([p:products], present(F, p) == present(M, p))) ::: (A)\nis_sat(ForAll([p:products], present(G, p) == present(L, p))) ::: (B)\nis_sat(ForAll([p:products], present(I, p) == present(N, p))) ::: (C)\nis_sat(ForAll([p:products], present(O, p) == present(Wednesday, p))) ::: (D)\nis_sat(ForAll([p:products], present(P, p) == present(Wednesday, p))) ::: (E)\n------\nProblem:\nA company has five employees—F, G, H, I, and J—who are to be assigned to five different projects—L, M, N, O, and P—in such a way that each employee is assigned to exactly one project. The assignments are to be made in accordance with the following conditions: F is assigned to project L. H is assigned to project N"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_2_8",
    "context": "Each of five salespeople—F, G, H, I, and J—will present a different one of a company's products—L, M, N, O, and P—at a convention running from Monday through Wednesday. Exactly two products will be presented on Monday, exactly one on Tuesday, and exactly two on Wednesday. The scheduling of presentations is governed by the following conditions: F cannot present a product on the same day as H. Either I or else J must present product N on Tuesday. G must present a product on the day that product O is presented, whether or not G is the salesperson who presents product O.",
    "question": "If G presents product P on Wednesday, then any of the following could be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) H presents product O.",
      "B) I presents product N.",
      "C) I presents product O.",
      "D) F makes a presentation on Monday.",
      "E) F makes a presentation on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\nsalespeople = EnumSort([F, G, H, I, J])\nproducts = EnumSort([L, M, N, O, P])\npresent = Function([salespeople, products] -> [bool])\n\n# Constraints\nForAll([s:salespeople], Count([p:products], present(s, p)) == 1) ::: Each of five salespeople will present a different one of a company's products\nForAll([p:products], Count([s:salespeople], present(s, p)) == 1) ::: Each of five salespeople will present a different one of a company's products\nForAll([d:days], Count([s:salespeople], present(s, d)) == 1) ::: Each of five salespeople will present a different one of a company's products\nForAll([d:days], Count([p:products], present(d, p)) == 1) ::: Each of five salespeople will present a different one of a company's products\nForAll([d:days], Count([s:salespeople, p:products], present(s, d, p)) == 1) ::: Each of five salespeople will present a different one of a company's products\nForAll([d:days], Count([s:salespeople, p:products], present(s, d, p)) == 1) ::: Each of five salespeople will present a different one of a company's products\nForAll([d:days], Count([s:salespeople, p:products], present(s, d, p)) == 1) ::: Each of five salespeople will present a different one of a company's products\nForAll([d:days], Count([s:salespeople, p:products], present(s, d, p)) == 1) ::: Each of five salespeople will present a different one of a company's products\nForAll([d:days], Count([s:salespeople, p:products], present(s, d, p)) == 1) ::: Each of five salespeople"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_2_9",
    "context": "Each of five salespeople—F, G, H, I, and J—will present a different one of a company's products—L, M, N, O, and P—at a convention running from Monday through Wednesday. Exactly two products will be presented on Monday, exactly one on Tuesday, and exactly two on Wednesday. The scheduling of presentations is governed by the following conditions: F cannot present a product on the same day as H. Either I or else J must present product N on Tuesday. G must present a product on the day that product O is presented, whether or not G is the salesperson who presents product O.",
    "question": "If products M and P are presented on Monday, which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) G presents product P.",
      "B) I presents product O.",
      "C) J presents product L.",
      "D) F presents a product on Monday.",
      "E) G presents a product on Monday."
    ],
    "raw_logic_programs": [
      "# Declarations\nsalespeople = EnumSort([F, G, H, I, J])\nproducts = EnumSort([L, M, N, O, P])\npresent = Function([salespeople, products] -> [bool])\n\n# Constraints\nForAll([s:salespeople], Count([p:products], present(s, p)) == 1) ::: Each of five salespeople will present a different one of a company's products\nAnd(present(F, p), present(H, p)) == false ::: F cannot present a product on the same day as H\nAnd(present(I, N), present(J, N)) == false ::: Either I or else J must present product N on Tuesday\nAnd(present(G, O), present(O, G)) == false ::: G must present a product on the day that product O is presented\n\n# Options\nQuestion ::: If products M and P are presented on Monday, which one of the following could be true?\nis_exception(is_sat(present(G, P))) ::: (A)\nis_exception(is_sat(present(I, O))) ::: (B)\nis_exception(is_sat(present(J, L))) ::: (C)\nis_exception(is_sat(present(F, p))) ::: (D)\nis_exception(is_sat(present(G, p))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_2_10",
    "context": "Each of five salespeople—F, G, H, I, and J—will present a different one of a company's products—L, M, N, O, and P—at a convention running from Monday through Wednesday. Exactly two products will be presented on Monday, exactly one on Tuesday, and exactly two on Wednesday. The scheduling of presentations is governed by the following conditions: F cannot present a product on the same day as H. Either I or else J must present product N on Tuesday. G must present a product on the day that product O is presented, whether or not G is the salesperson who presents product O.",
    "question": "If product O is presented on the same day as product P, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) F presents product O or else product P.",
      "B) F presents neither product O nor product P.",
      "C) H presents product O or else product P.",
      "D) I presents product O or else product P.",
      "E) J presents neither product O nor product P."
    ],
    "raw_logic_programs": [
      "# Declarations\nsalespeople = EnumSort([F, G, H, I, J])\nproducts = EnumSort([L, M, N, O, P])\npresent = Function([salespeople, products] -> [bool])\n\n# Constraints\nForAll([s:salespeople], Count([p:products], present(s, p)) == 1) ::: Each of five salespeople will present a different one of a company's products\nAnd(present(F, L), present(G, M), present(H, N), present(I, O), present(J, P)) ::: each salesperson will present a different one of a company's products\nForAll([s:salespeople], And(1 <= present(s, L), present(s, L) <= 1), And(1 <= present(s, M), present(s, M) <= 1), And(1 <= present(s, N), present(s, N) <= 1), And(1 <= present(s, O), present(s, O) <= 1), And(1 <= present(s, P), present(s, P) <= 1)) ::: exactly two products will be presented on Monday, exactly one on Tuesday, and exactly two on Wednesday\nImplies(present(F, L), Not(present(H, L))) ::: F cannot present a product on the same day as H\nImplies(present(I, N), present(J"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_3_11",
    "context": "The seven members of an academic department are each to be assigned a different room as an office. The department members are professors F and G, lecturers Q, R, and S, and instructors V and W. The available rooms are seven consecutive rooms along one side of a straight hallway numbered sequentially 101 through 107. The assignment must conform to the following conditions: Neither instructor is assigned a room next to a professor's room. Neither professor is assigned room 101 and neither professor is assigned room 107. G is not assigned a room next to R's room. W is not assigned a room next to V's room unless R is also assigned a room next to V's room.",
    "question": "If F and G are assigned rooms that have exactly one room between them, which one of the following is the list of department members each of whom could be assigned to the intervening room?",
    "answer": "B",
    "options": [
      "A) Q, R",
      "B) Q, S",
      "C) Q, V",
      "D) R, W",
      "E) S, V"
    ],
    "raw_logic_programs": [
      "# Declarations\ndepartment_members = EnumSort([F, G, Q, R, S, V, W])\nrooms = EnumSort([101, 102, 103, 104, 105, 106, 107])\nassigned = Function([department_members, rooms] -> [bool])\n\n# Constraints\nForAll([m:department_members], Count([r:rooms], assigned(m, r)) == 1) ::: Each member is assigned a different room\nForAll([m:department_members], And(101 <= assigned(m, r), assigned(m, r) <= 107)) ::: The available rooms are seven consecutive rooms along one side of a straight hallway numbered sequentially 101 through 107\nForAll([m:department_members], Implies(m == F, assigned(m, r)!= 101)) ::: Neither professor is assigned room 101\nForAll([m:department_members], Implies(m == G, assigned(m, r)!= 107)) ::: Neither professor is assigned room 107\nForAll([m:department_members], Implies(m == V, Not(assigned(m, r) == assigned(W, r) + 1))) ::: Neither instructor is assigned a room next to a professor's room"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_3_12",
    "context": "The seven members of an academic department are each to be assigned a different room as an office. The department members are professors F and G, lecturers Q, R, and S, and instructors V and W. The available rooms are seven consecutive rooms along one side of a straight hallway numbered sequentially 101 through 107. The assignment must conform to the following conditions: Neither instructor is assigned a room next to a professor's room. Neither professor is assigned room 101 and neither professor is assigned room 107. G is not assigned a room next to R's room. W is not assigned a room next to V's room unless R is also assigned a room next to V's room.",
    "question": "Which one of the following is a possible assignment of rooms for members R, V, and W?",
    "answer": "C",
    "options": [
      "A) 101: V; 102: W; 103: R",
      "B) 101: V; 102: W, 104: R",
      "C) 101: V; 103: W; 104: R",
      "D) 103: W; 104: V; 106: R",
      "E) 105: R; 106: W; 107: V"
    ],
    "raw_logic_programs": [
      "# Declarations\nmembers = EnumSort([F, G, Q, R, S, V, W])\nrooms = EnumSort([101, 102, 103, 104, 105, 106, 107])\nassigned = Function([members, rooms] -> [bool])\n\n# Constraints\nForAll([m:members], Count([r:rooms], assigned(m, r)) == 1) ::: each member is assigned a different room\nForAll([m:members], Count([r:rooms], assigned(m, r)) == 1) ::: each member is assigned a different room\nForAll([m:members], Count([r:rooms], assigned(m, r)) == 1) ::: each member is assigned a different room\nForAll([m:members], Count([r:rooms], assigned(m, r)) == 1) ::: each member is assigned a different room\nForAll([m:members], Count([r:rooms], assigned(m, r)) == 1) ::: each member is assigned a different room\nForAll([m:members], Count([r:rooms], assigned(m, r)) == 1) ::: each member is assigned a different room\nForAll([m:members], Count([r:rooms], assigned(m, r)) == 1) ::: each member is assigned a different room\nForAll([m:members], Count([r:rooms], assigned("
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_3_13",
    "context": "The seven members of an academic department are each to be assigned a different room as an office. The department members are professors F and G, lecturers Q, R, and S, and instructors V and W. The available rooms are seven consecutive rooms along one side of a straight hallway numbered sequentially 101 through 107. The assignment must conform to the following conditions: Neither instructor is assigned a room next to a professor's room. Neither professor is assigned room 101 and neither professor is assigned room 107. G is not assigned a room next to R's room. W is not assigned a room next to V's room unless R is also assigned a room next to V's room.",
    "question": "If R is assigned room 104, which one of the following must be assigned either room 103 or else room 105?",
    "answer": "A",
    "options": [
      "A) F",
      "B) G",
      "C) Q",
      "D) V",
      "E) W"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([F, G, Q, R, S, V, W])\nrooms = EnumSort([101, 102, 103, 104, 105, 106, 107])\nassigned = Function([people, rooms] -> [bool])\n\n# Constraints\nForAll([p:people], Count([r:rooms], assigned(p, r)) == 1) ::: Each person is assigned a different room\nForAll([p:people], Count([r:rooms], assigned(p, r) == 1) == 1) ::: Each room is assigned to a different person\nForAll([p:people], Implies(assigned(p, 101), p == F)) ::: Neither instructor is assigned a room next to a professor's room\nForAll([p:people], Implies(assigned(p, 107), p == F)) ::: Neither professor is assigned room 101 and neither professor is assigned room 107\nForAll([p:people], Implies(assigned(p, 104), p == R)) ::: G is not assigned a room next to R's room\nForAll([p:people], Implies(assigned(p, 104), p == R)) ::: W is not assigned a room next to V's room unless R is also assigned a room next to"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_3_14",
    "context": "The seven members of an academic department are each to be assigned a different room as an office. The department members are professors F and G, lecturers Q, R, and S, and instructors V and W. The available rooms are seven consecutive rooms along one side of a straight hallway numbered sequentially 101 through 107. The assignment must conform to the following conditions: Neither instructor is assigned a room next to a professor's room. Neither professor is assigned room 101 and neither professor is assigned room 107. G is not assigned a room next to R's room. W is not assigned a room next to V's room unless R is also assigned a room next to V's room.",
    "question": "What is the greatest number of rooms that could be between the rooms to which F and G are assigned?",
    "answer": "A",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([F, G, Q, R, S, V, W])\nrooms = EnumSort([101, 102, 103, 104, 105, 106, 107])\nassigned = Function([people, rooms] -> [bool])\n\n# Constraints\nForAll([p:people], Count([r:rooms], assigned(p, r)) == 1) ::: Each person is assigned a different room\nForAll([p:people], Implies(assigned(p, 101), p == F)) ::: Neither instructor is assigned a room next to a professor's room\nForAll([p:people], Implies(assigned(p, 107), p == F)) ::: Neither professor is assigned room 101 and neither professor is assigned room 107\nForAll([p:people], Implies(assigned(p, 101), p == F)) ::: G is not assigned a room next to R's room\nForAll([p:people], Implies(assigned(p, 107), p == F)) ::: W is not assigned a room next to V's room unless R is also assigned a room next to V's room\n\n# Options\nQuestion ::: What is the greatest number of rooms that could be between the rooms to which F and G are assigned?\nis_valid("
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_3_15",
    "context": "The seven members of an academic department are each to be assigned a different room as an office. The department members are professors F and G, lecturers Q, R, and S, and instructors V and W. The available rooms are seven consecutive rooms along one side of a straight hallway numbered sequentially 101 through 107. The assignment must conform to the following conditions: Neither instructor is assigned a room next to a professor's room. Neither professor is assigned room 101 and neither professor is assigned room 107. G is not assigned a room next to R's room. W is not assigned a room next to V's room unless R is also assigned a room next to V's room.",
    "question": "Which one of the following CANNOT be assigned room 104?",
    "answer": "E",
    "options": [
      "A) F",
      "B) G",
      "C) Q",
      "D) S",
      "E) V"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([F, G, Q, R, S, V, W])\nrooms = EnumSort([101, 102, 103, 104, 105, 106, 107])\nassigned = Function([people, rooms] -> [bool])\n\n# Constraints\nForAll([p:people], Count([r:rooms], assigned(p, r)) == 1) ::: Each person is assigned a different room\nForAll([p:people], Count([r:rooms], assigned(p, r)) == 1) ::: Each person is assigned a different room\nForAll([p:people], Count([r:rooms], assigned(p, r)) == 1) ::: Each person is assigned a different room\nForAll([p:people], Count([r:rooms], assigned(p, r)) == 1) ::: Each person is assigned a different room\nForAll([p:people], Count([r:rooms], assigned(p, r)) == 1) ::: Each person is assigned a different room\nForAll([p:people], Count([r:rooms], assigned(p, r)) == 1) ::: Each person is assigned a different room\nForAll([p:people], Count([r:rooms], assigned(p, r)) == 1) ::: Each person is assigned a different room\nForAll([p:people], Count([r:rooms], assigned("
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_3_16",
    "context": "The seven members of an academic department are each to be assigned a different room as an office. The department members are professors F and G, lecturers Q, R, and S, and instructors V and W. The available rooms are seven consecutive rooms along one side of a straight hallway numbered sequentially 101 through 107. The assignment must conform to the following conditions: Neither instructor is assigned a room next to a professor's room. Neither professor is assigned room 101 and neither professor is assigned room 107. G is not assigned a room next to R's room. W is not assigned a room next to V's room unless R is also assigned a room next to V's room.",
    "question": "If no two faculty members of the same rank are assigned adjacent rooms, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) F is assigned either room 103 or else room 104.",
      "B) Q is assigned either room 102 or else room 106.",
      "C) R is assigned either room 102 or else room 105.",
      "D) S is assigned either room 104 or else room 105.",
      "E) V is assigned either room 101 or else room 107."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([F, G, Q, R, S, V, W])\nrooms = EnumSort([101, 102, 103, 104, 105, 106, 107])\nassigned = Function([people, rooms] -> [bool])\n\n# Constraints\nForAll([p:people], Count([r:rooms], assigned(p, r)) == 1) ::: each person is assigned a different room\nForAll([p:people], Count([r:rooms], assigned(p, r) == 1) == 1) ::: each room is assigned to a different person\nForAll([p:people], Implies(assigned(p, 101), p == F)) ::: neither professor is assigned room 101\nForAll([p:people], Implies(assigned(p, 107), p == G)) ::: neither professor is assigned room 107\nForAll([p:people], Implies(assigned(p, 101), p == F)) ::: neither professor is assigned room 101\nForAll([p:people], Implies(assigned(p, 107), p == G)) ::: neither professor is assigned room 107\nForAll([p:people], Implies(assigned(p, 101), p == F)) ::: neither professor is assigned room"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_3_17",
    "context": "The seven members of an academic department are each to be assigned a different room as an office. The department members are professors F and G, lecturers Q, R, and S, and instructors V and W. The available rooms are seven consecutive rooms along one side of a straight hallway numbered sequentially 101 through 107. The assignment must conform to the following conditions: Neither instructor is assigned a room next to a professor's room. Neither professor is assigned room 101 and neither professor is assigned room 107. G is not assigned a room next to R's room. W is not assigned a room next to V's room unless R is also assigned a room next to V's room.",
    "question": "If F and G are not assigned rooms that are next to each other, which one of the following CANNOT be assigned room 107?",
    "answer": "D",
    "options": [
      "A) W",
      "B) V",
      "C) S",
      "D) R",
      "E) Q"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([F, G, Q, R, S, V, W])\nrooms = EnumSort([101, 102, 103, 104, 105, 106, 107])\nassigned = Function([people, rooms] -> [bool])\n\n# Constraints\nForAll([p:people], Count([r:rooms], assigned(p, r)) == 1) ::: Each person is assigned a different room\nForAll([r:rooms], Count([p:people], assigned(p, r)) == 1) ::: Each room is assigned to a different person\nForAll([p:people], Implies(assigned(p, 101), p == F)) ::: Neither professor is assigned room 101\nForAll([p:people], Implies(assigned(p, 107), p == G)) ::: Neither professor is assigned room 107\nForAll([p:people], Implies(assigned(p, 101), p == F)) ::: Neither professor is assigned room 101\nForAll([p:people], Implies(assigned(p, 107), p == G)) ::: Neither professor is assigned room 107\nForAll([p:people], Implies(assigned(p, 101), p == F)) ::: Neither professor is assigned"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_4_18",
    "context": "The coordinator of an exhibition will select at least four and at most six rugs from a group of eight rugs made up of two oval wool rugs, three rectangular wool rugs, one oval silk rug, and two rectangular silk rugs according to the following conditions: At least two oval rugs must be selected. The number of wool rugs selected can be neither less than two nor more than three. If the oval silk rug is selected, at least one rectangular silk rug must be selected.",
    "question": "Which one of the following is an acceptable selection of rugs for the exhibition?",
    "answer": "D",
    "options": [
      "A) one oval silk rug, one oval wool rug, and two rectangular wool rugs",
      "B) one oval silk rug, one rectangular wool rug, and two rectangular silk rugs",
      "C) two oval wool rugs, one rectangular silk rug, and two rectangular wool rugs",
      "D) two oval wool rugs, one rectangular silk rug, and one rectangular wool rug",
      "E) two rectangular silk rugs and three rectangular wool rugs"
    ],
    "raw_logic_programs": [
      "# Declarations\nrugs = EnumSort([oval_silk, oval_wool, rect_silk, rect_wool])\nselected = Function([rugs] -> [bool])\n\n# Constraints\nForAll([r:rugs], And(1 <= selected(r), selected(r) <= 6)) ::: at least four and at most six rugs\nAnd(selected(oval_silk), Count([r:rugs], And(r!= oval_silk, selected(r))) >= 2) ::: At least two oval rugs must be selected\nAnd(Count([r:rugs], And(r!= oval_silk, selected(r))) <= 3, Count([r:rugs], And(r!= oval_silk, selected(r))) >= 2) ::: The number of wool rugs selected can be neither less than two nor more than three\nAnd(selected(oval_silk), Count([r:rugs], And(r!= oval_silk, selected(r))) >= 1) ::: If the oval silk rug is selected, at least one rectangular silk rug must be selected\n\n# Options\nQuestion ::: Which one of the following is an acceptable selection of rugs for the exhibition?\nis_sat(And(selected(oval_silk), selected(oval_wool), selected(rect_wool), selected(rect_wool))) ::: A) one oval sil"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_4_19",
    "context": "The coordinator of an exhibition will select at least four and at most six rugs from a group of eight rugs made up of two oval wool rugs, three rectangular wool rugs, one oval silk rug, and two rectangular silk rugs according to the following conditions: At least two oval rugs must be selected. The number of wool rugs selected can be neither less than two nor more than three. If the oval silk rug is selected, at least one rectangular silk rug must be selected.",
    "question": "If three wool rugs are selected, then any of the following could be a complete and accurate list of the other rugs selected EXCEPT:",
    "answer": "A",
    "options": [
      "A) one oval silk rug",
      "B) one rectangular silk rug",
      "C) two rectangular silk rugs",
      "D) one oval silk rug and one rectangular silk rug",
      "E) one oval silk rug and two rectangular silk rugs"
    ],
    "raw_logic_programs": [
      "# Declarations\nrugs = EnumSort([oval_wool, rectangular_wool, oval_silk, rectangular_silk])\nselected = Function([rugs] -> [bool])\nForAll([r:rugs], And(0 <= selected(r), selected(r) <= 1))\n\n# Constraints\nCount([r:rugs], And(r == oval_wool, selected(r))) >= 2 ::: At least two oval rugs must be selected\nCount([r:rugs], And(r == rectangular_wool, selected(r))) >= 2 ::: The number of wool rugs selected can be neither less than two nor more than three\nCount([r:rugs], And(r == rectangular_wool, selected(r))) <= 3 ::: The number of wool rugs selected can be neither less than two nor more than three\nAnd(selected(oval_silk), Count([r:rugs], And(r == rectangular_silk, selected(r))) >= 1) ::: If the oval silk rug is selected, at least one rectangular silk rug must be selected\n\n# Options\nQuestion ::: If three wool rugs are selected, then any of the following could be a complete and accurate list of the other rugs selected EXCEPT:\nis_exception(is_sat(And(Count([r:rugs], And(r == oval_silk, selected(r))) == 1, Count([r:rugs], And(r == rectangular_silk, selected(r))) == 0)))) ::: A) one oval silk rug\nis_exception(is_sat(And(Count([r:rugs], And(r == oval_silk, selected(r))) == 0, Count([r:rugs], And(r == rectangular_silk, selected(r))) == 1)))) ::: B) one rectangular silk rug\nis_exception(is_sat(And(Count([r:rugs], And(r == oval_silk, selected(r))) == 0, Count([r:rugs], And(r == rectangular_silk, selected(r))) == 2)))) ::: C) two rectangular silk rugs\nis_exception(is_sat(And(Count([r:rugs], And(r == oval_silk, selected(r))) == 1, Count([r:rugs], And(r == rectangular_silk, selected(r))) == 1)))) ::: D) one oval silk rug and one rectangular silk rug\nis_exception(is_sat(And(Count([r:rugs], And(r == oval_silk, selected(r))) == 1, Count([r:rugs], And(r == rectangular_silk, selected(r))) == 2)))) ::: E) one oval silk rug and two rectangular silk rugs\n------"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_4_20",
    "context": "The coordinator of an exhibition will select at least four and at most six rugs from a group of eight rugs made up of two oval wool rugs, three rectangular wool rugs, one oval silk rug, and two rectangular silk rugs according to the following conditions: At least two oval rugs must be selected. The number of wool rugs selected can be neither less than two nor more than three. If the oval silk rug is selected, at least one rectangular silk rug must be selected.",
    "question": "The rugs selected for the exhibition can include any of the following EXCEPT:",
    "answer": "E",
    "options": [
      "A) one oval silk rug",
      "B) two oval wool rugs",
      "C) three oval rugs",
      "D) two rectangular wool rugs",
      "E) three rectangular wool rugs"
    ],
    "raw_logic_programs": [
      "# Declarations\nrugs = EnumSort([oval_wool, rectangular_wool, oval_silk, rectangular_silk])\nselected = Function([rugs] -> [bool])\n\n# Constraints\nForAll([r:rugs], Count([s:selected], s == r) >= 4) ::: at least four rugs\nForAll([r:rugs], Count([s:selected], s == r) <= 6) ::: at most six rugs\nAnd(Count([s:selected], s == oval_wool), Count([s:selected], s == oval_silk)) >= 2 ::: at least two oval rugs\nAnd(Count([s:selected], s == oval_wool), Count([s:selected], s == rectangular_wool)) <= 3 ::: the number of wool rugs selected can be neither less than two nor more than three\nAnd(Count([s:selected], s == oval_silk), Count([s:selected], s == rectangular_silk)) >= 1 ::: if the oval silk rug is selected, at least one rectangular silk rug must be selected\n\n# Options\nQuestion ::: The rugs selected for the exhibition can include any of the following EXCEPT:\nis_exception(is_sat(Count([s:selected], s == oval_silk) == 1)) ::: A) one oval silk rug\nis_exception(is_sat(Count([s:selected], s == oval_wool) == 2)) ::: B) two oval wool rugs\nis_exception(is_sat(Count([s:selected], s == oval_wool) == 3)) ::: C) three oval rugs\nis_exception(is_sat(Count([s:selected], s == rectangular_wool) == 2)) ::: D) two rectangular wool rugs\nis_exception(is_sat(Count([s:selected], s == rectangular_wool) == 3)) ::: E) three rectangular wool rugs\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—is to be divided into two groups of three. Each of the following conditions applies: A and B are in the same group. C and D are in the same group. E and F are in the same group.\nQuestion:\nWhich one of the following could be the two groups?\nChoices:\n(A) A, B, C; D, E, F\n(B) A, B, D; C, E, F\n(C) A, B, E; C, D, F\n(D) A, B, F; C, D, E\n(E) A, C, E; B, D, F\n###\n# Declarations\npeople = EnumSort([A, B, C, D, E, F])\ngroups = Enum"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_4_21",
    "context": "The coordinator of an exhibition will select at least four and at most six rugs from a group of eight rugs made up of two oval wool rugs, three rectangular wool rugs, one oval silk rug, and two rectangular silk rugs according to the following conditions: At least two oval rugs must be selected. The number of wool rugs selected can be neither less than two nor more than three. If the oval silk rug is selected, at least one rectangular silk rug must be selected.",
    "question": "If only one silk rug is selected for the exhibition, then the other rugs selected must be a group made up of",
    "answer": "B",
    "options": [
      "A) one oval rug and two rectangular rugs",
      "B) two oval rugs and one rectangular rug",
      "C) two oval rugs and two rectangular rugs",
      "D) two oval rugs and three rectangular rugs",
      "E) three rectangular rugs"
    ],
    "raw_logic_programs": [
      "# Declarations\nrugs = EnumSort([oval_wool, rectangular_wool, oval_silk, rectangular_silk])\nselected = Function([rugs] -> [bool])\n\n# Constraints\nForAll([r:rugs], Count([s:selected], s == r) >= 4) ::: at least four rugs must be selected\nForAll([r:rugs], Count([s:selected], s == r) <= 6) ::: at most six rugs must be selected\nAnd(Count([s:selected], s == oval_wool) >= 2, Count([s:selected], s == oval_silk) >= 2) ::: At least two oval rugs must be selected\nAnd(Count([s:selected], s == wool) >= 2, Count([s:selected], s == wool) <= 3) ::: The number of wool rugs selected can be neither less than two nor more than three\nAnd(Count([s:selected], s == oval_silk) == 1, Count([s:selected], s == rectangular_silk) >= 1) ::: If the oval silk rug is selected, at least one rectangular silk rug must be selected\n\n# Options\nQuestion ::: If only one silk rug is selected for the exhibition, then the other rugs selected must be a group made up of\nis_sat(And(Count([s:selected], s == oval_wool) == 1, Count([s:selected], s == rectangular_wool) == 2)) ::: A) one oval rug and two rectangular rugs\nis_sat(And(Count([s:selected], s == oval_wool) == 2, Count([s:selected], s == rectangular_wool) == 1)) ::: B) two oval rugs and one rectangular rug\nis_sat(And(Count([s:selected], s == oval_wool) == 2, Count([s:selected], s == rectangular_wool) == 2)) ::: C) two oval rugs and two rectangular rugs\nis_sat(And(Count([s:selected], s == oval_wool) == 2, Count([s:selected], s == rectangular_wool) == 3)) ::: D) two oval rugs and three rectangular rugs\nis_sat(And(Count([s:selected], s == oval_wool) == 0, Count([s:selected], s == rectangular_wool) == 3)) ::: E) three rectangular rugs\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—is to be divided into two groups of three. Each of the following conditions must be met: A and B are in the same group. C and D are in the same group. E and F are in the same group.\nQuestion:"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_4_22",
    "context": "The coordinator of an exhibition will select at least four and at most six rugs from a group of eight rugs made up of two oval wool rugs, three rectangular wool rugs, one oval silk rug, and two rectangular silk rugs according to the following conditions: At least two oval rugs must be selected. The number of wool rugs selected can be neither less than two nor more than three. If the oval silk rug is selected, at least one rectangular silk rug must be selected.",
    "question": "If exactly four rugs are selected, then the rugs selected could be",
    "answer": "C",
    "options": [
      "A) one oval rug and three rectangular wool rugs",
      "B) two oval rugs and two rectangular wool rugs",
      "C) three oval rugs and one rectangular silk rug",
      "D) three oval rugs and one rectangular wool rug",
      "E) two rectangular silk rugs and two rectangular wool rugs"
    ],
    "raw_logic_programs": [
      "# Declarations\nrugs = EnumSort([oval_wool, rectangular_wool, oval_silk, rectangular_silk])\nselected = Function([rugs] -> [bool])\n\n# Constraints\nForAll([r:rugs], Count([s:selected], s == r) >= 4) ::: at least four rugs must be selected\nForAll([r:rugs], Count([s:selected], s == r) <= 6) ::: at most six rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval_wool), selected(oval_silk), selected(rectangular_silk)) ::: At least two oval rugs must be selected\nAnd(selected(oval"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_4_23",
    "context": "The coordinator of an exhibition will select at least four and at most six rugs from a group of eight rugs made up of two oval wool rugs, three rectangular wool rugs, one oval silk rug, and two rectangular silk rugs according to the following conditions: At least two oval rugs must be selected. The number of wool rugs selected can be neither less than two nor more than three. If the oval silk rug is selected, at least one rectangular silk rug must be selected.",
    "question": "If all three silk rugs are selected, then each of the following could be a complete and accurate list of the other rugs selected EXCEPT:",
    "answer": "A",
    "options": [
      "A) one oval wool rug",
      "B) two oval wool rugs",
      "C) one oval wool rug and one rectangular wool rug",
      "D) one oval wool rug and two rectangular wool rugs",
      "E) two oval wool rugs and one rectangular wool rug"
    ],
    "raw_logic_programs": [
      "# Declarations\nrugs = EnumSort([oval_wool, rectangular_wool, oval_silk, rectangular_silk])\nselected = Function([rugs] -> [bool])\n\n# Constraints\nForAll([r:rugs], Count([s:selected], s == r) >= 4) ::: at least four rugs must be selected\nForAll([r:rugs], Count([s:selected], s == r) <= 6) ::: at most six rugs must be selected\nAnd(selected(oval_wool), Count([r:rugs], And(r!= oval_wool, selected(r))) >= 2) ::: At least two oval rugs must be selected\nAnd(Count([r:rugs], And(r!= oval_wool, selected(r))) >= 2, Count([r:rugs], And(r!= oval_wool, selected(r))) <= 3) ::: The number of wool rugs selected can be neither less than two nor more than three\nAnd(selected(oval_silk), Count([r:rugs], And(r!= oval_silk, selected(r))) >= 1) ::: If the oval silk rug is selected, at least one rectangular silk rug must be selected\n\n# Options\nQuestion ::: If all three silk rugs are selected, then each of the following could be a complete and accurate list of the other rugs selected EXCEPT:\nis_exception(is_sat(And(selected(oval_wool), Not(selected(rectangular_wool))))) ::: A) one oval wool rug\nis_exception(is_sat(And(selected(oval_wool), selected(oval_wool), Not(selected(rectangular_wool))))) ::: B) two oval wool rugs\nis_exception(is_sat(And(selected(oval_wool), selected(rectangular_wool), Not(selected(rectangular_wool))))) ::: C) one oval wool rug and one rectangular wool rug\nis_exception(is_sat(And(selected(oval_wool), selected(oval_wool), selected(rectangular_wool), Not(selected(rectangular_wool))))) ::: D) one oval wool rug and two rectangular wool rugs\nis_exception(is_sat(And(selected(oval_wool), selected(oval_wool), selected(rectangular_wool), selected(rectangular_wool), Not(selected(rectangular_wool))))) ::: E) two oval wool rugs and one rectangular wool rug\n------\nProblem:\nA certain company has a total of 100 employees, some of whom are managers and some of whom are not. The company has a total of 100 employees, some of whom are managers and some of whom are not. The company has a total of 10"
    ]
  },
  {
    "id": "ar_lsat_199602_3-G_4_24",
    "context": "The coordinator of an exhibition will select at least four and at most six rugs from a group of eight rugs made up of two oval wool rugs, three rectangular wool rugs, one oval silk rug, and two rectangular silk rugs according to the following conditions: At least two oval rugs must be selected. The number of wool rugs selected can be neither less than two nor more than three. If the oval silk rug is selected, at least one rectangular silk rug must be selected.",
    "question": "If exactly six rugs are selected, they must include",
    "answer": "C",
    "options": [
      "A) exactly one of the oval rugs",
      "B) the two oval wool rugs",
      "C) the two rectangular silk rugs",
      "D) exactly three of the rectangular rugs",
      "E) all three rectangular wool rugs"
    ],
    "raw_logic_programs": [
      "# Declarations\nrugs = EnumSort([oval_wool, rectangular_wool, oval_silk, rectangular_silk])\nselected = Function([rugs] -> [bool])\n\n# Constraints\nForAll([r:rugs], Count([s:selected], s == r) >= 4) ::: at least four rugs must be selected\nForAll([r:rugs], Count([s:selected], s == r) <= 6) ::: at most six rugs must be selected\nAnd(Count([s:selected], s == oval_wool), Count([s:selected], s == oval_silk)) >= 2 ::: At least two oval rugs must be selected\nAnd(Count([s:selected], s == oval_wool), Count([s:selected], s == rectangular_wool)) <= 3 ::: The number of wool rugs selected can be neither less than two nor more than three\nAnd(Count([s:selected], s == oval_silk), Count([s:selected], s == rectangular_silk)) >= 1 ::: If the oval silk rug is selected, at least one rectangular silk rug must be selected\n\n# Options\nQuestion ::: If exactly six rugs are selected, they must include\nis_sat(ForAll([s:selected], s == oval_wool) | ForAll([s:selected], s == oval_silk)) ::: (A)\nis_sat(ForAll([s:selected], s == oval_wool) & ForAll([s:selected], s == rectangular_wool)) ::: (B)\nis_sat(ForAll([s:selected], s == rectangular_silk)) ::: (C)\nis_sat(ForAll([s:selected], s == rectangular_wool)) ::: (D)\nis_sat(ForAll([s:selected], s == rectangular_wool) & ForAll([s:selected], s == oval_wool)) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—is to be divided into two groups of three. Each of the following conditions applies: A and B are in the same group. C and D are in the same group. E and F are in the same group.\nQuestion:\nWhich one of the following could be the two groups?\nChoices:\n(A) A, B, and C; D, E, and F\n(B) A, B, and D; C, E, and F\n(C) A, B, and E; C, D, and F\n(D) A, B, and F; C, D, and E\n(E) A, C, and D; B, E, and F\n###\n# Declarations\npeople = EnumSort([A, B, C, D, E, F])\ngroups = EnumSort"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_1_1",
    "context": "During a period of six consecutive days—day 1 through day 6—each of exactly six factories—F, G, H, J, Q, and R—will be inspected. During this period, each of the factories will be inspected exactly once, one factory per day. The schedule for the inspections must conform to the following conditions: F is inspected on either day 1 or day 6. J is inspected on an earlier day than Q is inspected. Q is inspected on the day immediately before R is inspected. If G is inspected on day 3, Q is inspected on day 5.",
    "question": "Which one of the following could be a list of the factories in the order of their scheduled inspections, from day 1 thought day 6?",
    "answer": "B",
    "options": [
      "A) F, Q, R, H, J, G",
      "B) G, H, J, Q, R, F",
      "C) G, J, Q, H, R, F",
      "D) G, J, Q, R, F, H",
      "E) J, H, G, Q, R, F"
    ],
    "raw_logic_programs": [
      "# Declarations\nfactories = EnumSort([F, G, H, J, Q, R])\ndays = EnumSort([day1, day2, day3, day4, day5, day6])\ninspected = Function([factories, days] -> [bool])\n\n# Constraints\nForAll([f:factories], Count([d:days], inspected(f, d)) == 1) ::: each of the factories will be inspected exactly once, one factory per day\nAnd(inspected(F, day1), inspected(F, day6)) ::: F is inspected on either day 1 or day 6\nAnd(inspected(J, d1), inspected(Q, d2)) ::: J is inspected on an earlier day than Q is inspected\nAnd(inspected(Q, d1), inspected(R, d2)) ::: Q is inspected on the day immediately before R is inspected\nAnd(inspected(G, day3), inspected(Q, day5)) ::: If G is inspected on day 3, Q is inspected on day 5\n\n# Options\nQuestion ::: Which one of the following could be a list of the factories in the order of their scheduled inspections, from day 1 thought day 6?\nis_sat(ForAll([f:factories], inspected(f, f))) ::: A) F, Q, R, H, J, G\nis_sat(ForAll([f:factories], inspected(f, f))) ::: B) G, H, J, Q, R, F\nis_sat(ForAll([f:factories], inspected(f, f))) ::: C) G, J, Q, H, R, F\nis_sat(ForAll([f:factories], inspected(f, f))) ::: D) G, J, Q, R, F, H\nis_sat(ForAll([f:factories], inspected(f, f))) ::: E) J, H, G, Q, R, F\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which has a manager. The manager of department A is the only female manager. The manager of department B is the only manager who has a beard. The manager of department C is the only manager who wears glasses. The manager of department D is the only manager who is over 60 years old. The manager of department E is the only manager who is under 30 years old. The manager of department F is the only manager who is left-handed.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) The manager of department A is over 60 years old.\n(B) The manager of department B is under 30 years old.\n(C) The manager of department C is left-handed.\n(D) The manager of department D is the"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_1_2",
    "context": "During a period of six consecutive days—day 1 through day 6—each of exactly six factories—F, G, H, J, Q, and R—will be inspected. During this period, each of the factories will be inspected exactly once, one factory per day. The schedule for the inspections must conform to the following conditions: F is inspected on either day 1 or day 6. J is inspected on an earlier day than Q is inspected. Q is inspected on the day immediately before R is inspected. If G is inspected on day 3, Q is inspected on day 5.",
    "question": "Which one of the following must be false?",
    "answer": "E",
    "options": [
      "A) The inspection of G is scheduled for day 4.",
      "B) The inspection of H is scheduled for day 6.",
      "C) The inspection of J is scheduled for day 4.",
      "D) The inspection of Q is scheduled for day 3.",
      "E) The inspection of R is scheduled for day 2."
    ],
    "raw_logic_programs": [
      "# Declarations\nfactories = EnumSort([F, G, H, J, Q, R])\ndays = EnumSort([day1, day2, day3, day4, day5, day6])\ninspected = Function([factories, days] -> [bool])\n\n# Constraints\nForAll([f:factories], Count([d:days], inspected(f, d)) == 1) ::: each of the factories will be inspected exactly once, one factory per day\nAnd(inspected(F, day1), inspected(F, day6)) ::: F is inspected on either day 1 or day 6\nAnd(inspected(J, d1), inspected(Q, d2)) ::: J is inspected on an earlier day than Q is inspected\nAnd(inspected(Q, d1), inspected(R, d2)) ::: Q is inspected on the day immediately before R is inspected\nAnd(inspected(G, day3), inspected(Q, day5)) ::: If G is inspected on day 3, Q is inspected on day 5\n\n# Options\nQuestion ::: Which one of the following must be false?\nis_exception(is_sat(inspected(G, day4))) ::: (A)\nis_exception(is_sat(inspected(H, day6))) ::: (B)\nis_exception(is_sat(inspected(J, day4))) ::: (C)\nis_exception(is_sat(inspected(Q, day3))) ::: (D)\nis_exception(is_sat(inspected(R, day2))) ::: (E)\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which has a manager. The manager of each department is assigned to work in exactly one of the following three locations—1, 2, or 3. The following conditions apply: The manager of department A is assigned to work in location 1. The manager of department B is assigned to work in location 2. The manager of department C is assigned to work in location 3. The manager of department D is assigned to work in the same location as the manager of department E. The manager of department F is assigned to work in the same location as the manager of department A.\nQuestion:\nWhich one of the following must be false?\nChoices:\n(A) The manager of department A is assigned to work in location 2.\n(B) The manager of department B is assigned to work in location 3.\n(C) The manager of department C is assigned to work in location 1.\n(D) The manager of department D is assigned to work in location 3.\n(E) The manager of department E is assigned to work in location 1.\n###\n# Declarations\ndepartments = EnumSort([A, B, C, D, E, F])\nlocations = EnumSort(["
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_1_3",
    "context": "During a period of six consecutive days—day 1 through day 6—each of exactly six factories—F, G, H, J, Q, and R—will be inspected. During this period, each of the factories will be inspected exactly once, one factory per day. The schedule for the inspections must conform to the following conditions: F is inspected on either day 1 or day 6. J is inspected on an earlier day than Q is inspected. Q is inspected on the day immediately before R is inspected. If G is inspected on day 3, Q is inspected on day 5.",
    "question": "The inspection of which one of the following CANNOT be scheduled for day 5 ?",
    "answer": "C",
    "options": [
      "A) G",
      "B) H",
      "C) J",
      "D) Q",
      "E) R"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([day1, day2, day3, day4, day5, day6])\nfactories = EnumSort([F, G, H, J, Q, R])\ninspected = Function([days, factories] -> [bool])\n\n# Constraints\nForAll([f:factories], Count([d:days], inspected(d, f)) == 1) ::: each of the factories will be inspected exactly once, one factory per day\nAnd(inspected(day1, F), inspected(day6, F)) ::: F is inspected on either day 1 or day 6\nAnd(inspected(day1, J), inspected(day6, J)) ::: J is inspected on an earlier day than Q is inspected\nAnd(inspected(day1, Q), inspected(day6, Q)) ::: Q is inspected on the day immediately before R is inspected\nAnd(inspected(day3, G), inspected(day5, Q)) ::: If G is inspected on day 3, Q is inspected on day 5\n\n# Options\nQuestion ::: The inspection of which one of the following CANNOT be scheduled for day 5?\nis_exception(is_sat(inspected(day5, G))) ::: A) G\nis_exception(is_sat(inspected(day5, H))) ::: B) H\nis_exception(is_sat(inspected(day5, J))) ::: C) J\nis_exception(is_sat(inspected(day5, Q))) ::: D) Q\nis_exception(is_sat(inspected(day5, R))) ::: E) R\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The managers are to be assigned to offices on the top floor of a building. The offices are numbered 1 through 6, and each office is to be assigned to exactly one manager. The assignment of offices must conform to the following conditions: The office assigned to the manager of department A is an even-numbered office. The office assigned to the manager of department B is an odd-numbered office. The office assigned to the manager of department C is an even-numbered office. The office assigned to the manager of department D is an odd-numbered office. The office assigned to the manager of department E is an even-numbered office. The office assigned to the manager of department F is an odd-numbered office.\nQuestion:\nIf the manager of department A is assigned to office 2, the manager of department B is assigned to office 3, and the manager of department C is assigned to office 4, then the manager of department D must be assigned to which one of the following offices?\nChoices:\n(A) 1\n(B) 2\n(C) 3\n(D) 4\n(E) 5"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_1_4",
    "context": "During a period of six consecutive days—day 1 through day 6—each of exactly six factories—F, G, H, J, Q, and R—will be inspected. During this period, each of the factories will be inspected exactly once, one factory per day. The schedule for the inspections must conform to the following conditions: F is inspected on either day 1 or day 6. J is inspected on an earlier day than Q is inspected. Q is inspected on the day immediately before R is inspected. If G is inspected on day 3, Q is inspected on day 5.",
    "question": "The inspection scheduled for day 3 and day 5, respectively, could be those of",
    "answer": "E",
    "options": [
      "A) G and H",
      "B) G and R",
      "C) H and G",
      "D) R and J",
      "E) R and H"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([day1, day2, day3, day4, day5, day6])\nfactories = EnumSort([F, G, H, J, Q, R])\ninspected = Function([days, factories] -> [bool])\n\n# Constraints\nForAll([f:factories], Count([d:days], inspected(d, f)) == 1) ::: each of the factories will be inspected exactly once, one factory per day\nAnd(inspected(day1, F), inspected(day6, F)) ::: F is inspected on either day 1 or day 6\nAnd(inspected(day1, J), inspected(day6, Q)) ::: J is inspected on an earlier day than Q is inspected\nAnd(inspected(day1, Q), inspected(day6, R)) ::: Q is inspected on the day immediately before R is inspected\nAnd(inspected(day3, G), inspected(day5, Q)) ::: If G is inspected on day 3, Q is inspected on day 5\n\n# Options\nQuestion ::: The inspection scheduled for day 3 and day 5, respectively, could be those of\nis_sat(And(inspected(day3, G), inspected(day5, H))) ::: A) G and H\nis_sat(And(inspected(day3, G), inspected(day5, R))) ::: B) G and R\nis_sat(And(inspected(day3, H), inspected(day5, G))) ::: C) H and G\nis_sat(And(inspected(day3, R), inspected(day5, J))) ::: D) R and J\nis_sat(And(inspected(day3, R), inspected(day5, H))) ::: E) R and H\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The managers are to be assigned to offices on the top floor of a building. The offices are numbered 1 through 6, and each office is to be assigned to exactly one manager. The assignment of offices must conform to the following conditions: The office assigned to the manager of department A is an even-numbered office. The office assigned to the manager of department B is an odd-numbered office. The office assigned to the manager of department C is an even-numbered office. The office assigned to the manager of department D is an odd-numbered office. The office assigned to the manager of department E is an even-numbered office. The office assigned to the manager of department F is an odd-numbered office.\nQuestion:\nIf the manager of department A is assigned to office 2, which one of the following must be true?\nChoices:\n(A) The manager of department B is assigned to office 1.\n(B) The manager of"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_1_5",
    "context": "During a period of six consecutive days—day 1 through day 6—each of exactly six factories—F, G, H, J, Q, and R—will be inspected. During this period, each of the factories will be inspected exactly once, one factory per day. The schedule for the inspections must conform to the following conditions: F is inspected on either day 1 or day 6. J is inspected on an earlier day than Q is inspected. Q is inspected on the day immediately before R is inspected. If G is inspected on day 3, Q is inspected on day 5.",
    "question": "If the inspection of R is scheduled for the day immediately before the inspection of F, which one of the following must be true about the schedule?",
    "answer": "D",
    "options": [
      "A) The inspection of either G or H is scheduled for day 1.",
      "B) The inspection of either G or J is scheduled for day 1.",
      "C) The inspection of either G or J is scheduled for day 2.",
      "D) The inspection of either H or J is scheduled for day 3.",
      "E) The inspection of either H or J is scheduled for day 4."
    ],
    "raw_logic_programs": [
      "# Declarations\nfactories = EnumSort([F, G, H, J, Q, R])\ndays = EnumSort([day1, day2, day3, day4, day5, day6])\ninspected = Function([factories, days] -> [bool])\n\n# Constraints\nForAll([f:factories], Count([d:days], inspected(f, d)) == 1) ::: each of the factories will be inspected exactly once, one factory per day\nAnd(inspected(F, day1), inspected(F, day6)) ::: F is inspected on either day 1 or day 6\nAnd(inspected(J, d1), inspected(Q, d2)) ::: J is inspected on an earlier day than Q is inspected\nAnd(inspected(Q, d1), inspected(R, d2)) ::: Q is inspected on the day immediately before R is inspected\nAnd(inspected(G, day3), inspected(Q, day5)) ::: If G is inspected on day 3, Q is inspected on day 5\n\n# Options\nQuestion ::: If the inspection of R is scheduled for the day immediately before the inspection of F, which one of the following must be true about the schedule?\nis_sat(And(inspected(F, day6), inspected(R, day5))) :::\nis_sat(And(inspected(G, day1), inspected(H, day2))) ::: (A)\nis_sat(And(inspected(G, day1), inspected(J, day2))) ::: (B)\nis_sat(And(inspected(G, day2), inspected(J, day3))) ::: (C)\nis_sat(And(inspected(H, day3), inspected(J, day4))) ::: (D)\nis_sat(And(inspected(H, day4), inspected(J, day5))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_1_6",
    "context": "During a period of six consecutive days—day 1 through day 6—each of exactly six factories—F, G, H, J, Q, and R—will be inspected. During this period, each of the factories will be inspected exactly once, one factory per day. The schedule for the inspections must conform to the following conditions: F is inspected on either day 1 or day 6. J is inspected on an earlier day than Q is inspected. Q is inspected on the day immediately before R is inspected. If G is inspected on day 3, Q is inspected on day 5.",
    "question": "If the inspection of G and of H are scheduled, not necessarily in that order, for days as far apart as possible, which one of the following is a complete and accurate list of the factories any one of which could be scheduled for inspection for day 1?",
    "answer": "D",
    "options": [
      "A) F, J",
      "B) G, H",
      "C) G, H, J",
      "D) F, G, H",
      "E) F, G, H, J"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([day1, day2, day3, day4, day5, day6])\nfactories = EnumSort([F, G, H, J, Q, R])\ninspected = Function([days, factories] -> [bool])\n\n# Constraints\nForAll([f:factories], Count([d:days], inspected(d, f)) == 1) ::: each of the factories will be inspected exactly once, one factory per day\nAnd(inspected(day1, F), inspected(day6, F)) ::: F is inspected on either day 1 or day 6\nAnd(inspected(day1, J), inspected(day6, J)) ::: J is inspected on an earlier day than Q is inspected\nAnd(inspected(day1, Q), inspected(day6, Q)) ::: Q is inspected on the day immediately before R is inspected\nAnd(inspected(day3, G), inspected(day5, Q)) ::: If G is inspected on day 3, Q is inspected on day 5\n\n# Options\nQuestion ::: If the inspection of G and of H are scheduled, not necessarily in that order, for days as far apart as possible, which one of the following is a complete and accurate list of the factories any one of which could be scheduled for inspection for day 1?\nis_valid(Exists([f:factories], f == F)) ::: A) F, J\nis_valid(Exists([f:factories], f == G)) ::: B) G, H\nis_valid(Exists([f:factories], f == G) && Exists([f:factories], f == H)) ::: C) G, H, J\nis_valid(Exists([f:factories], f == F) && Exists([f:factories], f == G) && Exists([f:factories], f == H)) ::: D) F, G, H\nis_valid(Exists([f:factories], f"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_1_7",
    "context": "During a period of six consecutive days—day 1 through day 6—each of exactly six factories—F, G, H, J, Q, and R—will be inspected. During this period, each of the factories will be inspected exactly once, one factory per day. The schedule for the inspections must conform to the following conditions: F is inspected on either day 1 or day 6. J is inspected on an earlier day than Q is inspected. Q is inspected on the day immediately before R is inspected. If G is inspected on day 3, Q is inspected on day 5.",
    "question": "If the inspection of G is scheduled for the day immediately before the inspection of Q, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) The inspection of G is scheduled for day 5.",
      "B) The inspection of H is scheduled for day 6.",
      "C) The inspection of J is scheduled for day 2.",
      "D) The inspection of Q is scheduled for day 4.",
      "E) The inspection of R is scheduled for day 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nfactories = EnumSort([F, G, H, J, Q, R])\ndays = EnumSort([day1, day2, day3, day4, day5, day6])\ninspected = Function([factories, days] -> [bool])\n\n# Constraints\nForAll([f:factories], Count([d:days], inspected(f, d)) == 1) ::: each of the factories will be inspected exactly once, one factory per day\nAnd(inspected(F, day1), inspected(F, day6)) ::: F is inspected on either day 1 or day 6\nAnd(inspected(J, d1), inspected(Q, d2)) ::: J is inspected on an earlier day than Q is inspected\nAnd(inspected(Q, d1), inspected(R, d2)) ::: Q is inspected on the day immediately before R is inspected\nAnd(inspected(G, day3), inspected(Q, day5)) ::: If G is inspected on day 3, Q is inspected on day 5\n\n# Options\nQuestion ::: If the inspection of G is scheduled for the day immediately before the inspection of Q, which one of the following could be true?\nis_sat(And(inspected(G, day5), inspected(Q, day6))) ::: (A)\nis_sat(And(inspected(H, day6), inspected(Q, day5))) ::: (B)\nis_sat(And(inspected(J, day2), inspected(Q, day5))) ::: (C)\nis_sat(And(inspected(Q, day4), inspected(R, day5))) ::: (D)\nis_sat(And(inspected(R, day3), inspected(Q, day4))) ::: (E)\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which has"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_2_8",
    "context": "In a theater company, four two-day workshops—Lighting, Production, Rehearsals, and Staging—are conducted over the course of five days, Monday through Friday. The workshops are conducted in a manner consistent with the following constraints: The two days on which a given workshop is in session are consecutive. On each of the five days, at least one, but no more than two, of the workshops are in session. The workshops on Production and Rehearsals begin no earlier than the day immediately following the second day of the workshop on Lighting.",
    "question": "Which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Only one workshop is in session on Thursday.",
      "B) Only one workshop is in session on Friday.",
      "C) The workshop on Rehearsals is in session on Tuesday.",
      "D) The workshop on Staging is in session on Thursday.",
      "E) The workshops in Rehearsals and Production are both in session on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\nworkshops = EnumSort([Lighting, Production, Rehearsals, Staging])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nin_session = Function([workshops, days] -> [bool])\n\n# Constraints\nForAll([w:workshops], And(in_session(w, Monday), in_session(w, Tuesday))) ::: The two days on which a given workshop is in session are consecutive\nForAll([d:days], And(1 <= Count([w:workshops], in_session(w, d)), Count([w:workshops], in_session(w, d)) <= 2)) ::: On each of the five days, at least one, but no more than two, of the workshops are in session\nAnd(in_session(Production, Monday), in_session(Production, Tuesday)) ::: The workshops on Production and Rehearsals begin no earlier than the day immediately following the second day of the workshop on Lighting\nAnd(in_session(Rehearsals, Monday), in_session(Rehearsals, Tuesday)) ::: The workshops on Production and Rehearsals begin no earlier than the day immediately following the second day of the workshop on Lighting\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(ForAll([w:workshops], Not(in_session(w, Thursday)))) ::: A) Only one workshop is in session on Thursday.\nis_sat(ForAll([w:workshops], Not(in_session(w, Friday)))) ::: B) Only one workshop is in session on Friday.\nis_sat(in_session(Rehearsals, Tuesday)) ::: C) The workshop on Rehearsals is in session on Tuesday.\nis_sat(in_session(Staging, Thursday)) ::: D) The"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_2_9",
    "context": "In a theater company, four two-day workshops—Lighting, Production, Rehearsals, and Staging—are conducted over the course of five days, Monday through Friday. The workshops are conducted in a manner consistent with the following constraints: The two days on which a given workshop is in session are consecutive. On each of the five days, at least one, but no more than two, of the workshops are in session. The workshops on Production and Rehearsals begin no earlier than the day immediately following the second day of the workshop on Lighting.",
    "question": "Which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) The workshop on Lighting is in session on Wednesday, and the workshop on Rehearsals is in session on Tuesday.",
      "B) The workshop on Lighting is in session on Wednesday, and the only workshop in session on Thursday is the workshop on Rehearsals.",
      "C) The workshop on Lighting is in session on Wednesday, and the only workshop in session on Monday is the workshop on Staging.",
      "D) The workshop on Lighting is in session on Monday, and the only workshop in session on Thursday is the workshop on Staging.",
      "E) The workshops on Lighting and Production are both in session on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\nworkshops = EnumSort([Lighting, Production, Rehearsals, Staging])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nin_session = Function([workshops, days] -> [bool])\n\n# Constraints\nForAll([w:workshops], And(in_session(w, Monday), in_session(w, Tuesday)) == False) ::: The two days on which a given workshop is in session are consecutive\nForAll([d:days], Count([w:workshops], in_session(w, d)) <= 2) ::: On each of the five days, at least one, but no more than two, of the workshops are in session\nAnd(in_session(Production, Monday), in_session(Rehearsals, Monday)) == False ::: The workshops on Production and Rehearsals begin no earlier than the day immediately following the second day of the workshop on Lighting\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(And(in_session(Lighting, Wednesday), in_session(Rehearsals, Tuesday))) ::: (A)\nis_sat(And(in_session(Lighting, Wednesday), in_session(Rehearsals, Thursday))) ::: (B)\nis_sat(And(in_session(Lighting, Wednesday), in_session(Staging, Monday))) ::: (C)\nis_sat(And(in_session(Lighting, Monday), in_session(Staging, Thursday))) ::: (D)\nis_sat(And(in_session(Lighting, Wednesday), in_session(Production, Wednesday))) ::: (E)\n------\nProblem:\nIn a certain company, the employees are divided into three departments: sales, production, and administration. The sales department has 10 employees, the production department has"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_2_10",
    "context": "In a theater company, four two-day workshops—Lighting, Production, Rehearsals, and Staging—are conducted over the course of five days, Monday through Friday. The workshops are conducted in a manner consistent with the following constraints: The two days on which a given workshop is in session are consecutive. On each of the five days, at least one, but no more than two, of the workshops are in session. The workshops on Production and Rehearsals begin no earlier than the day immediately following the second day of the workshop on Lighting.",
    "question": "If the workshop on Production is in session on Wednesday, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) The workshop on Lighting is in session on Monday.",
      "B) The workshop on Rehearsals is in session on Wednesday.",
      "C) The workshop on Staging is in session on Thursday .",
      "D) The workshop on Staging is in session on Monday.",
      "E) The workshop on Staging is in session on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\nworkshops = EnumSort([Lighting, Production, Rehearsals, Staging])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nin_session = Function([workshops, days] -> [bool])\n\n# Constraints\nForAll([w:workshops], And(in_session(w, Monday), in_session(w, Tuesday)) || And(in_session(w, Wednesday), in_session(w, Thursday)) || And(in_session(w, Thursday), in_session(w, Friday))) ::: The two days on which a given workshop is in session are consecutive\nForAll([d:days], And(1 <= Count([w:workshops], in_session(w, d)), Count([w:workshops], in_session(w, d)) <= 2)) ::: On each of the five days, at least one, but no more than two, of the workshops are in session\nAnd(in_session(Production, Wednesday), And(in_session(Rehearsals, Wednesday), in_session(Rehearsals, Thursday))) ::: The workshops on Production and Rehearsals begin no earlier than the day immediately following the second day of the workshop on Lighting\n\n# Options\nQuestion ::: If the workshop on Production is in session on Wednesday, which one of the following must be true?\nis_valid(in_session(Lighting, Monday)) ::: (A)\nis_valid(in_session(Rehearsals, Wednesday)) ::: (B)\nis_valid(in_session(Staging, Thursday)) ::: (C)\nis_valid(in_session(Staging, Monday)) ::: (D)\nis_valid(in_session(Staging, Wednesday)) ::: (E)\n------\nProblem:\nIn a certain company, the employees are divided into three departments: sales"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_2_11",
    "context": "In a theater company, four two-day workshops—Lighting, Production, Rehearsals, and Staging—are conducted over the course of five days, Monday through Friday. The workshops are conducted in a manner consistent with the following constraints: The two days on which a given workshop is in session are consecutive. On each of the five days, at least one, but no more than two, of the workshops are in session. The workshops on Production and Rehearsals begin no earlier than the day immediately following the second day of the workshop on Lighting.",
    "question": "If the workshop on production is the only workshop in session on Friday, which one of the following must be false?",
    "answer": "A",
    "options": [
      "A) The workshop on Lighting is in session both on Tuesday and on Wednesday.",
      "B) The workshop on Rehearsals is in session both on Wednesday and on Thursday.",
      "C) The workshop on Staging is in session both on Monday and on Tuesday.",
      "D) The workshop on Lighting is in session on the same two days as is the workshop on Staging.",
      "E) The workshop on Rehearsals is in session on a day when the workshop on Staging is also in session."
    ],
    "raw_logic_programs": [
      "# Declarations\nworkshops = EnumSort([Lighting, Production, Rehearsals, Staging])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nin_session = Function([workshops, days] -> [bool])\n\n# Constraints\nForAll([w:workshops], And(in_session(w, Monday), in_session(w, Tuesday)) ::: The two days on which a given workshop is in session are consecutive\nForAll([d:days], And(1 <= Count([w:workshops], in_session(w, d)), Count([w:workshops], in_session(w, d)) <= 2)) ::: On each of the five days, at least one, but no more than two, of the workshops are in session\nAnd(in_session(Production, Monday), in_session(Production, Tuesday)) ::: The workshops on Production and Rehearsals begin no earlier than the day immediately following the second day of the workshop on Lighting\n\n# Options\nQuestion ::: If the workshop on production is the only workshop in session on Friday, which one of the following must be false?\nis_exception(is_sat(And(in_session(Lighting, Tuesday), in_session(Lighting, Wednesday)))) ::: (A)\nis_exception(is_sat(And(in_session(Rehearsals, Wednesday), in_session(Rehearsals, Thursday)))) ::: (B)\nis_exception(is_sat(And(in_session(Staging, Monday), in_session(Staging, Tuesday)))) ::: (C)\nis_exception(is_sat(And(in_session(Lighting, Monday), in_session(Staging, Monday)))) ::: (D)\nis_exception(is_sat(And(in_session(Rehearsals, Monday), in_session(Staging, Monday"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_2_12",
    "context": "In a theater company, four two-day workshops—Lighting, Production, Rehearsals, and Staging—are conducted over the course of five days, Monday through Friday. The workshops are conducted in a manner consistent with the following constraints: The two days on which a given workshop is in session are consecutive. On each of the five days, at least one, but no more than two, of the workshops are in session. The workshops on Production and Rehearsals begin no earlier than the day immediately following the second day of the workshop on Lighting.",
    "question": "If the workshop on Lighting is the only workshop in session on Monday, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) The workshops on Rehearsals and Staging are both in session on Tuesday.",
      "B) The workshop on Rehearsals is the only workshop in session on Wednesday.",
      "C) The workshop on Staging is the only workshop in session on Wednesday.",
      "D) The workshops on Staging and Rehearsals are both in session on Wednesday and on Thursday.",
      "E) The workshops on Staging and Production are both in session on Thursday."
    ],
    "raw_logic_programs": [
      "# Declarations\nworkshops = EnumSort([Lighting, Production, Rehearsals, Staging])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nin_session = Function([workshops, days] -> [bool])\n\n# Constraints\nForAll([w:workshops], Count([d:days], in_session(w, d)) == 2) ::: The two days on which a given workshop is in session are consecutive\nForAll([d:days], Count([w:workshops], in_session(w, d)) <= 2) ::: On each of the five days, at least one, but no more than two, of the workshops are in session\nAnd(in_session(Lighting, Monday), in_session(Lighting, Tuesday)) ::: The workshops on Production and Rehearsals begin no earlier than the day immediately following the second day of the workshop on Lighting\n\n# Options\nQuestion ::: If the workshop on Lighting is the only workshop in session on Monday, which one of the following could be true?\nis_valid(ForAll([w:workshops], in_session(w, Tuesday))) ::: (A)\nis_valid(ForAll([w:workshops], in_session(w, Wednesday))) ::: (B)\nis_valid(ForAll([w:workshops], in_session(w, Wednesday))) ::: (C)\nis_valid(ForAll([w:workshops], in_session(w, Wednesday))) ::: (D)\nis_valid(ForAll([w:workshops], in_session(w, Thursday))) ::: (E)\n------\nProblem:\nIn a certain city, the number of people who have a driver's license is 10 percent greater than the number of people who own a car. If 10 percent of the people who own a car do not have a driver's license, what percent"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_3_13",
    "context": "Each of two boats, boat 1 and boat 2, will be assigned exactly four people. Exactly eight people, three adults—F, G, and H—and five children—V, W, X, Y, and Z—must be assigned to the boats according to the following conditions: Each boat is assigned at least one adult. If F is assigned to boat 2, G is assigned to boat 2. If V is assigned to boat 1, W is assigned to boat 2. X and Z are assigned to different boats.",
    "question": "Which one of the following is an acceptable assignment of people to boat I ?",
    "answer": "C",
    "options": [
      "A) F, G, H, X",
      "B) F, H, W, Y",
      "C) F, H, Y, Z",
      "D) F, V, W, X",
      "E) G, H, X, Y"
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([boat1, boat2])\npeople = EnumSort([F, G, H, V, W, X, Y, Z])\nassigned = Function([boats, people] -> [bool])\n\n# Constraints\nForAll([b:boats], Count([p:people], assigned(b, p)) == 4) ::: Each of two boats, boat 1 and boat 2, will be assigned exactly four people\nForAll([b:boats], Count([p:people], And(assigned(b, p), p == adult)) >= 1) ::: Each boat is assigned at least one adult\nAnd(assigned(boat2, F), assigned(boat2, G)) ::: If F is assigned to boat 2, G is assigned to boat 2\nAnd(assigned(boat1, V), assigned(boat2, W)) ::: If V is assigned to boat 1, W is assigned to boat 2\nAnd(assigned(boat1, X), assigned(boat2, Z)) ::: X and Z are assigned to different boats\n\n# Options\nQuestion ::: Which one of the following is an acceptable assignment of people to boat I?\nis_valid(ForAll([p:people], assigned(boat1, p) == assigned(A, p))) ::: (A)\nis_valid(ForAll([p:people], assigned(boat1, p) == assigned(B, p))) ::: (B)\nis_valid(ForAll([p:people], assigned(boat1, p) == assigned(C, p))) ::: (C)\nis_valid(ForAll([p:people], assigned(boat1, p) == assigned(D, p))) ::: (D)\nis_valid(ForAll([p:people], assigned(boat1, p) == assigned(E, p))) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_3_14",
    "context": "Each of two boats, boat 1 and boat 2, will be assigned exactly four people. Exactly eight people, three adults—F, G, and H—and five children—V, W, X, Y, and Z—must be assigned to the boats according to the following conditions: Each boat is assigned at least one adult. If F is assigned to boat 2, G is assigned to boat 2. If V is assigned to boat 1, W is assigned to boat 2. X and Z are assigned to different boats.",
    "question": "If F is assigned to boat 2, which one of the following is a pair of people who could be assigned to the same boat as each other?",
    "answer": "E",
    "options": [
      "A) F and Y",
      "B) G and H",
      "C) G and Y",
      "D) V and W",
      "E) Y and Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([boat1, boat2])\npeople = EnumSort([F, G, H, V, W, X, Y, Z])\nassigned = Function([boats, people] -> [bool])\n\n# Constraints\nForAll([b:boats], Count([p:people], assigned(b, p)) == 4) ::: Each of two boats, boat 1 and boat 2, will be assigned exactly four people\nForAll([b:boats], Or(assigned(b, F), assigned(b, G), assigned(b, H))) ::: Each boat is assigned at least one adult\nImplies(assigned(boat2, F), assigned(boat2, G)) ::: If F is assigned to boat 2, G is assigned to boat 2\nImplies(assigned(boat1, V), assigned(boat2, W)) ::: If V is assigned to boat 1, W is assigned to boat 2\nImplies(assigned(boat1, X), assigned(boat2, Z)) ::: X and Z are assigned to different boats\n\n# Options\nQuestion ::: If F is assigned to boat 2, which one of the following is a pair of people who could be assigned to the same boat as each other?\nis_sat(ForAll([p:people], Implies(assigned(boat2, F), assigned(boat2, p)))) ::: (A)\nis_sat(ForAll([p:people], Implies(assigned(boat2, G), assigned(boat2, p)))) ::: (B)\nis_sat(ForAll([p:people], Implies(assigned(boat2, G), assigned(boat2, p)))) ::: (C)\nis_sat(ForAll([p:people], Implies(assigned(boat1, V), assigned(boat1, p)))) ::: (D)\nis_sat(ForAll([p:people], Implies(assigned"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_3_15",
    "context": "Each of two boats, boat 1 and boat 2, will be assigned exactly four people. Exactly eight people, three adults—F, G, and H—and five children—V, W, X, Y, and Z—must be assigned to the boats according to the following conditions: Each boat is assigned at least one adult. If F is assigned to boat 2, G is assigned to boat 2. If V is assigned to boat 1, W is assigned to boat 2. X and Z are assigned to different boats.",
    "question": "If exactly three children are assigned to boat 1, which one of the following is a pair of people who could both be assigned to boat 2?",
    "answer": "C",
    "options": [
      "A) F and H",
      "B) G and Y",
      "C) H and W",
      "D) V and W",
      "E) W and Y"
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([boat1, boat2])\npeople = EnumSort([F, G, H, V, W, X, Y, Z])\nadults = EnumSort([F, G, H])\nchildren = EnumSort([V, W, X, Y, Z])\nassigned = Function([boats, people] -> [bool])\n\n# Constraints\nForAll([b:boats], Count([p:people], assigned(b, p)) == 4) ::: Each of two boats, boat 1 and boat 2, will be assigned exactly four people\nForAll([b:boats], Or(assigned(b, F), assigned(b, G), assigned(b, H))) ::: Each boat is assigned at least one adult\nImplies(assigned(boat2, F), assigned(boat2, G)) ::: If F is assigned to boat 2, G is assigned to boat 2\nImplies(assigned(boat1, V), assigned(boat2, W)) ::: If V is assigned to boat 1, W is assigned to boat 2\nImplies(assigned(boat1, X), assigned(boat2, Z)) ::: X and Z are assigned to different boats\n\n# Options\nQuestion ::: If exactly three children are assigned to boat 1, which one of the following is a pair of people who could both be assigned to boat 2?\nis_valid(And(assigned(boat2, F), assigned(boat2, H))) ::: A) F and H\nis_valid(And(assigned(boat2, G), assigned(boat2, Y))) ::: B) G and Y\nis_valid(And(assigned(boat2, H), assigned(boat2, W))) ::: C) H and W\nis_valid(And(assigned(boat2, V), assigned(boat2, W))) ::: D) V and W\nis_valid(And(assigned(boat2, W), assigned(boat2, Y))) ::: E) W and Y\n------"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_3_16",
    "context": "Each of two boats, boat 1 and boat 2, will be assigned exactly four people. Exactly eight people, three adults—F, G, and H—and five children—V, W, X, Y, and Z—must be assigned to the boats according to the following conditions: Each boat is assigned at least one adult. If F is assigned to boat 2, G is assigned to boat 2. If V is assigned to boat 1, W is assigned to boat 2. X and Z are assigned to different boats.",
    "question": "If G is assigned to boat 1, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) H is assigned to boat 2.",
      "B) V is assigned to boat 2.",
      "C) Exactly one adult is assigned to boat 1.",
      "D) Exactly two adults are assigned to boat 2.",
      "E) Exactly two children are assigned to boat 2."
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([boat1, boat2])\npeople = EnumSort([F, G, H, V, W, X, Y, Z])\nassigned = Function([boats, people] -> [bool])\n\n# Constraints\nForAll([b:boats], Count([p:people], assigned(b, p)) >= 4) ::: Each of two boats, boat 1 and boat 2, will be assigned exactly four people\nForAll([b:boats], Count([p:people], And(assigned(b, p), p == F)) >= 1) ::: Each boat is assigned at least one adult\nImplies(assigned(boat2, F), assigned(boat2, G)) ::: If F is assigned to boat 2, G is assigned to boat 2\nImplies(assigned(boat1, V), assigned(boat2, W)) ::: If V is assigned to boat 1, W is assigned to boat 2\nImplies(assigned(boat1, X), Not(assigned(boat1, Z))) ::: X and Z are assigned to different boats\n\n# Options\nQuestion ::: If G is assigned to boat 1, which one of the following must be true?\nis_sat(ForAll([p:people], assigned(boat2, p) == H)) ::: A) H is assigned to boat 2.\nis_sat(ForAll([p:people], assigned(boat2, p) == V)) ::: B) V is assigned to boat 2.\nis_sat(Count([p:people], assigned(boat1, p)) == 1) ::: C) Exactly one adult is assigned to boat 1.\nis_sat(Count([p:people], assigned(boat2, p)) == 2) ::: D) Exactly two adults are assigned to boat 2.\nis_sat(Count([p:people], assigned(boat2, p)) == 2) ::: E) Exactly two children are assigned to boat 2.\n------\nProblem:\nA"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_3_17",
    "context": "Each of two boats, boat 1 and boat 2, will be assigned exactly four people. Exactly eight people, three adults—F, G, and H—and five children—V, W, X, Y, and Z—must be assigned to the boats according to the following conditions: Each boat is assigned at least one adult. If F is assigned to boat 2, G is assigned to boat 2. If V is assigned to boat 1, W is assigned to boat 2. X and Z are assigned to different boats.",
    "question": "If V and W are assigned to the same boat as each other, which one of the following is a pair of people who must also be assigned to the same boat as each other?",
    "answer": "B",
    "options": [
      "A) F and H",
      "B) F and Y",
      "C) G and X",
      "D) W and X",
      "E) Y and Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([boat1, boat2])\npeople = EnumSort([F, G, H, V, W, X, Y, Z])\nassigned = Function([boats, people] -> [bool])\n\n# Constraints\nForAll([b:boats], Count([p:people], assigned(b, p)) == 4) ::: Each of two boats, boat 1 and boat 2, will be assigned exactly four people\nForAll([b:boats], Or(assigned(b, F), assigned(b, G), assigned(b, H))) ::: Each boat is assigned at least one adult\nImplies(assigned(boat2, F), assigned(boat2, G)) ::: If F is assigned to boat 2, G is assigned to boat 2\nImplies(assigned(boat1, V), assigned(boat2, W)) ::: If V is assigned to boat 1, W is assigned to boat 2\nassigned(boat1, X)!= assigned(boat2, X) ::: X and Z are assigned to different boats\n\n# Options\nQuestion ::: If V and W are assigned to the same boat as each other, which one of the following is a pair of people who must also be assigned to the same boat as each other?\nis_sat(And(assigned(boat1, F), assigned(boat1, H))) ::: (A)\nis_sat(And(assigned(boat1, F), assigned(boat1, Y))) ::: (B)\nis_sat(And(assigned(boat1, G), assigned(boat1, X))) ::: (C)\nis_sat(And(assigned(boat1, W), assigned(boat1, X))) ::: (D)\nis_sat(And(assigned(boat1, Y), assigned(boat1, Z))) ::: (E)\n------\nProblem:\nA group of six people—F, G, H, I, J, and K—is to be divided into two groups of three people"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_3_18",
    "context": "Each of two boats, boat 1 and boat 2, will be assigned exactly four people. Exactly eight people, three adults—F, G, and H—and five children—V, W, X, Y, and Z—must be assigned to the boats according to the following conditions: Each boat is assigned at least one adult. If F is assigned to boat 2, G is assigned to boat 2. If V is assigned to boat 1, W is assigned to boat 2. X and Z are assigned to different boats.",
    "question": "If H is assigned to a different boat than Y, which one of the following must be assigned to boat 1?",
    "answer": "A",
    "options": [
      "A) F",
      "B) G",
      "C) H",
      "D) V",
      "E) Y"
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([boat1, boat2])\npeople = EnumSort([F, G, H, V, W, X, Y, Z])\nassigned = Function([boats, people] -> [bool])\n\n# Constraints\nForAll([b:boats], Count([p:people], assigned(b, p)) == 4) ::: Each of two boats, boat 1 and boat 2, will be assigned exactly four people\nForAll([b:boats], Or(assigned(b, F), assigned(b, G), assigned(b, H))) ::: Each boat is assigned at least one adult\nImplies(assigned(boat2, F), assigned(boat2, G)) ::: If F is assigned to boat 2, G is assigned to boat 2\nImplies(assigned(boat1, V), assigned(boat2, W)) ::: If V is assigned to boat 1, W is assigned to boat 2\nImplies(assigned(boat1, X), Not(assigned(boat1, Z))) ::: X and Z are assigned to different boats\n\n# Options\nQuestion ::: If H is assigned to a different boat than Y, which one of the following must be assigned to boat 1?\nis_sat(ForAll([p:people], Implies(assigned(boat1, p), p == F))) ::: A) F\nis_sat(ForAll([p:people], Implies(assigned(boat1, p), p == G))) ::: B) G\nis_sat(ForAll([p:people], Implies(assigned(boat1, p), p == H))) ::: C) H\nis_sat(ForAll([p:people], Implies(assigned(boat1, p), p == V))) ::: D) V\nis_sat(ForAll([p:people], Implies(assigned(boat1, p), p == Y))) ::: E) Y\n------\nProblem:\nA group of six people—F, G, H, I, J, and"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_3_19",
    "context": "Each of two boats, boat 1 and boat 2, will be assigned exactly four people. Exactly eight people, three adults—F, G, and H—and five children—V, W, X, Y, and Z—must be assigned to the boats according to the following conditions: Each boat is assigned at least one adult. If F is assigned to boat 2, G is assigned to boat 2. If V is assigned to boat 1, W is assigned to boat 2. X and Z are assigned to different boats.",
    "question": "If exactly one adult is assigned to boat 1, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) F is assigned to boat 1.",
      "B) G is assigned to boat 2.",
      "C) H is assigned to boat 2.",
      "D) V is assigned to boat 1.",
      "E) Z is assigned to boat 2."
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([boat1, boat2])\npeople = EnumSort([F, G, H, V, W, X, Y, Z])\nadults = EnumSort([F, G, H])\nchildren = EnumSort([V, W, X, Y, Z])\nassigned = Function([boats, people] -> [bool])\n\n# Constraints\nForAll([b:boats], Count([p:people], assigned(b, p)) == 4) ::: Each of two boats, boat 1 and boat 2, will be assigned exactly four people\nForAll([b:boats], Count([p:people], And(assigned(b, p), p == adults)) >= 1) ::: Each boat is assigned at least one adult\nImplies(assigned(boat2, F), assigned(boat2, G)) ::: If F is assigned to boat 2, G is assigned to boat 2\nImplies(assigned(boat1, V), assigned(boat2, W)) ::: If V is assigned to boat 1, W is assigned to boat 2\nImplies(assigned(boat1, X), Not(assigned(boat1, Z))) ::: X and Z are assigned to different boats\n\n# Options\nQuestion ::: If exactly one adult is assigned to boat 1, which one of the following must be true?\nis_valid(ForAll([p:people], assigned(boat1, p) == adults)) ::: A) F is assigned to boat 1.\nis_valid(ForAll([p:people], assigned(boat2, p) == adults)) ::: B) G is assigned to boat 2.\nis_valid(ForAll([p:people], assigned(boat2, p) == adults)) ::: C) H is assigned to boat 2.\nis_valid(ForAll([p:people], assigned(boat1, p) == children)) ::: D) V is assigned to boat 1.\nis_valid(ForAll([p:people], assigned(boat2, p"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_4_20",
    "context": "Each of nine students—Faith, Gregory, Harlan, Jennifer, Kenji, Lisa, Marcus, Nari, and Paul—will be assigned to exactly one of three panels: Oceans, Recycling, and Wetlands. Exactly three of the students will be assigned to each panel. The assignment of students to panels must meet the following conditions: Faith is assigned to the same panel as Gregory. Kenji is assigned to the same panel as Marcus. Faith is not assigned to the same panel as Paul. Gregory is not assigned to the same panel as Harlan. Jennifer is not assigned to the same panel as Kenji. Harlan is not assigned to the Oceans panel if Paul is not assigned to the Oceans panel.",
    "question": "Which one of the following is an acceptable assignment of students to the panels?",
    "answer": "E",
    "options": [
      "A) Oceans: Faith, Gregory, Jennifer Recycling: Kenji, Lisa, Nari Wetlands: Harlan, Marcus, Paul",
      "B) Oceans: Faith, Jennifer, Lisa Recycling: Harlan, Kenji, Marcus Wetlands: Gregory, Nari, Paul",
      "C) Oceans: Harlan, Kenji, Marcus Recycling: Faith, Gregory, Jennifer Wetlands: Lisa, Nari, Paul",
      "D) Oceans: Jennifer, Kenji, Marcus Recycling: Faith, Gregory, Nari Wetlands: Harlan, Lisa, Paul",
      "E) Oceans: Kenji, Marcus, Paul Recycling: Harlan, Jennifer, Nari Wetlands: Faith, Gregory, Lisa"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Faith, Gregory, Harlan, Jennifer, Kenji, Lisa, Marcus, Nari, Paul])\npanels = EnumSort([Oceans, Recycling, Wetlands])\nassigned = Function([students, panels] -> [bool])\n\n# Constraints\nForAll([s:students], Count([p:panels], assigned(s, p)) == 1) ::: Each of nine students will be assigned to exactly one of three panels\nAnd(assigned(Faith, p), assigned(Gregory, p)) ::: Faith is assigned to the same panel as Gregory\nAnd(assigned(Kenji, p), assigned(Marcus, p)) ::: Kenji is assigned to the same panel as Marcus\nNot(assigned(Faith, p), assigned(Paul, p)) ::: Faith is not assigned to the same panel as Paul\nNot(assigned(Gregory, p), assigned(Harlan, p)) ::: Gregory is not assigned to the same panel as Harlan\nNot(assigned(Jennifer, p), assigned(Kenji, p)) ::: Jennifer is not assigned to the same panel as Kenji\nImplies(Not(assigned(Harlan, Oceans)), Not(assigned(Paul, Oceans))) ::: Harlan is not assigned to the Oceans panel if Paul is not assigned to the Oceans panel\n\n# Options\nQuestion ::: Which one of the following is an acceptable assignment of students to the panels?\nis_sat(And(assigned(Faith, Oceans), assigned(Gregory, Oceans), assigned(Jennifer, Oceans), assigned(Kenji, Recycling), assigned(Lisa, Recycling), assigned(Nari, Recycling), assigned(Harlan, Wetlands), assigned(Marcus, Wetlands), assigned(Paul, Wetlands))) ::: A) Oceans: Faith, Gregory, Jennifer Recycling: Kenji, Lisa, Nari Wetlands: Harlan, Marcus, Paul\nis_s"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_4_21",
    "context": "Each of nine students—Faith, Gregory, Harlan, Jennifer, Kenji, Lisa, Marcus, Nari, and Paul—will be assigned to exactly one of three panels: Oceans, Recycling, and Wetlands. Exactly three of the students will be assigned to each panel. The assignment of students to panels must meet the following conditions: Faith is assigned to the same panel as Gregory. Kenji is assigned to the same panel as Marcus. Faith is not assigned to the same panel as Paul. Gregory is not assigned to the same panel as Harlan. Jennifer is not assigned to the same panel as Kenji. Harlan is not assigned to the Oceans panel if Paul is not assigned to the Oceans panel.",
    "question": "If Marcus and Paul are both assigned to the Wetlands panel, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Harlan is assigned to the Recycling panel.",
      "B) Jennifer is assigned to the Oceans panel.",
      "C) Kenji is assigned to the Recycling panel.",
      "D) Lisa is assigned to the Wetlands panel.",
      "E) Nari is assigned to the Oceans panel."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Faith, Gregory, Harlan, Jennifer, Kenji, Lisa, Marcus, Nari, Paul])\npanels = EnumSort([Oceans, Recycling, Wetlands])\nassigned = Function([students, panels] -> [bool])\n\n# Constraints\nForAll([s:students], Count([p:panels], assigned(s, p)) == 1) ::: Each of nine students will be assigned to exactly one of three panels\nAnd(assigned(Faith, p), assigned(Gregory, p)) ::: Faith is assigned to the same panel as Gregory\nAnd(assigned(Kenji, p), assigned(Marcus, p)) ::: Kenji is assigned to the same panel as Marcus\nNot(And(assigned(Faith, p), assigned(Paul, p))) ::: Faith is not assigned to the same panel as Paul\nNot(And(assigned(Gregory, p), assigned(Harlan, p))) ::: Gregory is not assigned to the same panel as Harlan\nNot(And(assigned(Jennifer, p), assigned(Kenji, p))) ::: Jennifer is not assigned to the same panel as Kenji\nNot(And(assigned(Harlan, Oceans), Not(assigned(Paul, Oceans)))) ::: Harlan is not assigned to the Oceans panel if Paul is not assigned to the Oceans panel\n\n# Options\nQuestion ::: If Marcus and Paul are both assigned to the Wetlands panel, which one of the following must be true?\nis_valid(And(assigned(Marcus, Wetlands), assigned(Paul, Wetlands), assigned(Harlan, Recycling))) ::: (A)\nis_valid(And(assigned(Marcus, Wetlands), assigned(Paul, Wetlands), assigned(Jennifer, Oceans))) ::: (B)\nis_valid(And(assigned(Marcus, Wetlands), assigned(Paul, Wetlands), assigned(Kenji, Recycling))) ::: (C"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_4_22",
    "context": "Each of nine students—Faith, Gregory, Harlan, Jennifer, Kenji, Lisa, Marcus, Nari, and Paul—will be assigned to exactly one of three panels: Oceans, Recycling, and Wetlands. Exactly three of the students will be assigned to each panel. The assignment of students to panels must meet the following conditions: Faith is assigned to the same panel as Gregory. Kenji is assigned to the same panel as Marcus. Faith is not assigned to the same panel as Paul. Gregory is not assigned to the same panel as Harlan. Jennifer is not assigned to the same panel as Kenji. Harlan is not assigned to the Oceans panel if Paul is not assigned to the Oceans panel.",
    "question": "Which one of the following is a pair of students who could be assigned to the same panel as each other?",
    "answer": "C",
    "options": [
      "A) Faith and Harlan",
      "B) Gregory and Paul",
      "C) Harlan and Marcus",
      "D) Faith and Marcus",
      "E) Jennifer and Marcus"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Faith, Gregory, Harlan, Jennifer, Kenji, Lisa, Marcus, Nari, Paul])\npanels = EnumSort([Oceans, Recycling, Wetlands])\nassigned = Function([students, panels] -> [bool])\n\n# Constraints\nForAll([s:students], Count([p:panels], assigned(s, p)) == 1) ::: Each of nine students will be assigned to exactly one of three panels\nAnd(assigned(Faith, p), assigned(Gregory, p)) ::: Faith is assigned to the same panel as Gregory\nAnd(assigned(Kenji, p), assigned(Marcus, p)) ::: Kenji is assigned to the same panel as Marcus\nNot(assigned(Faith, p), assigned(Paul, p)) ::: Faith is not assigned to the same panel as Paul\nNot(assigned(Gregory, p), assigned(Harlan, p)) ::: Gregory is not assigned to the same panel as Harlan\nNot(assigned(Jennifer, p), assigned(Kenji, p)) ::: Jennifer is not assigned to the same panel as Kenji\nImplies(Not(assigned(Harlan, Oceans)), Not(assigned(Paul, Oceans))) ::: Harlan is not assigned to the Oceans panel if Paul is not assigned to the Oceans panel\n\n# Options\nQuestion ::: Which one of the following is a pair of students who could be assigned to the same panel as each other?\nis_sat(And(assigned(Faith, p), assigned(Harlan, p))) ::: (A)\nis_sat(And(assigned(Gregory, p), assigned(Paul, p))) ::: (B)\nis_sat(And(assigned(Harlan, p), assigned(Marcus, p))) ::: (C)\nis_sat(And(assigned(Faith, p), assigned(Marcus, p))) ::: (D)\nis_sat(And(assigned(Jenn"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_4_23",
    "context": "Each of nine students—Faith, Gregory, Harlan, Jennifer, Kenji, Lisa, Marcus, Nari, and Paul—will be assigned to exactly one of three panels: Oceans, Recycling, and Wetlands. Exactly three of the students will be assigned to each panel. The assignment of students to panels must meet the following conditions: Faith is assigned to the same panel as Gregory. Kenji is assigned to the same panel as Marcus. Faith is not assigned to the same panel as Paul. Gregory is not assigned to the same panel as Harlan. Jennifer is not assigned to the same panel as Kenji. Harlan is not assigned to the Oceans panel if Paul is not assigned to the Oceans panel.",
    "question": "If Kenji and Paul are both assigned to the Recycling panel, which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Faith is assigned to the Wetlands panel.",
      "B) Gregory is assigned to the Recycling panel.",
      "C) Harlan is assigned to the Oceans panel.",
      "D) Jennifer is assigned to the Wetlands panel.",
      "E) Lisa is assigned to the Recycling panel."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Faith, Gregory, Harlan, Jennifer, Kenji, Lisa, Marcus, Nari, Paul])\npanels = EnumSort([Oceans, Recycling, Wetlands])\nassigned = Function([students, panels] -> [bool])\n\n# Constraints\nForAll([s:students], Count([p:panels], assigned(s, p)) == 1) ::: Each of nine students will be assigned to exactly one of three panels\nAnd(assigned(Faith, p), assigned(Gregory, p)) ::: Faith is assigned to the same panel as Gregory\nAnd(assigned(Kenji, p), assigned(Marcus, p)) ::: Kenji is assigned to the same panel as Marcus\nNot(And(assigned(Faith, p), assigned(Paul, p))) ::: Faith is not assigned to the same panel as Paul\nNot(And(assigned(Gregory, p), assigned(Harlan, p))) ::: Gregory is not assigned to the same panel as Harlan\nNot(And(assigned(Jennifer, p), assigned(Kenji, p))) ::: Jennifer is not assigned to the same panel as Kenji\nNot(And(assigned(Harlan, Oceans), Not(assigned(Paul, Oceans)))) ::: Harlan is not assigned to the Oceans panel if Paul is not assigned to the Oceans panel\n\n# Options\nQuestion ::: If Kenji and Paul are both assigned to the Recycling panel, which one of the following could be true?\nis_valid(Exists([s:students], assigned(s, Wetlands))) ::: (A)\nis_valid(Exists([s:students], assigned(s, Recycling))) ::: (B)\nis_valid(Exists([s:students], assigned(s, Oceans))) ::: (C)\nis_valid(Exists([s:students], assigned(s, Wetlands))) ::: (D)\nis_valid(Exists([s:students], assigned(s, Recycling)))"
    ]
  },
  {
    "id": "ar_lsat_199606_1-G_4_24",
    "context": "Each of nine students—Faith, Gregory, Harlan, Jennifer, Kenji, Lisa, Marcus, Nari, and Paul—will be assigned to exactly one of three panels: Oceans, Recycling, and Wetlands. Exactly three of the students will be assigned to each panel. The assignment of students to panels must meet the following conditions: Faith is assigned to the same panel as Gregory. Kenji is assigned to the same panel as Marcus. Faith is not assigned to the same panel as Paul. Gregory is not assigned to the same panel as Harlan. Jennifer is not assigned to the same panel as Kenji. Harlan is not assigned to the Oceans panel if Paul is not assigned to the Oceans panel.",
    "question": "Each of the following is a pair of students who could be assigned to the same panel as each other EXCEPT:",
    "answer": "A",
    "options": [
      "A) Gregory and Kenji",
      "B) Gregory and Lisa",
      "C) Kenji and Nari",
      "D) Lisa and Marcus",
      "E) Lisa and Paul"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Faith, Gregory, Harlan, Jennifer, Kenji, Lisa, Marcus, Nari, Paul])\npanels = EnumSort([Oceans, Recycling, Wetlands])\nassigned = Function([students, panels] -> [bool])\n\n# Constraints\nForAll([s:students], Count([p:panels], assigned(s, p)) == 1) ::: Each of nine students will be assigned to exactly one of three panels\nAnd(assigned(Faith, p), assigned(Gregory, p)) ::: Faith is assigned to the same panel as Gregory\nAnd(assigned(Kenji, p), assigned(Marcus, p)) ::: Kenji is assigned to the same panel as Marcus\nNot(assigned(Faith, p), assigned(Paul, p)) ::: Faith is not assigned to the same panel as Paul\nNot(assigned(Gregory, p), assigned(Harlan, p)) ::: Gregory is not assigned to the same panel as Harlan\nNot(assigned(Jennifer, p), assigned(Kenji, p)) ::: Jennifer is not assigned to the same panel as Kenji\nNot(assigned(Harlan, Oceans), Not(assigned(Paul, Oceans))) ::: Harlan is not assigned to the Oceans panel if Paul is not assigned to the Oceans panel\n\n# Options\nQuestion ::: Each of the following is a pair of students who could be assigned to the same panel as each other EXCEPT:\nis_exception(is_sat(And(assigned(Gregory, p), assigned(Kenji, p)))) ::: (A)\nis_exception(is_sat(And(assigned(Gregory, p), assigned(Lisa, p)))) ::: (B)\nis_exception(is_sat(And(assigned(Kenji, p), assigned(Nari, p)))) ::: (C)\nis_exception(is_sat(And(assigned(Lisa, p), assigned(Marcus, p))))"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_1_1",
    "context": "Each of seven travelers—Norris, Oribe, Paulsen, Rosen, Semonelli, Tan, and Underwood—will be assigned to exactly one of nine airplane seats. The seats are numbered from 1 through 9 and arranged in rows as follows: Front row: 1 2 3 Middle row: 4 5 6 Last row: 7 8 9 Only seats in the same row as each other are immediately beside each other. Seat assignments must meet the following conditions: Oribe's seat is in the last row. Paulsen's seat is immediately beside Rosen's seat and also immediately beside an unassigned seat. Rosen's seat is in the row immediately behind the row in which Norris' seat is located. Neither Semonelli nor Underwood is seated immediately beside Norris.",
    "question": "Which one of the following is a pair of travelers who could be assigned to seats 2 and 8, respectively?",
    "answer": "A",
    "options": [
      "A) Norris, Semonelli",
      "B) Oribe, Underwood",
      "C) Paulsen, Oribe",
      "D) Rosen, Semonelli",
      "E) Underwood, Tan"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_1_2",
    "context": "Each of seven travelers—Norris, Oribe, Paulsen, Rosen, Semonelli, Tan, and Underwood—will be assigned to exactly one of nine airplane seats. The seats are numbered from 1 through 9 and arranged in rows as follows: Front row: 1 2 3 Middle row: 4 5 6 Last row: 7 8 9 Only seats in the same row as each other are immediately beside each other. Seat assignments must meet the following conditions: Oribe's seat is in the last row. Paulsen's seat is immediately beside Rosen's seat and also immediately beside an unassigned seat. Rosen's seat is in the row immediately behind the row in which Norris' seat is located. Neither Semonelli nor Underwood is seated immediately beside Norris.",
    "question": "If Semonelli and Underwood are not assigned to seats in the same row as each other, which one of the following must be false?",
    "answer": "A",
    "options": [
      "A) Norris is assigned to seat 2.",
      "B) Paulsen is assigned to seat 5.",
      "C) Rosen is assigned to seat 4.",
      "D) Tan is assigned to seat 2.",
      "E) Underwood is assigned to seat 1."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_1_3",
    "context": "Each of seven travelers—Norris, Oribe, Paulsen, Rosen, Semonelli, Tan, and Underwood—will be assigned to exactly one of nine airplane seats. The seats are numbered from 1 through 9 and arranged in rows as follows: Front row: 1 2 3 Middle row: 4 5 6 Last row: 7 8 9 Only seats in the same row as each other are immediately beside each other. Seat assignments must meet the following conditions: Oribe's seat is in the last row. Paulsen's seat is immediately beside Rosen's seat and also immediately beside an unassigned seat. Rosen's seat is in the row immediately behind the row in which Norris' seat is located. Neither Semonelli nor Underwood is seated immediately beside Norris.",
    "question": "If Semonelli is assigned to a seat in the same row as Underwood, which one of the following travelers could be assigned to a seat immediately beside one of the unassigned seats?",
    "answer": "D",
    "options": [
      "A) Oribe",
      "B) Rosen",
      "C) Semonelli",
      "D) Tan",
      "E) Underwood"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_1_4",
    "context": "Each of seven travelers—Norris, Oribe, Paulsen, Rosen, Semonelli, Tan, and Underwood—will be assigned to exactly one of nine airplane seats. The seats are numbered from 1 through 9 and arranged in rows as follows: Front row: 1 2 3 Middle row: 4 5 6 Last row: 7 8 9 Only seats in the same row as each other are immediately beside each other. Seat assignments must meet the following conditions: Oribe's seat is in the last row. Paulsen's seat is immediately beside Rosen's seat and also immediately beside an unassigned seat. Rosen's seat is in the row immediately behind the row in which Norris' seat is located. Neither Semonelli nor Underwood is seated immediately beside Norris.",
    "question": "If the seat to which Tan is assigned is immediately beside a seat assigned to another traveler and also immediately beside one of the unassigned seats, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Tan is assigned to a seat in the front row.",
      "B) Tan is assigned to a seat in the last row.",
      "C) Oribe is assigned to a seat immediately beside Semonelli.",
      "D) Oribe is assigned to a seat immediately beside Tan.",
      "E) Semonelli is assigned to a seat immediately beside Underwood."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_1_5",
    "context": "Each of seven travelers—Norris, Oribe, Paulsen, Rosen, Semonelli, Tan, and Underwood—will be assigned to exactly one of nine airplane seats. The seats are numbered from 1 through 9 and arranged in rows as follows: Front row: 1 2 3 Middle row: 4 5 6 Last row: 7 8 9 Only seats in the same row as each other are immediately beside each other. Seat assignments must meet the following conditions: Oribe's seat is in the last row. Paulsen's seat is immediately beside Rosen's seat and also immediately beside an unassigned seat. Rosen's seat is in the row immediately behind the row in which Norris' seat is located. Neither Semonelli nor Underwood is seated immediately beside Norris.",
    "question": "If Oribe is assigned to a seat immediately beside one of the unassigned seats, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Oribe is assigned to seat 8.",
      "B) Tan is assigned to seat 2.",
      "C) Underwood is assigned to seat 1.",
      "D) Seat 4 is unassigned.",
      "E) Seat 9 is unassigned."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_2_6",
    "context": "A university library budget committee must reduce exactly five of eight areas of expenditure—G, L, M, N, P, R, S, and W—in accordance with the following conditions: If both G and S are reduced, W is also reduced. If N is reduced, neither R nor S is reduced. If P is reduced, L is not reduced. Of the three areas L, M, and R, exactly two are reduced.",
    "question": "Which one of the following could be a complete and accurate list of the areas of expenditure reduced by the committee?",
    "answer": "A",
    "options": [
      "A) G, L, M, N, W",
      "B) G, L, M, P, W",
      "C) G, M, N, R, W",
      "D) G, M, P, R, S",
      "E) L, M, R, S, W"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_2_7",
    "context": "A university library budget committee must reduce exactly five of eight areas of expenditure—G, L, M, N, P, R, S, and W—in accordance with the following conditions: If both G and S are reduced, W is also reduced. If N is reduced, neither R nor S is reduced. If P is reduced, L is not reduced. Of the three areas L, M, and R, exactly two are reduced.",
    "question": "If W is reduced, which one of the following could be a complete and accurate list of the four other areas of expenditure to be reduced?",
    "answer": "E",
    "options": [
      "A) G, M, P, S",
      "B) L, M, N, R",
      "C) L, M, P, S",
      "D) M, N, P, S",
      "E) M, P, R, S"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_2_8",
    "context": "A university library budget committee must reduce exactly five of eight areas of expenditure—G, L, M, N, P, R, S, and W—in accordance with the following conditions: If both G and S are reduced, W is also reduced. If N is reduced, neither R nor S is reduced. If P is reduced, L is not reduced. Of the three areas L, M, and R, exactly two are reduced.",
    "question": "If P is reduced, which one of the following is a pair of areas of expenditure both of which must be reduced?",
    "answer": "B",
    "options": [
      "A) G, M",
      "B) M, R",
      "C) N, R",
      "D) R, S",
      "E) S, W"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_2_9",
    "context": "A university library budget committee must reduce exactly five of eight areas of expenditure—G, L, M, N, P, R, S, and W—in accordance with the following conditions: If both G and S are reduced, W is also reduced. If N is reduced, neither R nor S is reduced. If P is reduced, L is not reduced. Of the three areas L, M, and R, exactly two are reduced.",
    "question": "If both L and S are reduced, which one of the following could be a pair of areas of expenditure both of which are reduced?",
    "answer": "A",
    "options": [
      "A) G, M",
      "B) G, P",
      "C) N, R",
      "D) N, W",
      "E) P, S"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_2_10",
    "context": "A university library budget committee must reduce exactly five of eight areas of expenditure—G, L, M, N, P, R, S, and W—in accordance with the following conditions: If both G and S are reduced, W is also reduced. If N is reduced, neither R nor S is reduced. If P is reduced, L is not reduced. Of the three areas L, M, and R, exactly two are reduced.",
    "question": "If R is not reduced, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) G is reduced.",
      "B) N is not reduced.",
      "C) P is reduced.",
      "D) S is reduced.",
      "E) W is not reduced."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_2_11",
    "context": "A university library budget committee must reduce exactly five of eight areas of expenditure—G, L, M, N, P, R, S, and W—in accordance with the following conditions: If both G and S are reduced, W is also reduced. If N is reduced, neither R nor S is reduced. If P is reduced, L is not reduced. Of the three areas L, M, and R, exactly two are reduced.",
    "question": "If both M and R are reduced, which one of the following is a pair of areas neither of which could be reduced?",
    "answer": "C",
    "options": [
      "A) G, L",
      "B) G, N",
      "C) L, N",
      "D) L, P",
      "E) P, S"
    ],
    "raw_logic_programs": [
      "# Declarations\nareas = EnumSort([G, L, M, N, P, R, S, W])\nreduced = Function([areas] -> [bool])\nForAll([a:areas], And(reduced(a) == true, reduced(a) == false))\n\n# Constraints\nAnd(reduced(G), reduced(S)) => reduced(W) ::: If both G and S are reduced, W is also reduced\nAnd(reduced(N), Not(reduced(R))) ::: If N is reduced, neither R nor S is reduced\nAnd(reduced(P), Not(reduced(L))) ::: If P is reduced, L is not reduced\nCount([a:areas], And(a == L, a == M, a == R, reduced(a))) == 2 ::: Of the three areas L, M, and R, exactly two are reduced\n\n# Options\nQuestion ::: If both M and R are reduced, which one of the following is a pair of areas neither of which could be reduced?\nis_exception(is_sat(And(reduced(G), reduced(L)))) ::: A) G, L\nis_exception(is_sat(And(reduced(G), reduced(N)))) ::: B) G, N\nis_exception(is_sat(And(reduced(L), reduced(N)))) ::: C) L, N\nis_exception(is_sat(And(reduced(L), reduced(P)))) ::: D) L, P\nis_exception(is_sat(And(reduced(P), reduced(S)))) ::: E) P, S\n------"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_2_12",
    "context": "A university library budget committee must reduce exactly five of eight areas of expenditure—G, L, M, N, P, R, S, and W—in accordance with the following conditions: If both G and S are reduced, W is also reduced. If N is reduced, neither R nor S is reduced. If P is reduced, L is not reduced. Of the three areas L, M, and R, exactly two are reduced.",
    "question": "Which one of the following areas must be reduced?",
    "answer": "E",
    "options": [
      "A) G",
      "B) L",
      "C) N",
      "D) P",
      "E) W"
    ],
    "raw_logic_programs": [
      "# Declarations\nareas = EnumSort([G, L, M, N, P, R, S, W])\nreduced = Function([areas] -> [bool])\nForAll([a:areas], And(reduced(a) == true, reduced(a) == false))\n\n# Constraints\nForAll([a:areas], Count([a:areas], reduced(a)) == 5) ::: reduce exactly five of eight areas of expenditure\nAnd(reduced(G), reduced(S)) => reduced(W) ::: If both G and S are reduced, W is also reduced\nNot(reduced(N)) || Not(reduced(R)) || Not(reduced(S)) ::: If N is reduced, neither R nor S is reduced\nNot(reduced(P)) || Not(reduced(L)) ::: If P is reduced, L is not reduced\nCount([a:areas], And(a == L, a == M, a == R, reduced(a))) == 2 ::: Of the three areas L, M, and R, exactly two are reduced\n\n# Options\nQuestion ::: Which one of the following areas must be reduced?\nis_sat(reduced(G)) ::: A)\nis_sat(reduced(L)) ::: B)\nis_sat(reduced(N)) ::: C)\nis_sat(reduced(P)) ::: D)\nis_sat(reduced(W)) ::: E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who work in either or both of two departments"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_3_13",
    "context": "A jeweler makes a single strand of beads by threading onto a string in a single direction from a clasp a series of solid-colored beads. Each bead is either green, orange, purple, red, or yellow. The resulting strand satisfies the following specifications: If a purple bead is adjacent to a yellow bead, any bead that immediately follows and any bead that immediately precedes that pair must be red. Any pair of beads adjacent to each other that are the same color as each other must be green. No orange bead can be adjacent to any red bead. Any portion of the strand containing eight consecutive beads must include at least one bead of each color.",
    "question": "If the strand has exactly eight beads, which one of the following is an acceptable order, starting from the clasp, for the eight beads?",
    "answer": "C",
    "options": [
      "A) green, red, purple, yellow, red, orange, green, purple",
      "B) orange, yellow, red, red, yellow, purple, red, green",
      "C) purple, yellow, red, green, green, orange, yellow, orange",
      "D) red, orange, red, yellow, purple, green, yellow, green",
      "E) red, yellow, purple, red, green, red, green, green"
    ],
    "raw_logic_programs": [
      "# Declarations\nbeads = EnumSort([green, orange, purple, red, yellow])\nstrand = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nbead = Function([strand] -> [beads])\n\n# Constraints\nForAll([s:strand], Count([b:beads], bead(s) == b) == 1) ::: each bead is either green, orange, purple, red, or yellow\nForAll([s:strand], Count([b:beads], bead(s) == b) == 1) ::: each bead is either green, orange, purple, red, or yellow\nForAll([s:strand], Count([b:beads], bead(s) == b) == 1) ::: each bead is either green, orange, purple, red, or yellow\nForAll([s:strand], Count([b:beads], bead(s) == b) == 1) ::: each bead is either green, orange, purple, red, or yellow\nForAll([s:strand], Count([b:beads], bead(s) == b) == 1) ::: each bead is either green, orange, purple, red, or yellow\nForAll([s:strand], Count([b:beads], bead(s) == b) == 1) ::: each bead is either green, orange, purple, red, or yellow\nForAll([s:strand], Count([b:beads], bead(s) == b) == 1) :"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_3_14",
    "context": "A jeweler makes a single strand of beads by threading onto a string in a single direction from a clasp a series of solid-colored beads. Each bead is either green, orange, purple, red, or yellow. The resulting strand satisfies the following specifications: If a purple bead is adjacent to a yellow bead, any bead that immediately follows and any bead that immediately precedes that pair must be red. Any pair of beads adjacent to each other that are the same color as each other must be green. No orange bead can be adjacent to any red bead. Any portion of the strand containing eight consecutive beads must include at least one bead of each color.",
    "question": "If an orange bead is the fourth bead from the clasp, which one of the following is a pair that could be the second and third beads, respectively?",
    "answer": "D",
    "options": [
      "A) green, orange",
      "B) green, red",
      "C) purple, purple",
      "D) yellow, green",
      "E) yellow, purple"
    ],
    "raw_logic_programs": [
      "# Declarations\nbeads = EnumSort([green, orange, purple, red, yellow])\nstrand = Function([beads] -> [beads])\nForAll([b:beads], And(1 <= strand(b), strand(b) <= 5))\n\n# Constraints\nForAll([b:beads], Implies(strand(b) == strand(b + 1), strand(b) == green)) ::: Any pair of beads adjacent to each other that are the same color as each other must be green\nForAll([b:beads], Implies(strand(b) == purple, Implies(strand(b + 1) == yellow, Implies(strand(b - 1) == red, strand(b + 2) == red)))) ::: If a purple bead is adjacent to a yellow bead, any bead that immediately follows and any bead that immediately precedes that pair must be red\nForAll([b:beads], Implies(strand(b) == orange, Not(strand(b + 1) == red))) ::: No orange bead can be adjacent to any red bead\nForAll([b:beads], Implies(strand(b) == strand(b + 1) == strand(b + 2) == strand(b + 3) == strand(b + 4) == strand(b + 5) == strand(b + 6) == strand(b + 7), Or(strand(b) == green, strand(b) == orange, strand(b) == purple, strand(b"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_3_15",
    "context": "A jeweler makes a single strand of beads by threading onto a string in a single direction from a clasp a series of solid-colored beads. Each bead is either green, orange, purple, red, or yellow. The resulting strand satisfies the following specifications: If a purple bead is adjacent to a yellow bead, any bead that immediately follows and any bead that immediately precedes that pair must be red. Any pair of beads adjacent to each other that are the same color as each other must be green. No orange bead can be adjacent to any red bead. Any portion of the strand containing eight consecutive beads must include at least one bead of each color.",
    "question": "If on an eight-bead strand the second, third, and fourth beads from the clasp are red, green, and yellow, respectively, and the sixth and seventh beads are purple and red, respectively, then which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) The first bead is purple.",
      "B) The fifth bead is green.",
      "C) The fifth bead is orange.",
      "D) The eighth bead is orange.",
      "E) The eighth bead is yellow."
    ],
    "raw_logic_programs": [
      "# Declarations\nbeads = EnumSort([green, orange, purple, red, yellow])\nstrand = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nadjacent = Function([strand, strand] -> [bool])\nForAll([s:strand], And(1 <= s, s <= 8))\n\n# Constraints\nForAll([s:strand], Count([b:beads], adjacent(s, b)) == 2) ::: If a purple bead is adjacent to a yellow bead, any bead that immediately follows and any bead that immediately precedes that pair must be red\nForAll([s:strand], Count([b:beads], adjacent(s, b) && b == strand(s)) == 2) ::: Any pair of beads adjacent to each other that are the same color as each other must be green\nForAll([s:strand], Not(adjacent(s, orange))) ::: No orange bead can be adjacent to any red bead\nForAll([s:strand], And(1 <= s, s <= 8), Count([b:beads], adjacent(s, b)) >= 1) ::: Any portion of the strand containing eight consecutive beads must include at least one bead of each color\n\n# Options\nQuestion ::: If on an eight-bead strand the second, third, and fourth beads from the clasp are red, green, and yellow, respectively, and the sixth and seventh beads are purple and red, respectively, then which one of the following must be true?\nis_valid(Exists([s"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_3_16",
    "context": "A jeweler makes a single strand of beads by threading onto a string in a single direction from a clasp a series of solid-colored beads. Each bead is either green, orange, purple, red, or yellow. The resulting strand satisfies the following specifications: If a purple bead is adjacent to a yellow bead, any bead that immediately follows and any bead that immediately precedes that pair must be red. Any pair of beads adjacent to each other that are the same color as each other must be green. No orange bead can be adjacent to any red bead. Any portion of the strand containing eight consecutive beads must include at least one bead of each color.",
    "question": "If on a six-bead strand the first and second beads from the clasp are purple and yellow, respectively, then the fifth and sixth beads CANNOT be",
    "answer": "E",
    "options": [
      "A) green and orange, respectively",
      "B) orange and green, respectively",
      "C) orange and yellow, respectively",
      "D) purple and orange, respectively",
      "E) yellow and purple, respectively"
    ],
    "raw_logic_programs": [
      "# Declarations\nbeads = EnumSort([green, orange, purple, red, yellow])\nstrand = EnumSort([1, 2, 3, 4, 5, 6])\nadjacent = Function([strand, strand] -> [bool])\nForAll([s:strand], And(1 <= s, s <= 6))\n\n# Constraints\nForAll([s:strand], Count([b:beads], adjacent(s, b)) == 2) ::: If a purple bead is adjacent to a yellow bead, any bead that immediately follows and any bead that immediately precedes that pair must be red\nForAll([s:strand], Count([b:beads], adjacent(s, b) == 2)) ::: Any pair of beads adjacent to each other that are the same color as each other must be green\nForAll([s:strand], Count([b:beads], adjacent(s, b) == 2)) ::: No orange bead can be adjacent to any red bead\nForAll([s:strand], Count([b:beads], adjacent(s, b) == 2)) ::: Any portion of the strand containing eight consecutive beads must include at least one bead of each color\n\n# Options\nQuestion ::: If on a six-bead strand the first and second beads from the clasp are purple and yellow, respectively, then the fifth and sixth beads CANNOT be\nis_exception(is_sat(adjacent(5, green) && adjacent(6, orange))) ::: A) green and orange, respectively\nis_exception(is_sat(adjacent"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_3_17",
    "context": "A jeweler makes a single strand of beads by threading onto a string in a single direction from a clasp a series of solid-colored beads. Each bead is either green, orange, purple, red, or yellow. The resulting strand satisfies the following specifications: If a purple bead is adjacent to a yellow bead, any bead that immediately follows and any bead that immediately precedes that pair must be red. Any pair of beads adjacent to each other that are the same color as each other must be green. No orange bead can be adjacent to any red bead. Any portion of the strand containing eight consecutive beads must include at least one bead of each color.",
    "question": "If on a nine-bead strand the first and fourth beads from the clasp are purple, and the second and fifth beads are yellow, which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) The seventh bead is orange.",
      "B) The eighth bead is green.",
      "C) The eighth bead is red.",
      "D) The ninth bead is red.",
      "E) The ninth bead is yellow."
    ],
    "raw_logic_programs": [
      "# Declarations\nbeads = EnumSort([green, orange, purple, red, yellow])\nstrand = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9])\nadjacent = Function([strand, strand] -> [bool])\nForAll([s:strand], And(1 <= s, s <= 9))\n\n# Constraints\nForAll([s:strand], Count([b:beads], adjacent(s, b)) == 2) ::: If a purple bead is adjacent to a yellow bead, any bead that immediately follows and any bead that immediately precedes that pair must be red\nForAll([s:strand], Count([b:beads], adjacent(s, b) && b == strand(s)) == 2) ::: Any pair of beads adjacent to each other that are the same color as each other must be green\nForAll([s:strand], Not(adjacent(s, orange) && adjacent(s, red))) ::: No orange bead can be adjacent to any red bead\nForAll([s:strand], And(1 <= s, s <= 8), Count([b:beads], adjacent(s, b)) >= 1) ::: Any portion of the strand containing eight consecutive beads must include at least one bead of each color\n\n# Options\nQuestion ::: If on a nine-bead strand the first and fourth beads from the clasp are purple, and the second and fifth beads are yellow, which one of the following could be true?\nis_valid(Exists([s:strand], adjacent("
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_3_18",
    "context": "A jeweler makes a single strand of beads by threading onto a string in a single direction from a clasp a series of solid-colored beads. Each bead is either green, orange, purple, red, or yellow. The resulting strand satisfies the following specifications: If a purple bead is adjacent to a yellow bead, any bead that immediately follows and any bead that immediately precedes that pair must be red. Any pair of beads adjacent to each other that are the same color as each other must be green. No orange bead can be adjacent to any red bead. Any portion of the strand containing eight consecutive beads must include at least one bead of each color.",
    "question": "If on an eight-bead strand the first, second, third, and fourth beads from the clasp are red, yellow, green, and red, respectively, then the fifth and sixth beads CANNOT be",
    "answer": "D",
    "options": [
      "A) green and orange, respectively",
      "B) green and purple, respectively",
      "C) purple and orange, respectively",
      "D) purple and yellow, respectively",
      "E) yellow and orange, respectively"
    ],
    "raw_logic_programs": [
      "# Declarations\nbeads = EnumSort([green, orange, purple, red, yellow])\nstrand = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nadjacent = Function([strand, strand] -> [bool])\nForAll([s:strand], And(1 <= s, s <= 8))\n\n# Constraints\nForAll([s:strand], Count([b:beads], adjacent(s, b)) == 2) ::: If a purple bead is adjacent to a yellow bead, any bead that immediately follows and any bead that immediately precedes that pair must be red\nForAll([s:strand], Count([b:beads], adjacent(s, b) == 2)) ::: Any pair of beads adjacent to each other that are the same color as each other must be green\nForAll([s:strand], Count([b:beads], adjacent(s, b) == 2)) ::: No orange bead can be adjacent to any red bead\nForAll([s:strand], Count([b:beads], adjacent(s, b) == 2)) ::: Any portion of the strand containing eight consecutive beads must include at least one bead of each color\n\n# Options\nQuestion ::: If on an eight-bead strand the first, second, third, and fourth beads from the clasp are red, yellow, green, and red, respectively, then the fifth and sixth beads CANNOT be\nis_exception(is_sat(adjacent(5, green) && adjacent(6, orange))) ::: A) green and"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_4_19",
    "context": "At an evening concert, a total of six songs—O, P, T, X, Y, and Z—will be performed by three vocalists—George, Helen, and Leslie. The songs will be sung consecutively as solos, and each will be performed exactly once. The following constraints govern the composition of the concert program: Y must be performed earlier than T and earlier than O. P must be performed earlier than Z and later than O. George can perform only X, Y, and Z. Helen can perform only T, P, and X. Leslie can perform only O, P, and X. The vocalist who performs first must be different from the vocalist who performs last.",
    "question": "Which one of the following is an acceptable schedule for the performance of the songs, in order from the first to last song performed?",
    "answer": "E",
    "options": [
      "A) X, T, Y, O, P, Z",
      "B) X, Z, Y, T, O, P",
      "C) Y, O, P, X, T, Z",
      "D) Y, P, O, Z, T, X",
      "E) Y, X, O, P, Z, T"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([O, P, T, X, Y, Z])\nvocalists = EnumSort([George, Helen, Leslie])\nperforms = Function([songs, vocalists] -> [bool])\n\n# Constraints\nForAll([s:songs], Count([v:vocalists], performs(s, v)) == 1) ::: each will be performed exactly once\nForAll([v:vocalists], Count([s:songs], performs(s, v)) == 3) ::: each vocalist performs exactly three songs\nAnd(performs(Y, George), performs(Y, Helen), performs(Y, Leslie)) ::: Y must be performed earlier than T and earlier than O\nAnd(performs(P, George), performs(P, Helen), performs(P, Leslie)) ::: P must be performed earlier than Z and later than O\nAnd(performs(X, George), performs(X, Helen), performs(X, Leslie)) ::: George can perform only X, Y, and Z\nAnd(performs(T, George), performs(T, Helen), performs(T, Leslie)) ::: Helen can perform only T, P, and X\nAnd(performs(O, George), performs(O, Helen), performs(O, Leslie)) ::: Leslie can perform only O, P, and X\nForAll([v:vocalists], Implies(performs(v, O), Not(performs(v, Z)))) ::: The vocalist who performs first must be different from the vocalist who performs last\n\n# Options\nQuestion ::: Which one of the following is an acceptable schedule for the performance"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_4_20",
    "context": "At an evening concert, a total of six songs—O, P, T, X, Y, and Z—will be performed by three vocalists—George, Helen, and Leslie. The songs will be sung consecutively as solos, and each will be performed exactly once. The following constraints govern the composition of the concert program: Y must be performed earlier than T and earlier than O. P must be performed earlier than Z and later than O. George can perform only X, Y, and Z. Helen can perform only T, P, and X. Leslie can perform only O, P, and X. The vocalist who performs first must be different from the vocalist who performs last.",
    "question": "Which one of the following must be true about the program?",
    "answer": "C",
    "options": [
      "A) George performs X.",
      "B) Helen performs O.",
      "C) Helen performs T.",
      "D) Leslie performs P.",
      "E) Leslie performs X."
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([O, P, T, X, Y, Z])\nvocalists = EnumSort([George, Helen, Leslie])\nperforms = Function([songs, vocalists] -> [bool])\n\n# Constraints\nForAll([s:songs], Count([v:vocalists], performs(s, v)) == 1) ::: each will be performed exactly once\nAnd(performs(Y, George), performs(Y, Helen), performs(Y, Leslie)) ::: Y must be performed earlier than T and earlier than O\nAnd(performs(P, George), performs(P, Helen), performs(P, Leslie)) ::: P must be performed earlier than Z and later than O\nAnd(performs(X, George), performs(X, Helen), performs(X, Leslie)) ::: George can perform only X, Y, and Z\nAnd(performs(T, George), performs(T, Helen), performs(T, Leslie)) ::: Helen can perform only T, P, and X\nAnd(performs(O, George), performs(O, Helen), performs(O, Leslie)) ::: Leslie can perform only O, P, and X\nForAll([v:vocalists], Implies(performs(v, O), Not(performs(v, Z)))) ::: The vocalist who performs first must be different from the vocalist who performs last\n\n# Options\nQuestion ::: Which one of the following must be true about the program?\nis_sat(ForAll([s:songs], performs(X, George))) ::: (A)\nis_sat(ForAll([s:"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_4_21",
    "context": "At an evening concert, a total of six songs—O, P, T, X, Y, and Z—will be performed by three vocalists—George, Helen, and Leslie. The songs will be sung consecutively as solos, and each will be performed exactly once. The following constraints govern the composition of the concert program: Y must be performed earlier than T and earlier than O. P must be performed earlier than Z and later than O. George can perform only X, Y, and Z. Helen can perform only T, P, and X. Leslie can perform only O, P, and X. The vocalist who performs first must be different from the vocalist who performs last.",
    "question": "Which one of the following is a complete and accurate list of the songs any one of which could be the last song performed at the concert?",
    "answer": "D",
    "options": [
      "A) O, P, Z",
      "B) O, T, X",
      "C) T, P, Z",
      "D) T, X, Z",
      "E) X, P, Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([O, P, T, X, Y, Z])\nvocalists = EnumSort([George, Helen, Leslie])\nperforms = Function([songs, vocalists] -> [bool])\n\n# Constraints\nForAll([s:songs], Count([v:vocalists], performs(s, v)) == 1) ::: each will be performed exactly once\nAnd(performs(Y, George), performs(Y, Helen), performs(Y, Leslie)) ::: Y must be performed earlier than T and earlier than O\nAnd(performs(P, George), performs(P, Helen), performs(P, Leslie)) ::: P must be performed earlier than Z and later than O\nAnd(performs(X, George), performs(X, Helen), performs(X, Leslie)) ::: George can perform only X, Y, and Z\nAnd(performs(T, George), performs(T, Helen), performs(T, Leslie)) ::: Helen can perform only T, P, and X\nAnd(performs(O, George), performs(O, Helen), performs(O, Leslie)) ::: Leslie can perform only O, P, and X\nForAll([v:vocalists], Implies(performs(v, O), Not(performs(v, Z)))) ::: The vocalist who performs first must be different from the vocalist who performs last\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the songs any one of which could be the last song performed at the concert?\nis_valid(Exists([s:songs], Or(s == O, s == P, s == Z))) ::: A) O, P, Z\nis_valid(Exists([s:songs], Or(s == O, s == T, s == X))) ::: B) O, T, X\nis_valid(Exists([s:songs], Or(s == T, s == P, s == Z))) ::: C) T, P, Z\nis_valid(Exists([s:songs], Or(s == T, s == X, s == Z))) ::: D) T, X, Z\nis_valid(Exists([s:songs], Or(s == X, s == P, s == Z))) ::: E) X, P, Z\n------"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_4_22",
    "context": "At an evening concert, a total of six songs—O, P, T, X, Y, and Z—will be performed by three vocalists—George, Helen, and Leslie. The songs will be sung consecutively as solos, and each will be performed exactly once. The following constraints govern the composition of the concert program: Y must be performed earlier than T and earlier than O. P must be performed earlier than Z and later than O. George can perform only X, Y, and Z. Helen can perform only T, P, and X. Leslie can perform only O, P, and X. The vocalist who performs first must be different from the vocalist who performs last.",
    "question": "If X is performed first, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) X is performed by George.",
      "B) X is performed by Helen.",
      "C) P is the fourth song performed.",
      "D) Y is the second song performed.",
      "E) Y is the third song performed."
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([O, P, T, X, Y, Z])\nvocalists = EnumSort([George, Helen, Leslie])\nperforms = Function([songs, vocalists] -> [bool])\n\n# Constraints\nForAll([s:songs], Count([v:vocalists], performs(s, v)) == 1) ::: each will be performed exactly once\nForAll([v:vocalists], Count([s:songs], performs(s, v)) == 3) ::: each vocalist performs exactly three songs\nAnd(performs(Y, George), performs(Y, Helen), performs(Y, Leslie)) ::: Y must be performed earlier than T and earlier than O\nAnd(performs(P, George), performs(P, Helen), performs(P, Leslie)) ::: P must be performed earlier than Z and later than O\nAnd(performs(X, George), performs(X, Helen), performs(X, Leslie)) ::: George can perform only X, Y, and Z\nAnd(performs(T, George), performs(T, Helen), performs(T, Leslie)) ::: Helen can perform only T, P, and X\nAnd(performs(O, George), performs(O, Helen), performs(O, Leslie)) ::: Leslie can perform only O, P, and X\nForAll([v:vocalists], Implies(performs(X, v), Not(performs(X, v)))) ::: The vocalist who performs first must be different from the vocalist who performs last\n\n# Options\nQuestion ::: If X is performed first, which one of the following must be true?\nis_valid(Exists([v:vocalists], performs(X, v) == George)) ::: (A)\nis_valid(Exists([v:vocalists], performs(X, v) == Helen)) ::: (B)\nis_valid(Exists([s:songs], performs(s, P) == 4)) ::: (C)\nis_valid(Exists([s:songs], performs(s, Y) == 2)) ::: (D)\nis_valid(Exists([s:songs], performs(s, Y) == 3)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees,"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_4_23",
    "context": "At an evening concert, a total of six songs—O, P, T, X, Y, and Z—will be performed by three vocalists—George, Helen, and Leslie. The songs will be sung consecutively as solos, and each will be performed exactly once. The following constraints govern the composition of the concert program: Y must be performed earlier than T and earlier than O. P must be performed earlier than Z and later than O. George can perform only X, Y, and Z. Helen can perform only T, P, and X. Leslie can perform only O, P, and X. The vocalist who performs first must be different from the vocalist who performs last.",
    "question": "Each of the following is an acceptable schedule for the performance of the songs, in order from the first to last song performed, EXCEPT:",
    "answer": "B",
    "options": [
      "A) Y, O, P, T, Z, X",
      "B) Y, T, O, P, X, Z",
      "C) Y, X, O, P, Z, T",
      "D) X, Y, O, P, Z, T",
      "E) X, Y, O, T, P, Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([O, P, T, X, Y, Z])\nvocalists = EnumSort([George, Helen, Leslie])\nperforms = Function([songs, vocalists] -> [bool])\n\n# Constraints\nForAll([s:songs], Count([v:vocalists], performs(s, v)) == 1) ::: each will be performed exactly once\nForAll([v:vocalists], Count([s:songs], performs(s, v)) == 3) ::: each vocalist performs exactly three songs\nAnd(performs(Y, George), performs(Y, Helen), performs(Y, Leslie)) ::: Y must be performed earlier than T and earlier than O\nAnd(performs(P, George), performs(P, Helen), performs(P, Leslie)) ::: P must be performed earlier than Z and later than O\nAnd(performs(Z, George), performs(Z, Helen), performs(Z, Leslie)) ::: George can perform only X, Y, and Z\nAnd(performs(T, George), performs(T, Helen), performs(T, Leslie)) ::: Helen can perform only T, P, and X\nAnd(performs(O, George), performs(O, Helen), performs(O, Leslie)) ::: Leslie can perform only O, P, and X\nForAll([s:songs], Implies(performs(s, George), Not(performs(s, Helen)))) ::: The vocalist who performs first must be different from the vocalist who performs last\nForAll([s:songs], Implies(performs(s, Helen), Not(performs(s, Leslie)))) ::: The vocalist who performs first must be different from the vocalist who performs last\nForAll([s:songs], Implies(performs(s, Leslie), Not(performs(s, George)))) ::: The vocalist who performs first must be different from the vocalist who performs last\n\n# Options\nQuestion ::: Each of the following is an acceptable schedule for the performance of the songs, in order from the first to last song performed, EXCEPT:\nis_exception(is_sat(ForAll([s:songs], performs(s, George) == performs(s, Helen) == performs(s, Leslie)))) ::: (A)\nis_"
    ]
  },
  {
    "id": "ar_lsat_199610_3-G_4_24",
    "context": "At an evening concert, a total of six songs—O, P, T, X, Y, and Z—will be performed by three vocalists—George, Helen, and Leslie. The songs will be sung consecutively as solos, and each will be performed exactly once. The following constraints govern the composition of the concert program: Y must be performed earlier than T and earlier than O. P must be performed earlier than Z and later than O. George can perform only X, Y, and Z. Helen can perform only T, P, and X. Leslie can perform only O, P, and X. The vocalist who performs first must be different from the vocalist who performs last.",
    "question": "If Y is performed first, the songs performed second, third, and fourth, respectively, could be",
    "answer": "C",
    "options": [
      "A) T, X, and O",
      "B) T, Z, and O",
      "C) X, O, and P",
      "D) X, P, and Z",
      "E) X, T, and O"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([O, P, T, X, Y, Z])\nvocalists = EnumSort([George, Helen, Leslie])\nperforms = Function([songs, vocalists] -> [bool])\n\n# Constraints\nForAll([s:songs], Count([v:vocalists], performs(s, v)) == 1) ::: each will be performed exactly once\nForAll([v:vocalists], Count([s:songs], performs(s, v)) == 3) ::: each vocalist performs exactly three songs\nAnd(performs(Y, George), performs(Y, Helen), performs(Y, Leslie)) ::: Y must be performed earlier than T and earlier than O\nAnd(performs(P, George), performs(P, Helen), performs(P, Leslie)) ::: P must be performed earlier than Z and later than O\nAnd(performs(X, George), performs(X, Helen), performs(X, Leslie)) ::: George can perform only X, Y, and Z\nAnd(performs(T, George), performs(T, Helen), performs(T, Leslie)) ::: Helen can perform only T, P, and X\nAnd(performs(O, George), performs(O, Helen), performs(O, Leslie)) ::: Leslie can perform only O, P, and X\nForAll([v:vocalists], Implies(performs(v, Y), Not(performs(v, Z)))) ::: The vocalist who performs first must be different from the vocalist who performs last\n\n# Options\nQuestion ::: If Y is performed first, the songs performed second, third, and fourth, respectively, could be\nis_exception(is_sat(And(performs(T, George), performs(X, Helen), performs(O, Leslie)))) ::: A) T, X, and O\nis_exception(is_sat(And(performs(T, George), performs(Z, Helen), performs(O, Leslie)))) ::: B) T, Z, and O\nis_exception(is_sat(And(performs(X, George), performs(O, Helen), performs(P, Leslie)))) ::: C) X, O, and P\nis_exception(is_sat(And(performs(X, George), performs(P,"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_1_1",
    "context": "Seven students—fourth-year students Kim and Lee; third-year students Pat and Robin; and second-year students Sandy, Terry, and Val—and only those seven, are being assigned to rooms of equal size in a dormitory. Each room assigned must have either one, or two, or three students assigned to it, and will accordingly be called either a single, or a double, or a triple. The seven students are assigned to rooms in accordance with the following conditions: No fourth-year student can be assigned to a triple. No second-year student can be assigned to a single. Lee and Robin must not share the same room. Kim and Pat must share the same room.",
    "question": "Which one of the following is a combination of rooms to which the seven students could be assigned?",
    "answer": "C",
    "options": [
      "A) two triples and one single",
      "B) one triple and four singles",
      "C) three doubles and a single",
      "D) two doubles and three singles",
      "E) one double and five singles"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Kim, Lee, Pat, Robin, Sandy, Terry, Val])\nrooms = EnumSort([single, double, triple])\nassigned = Function([students, rooms] -> [bool])\n\n# Constraints\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r) == true) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r) == true) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r) == true) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r) == true) =="
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_1_2",
    "context": "Seven students—fourth-year students Kim and Lee; third-year students Pat and Robin; and second-year students Sandy, Terry, and Val—and only those seven, are being assigned to rooms of equal size in a dormitory. Each room assigned must have either one, or two, or three students assigned to it, and will accordingly be called either a single, or a double, or a triple. The seven students are assigned to rooms in accordance with the following conditions: No fourth-year student can be assigned to a triple. No second-year student can be assigned to a single. Lee and Robin must not share the same room. Kim and Pat must share the same room.",
    "question": "If the room assigned to Robin is a single, which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) There is exactly one double that has a second-year student assigned to it.",
      "B) Lee is assigned to a single.",
      "C) Sandy, Pat and one other student are assigned to a triple together.",
      "D) Exactly three of the rooms assigned to the students are singles.",
      "E) Exactly two of the rooms assigned to the students are doubles."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Kim, Lee, Pat, Robin, Sandy, Terry, Val])\nrooms = EnumSort([single, double, triple])\nassigned = Function([students, rooms] -> [bool])\n\n# Constraints\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([r:rooms], Count([s:students], assigned(s, r)) == 1) ::: and will accordingly be called either a single, or a double, or a triple\nForAll([s:students], Implies(assigned(s, triple), Not(assigned(s, single)))) ::: No fourth-year student can be assigned to a triple\nForAll([s:students], Implies(assigned(s, single), Not(assigned(s, triple)))) ::: No second-year student can be assigned to a single\nForAll([s:students], Implies(assigned(s, double), Not(assigned(s, single)))) ::: No second-year student can be assigned to a single\nForAll([s:students], Implies(assigned(s, double), Not(assigned(s, triple)))) ::: No second-year student can be assigned to a single\nForAll([s:students], Implies(assigned(s, triple), Not(assigned(s, double)))) ::: No fourth-year student can be assigned to a triple\nForAll([s:students], Implies(assigned(s, single), Not(assigned(s, triple)))) ::: No fourth-year student can be assigned to a triple\nForAll([s:students], Implies(assigned(s, double), Not(assigned(s, single)))) ::: No fourth-year student can be assigned to a triple\nForAll([s:students], Implies(assigned(s, triple), Not(assigned(s, double)))) ::: No fourth-year student can be assigned to a triple\nForAll([s:students], Implies(assigned(s, single), Not(assigned(s, double)))) ::: No fourth-year student can be assigned to a triple\nForAll([s:students], Implies(assigned(s, double"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_1_3",
    "context": "Seven students—fourth-year students Kim and Lee; third-year students Pat and Robin; and second-year students Sandy, Terry, and Val—and only those seven, are being assigned to rooms of equal size in a dormitory. Each room assigned must have either one, or two, or three students assigned to it, and will accordingly be called either a single, or a double, or a triple. The seven students are assigned to rooms in accordance with the following conditions: No fourth-year student can be assigned to a triple. No second-year student can be assigned to a single. Lee and Robin must not share the same room. Kim and Pat must share the same room.",
    "question": "Which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Lee is assigned to a single.",
      "B) Pat shares a double with another student.",
      "C) Robin shares a double with another student.",
      "D) Two of the second-year students share a double with each other.",
      "E) Neither of the third-year students is assigned to a single."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Kim, Lee, Pat, Robin, Sandy, Terry, Val])\nrooms = EnumSort([single, double, triple])\nassigned = Function([students, rooms] -> [bool])\n\n# Constraints\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r) == true) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r) == true) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r) == true) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r) == true) =="
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_1_4",
    "context": "Seven students—fourth-year students Kim and Lee; third-year students Pat and Robin; and second-year students Sandy, Terry, and Val—and only those seven, are being assigned to rooms of equal size in a dormitory. Each room assigned must have either one, or two, or three students assigned to it, and will accordingly be called either a single, or a double, or a triple. The seven students are assigned to rooms in accordance with the following conditions: No fourth-year student can be assigned to a triple. No second-year student can be assigned to a single. Lee and Robin must not share the same room. Kim and Pat must share the same room.",
    "question": "If Robin is assigned to a triple, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Lee is assigned to a single.",
      "B) Two second-year students share a double with each other.",
      "C) None of the rooms assigned to the students is a single.",
      "D) Two of the rooms assigned to the students are singles.",
      "E) Three of the rooms assigned to the students are singles."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Kim, Lee, Pat, Robin, Sandy, Terry, Val])\nrooms = EnumSort([single, double, triple])\nassigned = Function([students, rooms] -> [bool])\n\n# Constraints\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([r:rooms], Count([s:students], assigned(s, r)) == 1) ::: and will accordingly be called either a single, or a double, or a triple\nForAll([s:students], Or(assigned(s, single), assigned(s, double), assigned(s, triple))) ::: The seven students are assigned to rooms in accordance with the following conditions\nForAll([s:students], Implies(assigned(s, triple), s!= fourth_year_student)) ::: No fourth-year student can be assigned to a triple\nForAll([s:students], Implies(assigned(s, single), s!= second_year_student)) ::: No second-year student can be assigned to a single\nImplies(assigned(Lee, r), assigned(Robin, r)) ::: Lee and Robin must not share the same room\nassigned(Kim, r) == assigned(Pat, r) ::: Kim and Pat must share the same room\n\n# Options\nQuestion ::: If Robin is assigned to a triple, which one of the following must be true?\nis_valid(ForAll([s:students], Implies(assigned(s, single), s == fourth_year_student))) ::: A) Lee is assigned to a single.\nis_valid(ForAll([s:students], Implies(assigned(s, double), s == second_year_student))) ::: B) Two second-year students share a double with each other.\nis_valid(ForAll([r:rooms], Implies(assigned(r, triple), assigned(r, single)))) ::: C) None of the rooms assigned to the students is a single.\nis_valid(Exists([r:rooms], assigned(r, single))) ::: D) Two of the rooms assigned to the students are singles.\nis_valid(Exists([r:rooms], assigned(r,"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_1_5",
    "context": "Seven students—fourth-year students Kim and Lee; third-year students Pat and Robin; and second-year students Sandy, Terry, and Val—and only those seven, are being assigned to rooms of equal size in a dormitory. Each room assigned must have either one, or two, or three students assigned to it, and will accordingly be called either a single, or a double, or a triple. The seven students are assigned to rooms in accordance with the following conditions: No fourth-year student can be assigned to a triple. No second-year student can be assigned to a single. Lee and Robin must not share the same room. Kim and Pat must share the same room.",
    "question": "If Terry and Val are assigned to different doubles from each other, then it must be true of the students' rooms that exactly",
    "answer": "A",
    "options": [
      "A) one is a single",
      "B) two are singles",
      "C) two are doubles",
      "D) one is a triple",
      "E) two are triples"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Kim, Lee, Pat, Robin, Sandy, Terry, Val])\nrooms = EnumSort([single, double, triple])\nassigned = Function([students, rooms] -> [bool])\n\n# Constraints\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r) == true) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r) == true) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r) == true) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([s:students], Count([r:rooms], assigned(s, r) == true) =="
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_1_6",
    "context": "Seven students—fourth-year students Kim and Lee; third-year students Pat and Robin; and second-year students Sandy, Terry, and Val—and only those seven, are being assigned to rooms of equal size in a dormitory. Each room assigned must have either one, or two, or three students assigned to it, and will accordingly be called either a single, or a double, or a triple. The seven students are assigned to rooms in accordance with the following conditions: No fourth-year student can be assigned to a triple. No second-year student can be assigned to a single. Lee and Robin must not share the same room. Kim and Pat must share the same room.",
    "question": "Which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) The two fourth-year students are assigned to singles.",
      "B) The two fourth-year students share a double with each other.",
      "C) Lee shares a room with a second-year student.",
      "D) Lee shares a room with a third-year student",
      "E) Pat shares a triple with two other students."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Kim, Lee, Pat, Robin, Sandy, Terry, Val])\nrooms = EnumSort([single, double, triple])\nassigned = Function([students, rooms] -> [bool])\n\n# Constraints\nForAll([s:students], Count([r:rooms], assigned(s, r)) == 1) ::: Each room assigned must have either one, or two, or three students assigned to it\nForAll([r:rooms], Count([s:students], assigned(s, r)) == 1) ::: and will accordingly be called either a single, or a double, or a triple\nForAll([s:students], Implies(assigned(s, triple), Not(assigned(s, single)))) ::: No fourth-year student can be assigned to a triple\nForAll([s:students], Implies(assigned(s, single), Not(assigned(s, triple)))) ::: No second-year student can be assigned to a single\nForAll([s:students], Implies(assigned(s, double), Not(assigned(s, triple)))) ::: No second-year student can be assigned to a single\nForAll([s:students], Implies(assigned(s, triple), Not(assigned(s, double)))) ::: No second-year student can be assigned to a single\nForAll([s:students], Implies(assigned(s, double), Not(assigned(s, single)))) ::: No second-year student can be assigned to a single\nForAll([s:students], Implies(assigned(s, single), Not(assigned(s, double)))) ::: No second-year student can be assigned to a single\nForAll([s:students], Implies(assigned(s, triple), Not(assigned(s, single)))) ::: No second-year student can be assigned to a single\nForAll([s:students], Implies(assigned(s, single), Not(assigned(s, triple)))) ::: No second-year student can be assigned to a single\nForAll([s:students], Implies(assigned(s, double), Not(assigned(s, triple)))) ::: No second-year student can be assigned to a single\nForAll([s:students], Implies(assigned(s, triple"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_2_7",
    "context": "A worker will insert colored light bulbs into a billboard equipped with exactly three light sockets, which are labeled lights 1, 2, and 3. The worker has three green bulbs, three purple bulbs, and three yellow bulbs. Selection of bulbs for the sockets is governed by the following conditions: Whenever light 1 is purple, light 2 must be yellow. Whenever light 2 is green, light 1 must be green. Whenever light 3 is either purple or yellow, light 2 must be purple.",
    "question": "Which one of the following could be an accurate list of the colors of light bulbs selected for lights 1, 2, and 3, respectively?",
    "answer": "D",
    "options": [
      "A) green, green, yellow",
      "B) purple, green, green",
      "C) purple, purple, green",
      "D) yellow, purple, green",
      "E) yellow, yellow, yellow"
    ],
    "raw_logic_programs": [
      "# Declarations\nlights = EnumSort([light_1, light_2, light_3])\ncolors = EnumSort([green, purple, yellow])\nbulbs = Function([lights] -> [colors])\n\n# Constraints\nForAll([l:lights], Count([c:colors], bulbs(l) == c) == 1) ::: The worker has three green bulbs, three purple bulbs, and three yellow bulbs\nAnd(bulbs(light_1) == purple, bulbs(light_2) == yellow) ::: Whenever light 1 is purple, light 2 must be yellow\nAnd(bulbs(light_2) == green, bulbs(light_1) == green) ::: Whenever light 2 is green, light 1 must be green\nAnd(bulbs(light_3) == purple, bulbs(light_3) == yellow, bulbs(light_2) == purple) ::: Whenever light 3 is either purple or yellow, light 2 must be purple\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the colors of light bulbs selected for lights 1, 2, and 3, respectively?\nis_sat(And(bulbs(light_1) == green, bulbs(light_2) == green, bulbs(light_3) == yellow)) ::: A) green, green, yellow\nis_sat(And(bulbs(light_1) == purple, bulbs(light_2) == green, bulbs(light_3) == green)) ::: B) purple, green, green\nis_sat(And(bulbs(light_1) == purple, bulbs(light_2) == purple, bulbs(light_3) == green)) ::: C) purple, purple, green\nis_sat(And(bulbs(light_1) == yellow, bulbs(light_2) == purple, bulbs(light_3) == green)) ::: D) yellow, purple, green\nis_sat(And(bulbs(light_1) == yellow, bulbs(light_2) == yellow, bulbs(light_3) == yellow)) ::: E) yellow, yellow, yellow\n------"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_2_8",
    "context": "A worker will insert colored light bulbs into a billboard equipped with exactly three light sockets, which are labeled lights 1, 2, and 3. The worker has three green bulbs, three purple bulbs, and three yellow bulbs. Selection of bulbs for the sockets is governed by the following conditions: Whenever light 1 is purple, light 2 must be yellow. Whenever light 2 is green, light 1 must be green. Whenever light 3 is either purple or yellow, light 2 must be purple.",
    "question": "If light 1 is yellow, then any of the following can be true, EXCEPT:",
    "answer": "A",
    "options": [
      "A) Light 2 is green.",
      "B) Light 2 is purple.",
      "C) Light 3 is green.",
      "D) Light 3 is purple.",
      "E) Light 3 is yellow."
    ],
    "raw_logic_programs": [
      "# Declarations\nlights = EnumSort([1, 2, 3])\ncolors = EnumSort([green, purple, yellow])\nbulbs = Function([lights] -> [colors])\n\n# Constraints\nForAll([l:lights], Count([c:colors], bulbs(l) == c) == 1) ::: each light socket has exactly one bulb\nAnd(bulbs(1) == purple, bulbs(2) == yellow) ::: Whenever light 1 is purple, light 2 must be yellow\nAnd(bulbs(2) == green, bulbs(1) == green) ::: Whenever light 2 is green, light 1 must be green\nAnd(bulbs(3) == purple, bulbs(3) == yellow, bulbs(2) == purple) ::: Whenever light 3 is either purple or yellow, light 2 must be purple\n\n# Options\nQuestion ::: If light 1 is yellow, then any of the following can be true, EXCEPT:\nis_exception(is_sat(bulbs(1) == yellow, bulbs(2) == green)) ::: A) Light 2 is green.\nis_exception(is_sat(bulbs(1) == yellow, bulbs(2) == purple)) ::: B) Light 2 is purple.\nis_exception(is_sat(bulbs(1) == yellow, bulbs(3) == green)) ::: C) Light 3 is green.\nis_exception(is_sat(bulbs(1) == yellow, bulbs(3) == purple)) ::: D) Light 3 is purple.\nis_exception(is_sat(bulbs(1) == yellow, bulbs(3) == yellow)) ::: E) Light 3 is yellow.\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: sales, production, and accounting. The following conditions apply: A and B are assigned to the same department. C is assigned to a different department from A. D is assigned to a different department from B. E is assigned to a different department from C. F is assigned to a different department"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_2_9",
    "context": "A worker will insert colored light bulbs into a billboard equipped with exactly three light sockets, which are labeled lights 1, 2, and 3. The worker has three green bulbs, three purple bulbs, and three yellow bulbs. Selection of bulbs for the sockets is governed by the following conditions: Whenever light 1 is purple, light 2 must be yellow. Whenever light 2 is green, light 1 must be green. Whenever light 3 is either purple or yellow, light 2 must be purple.",
    "question": "There is exactly one possible color sequence of the three lights if which one of the following is true?",
    "answer": "A",
    "options": [
      "A) Light 1 is purple.",
      "B) Light 2 is purple.",
      "C) Light 2 is yellow.",
      "D) Light 3 is purple.",
      "E) Light 3 is yellow."
    ],
    "raw_logic_programs": [
      "# Declarations\nlights = EnumSort([light_1, light_2, light_3])\ncolors = EnumSort([green, purple, yellow])\nbulbs = Function([lights] -> [colors])\n\n# Constraints\nForAll([l:lights], Count([c:colors], bulbs(l) == c) == 1) ::: exactly three green bulbs, three purple bulbs, and three yellow bulbs\nAnd(bulbs(light_1) == purple, bulbs(light_2) == yellow) ::: Whenever light 1 is purple, light 2 must be yellow\nAnd(bulbs(light_2) == green, bulbs(light_1) == green) ::: Whenever light 2 is green, light 1 must be green\nAnd(bulbs(light_3) == purple, bulbs(light_3) == yellow, bulbs(light_2) == purple) ::: Whenever light 3 is either purple or yellow, light 2 must be purple\n\n# Options\nQuestion ::: There is exactly one possible color sequence of the three lights if which one of the following is true?\nis_sat(ForAll([l:lights], Count([c:colors], bulbs(l) == c) == 1)) ::: A) Light 1 is purple.\nis_sat(ForAll([l:lights], Count([c:colors], bulbs(l) == c) == 1)) ::: B) Light 2 is purple.\nis_sat(ForAll([l:lights], Count([c:colors], bulbs(l) == c) == 1)) ::: C) Light 2 is yellow.\nis_sat(ForAll([l:lights], Count([c:colors], bulbs(l) == c) == 1)) ::: D) Light 3 is purple.\nis_sat(ForAll([l:lights], Count([c:colors], bulbs(l) == c) == 1)) ::: E) Light 3 is yellow.\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: sales, production,"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_2_10",
    "context": "A worker will insert colored light bulbs into a billboard equipped with exactly three light sockets, which are labeled lights 1, 2, and 3. The worker has three green bulbs, three purple bulbs, and three yellow bulbs. Selection of bulbs for the sockets is governed by the following conditions: Whenever light 1 is purple, light 2 must be yellow. Whenever light 2 is green, light 1 must be green. Whenever light 3 is either purple or yellow, light 2 must be purple.",
    "question": "If no green bulbs are selected, there are exactly how many possible different color sequences of the three lights?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nlights = EnumSort([1, 2, 3])\ncolors = EnumSort([green, purple, yellow])\nbulbs = Function([lights] -> [colors])\n\n# Constraints\nForAll([l:lights], Count([c:colors], bulbs(l) == c) == 1) ::: exactly three green bulbs, three purple bulbs, and three yellow bulbs\nAnd(bulbs(1) == purple, bulbs(2) == yellow) ::: Whenever light 1 is purple, light 2 must be yellow\nAnd(bulbs(2) == green, bulbs(1) == green) ::: Whenever light 2 is green, light 1 must be green\nAnd(bulbs(3) == purple, bulbs(3) == yellow, bulbs(2) == purple) ::: Whenever light 3 is either purple or yellow, light 2 must be purple\n\n# Options\nQuestion ::: If no green bulbs are selected, there are exactly how many possible different color sequences of the three lights?\nis_sat(ForAll([l:lights], bulbs(l)!= green)) ::: A) one\nis_sat(ForAll([l:lights], bulbs(l)!= green) && Count([l:lights], bulbs(l) == purple) == 2) ::: B) two\nis_sat(ForAll([l:lights], bulbs(l)!= green) && Count([l:lights], bulbs(l) == purple) == 3) ::: C) three\nis_sat(ForAll([l:lights], bulbs(l)!= green) && Count([l:lights], bulbs(l) == purple) == 4) ::: D) four\nis_sat(ForAll([l:lights], bulbs(l)!= green) && Count([l:lights], bulbs(l) == purple) == 5) ::: E) five\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: sales, production, and accounting. The following conditions apply: A"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_2_11",
    "context": "A worker will insert colored light bulbs into a billboard equipped with exactly three light sockets, which are labeled lights 1, 2, and 3. The worker has three green bulbs, three purple bulbs, and three yellow bulbs. Selection of bulbs for the sockets is governed by the following conditions: Whenever light 1 is purple, light 2 must be yellow. Whenever light 2 is green, light 1 must be green. Whenever light 3 is either purple or yellow, light 2 must be purple.",
    "question": "If no two lights are assigned light bulbs that are the same color as each other, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Light 1 is green, and light 2 is purple.",
      "B) Light 1 is green, and light 2 is yellow.",
      "C) Light 1 is purple, and light 3 is yellow.",
      "D) Light 1 is yellow, and light 2 is green.",
      "E) Light 1 is yellow, and light 3 is purple."
    ],
    "raw_logic_programs": [
      "# Declarations\nlights = EnumSort([light_1, light_2, light_3])\ncolors = EnumSort([green, purple, yellow])\nbulbs = Function([lights] -> [colors])\n\n# Constraints\nForAll([l:lights], Count([c:colors], bulbs(l) == c) == 1) ::: Selection of bulbs for the sockets is governed by the following conditions\nAnd(bulbs(light_1) == purple, bulbs(light_2) == yellow) ::: Whenever light 1 is purple, light 2 must be yellow\nAnd(bulbs(light_2) == green, bulbs(light_1) == green) ::: Whenever light 2 is green, light 1 must be green\nAnd(bulbs(light_3) == purple, bulbs(light_3) == yellow, bulbs(light_2) == purple) ::: Whenever light 3 is either purple or yellow, light 2 must be purple\n\n# Options\nQuestion ::: If no two lights are assigned light bulbs that are the same color as each other, then which one of the following could be true?\nis_valid(And(bulbs(light_1) == green, bulbs(light_2) == purple))) ::: (A)\nis_valid(And(bulbs(light_1) == green, bulbs(light_2) == yellow))) ::: (B)\nis_valid(And(bulbs(light_1) == purple, bulbs(light_3) == yellow))) ::: (C)\nis_valid(And(bulbs(light_1) == yellow, bulbs(light_2) == green))) ::: (D)\nis_valid(And(bulbs(light_1) == yellow, bulbs(light_3) == purple))) ::: (E)\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: sales, accounting, and production. The following conditions apply: A and B are assigned to the same department. C is assigned to a different department from A. D is assigned to a different department from E. E is assigned to a"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_3_12",
    "context": "An attorney is scheduling interviews with witnesses for a given week, Monday through Saturday. Two full consecutive days of the week must be reserved for interviewing hostile witnesses. In addition, nonhostile witnesses Q, R, U, X, Y, and Z will each be interviewed exactly once for a full morning or afternoon. The only witnesses who will be interviewed simultaneously with each other are Q and R. The following conditions apply: X must be interviewed on Thursday morning. Q must be interviewed at some time before X. U must be interviewed at some time before R. Z must be interviewed at some time after X and at some time after Y.",
    "question": "Which one of the following is a sequence, from first to last, in which the nonhostile witnesses could be interviewed?",
    "answer": "D",
    "options": [
      "A) Q with R, U, X, Y, Z",
      "B) Q, U, R, X with Y, Z",
      "C) U, X, Q, with R, X, Z",
      "D) U, Y, Q with R, X, Z",
      "E) X, Q with U, Z, R, Y"
    ],
    "raw_logic_programs": [
      "# Declarations\nwitnesses = EnumSort([Q, R, U, X, Y, Z])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ntimes = EnumSort([morning, afternoon])\ninterviews = Function([witnesses, days, times] -> [bool])\n\n# Constraints\nForAll([w:witnesses], Count([d:days, t:times], interviews(w, d, t)) == 1) ::: nonhostile witnesses will each be interviewed exactly once for a full morning or afternoon\nForAll([d:days], Count([w:witnesses], interviews(w, d, morning)) + Count([w:witnesses], interviews(w, d, afternoon)) == 1) ::: each day is reserved for interviewing hostile witnesses\ninterviews(X, Thursday, morning) ::: X must be interviewed on Thursday morning\ninterviews(Q, d, t) < interviews(X, Thursday, morning) ::: Q must be interviewed at some time before X\ninterviews(U, d, t) < interviews(R, d, t) ::: U must be interviewed at some time before R\ninterviews(Z, d, t) > interviews(X, Thursday, morning) ::: Z must be interviewed at some time after X\ninterviews(Z, d, t) > interviews(Y, d, t) ::: Z must be interviewed at some time after Y\n\n# Options\nQuestion ::: Which one of the following is a sequence, from first to last, in which the nonhostile witnesses could be interviewed?\nis_sat(ForAll([w:witnesses], interviews(w, d, t) == interviews(w, d, t) for all d, t))) ::: (A)\nis_sat(ForAll([w:witnesses], interviews(w, d, t) == interviews(w, d, t) for all d, t))) ::: (B)\nis_sat(ForAll([w:witnesses], interviews(w, d, t) == interviews(w, d, t) for all"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_3_13",
    "context": "An attorney is scheduling interviews with witnesses for a given week, Monday through Saturday. Two full consecutive days of the week must be reserved for interviewing hostile witnesses. In addition, nonhostile witnesses Q, R, U, X, Y, and Z will each be interviewed exactly once for a full morning or afternoon. The only witnesses who will be interviewed simultaneously with each other are Q and R. The following conditions apply: X must be interviewed on Thursday morning. Q must be interviewed at some time before X. U must be interviewed at some time before R. Z must be interviewed at some time after X and at some time after Y.",
    "question": "Which one of the following is acceptable as a complete schedule of witnesses for Tuesday morning, Tuesday afternoon, and Wednesday morning, respectively?",
    "answer": "D",
    "options": [
      "A) Q, R, none",
      "B) R, none, Y",
      "C) U, none, X",
      "D) U, Y, none",
      "E) Y, Z, none"
    ],
    "raw_logic_programs": [
      "# Declarations\nwitnesses = EnumSort([Q, R, U, X, Y, Z])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ntimes = EnumSort([morning, afternoon])\ninterviews = Function([witnesses, days, times] -> [bool])\n\n# Constraints\nForAll([w:witnesses], Count([d:days, t:times], interviews(w, d, t)) == 1) ::: nonhostile witnesses Q, R, U, X, Y, and Z will each be interviewed exactly once for a full morning or afternoon\nForAll([d:days], Count([w:witnesses], interviews(w, d, morning)) + Count([w:witnesses], interviews(w, d, afternoon)) == 2) ::: Two full consecutive days of the week must be reserved for interviewing hostile witnesses\nForAll([w:witnesses], Implies(interviews(w, Thursday, morning), interviews(X, Thursday, morning))) ::: X must be interviewed on Thursday morning\nForAll([w:witnesses], Implies(interviews(w, Thursday, morning), Not(interviews(w, Thursday, afternoon)))) ::: X must be interviewed on Thursday morning\nForAll([w:witnesses], Implies(interviews(w, Thursday, afternoon), Not(interviews(w, Thursday, morning)))) ::: X must be interviewed on Thursday morning\nForAll([w:witnesses], Implies(interviews(w, Thursday, morning), interviews(X, Thursday, morning))) ::: X must be interviewed on Thursday morning\nForAll([w:witnesses], Implies(interviews(w, Thursday, afternoon), Not(interviews(w, Thursday, morning)))) ::: X must be interviewed on Thursday morning\nForAll([w:witnesses], Implies(interviews(w, Thursday, morning), interviews(X, Thursday, morning))) ::: X must be interviewed on Thursday morning\nForAll([w:wit"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_3_14",
    "context": "An attorney is scheduling interviews with witnesses for a given week, Monday through Saturday. Two full consecutive days of the week must be reserved for interviewing hostile witnesses. In addition, nonhostile witnesses Q, R, U, X, Y, and Z will each be interviewed exactly once for a full morning or afternoon. The only witnesses who will be interviewed simultaneously with each other are Q and R. The following conditions apply: X must be interviewed on Thursday morning. Q must be interviewed at some time before X. U must be interviewed at some time before R. Z must be interviewed at some time after X and at some time after Y.",
    "question": "If Y is interviewed at some time after X, which one of the following must be a day reserved for interviewing hostile witnesses?",
    "answer": "B",
    "options": [
      "A) Monday",
      "B) Tuesday",
      "C) Wednesday",
      "D) Friday",
      "E) Saturday"
    ],
    "raw_logic_programs": [
      "# Declarations\nwitnesses = EnumSort([Q, R, U, X, Y, Z])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ninterviewed = Function([witnesses, days] -> [bool])\n\n# Constraints\nForAll([w:witnesses], Count([d:days], interviewed(w, d)) == 1) ::: nonhostile witnesses Q, R, U, X, Y, and Z will each be interviewed exactly once for a full morning or afternoon\nAnd(interviewed(Q, d), interviewed(R, d)) ::: the only witnesses who will be interviewed simultaneously with each other are Q and R\ninterviewed(X, Thursday) ::: X must be interviewed on Thursday morning\ninterviewed(Q, d) < interviewed(X, d) ::: Q must be interviewed at some time before X\ninterviewed(U, d) < interviewed(R, d) ::: U must be interviewed at some time before R\ninterviewed(Z, d) > interviewed(X, d) ::: Z must be interviewed at some time after X\ninterviewed(Z, d) > interviewed(Y, d) ::: Z must be interviewed at some time after Y\n\n# Options\nQuestion ::: If Y is interviewed at some time after X, which one of the following must be a day reserved for interviewing hostile witnesses?\nis_exception(is_sat(interviewed(Q, Monday))) ::: (A)\nis_exception(is_sat(interviewed(Q, Tuesday))) ::: (B)\nis_exception(is_sat(interviewed(Q, Wednesday))) ::: (C)\nis_exception(is_sat(interviewed(Q, Friday))) ::: (D)\nis_exception(is_sat(interviewed(Q, Saturday))) ::: (E)\n------\nProblem:\nA company has six employees: A, B, C, D, E, and F. Each employee is assigned to work in one of the following three departments: accounting, marketing, or sales. The following conditions apply: A and B"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_3_15",
    "context": "An attorney is scheduling interviews with witnesses for a given week, Monday through Saturday. Two full consecutive days of the week must be reserved for interviewing hostile witnesses. In addition, nonhostile witnesses Q, R, U, X, Y, and Z will each be interviewed exactly once for a full morning or afternoon. The only witnesses who will be interviewed simultaneously with each other are Q and R. The following conditions apply: X must be interviewed on Thursday morning. Q must be interviewed at some time before X. U must be interviewed at some time before R. Z must be interviewed at some time after X and at some time after Y.",
    "question": "If R is interviewed at some time after Y, which one of the following must be a day reserved for interviewing hostile witnesses?",
    "answer": "E",
    "options": [
      "A) Monday",
      "B) Tuesday",
      "C) Wednesday",
      "D) Thursday",
      "E) Friday"
    ],
    "raw_logic_programs": [
      "# Declarations\nwitnesses = EnumSort([Q, R, U, X, Y, Z])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ninterviewed = Function([witnesses, days] -> [bool])\n\n# Constraints\nForAll([w:witnesses], Count([d:days], interviewed(w, d)) == 1) ::: nonhostile witnesses Q, R, U, X, Y, and Z will each be interviewed exactly once for a full morning or afternoon\nAnd(interviewed(Q, d), interviewed(R, d)) ::: the only witnesses who will be interviewed simultaneously with each other are Q and R\ninterviewed(X, Thursday) ::: X must be interviewed on Thursday morning\ninterviewed(Q, d) < interviewed(X, d) ::: Q must be interviewed at some time before X\ninterviewed(U, d) < interviewed(R, d) ::: U must be interviewed at some time before R\ninterviewed(Z, d) > interviewed(X, d) ::: Z must be interviewed at some time after X\ninterviewed(Z, d) > interviewed(Y, d) ::: Z must be interviewed at some time after Y\n\n# Options\nQuestion ::: If R is interviewed at some time after Y, which one of the following must be a day reserved for interviewing hostile witnesses?\nis_exception(is_sat(interviewed(R, Monday))) ::: (A)\nis_exception(is_sat(interviewed(R, Tuesday))) ::: (B)\nis_exception(is_sat(interviewed(R, Wednesday))) ::: (C)\nis_exception(is_sat(interviewed(R, Thursday))) ::: (D)\nis_exception(is_sat(interviewed(R, Friday))) ::: (E)\n------\nProblem:\nA company has six employees: A, B, C, D, E, and F. Each employee is assigned to work in one of the following three departments: accounting, marketing, or sales. The following conditions apply: A"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_3_16",
    "context": "An attorney is scheduling interviews with witnesses for a given week, Monday through Saturday. Two full consecutive days of the week must be reserved for interviewing hostile witnesses. In addition, nonhostile witnesses Q, R, U, X, Y, and Z will each be interviewed exactly once for a full morning or afternoon. The only witnesses who will be interviewed simultaneously with each other are Q and R. The following conditions apply: X must be interviewed on Thursday morning. Q must be interviewed at some time before X. U must be interviewed at some time before R. Z must be interviewed at some time after X and at some time after Y.",
    "question": "If on Wednesday afternoon and on Monday the attorney conducts no interviews, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Q is interviewed on the same day as U.",
      "B) R is interviewed on the same day as Y.",
      "C) Y is interviewed at some time before U.",
      "D) Y is interviewed at some time before Wednesday.",
      "E) Z is interviewed at some time before Friday."
    ],
    "raw_logic_programs": [
      "# Declarations\nwitnesses = EnumSort([Q, R, U, X, Y, Z])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ntimes = EnumSort([morning, afternoon])\ninterviews = Function([witnesses, days, times] -> [bool])\n\n# Constraints\nForAll([w:witnesses], Count([d:days], interviews(w, d, morning)) + Count([d:days], interviews(w, d, afternoon)) == 1) ::: nonhostile witnesses Q, R, U, X, Y, and Z will each be interviewed exactly once for a full morning or afternoon\nAnd(interviews(Q, d, t), interviews(R, d, t)) ::: the only witnesses who will be interviewed simultaneously with each other are Q and R\ninterviews(X, Thursday, morning) ::: X must be interviewed on Thursday morning\ninterviews(Q, d, t) < interviews(X, Thursday, morning) ::: Q must be interviewed at some time before X\ninterviews(U, d, t) < interviews(R, d, t) ::: U must be interviewed at some time before R\ninterviews(Z, d, t) > interviews(X, Thursday, morning) ::: Z must be interviewed at some time after X\ninterviews(Z, d, t) > interviews(Y, d, t) ::: Z must be interviewed at some time after Y\n\n# Options\nQuestion ::: If on Wednesday afternoon and on Monday the attorney conducts no interviews, which one of the following must be true?\nis_valid(Exists([d:days], And(interviews(Q, d, t), interviews(U, d, t)))) ::: (A)\nis_valid(Exists([d:days], And(interviews(R, d, t), interviews(Y, d, t)))) ::: (B)\nis_valid(Exists([d:days], And(interviews(Y, d, t), interviews(U, d, t)))) ::: (C)\nis_valid(Exists([d:days], And(interviews(Y, d"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_3_17",
    "context": "An attorney is scheduling interviews with witnesses for a given week, Monday through Saturday. Two full consecutive days of the week must be reserved for interviewing hostile witnesses. In addition, nonhostile witnesses Q, R, U, X, Y, and Z will each be interviewed exactly once for a full morning or afternoon. The only witnesses who will be interviewed simultaneously with each other are Q and R. The following conditions apply: X must be interviewed on Thursday morning. Q must be interviewed at some time before X. U must be interviewed at some time before R. Z must be interviewed at some time after X and at some time after Y.",
    "question": "If Z is interviewed on Saturday morning, which one of the following can be true?",
    "answer": "A",
    "options": [
      "A) Wednesday is a day reserved for interviewing hostile witnesses.",
      "B) Friday is a day reserved for interviewing hostile witnesses.",
      "C) R is interviewed on Thursday.",
      "D) U is interviewed on Tuesday.",
      "E) Y is interviewed at some time before Thursday."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_4_18",
    "context": "During a four-week period, each of seven previously unadvertised products—G, H, J, K, L, M, and O—will be advertised. A different pair of these products will be advertised each week. Exactly one of the products will be a member of two of these four pairs. The following constraints must be observed: J is not advertised during a given week unless H is advertised during the immediately preceding week. The product that is advertised during two of the weeks is advertised during week 4 but is not advertised during week 3. G is not advertised during a given week unless either J or else O is also advertised that week. K is advertised during one of the first two weeks. O is one of the products advertised during week 3.",
    "question": "Which one of the following could be the schedule of advertisements?",
    "answer": "B",
    "options": [
      "A) week 1: G, J; week 2: K, L; week 3: O, M; week 4: H, L",
      "B) week l: H, K; week 2: J, G; week 3: O, L; week 4: M, K",
      "C) week 1: H, K; week 2: J, M; week 3: O, L; week 4: G, M",
      "D) week 1: H, L; week 2: J, M; week 3: O, G; week 4: K, L",
      "E) week 1: K, M; week 2: H, J; week 3: O, G; week 4: L, M"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_4_19",
    "context": "During a four-week period, each of seven previously unadvertised products—G, H, J, K, L, M, and O—will be advertised. A different pair of these products will be advertised each week. Exactly one of the products will be a member of two of these four pairs. The following constraints must be observed: J is not advertised during a given week unless H is advertised during the immediately preceding week. The product that is advertised during two of the weeks is advertised during week 4 but is not advertised during week 3. G is not advertised during a given week unless either J or else O is also advertised that week. K is advertised during one of the first two weeks. O is one of the products advertised during week 3.",
    "question": "Which one of the following is a pair of products that CANNOT be advertised during the same week as each other?",
    "answer": "C",
    "options": [
      "A) H and K",
      "B) H and M",
      "C) J and O",
      "D) K and L",
      "E) L and M"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_4_20",
    "context": "During a four-week period, each of seven previously unadvertised products—G, H, J, K, L, M, and O—will be advertised. A different pair of these products will be advertised each week. Exactly one of the products will be a member of two of these four pairs. The following constraints must be observed: J is not advertised during a given week unless H is advertised during the immediately preceding week. The product that is advertised during two of the weeks is advertised during week 4 but is not advertised during week 3. G is not advertised during a given week unless either J or else O is also advertised that week. K is advertised during one of the first two weeks. O is one of the products advertised during week 3.",
    "question": "Which one of the following must be advertised during week 2?",
    "answer": "B",
    "options": [
      "A) G",
      "B) J",
      "C) K",
      "D) L",
      "E) M"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_4_21",
    "context": "During a four-week period, each of seven previously unadvertised products—G, H, J, K, L, M, and O—will be advertised. A different pair of these products will be advertised each week. Exactly one of the products will be a member of two of these four pairs. The following constraints must be observed: J is not advertised during a given week unless H is advertised during the immediately preceding week. The product that is advertised during two of the weeks is advertised during week 4 but is not advertised during week 3. G is not advertised during a given week unless either J or else O is also advertised that week. K is advertised during one of the first two weeks. O is one of the products advertised during week 3.",
    "question": "Which one of the following CANNOT be the product that is advertised during two of the weeks?",
    "answer": "A",
    "options": [
      "A) G",
      "B) H",
      "C) K",
      "D) L",
      "E) M"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_4_22",
    "context": "During a four-week period, each of seven previously unadvertised products—G, H, J, K, L, M, and O—will be advertised. A different pair of these products will be advertised each week. Exactly one of the products will be a member of two of these four pairs. The following constraints must be observed: J is not advertised during a given week unless H is advertised during the immediately preceding week. The product that is advertised during two of the weeks is advertised during week 4 but is not advertised during week 3. G is not advertised during a given week unless either J or else O is also advertised that week. K is advertised during one of the first two weeks. O is one of the products advertised during week 3.",
    "question": "If L is the product that is advertised during two of the weeks, which one of the following is a product that must be advertised during one of the weeks in which L is advertised?",
    "answer": "E",
    "options": [
      "A) G",
      "B) H",
      "C) J",
      "D) K",
      "E) M"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_4_23",
    "context": "During a four-week period, each of seven previously unadvertised products—G, H, J, K, L, M, and O—will be advertised. A different pair of these products will be advertised each week. Exactly one of the products will be a member of two of these four pairs. The following constraints must be observed: J is not advertised during a given week unless H is advertised during the immediately preceding week. The product that is advertised during two of the weeks is advertised during week 4 but is not advertised during week 3. G is not advertised during a given week unless either J or else O is also advertised that week. K is advertised during one of the first two weeks. O is one of the products advertised during week 3.",
    "question": "Which one of the following is a product that could be advertised in any of the four weeks?",
    "answer": "D",
    "options": [
      "A) H",
      "B) J",
      "C) K",
      "D) L",
      "E) O"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199612_1-G_4_24",
    "context": "During a four-week period, each of seven previously unadvertised products—G, H, J, K, L, M, and O—will be advertised. A different pair of these products will be advertised each week. Exactly one of the products will be a member of two of these four pairs. The following constraints must be observed: J is not advertised during a given week unless H is advertised during the immediately preceding week. The product that is advertised during two of the weeks is advertised during week 4 but is not advertised during week 3. G is not advertised during a given week unless either J or else O is also advertised that week. K is advertised during one of the first two weeks. O is one of the products advertised during week 3.",
    "question": "Which one of the following is a pair of products that could be advertised during the same week as each other?",
    "answer": "E",
    "options": [
      "A) G and H",
      "B) H and J",
      "C) H and O",
      "D) K and O",
      "E) M and O"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_1_1",
    "context": "An upholsterer will do seven jobs—N, O, P, S, T, U, and X—during a given week on Monday through Friday. Each job is done on exactly one of the days, and no two jobs are done concurrently. Each job takes either one half day or an entire day. The following conditions apply: N is done on the same day as S. X is done on Wednesday, and T is done on Friday. S is done earlier than the day on which P is done. U and X are the only jobs that must take an entire day each.",
    "question": "Which one of the following is an acceptable schedule for the seven jobs? Mon. Tues. Wed. Thurs. Fri.",
    "answer": "E",
    "options": [
      "A) N, S P X O, U T",
      "B) O N, S X P U",
      "C) P U X N, S O, T",
      "D) S N, P X U O, T",
      "E) U N, S X O P, T"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_1_2",
    "context": "An upholsterer will do seven jobs—N, O, P, S, T, U, and X—during a given week on Monday through Friday. Each job is done on exactly one of the days, and no two jobs are done concurrently. Each job takes either one half day or an entire day. The following conditions apply: N is done on the same day as S. X is done on Wednesday, and T is done on Friday. S is done earlier than the day on which P is done. U and X are the only jobs that must take an entire day each.",
    "question": "Which one of the following is a complete and accurate list of those jobs each of which CANNOT be done on Tuesday?",
    "answer": "B",
    "options": [
      "A) P, U",
      "B) T, X",
      "C) N, P, S",
      "D) N, S, X",
      "E) T, U, X"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_1_3",
    "context": "An upholsterer will do seven jobs—N, O, P, S, T, U, and X—during a given week on Monday through Friday. Each job is done on exactly one of the days, and no two jobs are done concurrently. Each job takes either one half day or an entire day. The following conditions apply: N is done on the same day as S. X is done on Wednesday, and T is done on Friday. S is done earlier than the day on which P is done. U and X are the only jobs that must take an entire day each.",
    "question": "If O is done on Thursday, N could be done on",
    "answer": "C",
    "options": [
      "A) Monday, but on no other day",
      "B) Thursday, but on no other day",
      "C) Monday or else on Tuesday, but on no other day",
      "D) Tuesday or else on Wednesday, but on no other day",
      "E) Wednesday or else on Thursday, but on no other day"
    ],
    "raw_logic_programs": [
      "# Declares\njobs = EnumSort([N, O, P, S, T, U, X])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ndone = Function([jobs, days] -> [bool])\n\n# Constraints\nForAll([j:jobs], Count([d:days], done(j, d)) == 1) ::: Each job is done on exactly one of the days\nForAll([j:jobs], Count([d:days], done(j, d)) == 1) ::: no two jobs are done concurrently\nAnd(done(N, d), done(S, d)) ::: N is done on the same day as S\ndone(X, Wednesday) ::: X is done on Wednesday\ndone(T, Friday) ::: T is done on Friday\ndone(S, d1), done(P, d2) ::: S is done earlier than the day on which P is done\nForAll([j:jobs], Implies(done(j, d), Count([d:days], done(j, d)) == 1)) ::: U and X are the only jobs that must take an entire day each\n\n# Options\nQuestion ::: If O is done on Thursday, N could be done on\nis_sat(And(done(N, Monday), Not(done(N, d)))) ::: (A)\nis_sat(And(done(N, Thursday), Not(done(N, d)))) ::: (B)\nis_sat(And(done(N, Monday), done(N, Tuesday), Not(done(N, d)))) ::: (C)\nis_sat(And(done(N, Tuesday), done(N, Wednesday), Not(done(N, d)))) ::: (D)\nis_sat(And(done(N, Wednesday), done(N, Thursday), Not(done(N, d)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_1_4",
    "context": "An upholsterer will do seven jobs—N, O, P, S, T, U, and X—during a given week on Monday through Friday. Each job is done on exactly one of the days, and no two jobs are done concurrently. Each job takes either one half day or an entire day. The following conditions apply: N is done on the same day as S. X is done on Wednesday, and T is done on Friday. S is done earlier than the day on which P is done. U and X are the only jobs that must take an entire day each.",
    "question": "Which one of the following must be true if the upholsterer does two jobs on Thursday and two jobs on Friday?",
    "answer": "C",
    "options": [
      "A) N is done on Monday.",
      "B) O is done on Tuesday.",
      "C) P is done on Friday.",
      "D) O is done on the same day as P.",
      "E) O is done on the same day as T."
    ],
    "raw_logic_programs": [
      "# Declares\njobs = EnumSort([N, O, P, S, T, U, X])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ndone = Function([jobs, days] -> [bool])\nForAll([j:jobs], And(1 <= done(j, Monday), done(j, Monday) <= 1))\nForAll([j:jobs], And(1 <= done(j, Tuesday), done(j, Tuesday) <= 1))\nForAll([j:jobs], And(1 <= done(j, Wednesday), done(j, Wednesday) <= 1))\nForAll([j:jobs], And(1 <= done(j, Thursday), done(j, Thursday) <= 1))\nForAll([j:jobs], And(1 <= done(j, Friday), done(j, Friday) <= 1))\n\n# Constraints\nForAll([j:jobs], Count([d:days], done(j, d)) == 1) ::: Each job is done on exactly one of the days\nForAll([j1:jobs, j2:jobs], Implies(j1!= j2, And(done(j1, Monday), done(j2, Monday)) == 0)) ::: no two jobs are done concurrently\nAnd(done(N, Monday), done(S, Monday)) ::: N is done on the same day as S\ndone(X, Wednesday) ::: X is done on Wednesday\ndone(T, Friday) ::: T is done on Friday\nAnd(done(S, Monday), done(P, Monday)) ::: S is done earlier than the day on which P is done\nAnd(done(U, Monday), done(X, Monday)) ::: U and X are the only jobs that must take an entire day each\n\n# Options\nQuestion ::: Which one of the following must be true if the upholsterer does two jobs on Thursday and"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_1_5",
    "context": "An upholsterer will do seven jobs—N, O, P, S, T, U, and X—during a given week on Monday through Friday. Each job is done on exactly one of the days, and no two jobs are done concurrently. Each job takes either one half day or an entire day. The following conditions apply: N is done on the same day as S. X is done on Wednesday, and T is done on Friday. S is done earlier than the day on which P is done. U and X are the only jobs that must take an entire day each.",
    "question": "If P is not done on Friday, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) N is done on Monday or else on Thursday.",
      "B) O is done on Wednesday or else on Thursday.",
      "C) S is done on Monday or else on Thursday.",
      "D) P is done on the same day as O.",
      "E) O is done on the same day as either P or T."
    ],
    "raw_logic_programs": [
      "# Declares\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\njobs = EnumSort([N, O, P, S, T, U, X])\ndone = Function([jobs, days] -> [bool])\n\n# Constraints\nForAll([j:jobs], Count([d:days], done(j, d)) == 1) ::: Each job is done on exactly one of the days\nForAll([j:jobs], Count([d:days], done(j, d)) == 1) ::: no two jobs are done concurrently\nAnd(done(N, d), done(S, d)) ::: N is done on the same day as S\ndone(X, Wednesday) ::: X is done on Wednesday\ndone(T, Friday) ::: T is done on Friday\ndone(S, d) < done(P, d) ::: S is done earlier than the day on which P is done\nCount([j:jobs], done(j, d) == 1) == 2 ::: U and X are the only jobs that must take an entire day each\n\n# Options\nQuestion ::: If P is not done on Friday, which one of the following must be true?\nis_sat(ForAll([d:days], Implies(Not(done(P, d)), done(N, d) == d == Monday or done(N, d) == d == Thursday))) ::: (A)\nis_sat(ForAll([d:days], Implies(Not(done(P, d)), done(O, d) == d == Wednesday or done(O, d) == d == Thursday))) ::: (B)\nis_sat(ForAll([d:days], Implies(Not(done(P, d)), done(S, d) == d == Monday or done(S, d) == d == Thursday))) ::: (C)\nis_sat(ForAll([d:days], Implies(Not"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_1_6",
    "context": "An upholsterer will do seven jobs—N, O, P, S, T, U, and X—during a given week on Monday through Friday. Each job is done on exactly one of the days, and no two jobs are done concurrently. Each job takes either one half day or an entire day. The following conditions apply: N is done on the same day as S. X is done on Wednesday, and T is done on Friday. S is done earlier than the day on which P is done. U and X are the only jobs that must take an entire day each.",
    "question": "If O is done on Monday, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) N is done on Tuesday.",
      "B) P is done on Thursday.",
      "C) P is done on Friday.",
      "D) S is done on Thursday.",
      "E) U is done on Friday."
    ],
    "raw_logic_programs": [
      "# Declarations\njobs = EnumSort([N, O, P, S, T, U, X])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ndone = Function([jobs, days] -> [bool])\nForAll([j:jobs], And(1 <= done(j, Monday), done(j, Monday) <= 1))\nForAll([j:jobs], And(1 <= done(j, Tuesday), done(j, Tuesday) <= 1))\nForAll([j:jobs], And(1 <= done(j, Wednesday), done(j, Wednesday) <= 1))\nForAll([j:jobs], And(1 <= done(j, Thursday), done(j, Thursday) <= 1))\nForAll([j:jobs], And(1 <= done(j, Friday), done(j, Friday) <= 1))\n\n# Constraints\nForAll([j:jobs], Count([d:days], done(j, d)) == 1) ::: Each job is done on exactly one of the days\nForAll([j:jobs], Count([d:days], done(j, d) == 1) == 1) ::: no two jobs are done concurrently\nAnd(done(N, d), done(S, d)) ::: N is done on the same day as S\ndone(X, Wednesday) ::: X is done on Wednesday\ndone(T, Friday) ::: T is done on Friday\nAnd(done(S, d), done(P, d)) ::: S is done earlier than the day on which P is done\nAnd(done(U, d), done(X, d)) ::: U and X are the only jobs that must take an entire day each\n\n# Options\nQuestion ::: If O is done on Monday, which one of the following must be true?\nis_valid(And(done(N, Tuesday), done(S, Tuesday)))"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_2_7",
    "context": "Seven persons—G, H, I, K, L, M, and P—are going rock-climbing together. One person will be the organizer and not a member of any team. The remaining six will form three climbing teams, each consisting of two persons. No person can be on more than one team. The following conditions also apply: M and P cannot be on the same team as each other. If K is on a team, M must also be on that team. If G is on a team, either H or I must also be on that team. If H is on a team, K must be the organizer.",
    "question": "Which one of the following can be a list of the members of the three teams?",
    "answer": "C",
    "options": [
      "A) Team 1: G, H; Team 2: I, L; Team 3: M, P",
      "B) Team 1: G, H; Team 2: L, P; Team 3: K, M",
      "C) Team 1: G, I; Team 2: H, M; Team 3: L, P",
      "D) Team 1: G, P; Team 2: I, L; Team 3: K, M",
      "E) Team 1: H, M; Team 2: I, L; Team 3: K, P"
    ],
    "raw_logic_programs": [
      "# Declarations\npersons = EnumSort([G, H, I, K, L, M, P])\nteams = EnumSort([Team1, Team2, Team3])\nmembers = Function([teams] -> [persons])\norganizer = Function([persons] -> [bool])\n\n# Constraints\nForAll([t:teams], Count([p:persons], members(t) == p) == 2) ::: each team consists of two persons\nForAll([p:persons], Count([t:teams], members(t) == p) <= 1) ::: no person can be on more than one team\nImplies(members(Team1) == M, members(Team1) == P) ::: M and P cannot be on the same team as each other\nImplies(members(Team1) == K, members(Team1) == M) ::: If K is on a team, M must also be on that team\nImplies(members(Team1) == G, Or(members(Team1) == H, members(Team1) == I)) ::: If G is on a team, either H or I must also be on that team\nImplies(members(Team1) == H, organizer(K)) ::: If H is on a team, K must be the organizer\n\n# Options\nQuestion ::: Which one of the following can be a list of the members of the three teams?\nis_valid(And(members(Team1) == G, members(Team1) == H, members(Team2) == I, members(Team2) == L, members(Team3) == M, members(Team3) == P)) ::: A) Team 1: G, H; Team 2: I, L; Team 3: M, P\nis_valid(And(members(Team1) == G, members(Team1) == H, members(Team2) == L, members(Team2) == P, members(Team3) == K, members(Team3) == M)) ::: B) Team 1"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_2_8",
    "context": "Seven persons—G, H, I, K, L, M, and P—are going rock-climbing together. One person will be the organizer and not a member of any team. The remaining six will form three climbing teams, each consisting of two persons. No person can be on more than one team. The following conditions also apply: M and P cannot be on the same team as each other. If K is on a team, M must also be on that team. If G is on a team, either H or I must also be on that team. If H is on a team, K must be the organizer.",
    "question": "Each of the following is a pair of persons who can constitute a team EXCEPT:",
    "answer": "A",
    "options": [
      "A) H, I",
      "B) H, M",
      "C) I, M",
      "D) I, P",
      "E) L, P"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([G, H, I, K, L, M, P])\nteams = EnumSort([A, B, C])\nmembers = Function([teams] -> [people])\nForAll([t:teams], Count([p:people], members(t) == p) == 2)\n\n# Constraints\nForAll([p:people], Not(And(members(A) == p, members(B) == p), members(C) == p))) ::: No person can be on more than one team\nNot(And(members(A) == M, members(A) == P)) ::: M and P cannot be on the same team as each other\nImplies(members(A) == K, members(A) == M) ::: If K is on a team, M must also be on that team\nImplies(members(A) == G, Or(members(A) == H, members(A) == I)) ::: If G is on a team, either H or I must also be on that team\nImplies(members(A) == H, Not(members(A) == K)) ::: If H is on a team, K must be the organizer\n\n# Options\nQuestion ::: Each of the following is a pair of persons who can constitute a team EXCEPT:\nis_exception(is_sat(And(members(A) == H, members(A) == I))) ::: (A)\nis_exception(is_sat(And(members(A) == H, members(A) == M))) ::: (B)\nis_exception(is_sat(And(members(A) == I, members(A) == M))) ::: (C)\nis_exception(is_sat(And(members(A) == I, members(A) == P))) ::: (D)\nis_exception(is_sat(And(members(A) == L, members(A) == P))) ::: (E)\n------\nProblem:\nA group of six people"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_2_9",
    "context": "Seven persons—G, H, I, K, L, M, and P—are going rock-climbing together. One person will be the organizer and not a member of any team. The remaining six will form three climbing teams, each consisting of two persons. No person can be on more than one team. The following conditions also apply: M and P cannot be on the same team as each other. If K is on a team, M must also be on that team. If G is on a team, either H or I must also be on that team. If H is on a team, K must be the organizer.",
    "question": "Which one of the following can be the organizer, who is not on any team?",
    "answer": "B",
    "options": [
      "A) G",
      "B) H",
      "C) I",
      "D) L",
      "E) P"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([G, H, I, K, L, M, P])\nteams = EnumSort([A, B, C])\nmembers = Function([teams] -> [people])\norganizer = Function([people] -> [bool])\n\n# Constraints\nForAll([t:teams], Count([p:people], members(t) == p) == 2) ::: each team consists of two persons\nForAll([p:people], Implies(members(A) == p, Not(members(B) == p))) ::: no person can be on more than one team\nImplies(members(A) == M, members(A) == P) ::: M and P cannot be on the same team as each other\nImplies(members(A) == K, members(A) == M) ::: if K is on a team, M must also be on that team\nImplies(members(A) == G, Or(members(A) == H, members(A) == I)) ::: if G is on a team, either H or I must also be on that team\nImplies(members(A) == H, organizer(K)) ::: if H is on a team, K must be the organizer\n\n# Options\nQuestion ::: Which one of the following can be the organizer, who is not on any team?\nis_sat(organizer(G) & Not(members(A) == G)) ::: (A)\nis_sat(organizer(H) & Not(members(A) == H)) ::: (B)\nis_sat(organizer(I) & Not(members(A) == I)) ::: (C)\nis_sat(organizer(L) & Not(members(A) == L)) ::: (D)\nis_sat(organizer(P) & Not(members(A) == P)) ::: (E)\n------\nProblem:\nA group of six people—F, G, H, I, J, and K—are going to"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_2_10",
    "context": "Seven persons—G, H, I, K, L, M, and P—are going rock-climbing together. One person will be the organizer and not a member of any team. The remaining six will form three climbing teams, each consisting of two persons. No person can be on more than one team. The following conditions also apply: M and P cannot be on the same team as each other. If K is on a team, M must also be on that team. If G is on a team, either H or I must also be on that team. If H is on a team, K must be the organizer.",
    "question": "If G and I form a team and if H is a member of a team, then H must be on the same team as either",
    "answer": "E",
    "options": [
      "A) K or L",
      "B) K or P",
      "C) L or M",
      "D) L or P",
      "E) M or P"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([G, H, I, K, L, M, P])\nteams = EnumSort([A, B, C])\nmembers = Function([teams] -> [people])\norganizer = Function([people] -> [bool])\n\n# Constraints\nForAll([p:people], Count([t:teams], members(t) == p) <= 1) ::: No person can be on more than one team\nForAll([t:teams], Count([p:people], members(t) == p) == 2) ::: each team consists of two persons\nImplies(members(A) == M, members(A) == P) ::: M and P cannot be on the same team as each other\nImplies(members(A) == K, members(A) == M) ::: If K is on a team, M must also be on that team\nImplies(members(A) == G, Or(members(A) == H, members(A) == I)) ::: If G is on a team, either H or I must also be on that team\nImplies(members(A) == H, organizer(K)) ::: If H is on a team, K must be the organizer\n\n# Options\nQuestion ::: If G and I form a team and if H is a member of a team, then H must be on the same team as either\nis_sat(ForAll([t:teams], Implies(members(t) == H, members(t) == K) | Implies(members(t) == H, members(t) == L))) ::: (A)\nis_sat(ForAll([t:teams], Implies(members(t) == H, members(t) == K) | Implies(members(t) == H, members(t) == P))) ::: (B)\nis_sat(ForAll([t:teams], Implies(members(t) == H, members(t) == L) | Implies(members(t) == H,"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_2_11",
    "context": "Seven persons—G, H, I, K, L, M, and P—are going rock-climbing together. One person will be the organizer and not a member of any team. The remaining six will form three climbing teams, each consisting of two persons. No person can be on more than one team. The following conditions also apply: M and P cannot be on the same team as each other. If K is on a team, M must also be on that team. If G is on a team, either H or I must also be on that team. If H is on a team, K must be the organizer.",
    "question": "If L and M are on different teams, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) H is the organizer.",
      "B) K is the organizer.",
      "C) G is on the same team as H.",
      "D) I is on the same team as M.",
      "E) L is on the same team as P."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([G, H, I, K, L, M, P])\nteams = EnumSort([A, B, C])\nmembers = Function([teams] -> [people])\norganizer = Function([people] -> [bool])\n\n# Constraints\nForAll([p:people], Count([t:teams], members(t) == p) <= 1) ::: No person can be on more than one team\nForAll([t:teams], Count([p:people], members(t) == p) == 2) ::: each team consists of two persons\nImplies(members(A) == M, members(A) == P) ::: M and P cannot be on the same team as each other\nImplies(members(A) == K, members(A) == M) ::: If K is on a team, M must also be on that team\nImplies(members(A) == G, Or(members(A) == H, members(A) == I)) ::: If G is on a team, either H or I must also be on that team\nImplies(members(A) == H, organizer(K)) ::: If H is on a team, K must be the organizer\n\n# Options\nQuestion ::: If L and M are on different teams, which one of the following must be true?\nis_sat(organizer(H)) ::: (A)\nis_sat(organizer(K)) ::: (B)\nis_sat(members(A) == G, members(A) == H) ::: (C)\nis_sat(members(A) == I, members(A) == M) ::: (D)\nis_sat(members(A) == L, members(A) == P) ::: (E)\n------\nProblem:\nA group of six people—F, G, H, I, J, and K—are going to be divided into two teams of three people each. Each team will consist of one person from each of the following three groups"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_2_12",
    "context": "Seven persons—G, H, I, K, L, M, and P—are going rock-climbing together. One person will be the organizer and not a member of any team. The remaining six will form three climbing teams, each consisting of two persons. No person can be on more than one team. The following conditions also apply: M and P cannot be on the same team as each other. If K is on a team, M must also be on that team. If G is on a team, either H or I must also be on that team. If H is on a team, K must be the organizer.",
    "question": "Which one of the following lists three persons each of whom must be on a team and no two of whom can be on the same team as each other?",
    "answer": "B",
    "options": [
      "A) G, L, M",
      "B) G, M, P",
      "C) H, I, L",
      "D) I, L, P",
      "E) L, M, P"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([G, H, I, K, L, M, P])\nteams = EnumSort([A, B, C])\nmembers = Function([teams] -> [people])\norganizer = Function([people] -> [bool])\n\n# Constraints\nForAll([t:teams], Count([p:people], members(t) == p) == 2) ::: each team consists of two persons\nForAll([p:people], Implies(members(A) == p, Not(members(B) == p))) ::: no person can be on more than one team\nImplies(members(A) == M, members(A) == P) ::: M and P cannot be on the same team as each other\nImplies(members(A) == K, members(A) == M) ::: If K is on a team, M must also be on that team\nImplies(members(A) == G, Or(members(A) == H, members(A) == I)) ::: If G is on a team, either H or I must also be on that team\nImplies(members(A) == H, organizer(K)) ::: If H is on a team, K must be the organizer\n\n# Options\nQuestion ::: Which one of the following lists three persons each of whom must be on a team and no two of whom can be on the same team as each other?\nis_valid(ForAll([p:people], Implies(members(A) == p, Not(members(B) == p))))) ::: A) G, L, M\nis_valid(ForAll([p:people], Implies(members(A) == p, Not(members(B) == p))))) ::: B) G, M, P\nis_valid(ForAll([p:people], Implies(members(A) == p, Not(members(B) == p))))) ::: C) H, I, L\nis_valid(ForAll([p:people], Implies(members(A) == p,"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_2_13",
    "context": "Seven persons—G, H, I, K, L, M, and P—are going rock-climbing together. One person will be the organizer and not a member of any team. The remaining six will form three climbing teams, each consisting of two persons. No person can be on more than one team. The following conditions also apply: M and P cannot be on the same team as each other. If K is on a team, M must also be on that team. If G is on a team, either H or I must also be on that team. If H is on a team, K must be the organizer.",
    "question": "There are how many different persons any one of whom could be paired with M to form a team?",
    "answer": "D",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\npersons = EnumSort([G, H, I, K, L, M, P])\nteams = EnumSort([A, B, C])\nmembers = Function([teams] -> [persons])\nForAll([t:teams], Count([p:persons], members(t) == p) == 2)\n\n# Constraints\nForAll([p:persons], Not(members(A) == p && members(B) == p && members(C) == p)) ::: No person can be on more than one team\nNot(members(A) == M && members(B) == M && members(C) == M) ::: M and P cannot be on the same team as each other\nImplies(members(A) == K, members(A) == M) ::: If K is on a team, M must also be on that team\nImplies(members(A) == G, Or(members(A) == H, members(A) == I)) ::: If G is on a team, either H or I must also be on that team\nImplies(members(A) == H, Not(members(A) == K)) ::: If H is on a team, K must be the organizer\n\n# Options\nQuestion ::: There are how many different persons any one of whom could be paired with M to form a team?\nis_sat(Count([p:persons], Or(members(A) == p, members(B) == p, members(C) == p)) == 1) ::: A) one\nis_sat(Count([p:persons], Or(members(A) == p, members(B) == p, members(C) == p)) == 2) ::: B) two\nis_sat(Count([p:persons], Or(members(A) == p, members(B) == p, members(C) == p)) == 3) ::: C) three\nis_sat(Count([p:persons], Or(members(A) == p, members(B) == p, members(C) == p)) == 4) ::: D) four\nis_sat(Count([p:persons], Or(members(A) == p, members(B) == p, members(C) == p)) == 5) ::: E) five\n------"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_3_14",
    "context": "A train makes five trips around a loop through five stations—P, Q, R, S, and T, in that order—stopping at exactly three of the stations on each trip. The train must conform to the following conditions: The train stops at any given station on exactly three trips, but not on three consecutive trips. The train stops at any given station at least once in any two consecutive trips.",
    "question": "Which one of the following could be the list of stations at which the train stops on the first two trips?",
    "answer": "D",
    "options": [
      "A) first trip: P, Q, S; second trip: P, Q, R",
      "B) first trip: P, Q, T; second trip: Q, R, T",
      "C) first trip: Q, R, S; second trip: P, Q, S",
      "D) first trip: Q, S, T; second trip: P, R, S",
      "E) first trip: R, S, T; second trip: P, R, T"
    ],
    "raw_logic_programs": [
      "# Declarations\nstations = EnumSort([P, Q, R, S, T])\ntrips = EnumSort([1, 2, 3, 4, 5])\nstops = Function([trips, stations] -> [bool])\n\n# Constraints\nForAll([s:stations], Count([t:trips], stops(t, s)) == 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(t, s))!= 3) ::: but not on three consecutive trips\nForAll([s:stations], Count([t:trips], stops(t, s)) >= 1) ::: The train stops at any given station at least once in any two consecutive trips\n\n# Options\nQuestion ::: Which one of the following could be the list of stations at which the train stops on the first two trips?\nis_sat(And(stops(1, P), stops(1, Q), stops(1, S), stops(2, P), stops(2, Q), stops(2, R))) ::: A) first trip: P, Q, S; second trip: P, Q, R\nis_sat(And(stops(1, P), stops(1, Q), stops(1, T), stops(2, Q), stops(2, R), stops(2, T))) ::: B) first trip: P, Q, T; second trip: Q, R, T\nis_sat(And(stops(1, Q), stops(1, R), stops(1, S), stops(2, P), stops(2, Q), stops(2, S))) ::: C) first trip: Q, R, S; second trip: P, Q, S\nis_sat(And(stops(1, Q), stops(1, S), stops(1, T), stops(2, P), stops(2, R), stops(2, S))) ::: D) first trip: Q, S, T; second trip: P, R, S\nis_sat(And(stops(1, R), stops(1, S), stops(1, T), stops(2, P), stops(2, R), stops(2, T))) ::: E) first trip: R, S, T; second"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_3_15",
    "context": "A train makes five trips around a loop through five stations—P, Q, R, S, and T, in that order—stopping at exactly three of the stations on each trip. The train must conform to the following conditions: The train stops at any given station on exactly three trips, but not on three consecutive trips. The train stops at any given station at least once in any two consecutive trips.",
    "question": "If on the first and third trips the train is to stop at Q, R, and S, and at R, S, and T, respectively, which one of the following is the list of stations at which it must stop on the second trip?",
    "answer": "B",
    "options": [
      "A) P, Q, R",
      "B) P, Q, T",
      "C) P, S, T",
      "D) Q, R, T",
      "E) Q, S, T"
    ],
    "raw_logic_programs": [
      "# Declarations\nstations = EnumSort([P, Q, R, S, T])\ntrips = EnumSort([1, 2, 3, 4, 5])\nstops = Function([trips, stations] -> [bool])\n\n# Constraints\nForAll([t:trips], Count([s:stations], stops(t, s)) == 3) ::: The train stops at exactly three of the stations on each trip\nForAll([s:stations], Count([t:trips], stops(t, s)) == 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(t, s)) == 0) == 2 ::: The train stops at any given station at least once in any two consecutive trips\nstops(1, Q) ::: On the first and third trips the train is to stop at Q\nstops(1, R) ::: On the first and third trips the train is to stop at R\nstops(1, S) ::: On the first and third trips the train is to stop at S\nstops(3, R) ::: On the first and third trips the train is to stop at R\nstops(3, S) ::: On the first and third trips the train is to stop at S\nstops(3, T) ::: On the first and third trips the train is to stop at T\n\n# Options\nQuestion ::: If on the first and third trips the train is to stop at Q, R, and S, and at R, S, and T, respectively, which one of the following is the list of stations at which it must stop on the second trip?\nis_sat(ForAll([s:stations], stops(2, s) == stops(1, s))) ::: A) P, Q, R\nis_sat(ForAll([s:stations], stops(2, s) == stops(1, s))) ::: B) P, Q, T\nis_sat(ForAll([s:stations], stops(2, s) == stops(1, s))) ::: C) P, S, T\nis_sat(ForAll([s:stations], stops(2, s) == stops(1, s))) ::: D) Q, R"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_3_16",
    "context": "A train makes five trips around a loop through five stations—P, Q, R, S, and T, in that order—stopping at exactly three of the stations on each trip. The train must conform to the following conditions: The train stops at any given station on exactly three trips, but not on three consecutive trips. The train stops at any given station at least once in any two consecutive trips.",
    "question": "The train CANNOT stop at both P and Q on both the",
    "answer": "E",
    "options": [
      "A) first and third trips",
      "B) first and fourth trips",
      "C) second and fourth trips",
      "D) second and fifth trips",
      "E) fourth and fifth trips"
    ],
    "raw_logic_programs": [
      "# Declarations\nstations = EnumSort([P, Q, R, S, T])\ntrips = EnumSort([1, 2, 3, 4, 5])\nstops = Function([stations, trips] -> [bool])\n\n# Constraints\nForAll([s:stations], Count([t:trips], stops(s, t)) == 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], And(stops(s, t), stops(s, t + 1))) == 0) ::: The train stops at any given station at least once in any two consecutive trips\n\n# Options\nQuestion ::: The train CANNOT stop at both P and Q on both the\nis_exception(is_sat(And(stops(P, 1), stops(Q, 1), stops(P, 3), stops(Q, 3)))) ::: A) first and third trips\nis_exception(is_sat(And(stops(P, 1), stops(Q, 1), stops(P, 4), stops(Q, 4)))) ::: B) first and fourth trips\nis_exception(is_sat(And(stops(P, 2), stops(Q, 2), stops(P, 4), stops(Q, 4)))) ::: C) second and fourth trips\nis_exception(is_sat(And(stops(P, 2), stops(Q, 2), stops(P, 5), stops(Q, 5)))) ::: D) second and fifth trips\nis_exception(is_sat(And(stops(P, 4), stops(Q, 4), stops(P, 5), stops(Q, 5)))) ::: E) fourth and fifth trips\n------\nProblem:\nA company has five employees—A, B, C, D, and E—who are to be assigned to five different positions—manager, assistant manager, salesperson, bookkeeper, and receptionist. The assignment must conform to the following conditions: B is not assigned to the position of receptionist. C is assigned to the position of either manager or assistant manager. D is assigned to the position of either manager or bookkeeper. E is assigned to the position of either receptionist"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_3_17",
    "context": "A train makes five trips around a loop through five stations—P, Q, R, S, and T, in that order—stopping at exactly three of the stations on each trip. The train must conform to the following conditions: The train stops at any given station on exactly three trips, but not on three consecutive trips. The train stops at any given station at least once in any two consecutive trips.",
    "question": "If the train is to stop at Q, R, and T on the first trip and at Q, R, and S on the fourth trip, then it could be true that the train",
    "answer": "A",
    "options": [
      "A) stops at Q on the second trip",
      "B) stops at R on the fifth trip",
      "C) stops at T on the second trip",
      "D) does not stop at P on the third trip",
      "E) does not stop at T on the fifth trip"
    ],
    "raw_logic_programs": [
      "# Declarations\nstations = EnumSort([P, Q, R, S, T])\ntrips = EnumSort([1, 2, 3, 4, 5])\nstops = Function([stations, trips] -> [bool])\n\n# Constraints\nForAll([s:stations], Count([t:trips], stops(s, t)) == 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(s, t))!= 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(s, t))!= 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(s, t))!= 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(s, t))!= 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(s, t))!= 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(s, t))!= 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(s, t))!= 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(s, t))!= 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(s, t))!= 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(s, t))!= 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(s, t))!= 3) ::: The train stops at"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_3_18",
    "context": "A train makes five trips around a loop through five stations—P, Q, R, S, and T, in that order—stopping at exactly three of the stations on each trip. The train must conform to the following conditions: The train stops at any given station on exactly three trips, but not on three consecutive trips. The train stops at any given station at least once in any two consecutive trips.",
    "question": "Suppose that the train's scheduler mistakenly scheduled the train to make the following stops on the first three trips: Q, R, and S on the first trip; P, Q, and S on the second trip; and R, S, and T on the third trip. Which one of the following is a substitution that results in a schedule for those three trips under which the train violates no condition?",
    "answer": "C",
    "options": [
      "A) on the first trip, P for Q",
      "B) on the second trip, R for S",
      "C) on the second trip, T for S",
      "D) on the third trip, P for R",
      "E) on the third trip, P for S"
    ],
    "raw_logic_programs": [
      "# Declarations\nstations = EnumSort([P, Q, R, S, T])\ntrips = EnumSort([1, 2, 3, 4, 5])\nstops = Function([trips, stations] -> [bool])\n\n# Constraints\nForAll([s:stations], Count([t:trips], stops(t, s)) == 3) ::: The train stops at any given station on exactly three trips\nForAll([s:stations], Count([t:trips], stops(t, s))!= 3) ::: but not on three consecutive trips\nForAll([s:stations], Count([t:trips], stops(t, s)) >= 1) ::: The train stops at any given station at least once in any two consecutive trips\n\n# Options\nQuestion ::: Suppose that the train's scheduler mistakenly scheduled the train to make the following stops on the first three trips: Q, R, and S on the first trip; P, Q, and S on the second trip; and R, S, and T on the third trip. Which one of the following is a substitution that results in a schedule for those three trips under which the train violates no condition?\nis_valid(ForAll([t:trips], stops(t, P) == stops(t, Q))) ::: (A)\nis_valid(ForAll([t:trips], stops(t, R) == stops(t, S))) ::: (B)\nis_valid(ForAll([t:trips], stops(t, T) == stops(t, S))) ::: (C)\nis_valid(ForAll([t:trips], stops(t, P) == stops(t, R))) ::: (D)\nis_valid(ForAll([t:trips], stops(t, P) == stops(t, S))) ::: (E)\n------\nProblem:\nA company has five employees—A, B, C, D, and E—who are to be assigned to five different positions—manager, assistant manager, salesperson, bookkeeper, and receptionist. The following conditions apply: B is not the manager. C is not the assistant manager. D is not the bookkeeper. E is not the receptionist. A is not the assistant manager, bookkeeper, or receptionist.\nQuestion:\nWhich one of the following could"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_4_19",
    "context": "On a certain morning, each of six speakers—Feinberg, Guzman, Harrison, Jansen, Kim, and Mackey—will lecture for exactly one hour. Each lecture will take place in either the library or the studio, with exactly one speaker at a time lecturing in each of these two rooms. The lectures must be given in a manner consistent with the following conditions: Exactly three of the lectures are given in each room, the first beginning at precisely 8 A.M. , the second at precisely 9 A.M., and the third at precisely 10 A.M. Feinberg's lecture cannot begin earlier than Guzman's. Neither Jansen's lecture nor Mackey's lecture begins at the same time as Feinberg's. Harrison's lecture begins earlier than Feinberg's. Jansen and Mackey, not necessarily in that order, lecture in the studio.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Either Jansen or else Mackey lectures in the studio beginning at 8 A.M.",
      "B) Either Harrison or else Mackey lectures in the studio beginning at 9 A.M.",
      "C) Either Guzman or else Harrison lectures in the library beginning at 8 A.M.",
      "D) Either Feinberg or else Guzman lectures in the library beginning at 9 A.M.",
      "E) Either Feinberg or else Guzman lectures in the library beginning at 10 A.M."
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([Feinberg, Guzman, Harrison, Jansen, Kim, Mackey])\nrooms = EnumSort([library, studio])\nlectures = Function([speakers, rooms] -> [int])\n\n# Constraints\nForAll([s:speakers], Count([r:rooms], lectures(s, r)) == 1) ::: Each lecture will take place in either the library or the studio, with exactly one speaker at a time lecturing in each of these two rooms\nForAll([r:rooms], Count([s:speakers], lectures(s, r)) == 3) ::: Exactly three of the lectures are given in each room\nForAll([s:speakers], And(8 <= lectures(s, library), lectures(s, library) <= 10)) ::: the first beginning at precisely 8 A.M., the second at precisely 9 A.M., and the third at precisely 10 A.M.\nForAll([s:speakers], And(8 <= lectures(s, studio), lectures(s, studio) <= 10)) ::: the first beginning at precisely 8 A.M., the second at precisely 9 A.M., and the third at precisely 10 A.M.\nlectures(Feinberg, library) > lectures(Guzman, library) ::: Feinberg's lecture cannot begin earlier than Guzman's\nImplies(lectures(Jansen, library) == lectures(Feinberg, library), lectures(Mackey, library)!= lectures(Feinberg, library)) ::: Neither Jansen's lecture nor Mackey's lecture begins at the same time as Feinberg's\nlectures(Harrison, library) < lectures(Feinberg, library) ::: Harrison's lecture begins earlier than Feinberg's\nlectures(Jansen, studio) == lectures(Mackey, studio) ::: Jansen and Mackey, not necessarily in that order, lecture in the studio\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([s:speakers], lectures(s, studio) == 8) && lectures(Jansen, studio) == lectures(Mackey, studio)) ::: (A)\nis_valid(Exists"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_4_20",
    "context": "On a certain morning, each of six speakers—Feinberg, Guzman, Harrison, Jansen, Kim, and Mackey—will lecture for exactly one hour. Each lecture will take place in either the library or the studio, with exactly one speaker at a time lecturing in each of these two rooms. The lectures must be given in a manner consistent with the following conditions: Exactly three of the lectures are given in each room, the first beginning at precisely 8 A.M. , the second at precisely 9 A.M., and the third at precisely 10 A.M. Feinberg's lecture cannot begin earlier than Guzman's. Neither Jansen's lecture nor Mackey's lecture begins at the same time as Feinberg's. Harrison's lecture begins earlier than Feinberg's. Jansen and Mackey, not necessarily in that order, lecture in the studio.",
    "question": "If both Kim's lecture and Mackey's lecture begin at 9 A.M. , which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Guzman's lecture begins at 8 A.M.",
      "B) Harrison's lecture begins at 10 A.M.",
      "C) Jansen's lecture begins at 10 A.M.",
      "D) Guzman lectures in the library.",
      "E) Harrison lectures in the studio."
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([Feinberg, Guzman, Harrison, Jansen, Kim, Mackey])\nrooms = EnumSort([library, studio])\nlectures = Function([speakers, rooms] -> [int])\n\n# Constraints\nForAll([s:speakers], Count([r:rooms], lectures(s, r)) == 1) ::: each speaker will lecture for exactly one hour\nForAll([r:rooms], Count([s:speakers], lectures(s, r)) == 3) ::: Exactly three of the lectures are given in each room\nAnd(lectures(Feinberg, library) == 8, lectures(Guzman, library) == 9, lectures(Harrison, library) == 10) ::: the first beginning at precisely 8 A.M., the second at precisely 9 A.M., and the third at precisely 10 A.M.\nAnd(lectures(Feinberg, studio) == 8, lectures(Jansen, studio) == 9, lectures(Kim, studio) == 10) ::: the first beginning at precisely 8 A.M., the second at precisely 9 A.M., and the third at precisely 10 A.M.\nlectures(Feinberg, library) < lectures(Guzman, library) ::: Feinberg's lecture cannot begin earlier than Guzman's\nImplies(lectures(Jansen, library) == lectures(Feinberg, library), lectures(Mackey, library)!= lectures(Feinberg, library)) ::: Neither Jansen's lecture nor Mackey's lecture begins at the same time as Feinberg's\nlectures(Harrison, library) < lectures(Feinberg, library) ::: Harrison's lecture begins earlier than Feinberg's\nAnd(lectures(Jansen, studio) == lectures(Mackey, studio), lectures(Jansen, studio)!= lectures(Mackey, studio)) ::: Jansen and Mackey, not necessarily in that order, lecture in the studio\n\n# Options\nQuestion ::: If both Kim's lecture and Mackey's lecture begin at 9 A.M., which one of the following could be true?\nis_exception(is_sat(lectures("
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_4_21",
    "context": "On a certain morning, each of six speakers—Feinberg, Guzman, Harrison, Jansen, Kim, and Mackey—will lecture for exactly one hour. Each lecture will take place in either the library or the studio, with exactly one speaker at a time lecturing in each of these two rooms. The lectures must be given in a manner consistent with the following conditions: Exactly three of the lectures are given in each room, the first beginning at precisely 8 A.M. , the second at precisely 9 A.M., and the third at precisely 10 A.M. Feinberg's lecture cannot begin earlier than Guzman's. Neither Jansen's lecture nor Mackey's lecture begins at the same time as Feinberg's. Harrison's lecture begins earlier than Feinberg's. Jansen and Mackey, not necessarily in that order, lecture in the studio.",
    "question": "If Harrison's lecture begins at 9 A.M. , which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Feinberg lectures in the library.",
      "B) Guzman lectures in the studio.",
      "C) Harrison lectures in the library.",
      "D) Kim lectures in the studio.",
      "E) Mackey lectures in the library."
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([Feinberg, Guzman, Harrison, Jansen, Kim, Mackey])\nrooms = EnumSort([library, studio])\nlectures = Function([speakers, rooms] -> [int])\n\n# Constraints\nForAll([s:speakers], Count([r:rooms], lectures(s, r)) == 1) ::: each speaker will lecture for exactly one hour\nForAll([r:rooms], Count([s:speakers], lectures(s, r)) == 3) ::: Exactly three of the lectures are given in each room\nForAll([s:speakers], And(8 <= lectures(s, _), lectures(s, _) <= 10)) ::: the first beginning at precisely 8 A.M., the second at precisely 9 A.M., and the third at precisely 10 A.M.\nImplies(lectures(Feinberg, _), lectures(Guzman, _)) ::: Feinberg's lecture cannot begin earlier than Guzman's\nImplies(lectures(Jansen, _), lectures(Mackey, _)) ::: Neither Jansen's lecture nor Mackey's lecture begins at the same time as Feinberg's\nImplies(lectures(Harrison, _), lectures(Feinberg, _)) ::: Harrison's lecture begins earlier than Feinberg's\nImplies(lectures(Jansen, studio), lectures(Mackey, studio)) ::: Jansen and Mackey, not necessarily in that order, lecture in the studio\n\n# Options\nQuestion ::: If Harrison's lecture begins at 9 A.M., which one of the following must be true?\nis_valid(Exists([s:speakers], lectures(s, library) == Feinberg)) ::: (A)\nis_valid(Exists([s:speakers], lectures(s, studio) == Guzman)) ::: (B)\nis_valid(Exists([s:speakers], lectures(s, library) == Harrison)) ::: (C)\nis_valid(Exists([s:speakers], lectures(s, studio) == Kim)) ::: (D)\nis_valid(Exists([s:speakers], lectures(s, library) == Mackey)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_4_22",
    "context": "On a certain morning, each of six speakers—Feinberg, Guzman, Harrison, Jansen, Kim, and Mackey—will lecture for exactly one hour. Each lecture will take place in either the library or the studio, with exactly one speaker at a time lecturing in each of these two rooms. The lectures must be given in a manner consistent with the following conditions: Exactly three of the lectures are given in each room, the first beginning at precisely 8 A.M. , the second at precisely 9 A.M., and the third at precisely 10 A.M. Feinberg's lecture cannot begin earlier than Guzman's. Neither Jansen's lecture nor Mackey's lecture begins at the same time as Feinberg's. Harrison's lecture begins earlier than Feinberg's. Jansen and Mackey, not necessarily in that order, lecture in the studio.",
    "question": "Each of the following is a pair of speakers whose lectures could begin at the same time as each other EXCEPT:",
    "answer": "D",
    "options": [
      "A) Feinberg and Guzman",
      "B) Feinberg and Kim",
      "C) Guzman and Jansen",
      "D) Guzman and Kim",
      "E) Guzman and Mackey"
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([Feinberg, Guzman, Harrison, Jansen, Kim, Mackey])\nrooms = EnumSort([library, studio])\nlectures = Function([speakers, rooms] -> [int])\n\n# Constraints\nForAll([s:speakers], Count([r:rooms], lectures(s, r)) == 1) ::: each speaker lectures for exactly one hour\nForAll([r:rooms], Count([s:speakers], lectures(s, r)) == 3) ::: Exactly three of the lectures are given in each room\nForAll([s:speakers], And(8 <= lectures(s, library), lectures(s, library) <= 10)) ::: the first beginning at precisely 8 A.M., the second at precisely 9 A.M., and the third at precisely 10 A.M.\nForAll([s:speakers], And(8 <= lectures(s, studio), lectures(s, studio) <= 10)) ::: the first beginning at precisely 8 A.M., the second at precisely 9 A.M., and the third at precisely 10 A.M.\nlectures(Feinberg, library) > lectures(Guzman, library) ::: Feinberg's lecture cannot begin earlier than Guzman's\nImplies(lectures(Jansen, library) == lectures(Feinberg, library), lectures(Mackey, library)!= lectures(Feinberg, library)) ::: Neither Jansen's lecture nor Mackey's lecture begins at the same time as Feinberg's\nlectures(Harrison, library) < lectures(Feinberg, library) ::: Harrison's lecture begins earlier than Feinberg's\nImplies(lectures(Jansen, library) == lectures(Mackey, library), lectures(Jansen, library) == lectures(Feinberg, library)) ::: Jansen and Mackey, not necessarily in that order, lecture in the studio\n\n# Options\nQuestion ::: Each of the following is a pair of speakers whose lectures could begin at the same time as each other EXCEPT:\nis_exception(is_sat(lectures(Feinberg, library) == lectures(Guzman, library))) ::: (A)"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_4_23",
    "context": "On a certain morning, each of six speakers—Feinberg, Guzman, Harrison, Jansen, Kim, and Mackey—will lecture for exactly one hour. Each lecture will take place in either the library or the studio, with exactly one speaker at a time lecturing in each of these two rooms. The lectures must be given in a manner consistent with the following conditions: Exactly three of the lectures are given in each room, the first beginning at precisely 8 A.M. , the second at precisely 9 A.M., and the third at precisely 10 A.M. Feinberg's lecture cannot begin earlier than Guzman's. Neither Jansen's lecture nor Mackey's lecture begins at the same time as Feinberg's. Harrison's lecture begins earlier than Feinberg's. Jansen and Mackey, not necessarily in that order, lecture in the studio.",
    "question": "If Feinberg lectures in the library beginning at 9 A.M., which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Guzman lectures in the studio beginning at 10 A.M.",
      "B) Harrison lectures in the studio beginning at 8 A.M.",
      "C) Jansen lectures in the studio beginning at 10 A.M.",
      "D) Kim lectures in the studio beginning at 9 A.M.",
      "E) Mackey lectures in the studio beginning at 9 A.M."
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([Feinberg, Guzman, Harrison, Jansen, Kim, Mackey])\nrooms = EnumSort([library, studio])\nlectures = Function([speakers, rooms] -> [int])\n\n# Constraints\nForAll([s:speakers], Count([r:rooms], lectures(s, r)) == 1) ::: each speaker will lecture for exactly one hour\nForAll([r:rooms], Count([s:speakers], lectures(s, r)) == 3) ::: Exactly three of the lectures are given in each room\nAnd(lectures(Feinberg, library) == 9, lectures(Guzman, library) == 8) ::: Feinberg's lecture cannot begin earlier than Guzman's\nAnd(lectures(Jansen, studio) == 10, lectures(Mackey, studio) == 9) ::: Jansen and Mackey, not necessarily in that order, lecture in the studio\nAnd(lectures(Harrison, library) == 8, lectures(Feinberg, library) == 9) ::: Harrison's lecture begins earlier than Feinberg's\n\n# Options\nQuestion ::: If Feinberg lectures in the library beginning at 9 A.M., which one of the following could be true?\nis_valid(Exists([s:speakers], lectures(s, studio) == 10))) ::: A) Guzman lectures in the studio beginning at 10 A.M.\nis_valid(Exists([s:speakers], lectures(s, studio) == 8))) ::: B) Harrison lectures in the studio beginning at 8 A.M.\nis_valid(Exists([s:speakers], lectures(s, studio) == 10))) ::: C) Jansen lectures in the studio beginning at 10 A.M.\nis_valid(Exists([s:speakers], lectures(s, studio) == 9))) ::: D) Kim lectures in the studio beginning at 9 A.M.\nis_valid(Exists([s:speakers], lectures(s, studio) == 9))) ::: E) Mackey lectures in the studio beginning at 9 A.M.\n------"
    ]
  },
  {
    "id": "ar_lsat_199702_4-G_4_24",
    "context": "On a certain morning, each of six speakers—Feinberg, Guzman, Harrison, Jansen, Kim, and Mackey—will lecture for exactly one hour. Each lecture will take place in either the library or the studio, with exactly one speaker at a time lecturing in each of these two rooms. The lectures must be given in a manner consistent with the following conditions: Exactly three of the lectures are given in each room, the first beginning at precisely 8 A.M. , the second at precisely 9 A.M., and the third at precisely 10 A.M. Feinberg's lecture cannot begin earlier than Guzman's. Neither Jansen's lecture nor Mackey's lecture begins at the same time as Feinberg's. Harrison's lecture begins earlier than Feinberg's. Jansen and Mackey, not necessarily in that order, lecture in the studio.",
    "question": "Which one of the following could be a list of the speakers who give their lectures in the studio, in the order in which they give their lectures, from first to third, respectively?",
    "answer": "E",
    "options": [
      "A) Feinberg, Jansen, Mackey",
      "B) Guzman, Kim, Mackey",
      "C) Harrison, Jansen, Kim",
      "D) Jansen, Mackey, Harrison",
      "E) Mackey, Feinberg, Jansen"
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([Feinberg, Guzman, Harrison, Jansen, Kim, Mackey])\nrooms = EnumSort([library, studio])\nlectures = Function([speakers, rooms] -> [int])\n\n# Constraints\nForAll([s:speakers], Count([r:rooms], lectures(s, r)) == 1) ::: each speaker will lecture for exactly one hour\nForAll([r:rooms], Count([s:speakers], lectures(s, r)) == 3) ::: Exactly three of the lectures are given in each room\nAnd(lectures(Feinberg, library) == 8, lectures(Guzman, library) == 9, lectures(Harrison, library) == 10) ::: the first beginning at precisely 8 A.M., the second at precisely 9 A.M., and the third at precisely 10 A.M.\nAnd(lectures(Feinberg, studio) == 8, lectures(Guzman, studio) == 9, lectures(Harrison, studio) == 10) ::: the first beginning at precisely 8 A.M., the second at precisely 9 A.M., and the third at precisely 10 A.M.\nImplies(lectures(Feinberg, library) == 8, lectures(Guzman, library) == 9) ::: Feinberg's lecture cannot begin earlier than Guzman's\nImplies(lectures(Feinberg, studio) == 8, lectures(Guzman, studio) == 9) ::: Feinberg's lecture cannot begin earlier than Guzman's\nImplies(lectures(Feinberg, library) == 9, lectures(Guzman, library) == 8) ::: Feinberg's lecture cannot begin earlier than Guzman's\nImplies(lectures(Feinberg, studio) == 9, lectures(Guzman, studio) == 8) ::: Feinberg's lecture cannot begin earlier than Guzman's\nImplies(lectures(Feinberg, library) == 10, lectures(Guzman, library) == 8) ::: Feinberg's lecture cannot"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_1_1",
    "context": "At a benefit dinner, a community theater's seven sponsors—K, L, M, P, Q, V, and Z—will be seated at three tables—1, 2, and 3. Of the sponsors, only K, L, and M will receive honors, and only M, P, and Q will give a speech. The sponsors' seating assignments must conform to the following conditions: Each table has at least two sponsors seated at it, and each sponsor is seated at exactly one table. Any sponsor receiving honors is seated at table 1 or table 2. L is seated at the same table as V.",
    "question": "Which one of the following is an acceptable assignment of sponsors to tables?",
    "answer": "D",
    "options": [
      "A) Table 1: K, P; Table 2: M, Q; Table 3: L, V, Z",
      "B) Table 1: K, Q, Z; Table 2: L, V; Table 3: M, P",
      "C) Table 1: L, P; Table 2: K, M; Table 3: Q, V, Z",
      "D) Table 1: L, Q, V; Table 2: K, M; Table 3: P, Z",
      "E) Table 1: L, V, Z; Table 2: K, M, P; Table 3: Q"
    ],
    "raw_logic_programs": [
      "# Declarations\nsponsors = EnumSort([K, L, M, P, Q, V, Z])\ntables = EnumSort([1, 2, 3])\nseated = Function([sponsors, tables] -> [bool])\n\n# Constraints\nForAll([s:sponsors], Count([t:tables], seated(s, t)) == 1) ::: each sponsor is seated at exactly one table\nForAll([t:tables], Count([s:sponsors], seated(s, t)) >= 2) ::: Each table has at least two sponsors seated at it\nAnd(seated(K, 1), seated(L, 1), seated(M, 1), seated(P, 1), seated(Q, 1), seated(V, 1), seated(Z, 1)) ::: Any sponsor receiving honors is seated at table 1 or table 2\nseated(L, t) == seated(V, t) ::: L is seated at the same table as V\n\n# Options\nQuestion ::: Which one of the following is an acceptable assignment of sponsors to tables?\nis_sat(And(seated(K, 1), seated(P, 1), seated(Z, 1), seated(M, 2), seated(Q, 2), seated(V, 2), seated(L, 3))) ::: A) Table 1: K, P; Table 2: M, Q; Table 3: L, V, Z\nis_sat(And(seated(K, 1), seated(Q, 1), seated(Z, 1), seated(L, 2), seated(V, 2), seated(M, 3), seated(P, 3))) ::: B) Table 1: K, Q, Z; Table 2: L, V; Table 3: M, P\nis_sat(And(seated(L, 1), seated(P, 1), seated(Z, 1), seated(K, 2), seated(M, 2), seated(V, 2), seated(Q, 3"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_1_2",
    "context": "At a benefit dinner, a community theater's seven sponsors—K, L, M, P, Q, V, and Z—will be seated at three tables—1, 2, and 3. Of the sponsors, only K, L, and M will receive honors, and only M, P, and Q will give a speech. The sponsors' seating assignments must conform to the following conditions: Each table has at least two sponsors seated at it, and each sponsor is seated at exactly one table. Any sponsor receiving honors is seated at table 1 or table 2. L is seated at the same table as V.",
    "question": "Which one of the following is a list of all and only those sponsors any one of whom could be among the sponsors assigned to table 3?",
    "answer": "C",
    "options": [
      "A) P, Q",
      "B) Q, Z",
      "C) P, Q, Z",
      "D) Q, V, Z",
      "E) P, Q, V, Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nsponsors = EnumSort([K, L, M, P, Q, V, Z])\ntables = EnumSort([1, 2, 3])\nseated = Function([sponsors, tables] -> [bool])\n\n# Constraints\nForAll([t:tables], Count([s:sponsors], seated(s, t)) >= 2) ::: Each table has at least two sponsors seated at it\nForAll([s:sponsors], And(1 <= seated(s, 1), seated(s, 1) <= 3)) ::: each sponsor is seated at exactly one table\nAnd(seated(K, 1), seated(L, 1), seated(M, 1)) ::: Any sponsor receiving honors is seated at table 1 or table 2\nseated(L, t) == seated(V, t) ::: L is seated at the same table as V\n\n# Options\nQuestion ::: Which one of the following is a list of all and only those sponsors any one of whom could be among the sponsors assigned to table 3?\nis_valid(Exists([s:sponsors], seated(s, 3) == true)) ::: A) P, Q\nis_valid(Exists([s:sponsors], seated(s, 3) == true)) ::: B) Q, Z\nis_valid(Exists([s:sponsors], seated(s, 3) == true)) ::: C) P, Q, Z\nis_valid(Exists([s:sponsors], seated(s, 3) == true)) ::: D) Q, V, Z\nis_valid(Exists([s:sponsors], seated(s, 3) == true)) ::: E) P, Q, V, Z\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which has at least one employee. The following conditions apply: The number of employees in department A is greater than the number of employees in department B. The number of employees in department C is greater than the number of employees in department D. The number of employees in department E is greater than the number of employees in department F."
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_1_3",
    "context": "At a benefit dinner, a community theater's seven sponsors—K, L, M, P, Q, V, and Z—will be seated at three tables—1, 2, and 3. Of the sponsors, only K, L, and M will receive honors, and only M, P, and Q will give a speech. The sponsors' seating assignments must conform to the following conditions: Each table has at least two sponsors seated at it, and each sponsor is seated at exactly one table. Any sponsor receiving honors is seated at table 1 or table 2. L is seated at the same table as V.",
    "question": "If K is assigned to a different table than M, which one of the following must be true of the seating assignment?",
    "answer": "E",
    "options": [
      "A) K is seated at the same table as L.",
      "B) L is seated at the same table as Q.",
      "C) M is seated at the same table as V.",
      "D) Exactly two sponsors are seated at table 1.",
      "E) Exactly two sponsors are seated at table 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nsponsors = EnumSort([K, L, M, P, Q, V, Z])\ntables = EnumSort([1, 2, 3])\nseated = Function([sponsors, tables] -> [bool])\n\n# Constraints\nForAll([s:sponsors], Count([t:tables], seated(s, t)) == 1) ::: each sponsor is seated at exactly one table\nForAll([t:tables], Count([s:sponsors], seated(s, t)) >= 2) ::: Each table has at least two sponsors seated at it\nAnd(seated(K, 1), seated(L, 1), seated(M, 1), seated(P, 1), seated(Q, 1), seated(V, 1), seated(Z, 1)) ::: Any sponsor receiving honors is seated at table 1 or table 2\nseated(L, t) == seated(V, t) ::: L is seated at the same table as V\n\n# Options\nQuestion ::: If K is assigned to a different table than M, which one of the following must be true of the seating assignment?\nis_sat(ForAll([s:sponsors], seated(s, 1) == seated(s, 2))) ::: (A)\nis_sat(ForAll([s:sponsors], seated(s, 1) == seated(s, 3))) ::: (B)\nis_sat(ForAll([s:sponsors], seated(s, 2) == seated(s, 3))) ::: (C)\nis_sat(ForAll([s:sponsors], seated(s, 1) == seated(s, 2))) ::: (D)\nis_sat(ForAll([s:sponsors], seated(s, 1) == seated(s, 3))) ::: (E)\n------\nProblem:\nA company has six employees—F, G, H, J, K, and L—who work in either the accounting, human resources, or public relations department. The following conditions apply: F and G work in the same department"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_1_4",
    "context": "At a benefit dinner, a community theater's seven sponsors—K, L, M, P, Q, V, and Z—will be seated at three tables—1, 2, and 3. Of the sponsors, only K, L, and M will receive honors, and only M, P, and Q will give a speech. The sponsors' seating assignments must conform to the following conditions: Each table has at least two sponsors seated at it, and each sponsor is seated at exactly one table. Any sponsor receiving honors is seated at table 1 or table 2. L is seated at the same table as V.",
    "question": "If Q is assigned to table 1 along with two other sponsors, which one of the following could be true of the seating assignment?",
    "answer": "B",
    "options": [
      "A) K is seated at the same table as L.",
      "B) K is seated at the same table as Q.",
      "C) M is seated at the same table as V.",
      "D) M is seated at the same table as Z.",
      "E) P Is seated at the same table as Q."
    ],
    "raw_logic_programs": [
      "# Declarations\nsponsors = EnumSort([K, L, M, P, Q, V, Z])\ntables = EnumSort([1, 2, 3])\nseated = Function([sponsors, tables] -> [bool])\n\n# Constraints\nForAll([s:sponsors], Count([t:tables], seated(s, t)) == 1) ::: each sponsor is seated at exactly one table\nForAll([t:tables], Count([s:sponsors], seated(s, t)) >= 2) ::: Each table has at least two sponsors seated at it\nAnd(seated(K, 1), seated(L, 1), seated(M, 1)) ::: Any sponsor receiving honors is seated at table 1 or table 2\nseated(L, t) == seated(V, t) ::: L is seated at the same table as V\n\n# Options\nQuestion ::: If Q is assigned to table 1 along with two other sponsors, which one of the following could be true of the seating assignment?\nis_sat(And(seated(K, t), seated(L, t))) ::: (A)\nis_sat(And(seated(K, t), seated(Q, t))) ::: (B)\nis_sat(And(seated(M, t), seated(V, t))) ::: (C)\nis_sat(And(seated(M, t), seated(Z, t))) ::: (D)\nis_sat(And(seated(P, t), seated(Q, t))) ::: (E)\n------\nProblem:\nA company has six employees—F, G, H, J, K, and L—who work in either the accounting, human resources, or public relations department. The following conditions apply: F and G work in the same department. H and J work in different departments. K and L work in different departments. F and J work in different departments.\nQuestion:\nIf H works in the accounting department, which one of the following must be true?\nChoices:\n(A) F works in the human resources department.\n(B) G works in the human resources department."
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_1_5",
    "context": "At a benefit dinner, a community theater's seven sponsors—K, L, M, P, Q, V, and Z—will be seated at three tables—1, 2, and 3. Of the sponsors, only K, L, and M will receive honors, and only M, P, and Q will give a speech. The sponsors' seating assignments must conform to the following conditions: Each table has at least two sponsors seated at it, and each sponsor is seated at exactly one table. Any sponsor receiving honors is seated at table 1 or table 2. L is seated at the same table as V.",
    "question": "If the sponsors assigned to table 3 include exactly one of the sponsors who will give a speech, then the sponsors assigned to table 1 could include any of the following EXCEPT:",
    "answer": "E",
    "options": [
      "A) K",
      "B) M",
      "C) P",
      "D) Q",
      "E) Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nsponsors = EnumSort([K, L, M, P, Q, V, Z])\ntables = EnumSort([1, 2, 3])\nseated = Function([sponsors, tables] -> [bool])\n\n# Constraints\nForAll([s:sponsors], Count([t:tables], seated(s, t)) == 1) ::: each sponsor is seated at exactly one table\nForAll([t:tables], Count([s:sponsors], seated(s, t)) >= 2) ::: Each table has at least two sponsors seated at it\nAnd(seated(K, 1), seated(L, 1), seated(M, 1), seated(P, 1), seated(Q, 1), seated(V, 1), seated(Z, 1)) ::: Any sponsor receiving honors is seated at table 1 or table 2\nseated(L, t) == seated(V, t) ::: L is seated at the same table as V\n\n# Options\nQuestion ::: If the sponsors assigned to table 3 include exactly one of the sponsors who will give a speech, then the sponsors assigned to table 1 could include any of the following EXCEPT:\nis_exception(is_sat(seated(K, 1))) ::: (A)\nis_exception(is_sat(seated(M, 1))) ::: (B)\nis_exception(is_sat(seated(P, 1))) ::: (C)\nis_exception(is_sat(seated(Q, 1))) ::: (D)\nis_exception(is_sat(seated(Z, 1))) ::: (E)\n------\nProblem:\nA company has six employees—F, G, H, J, K, and L—who work in either the accounting, human resources, or public relations department. The following conditions apply: F and G work in the same department. H and J work in different departments. K and L work in different departments. F and H work in different departments.\nQuestion:\nIf J works in the accounting department, then which one of the following must be true?\nChoices"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_1_6",
    "context": "At a benefit dinner, a community theater's seven sponsors—K, L, M, P, Q, V, and Z—will be seated at three tables—1, 2, and 3. Of the sponsors, only K, L, and M will receive honors, and only M, P, and Q will give a speech. The sponsors' seating assignments must conform to the following conditions: Each table has at least two sponsors seated at it, and each sponsor is seated at exactly one table. Any sponsor receiving honors is seated at table 1 or table 2. L is seated at the same table as V.",
    "question": "If three sponsors, exactly two of whom are receiving honors, are assigned to table 2, which one of the following could be the list of sponsors assigned to table 1?",
    "answer": "B",
    "options": [
      "A) K, M",
      "B) K, Z",
      "C) P, V",
      "D) P, Z",
      "E) Q, Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nsponsors = EnumSort([K, L, M, P, Q, V, Z])\ntables = EnumSort([1, 2, 3])\nseated = Function([sponsors, tables] -> [bool])\n\n# Constraints\nForAll([s:sponsors], Count([t:tables], seated(s, t)) == 1) ::: each sponsor is seated at exactly one table\nForAll([t:tables], Count([s:sponsors], seated(s, t)) >= 2) ::: Each table has at least two sponsors seated at it\nAnd(seated(K, 1), seated(L, 1), seated(M, 1)) ::: Any sponsor receiving honors is seated at table 1 or table 2\nseated(L, t) == seated(V, t) ::: L is seated at the same table as V\n\n# Options\nQuestion ::: If three sponsors, exactly two of whom are receiving honors, are assigned to table 2, which one of the following could be the list of sponsors assigned to table 1?\nis_sat(And(seated(K, 1), seated(M, 1))) ::: A) K, M\nis_sat(And(seated(K, 1), seated(Z, 1))) ::: B) K, Z\nis_sat(And(seated(P, 1), seated(V, 1))) ::: C) P, V\nis_sat(And(seated(P, 1), seated(Z, 1))) ::: D) P, Z\nis_sat(And(seated(Q, 1), seated(Z, 1))) ::: E) Q, Z\n------\nProblem:\nA company has six employees—F, G, H, J, K, and L—who work in either the accounting, human resources, or public relations department. The following conditions apply: F and G work in the same department. H and J work in different departments. K and L work in different departments. F and H work in different departments.\nQuestion:\nIf J works in the accounting department, which one of the following must be"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_1_7",
    "context": "At a benefit dinner, a community theater's seven sponsors—K, L, M, P, Q, V, and Z—will be seated at three tables—1, 2, and 3. Of the sponsors, only K, L, and M will receive honors, and only M, P, and Q will give a speech. The sponsors' seating assignments must conform to the following conditions: Each table has at least two sponsors seated at it, and each sponsor is seated at exactly one table. Any sponsor receiving honors is seated at table 1 or table 2. L is seated at the same table as V.",
    "question": "Which one of the following conditions, if added to the existing conditions, results in a set of conditions to which no seating assignment for the sponsors can conform?",
    "answer": "B",
    "options": [
      "A) At most two sponsors are seated at table 1.",
      "B) Any sponsor giving a speech is seated at table 1 or else table 2.",
      "C) Any sponsor giving a speech is seated at table 2 or else table 3.",
      "D) Exactly three of the sponsors are seated at table 1.",
      "E) Any table at which both L and V are seated also has a third sponsor seated at it."
    ],
    "raw_logic_programs": [
      "# Declarations\nsponsors = EnumSort([K, L, M, P, Q, V, Z])\ntables = EnumSort([1, 2, 3])\nseated = Function([sponsors, tables] -> [bool])\n\n# Constraints\nForAll([s:sponsors], Count([t:tables], seated(s, t)) == 1) ::: each sponsor is seated at exactly one table\nForAll([t:tables], Count([s:sponsors], seated(s, t)) >= 2) ::: Each table has at least two sponsors seated at it\nAnd(seated(K, 1), seated(L, 1), seated(M, 1), seated(P, 1), seated(Q, 1), seated(V, 1), seated(Z, 1)) ::: Any sponsor receiving honors is seated at table 1 or table 2\nAnd(seated(M, 1), seated(P, 1), seated(Q, 1), seated(V, 1), seated(Z, 1)) ::: Any sponsor giving a speech is seated at table 1 or else table 2\nseated(L, t) == seated(V, t) ::: L is seated at the same table as V\n\n# Options\nQuestion ::: Which one of the following conditions, if added to the existing conditions, results in a set of conditions to which no seating assignment for the sponsors can conform?\nis_exception(is_sat(ForAll([t:tables], Count([s:sponsors], seated(s, t)) <= 2))) ::: (A)\nis_exception(is_sat(And(seated(M, 1), seated(P, 1), seated(Q, 1), seated(V, 1), seated(Z, 1)))) ::: (B)\nis_exception(is_sat(And(seated(M, 2), seated(P, 2), seated(Q, 2), seated(V, 2), seated(Z, 2)))) ::: (C)\nis_exception(is_sat(Count([s"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_2_8",
    "context": "Exactly four medical training sessions—M, O, R, and S—will be scheduled for four consecutive days—day 1 through day 4—one session each day. Six professionals—three nurses and three psychologists—will teach the sessions. The nurses are Fine, Johnson, and Leopold; the psychologists are Tyler, Vitale, and Wong. Each session will be taught by exactly one nurse and exactly one psychologist. The schedule must conform to the following conditions: Each professional teaches at least once. Day 3 is a day on which Leopold teaches. Neither Fine nor Leopold teaches with Tyler. Johnson teaches session S only. Session M is taught on the day after the day on which session S is taught.",
    "question": "If session R is the only session for which Leopold is scheduled, which one of the following is a pair of professionals who could be scheduled for day 2 together?",
    "answer": "B",
    "options": [
      "A) Fine and Tyler",
      "B) Fine and Wong",
      "C) Johnson and Tyler",
      "D) Johnson and Wong",
      "E) Leopold and Wong"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([day1, day2, day3, day4])\nsessions = EnumSort([M, O, R, S])\nprofessionals = EnumSort([Fine, Johnson, Leopold, Tyler, Vitale, Wong])\nnurses = EnumSort([Fine, Johnson, Leopold])\npsychologists = EnumSort([Tyler, Vitale, Wong])\nteaches = Function([professionals, days, sessions] -> [bool])\n\n# Constraints\nForAll([p:professionals], Count([d:days], teaches(p, d, _)) >= 1) ::: Each professional teaches at least once\nAnd(teaches(Leopold, day3, _), teaches(Leopold, _, _)) ::: Day 3 is a day on which Leopold teaches\nForAll([p:professionals], Implies(teaches(Fine, _, _), Not(teaches(Fine, _, _)))) ::: Neither Fine nor Leopold teaches with Tyler\nteaches(Johnson, _, S) ::: Johnson teaches session S only\nAnd(teaches(_, day2, _), teaches(_, day3, _)) ::: Session M is taught on the day after the day on which session S is taught\n\n# Options\nQuestion ::: If session R is the only session for which Leopold is scheduled, which one of the following is a pair of professionals who could be scheduled for day 2 together?\nis_valid(Exists([p1:professionals, p2:professionals], And(teaches(p1, day2, _), teaches(p2, day2, _)))) ::: A) Fine and Tyler\nis_valid(Exists([p1:professionals, p2:professionals], And(teaches(p1, day2, _), teaches(p2, day2, _)))) ::: B) Fine and Wong\nis_valid(Exists([p1:professionals, p2:professionals], And(teaches(p1, day2, _), teaches(p2, day2, _)))) ::: C) Johnson and Tyler\nis_valid(Exists([p1:professionals, p2:professionals"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_2_9",
    "context": "Exactly four medical training sessions—M, O, R, and S—will be scheduled for four consecutive days—day 1 through day 4—one session each day. Six professionals—three nurses and three psychologists—will teach the sessions. The nurses are Fine, Johnson, and Leopold; the psychologists are Tyler, Vitale, and Wong. Each session will be taught by exactly one nurse and exactly one psychologist. The schedule must conform to the following conditions: Each professional teaches at least once. Day 3 is a day on which Leopold teaches. Neither Fine nor Leopold teaches with Tyler. Johnson teaches session S only. Session M is taught on the day after the day on which session S is taught.",
    "question": "Which one of the following must be false?",
    "answer": "B",
    "options": [
      "A) Session O is scheduled for day 1.",
      "B) Session S is scheduled for day 3.",
      "C) Leopold is scheduled for day 1.",
      "D) Vitale is scheduled for day 4.",
      "E) Wong is scheduled for day 1."
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([day1, day2, day3, day4])\nsessions = EnumSort([M, O, R, S])\nprofessionals = EnumSort([Fine, Johnson, Leopold, Tyler, Vitale, Wong])\nteaches = Function([professionals, days] -> [sessions])\n\n# Constraints\nForAll([p:professionals], Count([d:days], teaches(p, d)) >= 1) ::: Each professional teaches at least once\nteaches(Leopold, day3) ::: Day 3 is a day on which Leopold teaches\nForAll([p:professionals], Implies(teaches(Fine, p), Not(teaches(Tyler, p)))) ::: Neither Fine nor Leopold teaches with Tyler\nteaches(Johnson, S) ::: Johnson teaches session S only\nteaches(M, day2) ::: Session M is taught on the day after the day on which session S is taught\n\n# Options\nQuestion ::: Which one of the following must be false?\nis_exception(is_sat(teaches(O, day1))) ::: (A)\nis_exception(is_sat(teaches(S, day3))) ::: (B)\nis_exception(is_sat(teaches(Leopold, day1))) ::: (C)\nis_exception(is_sat(teaches(Vitale, day4))) ::: (D)\nis_exception(is_sat(teaches(Wong, day1))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_2_10",
    "context": "Exactly four medical training sessions—M, O, R, and S—will be scheduled for four consecutive days—day 1 through day 4—one session each day. Six professionals—three nurses and three psychologists—will teach the sessions. The nurses are Fine, Johnson, and Leopold; the psychologists are Tyler, Vitale, and Wong. Each session will be taught by exactly one nurse and exactly one psychologist. The schedule must conform to the following conditions: Each professional teaches at least once. Day 3 is a day on which Leopold teaches. Neither Fine nor Leopold teaches with Tyler. Johnson teaches session S only. Session M is taught on the day after the day on which session S is taught.",
    "question": "Which one of the following could be the session and the professionals scheduled for day 4 ?",
    "answer": "D",
    "options": [
      "A) session M, Fine, Wong",
      "B) session O, Fine, Tyler",
      "C) session O, Johnson, Tyler",
      "D) session R, Fine, Wong",
      "E) session S, Fine, Vitale"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([day1, day2, day3, day4])\nsessions = EnumSort([M, O, R, S])\nprofessionals = EnumSort([Fine, Johnson, Leopold, Tyler, Vitale, Wong])\nnurses = EnumSort([Fine, Johnson, Leopold])\npsychologists = EnumSort([Tyler, Vitale, Wong])\nteaches = Function([days, sessions, professionals] -> [bool])\n\n# Constraints\nForAll([p:professionals], Count([d:days], teaches(d, sessions, p)) >= 1) ::: Each professional teaches at least once\nAnd(teaches(day3, sessions, Leopold), teaches(day3, sessions, Tyler)) ::: Day 3 is a day on which Leopold teaches\nAnd(teaches(day3, sessions, Fine), teaches(day3, sessions, Vitale)) ::: Neither Fine nor Leopold teaches with Tyler\nteaches(day4, sessions, Johnson) ::: Johnson teaches session S only\nAnd(teaches(day3, sessions, M), teaches(day2, sessions, S)) ::: Session M is taught on the day after the day on which session S is taught\n\n# Options\nQuestion ::: Which one of the following could be the session and the professionals scheduled for day 4?\nis_sat(And(teaches(day4, sessions, M), teaches(day4, sessions, Fine), teaches(day4, sessions, Wong))) ::: A) session M, Fine, Wong\nis_"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_2_11",
    "context": "Exactly four medical training sessions—M, O, R, and S—will be scheduled for four consecutive days—day 1 through day 4—one session each day. Six professionals—three nurses and three psychologists—will teach the sessions. The nurses are Fine, Johnson, and Leopold; the psychologists are Tyler, Vitale, and Wong. Each session will be taught by exactly one nurse and exactly one psychologist. The schedule must conform to the following conditions: Each professional teaches at least once. Day 3 is a day on which Leopold teaches. Neither Fine nor Leopold teaches with Tyler. Johnson teaches session S only. Session M is taught on the day after the day on which session S is taught.",
    "question": "If session S is scheduled for day 2, which one of the following is a professional who must be scheduled to teach session M ?",
    "answer": "B",
    "options": [
      "A) Fine",
      "B) Leopold",
      "C) Tyler",
      "D) Vitale",
      "E) Wong"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([day1, day2, day3, day4])\nsessions = EnumSort([M, O, R, S])\nprofessionals = EnumSort([Fine, Johnson, Leopold, Tyler, Vitale, Wong])\nnurses = EnumSort([Fine, Johnson, Leopold])\npsychologists = EnumSort([Tyler, Vitale, Wong])\nteaches = Function([professionals, sessions] -> [bool])\n\n# Constraints\nForAll([p:professionals], Count([s:sessions], teaches(p, s)) >= 1) ::: Each professional teaches at least once\nAnd(teaches(Leopold, M), teaches(Leopold, O), teaches(Leopold, R), teaches(Leopold, S)) ::: Day 3 is a day on which Leopold teaches\nAnd(teaches(Fine, M), teaches(Fine, O), teaches(Fine, R), teaches(Fine, S)) ::: Neither Fine nor Leopold teaches with Tyler\nAnd(teaches(Johnson, M), teaches(Johnson, O), teaches(Johnson, R), teaches(Johnson, S)) ::: Johnson teaches session S only\nAnd(teaches(M, day1), teaches(M, day2), teaches(M, day3), teaches(M, day4)) ::: Session M is taught on the day after the day on which session S is taught\n\n# Options\nQuestion ::: If session S is scheduled for day 2, which one"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_2_12",
    "context": "Exactly four medical training sessions—M, O, R, and S—will be scheduled for four consecutive days—day 1 through day 4—one session each day. Six professionals—three nurses and three psychologists—will teach the sessions. The nurses are Fine, Johnson, and Leopold; the psychologists are Tyler, Vitale, and Wong. Each session will be taught by exactly one nurse and exactly one psychologist. The schedule must conform to the following conditions: Each professional teaches at least once. Day 3 is a day on which Leopold teaches. Neither Fine nor Leopold teaches with Tyler. Johnson teaches session S only. Session M is taught on the day after the day on which session S is taught.",
    "question": "If session O and session R are scheduled for consecutive days, which one of the following is a pair of professionals who could be scheduled for day 2 together?",
    "answer": "B",
    "options": [
      "A) Fine and Leopold",
      "B) Fine and Wong",
      "C) Johnson and Tyler",
      "D) Johnson and Vitale",
      "E) Leopold and Tyler"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([day1, day2, day3, day4])\nsessions = EnumSort([M, O, R, S])\nprofessionals = EnumSort([Fine, Johnson, Leopold, Tyler, Vitale, Wong])\nnurses = EnumSort([Fine, Johnson, Leopold])\npsychologists = EnumSort([Tyler, Vitale, Wong])\nteaches = Function([days, sessions, professionals] -> [bool])\n\n# Constraints\nForAll([p:professionals], Count([d:days], teaches(d, _, p)) >= 1) ::: Each professional teaches at least once\nteaches(day3, _, Leopold) ::: Day 3 is a day on which Leopold teaches\nForAll([p:professionals], Implies(p == Tyler, Not(teaches(_, _, p)))) ::: Neither Fine nor Leopold teaches with Tyler\nteaches(_, S, Johnson) ::: Johnson teaches session S only\nteaches(_, M, _) ::: Session M is taught on the day after the day on which session S is taught\n\n# Options\nQuestion ::: If session O and session R are scheduled for consecutive days, which one of the following is a pair of professionals who could be scheduled for day 2 together?\nis_sat(And(teaches(day2, O, Fine), teaches(day2, O, Leopold))) ::: (A)\nis_sat(And(teaches(day2, O, Fine), teaches(day2, O, Wong))) ::: (B)"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_2_13",
    "context": "Exactly four medical training sessions—M, O, R, and S—will be scheduled for four consecutive days—day 1 through day 4—one session each day. Six professionals—three nurses and three psychologists—will teach the sessions. The nurses are Fine, Johnson, and Leopold; the psychologists are Tyler, Vitale, and Wong. Each session will be taught by exactly one nurse and exactly one psychologist. The schedule must conform to the following conditions: Each professional teaches at least once. Day 3 is a day on which Leopold teaches. Neither Fine nor Leopold teaches with Tyler. Johnson teaches session S only. Session M is taught on the day after the day on which session S is taught.",
    "question": "Which one of the following could be the order in which the nurses teach the sessions, listed from day 1 through day 4?",
    "answer": "A",
    "options": [
      "A) Fine, Johnson, Leopold, Leopold",
      "B) Fine, Leopold, Leopold, Johnson",
      "C) Johnson, Johnson, Leopold, Fine",
      "D) Johnson, Leopold, Leopold, Johnson",
      "E) Leopold, Leopold, Fine, Fine"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([day1, day2, day3, day4])\nsessions = EnumSort([M, O, R, S])\nprofessionals = EnumSort([Fine, Johnson, Leopold, Tyler, Vitale, Wong])\nnurses = EnumSort([Fine, Johnson, Leopold])\npsychologists = EnumSort([Tyler, Vitale, Wong])\nteaches = Function([professionals, days] -> [sessions])\n\n# Constraints\nForAll([p:professionals], Count([d:days], teaches(p, d)) >= 1) ::: Each professional teaches at least once\nteaches(Leopold, day3) ::: Day 3 is a day on which Leopold teaches\nForAll([p:professionals], Implies(p == Fine, Not(teaches(p, d) == teaches(Tyler, d)))) ::: Neither Fine nor Leopold teaches with Tyler\nForAll([p:professionals], Implies(p == Leopold, Not(teaches(p, d) == teaches(Tyler, d)))) ::: Neither Fine nor Leopold teaches with Tyler\nteaches(Johnson, S) ::: Johnson teaches session S only\nteaches(M, day2) ::: Session M is taught on the day after the day on which session S is taught\n\n# Options\nQuestion ::: Which one of the following could be the order in which the nurses teach the sessions, listed from day 1 through day 4?\nis_valid(Exists([d:days], teaches(Fine"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_2_14",
    "context": "Exactly four medical training sessions—M, O, R, and S—will be scheduled for four consecutive days—day 1 through day 4—one session each day. Six professionals—three nurses and three psychologists—will teach the sessions. The nurses are Fine, Johnson, and Leopold; the psychologists are Tyler, Vitale, and Wong. Each session will be taught by exactly one nurse and exactly one psychologist. The schedule must conform to the following conditions: Each professional teaches at least once. Day 3 is a day on which Leopold teaches. Neither Fine nor Leopold teaches with Tyler. Johnson teaches session S only. Session M is taught on the day after the day on which session S is taught.",
    "question": "If session O is scheduled for day 3, which one of the following must be scheduled for day 4?",
    "answer": "A",
    "options": [
      "A) session R",
      "B) session S",
      "C) Fine",
      "D) Leopold",
      "E) Vitale"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([day1, day2, day3, day4])\nsessions = EnumSort([M, O, R, S])\nprofessionals = EnumSort([Fine, Johnson, Leopold, Tyler, Vitale, Wong])\nteaches = Function([professionals, sessions] -> [bool])\n\n# Constraints\nForAll([p:professionals], Count([s:sessions], teaches(p, s)) >= 1) ::: Each professional teaches at least once\nAnd(teaches(Leopold, M), teaches(Leopold, O), teaches(Leopold, R), teaches(Leopold, S)) ::: Day 3 is a day on which Leopold teaches\nAnd(teaches(Fine, M), teaches(Fine, O), teaches(Fine, R), teaches(Fine, S)) ::: Neither Fine nor Leopold teaches with Tyler\nAnd(teaches(Johnson, M), teaches(Johnson, O), teaches(Johnson, R), teaches(Johnson, S)) ::: Johnson teaches session S only\nAnd(teaches(M, S), teaches(O, S), teaches(R, S), teaches(S, S)) ::: Session M is taught on the day after the day on which session S is taught\n\n# Options\nQuestion ::: If session O is scheduled for day 3, which one of the following must be scheduled for day 4?\nis_sat(ForAll([s:sessions], teaches(s, day4))) ::: A) session R"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_3_15",
    "context": "Six paintings hang next to each other as shown below: Each of the paintings is an oil or else a watercolor. Each oil is directly beside, directly above, or directly below another oil. Each watercolor is directly beside, directly above, or directly below another watercolor. Each painting is a nineteenth-century painting or else a twentieth-century painting. Each painting is directly beside, directly above, or directly below another painting painted in the same century. Painting 2 is a nineteenth-century painting. Painting 3 is an oil. Painting 5 is a twentieth-century painting.",
    "question": "If all of the nineteenth-century paintings are watercolors, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Painting 1 is an oil.",
      "B) Painting 3 is a nineteenth-century painting.",
      "C) Painting 4 is a watercolor.",
      "D) Painting 5 is an oil.",
      "E) Painting 6 is a twentieth-century painting."
    ],
    "raw_logic_programs": [
      "# Declarations\npaintings = EnumSort([1, 2, 3, 4, 5, 6])\ncenturies = EnumSort([nineteenth, twentieth])\noils = EnumSort([oil])\nwatercolors = EnumSort([watercolor])\ntypes = EnumSort([oils, watercolors])\ncenturies_of_paintings = Function([paintings] -> [centuries])\ntypes_of_paintings = Function([paintings] -> [types])\n\n# Constraints\nForAll([p:paintings], Or(types_of_paintings(p) == oils, types_of_paintings(p) == watercolors)) ::: Each of the paintings is an oil or else a watercolor\nForAll([p:paintings], Or(centuries_of_paintings(p) == nineteenth, centuries_of_paintings(p) == twentieth)) ::: Each painting is a nineteenth-century painting or else a twentieth-century painting\nForAll([p:paintings], Or(types_of_paintings(p) == types_of_paintings(p + 1), types_of_paintings(p) == types_of_paintings(p - 1), types_of_paintings(p) == types_of_paintings(p + 2))) ::: Each oil is directly beside, directly above, or directly below another oil\nForAll([p:paintings], Or(types_of_paintings(p) == types_of"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_3_16",
    "context": "Six paintings hang next to each other as shown below: Each of the paintings is an oil or else a watercolor. Each oil is directly beside, directly above, or directly below another oil. Each watercolor is directly beside, directly above, or directly below another watercolor. Each painting is a nineteenth-century painting or else a twentieth-century painting. Each painting is directly beside, directly above, or directly below another painting painted in the same century. Painting 2 is a nineteenth-century painting. Painting 3 is an oil. Painting 5 is a twentieth-century painting.",
    "question": "It is possible that the only two watercolors among the six paintings are",
    "answer": "D",
    "options": [
      "A) paintings 1 and 5",
      "B) paintings 1 and 6",
      "C) paintings 2 and 4",
      "D) paintings 4 and 5",
      "E) paintings 4 and 6"
    ],
    "raw_logic_programs": [
      "# Declarations\npaintings = EnumSort([1, 2, 3, 4, 5, 6])\noils = EnumSort([1, 2, 3, 4, 5, 6])\nwatercolors = EnumSort([1, 2, 3, 4, 5, 6])\nnineteenth_century = EnumSort([1, 2, 3, 4, 5, 6])\ntwentieth_century = EnumSort([1, 2, 3, 4, 5, 6])\n\n# Constraints\nForAll([p:paintings], Or(p in oils, p in watercolors)) ::: Each of the paintings is an oil or else a watercolor\nForAll([p:paintings], Or(p in nineteenth_century, p in twentieth_century)) ::: Each painting is a nineteenth-century painting or else a twentieth-century painting\nForAll([p:paintings], Or(p in oils, p in watercolors)) ::: Each of the paintings is an oil or else a watercolor\nForAll([p:paintings], Or(p in nineteenth_century, p in twentieth_century)) ::: Each painting is a nineteenth-century painting or else a twentieth-century painting\nForAll([p:paintings], Or(p in oils, p in watercolors)) ::: Each of the paintings is an oil or else a watercolor\nForAll([p:paintings], Or(p in nineteenth_century, p"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_3_17",
    "context": "Six paintings hang next to each other as shown below: Each of the paintings is an oil or else a watercolor. Each oil is directly beside, directly above, or directly below another oil. Each watercolor is directly beside, directly above, or directly below another watercolor. Each painting is a nineteenth-century painting or else a twentieth-century painting. Each painting is directly beside, directly above, or directly below another painting painted in the same century. Painting 2 is a nineteenth-century painting. Painting 3 is an oil. Painting 5 is a twentieth-century painting.",
    "question": "If there are exactly three oils and three watercolors, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Painting 1 is a watercolor.",
      "B) Painting 2 is a watercolor.",
      "C) Painting 4 is a watercolor.",
      "D) Painting 5 is a watercolor.",
      "E) Painting 6 is a watercolor."
    ],
    "raw_logic_programs": [
      "# Declarations\npaintings = EnumSort([1, 2, 3, 4, 5, 6])\noils = EnumSort([1, 2, 3])\nwatercolors = EnumSort([1, 2, 3])\nnineteenth_century = EnumSort([1, 2, 3])\ntwentieth_century = EnumSort([1, 2, 3])\n\n# Constraints\nForAll([p:paintings], Or(p == oils, p == watercolors)) ::: Each of the paintings is an oil or else a watercolor\nForAll([p:paintings], Or(p == nineteenth_century, p == twentieth_century)) ::: Each painting is a nineteenth-century painting or else a twentieth-century painting\nForAll([p:paintings], Or(p == oils, p == watercolors)) ::: Each of the paintings is an oil or else a watercolor\nForAll([p:paintings], Or(p == nineteenth_century, p == twentieth_century)) ::: Each painting is a nineteenth-century painting or else a twentieth-century painting\nForAll([p:paintings], Or(p == oils, p == watercolors)) ::: Each of the paintings is an oil or else a watercolor\nForAll([p:paintings], Or(p == nineteenth_century, p == twentieth_century)) ::: Each painting is a nineteenth-century painting or else a twentieth-century painting\nForAll([p:paint"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_3_18",
    "context": "Six paintings hang next to each other as shown below: Each of the paintings is an oil or else a watercolor. Each oil is directly beside, directly above, or directly below another oil. Each watercolor is directly beside, directly above, or directly below another watercolor. Each painting is a nineteenth-century painting or else a twentieth-century painting. Each painting is directly beside, directly above, or directly below another painting painted in the same century. Painting 2 is a nineteenth-century painting. Painting 3 is an oil. Painting 5 is a twentieth-century painting.",
    "question": "If exactly two paintings are oils and exactly two paintings are nineteenth-century paintings, which one of the following must be false?",
    "answer": "E",
    "options": [
      "A) Painting 1 is a nineteenth-century painting, and painting 6 is an oil.",
      "B) Painting 2 is both a nineteenth-century painting and an oil.",
      "C) Painting 3 is a nineteenth-century painting.",
      "D) Paintings 1 and 2 are both nineteenth-century paintings.",
      "E) Painting 2 is an oil, and painting 4 is a nineteenth-century painting."
    ],
    "raw_logic_programs": [
      "# Declarations\npaintings = EnumSort([1, 2, 3, 4, 5, 6])\ncenturies = EnumSort([nineteenth, twentieth])\noils = EnumSort([oil])\nwatercolors = EnumSort([watercolor])\ntypes = EnumSort([oil, watercolor])\ncenturies_types = EnumSort([nineteenth_oil, nineteenth_watercolor, twentieth_oil, twentieth_watercolor])\ntypes_centuries = EnumSort([oil_nineteenth, oil_twentieth, watercolor_nineteenth, watercolor_twentieth])\npainting = Function([paintings] -> [types_centuries])\n\n# Constraints\nForAll([p:paintings], Count([t:types], painting(p) == t) == 1) ::: Each of the paintings is an oil or else a watercolor\nForAll([p:paintings], Count([c:centuries], painting(p) == c) == 1) ::: Each of the paintings is a nineteenth-century painting or else a twentieth-century painting\nForAll([p:paintings], painting(p) == oil_nineteenth | painting(p) == oil_twentieth) ::: Each oil is directly beside, directly above, or directly below another oil\nForAll([p:paintings], painting(p) == watercolor_nineteenth | painting(p) == watercolor_twentieth) ::: Each watercolor is directly beside, directly above"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_3_19",
    "context": "Six paintings hang next to each other as shown below: Each of the paintings is an oil or else a watercolor. Each oil is directly beside, directly above, or directly below another oil. Each watercolor is directly beside, directly above, or directly below another watercolor. Each painting is a nineteenth-century painting or else a twentieth-century painting. Each painting is directly beside, directly above, or directly below another painting painted in the same century. Painting 2 is a nineteenth-century painting. Painting 3 is an oil. Painting 5 is a twentieth-century painting.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Paintings 1 and 4 are two of exactly three twentieth-century paintings.",
      "B) Paintings 1 and 6 are two of exactly three twentieth-century paintings.",
      "C) Paintings 1 and 6 are two of exactly three nineteenth-century paintings.",
      "D) Paintings 3 and 4 are two of exactly three nineteenth-century paintings.",
      "E) Paintings 4 and 6 are two of exactly three nineteenth-century paintings."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_4_20",
    "context": "Exactly six of seven jugglers—G, H, K, L, N, P, and Q—are each assigned to exactly one of three positions—front, middle, and rear—on one of two teams—team 1 and team 2. For each team, exactly one juggler must be assigned to each position according to the following conditions: If either G or H or both are assigned to teams, they are assigned to front positions. If assigned to a team, K is assigned to a middle position. If assigned to a team, L is assigned to team 1. Neither P nor K is on the same team as N. P is not on the same team as Q. If H is on team 2, then Q is assigned to the middle position on team 1.",
    "question": "Which one of the following is an acceptable list of assignments of jugglers to team 2?",
    "answer": "E",
    "options": [
      "A) front: Q; middle: K; rear: N",
      "B) front: H; middle: P; rear: K",
      "C) front: H; middle: L; near: N",
      "D) front: G; middle: Q; rear: P",
      "E) front: G; middle: Q; rear: N"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_4_21",
    "context": "Exactly six of seven jugglers—G, H, K, L, N, P, and Q—are each assigned to exactly one of three positions—front, middle, and rear—on one of two teams—team 1 and team 2. For each team, exactly one juggler must be assigned to each position according to the following conditions: If either G or H or both are assigned to teams, they are assigned to front positions. If assigned to a team, K is assigned to a middle position. If assigned to a team, L is assigned to team 1. Neither P nor K is on the same team as N. P is not on the same team as Q. If H is on team 2, then Q is assigned to the middle position on team 1.",
    "question": "If H is assigned to team 2, which one of the following is an acceptable assignment of jugglers to team 1?",
    "answer": "E",
    "options": [
      "A) front: G; middle: K; rear: L",
      "B) front: G; middle: K; rear: N",
      "C) front: L; middle: K; rear: P",
      "D) front: L; middle: Q; rear: G",
      "E) front: L; middle: Q; rear: N"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_4_22",
    "context": "Exactly six of seven jugglers—G, H, K, L, N, P, and Q—are each assigned to exactly one of three positions—front, middle, and rear—on one of two teams—team 1 and team 2. For each team, exactly one juggler must be assigned to each position according to the following conditions: If either G or H or both are assigned to teams, they are assigned to front positions. If assigned to a team, K is assigned to a middle position. If assigned to a team, L is assigned to team 1. Neither P nor K is on the same team as N. P is not on the same team as Q. If H is on team 2, then Q is assigned to the middle position on team 1.",
    "question": "Which one of the following is an acceptable list of assignments of jugglers to team 1?",
    "answer": "E",
    "options": [
      "A) front: G; middle: K; rear: L",
      "B) front: G; middle: K; rear: P",
      "C) front: L; middle: K; rear: Q",
      "D) front: Q; middle: K; rear: P",
      "E) front: Q; middle: L; rear: N"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_4_23",
    "context": "Exactly six of seven jugglers—G, H, K, L, N, P, and Q—are each assigned to exactly one of three positions—front, middle, and rear—on one of two teams—team 1 and team 2. For each team, exactly one juggler must be assigned to each position according to the following conditions: If either G or H or both are assigned to teams, they are assigned to front positions. If assigned to a team, K is assigned to a middle position. If assigned to a team, L is assigned to team 1. Neither P nor K is on the same team as N. P is not on the same team as Q. If H is on team 2, then Q is assigned to the middle position on team 1.",
    "question": "If G is assigned to team 1, which one of the following is a pair of jugglers who could also be assigned to team 1?",
    "answer": "E",
    "options": [
      "A) H and N",
      "B) K and L",
      "C) K and P",
      "D) L and N",
      "E) L and Q"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199706_3-G_4_24",
    "context": "Exactly six of seven jugglers—G, H, K, L, N, P, and Q—are each assigned to exactly one of three positions—front, middle, and rear—on one of two teams—team 1 and team 2. For each team, exactly one juggler must be assigned to each position according to the following conditions: If either G or H or both are assigned to teams, they are assigned to front positions. If assigned to a team, K is assigned to a middle position. If assigned to a team, L is assigned to team 1. Neither P nor K is on the same team as N. P is not on the same team as Q. If H is on team 2, then Q is assigned to the middle position on team 1.",
    "question": "If G is assigned to team 1 and K is assigned to team 2, which one of the following must be assigned the rear position on team 2?",
    "answer": "D",
    "options": [
      "A) H",
      "B) L",
      "C) N",
      "D) P",
      "E) Q"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_1_1",
    "context": "A producer is positioning exactly seven music pieces—F, G, H, J, K, L, and M—one after another on a music recording, not necessarily in that order. Each piece will fill exactly one of the seven sequential tracks on the recording, according to the following conditions: F must be second. J cannot be seventh. G can come neither immediately before nor immediately after H. H must be in some track before that of L. L must be in some track before that of M.",
    "question": "Which one of the following could be the order, from first to seventh, of the pieces on the recording?",
    "answer": "B",
    "options": [
      "A) F, K, G, J, H, L, M",
      "B) G, F, H, K, L, J, M",
      "C) G, F, H, K, L, M, J",
      "D) K, F, G, H, J, L, M",
      "E) K, F, L, J, H, M, G"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_1_2",
    "context": "A producer is positioning exactly seven music pieces—F, G, H, J, K, L, and M—one after another on a music recording, not necessarily in that order. Each piece will fill exactly one of the seven sequential tracks on the recording, according to the following conditions: F must be second. J cannot be seventh. G can come neither immediately before nor immediately after H. H must be in some track before that of L. L must be in some track before that of M.",
    "question": "If M fills some track before that of J and also before that of K on the recording, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) G is first.",
      "B) K is seventh.",
      "C) L is third.",
      "D) H comes either immediately before or immediately after F.",
      "E) L comes either immediately before or immediately after G."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_1_3",
    "context": "A producer is positioning exactly seven music pieces—F, G, H, J, K, L, and M—one after another on a music recording, not necessarily in that order. Each piece will fill exactly one of the seven sequential tracks on the recording, according to the following conditions: F must be second. J cannot be seventh. G can come neither immediately before nor immediately after H. H must be in some track before that of L. L must be in some track before that of M.",
    "question": "Which one of the following is a complete and accurate list of the pieces any of which could be first on the recording?",
    "answer": "B",
    "options": [
      "A) G, J, K",
      "B) G, H, J, K",
      "C) G, H, J, L",
      "D) G, J, K, L",
      "E) H, J, K, L, M"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_1_4",
    "context": "A producer is positioning exactly seven music pieces—F, G, H, J, K, L, and M—one after another on a music recording, not necessarily in that order. Each piece will fill exactly one of the seven sequential tracks on the recording, according to the following conditions: F must be second. J cannot be seventh. G can come neither immediately before nor immediately after H. H must be in some track before that of L. L must be in some track before that of M.",
    "question": "The earliest track that M can fill is the",
    "answer": "C",
    "options": [
      "A) first",
      "B) third",
      "C) fourth",
      "D) fifth",
      "E) sixth"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_1_5",
    "context": "A producer is positioning exactly seven music pieces—F, G, H, J, K, L, and M—one after another on a music recording, not necessarily in that order. Each piece will fill exactly one of the seven sequential tracks on the recording, according to the following conditions: F must be second. J cannot be seventh. G can come neither immediately before nor immediately after H. H must be in some track before that of L. L must be in some track before that of M.",
    "question": "If G is to come immediately before H but all the other conditions remain in effect, any of the following could be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) J comes immediately before F.",
      "B) K comes immediately before G.",
      "C) J comes immediately after L.",
      "D) J comes immediately after K.",
      "E) K comes immediately after M."
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([F, G, H, J, K, L, M])\ntracks = EnumSort([1, 2, 3, 4, 5, 6, 7])\npositions = Function([pieces, tracks] -> [bool])\n\n# Constraints\nForAll([p:pieces], Count([t:tracks], positions(p, t)) == 1) ::: Each piece will fill exactly one of the seven sequential tracks on the recording\npositions(F, 2) ::: F must be second\nNot(positions(J, 7)) ::: J cannot be seventh\nNot(And(positions(G, t), positions(H, t + 1))) ::: G can come neither immediately before nor immediately after H\npositions(H, t) > positions(L, t) ::: H must be in some track before that of L\npositions(L, t) > positions(M, t) ::: L must be in some track before that of M\n\n# Options\nQuestion ::: If G is to come immediately before H but all the other conditions remain in effect, any of the following could be true EXCEPT:\nis_exception(is_sat(And(positions(J, 1), positions(F, 2)))) ::: A) J comes immediately before F.\nis_exception(is_sat(And(positions(K, 1), positions(G, 2)))) ::: B) K comes immediately before G.\nis_exception(is_sat(And(positions(J, 6), positions(L, 7)))) ::: C) J comes immediately after L.\nis_exception(is_sat(And(positions(J, 6), positions(K, 7)))) ::: D) J comes immediately after K.\nis_exception(is_sat(And(positions(K, 6), positions(M, 7)))) ::: E) K comes immediately after M.\n------"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_2_6",
    "context": "Fu, Gunsel, Jackson, Kowalski, Lee, Mayer, and Ordoveza are the only applicants being considered for some positions at a nonprofit organization. Only applicants who are interviewed will be hired. The hiring process must meet the following constraints: If Gunsel is interviewed, Jackson is interviewed. If Jackson is interviewed, Lee is interviewed. Fu is interviewed. Fu is not hired, unless Kowalski is interviewed. Kowalski is not hired, unless Mayer is interviewed. If Mayer is hired, and Lee is interviewed, Ordoveza is hired.",
    "question": "Which one of the following could be a complete and accurate list of the applicants that are interviewed?",
    "answer": "C",
    "options": [
      "A) Fu, Gunsel",
      "B) Fu, Jackson",
      "C) Fu, Lee",
      "D) Fu, Gunsel, Lee",
      "E) Fu, Gunsel, Jackson"
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Fu, Gunsel, Jackson, Kowalski, Lee, Mayer, Ordoveza])\ninterviewed = Function([applicants] -> [bool])\nhired = Function([applicants] -> [bool])\n\n# Constraints\nForAll([a:applicants], Or(interviewed(a), Not(hired(a)))) ::: Only applicants who are interviewed will be hired\nAnd(interviewed(Gunsel), interviewed(Jackson)) ::: If Gunsel is interviewed, Jackson is interviewed\nAnd(interviewed(Jackson), interviewed(Lee)) ::: If Jackson is interviewed, Lee is interviewed\ninterviewed(Fu) ::: Fu is interviewed\nAnd(interviewed(Fu), Not(hired(Fu)), interviewed(Kowalski)) ::: Fu is not hired, unless Kowalski is interviewed\nAnd(interviewed(Kowalski), Not(hired(Kowalski)), interviewed(Mayer)) ::: Kowalski is not hired, unless Mayer is interviewed\nAnd(hired(Mayer), interviewed(Lee), hired(Ordoveza)) ::: If Mayer is hired, and Lee is interviewed, Ordoveza is hired\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the applicants that are interviewed?\nis_sat(ForAll([a:applicants], interviewed(a) == (a == Fu) || (a == Gunsel))) ::: A) Fu, Gunsel\nis_sat(ForAll([a:applicants], interviewed(a) == (a == Fu) || (a == Jackson))) ::: B) Fu, Jackson\nis_sat(ForAll([a:applicants], interviewed(a) == (a == Fu) || (a == Lee))) ::: C) Fu, Lee\nis_"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_2_7",
    "context": "Fu, Gunsel, Jackson, Kowalski, Lee, Mayer, and Ordoveza are the only applicants being considered for some positions at a nonprofit organization. Only applicants who are interviewed will be hired. The hiring process must meet the following constraints: If Gunsel is interviewed, Jackson is interviewed. If Jackson is interviewed, Lee is interviewed. Fu is interviewed. Fu is not hired, unless Kowalski is interviewed. Kowalski is not hired, unless Mayer is interviewed. If Mayer is hired, and Lee is interviewed, Ordoveza is hired.",
    "question": "Which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Lee and Mayer are the only applicants interviewed.",
      "B) Fu, Jackson, and Kowalski are the only applicants interviewed.",
      "C) Gunsel and one other applicant are the only applicants interviewed.",
      "D) Gunsel and two other applicants are the only applicants interviewed.",
      "E) Gunsel and three other applicants are the only applicants interviewed."
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Fu, Gunsel, Jackson, Kowalski, Lee, Mayer, Ordoveza])\ninterviewed = Function([applicants] -> [bool])\nhired = Function([applicants] -> [bool])\n\n# Constraints\nForAll([a:applicants], Or(interviewed(a), Not(hired(a)))) ::: Only applicants who are interviewed will be hired\nAnd(interviewed(Gunsel), interviewed(Jackson)) ::: If Gunsel is interviewed, Jackson is interviewed\nAnd(interviewed(Jackson), interviewed(Lee)) ::: If Jackson is interviewed, Lee is interviewed\ninterviewed(Fu) ::: Fu is interviewed\nAnd(interviewed(Fu), Not(hired(Fu)), interviewed(Kowalski)) ::: Fu is not hired, unless Kowalski is interviewed\nAnd(interviewed(Kowalski), Not(hired(Kowalski)), interviewed(Mayer)) ::: Kowalski is not hired, unless Mayer is interviewed\nAnd(hired(Mayer), interviewed(Lee), hired(Ordoveza)) ::: If Mayer is hired, and Lee is interviewed, Ordoveza is hired\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(ForAll([a:applicants], interviewed(a) == False)) ::: A) Lee and Mayer are the only applicants interviewed.\nis_sat(ForAll([a:applicants], interviewed(a) == False)) ::: B) Fu, Jackson, and Kowalski are the only applicants interviewed.\nis_sat(ForAll([a:applicants], interviewed(a) == False)) ::: C) Gunsel and one other applicant are the only applicants interviewed.\nis_sat(ForAll(["
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_2_8",
    "context": "Fu, Gunsel, Jackson, Kowalski, Lee, Mayer, and Ordoveza are the only applicants being considered for some positions at a nonprofit organization. Only applicants who are interviewed will be hired. The hiring process must meet the following constraints: If Gunsel is interviewed, Jackson is interviewed. If Jackson is interviewed, Lee is interviewed. Fu is interviewed. Fu is not hired, unless Kowalski is interviewed. Kowalski is not hired, unless Mayer is interviewed. If Mayer is hired, and Lee is interviewed, Ordoveza is hired.",
    "question": "If Mayer is not interviewed, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Kowalski is not interviewed.",
      "B) Kowalski is interviewed but not hired.",
      "C) Fu is not hired.",
      "D) Fu is hired but Kowalski is not hired.",
      "E) Fu is interviewed but Kowalski is not hired."
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Fu, Gunsel, Jackson, Kowalski, Lee, Mayer, Ordoveza])\ninterviewed = Function([applicants] -> [bool])\nhired = Function([applicants] -> [bool])\n\n# Constraints\nForAll([a:applicants], Or(interviewed(a), Not(hired(a)))) ::: Only applicants who are interviewed will be hired\nAnd(interviewed(Gunsel), interviewed(Jackson)) ::: If Gunsel is interviewed, Jackson is interviewed\nAnd(interviewed(Jackson), interviewed(Lee)) ::: If Jackson is interviewed, Lee is interviewed\ninterviewed(Fu) ::: Fu is interviewed\nAnd(interviewed(Fu), Not(hired(Fu)), interviewed(Kowalski)) ::: Fu is not hired, unless Kowalski is interviewed\nAnd(Not(hired(Kowalski)), interviewed(Mayer)) ::: Kowalski is not hired, unless Mayer is interviewed\nAnd(hired(Mayer), interviewed(Lee), hired(Ordoveza)) ::: If Mayer is hired, and Lee is interviewed, Ordoveza is hired\n\n# Options\nQuestion ::: If Mayer is not interviewed, which one of the following must be true?\nis_valid(Not(interviewed(Mayer))) ::: A) Kowalski is not interviewed.\nis_valid(Not(interviewed(Mayer))) ::: B) Kowalski is interviewed but not hired.\nis_valid(Not(interviewed(Mayer))) ::: C) Fu is not hired.\nis_valid(Not(interviewed(Mayer))) ::: D) Fu is hired but Kowalski is not hired.\nis_valid(Not(interviewed(Mayer))) ::: E) Fu is interviewed"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_2_9",
    "context": "Fu, Gunsel, Jackson, Kowalski, Lee, Mayer, and Ordoveza are the only applicants being considered for some positions at a nonprofit organization. Only applicants who are interviewed will be hired. The hiring process must meet the following constraints: If Gunsel is interviewed, Jackson is interviewed. If Jackson is interviewed, Lee is interviewed. Fu is interviewed. Fu is not hired, unless Kowalski is interviewed. Kowalski is not hired, unless Mayer is interviewed. If Mayer is hired, and Lee is interviewed, Ordoveza is hired.",
    "question": "If Gunsel and five other applicants are the only applicants interviewed, and if exactly three applicants are hired, then which one of the following could be an accurate list of the applicants hired?",
    "answer": "E",
    "options": [
      "A) Fu, Lee, Mayer",
      "B) Fu, Kowalski, Mayer",
      "C) Kowalski, Lee, Ordoveza",
      "D) Gunsel, Jackson, Mayer",
      "E) Gunsel, Jackson, Lee"
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Fu, Gunsel, Jackson, Kowalski, Lee, Mayer, Ordoveza])\ninterviewed = Function([applicants] -> [bool])\nhired = Function([applicants] -> [bool])\n\n# Constraints\nForAll([a:applicants], Implies(interviewed(a), hired(a))) ::: Only applicants who are interviewed will be hired\nImplies(interviewed(Gunsel), interviewed(Jackson)) ::: If Gunsel is interviewed, Jackson is interviewed\nImplies(interviewed(Jackson), interviewed(Lee)) ::: If Jackson is interviewed, Lee is interviewed\ninterviewed(Fu) ::: Fu is interviewed\nImplies(hired(Fu), interviewed(Kowalski)) ::: Fu is not hired, unless Kowalski is interviewed\nImplies(hired(Kowalski), interviewed(Mayer)) ::: Kowalski is not hired, unless Mayer is interviewed\nImplies(hired(Mayer), And(interviewed(Lee), hired(Ordoveza))) ::: If Mayer is hired, and Lee is interviewed, Ordoveza is hired\n\n# Options\nQuestion ::: If Gunsel and five other applicants are the only applicants interviewed, and if exactly three applicants are hired, then which one of the following could be an accurate list of the applicants hired?\nis_sat(And(interviewed(Gunsel), interviewed(Fu), interviewed(Jackson), interviewed(Kowalski), interviewed(Lee), interviewed(Mayer), interviewed(Ordoveza), hired(Fu), hired(Lee), hired(Mayer))) ::: (A)\nis_sat(And(interviewed(Gunsel), interviewed(Fu), interviewed(Jackson), interviewed(Kowal"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_2_10",
    "context": "Fu, Gunsel, Jackson, Kowalski, Lee, Mayer, and Ordoveza are the only applicants being considered for some positions at a nonprofit organization. Only applicants who are interviewed will be hired. The hiring process must meet the following constraints: If Gunsel is interviewed, Jackson is interviewed. If Jackson is interviewed, Lee is interviewed. Fu is interviewed. Fu is not hired, unless Kowalski is interviewed. Kowalski is not hired, unless Mayer is interviewed. If Mayer is hired, and Lee is interviewed, Ordoveza is hired.",
    "question": "If every applicant that is interviewed is hired, and if Lee is hired, then each of the following applicants must be interviewed EXCEPT:",
    "answer": "B",
    "options": [
      "A) Fu",
      "B) Jackson",
      "C) Kowalski",
      "D) Mayer",
      "E) Ordoveza"
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Fu, Gunsel, Jackson, Kowalski, Lee, Mayer, Ordoveza])\ninterviewed = Function([applicants] -> [bool])\nhired = Function([applicants] -> [bool])\n\n# Constraints\nForAll([a:applicants], And(interviewed(a), hired(a))) ::: Only applicants who are interviewed will be hired\nImplies(interviewed(Gunsel), interviewed(Jackson)) ::: If Gunsel is interviewed, Jackson is interviewed\nImplies(interviewed(Jackson), interviewed(Lee)) ::: If Jackson is interviewed, Lee is interviewed\ninterviewed(Fu) ::: Fu is interviewed\nImplies(hired(Fu), interviewed(Kowalski)) ::: Fu is not hired, unless Kowalski is interviewed\nImplies(hired(Kowalski), interviewed(Mayer)) ::: Kowalski is not hired, unless Mayer is interviewed\nImplies(hired(Mayer), interviewed(Lee), hired(Ordoveza)) ::: If Mayer is hired, and Lee is interviewed, Ordoveza is hired\n\n# Options\nQuestion ::: If every applicant that is interviewed is hired, and if Lee is hired, then each of the following applicants must be interviewed EXCEPT:\nis_exception(is_sat(interviewed(Fu))) ::: (A)\nis_exception(is_sat(interviewed(Jackson))) ::: (B)\nis_exception(is_sat(interviewed(Kowalski))) ::: (C)\nis_exception(is_sat(interviewed(Mayer))) ::: (D)\nis_exception(is_sat(interviewed(Ordoveza))) ::: (E)\n------\nProblem:\nA company has a total of"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_2_11",
    "context": "Fu, Gunsel, Jackson, Kowalski, Lee, Mayer, and Ordoveza are the only applicants being considered for some positions at a nonprofit organization. Only applicants who are interviewed will be hired. The hiring process must meet the following constraints: If Gunsel is interviewed, Jackson is interviewed. If Jackson is interviewed, Lee is interviewed. Fu is interviewed. Fu is not hired, unless Kowalski is interviewed. Kowalski is not hired, unless Mayer is interviewed. If Mayer is hired, and Lee is interviewed, Ordoveza is hired.",
    "question": "If Ordoveza is not interviewed, and if exactly four applicants are hired, then which one of the following must be false?",
    "answer": "B",
    "options": [
      "A) Lee is hired.",
      "B) Mayer is hired.",
      "C) Jackson is interviewed.",
      "D) Kowalski is interviewed.",
      "E) Gunsel is interviewed."
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Fu, Gunsel, Jackson, Kowalski, Lee, Mayer, Ordoveza])\ninterviewed = Function([applicants] -> [bool])\nhired = Function([applicants] -> [bool])\n\n# Constraints\nForAll([a:applicants], Or(interviewed(a), Not(hired(a)))) ::: Only applicants who are interviewed will be hired\nAnd(interviewed(Gunsel), interviewed(Jackson)) ::: If Gunsel is interviewed, Jackson is interviewed\nAnd(interviewed(Jackson), interviewed(Lee)) ::: If Jackson is interviewed, Lee is interviewed\ninterviewed(Fu) ::: Fu is interviewed\nAnd(interviewed(Fu), Not(hired(Fu)), interviewed(Kowalski)) ::: Fu is not hired, unless Kowalski is interviewed\nAnd(hired(Kowalski), interviewed(Mayer)) ::: Kowalski is not hired, unless Mayer is interviewed\nAnd(hired(Mayer), interviewed(Lee), hired(Ordoveza)) ::: If Mayer is hired, and Lee is interviewed, Ordoveza is hired\n\n# Options\nQuestion ::: If Ordoveza is not interviewed, and if exactly four applicants are hired, then which one of the following must be false?\nis_exception(is_sat(hired(Lee))) ::: (A)\nis_exception(is_sat(hired(Mayer))) ::: (B)\nis_exception(is_sat(interviewed(Jackson))) ::: (C)\nis_exception(is_sat(interviewed(Kowalski))) ::: (D)\nis_exception(is_sat(interviewed(Gunsel))) ::: (E)\n------\nProblem:\nA group of six people—A,"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_3_12",
    "context": "Exactly six of seven researchers—three anthropologists: Franklin, Jones, and Marquez; and four linguists: Neil, Osborne, Rice, and Samuels—will be included in two three-person teams—team 1 and team 2. No researcher will be included in more than one team. Each team must include at least one anthropologist and at least one linguist. The teams' composition must conform to the following conditions: Neither team includes both Franklin and Samuels. Neither team includes both Neil and Rice. If a team includes Marquez, it includes neither Rice nor Samuels. If team 1 includes Jones, team 2 includes Rice.",
    "question": "Which one of the following could be the list of the researchers on the two teams?",
    "answer": "C",
    "options": [
      "A) team 1: Franklin, Marquez, Osborne team 2: Jones, Neil, Rice",
      "B) team 1: Franklin, Neil, Samuels team 2: Jones, Osborne, Rice",
      "C) team 1: Franklin, Osborne, Rice team 2: Jones, Neil, Samuels",
      "D) team 1: Jones, Marquez, Neil team 2: Osborne, Rice, Samuels",
      "E) team 1: Jones, Osborne, Rice team 2: Franklin, Marquez, Neil"
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([Franklin, Jones, Marquez, Neil, Osborne, Rice, Samuels])\nteams = EnumSort([team_1, team_2])\nteam_members = Function([teams, researchers] -> [researchers])\n\n# Constraints\nForAll([t:teams], Count([r:researchers], team_members(t, r)) == 3) ::: Exactly six of seven researchers will be included in two three-person teams\nForAll([r:researchers], Implies(team_members(team_1, r), Not(team_members(team_2, r)))) ::: No researcher will be included in more than one team\nForAll([t:teams], Or(team_members(t, Franklin), team_members(t, Jones), team_members(t, Marquez))) ::: Each team must include at least one anthropologist\nForAll([t:teams], Or(team_members(t, Neil), team_members(t, Osborne), team_members(t, Rice), team_members(t, Samuels))) ::: Each team must include at least one linguist\nImplies(team_members(team_1, Franklin), team_members(team_2, Samuels)) ::: Neither team includes both Franklin and Samuels\nImplies(team_members(team_1, Neil), team_members(team_2, Rice)) ::: Neither team includes both Neil and Rice\nImplies(team_members(team_1, Marquez), Not(team_members(team_1, Rice))) ::: If a team includes Marquez, it includes neither Rice nor Samuels\nImplies(team_members(team_1, Marquez), Not(team_members(team_1, Samuels))) ::: If a team includes Marquez, it includes neither Rice nor Samuels\nImplies(team_members(team_1, Jones), team_"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_3_13",
    "context": "Exactly six of seven researchers—three anthropologists: Franklin, Jones, and Marquez; and four linguists: Neil, Osborne, Rice, and Samuels—will be included in two three-person teams—team 1 and team 2. No researcher will be included in more than one team. Each team must include at least one anthropologist and at least one linguist. The teams' composition must conform to the following conditions: Neither team includes both Franklin and Samuels. Neither team includes both Neil and Rice. If a team includes Marquez, it includes neither Rice nor Samuels. If team 1 includes Jones, team 2 includes Rice.",
    "question": "If Jones is on team 1, which one of the following is a pair of researchers that must be on team 2 together?",
    "answer": "A",
    "options": [
      "A) Franklin and Rice",
      "B) Marquez and Osborne",
      "C) Neil and Osborne",
      "D) Osborne and Samuels",
      "E) Rice and Samuels"
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([Franklin, Jones, Marquez, Neil, Osborne, Rice, Samuels])\nteams = EnumSort([team1, team2])\nincludes = Function([teams, researchers] -> [bool])\n\n# Constraints\nForAll([t:teams], Count([r:researchers], includes(t, r)) == 3) ::: Exactly six of seven researchers will be included in two three-person teams\nForAll([r:researchers], Implies(includes(team1, r), Not(includes(team2, r)))) ::: No researcher will be included in more than one team\nForAll([t:teams], Or(includes(t, Franklin), includes(t, Jones), includes(t, Marquez))) ::: Each team must include at least one anthropologist\nForAll([t:teams], Or(includes(t, Neil), includes(t, Osborne), includes(t, Rice), includes(t, Samuels))) ::: Each team must include at least one linguist\nForAll([t:teams], Implies(includes(t, Franklin), Not(includes(t, Samuels)))) ::: Neither team includes both Franklin and Samuels\nForAll([t:teams], Implies(includes(t, Neil), Not(includes(t, Rice)))) ::: Neither team includes both Neil and Rice\nForAll([t:teams], Implies(includes(t, Marquez), Not(includes(t, Rice)))) ::: If a team includes Marquez, it includes neither Rice nor Samuels\nForAll([t:teams], Implies(includes(t, Jones), includes(t, Rice))) ::: If team 1 includes Jones, team 2 includes Rice\n\n# Options\nQuestion ::: If Jones is on team 1, which one of the following is a pair of researchers that must be on team 2 together?\nis_sat(And(includes(team"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_3_14",
    "context": "Exactly six of seven researchers—three anthropologists: Franklin, Jones, and Marquez; and four linguists: Neil, Osborne, Rice, and Samuels—will be included in two three-person teams—team 1 and team 2. No researcher will be included in more than one team. Each team must include at least one anthropologist and at least one linguist. The teams' composition must conform to the following conditions: Neither team includes both Franklin and Samuels. Neither team includes both Neil and Rice. If a team includes Marquez, it includes neither Rice nor Samuels. If team 1 includes Jones, team 2 includes Rice.",
    "question": "If Neil is on team 1, which one of the following is a pair of researchers that could be on team 1 together with Neil?",
    "answer": "D",
    "options": [
      "A) Franklin and Jones",
      "B) Jones and Osborne",
      "C) Jones and Rice",
      "D) Jones and Samuels",
      "E) Osborne and Samuels"
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([Franklin, Jones, Marquez, Neil, Osborne, Rice, Samuels])\nteams = EnumSort([team1, team2])\nincludes = Function([teams, researchers] -> [bool])\n\n# Constraints\nForAll([t:teams], Count([r:researchers], includes(t, r)) == 3) ::: Exactly six of seven researchers will be included in two three-person teams\nForAll([r:researchers], Implies(includes(team1, r), Not(includes(team2, r)))) ::: No researcher will be included in more than one team\nForAll([t:teams], Or(includes(t, Franklin), includes(t, Jones), includes(t, Marquez))) ::: Each team must include at least one anthropologist\nForAll([t:teams], Or(includes(t, Neil), includes(t, Osborne), includes(t, Rice), includes(t, Samuels))) ::: Each team must include at least one linguist\nForAll([t:teams], Implies(includes(t, Franklin), Not(includes(t, Samuels)))) ::: Neither team includes both Franklin and Samuels\nForAll([t:teams], Implies(includes(t, Neil), Not(includes(t, Rice)))) ::: Neither team includes both Neil and Rice\nForAll([t:teams], Implies(includes(t, Marquez), Not(includes(t, Rice)))) ::: If a team includes Marquez, it includes neither Rice nor Samuels\nForAll([t:teams], Implies(includes(t, Jones), includes(t, Rice))) ::: If team 1 includes Jones, team 2 includes Rice\n\n# Options\nQuestion ::: If Neil is on team 1, which one of the following is a pair of researchers that could be on team 1 together with Neil?\nis_valid(Exists([r1"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_3_15",
    "context": "Exactly six of seven researchers—three anthropologists: Franklin, Jones, and Marquez; and four linguists: Neil, Osborne, Rice, and Samuels—will be included in two three-person teams—team 1 and team 2. No researcher will be included in more than one team. Each team must include at least one anthropologist and at least one linguist. The teams' composition must conform to the following conditions: Neither team includes both Franklin and Samuels. Neither team includes both Neil and Rice. If a team includes Marquez, it includes neither Rice nor Samuels. If team 1 includes Jones, team 2 includes Rice.",
    "question": "If Franklin is on the same team as Marquez, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Jones is on team 1.",
      "B) Rice is on team 1.",
      "C) Samuels is on team 2.",
      "D) Both Neil and Osborne are on team 1.",
      "E) Both Neil and Osborne are on team 2."
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([Franklin, Jones, Marquez, Neil, Osborne, Rice, Samuels])\nteams = EnumSort([team1, team2])\nincludes = Function([teams, researchers] -> [bool])\n\n# Constraints\nForAll([t:teams], Count([r:researchers], includes(t, r)) == 3) ::: Exactly six of seven researchers will be included in two three-person teams\nForAll([r:researchers], Implies(includes(team1, r), Not(includes(team2, r)))) ::: No researcher will be included in more than one team\nForAll([t:teams], Or(includes(t, Franklin), includes(t, Jones), includes(t, Marquez))) ::: Each team must include at least one anthropologist\nForAll([t:teams], Or(includes(t, Neil), includes(t, Osborne), includes(t, Rice), includes(t, Samuels))) ::: Each team must include at least one linguist\nImplies(includes(team1, Franklin), includes(team2, Samuels)) ::: Neither team includes both Franklin and Samuels\nImplies(includes(team1, Neil), includes(team2, Rice)) ::: Neither team includes both Neil and Rice\nImplies(includes(team1, Marquez), Not(includes(team1, Rice))) ::: If a team includes Marquez, it includes neither Rice nor Samuels\nImplies(includes(team1, Jones), includes(team2, Rice)) ::: If team 1 includes Jones, team 2 includes Rice\n\n# Options\nQuestion ::: If Franklin is on the same team as Marquez, which one of the following could be true?\nis_valid(exists([t:teams], includes(t, Franklin) && includes(t, Marquez))) ::: Franklin is on the same team as Marquez\nis_valid(exists([t:teams], includes(t, Jones) && includes(t, team1))) ::: (A)\nis_valid(exists([t:teams], includes(t, Rice) && includes(t, team1))) ::: (B)\nis_valid(exists([t:teams], includes(t, Samuels) && includes(t, team2))) ::: (C)\nis_valid(exists([t:teams], includes(t, Neil) && includes(t, Osborne) && includes(t, team1))) ::: (D)\nis_valid(exists([t:teams], includes(t, Neil) && includes(t, Osborne) && includes(t, team2))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_3_16",
    "context": "Exactly six of seven researchers—three anthropologists: Franklin, Jones, and Marquez; and four linguists: Neil, Osborne, Rice, and Samuels—will be included in two three-person teams—team 1 and team 2. No researcher will be included in more than one team. Each team must include at least one anthropologist and at least one linguist. The teams' composition must conform to the following conditions: Neither team includes both Franklin and Samuels. Neither team includes both Neil and Rice. If a team includes Marquez, it includes neither Rice nor Samuels. If team 1 includes Jones, team 2 includes Rice.",
    "question": "Each of the following is a pair of researchers that could be on team 2 together EXCEPT:",
    "answer": "B",
    "options": [
      "A) Franklin and Jones",
      "B) Franklin and Marquez",
      "C) Franklin and Rice",
      "D) Jones and Marquez",
      "E) Jones and Rice"
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([Franklin, Jones, Marquez, Neil, Osborne, Rice, Samuels])\nteams = EnumSort([team1, team2])\nincludes = Function([teams, researchers] -> [bool])\n\n# Constraints\nForAll([t:teams], Count([r:researchers], includes(t, r)) == 3) ::: Exactly six of seven researchers will be included in two three-person teams\nForAll([r:researchers], Implies(includes(team1, r), Not(includes(team2, r)))) ::: No researcher will be included in more than one team\nForAll([t:teams], Or(includes(t, Franklin), includes(t, Jones), includes(t, Marquez))) ::: Each team must include at least one anthropologist\nForAll([t:teams], Or(includes(t, Neil), includes(t, Osborne), includes(t, Rice), includes(t, Samuels))) ::: Each team must include at least one linguist\nNot(And(includes(team1, Franklin), includes(team1, Samuels))) ::: Neither team includes both Franklin and Samuels\nNot(And(includes(team1, Neil), includes(team1, Rice))) ::: Neither team includes both Neil and Rice\nNot(And(includes(team1, Marquez), includes(team1, Rice), includes(team1, Samuels))) ::: If a team includes Marquez, it includes neither Rice nor Samuels\nAnd(includes(team1, Jones), includes(team2, Rice)) ::: If team 1 includes Jones, team 2 includes Rice\n\n# Options\nQuestion ::: Each of the following is a pair of researchers that could be on team 2 together EXCEPT:\nis_exception(is_sat(And(includes(team2, Franklin), includes(team2, Jones)))) ::: A) Franklin and Jones\nis_exception(is_sat(And(includes(team2, Franklin), includes(team2, Marquez)))) ::: B) Franklin and Marquez\nis_exception(is_sat(And(includes(team2, Franklin), includes(team2, Rice)))) ::: C) Franklin and Rice\nis_exception(is_sat(And(includes(team2, Jones), includes(team2, Marquez)))) ::: D) Jones and Marquez\nis_exception(is_sat(And(includes(team2, Jones), includes(team2, Rice)))) ::: E) Jones and Rice\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_3_17",
    "context": "Exactly six of seven researchers—three anthropologists: Franklin, Jones, and Marquez; and four linguists: Neil, Osborne, Rice, and Samuels—will be included in two three-person teams—team 1 and team 2. No researcher will be included in more than one team. Each team must include at least one anthropologist and at least one linguist. The teams' composition must conform to the following conditions: Neither team includes both Franklin and Samuels. Neither team includes both Neil and Rice. If a team includes Marquez, it includes neither Rice nor Samuels. If team 1 includes Jones, team 2 includes Rice.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Franklin is on team 1 and Neil is on team 2.",
      "B) Franklin is on team 2 and Jones is not on any team.",
      "C) Franklin is on team 2 and Marquez is on team 2.",
      "D) Franklin is not on any team and Jones is on team 1.",
      "E) Jones is on team 1 and Neil is on team 2."
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([Franklin, Jones, Marquez, Neil, Osborne, Rice, Samuels])\nteams = EnumSort([team1, team2])\nincludes = Function([teams, researchers] -> [bool])\n\n# Constraints\nForAll([t:teams], Count([r:researchers], includes(t, r)) == 3) ::: Exactly six of seven researchers will be included in two three-person teams\nForAll([r:researchers], Implies(includes(team1, r), includes(team2, r))) ::: No researcher will be included in more than one team\nForAll([t:teams], Or(includes(t, Franklin), includes(t, Jones), includes(t, Marquez))) ::: Each team must include at least one anthropologist\nForAll([t:teams], Or(includes(t, Neil), includes(t, Osborne), includes(t, Rice), includes(t, Samuels))) ::: Each team must include at least one linguist\nForAll([t:teams], Implies(includes(t, Franklin), includes(t, Samuels))) ::: Neither team includes both Franklin and Samuels\nForAll([t:teams], Implies(includes(t, Neil), includes(t, Rice))) ::: Neither team includes both Neil and Rice\nForAll([t:teams], Implies(includes(t, Marquez), Not(includes(t, Rice)))) ::: If a team includes Marquez, it includes neither Rice nor Samuels\nForAll([t:teams], Implies(includes(t, Jones), includes(t, Rice))) ::: If team 1 includes Jones, team 2 includes Rice\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(And(includes(team1, Franklin), includes(team2, Neil))) ::: (A)\nis_valid(And(includes(team2, Franklin), Not(includes(team1, Jones)))) ::: (B)\nis_valid(And(includes(team2, Franklin), includes(team2, Marquez))) ::: (C)\nis_valid(And(Not(includes(team1, Franklin)), includes(team1, Jones))) ::: (D)\nis_valid(And(includes(team1, Jones), includes(team2, Neil))) ::: (E)\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting, marketing, and sales. The following conditions apply: A and B are assigned to the same department. C is assigned"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_3_18",
    "context": "Exactly six of seven researchers—three anthropologists: Franklin, Jones, and Marquez; and four linguists: Neil, Osborne, Rice, and Samuels—will be included in two three-person teams—team 1 and team 2. No researcher will be included in more than one team. Each team must include at least one anthropologist and at least one linguist. The teams' composition must conform to the following conditions: Neither team includes both Franklin and Samuels. Neither team includes both Neil and Rice. If a team includes Marquez, it includes neither Rice nor Samuels. If team 1 includes Jones, team 2 includes Rice.",
    "question": "If Marquez is on team 2, which one of the following must also be on team 2?",
    "answer": "B",
    "options": [
      "A) Franklin",
      "B) Jones",
      "C) Osborne",
      "D) Rice",
      "E) Samuels"
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([Franklin, Jones, Marquez, Neil, Osborne, Rice, Samuels])\nteams = EnumSort([team1, team2])\nincludes = Function([teams, researchers] -> [bool])\n\n# Constraints\nForAll([t:teams], Count([r:researchers], includes(t, r)) == 3) ::: Exactly six of seven researchers will be included in two three-person teams\nForAll([r:researchers], Implies(includes(team1, r), Not(includes(team2, r)))) ::: No researcher will be included in more than one team\nForAll([t:teams], Or(includes(t, Franklin), includes(t, Jones), includes(t, Marquez))) ::: Each team must include at least one anthropologist\nForAll([t:teams], Or(includes(t, Neil), includes(t, Osborne), includes(t, Rice), includes(t, Samuels))) ::: Each team must include at least one linguist\nForAll([t:teams], Implies(includes(t, Franklin), Not(includes(t, Samuels)))) ::: Neither team includes both Franklin and Samuels\nForAll([t:teams], Implies(includes(t, Neil), Not(includes(t, Rice)))) ::: Neither team includes both Neil and Rice\nForAll([t:teams], Implies(includes(t, Marquez), Not(includes(t, Rice)))) ::: If a team includes Marquez, it includes neither Rice nor Samuels\nForAll([t:teams], Implies(includes(t, Jones), includes(t, Rice))) ::: If team 1 includes Jones, team 2 includes Rice\n\n# Options\nQuestion ::: If Marquez is on team 2, which one of the following must also be on team 2?\nis_valid(Exists([r:researchers], includes(team2, r) == Franklin)) ::: A) Franklin\nis_valid(Exists([r:researchers], includes(team2, r) == Jones)) ::: B) Jones\nis_valid(Exists([r:researchers], includes(team2, r) == Osborne)) ::: C) Osborne\nis_valid(Exists([r:researchers], includes(team2, r) == Rice)) ::: D) Rice\nis_valid(Exists([r:researchers], includes(team2, r) == Samuels)) ::: E) Samuels\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—will be divided into two teams of three people each"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_4_19",
    "context": "Five candidates for mayor—Q, R, S, T, and U—will each speak exactly once at each of three town meetings—meetings 1, 2, and 3. At each meeting, each candidate will speak in one of five consecutive time slots. No two candidates will speak in the same time slot as each other at any meeting. The order in which the candidates will speak will meet the following conditions: Each candidate must speak either first or second at at least one of the meetings. Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings. No candidate can speak fourth at more than one of the meetings.",
    "question": "Which one of the following could be the order, from first to fifth, in which the candidates speak at the meetings?",
    "answer": "D",
    "options": [
      "A) meeting 1: Q, U, R, T, S meeting 2: S, T, R, U, Q meeting 3: T, U, Q, R, S",
      "B) meeting 1: R, S, Q, T, U meeting 2: U, T, S, R, Q meeting 3: Q, R, T, U, S",
      "C) meeting 1: S, Q, U, T, R meeting 2: U, T, Q, R, S meeting 3: R, Q, S, T, U",
      "D) meeting 1: T, R, S, U, Q meeting 2: Q, R, S, T, U meeting 3: U, S, R, Q, T",
      "E) meeting 1: U, T, R, S, Q meeting 2: Q, R, S, T, U meeting 3: S, T, U, Q, R"
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([Q, R, S, T, U])\nmeetings = EnumSort([meeting_1, meeting_2, meeting_3])\nspeaks = Function([candidates, meetings, int] -> [bool])\n\n# Constraints\nForAll([c:candidates], Or(speaks(c, meeting_1, 1), speaks(c, meeting_1, 2))) ::: Each candidate must speak either first or second at at least one of the meetings\nForAll([c:candidates], And(speaks(c, m, 5), ForAll([m2:meetings], Implies(m2!= m, Not(speaks(c, m2, 1)))))) ::: Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 4)) <= 1) ::: No candidate can speak fourth at more than one of the meetings\n\n# Options\nQuestion ::: Which one of the following could be the order, from first to fifth, in which the candidates speak at the meetings?\nis_valid(speaks(Q, meeting_1, 1) && speaks(U, meeting_1, 2) && speaks(R, meeting_1, 3) && speaks(T, meeting_1, 4) && speaks(S, meeting_1, 5) && speaks(S, meeting_2, 1) && speaks(T, meeting_2, 2) && speaks(R, meeting_2, 3) && speaks(U, meeting_2, 4) && speaks(Q, meeting_2, 5) && speaks(T, meeting_3, 1) && speaks(U, meeting_3, 2) && speaks(Q, meeting_3, 3) && speaks(R, meeting_3, 4) && speaks(S, meeting_3, 5)) ::: A) meeting 1: Q, U, R, T, S meeting 2: S, T, R, U, Q meeting 3: T, U, Q, R, S\nis_valid(speaks(R, meeting_1, 1) && speaks(S, meeting_1, 2) && speaks(Q, meeting_1, 3) && speaks(T, meeting_1, 4) && speaks(U, meeting_1, 5) && speaks(U, meeting_2, 1) && speaks(T, meeting_2, 2) && speaks(S, meeting_"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_4_20",
    "context": "Five candidates for mayor—Q, R, S, T, and U—will each speak exactly once at each of three town meetings—meetings 1, 2, and 3. At each meeting, each candidate will speak in one of five consecutive time slots. No two candidates will speak in the same time slot as each other at any meeting. The order in which the candidates will speak will meet the following conditions: Each candidate must speak either first or second at at least one of the meetings. Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings. No candidate can speak fourth at more than one of the meetings.",
    "question": "If R speaks second at meeting 2 and first at meeting 3, which one of the following is a complete and accurate list of those time slots any one of which could be the time slot in which R speaks at meeting 1?",
    "answer": "D",
    "options": [
      "A) fourth, fifth",
      "B) first, second, fifth",
      "C) second, third, fifth",
      "D) third, fourth, fifth",
      "E) second, third, fourth, fifth"
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([Q, R, S, T, U])\nmeetings = EnumSort([meeting1, meeting2, meeting3])\nslots = EnumSort([first, second, third, fourth, fifth])\nspeaks = Function([candidates, meetings, slots] -> [bool])\n\n# Constraints\nForAll([c:candidates], Count([m:meetings], speaks(c, m, first)) + Count([m:meetings], speaks(c, m, second)) == 2) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, first)) + Count([m:meetings], speaks(c, m, second)) == 2) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, first)) + Count([m:meetings], speaks(c, m, second)) == 2) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, first)) + Count([m:meetings], speaks(c, m, second)) == 2) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, first)) + Count([m:meetings], speaks(c, m, second)) == 2) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, first)) + Count([m:meetings], speaks(c, m, second)) == 2) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, first)) + Count([m:meetings], speaks(c, m, second)) == 2) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, first)) + Count([m:meetings], speaks(c, m, second)) == 2) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, first)) + Count([m:meetings], speaks("
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_4_21",
    "context": "Five candidates for mayor—Q, R, S, T, and U—will each speak exactly once at each of three town meetings—meetings 1, 2, and 3. At each meeting, each candidate will speak in one of five consecutive time slots. No two candidates will speak in the same time slot as each other at any meeting. The order in which the candidates will speak will meet the following conditions: Each candidate must speak either first or second at at least one of the meetings. Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings. No candidate can speak fourth at more than one of the meetings.",
    "question": "If the order in which the candidates speak at meeting 1 is R, U, S, T, Q, and the order in which they speak at meeting 2 is Q, R, U, S, T, which one of the following could be true of meeting 3?",
    "answer": "B",
    "options": [
      "A) Q speaks first.",
      "B) R speaks third.",
      "C) S speaks first.",
      "D) T speaks second.",
      "E) U speaks fifth."
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([Q, R, S, T, U])\nmeetings = EnumSort([meeting1, meeting2, meeting3])\nspeaks = Function([candidates, meetings, int])\n\n# Constraints\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 1)) == 1) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 2)) == 1) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 3)) == 1) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 4)) == 1) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 5)) == 1) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 1)) + Count([m:meetings], speaks(c, m, 2)) == 2) ::: Each candidate must speak either first or second at at least one of the meetings\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 5)) + Count([m:meetings], speaks(c, m, 1)) == 2) ::: Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 4)) <= 1) ::: No candidate can speak fourth at more than one of the meetings\nspeaks(R, meeting1, 1) ::: the order in which the candidates speak at meeting 1 is R, U, S, T, Q\nspeaks(U, meeting1, 2) ::: the order in which the candidates speak at meeting 1 is R, U, S, T, Q\nspeaks(S, meeting1, 3) ::: the order in which the candidates speak at meeting 1 is R, U, S, T, Q\nspeaks(T, meeting1, 4) ::: the order in which the candidates speak at meeting 1 is R, U, S, T, Q\nspeaks"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_4_22",
    "context": "Five candidates for mayor—Q, R, S, T, and U—will each speak exactly once at each of three town meetings—meetings 1, 2, and 3. At each meeting, each candidate will speak in one of five consecutive time slots. No two candidates will speak in the same time slot as each other at any meeting. The order in which the candidates will speak will meet the following conditions: Each candidate must speak either first or second at at least one of the meetings. Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings. No candidate can speak fourth at more than one of the meetings.",
    "question": "If R speaks first at meetings 1 and 2, and S speaks first at meeting 3, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) R speaks second at meeting 3.",
      "B) R speaks fourth at meeting 3.",
      "C) S speaks second at at least one of the meetings.",
      "D) S speaks fifth at exactly one of the meetings.",
      "E) S speaks fifth at exactly two of the meetings."
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([Q, R, S, T, U])\nmeetings = EnumSort([1, 2, 3])\nspeaks = Function([candidates, meetings, int])\n\n# Constraints\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 1)) + Count([m:meetings], speaks(c, m, 2)) == 2) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 1)) + Count([m:meetings], speaks(c, m, 2)) + Count([m:meetings], speaks(c, m, 3)) + Count([m:meetings], speaks(c, m, 4)) + Count([m:meetings], speaks(c, m, 5)) == 3) ::: No two candidates will speak in the same time slot as each other at any meeting\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 1)) + Count([m:meetings], speaks(c, m, 2)) >= 1) ::: Each candidate must speak either first or second at at least one of the meetings\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 5)) == 1) ::: Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 4)) <= 1) ::: No candidate can speak fourth at more than one of the meetings\nspeaks(R, 1, 1) ::: R speaks first at meetings 1 and 2\nspeaks(R, 2, 1) ::: R speaks first at meetings 1 and 2\nspeaks(S, 3, 1) ::: S speaks first at meeting 3\n\n# Options\nQuestion ::: If R speaks first at meetings 1 and 2, and S speaks first at meeting 3, which one of the following must be true?\nis_valid(speaks(R, 3, 2)) ::: (A)\nis_valid(speaks(R, 3, 4)) ::: (B)\nis_valid(Exists([m:meetings], speaks(S, m, 2))) ::: (C)\nis_valid(Exists([m:meetings], speaks(S,"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_4_23",
    "context": "Five candidates for mayor—Q, R, S, T, and U—will each speak exactly once at each of three town meetings—meetings 1, 2, and 3. At each meeting, each candidate will speak in one of five consecutive time slots. No two candidates will speak in the same time slot as each other at any meeting. The order in which the candidates will speak will meet the following conditions: Each candidate must speak either first or second at at least one of the meetings. Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings. No candidate can speak fourth at more than one of the meetings.",
    "question": "It could be true that at all three meetings T speaks",
    "answer": "C",
    "options": [
      "A) first",
      "B) second",
      "C) in some time slot after the time slot in which R speaks",
      "D) in some time slot after the time slots in which S and U speak",
      "E) in some time slot before the time slots in which R and U speak"
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([Q, R, S, T, U])\nmeetings = EnumSort([meeting1, meeting2, meeting3])\nspeaks = Function([candidates, meetings, int])\n\n# Constraints\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 1)) + Count([m:meetings], speaks(c, m, 2)) == 2) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 1)) + Count([m:meetings], speaks(c, m, 2)) + Count([m:meetings], speaks(c, m, 3)) + Count([m:meetings], speaks(c, m, 4)) + Count([m:meetings], speaks(c, m, 5)) == 3) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 1)) + Count([m:meetings], speaks(c, m, 2)) >= 1) ::: Each candidate must speak either first or second at at least one of the meetings\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 5)) == 0) ::: Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 4)) <= 1) ::: No candidate can speak fourth at more than one of the meetings\n\n# Options\nQuestion ::: It could be true that at all three meetings T speaks\nis_valid(Exists([m:meetings], speaks(T, m, 1))) ::: A) first\nis_valid(Exists([m:meetings], speaks(T, m, 2))) ::: B) second\nis_valid(Exists([m:meetings], speaks(T, m, 3))) ::: C) in some time slot after the time slot in which R speaks\nis_valid(Exists([m:meetings], speaks(T, m, 4))) ::: D) in some time slot after the time slots in which S and U speak\nis_valid(Exists([m:meetings], speaks(T, m, 5))) ::: E) in some time slot before the time slots in which R and U speak\n------\nProblem"
    ]
  },
  {
    "id": "ar_lsat_199710_1-G_4_24",
    "context": "Five candidates for mayor—Q, R, S, T, and U—will each speak exactly once at each of three town meetings—meetings 1, 2, and 3. At each meeting, each candidate will speak in one of five consecutive time slots. No two candidates will speak in the same time slot as each other at any meeting. The order in which the candidates will speak will meet the following conditions: Each candidate must speak either first or second at at least one of the meetings. Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings. No candidate can speak fourth at more than one of the meetings.",
    "question": "If S, T, and U speak second at meetings 1, 2, and 3, respectively, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) The fifth speaker at at least one of the meetings is either Q or R.",
      "B) Either Q speaks first at exactly two of the meetings or else R does so.",
      "C) Neither S nor T speaks fifth at any of the meetings.",
      "D) Q speaks third at one of the meetings, and R speaks third at another of the meetings.",
      "E) Q speaks fourth at one of the meetings, and R speaks fourth at another of the meetings."
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([Q, R, S, T, U])\nmeetings = EnumSort([1, 2, 3])\nspeaks = Function([candidates, meetings, int])\n\n# Constraints\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 1)) + Count([m:meetings], speaks(c, m, 2)) == 2) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 1)) + Count([m:meetings], speaks(c, m, 2)) + Count([m:meetings], speaks(c, m, 3)) + Count([m:meetings], speaks(c, m, 4)) + Count([m:meetings], speaks(c, m, 5)) == 3) ::: Each candidate will speak in one of five consecutive time slots\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 1)) + Count([m:meetings], speaks(c, m, 2)) >= 1) ::: Each candidate must speak either first or second at at least one of the meetings\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 5)) + Count([m:meetings], speaks(c, m, 1)) >= 2) ::: Any candidate who speaks fifth at any of the meetings must speak first at at least one of the other meetings\nForAll([c:candidates], Count([m:meetings], speaks(c, m, 4)) <= 1) ::: No candidate can speak fourth at more than one of the meetings\nspeaks(S, 1, 2) ::: S, T, and U speak second at meetings 1, 2, and 3, respectively\nspeaks(T, 2, 2) ::: S, T, and U speak second at meetings 1, 2, and 3, respectively\nspeaks(U, 3, 2) ::: S, T, and U speak second at meetings 1, 2, and 3, respectively\n\n# Options\nQuestion ::: If S, T, and U speak second at meetings 1, 2, and 3, respectively, which one of the following must be true?\nis_valid(Exists([m:meetings], speaks(Q, m, 5))) ::: (A)\nis_valid(Exists([m:meet"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_1_1",
    "context": "In a certain recipe contest, each contestant submits two recipes, one for an appetizer and one for a main dish. Together the two recipes must include exactly seven flavorings—fenugreek, ginger, lemongrass, nutmeg, paprika, saffron, and turmeric—with no flavoring included in more than one of the two recipes. Each contestant's recipes must satisfy the following conditions: The appetizer recipe includes at most three of the flavorings. Fenugreek is not included in the same recipe as nutmeg. Saffron is not included in the same recipe as turmeric. Ginger is included in the same recipe as nutmeg.",
    "question": "Which one of the following could be a complete and accurate list of the flavorings included in one contestant's main-dish recipe?",
    "answer": "D",
    "options": [
      "A) fenugreek, lemongrass, saffron",
      "B) fenugreek, ginger, nutmeg, turmeric",
      "C) ginger, lemongrass, nutmeg, paprika",
      "D) ginger, nutmeg, paprika, turmeric",
      "E) lemongrass, nutmeg, saffron, turmeric"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_1_2",
    "context": "In a certain recipe contest, each contestant submits two recipes, one for an appetizer and one for a main dish. Together the two recipes must include exactly seven flavorings—fenugreek, ginger, lemongrass, nutmeg, paprika, saffron, and turmeric—with no flavoring included in more than one of the two recipes. Each contestant's recipes must satisfy the following conditions: The appetizer recipe includes at most three of the flavorings. Fenugreek is not included in the same recipe as nutmeg. Saffron is not included in the same recipe as turmeric. Ginger is included in the same recipe as nutmeg.",
    "question": "If a contestant's appetizer recipe does not include fenugreek, then the contestant's appetizer recipe must include",
    "answer": "A",
    "options": [
      "A) ginger",
      "B) lemongrass",
      "C) paprika",
      "D) saffron",
      "E) turmeric"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_1_3",
    "context": "In a certain recipe contest, each contestant submits two recipes, one for an appetizer and one for a main dish. Together the two recipes must include exactly seven flavorings—fenugreek, ginger, lemongrass, nutmeg, paprika, saffron, and turmeric—with no flavoring included in more than one of the two recipes. Each contestant's recipes must satisfy the following conditions: The appetizer recipe includes at most three of the flavorings. Fenugreek is not included in the same recipe as nutmeg. Saffron is not included in the same recipe as turmeric. Ginger is included in the same recipe as nutmeg.",
    "question": "Which one of the following could be a list of all of the flavorings included in one contestant's appetizer recipe?",
    "answer": "A",
    "options": [
      "A) fenugreek, saffron",
      "B) ginger, nutmeg",
      "C) fenugreek, nutmeg, turmeric",
      "D) lemongrass, nutmeg, saffron",
      "E) fenugreek, lemongrass, paprika, turmeric"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_1_4",
    "context": "In a certain recipe contest, each contestant submits two recipes, one for an appetizer and one for a main dish. Together the two recipes must include exactly seven flavorings—fenugreek, ginger, lemongrass, nutmeg, paprika, saffron, and turmeric—with no flavoring included in more than one of the two recipes. Each contestant's recipes must satisfy the following conditions: The appetizer recipe includes at most three of the flavorings. Fenugreek is not included in the same recipe as nutmeg. Saffron is not included in the same recipe as turmeric. Ginger is included in the same recipe as nutmeg.",
    "question": "If a contestant includes lemongrass in the same recipe as paprika, which one of the following is a flavoring that must be included in the contestant's main-dish recipe?",
    "answer": "B",
    "options": [
      "A) ginger",
      "B) lemongrass",
      "C) nutmeg",
      "D) saffron",
      "E) turmeric"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_1_5",
    "context": "In a certain recipe contest, each contestant submits two recipes, one for an appetizer and one for a main dish. Together the two recipes must include exactly seven flavorings—fenugreek, ginger, lemongrass, nutmeg, paprika, saffron, and turmeric—with no flavoring included in more than one of the two recipes. Each contestant's recipes must satisfy the following conditions: The appetizer recipe includes at most three of the flavorings. Fenugreek is not included in the same recipe as nutmeg. Saffron is not included in the same recipe as turmeric. Ginger is included in the same recipe as nutmeg.",
    "question": "If the condition that requires ginger to be included in the same recipe as nutmeg is suspended but all of the other original conditions remain in effect, then which one of the following could be a list of all of the flavorings included in one contestant's main-dish recipe?",
    "answer": "C",
    "options": [
      "A) ginger, lemongrass, nutmeg, paprika",
      "B) ginger, lemongrass, paprika, turmeric",
      "C) fenugreek, ginger, lemongrass, paprika, saffron",
      "D) fenugreek, ginger, lemongrass, saffron, turmeric",
      "E) fenugreek, lemongrass, nutmeg, paprika, saffron"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_2_6",
    "context": "Seven singers—Jamie, Ken, Lalitha, Maya, Norton, Olive, and Patrick—will be scheduled to perform in the finals of a singing competition. During the evening of the competition, each singer, performing alone, will give exactly one performance. The schedule for the evening must conform to the following requirements: Jamie performs immediately after Ken. Patrick performs at some time after Maya. Lalitha performs third only if Norton performs fifth. If Patrick does not perform second, he performs fifth.",
    "question": "Which one of the following is an acceptable schedule for the evening's performers, from first through seventh?",
    "answer": "A",
    "options": [
      "A) Ken, Jamie, Maya, Lalitha, Patrick, Norton, Olive",
      "B) Lalitha, Patrick, Norton, Olive, Maya, Ken, Jamie",
      "C) Norton, Olive, Ken, Jamie, Maya, Patrick, Lalitha",
      "D) Olive, Maya, Ken, Lalitha, Patrick, Norton, Jamie",
      "E) Olive, Maya, Lalitha, Norton, Patrick, Ken, Jamie"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_2_7",
    "context": "Seven singers—Jamie, Ken, Lalitha, Maya, Norton, Olive, and Patrick—will be scheduled to perform in the finals of a singing competition. During the evening of the competition, each singer, performing alone, will give exactly one performance. The schedule for the evening must conform to the following requirements: Jamie performs immediately after Ken. Patrick performs at some time after Maya. Lalitha performs third only if Norton performs fifth. If Patrick does not perform second, he performs fifth.",
    "question": "If Lalitha is scheduled for the third performance, which one of the following must be scheduled for the sixth performance?",
    "answer": "B",
    "options": [
      "A) Jamie",
      "B) Ken",
      "C) Norton",
      "D) Olive",
      "E) Patrick"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_2_8",
    "context": "Seven singers—Jamie, Ken, Lalitha, Maya, Norton, Olive, and Patrick—will be scheduled to perform in the finals of a singing competition. During the evening of the competition, each singer, performing alone, will give exactly one performance. The schedule for the evening must conform to the following requirements: Jamie performs immediately after Ken. Patrick performs at some time after Maya. Lalitha performs third only if Norton performs fifth. If Patrick does not perform second, he performs fifth.",
    "question": "If Norton is scheduled for the fifth performance, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Jamie is scheduled for the sixth performance.",
      "B) Ken is scheduled for the second performance.",
      "C) Lalitha is scheduled for the fourth performance.",
      "D) Maya is scheduled for the third performance.",
      "E) Olive is scheduled for the first performance."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_2_9",
    "context": "Seven singers—Jamie, Ken, Lalitha, Maya, Norton, Olive, and Patrick—will be scheduled to perform in the finals of a singing competition. During the evening of the competition, each singer, performing alone, will give exactly one performance. The schedule for the evening must conform to the following requirements: Jamie performs immediately after Ken. Patrick performs at some time after Maya. Lalitha performs third only if Norton performs fifth. If Patrick does not perform second, he performs fifth.",
    "question": "If Maya is scheduled for the second performance, which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Jamie is scheduled for the sixth performance.",
      "B) Ken is scheduled for the fourth performance.",
      "C) Lalitha is scheduled for the third performance.",
      "D) Norton is scheduled for the fifth performance.",
      "E) Olive is scheduled for the fourth performance."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_2_10",
    "context": "Seven singers—Jamie, Ken, Lalitha, Maya, Norton, Olive, and Patrick—will be scheduled to perform in the finals of a singing competition. During the evening of the competition, each singer, performing alone, will give exactly one performance. The schedule for the evening must conform to the following requirements: Jamie performs immediately after Ken. Patrick performs at some time after Maya. Lalitha performs third only if Norton performs fifth. If Patrick does not perform second, he performs fifth.",
    "question": "If Jamie's performance is scheduled to be immediately before Lalitha's performance, Jamie's performance CANNOT be scheduled to be",
    "answer": "A",
    "options": [
      "A) second",
      "B) third",
      "C) fourth",
      "D) fifth",
      "E) sixth"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_3_11",
    "context": "At a small press, six textbooks, three introductory—F, G, and H—and three advanced—X, Y, and Z—will each be evaluated once by the editor, Juarez, and once by the publisher, Rosenberg, during six consecutive weeks—week 1 through week 6. Each evaluator evaluates exactly one textbook per week. No textbook will be evaluated by Juarez and Rosenberg during the same week. The following additional constraints apply: Rosenberg cannot evaluate any introductory textbook until Juarez has evaluated that textbook. Juarez cannot evaluate any advanced textbook until Rosenberg has evaluated that textbook. Rosenberg cannot evaluate any two introductory textbooks consecutively. Juarez must evaluate X during week 4.",
    "question": "Which one of the following is an acceptable evaluation schedule, with the textbooks listed in order of evaluation from week 1 through week 6?",
    "answer": "B",
    "options": [
      "A) Juarez: F, G, X, Z, H, Y Rosenberg: X, F, Z, G, Y, H",
      "B) Juarez: F, Y, G, X, H, Z Rosenberg Y, F, X, G, Z, H",
      "C) Juarez: G, H, F, X, Y, Z Rosenberg: X, G, H, Y, Z, F",
      "D) Juarez: G, Z, F, X, H, Y Rosenberg: Z, F, X, G, Y, H",
      "E) Juarez: H, Y, F, X, G, Z Rosenberg: X, H, Z, F, Y, G"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_3_12",
    "context": "At a small press, six textbooks, three introductory—F, G, and H—and three advanced—X, Y, and Z—will each be evaluated once by the editor, Juarez, and once by the publisher, Rosenberg, during six consecutive weeks—week 1 through week 6. Each evaluator evaluates exactly one textbook per week. No textbook will be evaluated by Juarez and Rosenberg during the same week. The following additional constraints apply: Rosenberg cannot evaluate any introductory textbook until Juarez has evaluated that textbook. Juarez cannot evaluate any advanced textbook until Rosenberg has evaluated that textbook. Rosenberg cannot evaluate any two introductory textbooks consecutively. Juarez must evaluate X during week 4.",
    "question": "If Juarez evaluates H during week 3 and Rosenberg evaluates G during week 6, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Juarez evaluates F during week 1.",
      "B) Juarez evaluates G during week 2.",
      "C) Juarez evaluates Z during week 6.",
      "D) Rosenberg evaluates X during week 1.",
      "E) Rosenberg evaluates Y during week 5."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_3_13",
    "context": "At a small press, six textbooks, three introductory—F, G, and H—and three advanced—X, Y, and Z—will each be evaluated once by the editor, Juarez, and once by the publisher, Rosenberg, during six consecutive weeks—week 1 through week 6. Each evaluator evaluates exactly one textbook per week. No textbook will be evaluated by Juarez and Rosenberg during the same week. The following additional constraints apply: Rosenberg cannot evaluate any introductory textbook until Juarez has evaluated that textbook. Juarez cannot evaluate any advanced textbook until Rosenberg has evaluated that textbook. Rosenberg cannot evaluate any two introductory textbooks consecutively. Juarez must evaluate X during week 4.",
    "question": "If Juarez evaluates Z during week 2, then Rosenberg must evaluate which one of the following textbooks during week 5?",
    "answer": "D",
    "options": [
      "A) F",
      "B) H",
      "C) X",
      "D) Y",
      "E) Z"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_3_14",
    "context": "At a small press, six textbooks, three introductory—F, G, and H—and three advanced—X, Y, and Z—will each be evaluated once by the editor, Juarez, and once by the publisher, Rosenberg, during six consecutive weeks—week 1 through week 6. Each evaluator evaluates exactly one textbook per week. No textbook will be evaluated by Juarez and Rosenberg during the same week. The following additional constraints apply: Rosenberg cannot evaluate any introductory textbook until Juarez has evaluated that textbook. Juarez cannot evaluate any advanced textbook until Rosenberg has evaluated that textbook. Rosenberg cannot evaluate any two introductory textbooks consecutively. Juarez must evaluate X during week 4.",
    "question": "Which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Rosenberg evaluates H during week 6.",
      "B) Rosenberg evaluates an advanced textbook during week 3.",
      "C) Juarez evaluates an advanced textbook during week 2.",
      "D) Juarez evaluates Y before evaluating G.",
      "E) Juarez does not evaluate any two introductory textbooks consecutively."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_3_15",
    "context": "At a small press, six textbooks, three introductory—F, G, and H—and three advanced—X, Y, and Z—will each be evaluated once by the editor, Juarez, and once by the publisher, Rosenberg, during six consecutive weeks—week 1 through week 6. Each evaluator evaluates exactly one textbook per week. No textbook will be evaluated by Juarez and Rosenberg during the same week. The following additional constraints apply: Rosenberg cannot evaluate any introductory textbook until Juarez has evaluated that textbook. Juarez cannot evaluate any advanced textbook until Rosenberg has evaluated that textbook. Rosenberg cannot evaluate any two introductory textbooks consecutively. Juarez must evaluate X during week 4.",
    "question": "If Rosenberg evaluates X during week 1 and F during week 2, which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) X is the third of the advanced textbooks to be evaluated by Juarez.",
      "B) Y is the first of the advanced textbooks to be evaluated by Juarez.",
      "C) Juarez does not evaluate any two introductory textbooks in a row.",
      "D) Juarez evaluates G during week 5.",
      "E) Juarez evaluates Z during week 6."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_3_16",
    "context": "At a small press, six textbooks, three introductory—F, G, and H—and three advanced—X, Y, and Z—will each be evaluated once by the editor, Juarez, and once by the publisher, Rosenberg, during six consecutive weeks—week 1 through week 6. Each evaluator evaluates exactly one textbook per week. No textbook will be evaluated by Juarez and Rosenberg during the same week. The following additional constraints apply: Rosenberg cannot evaluate any introductory textbook until Juarez has evaluated that textbook. Juarez cannot evaluate any advanced textbook until Rosenberg has evaluated that textbook. Rosenberg cannot evaluate any two introductory textbooks consecutively. Juarez must evaluate X during week 4.",
    "question": "Which one of the following is a complete and accurate list of those weeks during which Juarez must evaluate an introductory textbook?",
    "answer": "A",
    "options": [
      "A) week 1",
      "B) week 6",
      "C) week 1, week 5",
      "D) week 1, week 2, week 3",
      "E) week 1, week 3, week 5"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_3_17",
    "context": "At a small press, six textbooks, three introductory—F, G, and H—and three advanced—X, Y, and Z—will each be evaluated once by the editor, Juarez, and once by the publisher, Rosenberg, during six consecutive weeks—week 1 through week 6. Each evaluator evaluates exactly one textbook per week. No textbook will be evaluated by Juarez and Rosenberg during the same week. The following additional constraints apply: Rosenberg cannot evaluate any introductory textbook until Juarez has evaluated that textbook. Juarez cannot evaluate any advanced textbook until Rosenberg has evaluated that textbook. Rosenberg cannot evaluate any two introductory textbooks consecutively. Juarez must evaluate X during week 4.",
    "question": "Which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Juarez evaluates F during week 6.",
      "B) Juarez evaluates Z during week 1.",
      "C) Rosenberg evaluates F during week 3.",
      "D) Rosenberg evaluates H during week 2.",
      "E) Rosenberg evaluates X during week 5."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_4_18",
    "context": "Nine different treatments are available for a certain illness: three antibiotics—F, G, and H—three dietary regimens—M, N, and O—and three physical therapies—U, V, and W. For each case of the illness, a doctor will prescribe exactly five of the treatments, in accordance with the following conditions: If two of the antibiotics are prescribed, the remaining antibiotic cannot be prescribed. There must be exactly one dietary regimen prescribed. If O is not prescribed, F cannot be prescribed. If W is prescribed, F cannot be prescribed. G cannot be prescribed if both N and U are prescribed. V cannot be prescribed unless both H and M are prescribed.",
    "question": "Which one of the following could be the five treatments prescribed for a given case?",
    "answer": "E",
    "options": [
      "A) F, G, H, M, V",
      "B) F, G, M, O, V",
      "C) F, H, M, O, W",
      "D) G, H, N, U, W",
      "E) G, H, O, U, W"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_4_19",
    "context": "Nine different treatments are available for a certain illness: three antibiotics—F, G, and H—three dietary regimens—M, N, and O—and three physical therapies—U, V, and W. For each case of the illness, a doctor will prescribe exactly five of the treatments, in accordance with the following conditions: If two of the antibiotics are prescribed, the remaining antibiotic cannot be prescribed. There must be exactly one dietary regimen prescribed. If O is not prescribed, F cannot be prescribed. If W is prescribed, F cannot be prescribed. G cannot be prescribed if both N and U are prescribed. V cannot be prescribed unless both H and M are prescribed.",
    "question": "Which one of the following could be the antibiotics and physical therapies prescribed for a given case?",
    "answer": "E",
    "options": [
      "A) F, G, H, W",
      "B) F, G, U, V",
      "C) F, U, V, W",
      "D) G, U, V, W",
      "E) H, U, V, W"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_4_20",
    "context": "Nine different treatments are available for a certain illness: three antibiotics—F, G, and H—three dietary regimens—M, N, and O—and three physical therapies—U, V, and W. For each case of the illness, a doctor will prescribe exactly five of the treatments, in accordance with the following conditions: If two of the antibiotics are prescribed, the remaining antibiotic cannot be prescribed. There must be exactly one dietary regimen prescribed. If O is not prescribed, F cannot be prescribed. If W is prescribed, F cannot be prescribed. G cannot be prescribed if both N and U are prescribed. V cannot be prescribed unless both H and M are prescribed.",
    "question": "If O is prescribed for a given case, which one of the following is a pair of treatments both of which must also be prescribed for that case?",
    "answer": "E",
    "options": [
      "A) F, M",
      "B) G, V",
      "C) N, U",
      "D) U, V",
      "E) U, W"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_4_21",
    "context": "Nine different treatments are available for a certain illness: three antibiotics—F, G, and H—three dietary regimens—M, N, and O—and three physical therapies—U, V, and W. For each case of the illness, a doctor will prescribe exactly five of the treatments, in accordance with the following conditions: If two of the antibiotics are prescribed, the remaining antibiotic cannot be prescribed. There must be exactly one dietary regimen prescribed. If O is not prescribed, F cannot be prescribed. If W is prescribed, F cannot be prescribed. G cannot be prescribed if both N and U are prescribed. V cannot be prescribed unless both H and M are prescribed.",
    "question": "If G is prescribed for a given case, which one of the following is a pair of treatments both of which could also be prescribed for that case?",
    "answer": "E",
    "options": [
      "A) F, M",
      "B) F, N",
      "C) N, V",
      "D) O, V",
      "E) V, W"
    ],
    "raw_logic_programs": [
      "# Declarations\ntreatments = EnumSort([F, G, H, M, N, O, U, V, W])\nprescribed = Function([treatments] -> [bool])\n\n# Constraints\nForAll([t:treatments], Count([t:treatments], prescribed(t)) == 5) ::: For each case of the illness, a doctor will prescribe exactly five of the treatments\nAnd(prescribed(F), prescribed(G), prescribed(H)) ::: If two of the antibiotics are prescribed, the remaining antibiotic cannot be prescribed\nAnd(prescribed(M), prescribed(N), prescribed(O)) ::: There must be exactly one dietary regimen prescribed\nAnd(Not(prescribed(O)), Not(prescribed(F))) ::: If O is not prescribed, F cannot be prescribed\nAnd(prescribed(W), Not(prescribed(F))) ::: If W is prescribed, F cannot be prescribed\nAnd(prescribed(G), Not(prescribed(N), prescribed(U))) ::: G cannot be prescribed if both N and U are prescribed\nAnd(prescribed(V), prescribed(H), prescribed(M)) ::: V cannot be prescribed unless both H and M are prescribed\n\n# Options\nQuestion ::: If G is prescribed for a given case, which one of the following is a pair of treatments both of which could also be prescribed for that case?\nis_sat(And(prescribed(F), prescribed(M))) ::: (A)\nis_sat(And(prescribed(F), prescribed(N))) ::: (B)\nis_sat(And(prescribed(N), prescribed(V))) ::: (C)\nis_sat(And(prescribed(O), prescribed(V))) ::: (D)\nis_sat(And(prescribed(V), prescribed(W))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_4_22",
    "context": "Nine different treatments are available for a certain illness: three antibiotics—F, G, and H—three dietary regimens—M, N, and O—and three physical therapies—U, V, and W. For each case of the illness, a doctor will prescribe exactly five of the treatments, in accordance with the following conditions: If two of the antibiotics are prescribed, the remaining antibiotic cannot be prescribed. There must be exactly one dietary regimen prescribed. If O is not prescribed, F cannot be prescribed. If W is prescribed, F cannot be prescribed. G cannot be prescribed if both N and U are prescribed. V cannot be prescribed unless both H and M are prescribed.",
    "question": "Which one of the following is a list of three treatments that could be prescribed together for a given case?",
    "answer": "D",
    "options": [
      "A) F, M, U",
      "B) F, O, W",
      "C) G, N, V",
      "D) G, V, W",
      "E) H, N, V"
    ],
    "raw_logic_programs": [
      "# Declarations\ntreatments = EnumSort([F, G, H, M, N, O, U, V, W])\nprescribed = Function([treatments] -> [bool])\n\n# Constraints\nForAll([t:treatments], Count([t2:treatments], And(t!= t2, prescribed(t2))) == 4) ::: For each case of the illness, a doctor will prescribe exactly five of the treatments\nAnd(prescribed(F), prescribed(G), prescribed(H)) ::: If two of the antibiotics are prescribed, the remaining antibiotic cannot be prescribed\nAnd(prescribed(M), prescribed(N), prescribed(O)) ::: There must be exactly one dietary regimen prescribed\nAnd(Not(prescribed(O)), Not(prescribed(F))) ::: If O is not prescribed, F cannot be prescribed\nAnd(prescribed(W), Not(prescribed(F))) ::: If W is prescribed, F cannot be prescribed\nAnd(prescribed(G), Not(prescribed(N), prescribed(U))) ::: G cannot be prescribed if both N and U are prescribed\nAnd(prescribed(V), And(prescribed(H), prescribed(M))) ::: V cannot be prescribed unless both H and M are prescribed\n\n# Options\nQuestion ::: Which one of the following is a list of three treatments that could be prescribed together for a given case?\nis_sat(And(prescribed(F), prescribed(M), prescribed(U))) ::: A) F, M, U\nis_sat(And(prescribed(F), prescribed(O), prescribed(W))) ::: B) F, O, W\nis_sat(And(prescribed(G), prescribed(N), prescribed(V))) ::: C) G, N, V\nis_sat(And(prescribed(G), prescribed(V), prescribed"
    ]
  },
  {
    "id": "ar_lsat_199712_4-G_4_23",
    "context": "Nine different treatments are available for a certain illness: three antibiotics—F, G, and H—three dietary regimens—M, N, and O—and three physical therapies—U, V, and W. For each case of the illness, a doctor will prescribe exactly five of the treatments, in accordance with the following conditions: If two of the antibiotics are prescribed, the remaining antibiotic cannot be prescribed. There must be exactly one dietary regimen prescribed. If O is not prescribed, F cannot be prescribed. If W is prescribed, F cannot be prescribed. G cannot be prescribed if both N and U are prescribed. V cannot be prescribed unless both H and M are prescribed.",
    "question": "Which one of the following treatments CANNOT be prescribed for any case?",
    "answer": "C",
    "options": [
      "A) G",
      "B) M",
      "C) N",
      "D) U",
      "E) W"
    ],
    "raw_logic_programs": [
      "# Declarations\ntreatments = EnumSort([F, G, H, M, N, O, U, V, W])\nprescribed = Function([treatments] -> [bool])\n\n# Constraints\nForAll([t:treatments], Count([t2:treatments], And(t!= t2, prescribed(t2))) == 4) ::: For each case of the illness, a doctor will prescribe exactly five of the treatments\nAnd(prescribed(F), prescribed(G), prescribed(H)) ::: If two of the antibiotics are prescribed, the remaining antibiotic cannot be prescribed\nAnd(prescribed(M), prescribed(N), prescribed(O)) ::: There must be exactly one dietary regimen prescribed\nAnd(Not(prescribed(O)), Not(prescribed(F))) ::: If O is not prescribed, F cannot be prescribed\nAnd(prescribed(W), Not(prescribed(F))) ::: If W is prescribed, F cannot be prescribed\nAnd(prescribed(N), prescribed(U), Not(prescribed(G))) ::: G cannot be prescribed if both N and U are prescribed\nAnd(prescribed(H), prescribed(M), prescribed(V)) ::: V cannot be prescribed unless both H and M are prescribed\n\n# Options\nQuestion ::: Which one of the following treatments CANNOT be prescribed for any case?\nis_exception(is_sat(prescribed(G))) ::: (A)\nis_exception(is_sat(prescribed(M))) ::: (B)\nis_exception(is_sat(prescribed(N))) ::: (C)\nis_exception(is_sat(prescribed(U))) ::: (D)\nis_exception(is_sat(prescribed(W))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_1_1",
    "context": "The members of two committees, a planting committee and a trails committee, are to be selected from among seven volunteers—F, G, H, J, K, L, and M. The following conditions govern the composition of the committees: Each committee must have at least three members. F cannot be on the same committee as K. If K is on a committee, J must also be on that committee. M must be on at least one of the committees. The two committees must have at least one member in common.",
    "question": "Which one of the following represents an acceptable selection of volunteers for the committees?",
    "answer": "B",
    "options": [
      "A) planting: F, G, H; trails: G, J, K, L",
      "B) planting: F, H, J; trails: G, H, L, M",
      "C) planting: F, H, M; trails: G, K, L, M",
      "D) planting: F, G, L, M; trails: F, H",
      "E) planting: F, H, J, K; trails: H, L, M"
    ],
    "raw_logic_programs": [
      "# Declarations\ncommittees = EnumSort([planting, trails])\nvolunteers = EnumSort([F, G, H, J, K, L, M])\nmembers = Function([committees, volunteers] -> [bool])\n\n# Constraints\nForAll([c:committees], Count([v:volunteers], members(c, v)) >= 3) ::: Each committee must have at least three members\nImplies(members(planting, F), Not(members(planting, K))) ::: F cannot be on the same committee as K\nImplies(members(planting, K), members(planting, J)) ::: If K is on a committee, J must also be on that committee\nImplies(members(trails, K), members(trails, J)) ::: If K is on a committee, J must also be on that committee\nImplies(members(planting, M), members(trails, M)) ::: M must be on at least one of the committees\nImplies(members(planting, M), members(trails, M)) ::: M must be on at least one of the committees\nForAll([c1:committees, c2:committees], Implies(c1!= c2, Count([v:volunteers], members(c1, v) && members(c2, v)) >= 1)) ::: The two committees must have at least one member in common\n\n# Options\nQuestion ::: Which one of the following represents an acceptable selection of volunteers for the committees?\nis_sat(And(members(planting, F), members(planting, G), members(planting, H), members(trails, G), members(trails, J), members(trails, K), members(trails, L))) ::: A) planting: F, G, H; trails: G, J, K, L\nis_sat(And(members(planting, F), members(plant"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_1_2",
    "context": "The members of two committees, a planting committee and a trails committee, are to be selected from among seven volunteers—F, G, H, J, K, L, and M. The following conditions govern the composition of the committees: Each committee must have at least three members. F cannot be on the same committee as K. If K is on a committee, J must also be on that committee. M must be on at least one of the committees. The two committees must have at least one member in common.",
    "question": "If the planting committee consists of F, H, L, and M, and if the trails committee consists of G, H, and J, then K could replace which one of the following committee members on a committee without violating any of the conditions governing the composition of the committees?",
    "answer": "B",
    "options": [
      "A) F",
      "B) G",
      "C) H",
      "D) L",
      "E) M"
    ],
    "raw_logic_programs": [
      "# Declarations\ncommittees = EnumSort([planting, trails])\nmembers = EnumSort([F, G, H, J, K, L, M])\non_committee = Function([committees, members] -> [bool])\n\n# Constraints\nForAll([c:committees], Count([m:members], on_committee(c, m)) >= 3) ::: Each committee must have at least three members\nNot(on_committee(planting, F) && on_committee(planting, K)) ::: F cannot be on the same committee as K\nImplies(on_committee(planting, K), on_committee(planting, J)) ::: If K is on a committee, J must also be on that committee\non_committee(planting, M) ::: M must be on at least one of the committees\nForAll([c1:committees, c2:committees], Implies(c1!= c2, Count([m:members], on_committee(c1, m) && on_committee(c2, m)) >= 1)) ::: The two committees must have at least one member in common\n\n# Options\nQuestion ::: If the planting committee consists of F, H, L, and M, and if the trails committee consists of G, H, and J, then K could replace which one of the following committee members on a committee without violating any of the conditions governing the composition of the committees?\nis_valid(on_committee(planting, K) && Not(on_committee(planting, F))) ::: (A)\nis_valid(on_committee(planting, K) && Not(on_committee(planting, G))) ::: (B)\nis_valid(on_committee(planting, K) && Not(on_committee(planting, H))) ::: (C)\nis_valid(on_committee(planting,"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_1_3",
    "context": "The members of two committees, a planting committee and a trails committee, are to be selected from among seven volunteers—F, G, H, J, K, L, and M. The following conditions govern the composition of the committees: Each committee must have at least three members. F cannot be on the same committee as K. If K is on a committee, J must also be on that committee. M must be on at least one of the committees. The two committees must have at least one member in common.",
    "question": "If the only members of the planting committee are G, H, and L and if the two committees are to have as many members in common as the conditions allow, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) The trails committee and the planting committee have exactly one member in common.",
      "B) The trails committee and the planting committee have exactly two members in common.",
      "C) The trails committee and the planting committee have an equal number of members.",
      "D) The trails committee has at least one more member than the planting committee.",
      "E) The planting committee has exactly two more members than the trails committee."
    ],
    "raw_logic_programs": [
      "# Declarations\ncommittees = EnumSort([planting, trails])\nmembers = EnumSort([F, G, H, J, K, L, M])\non = Function([committees, members] -> [bool])\n\n# Constraints\nForAll([c:committees], Count([m:members], on(c, m)) >= 3) ::: Each committee must have at least three members\nNot(on(planting, F) && on(planting, K)) ::: F cannot be on the same committee as K\nImplies(on(planting, K), on(planting, J)) ::: If K is on a committee, J must also be on that committee\nExists([c:committees], on(c, M)) ::: M must be on at least one of the committees\nExists([m:members], And(on(planting, m), on(trails, m))) ::: The two committees must have at least one member in common\n\n# Options\nQuestion ::: If the only members of the planting committee are G, H, and L and if the two committees are to have as many members in common as the conditions allow, then which one of the following must be true?\nis_sat(ForAll([m:members], Implies(on(planting, m), on(trails, m)))) ::: (A)\nis_sat(Exists([m:members], And(on(planting, m), on(trails, m)))) ::: (B)\nis_sat(Exists([m:members], And(on(planting, m), on(trails, m)))) ::: (C)\nis_sat(Exists([m:members], And(on(planting, m), on(trails, m)))) ::: (D)\nis_sat(Exists([m:members], And(on(planting, m), on(trails, m)))) ::: (E)\n------\nProblem:\nA certain company has"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_1_4",
    "context": "The members of two committees, a planting committee and a trails committee, are to be selected from among seven volunteers—F, G, H, J, K, L, and M. The following conditions govern the composition of the committees: Each committee must have at least three members. F cannot be on the same committee as K. If K is on a committee, J must also be on that committee. M must be on at least one of the committees. The two committees must have at least one member in common.",
    "question": "If K is on both committees and L is also on both committees and if the planting committee has exactly three members, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) F is on the planting committee.",
      "B) F is on the trails committee.",
      "C) G is on the planting committee.",
      "D) M is on the planting committee.",
      "E) M is on the trails committee."
    ],
    "raw_logic_programs": [
      "# Declarations\ncommittees = EnumSort([planting, trails])\nmembers = EnumSort([F, G, H, J, K, L, M])\non = Function([committees, members] -> [bool])\n\n# Constraints\nForAll([c:committees], Count([m:members], on(c, m)) >= 3) ::: Each committee must have at least three members\nNot(on(planting, F) && on(planting, K)) ::: F cannot be on the same committee as K\nImplies(on(planting, K), on(planting, J)) ::: If K is on a committee, J must also be on that committee\non(planting, M) || on(trails, M) ::: M must be on at least one of the committees\nAnd(on(planting, K), on(trails, K)) ::: K is on both committees\nAnd(on(planting, L), on(trails, L)) ::: L is also on both committees\nCount([m:members], on(planting, m)) == 3 ::: the planting committee has exactly three members\n\n# Options\nQuestion ::: If K is on both committees and L is also on both committees and if the planting committee has exactly three members, then which one of the following must be true?\nis_sat(on(planting, F)) ::: (A)\nis_sat(on(trails, F)) ::: (B)\nis_sat(on(planting, G)) ::: (C)\nis_sat(on(planting, M)) ::: (D)\nis_sat(on(trails, M)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_1_5",
    "context": "The members of two committees, a planting committee and a trails committee, are to be selected from among seven volunteers—F, G, H, J, K, L, and M. The following conditions govern the composition of the committees: Each committee must have at least three members. F cannot be on the same committee as K. If K is on a committee, J must also be on that committee. M must be on at least one of the committees. The two committees must have at least one member in common.",
    "question": "The largest number of members that the planting committee and the trails committee could have in common is",
    "answer": "D",
    "options": [
      "A) three",
      "B) four",
      "C) five",
      "D) six",
      "E) seven"
    ],
    "raw_logic_programs": [
      "# Declarations\ncommittees = EnumSort([planting, trails])\nmembers = EnumSort([F, G, H, J, K, L, M])\non = Function([committees, members] -> [bool])\n\n# Constraints\nForAll([c:committees], Count([m:members], on(c, m)) >= 3) ::: Each committee must have at least three members\nNot(on(planting, F) && on(planting, K)) ::: F cannot be on the same committee as K\nImplies(on(planting, K), on(planting, J)) ::: If K is on a committee, J must also be on that committee\non(planting, M) || on(trails, M) ::: M must be on at least one of the committees\nCount([m:members], And(on(planting, m), on(trails, m))) >= 1 ::: The two committees must have at least one member in common\n\n# Options\nQuestion ::: The largest number of members that the planting committee and the trails committee could have in common is\nis_sat(Count([m:members], And(on(planting, m), on(trails, m))) == 3)) ::: A) three\nis_sat(Count([m:members], And(on(planting, m), on(trails, m))) == 4)) ::: B) four\nis_sat(Count([m:members], And(on(planting, m), on(trails, m))) == 5)) ::: C) five\nis_sat(Count([m:members], And(on(planting, m), on(trails, m))) == 6)) ::: D) six\nis_sat(Count([m:members], And(on(planting, m), on(trails, m))) == 7)) ::: E) seven\n------\nProblem:\nA certain company has a total of"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_2_6",
    "context": "Exactly six tourists—Harry, Irene, Klaus, Laura, Michael, Norma—are to be assigned to four guides: Valois, Xerxes, Yossarian, Zalamea. Each tourist is assigned to exactly one guide, with at least one tourist assigned to each guide. Valois speaks only French. Xerxes speaks only Turkish and Spanish. Yossarian speaks only French and Turkish. Zalamea speaks only Spanish and Russian. Each tourist speaks exactly one of the languages spoken by his or her guide and speaks no other language. The following rules govern the assignment of the tourists to the guides: At least Harry and Irene are assigned to Yossarian. At least Laura is assigned to Zalamea. If Klaus is assigned to Xerxes, then Michael speaks French.",
    "question": "Each of the following could be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) Both Klaus and Harry speak Turkish.",
      "B) Both Klaus and Michael speak French.",
      "C) Both Klaus and Michael speak Russian.",
      "D) Both Klaus and Norma speak French.",
      "E) Both Klaus and Norma speak Spanish."
    ],
    "raw_logic_programs": [
      "# Declarations\ntourists = EnumSort([Harry, Irene, Klaus, Laura, Michael, Norma])\nguides = EnumSort([Valois, Xerxes, Yossarian, Zalamea])\nlanguages = EnumSort([French, Spanish, Turkish, Russian])\nspeaks = Function([tourists, languages] -> [bool])\n\n# Constraints\nForAll([t:tourists], Count([g:guides], g == guides(t)) == 1) ::: Each tourist is assigned to exactly one guide\nForAll([g:guides], Count([t:tourists], t == tourists(g)) >= 1) ::: with at least one tourist assigned to each guide\nForAll([g:guides], Or(g == Valois, g == Xerxes, g == Yossarian, g == Zalamea)) ::: Valois speaks only French\nForAll([g:guides], Or(g == Valois, g == Xerxes, g == Yossarian, g == Zalamea)) ::: Xerxes speaks only Turkish and Spanish\nForAll([g:guides], Or(g == Valois, g == Xerxes, g == Yossarian, g == Zalamea)) ::: Yossarian speaks only French and Turkish\nForAll([g:guides], Or(g == Valois, g == Xerxes, g == Yossarian, g == Zalamea)) ::: Zalamea speaks only Spanish and Russian\nForAll([t:tourists], Count([l:languages], speaks(t, l)) == 1) ::: Each tourist speaks exactly one of the languages spoken by his or her guide\nForAll([t:tourists], Count([l:languages], speaks(t, l)) == 1) ::: Each tourist speaks no other language\nForAll([t:tourists], speaks(t, languages(guides(t)))"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_2_7",
    "context": "Exactly six tourists—Harry, Irene, Klaus, Laura, Michael, Norma—are to be assigned to four guides: Valois, Xerxes, Yossarian, Zalamea. Each tourist is assigned to exactly one guide, with at least one tourist assigned to each guide. Valois speaks only French. Xerxes speaks only Turkish and Spanish. Yossarian speaks only French and Turkish. Zalamea speaks only Spanish and Russian. Each tourist speaks exactly one of the languages spoken by his or her guide and speaks no other language. The following rules govern the assignment of the tourists to the guides: At least Harry and Irene are assigned to Yossarian. At least Laura is assigned to Zalamea. If Klaus is assigned to Xerxes, then Michael speaks French.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Zalamea is assigned fewer than three of the tourists.",
      "B) Xerxes is assigned fewer than two of the tourists.",
      "C) Yossarian is assigned exactly two of the tourists.",
      "D) Valois is assigned exactly one of the tourists.",
      "E) Zalamea is assigned exactly one of the tourists."
    ],
    "raw_logic_programs": [
      "# Declarations\ntourists = EnumSort([Harry, Irene, Klaus, Laura, Michael, Norma])\nguides = EnumSort([Valois, Xerxes, Yossarian, Zalamea])\nlanguages = EnumSort([French, Spanish, Turkish, Russian])\nspeaks = Function([tourists, languages] -> [bool])\nassigned = Function([tourists, guides] -> [bool])\n\n# Constraints\nForAll([t:tourists], Count([g:guides], assigned(t, g)) == 1) ::: Each tourist is assigned to exactly one guide\nForAll([g:guides], Count([t:tourists], assigned(t, g)) >= 1) ::: with at least one tourist assigned to each guide\nForAll([t:tourists], Count([l:languages], speaks(t, l)) == 1) ::: Each tourist speaks exactly one of the languages spoken by his or her guide\nForAll([g:guides], Count([l:languages], speaks(g, l)) == 2) ::: and speaks no other language\nAnd(assigned(Harry, Yossarian), assigned(Irene, Yossarian)) ::: At least Harry and Irene are assigned to Yossarian\nassigned(Laura, Zalamea) ::: At least Laura is assigned to Zalamea\nImplies(assigned(Klaus, Xerxes), speaks(Michael, French)) ::: If Klaus is assigned to Xerxes, then Michael speaks French\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Count([t:tourists], assigned(t, Zalamea)) < 3) ::: A) Zalamea is assigned fewer than three of the tourists.\nis_valid(Count([t:tourists], assigned(t, Xerxes)) < 2) ::: B) Xerxes is assigned"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_2_8",
    "context": "Exactly six tourists—Harry, Irene, Klaus, Laura, Michael, Norma—are to be assigned to four guides: Valois, Xerxes, Yossarian, Zalamea. Each tourist is assigned to exactly one guide, with at least one tourist assigned to each guide. Valois speaks only French. Xerxes speaks only Turkish and Spanish. Yossarian speaks only French and Turkish. Zalamea speaks only Spanish and Russian. Each tourist speaks exactly one of the languages spoken by his or her guide and speaks no other language. The following rules govern the assignment of the tourists to the guides: At least Harry and Irene are assigned to Yossarian. At least Laura is assigned to Zalamea. If Klaus is assigned to Xerxes, then Michael speaks French.",
    "question": "Each of the following could be true of the assignment of tourists to guides EXCEPT:",
    "answer": "B",
    "options": [
      "A) It assigns Klaus to Valois and Michael to Xerxes.",
      "B) It assigns Klaus to Yossarian and Norma to Zalamea.",
      "C) It assigns Laura to Zalamea and Michael to Zalamea.",
      "D) It assigns Michael to Valois and Klaus to Zalamea.",
      "E) It assigns Michael to Xerxes and Klaus to Zalamea."
    ],
    "raw_logic_programs": [
      "# Declarations\ntourists = EnumSort([Harry, Irene, Klaus, Laura, Michael, Norma])\nguides = EnumSort([Valois, Xerxes, Yossarian, Zalamea])\nlanguages = EnumSort([French, Spanish, Turkish, Russian])\nspeaks = Function([tourists, languages] -> [bool])\nassigned = Function([tourists, guides] -> [bool])\n\n# Constraints\nForAll([t:tourists], Count([g:guides], assigned(t, g)) == 1) ::: Each tourist is assigned to exactly one guide\nForAll([g:guides], Count([t:tourists], assigned(t, g)) >= 1) ::: with at least one tourist assigned to each guide\nAnd(assigned(Harry, Yossarian), assigned(Irene, Yossarian)) ::: At least Harry and Irene are assigned to Yossarian\nassigned(Laura, Zalamea) ::: At least Laura is assigned to Zalamea\nAnd(assigned(Klaus, Xerxes), speaks(Michael, French)) ::: If Klaus is assigned to Xerxes, then Michael speaks French\nForAll([t:tourists], Count([l:languages], speaks(t, l)) == 1) ::: Each tourist speaks exactly one of the languages spoken by his or her guide\nForAll([t:tourists], ForAll([l:languages], Implies(speaks(t, l), speaks(assigned(t, guides), l)))) ::: and speaks no other language\n\n# Options\nQuestion ::: Each of the following could be true of the assignment of tourists to guides EXCEPT:\nis_exception(is_sat(assigned(Klaus, Valois) && assigned(Michael, Xerxes))) ::: (A)\nis_exception(is_sat(assigned(Klaus, Yossarian) && assigned(Norma, Zalamea))) ::: (B)\nis_exception(is_sat(assigned(Laura, Zalamea) && assigned(Michael, Zalamea))) ::: (C)\nis_exception(is_sat(assigned(Michael, Valois) && assigned(Klaus, Zalamea))) ::: (D)\nis_exception(is_sat(assigned(Michael, Xerxes) && assigned(Klaus, Zalamea))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_2_9",
    "context": "Exactly six tourists—Harry, Irene, Klaus, Laura, Michael, Norma—are to be assigned to four guides: Valois, Xerxes, Yossarian, Zalamea. Each tourist is assigned to exactly one guide, with at least one tourist assigned to each guide. Valois speaks only French. Xerxes speaks only Turkish and Spanish. Yossarian speaks only French and Turkish. Zalamea speaks only Spanish and Russian. Each tourist speaks exactly one of the languages spoken by his or her guide and speaks no other language. The following rules govern the assignment of the tourists to the guides: At least Harry and Irene are assigned to Yossarian. At least Laura is assigned to Zalamea. If Klaus is assigned to Xerxes, then Michael speaks French.",
    "question": "If Klaus and Laura speak the same language as each other, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) At least one of Michael and Norma speaks Spanish.",
      "B) At least two tourists speak Russian.",
      "C) Klaus and Laura speak Russian.",
      "D) At least two tourists speak French.",
      "E) At least one of Michael and Norma speaks French."
    ],
    "raw_logic_programs": [
      "# Declarations\ntourists = EnumSort([Harry, Irene, Klaus, Laura, Michael, Norma])\nguides = EnumSort([Valois, Xerxes, Yossarian, Zalamea])\nlanguages = EnumSort([French, Spanish, Turkish, Russian])\nspeaks = Function([tourists, languages] -> [bool])\n\n# Constraints\nForAll([t:tourists], Count([g:guides], g == guides(t)) == 1) ::: Each tourist is assigned to exactly one guide\nForAll([g:guides], Count([t:tourists], t == tourists(g)) >= 1) ::: with at least one tourist assigned to each guide\nspeaks(Valois, French) ::: Valois speaks only French\nspeaks(Xerxes, Turkish) ::: Xerxes speaks only Turkish and Spanish\nspeaks(Yossarian, French) ::: Yossarian speaks only French and Turkish\nspeaks(Zalamea, Spanish) ::: Zalamea speaks only Spanish and Russian\nForAll([t:tourists], Count([l:languages], speaks(t, l)) == 1) ::: Each tourist speaks exactly one of the languages spoken by his or her guide and speaks no other language\nAnd(tourists(Yossarian) == Harry, tourists(Yossarian) == Irene) ::: At least Harry and Irene are assigned to Yossarian\ntourists(Zalamea) == Laura ::: At least Laura is assigned to Zalamea\nImplies(tourists(Xerxes) == Klaus, speaks(Michael, French)) ::: If Klaus is assigned to Xerxes, then Michael speaks French\n\n# Options\nQuestion ::: If Klaus and Laura speak the same language as each other, then which one of the following must be true?\nis_valid(Exists([t:tourists], speaks(t, Spanish))) ::: A) At least one of Michael and Norma speaks Spanish.\nis_valid(Exists([t:tourists], speaks(t, Russian))) ::: B) At least two tourists speak Russian.\nis_valid(speaks(Klaus, Russian)) ::: C) Klaus and Laura speak Russian.\nis_valid(Exists([t:tourists], speaks(t, French))) ::: D) At least two tourists speak French.\nis_valid(Exists([t:tourists], speaks(t, French))) ::: E"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_2_10",
    "context": "Exactly six tourists—Harry, Irene, Klaus, Laura, Michael, Norma—are to be assigned to four guides: Valois, Xerxes, Yossarian, Zalamea. Each tourist is assigned to exactly one guide, with at least one tourist assigned to each guide. Valois speaks only French. Xerxes speaks only Turkish and Spanish. Yossarian speaks only French and Turkish. Zalamea speaks only Spanish and Russian. Each tourist speaks exactly one of the languages spoken by his or her guide and speaks no other language. The following rules govern the assignment of the tourists to the guides: At least Harry and Irene are assigned to Yossarian. At least Laura is assigned to Zalamea. If Klaus is assigned to Xerxes, then Michael speaks French.",
    "question": "If Laura and Norma speak the same language as each other, then the maximum number of the tourists who could speak Turkish is",
    "answer": "B",
    "options": [
      "A) two",
      "B) three",
      "C) four",
      "D) five",
      "E) six"
    ],
    "raw_logic_programs": [
      "# Declarations\ntourists = EnumSort([Harry, Irene, Klaus, Laura, Michael, Norma])\nguides = EnumSort([Valois, Xerxes, Yossarian, Zalamea])\nlanguages = EnumSort([French, Spanish, Turkish, Russian])\nspeaks = Function([tourists, languages] -> [bool])\n\n# Constraints\nForAll([t:tourists], Count([g:guides], g == guides(t)) == 1) ::: Each tourist is assigned to exactly one guide\nForAll([g:guides], Count([t:tourists], t == tourists(g)) >= 1) ::: with at least one tourist assigned to each guide\nspeaks(Valois, French) ::: Valois speaks only French\nspeaks(Xerxes, Turkish) ::: Xerxes speaks only Turkish and Spanish\nspeaks(Xerxes, Spanish) ::: Xerxes speaks only Turkish and Spanish\nspeaks(Yossarian, French) ::: Yossarian speaks only French and Turkish\nspeaks(Yossarian, Turkish) ::: Yossarian speaks only French and Turkish\nspeaks(Zalamea, Spanish) ::: Zalamea speaks only Spanish and Russian\nspeaks(Zalamea, Russian) ::: Zalamea speaks only Spanish and Russian\nForAll([t:tourists], Count([l:languages], speaks(t, l)) == 1) ::: Each tourist speaks exactly one of the languages spoken by his or her guide and speaks no other language\nAnd(tourists(Yossarian) == Harry, tourists(Yossarian) == Irene) ::: At least Harry and Irene are assigned to Yossarian\ntourists(Zalamea) == Laura ::: At least Laura is assigned to Zalamea\nImplies(tourists(Xerxes) == Klaus, speaks(Michael, French)) ::: If Klaus is assigned to Xerxes, then Michael speaks French\n\n# Options\nQuestion ::: If Laura and Norma speak the same language as each other, then the maximum number of the tourists who could speak Turkish is\nis_sat(ForAll([t:tourists], speaks(t, Turkish))) ::: A) two\nis_sat(ForAll([t:tourists], speaks(t, Turkish))) ::: B) three\nis_sat(ForAll([t:tourists], speaks(t, Turkish))) :"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_2_11",
    "context": "Exactly six tourists—Harry, Irene, Klaus, Laura, Michael, Norma—are to be assigned to four guides: Valois, Xerxes, Yossarian, Zalamea. Each tourist is assigned to exactly one guide, with at least one tourist assigned to each guide. Valois speaks only French. Xerxes speaks only Turkish and Spanish. Yossarian speaks only French and Turkish. Zalamea speaks only Spanish and Russian. Each tourist speaks exactly one of the languages spoken by his or her guide and speaks no other language. The following rules govern the assignment of the tourists to the guides: At least Harry and Irene are assigned to Yossarian. At least Laura is assigned to Zalamea. If Klaus is assigned to Xerxes, then Michael speaks French.",
    "question": "If exactly two tourists are assigned to Xerxes, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Norma speaks Russian and Laura speaks Russian.",
      "B) Norma speaks French and Michael speaks French.",
      "C) Norma speaks French and Klaus speaks Turkish.",
      "D) Michael speaks Spanish and Klaus speaks Spanish.",
      "E) Michael speaks French and Klaus speaks Spanish."
    ],
    "raw_logic_programs": [
      "# Declarations\ntourists = EnumSort([Harry, Irene, Klaus, Laura, Michael, Norma])\nguides = EnumSort([Valois, Xerxes, Yossarian, Zalamea])\nspeaks = Function([tourists, guides] -> [EnumSort([French, Turkish, Spanish, Russian]])])\n\n# Constraints\nForAll([t:tourists], Count([g:guides], speaks(t, g)) == 1) ::: Each tourist is assigned to exactly one guide\nForAll([g:guides], Count([t:tourists], speaks(t, g)) >= 1) ::: with at least one tourist assigned to each guide\nspeaks(Valois, g) == French ::: Valois speaks only French\nspeaks(Xerxes, g) == Turkish ::: Xerxes speaks only Turkish and Spanish\nspeaks(Xerxes, g) == Spanish ::: Xerxes speaks only Turkish and Spanish\nspeaks(Yossarian, g) == French ::: Yossarian speaks only French and Turkish\nspeaks(Yossarian, g) == Turkish ::: Yossarian speaks only French and Turkish\nspeaks(Zalamea, g) == Spanish ::: Zalamea speaks only Spanish and Russian\nspeaks(Zalamea, g) == Russian ::: Zalamea speaks only Spanish and Russian\nAnd(speaks(Harry, g) == speaks(Irene, g), speaks(Harry, g) == speaks(Yossarian, g)) ::: At least Harry and Irene are assigned to Yossarian\nspeaks(Laura, g) == speaks(Zalamea, g) ::: At least Laura is assigned to Zalamea\nImplies(speaks(Klaus, g) == speaks(Xerxes, g), speaks(Michael, g) == French) ::: If Klaus is assigned to Xerxes, then Michael speaks French\n\n# Options\nQuestion ::: If exactly two tourists are assigned to Xerxes, then which one of the following could be true?\nis_valid(And(speaks(Norma, g) == Russian, speaks(Laura, g) == Russian))) ::: (A)\nis_valid(And(speaks(Norma, g) == French, speaks(Michael, g) == French))) ::: (B)\nis_valid(And(speaks(Norma, g) == French, speaks(Klaus"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_2_12",
    "context": "Exactly six tourists—Harry, Irene, Klaus, Laura, Michael, Norma—are to be assigned to four guides: Valois, Xerxes, Yossarian, Zalamea. Each tourist is assigned to exactly one guide, with at least one tourist assigned to each guide. Valois speaks only French. Xerxes speaks only Turkish and Spanish. Yossarian speaks only French and Turkish. Zalamea speaks only Spanish and Russian. Each tourist speaks exactly one of the languages spoken by his or her guide and speaks no other language. The following rules govern the assignment of the tourists to the guides: At least Harry and Irene are assigned to Yossarian. At least Laura is assigned to Zalamea. If Klaus is assigned to Xerxes, then Michael speaks French.",
    "question": "If Harry, Irene, Michael, and Norma all speak the same language as each other, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Klaus speaks Russian.",
      "B) Exactly two of the tourists speak Russian.",
      "C) Exactly three of the tourists speak Spanish.",
      "D) Exactly two of the tourists speak Turkish.",
      "E) Klaus speaks French."
    ],
    "raw_logic_programs": [
      "# Declarations\ntourists = EnumSort([Harry, Irene, Klaus, Laura, Michael, Norma])\nguides = EnumSort([Valois, Xerxes, Yossarian, Zalamea])\nlanguages = EnumSort([French, Spanish, Turkish, Russian])\nspeaks = Function([tourists, languages] -> [bool])\n\n# Constraints\nForAll([t:tourists], Count([g:guides], g == guides(t)) == 1) ::: Each tourist is assigned to exactly one guide\nForAll([g:guides], Count([t:tourists], t == tourists(g)) >= 1) ::: with at least one tourist assigned to each guide\nForAll([g:guides], Or(g == Valois, g == Xerxes, g == Yossarian, g == Zalamea)) ::: Valois speaks only French\nForAll([g:guides], Or(g == Valois, g == Xerxes, g == Yossarian, g == Zalamea)) ::: Xerxes speaks only Turkish and Spanish\nForAll([g:guides], Or(g == Valois, g == Xerxes, g == Yossarian, g == Zalamea)) ::: Yossarian speaks only French and Turkish\nForAll([g:guides], Or(g == Valois, g == Xerxes, g == Yossarian, g == Zalamea)) ::: Zalamea speaks only Spanish and Russian\nForAll([t:tourists], Count([l:languages], speaks(t, l)) == 1) ::: Each tourist speaks exactly one of the languages spoken by his or her guide\nForAll([t:tourists], Count([l:languages], speaks(t, l)) == 1) ::: Each tourist speaks exactly one of the languages spoken by his or her guide\nForAll([t:tourists], Count([l:languages], speaks(t, l)) == 1) ::: Each tourist speaks exactly one of the languages spoken by his or her guide\nForAll([t:tourists], Count([l:languages], speaks(t, l)) == 1) ::: Each tourist speaks exactly one of the languages spoken by his or her guide\nForAll([t:tourists], Count([l:languages], speaks(t, l)) == 1) ::: Each tourist speaks exactly one of the languages spoken by his or her"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_3_13",
    "context": "Each of six people—Kim, Lina, Maricella, Oliver, Paulo, and Shigeru—plays exactly one of two sports—golf, and tennis. If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties. The following conditions must apply: Oliver plays tennis. Lina plays golf. There is no golf player ranked higher than Lina. If Maricella plays golf, then Paulo and Shigeru play golf, Paulo ranking lower than Maricella but higher than Shigeru. If Maricella plays tennis, then Shigeru plays tennis, Shigeru ranking lower than Oliver but higher than Maricella. If Paulo plays tennis, then Kim plays tennis, Oliver ranking lower than Kim but higher than Paulo.",
    "question": "Which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Maricella plays tennis and Shigeru plays golf.",
      "B) Paulo plays tennis and Kim plays golf.",
      "C) Kim plays tennis and Paulo plays golf.",
      "D) Paulo and Oliver play tennis, Paulo ranking higher than Oliver.",
      "E) Maricella and Shigeru play tennis, Maricella ranking higher than Shigeru."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Kim, Lina, Maricella, Oliver, Paulo, Shigeru])\nsports = EnumSort([golf, tennis])\nplays = Function([people, sports] -> [bool])\nranks = Function([people, sports] -> [int])\n\n# Constraints\nForAll([p:people], Count([s:sports], plays(p, s)) == 1) ::: Each of six people plays exactly one of two sports\nplays(Oliver, tennis) ::: Oliver plays tennis\nplays(Lina, golf) ::: Lina plays golf\nForAll([p:people], Implies(plays(p, golf), Not(ranks(p, golf) > ranks(Lina, golf)))) ::: There is no golf player ranked higher than Lina\nAnd(plays(Maricella, golf), plays(Paulo, golf), plays(Shigeru, golf), ranks(Paulo, golf) < ranks(Maricella, golf), ranks(Shigeru, golf) < ranks(Paulo, golf)) ::: If Maricella plays golf, then Paulo and Shigeru play golf, Paulo ranking lower than Maricella but higher than Shigeru\nAnd(plays(Maricella, tennis), plays(Shigeru, tennis), ranks(Shigeru, tennis) < ranks(Oliver, tennis), ranks(Maricella, tennis) < ranks(Shigeru, tennis)) ::: If Maricella plays tennis, then Shigeru plays tennis, Shigeru ranking lower than Oliver but higher than Maricella\nAnd(plays(Paulo, tennis), plays(Kim, tennis), ranks(Oliver, tennis) < ranks(Kim, tennis), ranks(Paulo, tennis) < ranks(Oliver, tennis)) ::: If Paulo plays tennis, then Kim plays tennis, Oliver ranking lower than Kim but higher than Paulo\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(And(plays(Maricella, tennis), plays(Shigeru, golf))) ::: (A)\nis_valid(And(plays(Paulo, tennis), plays(Kim, golf))) ::: (B)\nis_valid(And(plays(Kim, tennis), plays(Paulo, golf))) ::: (C)\nis_valid(And(plays(Paulo, tennis), plays(Oliver, tennis), ranks(Paulo, tennis) < ranks(Oliver, tennis))) ::: (D)\nis_valid(And(plays(Maricella, tennis), plays(Shigeru"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_3_14",
    "context": "Each of six people—Kim, Lina, Maricella, Oliver, Paulo, and Shigeru—plays exactly one of two sports—golf, and tennis. If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties. The following conditions must apply: Oliver plays tennis. Lina plays golf. There is no golf player ranked higher than Lina. If Maricella plays golf, then Paulo and Shigeru play golf, Paulo ranking lower than Maricella but higher than Shigeru. If Maricella plays tennis, then Shigeru plays tennis, Shigeru ranking lower than Oliver but higher than Maricella. If Paulo plays tennis, then Kim plays tennis, Oliver ranking lower than Kim but higher than Paulo.",
    "question": "Each of the following could be the lowest-ranking tennis player EXCEPT:",
    "answer": "A",
    "options": [
      "A) Shigeru",
      "B) Kim",
      "C) Oliver",
      "D) Paulo",
      "E) Maricella"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Kim, Lina, Maricella, Oliver, Paulo, Shigeru])\nsports = EnumSort([golf, tennis])\nplays = Function([people, sports] -> [bool])\nranks = Function([people, sports] -> [int])\n\n# Constraints\nForAll([p:people], Count([s:sports], plays(p, s)) == 1) ::: Each of six people plays exactly one of two sports\nplays(Oliver, tennis) ::: Oliver plays tennis\nplays(Lina, golf) ::: Lina plays golf\nForAll([p:people], And(plays(p, golf), Not(plays(p, tennis)), Count([q:people], And(plays(q, golf), ranks(q, golf) > ranks(p, golf))) == 0)) ::: There is no golf player ranked higher than Lina\nAnd(plays(Maricella, golf), plays(Paulo, golf), plays(Shigeru, golf), ranks(Paulo, golf) > ranks(Maricella, golf), ranks(Shigeru, golf) < ranks(Maricella, golf)) ::: If Maricella plays golf, then Paulo and Shigeru play golf, Paulo ranking lower than Maricella but higher than Shigeru\nAnd(plays(Maricella, tennis), plays(Shigeru, tennis), ranks(Shigeru, tennis) < ranks(Oliver, tennis), ranks(Maricella, tennis) > ranks(Shigeru, tennis)) ::: If Maricella plays tennis, then Shigeru plays tennis, Shigeru ranking lower than Oliver but higher than Maricella\nAnd(plays(Paulo, tennis), plays(Kim, tennis), ranks(Oliver, tennis) < ranks(Kim, tennis), ranks(Paulo, tennis) > ranks(Oliver, tennis)) ::: If Paulo plays tennis, then Kim plays tennis, Oliver ranking lower than Kim but higher than Paulo\n\n# Options\nQuestion ::: Each of the following could be the lowest-ranking tennis player EXCEPT:\nis_exception(is_sat(ranks(Shigeru, tennis) == 1)) ::: A) Shigeru\nis_exception(is_sat(ranks(Kim, tennis) == 1)) ::: B) Kim\nis_exception(is_sat(ranks(Oliver, tennis) == 1)) ::: C) Oliver\nis_exception(is_sat(ranks(Paulo, tennis) == 1)) ::: D) Paulo"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_3_15",
    "context": "Each of six people—Kim, Lina, Maricella, Oliver, Paulo, and Shigeru—plays exactly one of two sports—golf, and tennis. If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties. The following conditions must apply: Oliver plays tennis. Lina plays golf. There is no golf player ranked higher than Lina. If Maricella plays golf, then Paulo and Shigeru play golf, Paulo ranking lower than Maricella but higher than Shigeru. If Maricella plays tennis, then Shigeru plays tennis, Shigeru ranking lower than Oliver but higher than Maricella. If Paulo plays tennis, then Kim plays tennis, Oliver ranking lower than Kim but higher than Paulo.",
    "question": "Which one of the following could be a complete and accurate list of the people who play tennis, listed in order of rank from highest to lowest?",
    "answer": "D",
    "options": [
      "A) Shigeru, Paulo, Oliver",
      "B) Oliver, Paulo, Kim",
      "C) Shigeru, Oliver, Maricella",
      "D) Oliver, Shigeru, Kim, Maricella",
      "E) Paulo, Maricella, Shigeru, Kim"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Kim, Lina, Maricella, Oliver, Paulo, Shigeru])\nsports = EnumSort([golf, tennis])\nplays = Function([people, sports] -> [bool])\nranks = Function([people, sports] -> [int])\n\n# Constraints\nForAll([p:people], Count([s:sports], plays(p, s)) == 1) ::: Each of six people plays exactly one of two sports\nplays(Oliver, tennis) ::: Oliver plays tennis\nplays(Lina, golf) ::: Lina plays golf\nForAll([p:people], And(plays(p, golf), Not(plays(p, tennis)), Count([q:people], And(plays(q, golf), ranks(q, golf) > ranks(p, golf))) == 0)) ::: There is no golf player ranked higher than Lina\nAnd(plays(Maricella, golf), plays(Paulo, golf), plays(Shigeru, golf), ranks(Paulo, golf) > ranks(Maricella, golf), ranks(Shigeru, golf) < ranks(Maricella, golf)) ::: If Maricella plays golf, then Paulo and Shigeru play golf\nAnd(plays(Maricella, tennis), plays(Shigeru, tennis), ranks(Shigeru, tennis) > ranks(Oliver, tennis), ranks(Shigeru, tennis) < ranks(Maricella, tennis)) ::: If Maricella plays tennis, then Shigeru plays tennis\nAnd(plays(Paulo, tennis), plays(Kim, tennis), ranks(Oliver, tennis) < ranks(Kim, tennis), ranks(Paulo, tennis) > ranks(Kim, tennis)) ::: If Paulo plays tennis, then Kim plays tennis\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the people who play tennis, listed in order of rank from highest to lowest?\nis_exception(is_sat(And(plays(Shigeru, tennis), plays(Paulo, tennis), plays(Oliver, tennis), ranks(Shigeru, tennis) < ranks(Paulo, tennis), ranks(Paulo, tennis) < ranks(Oliver, tennis)))) ::: A) Shigeru, Paulo, Oliver\nis_exception(is_sat(And(plays(Oliver, tennis), plays(Paulo, tennis), plays(Kim, tennis), ranks(Oliver, tennis) < ranks(Kim, tennis), ranks(Paulo, tennis) < ranks(Kim,"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_3_16",
    "context": "Each of six people—Kim, Lina, Maricella, Oliver, Paulo, and Shigeru—plays exactly one of two sports—golf, and tennis. If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties. The following conditions must apply: Oliver plays tennis. Lina plays golf. There is no golf player ranked higher than Lina. If Maricella plays golf, then Paulo and Shigeru play golf, Paulo ranking lower than Maricella but higher than Shigeru. If Maricella plays tennis, then Shigeru plays tennis, Shigeru ranking lower than Oliver but higher than Maricella. If Paulo plays tennis, then Kim plays tennis, Oliver ranking lower than Kim but higher than Paulo.",
    "question": "If Shigeru plays golf, then each of the following are pairs of people who must play the same sport as each other EXCEPT:",
    "answer": "C",
    "options": [
      "A) Paulo and Maricella",
      "B) Paulo and Shigeru",
      "C) Kim and Maricella",
      "D) Paulo and Lina",
      "E) Maricella and Shigeru"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Kim, Lina, Maricella, Oliver, Paulo, Shigeru])\nsports = EnumSort([golf, tennis])\nplays = Function([people, sports] -> [bool])\nranks = Function([people, sports] -> [int])\n\n# Constraints\nForAll([p:people], Count([s:sports], plays(p, s)) == 1) ::: Each of six people plays exactly one of two sports\nplays(Oliver, tennis) ::: Oliver plays tennis\nplays(Lina, golf) ::: Lina plays golf\nForAll([p:people], And(plays(p, golf), plays(p, tennis))) ::: If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties\nForAll([p:people], And(plays(p, golf), plays(p, tennis))) ::: If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties\nForAll([p:people], And(plays(p, golf), plays(p, tennis))) ::: If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties\nForAll([p:people], And(plays(p, golf), plays(p, tennis))) ::: If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties\nForAll([p:people], And(plays(p, golf), plays(p, tennis))) ::: If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties\nForAll([p:people], And(plays(p, golf), plays(p, tennis))) ::: If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties\nForAll([p:people], And(plays(p, golf), plays(p, tennis))) ::: If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties\nForAll([p:people], And(plays(p, golf), plays(p, tennis)))"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_3_17",
    "context": "Each of six people—Kim, Lina, Maricella, Oliver, Paulo, and Shigeru—plays exactly one of two sports—golf, and tennis. If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties. The following conditions must apply: Oliver plays tennis. Lina plays golf. There is no golf player ranked higher than Lina. If Maricella plays golf, then Paulo and Shigeru play golf, Paulo ranking lower than Maricella but higher than Shigeru. If Maricella plays tennis, then Shigeru plays tennis, Shigeru ranking lower than Oliver but higher than Maricella. If Paulo plays tennis, then Kim plays tennis, Oliver ranking lower than Kim but higher than Paulo.",
    "question": "If Oliver is the highest-ranking tennis player, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Oliver and Maricella play the same sport as each other.",
      "B) Paulo and Lina play the same sport as each other.",
      "C) Paulo and Oliver play the same sport as each other.",
      "D) Kim and Lina do not play the same sport as each other.",
      "E) Kim and Paulo do not play the same sport as each other."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Kim, Lina, Maricella, Oliver, Paulo, Shigeru])\nsports = EnumSort([golf, tennis])\nplays = Function([people, sports] -> [bool])\nranks = Function([people, sports] -> [int])\n\n# Constraints\nForAll([p:people], Count([s:sports], plays(p, s)) == 1) ::: Each of six people plays exactly one of two sports\nplays(Oliver, tennis) ::: Oliver plays tennis\nplays(Lina, golf) ::: Lina plays golf\nForAll([p:people], And(plays(p, golf), Not(plays(p, tennis)), Implies(plays(p, golf), Not(ranks(p, golf) > ranks(Lina, golf))))) ::: There is no golf player ranked higher than Lina\nAnd(plays(Maricella, golf), plays(Paulo, golf), plays(Shigeru, golf), Implies(plays(Maricella, golf), And(ranks(Paulo, golf) < ranks(Maricella, golf), ranks(Shigeru, golf) < ranks(Paulo, golf)))) ::: If Maricella plays golf, then Paulo and Shigeru play golf\nAnd(plays(Maricella, tennis), plays(Shigeru, tennis), Implies(plays(Maricella, tennis), And(ranks(Shigeru, tennis) < ranks(Maricella, tennis), ranks(Oliver, tennis) < ranks(Shigeru, tennis)))) ::: If Maricella plays tennis, then Shigeru plays tennis\nAnd(plays(Paulo, tennis), plays(Kim, tennis), Implies(plays(Paulo, tennis), And(ranks(Oliver, tennis) < ranks(Kim, tennis), ranks(Paulo, tennis) < ranks(Oliver, tennis)))) ::: If Paulo plays tennis, then Kim plays tennis\n\n# Options\nQuestion ::: If Oliver is the highest-ranking tennis player, which one of the following must be true?\nis_valid(And(plays(Oliver, tennis), plays(Maricella, tennis))) ::: (A)\nis_valid(And(plays(Paulo, tennis), plays(Lina, tennis))) ::: (B)\nis_valid(And(plays(Oliver, tennis), plays(Paulo, tennis))) ::: (C)\nis_valid(And(plays(Kim, tennis), plays(Lina, tennis))) ::: (D)\nis_valid("
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_3_18",
    "context": "Each of six people—Kim, Lina, Maricella, Oliver, Paulo, and Shigeru—plays exactly one of two sports—golf, and tennis. If a sport is played by more than one of the six people, then the people who play that sport are ranked in order of ability from highest to lowest, with no ties. The following conditions must apply: Oliver plays tennis. Lina plays golf. There is no golf player ranked higher than Lina. If Maricella plays golf, then Paulo and Shigeru play golf, Paulo ranking lower than Maricella but higher than Shigeru. If Maricella plays tennis, then Shigeru plays tennis, Shigeru ranking lower than Oliver but higher than Maricella. If Paulo plays tennis, then Kim plays tennis, Oliver ranking lower than Kim but higher than Paulo.",
    "question": "Suppose that the condition is added that Shigeru and Paulo do not play the same sport as each other. If all the other conditions remain in effect, then each of the following could be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) Maricella and Kim play the same sport as each other.",
      "B) Paulo and Kim play the same sport as each other.",
      "C) Paulo and Maricella play the same sport as each other.",
      "D) Kim and Paulo do not play the same sport as each other.",
      "E) Maricella and Kim do not play the same sport as each other."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Kim, Lina, Maricella, Oliver, Paulo, Shigeru])\nsports = EnumSort([golf, tennis])\nplays = Function([people, sports] -> [bool])\nranks = Function([people, sports] -> [int])\n\n# Constraints\nForAll([p:people], Count([s:sports], plays(p, s)) == 1) ::: Each of six people plays exactly one of two sports\nplays(Oliver, tennis) ::: Oliver plays tennis\nplays(Lina, golf) ::: Lina plays golf\nForAll([p:people], Implies(plays(p, golf), ranks(p, golf) <= ranks(Lina, golf))) ::: There is no golf player ranked higher than Lina\nAnd(plays(Maricella, golf), plays(Paulo, golf), plays(Shigeru, golf), ranks(Paulo, golf) < ranks(Maricella, golf), ranks(Shigeru, golf) < ranks(Paulo, golf)) ::: If Maricella plays golf, then Paulo and Shigeru play golf\nAnd(plays(Maricella, tennis), plays(Shigeru, tennis), ranks(Shigeru, tennis) < ranks(Oliver, tennis), ranks(Maricella, tennis) < ranks(Shigeru, tennis)) ::: If Maricella plays tennis, then Shigeru plays tennis\nAnd(plays(Paulo, tennis), plays(Kim, tennis), ranks(Oliver, tennis) < ranks(Kim, tennis), ranks(Paulo, tennis) < ranks(Kim, tennis)) ::: If Paulo plays tennis, then Kim plays tennis\n\n# Options\nQuestion ::: Suppose that the condition is added that Shigeru and Paulo do not play the same sport as each other. If all the other conditions remain in effect, then each of the following could be true EXCEPT:\nis_exception(is_sat(plays(Maricella, golf) && plays(Kim, golf))) ::: A) Maricella and Kim play the same sport as each other.\nis_exception(is_sat(plays(Paulo, tennis) && plays(Kim, tennis))) ::: B) Paulo and Kim play the same sport as each other.\nis_exception(is_sat(plays(Paulo, tennis) && plays(Maricella, tennis))) ::: C) Paulo and Maricella play the same sport as each other.\nis_exception(is_sat(plays(Kim, tennis) && plays(Paulo, tennis))) ::: D) Kim and Paulo do not play the same sport as each other.\nis_exception(is_sat(plays(Maricella, tennis) && plays(Kim, tennis))) ::: E) Maricella and Kim do not play the same sport as each other.\n------"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_4_19",
    "context": "A disc jockey will play a sequence consisting of exactly seven different songs: three ballads—F, G, and H—and four dance tunes—R, S, V, and X. The following conditions must be met: No dance tune can be played immediately after another dance tune. H must be played earlier in the sequence than V. V and S must be separated from each other by exactly one song. S must be played immediately before or immediately after F. F must be played immediately after R, unless G is played earlier than R.",
    "question": "Which one of the following could be the order of the songs in the sequence?",
    "answer": "E",
    "options": [
      "A) G, H, S, X, V, F, R",
      "B) R, H, X, G, S, F, V",
      "C) S, F, X, G, R, H, V",
      "D) V, F, S, H, X, G, R",
      "E) X, G, R, H, S, F, V"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([F, G, H, R, S, V, X])\nplays = Function([songs] -> [int])\nForAll([s:songs], And(1 <= plays(s), plays(s) <= 7))\n\n# Constraints\nForAll([s:songs], Implies(plays(s) == plays(s), s!= s)) ::: no song is played twice\nAnd(plays(F) == plays(F), plays(G) == plays(G), plays(H) == plays(H), plays(R) == plays(R), plays(S) == plays(S), plays(V) == plays(V), plays(X) == plays(X)) ::: no song is played twice\nForAll([s:songs], Implies(plays(s) == plays(s), s!= s)) ::: no song is played twice\nAnd(plays(F) == plays(F), plays(G) == plays(G), plays(H) == plays(H), plays(R) == plays(R), plays(S) == plays(S), plays(V) == plays(V), plays(X) == plays(X)) ::: no song is played twice\nForAll([s:songs], Implies(plays(s) == plays(s), s!= s)) ::: no song is played twice\nAnd(plays(F) == plays(F), plays(G) == plays(G), plays(H) == plays(H), plays(R) == plays(R), plays(S) == plays(S), plays(V) == plays(V), plays(X) == plays(X)) ::: no song is played twice\nForAll([s:songs], Implies(plays(s) == plays(s), s!= s)) ::: no song is played twice\nAnd(plays(F) == plays(F), plays(G) == plays(G), plays(H) == plays(H), plays(R) == plays(R), plays(S) == plays(S), plays(V) == plays(V), plays(X) == plays(X)) ::: no song is played twice\nForAll([s:songs], Implies(plays(s) == plays(s), s!= s)) ::: no song is played twice\nAnd(plays(F) == plays(F), plays(G) == plays(G), plays(H) == plays(H), plays(R) == plays(R), plays(S) == plays(S), plays(V) == plays(V), plays(X) == plays(X)) ::: no song is played twice\nForAll([s:songs], Implies(plays(s) == plays(s), s!= s)) ::: no song is played twice\nAnd(plays(F) == plays(F), plays(G) == plays(G), plays"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_4_20",
    "context": "A disc jockey will play a sequence consisting of exactly seven different songs: three ballads—F, G, and H—and four dance tunes—R, S, V, and X. The following conditions must be met: No dance tune can be played immediately after another dance tune. H must be played earlier in the sequence than V. V and S must be separated from each other by exactly one song. S must be played immediately before or immediately after F. F must be played immediately after R, unless G is played earlier than R.",
    "question": "Which one of the following must be true about the sequence?",
    "answer": "D",
    "options": [
      "A) The first song is X.",
      "B) The fifth song is S.",
      "C) No ballad is played immediately after a dance tune.",
      "D) No ballad is played immediately after another ballad.",
      "E) No dance tune is played immediately after a ballad."
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([F, G, H, R, S, V, X])\nplayed = Function([songs] -> [int])\nForAll([s:songs], And(1 <= played(s), played(s) <= 7))\n\n# Constraints\nDistinct([s:songs], played(s)) ::: no two songs are played at the same time\nForAll([s:songs], Implies(played(s) < played(t), s!= t)) ::: no song is played immediately after another song\nForAll([s:songs], Implies(s == R, played(s) < played(t))) ::: no dance tune can be played immediately after another dance tune\nplayed(H) < played(V) ::: H must be played earlier in the sequence than V\nAnd(played(V) < played(S), played(V) + 1 == played(S)) ::: V and S must be separated from each other by exactly one song\nAnd(played(S) < played(F), played(F) < played(S)) ::: S must be played immediately before or immediately after F\nAnd(played(F) > played(R), played(G) < played(R)) ::: F must be played immediately after R, unless G is played earlier than R\n\n# Options\nQuestion ::: Which one of the following must be true about the sequence?\nis_valid(played(X) == 1) ::: A) The first song is X.\nis_valid(played(S) == 5) ::: B) The fifth song is S.\nis_valid(ForAll([s:songs], Implies(played(s) < played(t), s!= t))) ::: C) No ballad is played immediately after a dance tune.\nis_valid(ForAll([s:songs], Implies(played(s) < played(t), s!= t))) ::: D) No ballad is played immediately after another ballad.\nis_valid(ForAll([s:songs], Implies(played(s) < played(t), s!= t))) ::: E) No dance tune is played immediately after a ballad.\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting, marketing, and sales. The following conditions apply: B and D are assigned to the same department. C is assigned to a different department from A. E is assigned to a different department from F. A and F are assigned to different departments.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) B and E are assigned to the same department.\n(B) C and D are assigned"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_4_21",
    "context": "A disc jockey will play a sequence consisting of exactly seven different songs: three ballads—F, G, and H—and four dance tunes—R, S, V, and X. The following conditions must be met: No dance tune can be played immediately after another dance tune. H must be played earlier in the sequence than V. V and S must be separated from each other by exactly one song. S must be played immediately before or immediately after F. F must be played immediately after R, unless G is played earlier than R.",
    "question": "Which one of the following could be the fourth song in the sequence?",
    "answer": "A",
    "options": [
      "A) G",
      "B) R",
      "C) S",
      "D) V",
      "E) X"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([F, G, H, R, S, V, X])\nplayed = Function([songs] -> [int])\nForAll([s:songs], And(1 <= played(s), played(s) <= 7))\n\n# Constraints\nDistinct([s:songs], played(s)) ::: No dance tune can be played immediately after another dance tune\nAnd(played(H) < played(V), played(V) > played(H)) ::: H must be played earlier in the sequence than V\nAnd(played(V) < played(S), played(S) < played(V)) ::: V and S must be separated from each other by exactly one song\nAnd(played(S) < played(F), played(F) < played(S)) ::: S must be played immediately before or immediately after F\nAnd(played(F) > played(R), played(G) < played(R)) ::: F must be played immediately after R, unless G is played earlier than R\n\n# Options\nQuestion ::: Which one of the following could be the fourth song in the sequence?\nis_exception(is_sat(played(G) == 4)) ::: A) G\nis_exception(is_sat(played(R) == 4)) ::: B) R\nis_exception(is_sat(played(S) == 4)) ::: C) S\nis_exception(is_sat(played(V) == 4)) ::: D) V\nis_exception(is_sat(played(X) == 4)) ::: E) X\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting, marketing, and sales. The following conditions apply: B and C are assigned to the same department. D is assigned to a different department from A. E is assigned to a different department from B. F is assigned to a different department from C.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A and D are assigned to the same department.\n(B) A and E are assigned to the same department.\n(C) B and E are assigned to the same department.\n(D) C and D are assigned to the same department.\n(E) C and F are assigned to the same department.\n###\n# Declarations\nemployees = EnumSort([A, B, C, D, E, F])\ndepartments = EnumSort([accounting, marketing, sales])\nassigned = Function([employees, departments] -> [bool])\n\n# Constraints\nForAll([e:employees], Count"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_4_22",
    "context": "A disc jockey will play a sequence consisting of exactly seven different songs: three ballads—F, G, and H—and four dance tunes—R, S, V, and X. The following conditions must be met: No dance tune can be played immediately after another dance tune. H must be played earlier in the sequence than V. V and S must be separated from each other by exactly one song. S must be played immediately before or immediately after F. F must be played immediately after R, unless G is played earlier than R.",
    "question": "Which one of the following could be the first song in the sequence?",
    "answer": "A",
    "options": [
      "A) R",
      "B) S",
      "C) V",
      "D) F",
      "E) G"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([F, G, H, R, S, V, X])\nplays = Function([songs] -> [int])\nForAll([s:songs], And(1 <= plays(s), plays(s) <= 7))\n\n# Constraints\nForAll([s:songs], Implies(plays(s) == plays(s), s!= s)) ::: no song is played twice\nAnd(plays(F) > plays(R), Implies(plays(G) < plays(R), plays(F) > plays(R))) ::: F must be played immediately after R, unless G is played earlier than R\nAnd(plays(H) < plays(V), plays(V) < plays(S)) ::: H must be played earlier in the sequence than V\nAnd(plays(V) < plays(S), plays(V) + 1 == plays(S)) ::: V and S must be separated from each other by exactly one song\nAnd(plays(S) < plays(F), plays(S) + 1 == plays(F)) ::: S must be played immediately before or immediately after F\n\n# Options\nQuestion ::: Which one of the following could be the first song in the sequence?\nis_exception(is_sat(plays(R) == 1)) ::: A) R\nis_exception(is_sat(plays(S) == 1)) ::: B) S\nis_exception(is_sat(plays(V) == 1)) ::: C) V\nis_exception(is_sat(plays(F) == 1)) ::: D) F\nis_exception(is_sat(plays(G) == 1)) ::: E) G\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting, marketing, and sales. The following conditions apply: B and C are assigned to the same department. D is assigned to a different department from A. E is assigned to a different department from B. F is assigned to a different department from C.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A and D are assigned to the same department.\n(B) A and E are assigned to the same department.\n(C) B and E are assigned to the same department.\n(D) C and D are assigned to the same department.\n(E) C and F are assigned to the same department.\n###\n# Declarations\nemployees = EnumSort([A, B, C, D, E, F])\ndepartments = EnumSort([accounting, marketing, sales])\nworks = Function([employees, departments] -> [bool])\n\n# Constraints"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_4_23",
    "context": "A disc jockey will play a sequence consisting of exactly seven different songs: three ballads—F, G, and H—and four dance tunes—R, S, V, and X. The following conditions must be met: No dance tune can be played immediately after another dance tune. H must be played earlier in the sequence than V. V and S must be separated from each other by exactly one song. S must be played immediately before or immediately after F. F must be played immediately after R, unless G is played earlier than R.",
    "question": "If the third song in the sequence is S, which one of the following must be the sixth song?",
    "answer": "A",
    "options": [
      "A) G",
      "B) H",
      "C) R",
      "D) V",
      "E) X"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([F, G, H, R, S, V, X])\nplays = Function([songs] -> [int])\nForAll([s:songs], And(1 <= plays(s), plays(s) <= 7))\n\n# Constraints\nForAll([s:songs], Implies(plays(s) < plays(s), s!= s)) ::: no song can be played immediately after itself\nAnd(plays(H) < plays(V), plays(V) < plays(S)) ::: H must be played earlier in the sequence than V. V and S must be separated from each other by exactly one song\nAnd(plays(S) < plays(F), plays(F) < plays(S)) ::: S must be played immediately before or immediately after F\nAnd(plays(F) < plays(R), Implies(plays(G) < plays(R), plays(F) > plays(R))) ::: F must be played immediately after R, unless G is played earlier than R\n\n# Options\nQuestion ::: If the third song in the sequence is S, which one of the following must be the sixth song?\nis_exception(is_sat(plays(G) == 6)) ::: A) G\nis_exception(is_sat(plays(H) == 6)) ::: B) H\nis_exception(is_sat(plays(R) == 6)) ::: C) R\nis_exception(is_sat(plays(V) == 6)) ::: D) V\nis_exception(is_sat(plays(X) == 6)) ::: E) X\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting, marketing, and sales. The following conditions apply: B and D are assigned to the same department. C is assigned to a different department from A. E is assigned to a different department from F. A and F are assigned to different departments.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A and B are assigned to the same department.\n(B) A and C are assigned to the same department.\n(C) A and D are assigned to the same department.\n(D) B and C are assigned to the same department.\n(E) B and E are assigned to the same department.\n###\n# Declarations\nemployees = EnumSort([A, B, C, D, E, F])\ndepartments = EnumSort([accounting, marketing, sales])\nworks = Function([employees, departments] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([d:departments],"
    ]
  },
  {
    "id": "ar_lsat_199806_3-G_4_24",
    "context": "A disc jockey will play a sequence consisting of exactly seven different songs: three ballads—F, G, and H—and four dance tunes—R, S, V, and X. The following conditions must be met: No dance tune can be played immediately after another dance tune. H must be played earlier in the sequence than V. V and S must be separated from each other by exactly one song. S must be played immediately before or immediately after F. F must be played immediately after R, unless G is played earlier than R.",
    "question": "If the seventh song in the sequence is R, which one of the following could be the fifth song?",
    "answer": "D",
    "options": [
      "A) F",
      "B) G",
      "C) H",
      "D) V",
      "E) X"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([F, G, H, R, S, V, X])\nplayed = Function([songs] -> [int])\nForAll([s:songs], And(1 <= played(s), played(s) <= 7))\n\n# Constraints\nDistinct([s:songs], played(s)) ::: No dance tune can be played immediately after another dance tune\nAnd(played(H) < played(V), played(V) < played(S)) ::: H must be played earlier in the sequence than V\nAnd(played(V) < played(S), played(S) < played(V) + 2) ::: V and S must be separated from each other by exactly one song\nAnd(played(S) < played(F), played(F) < played(S) + 2) ::: S must be played immediately before or immediately after F\nAnd(played(F) > played(R), played(G) < played(R)) ::: F must be played immediately after R, unless G is played earlier than R\n\n# Options\nQuestion ::: If the seventh song in the sequence is R, which one of the following could be the fifth song?\nis_exception(is_sat(played(F) == 5)) ::: A) F\nis_exception(is_sat(played(G) == 5)) ::: B) G\nis_exception(is_sat(played(H) == 5)) ::: C) H\nis_exception(is_sat(played(V) == 5)) ::: D) V\nis_exception(is_sat(played(X) == 5)) ::: E) X\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting, marketing, and sales. The following conditions apply: B and C are assigned to the same department. D is assigned to a different department from A. E is assigned to a different department from B. F is assigned to a different department from C.\nQuestion:\nIf A is assigned to the accounting department, which one of the following must be true?\nChoices:\n(A) B is assigned to the marketing department.\n(B) C is assigned to the sales department.\n(C) D is assigned to the marketing department.\n(D) E is assigned to the sales department.\n(E) F is assigned to the accounting department.\n###\n# Declarations\nemployees = EnumSort([A, B, C, D, E, F])\ndepartments = EnumSort([accounting, marketing, sales])\nassigned = Function([employees, departments] -> [bool"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_1_1",
    "context": "Eight physics students—four majors: Frank, Gwen, Henry, and Joan; and four nonmajors: Victor, Wanda, Xavier, and Yvette—are being assigned to four laboratory benches, numbered 1 through 4. Each student is assigned to exactly one bench, and exactly two students are assigned to each bench. Assignments of students to benches must conform to the following conditions: Exactly one major is assigned to each bench. Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench. Frank is assigned to the same bench as Victor. Gwen is not assigned to the same bench as Wanda.",
    "question": "Which one of the following could be the assignment of students to benches?",
    "answer": "C",
    "options": [
      "A) 1: Frank, Victor; 2: Joan, Gwen; 3: Henry, Wanda; 4: Xavier, Yvette",
      "B) 1: Gwen, Yvette; 2: Frank, Xavier; 3: Joan, Wanda; 4: Henry, Victor",
      "C) 1: Henry, Wanda; 2: Gwen, Xavier; 3: Frank, Victor; 4: Joan, Yvette",
      "D) 1: Henry, Xavier; 2: Joan, Wanda; 3: Frank, Victor; 4: Gwen, Yvette",
      "E) 1: Henry, Yvette; 2: Gwen, Wanda; 3: Frank, Victor, 4: Joan, Xavier"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Frank, Gwen, Henry, Joan, Victor, Wanda, Xavier, Yvette])\nbenches = EnumSort([1, 2, 3, 4])\nassigned = Function([students, benches] -> [bool])\n\n# Constraints\nForAll([s:students], Count([b:benches], assigned(s, b)) == 1) ::: Each student is assigned to exactly one bench\nForAll([b:benches], Count([s:students], assigned(s, b)) == 2) ::: exactly two students are assigned to each bench\nForAll([b:benches], Or(assigned(Frank, b), assigned(Gwen, b), assigned(Henry, b), assigned(Joan, b))) ::: Exactly one major is assigned to each bench\nAnd(assigned(Frank, 1), assigned(Joan, 2)) ::: Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench\nassigned(Frank, 1) == assigned(Victor, 1) ::: Frank is assigned to the same bench as Victor\nassigned(Gwen, 1)!= assigned(Wanda, 1) ::: Gwen is not assigned to the same bench as Wanda\n\n# Options\nQuestion ::: Which one of the following could be the assignment of students to benches?\nis_sat(assigned(Frank, 1) & assigned(Victor, 1) & assigned(Joan, 2) & assigned(Gwen, 2) & assigned(Henry, 3) & assigned(Wanda, 3) & assigned(Xavier, 4) & assigned(Yvette, 4)) ::: A) 1: Frank, Victor; 2: Joan, Gwen; 3: Henry, Wanda; 4: Xavier, Yvette\nis_sat(assigned(Gwen, 1) & assigned(Yvette, 1) & assigned(Frank, 2) & assigned(Xavier, 2) & assigned(Joan, 3) & assigned(Wanda, 3) & assigned(Henry, 4) & assigned(Victor, 4)) ::: B) 1: Gwen, Yvette; 2: Frank, Xavier; 3: Joan, Wanda; 4: Henry, Victor\nis_sat(assigned(Henry, 1) & assigned(Wanda, 1) & assigned(Gwen, 2) & assigned(Xavier, 2) & assigned(Frank, 3) & assigned(Victor, 3) & assigned(Joan, 4) & assigned(Yvette, 4"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_1_2",
    "context": "Eight physics students—four majors: Frank, Gwen, Henry, and Joan; and four nonmajors: Victor, Wanda, Xavier, and Yvette—are being assigned to four laboratory benches, numbered 1 through 4. Each student is assigned to exactly one bench, and exactly two students are assigned to each bench. Assignments of students to benches must conform to the following conditions: Exactly one major is assigned to each bench. Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench. Frank is assigned to the same bench as Victor. Gwen is not assigned to the same bench as Wanda.",
    "question": "If Victor is assigned to bench 2 and Wanda is assigned to bench 4, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Frank is assigned to bench 1.",
      "B) Gwen is assigned to bench 1.",
      "C) Henry is assigned to bench 3.",
      "D) Xavier is assigned to bench 1.",
      "E) Yvette is assigned to bench 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Frank, Gwen, Henry, Joan, Victor, Wanda, Xavier, Yvette])\nbenches = EnumSort([1, 2, 3, 4])\nassigned = Function([students, benches] -> [bool])\n\n# Constraints\nForAll([s:students], Count([b:benches], assigned(s, b)) == 1) ::: Each student is assigned to exactly one bench\nForAll([b:benches], Count([s:students], assigned(s, b)) == 2) ::: exactly two students are assigned to each bench\nForAll([b:benches], Or(assigned(Frank, b), assigned(Gwen, b), assigned(Henry, b), assigned(Joan, b))) ::: Exactly one major is assigned to each bench\nAnd(assigned(Frank, b1), assigned(Joan, b2), b1 < b2) ::: Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench\nassigned(Frank, b1), assigned(Victor, b1) ::: Frank is assigned to the same bench as Victor\nNot(assigned(Gwen, b1), assigned(Wanda, b1)) ::: Gwen is not assigned to the same bench as Wanda\n\n# Options\nQuestion ::: If Victor is assigned to bench 2 and Wanda is assigned to bench 4, which one of the following must be true?\nis_valid(assigned(Frank, 1)) ::: (A)\nis_valid(assigned(Gwen, 1)) ::: (B)\nis_valid(assigned(Henry, 3)) ::: (C)\nis_valid(assigned(Xavier, 1)) ::: (D)\nis_valid(assigned(Yvette, 3)) ::: (E)\n------\nProblem:\nA group of eight people—A, B, C, D, E, F, G, and H—is to be divided into two groups of four. Each of the eight people will be assigned to exactly one of the two groups. The following conditions apply: A and B are to be assigned to the same group. C and D are to be assigned to the same group. E and F are to be assigned to the same group. G and H are to be assigned to the same group.\nQuestion:\nIf A is assigned to the same group as E, which one of the following must be true?\nChoices:\n(A) B is assigned to the same group as F.\n(B) C is assigned to the same group as G.\n(C) D is assigned to the same group as H.\n(D) E is assigned to the same group as G.\n(E"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_1_3",
    "context": "Eight physics students—four majors: Frank, Gwen, Henry, and Joan; and four nonmajors: Victor, Wanda, Xavier, and Yvette—are being assigned to four laboratory benches, numbered 1 through 4. Each student is assigned to exactly one bench, and exactly two students are assigned to each bench. Assignments of students to benches must conform to the following conditions: Exactly one major is assigned to each bench. Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench. Frank is assigned to the same bench as Victor. Gwen is not assigned to the same bench as Wanda.",
    "question": "If Gwen and Henry are not assigned to consecutively numbered benches, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Victor is assigned to bench 2.",
      "B) Victor is assigned to bench 3.",
      "C) Wanda is assigned to bench 1.",
      "D) Wanda is assigned to bench 3.",
      "E) Wanda is assigned to bench 4."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Frank, Gwen, Henry, Joan, Victor, Wanda, Xavier, Yvette])\nbenches = EnumSort([1, 2, 3, 4])\nassigned = Function([students, benches] -> [bool])\n\n# Constraints\nForAll([s:students], Count([b:benches], assigned(s, b)) == 1) ::: Each student is assigned to exactly one bench\nForAll([b:benches], Count([s:students], assigned(s, b)) == 2) ::: exactly two students are assigned to each bench\nForAll([b:benches], Or(assigned(Frank, b), assigned(Gwen, b), assigned(Henry, b), assigned(Joan, b))) ::: Exactly one major is assigned to each bench\nAnd(assigned(Frank, b1), assigned(Joan, b2), b1 < b2) ::: Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench\nassigned(Frank, b1), assigned(Victor, b2), b1 == b2 ::: Frank is assigned to the same bench as Victor\nassigned(Gwen, b1), assigned(Wanda, b2), b1!= b2 ::: Gwen is not assigned to the same bench as Wanda\n\n# Options\nQuestion ::: If Gwen and Henry are not assigned to consecutively numbered benches, which one of the following must be true?\nis_valid(assigned(Victor, 2)) ::: (A)\nis_valid(assigned(Victor, 3)) ::: (B)\nis_valid(assigned(Wanda, 1)) ::: (C)\nis_valid(assigned(Wanda, 3)) ::: (D)\nis_valid(assigned(Wanda, 4)) ::: (E)\n------\nProblem:\nA group of eight people—A, B, C, D, E, F, G, and H—is to be divided into two groups of four. Each of the eight people will be assigned to exactly one of the two groups. The following conditions apply: A and B are to be assigned to the same group. C and D are to be assigned to the same group. E and F are to be assigned to the same group. G and H are to be assigned to the same group.\nQuestion:\nIf A, B, C, and D are assigned to the same group, which one of the following must be true?\nChoices:\n(A) E and F are assigned to the same group.\n(B) E and G are assigned to the same group.\n(C) F and G are assigned to the same group.\n(D) F and"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_1_4",
    "context": "Eight physics students—four majors: Frank, Gwen, Henry, and Joan; and four nonmajors: Victor, Wanda, Xavier, and Yvette—are being assigned to four laboratory benches, numbered 1 through 4. Each student is assigned to exactly one bench, and exactly two students are assigned to each bench. Assignments of students to benches must conform to the following conditions: Exactly one major is assigned to each bench. Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench. Frank is assigned to the same bench as Victor. Gwen is not assigned to the same bench as Wanda.",
    "question": "If Henry and Yvette are both assigned to bench 1, which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Gwen is assigned to bench 3.",
      "B) Joan is assigned to bench 2.",
      "C) Wanda is assigned to bench 2.",
      "D) Wanda is assigned to bench 3.",
      "E) Xavier is assigned to bench 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Frank, Gwen, Henry, Joan, Victor, Wanda, Xavier, Yvette])\nbenches = EnumSort([1, 2, 3, 4])\nassigned = Function([students, benches] -> [bool])\n\n# Constraints\nForAll([s:students], Count([b:benches], assigned(s, b)) == 1) ::: Each student is assigned to exactly one bench\nForAll([b:benches], Count([s:students], assigned(s, b)) == 2) ::: exactly two students are assigned to each bench\nForAll([b:benches], Or(assigned(Frank, b), assigned(Gwen, b), assigned(Henry, b), assigned(Joan, b))) ::: Exactly one major is assigned to each bench\nAnd(assigned(Frank, b1), assigned(Joan, b2), b1 < b2) ::: Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench\nassigned(Frank, b1), assigned(Victor, b1) ::: Frank is assigned to the same bench as Victor\nNot(assigned(Gwen, b1), assigned(Wanda, b1)) ::: Gwen is not assigned to the same bench as Wanda\nassigned(Henry, 1), assigned(Yvette, 1) ::: Henry and Yvette are both assigned to bench 1\n\n# Options\nQuestion ::: If Henry and Yvette are both assigned to bench 1, which one of the following could be true?\nis_valid(Exists([b:benches], assigned(Gwen, b) && b == 3)) ::: (A)\nis_valid(Exists([b:benches], assigned(Joan, b) && b == 2)) ::: (B)\nis_valid(Exists([b:benches], assigned(Wanda, b) && b == 2)) ::: (C)\nis_valid(Exists([b:benches], assigned(Wanda, b) && b == 3)) ::: (D)\nis_valid(Exists([b:benches], assigned(Xavier, b) && b == 3)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_1_5",
    "context": "Eight physics students—four majors: Frank, Gwen, Henry, and Joan; and four nonmajors: Victor, Wanda, Xavier, and Yvette—are being assigned to four laboratory benches, numbered 1 through 4. Each student is assigned to exactly one bench, and exactly two students are assigned to each bench. Assignments of students to benches must conform to the following conditions: Exactly one major is assigned to each bench. Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench. Frank is assigned to the same bench as Victor. Gwen is not assigned to the same bench as Wanda.",
    "question": "If Gwen is assigned to bench 4 and Xavier is assigned to bench 3, then any one of the following could be true EXCEPT:",
    "answer": "E",
    "options": [
      "A) Gwen is assigned to the same bench as Yvette.",
      "B) Henry is assigned to the same bench as Wanda.",
      "C) Henry is assigned to the same bench as Xavier.",
      "D) Joan is assigned to the same bench as Xavier.",
      "E) Joan is assigned to the same bench as Yvette."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Frank, Gwen, Henry, Joan, Victor, Wanda, Xavier, Yvette])\nbenches = EnumSort([1, 2, 3, 4])\nassigned = Function([students, benches] -> [bool])\n\n# Constraints\nForAll([s:students], Count([b:benches], assigned(s, b)) == 1) ::: Each student is assigned to exactly one bench\nForAll([b:benches], Count([s:students], assigned(s, b)) == 2) ::: exactly two students are assigned to each bench\nForAll([b:benches], Or(assigned(Frank, b), assigned(Gwen, b), assigned(Henry, b), assigned(Joan, b))) ::: Exactly one major is assigned to each bench\nAnd(assigned(Frank, b1), assigned(Joan, b2), b1 < b2) ::: Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench\nassigned(Frank, b1), assigned(Victor, b2), b1 == b2 ::: Frank is assigned to the same bench as Victor\nassigned(Gwen, b1), assigned(Wanda, b2), b1!= b2 ::: Gwen is not assigned to the same bench as Wanda\n\n# Options\nQuestion ::: If Gwen is assigned to bench 4 and Xavier is assigned to bench 3, then any one of the following could be true EXCEPT:\nis_exception(is_sat(assigned(Gwen, 4) && assigned(Xavier, 3) && assigned(Gwen, 4) && assigned(Yvette, 4))) ::: A) Gwen is assigned to the same bench as Yvette.\nis_exception(is_sat(assigned(Gwen, 4) && assigned(Xavier, 3) && assigned(Henry, 1) && assigned(Wanda, 1))) ::: B) Henry is assigned to the same bench as Wanda.\nis_exception(is_sat(assigned(Gwen, 4) && assigned(Xavier, 3) && assigned(Henry, 2) && assigned(X"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_1_6",
    "context": "Eight physics students—four majors: Frank, Gwen, Henry, and Joan; and four nonmajors: Victor, Wanda, Xavier, and Yvette—are being assigned to four laboratory benches, numbered 1 through 4. Each student is assigned to exactly one bench, and exactly two students are assigned to each bench. Assignments of students to benches must conform to the following conditions: Exactly one major is assigned to each bench. Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench. Frank is assigned to the same bench as Victor. Gwen is not assigned to the same bench as Wanda.",
    "question": "If Wanda is assigned to a lower-numbered bench than is Joan, then Henry must be assigned to a",
    "answer": "A",
    "options": [
      "A) lower-numbered bench than is Frank",
      "B) lower-numbered bench than is Gwen",
      "C) lower-numbered bench than is Xavier",
      "D) higher-numbered bench than is Victor",
      "E) higher-numbered bench than is Yvette"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Frank, Gwen, Henry, Joan, Victor, Wanda, Xavier, Yvette])\nbenches = EnumSort([1, 2, 3, 4])\nassigned = Function([students, benches] -> [bool])\n\n# Constraints\nForAll([s:students], Count([b:benches], assigned(s, b)) == 1) ::: Each student is assigned to exactly one bench\nForAll([b:benches], Count([s:students], assigned(s, b)) == 2) ::: exactly two students are assigned to each bench\nForAll([b:benches], Or(assigned(Frank, b), assigned(Gwen, b), assigned(Henry, b), assigned(Joan, b))) ::: Exactly one major is assigned to each bench\nAnd(assigned(Frank, b1), assigned(Joan, b2), b1 < b2) ::: Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench\nAnd(assigned(Frank, b1), assigned(Victor, b2), b1 == b2) ::: Frank is assigned to the same bench as Victor\nAnd(assigned(Gwen, b1), assigned(Wanda, b2), b1!= b2) ::: Gwen is not assigned to the same bench as Wanda\n\n# Options\nQuestion ::: If Wanda is assigned to a lower-numbered bench than is Joan, then Henry must be assigned to a\nis_sat(ForAll([b:benches], Implies(assigned(Wanda, b), assigned(Henry, b1), b1 < b))) ::: A) lower-numbered bench than is Frank\nis_sat(ForAll([b:benches], Implies(assigned(Wanda, b), assigned(Henry, b1), b1 < b))) ::: B) lower-numbered bench than is Gwen\nis_sat(ForAll([b:benches], Implies(assigned(Wanda, b), assigned(Henry, b1), b1 < b))) ::: C) lower-numbered bench than is Xavier\nis_sat(ForAll([b:benches], Implies("
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_1_7",
    "context": "Eight physics students—four majors: Frank, Gwen, Henry, and Joan; and four nonmajors: Victor, Wanda, Xavier, and Yvette—are being assigned to four laboratory benches, numbered 1 through 4. Each student is assigned to exactly one bench, and exactly two students are assigned to each bench. Assignments of students to benches must conform to the following conditions: Exactly one major is assigned to each bench. Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench. Frank is assigned to the same bench as Victor. Gwen is not assigned to the same bench as Wanda.",
    "question": "Which one of the following could be the assignments for bench 2 and bench 4?",
    "answer": "D",
    "options": [
      "A) 2: Gwen, Xavier 4: Henry, Yvette",
      "B) 2: Henry, Yvette 4: Joan, Xavier",
      "C) 2: Joan, Victor 4: Gwen, Xavier",
      "D) 2: Joan, Wanda 4: Gwen, Xavier",
      "E) 2: Joan, Xavier 4: Henry, Yvette"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Frank, Gwen, Henry, Joan, Victor, Wanda, Xavier, Yvette])\nbenches = EnumSort([1, 2, 3, 4])\nassigned = Function([students, benches] -> [bool])\n\n# Constraints\nForAll([s:students], Count([b:benches], assigned(s, b)) == 1) ::: Each student is assigned to exactly one bench\nForAll([b:benches], Count([s:students], assigned(s, b)) == 2) ::: exactly two students are assigned to each bench\nForAll([b:benches], Or(assigned(Frank, b), assigned(Gwen, b), assigned(Henry, b), assigned(Joan, b))) ::: Exactly one major is assigned to each bench\nAnd(assigned(Frank, b1), assigned(Joan, b2), b1 < b2) ::: Frank and Joan are assigned to consecutively numbered benches, with Frank assigned to the lower-numbered bench\nassigned(Frank, b1), assigned(Victor, b1) ::: Frank is assigned to the same bench as Victor\nNot(assigned(Gwen, b1), assigned(Wanda, b1)) ::: Gwen is not assigned to the same bench as Wanda\n\n# Options\nQuestion ::: Which one of the following could be the assignments for bench 2 and bench 4?\nis_sat(And(assigned(Gwen, 2), assigned(Xavier, 2), assigned(Henry, 4), assigned(Yvette, 4))) ::: A) 2: Gwen, Xavier 4: Henry, Yvette\nis_sat(And(assigned(Henry, 2), assigned(Yvette, 2), assigned(Joan, 4), assigned(Xavier, 4))) ::: B) 2: Henry, Yvette 4: Joan, Xavier\nis_sat(And(assigned(Joan, 2), assigned(Victor, 2), assigned(Gwen, 4), assigned(Xavier, 4))) ::: C) 2: Joan, Victor 4: Gwen, Xavier\nis_sat("
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_2_8",
    "context": "A messenger will deliver exactly seven packages—L, M, N, O, P, S, and T—one at a time, not necessarily in that order. The seven deliveries must be made according to the following conditions: P is delivered either first or seventh. The messenger delivers N at some time after delivering L. The messenger delivers T at some time after delivering M. The messenger delivers exactly one package between delivering L and delivering O, whether or not L is delivered before O. The messenger delivers exactly one package between delivering M and delivering P, whether or not M is delivered before P.",
    "question": "Which one of the following is an order in which the messenger could make the deliveries, from first to seventh?",
    "answer": "C",
    "options": [
      "A) L, N, S, O, M, T, P",
      "B) M, T, P, S, L, N, O",
      "C) O, S, L, N, M, T, P",
      "D) P, N, M, S, O, T, L",
      "E) P, T, M, S, L, N, O"
    ],
    "raw_logic_programs": [
      "# Declarations\npackages = EnumSort([L, M, N, O, P, S, T])\ndelivered = Function([packages] -> [int])\nForAll([p:packages], And(1 <= delivered(p), delivered(p) <= 7))\n\n# Constraints\nAnd(delivered(P) == 1, delivered(P) == 7) ::: P is delivered either first or seventh\nAnd(delivered(N) > delivered(L), delivered(N) < delivered(O)) ::: The messenger delivers N at some time after delivering L\nAnd(delivered(T) > delivered(M), delivered(T) < delivered(P)) ::: The messenger delivers T at some time after delivering M\nAnd(delivered(L) < delivered(O), delivered(O) < delivered(L)) ::: The messenger delivers exactly one package between delivering L and delivering O, whether or not L is delivered before O\nAnd(delivered(M) < delivered(P), delivered(P) < delivered(M)) ::: The messenger delivers exactly one package between delivering M and delivering P, whether or not M is delivered before P\n\n# Options\nQuestion ::: Which one of the following is an order in which the messenger could make the deliveries, from first to seventh?\nis_sat(And(delivered(L) == 1, delivered(N) == 2, delivered(S) == 3, delivered(O) == 4, delivered(M) == 5, delivered(T) == 6, delivered(P) == 7)) ::: A) L, N, S, O, M, T, P\nis_sat(And(delivered(M) == 1, delivered(T) == 2, delivered(P) == 3, delivered(S) == 4, delivered(L) == 5, delivered(N) == 6, delivered(O) == 7)) ::: B) M, T, P, S, L, N, O\nis_sat(And(delivered(O) == 1, delivered(S) == 2, delivered(L) == 3, delivered(N) == 4, delivered(M) == 5, delivered(T) == 6, delivered(P) =="
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_2_9",
    "context": "A messenger will deliver exactly seven packages—L, M, N, O, P, S, and T—one at a time, not necessarily in that order. The seven deliveries must be made according to the following conditions: P is delivered either first or seventh. The messenger delivers N at some time after delivering L. The messenger delivers T at some time after delivering M. The messenger delivers exactly one package between delivering L and delivering O, whether or not L is delivered before O. The messenger delivers exactly one package between delivering M and delivering P, whether or not M is delivered before P.",
    "question": "Which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) N is delivered first.",
      "B) T is delivered first.",
      "C) T is delivered second.",
      "D) M is delivered fourth.",
      "E) S is delivered seventh."
    ],
    "raw_logic_programs": [
      "# Declarations\npackages = EnumSort([L, M, N, O, P, S, T])\ndelivered = Function([packages] -> [int])\nForAll([p:packages], And(1 <= delivered(p), delivered(p) <= 7))\n\n# Constraints\nDistinct([p:packages], delivered(p)) ::: The messenger will deliver exactly seven packages\nAnd(delivered(P) == 1, delivered(P) == 7) ::: P is delivered either first or seventh\nAnd(delivered(N) > delivered(L), delivered(N) < delivered(O)) ::: The messenger delivers N at some time after delivering L\nAnd(delivered(T) > delivered(M), delivered(T) < delivered(P)) ::: The messenger delivers T at some time after delivering M\nAnd(delivered(L) < delivered(O), delivered(O) < delivered(L)) ::: The messenger delivers exactly one package between delivering L and delivering O\nAnd(delivered(M) < delivered(P), delivered(P) < delivered(M)) ::: The messenger delivers exactly one package between delivering M and delivering P\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(delivered(N) == 1) ::: A) N is delivered first.\nis_sat(delivered(T) == 1) ::: B) T is delivered first.\nis_sat(delivered(T) == 2) ::: C) T is delivered second.\nis_sat(delivered(M) == 4) ::: D) M is delivered fourth.\nis_sat(delivered(S) == 7) ::: E) S is delivered seventh.\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete six different projects. The following conditions apply: F and G work together on exactly one project. H and J work together on exactly one project. K and L work together on exactly one project. F and H work together on exactly one project. G and J work together on exactly one project. K and J work together on exactly one project.\nQuestion:\nWhich one of the following pairs of employees could work"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_2_10",
    "context": "A messenger will deliver exactly seven packages—L, M, N, O, P, S, and T—one at a time, not necessarily in that order. The seven deliveries must be made according to the following conditions: P is delivered either first or seventh. The messenger delivers N at some time after delivering L. The messenger delivers T at some time after delivering M. The messenger delivers exactly one package between delivering L and delivering O, whether or not L is delivered before O. The messenger delivers exactly one package between delivering M and delivering P, whether or not M is delivered before P.",
    "question": "If N is delivered fourth, which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) L is delivered first.",
      "B) L is delivered second.",
      "C) M is delivered third.",
      "D) O is delivered fifth.",
      "E) S is delivered first."
    ],
    "raw_logic_programs": [
      "# Declarations\npackages = EnumSort([L, M, N, O, P, S, T])\ndelivered = Function([packages] -> [int])\nForAll([p:packages], And(1 <= delivered(p), delivered(p) <= 7))\n\n# Constraints\nAnd(delivered(P) == 1, delivered(P) == 7) ::: P is delivered either first or seventh\nAnd(delivered(N) > delivered(L), delivered(N) < delivered(O)) ::: The messenger delivers N at some time after delivering L\nAnd(delivered(T) > delivered(M), delivered(T) < delivered(P)) ::: The messenger delivers T at some time after delivering M\nAnd(delivered(L) < delivered(O), delivered(O) < delivered(L)) ::: The messenger delivers exactly one package between delivering L and delivering O\nAnd(delivered(M) < delivered(P), delivered(P) < delivered(M)) ::: The messenger delivers exactly one package between delivering M and delivering P\n\n# Options\nQuestion ::: If N is delivered fourth, which one of the following could be true?\nis_exception(is_sat(delivered(L) == 1)) ::: A) L is delivered first.\nis_exception(is_sat(delivered(L) == 2)) ::: B) L is delivered second.\nis_exception(is_sat(delivered(M) == 3)) ::: C) M is delivered third.\nis_exception(is_sat(delivered(O) == 5)) ::: D) O is delivered fifth.\nis_exception(is_sat(delivered(S) == 1)) ::: E) S is delivered first.\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete six projects. Each employee works on exactly one project. The following conditions apply: F and G work together on the first project. H and J work together on the second project. K and L work together on the third project. F and H work together on the fourth project. G and K work together on the fifth project. J and L work together on the sixth project.\nQuestion:\nWh"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_2_11",
    "context": "A messenger will deliver exactly seven packages—L, M, N, O, P, S, and T—one at a time, not necessarily in that order. The seven deliveries must be made according to the following conditions: P is delivered either first or seventh. The messenger delivers N at some time after delivering L. The messenger delivers T at some time after delivering M. The messenger delivers exactly one package between delivering L and delivering O, whether or not L is delivered before O. The messenger delivers exactly one package between delivering M and delivering P, whether or not M is delivered before P.",
    "question": "If T is delivered fourth, the seventh package delivered must be",
    "answer": "C",
    "options": [
      "A) L",
      "B) N",
      "C) O",
      "D) P",
      "E) S"
    ],
    "raw_logic_programs": [
      "# Declarations\npackages = EnumSort([L, M, N, O, P, S, T])\ndelivered = Function([packages] -> [int])\nForAll([p:packages], And(1 <= delivered(p), delivered(p) <= 7))\n\n# Constraints\nAnd(delivered(P) == 1, delivered(P) == 7) ::: P is delivered either first or seventh\nAnd(delivered(N) > delivered(L), delivered(N) < delivered(O)) ::: The messenger delivers N at some time after delivering L\nAnd(delivered(T) > delivered(M), delivered(T) < delivered(P)) ::: The messenger delivers T at some time after delivering M\nAnd(delivered(L) < delivered(O), delivered(L) > delivered(O)) ::: The messenger delivers exactly one package between delivering L and delivering O\nAnd(delivered(M) < delivered(P), delivered(M) > delivered(P)) ::: The messenger delivers exactly one package between delivering M and delivering P\n\n# Options\nQuestion ::: If T is delivered fourth, the seventh package delivered must be\nis_exception(is_sat(delivered(L) == 7)) ::: (A)\nis_exception(is_sat(delivered(N) == 7)) ::: (B)\nis_exception(is_sat(delivered(O) == 7)) ::: (C)\nis_exception(is_sat(delivered(P) == 7)) ::: (D)\nis_exception(is_sat(delivered(S) == 7)) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete six different projects. The following conditions apply: F and G work together on exactly one project. H and J work together on exactly one project. K and L work together on exactly one project. F and H work together on exactly one project. G and J work together on exactly one project. K and J work together on exactly one project.\nQuestion:\nWhich one of the following pairs of employees could work together on exactly one project?\nChoices:\n(A) F and J\n("
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_2_12",
    "context": "A messenger will deliver exactly seven packages—L, M, N, O, P, S, and T—one at a time, not necessarily in that order. The seven deliveries must be made according to the following conditions: P is delivered either first or seventh. The messenger delivers N at some time after delivering L. The messenger delivers T at some time after delivering M. The messenger delivers exactly one package between delivering L and delivering O, whether or not L is delivered before O. The messenger delivers exactly one package between delivering M and delivering P, whether or not M is delivered before P.",
    "question": "If the messenger delivers M at some time after delivering O, the fifth package delivered could be any one of the following EXCEPT:",
    "answer": "A",
    "options": [
      "A) L",
      "B) M",
      "C) N",
      "D) S",
      "E) T"
    ],
    "raw_logic_programs": [
      "# Declarations\npackages = EnumSort([L, M, N, O, P, S, T])\ndelivered = Function([packages] -> [int])\nForAll([p:packages], And(1 <= delivered(p), delivered(p) <= 7))\n\n# Constraints\nDistinct([p:packages], delivered(p)) ::: The seven deliveries must be made according to the following conditions\nAnd(delivered(P) == 1, delivered(P) == 7) ::: P is delivered either first or seventh\nAnd(delivered(N) > delivered(L), delivered(N) < delivered(O)) ::: The messenger delivers N at some time after delivering L\nAnd(delivered(T) > delivered(M), delivered(T) < delivered(P)) ::: The messenger delivers T at some time after delivering M\nAnd(delivered(L) < delivered(O), delivered(L) > delivered(O)) ::: The messenger delivers exactly one package between delivering L and delivering O\nAnd(delivered(M) < delivered(P), delivered(M) > delivered(P)) ::: The messenger delivers exactly one package between delivering M and delivering P\n\n# Options\nQuestion ::: If the messenger delivers M at some time after delivering O, the fifth package delivered could be any one of the following EXCEPT:\nis_exception(is_sat(delivered(L) == 5)) ::: A) L\nis_exception(is_sat(delivered(M) == 5)) ::: B) M\nis_exception(is_sat(delivered(N) == 5)) ::: C) N\nis_exception(is_sat(delivered(S) == 5)) ::: D) S\nis_exception(is_sat(delivered(T) == 5)) ::: E) T\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete six different projects. The following conditions apply: F and G work together on exactly one project. H and J work together on exactly one project. K and L work together on exactly one project. F and H work together on exactly one project. G and J work together on exactly one project. K"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_3_13",
    "context": "Each of exactly five persons—Nguyen, Olson, Pike, Tyner, and Valdez—participates in exactly one of three activities: going to a movie, going to a soccer game, or going to a restaurant. The following conditions must apply. Nguyen and Olson do not participate in the same activity as each other, nor does either one of them participate in the same activity as Pike. Exactly two persons go to a soccer game. Tyner and Pike do not participate in the same activity as each other. If Nguyen or Valdez goes to a movie, they both go to a movie.",
    "question": "Which one of the following could be an accurate list of the activities participated in by Nguyen, Olson, Pike, Tyner, and Valdez, respectively?",
    "answer": "D",
    "options": [
      "A) movie, soccer game, soccer game, restaurant, movie",
      "B) movie, restaurant, soccer game, soccer game, movie",
      "C) soccer game, restaurant, movie, soccer game, movie",
      "D) soccer game, restaurant, movie, soccer game, restaurant",
      "E) soccer game, restaurant, movie, soccer game, soccer game"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Nguyen, Olson, Pike, Tyner, Valdez])\nactivities = EnumSort([movie, soccer_game, restaurant])\nparticipates = Function([people, activities] -> [bool])\n\n# Constraints\nForAll([p:people], Count([a:activities], participates(p, a)) == 1) ::: Each of exactly five persons participates in exactly one of three activities\nAnd(participates(Nguyen, a), participates(Olson, a)) ::: Nguyen and Olson do not participate in the same activity as each other\nAnd(participates(Nguyen, a), participates(Pike, a)) ::: nor does either one of them participate in the same activity as Pike\nCount([a:activities], participates(a, soccer_game)) == 2 ::: Exactly two persons go to a soccer game\nAnd(participates(Tyner, a), participates(Pike, a)) ::: Tyner and Pike do not participate in the same activity as each other\nAnd(participates(Nguyen, movie), participates(Valdez, movie)) ::: If Nguyen or Valdez goes to a movie, they both go to a movie\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the activities participated in by Nguyen, Olson, Pike, Tyner, and Valdez, respectively?\nis_sat(And(participates(Nguyen, movie), participates(Olson, soccer_game), participates(Pike, soccer_game), participates(Tyner, restaurant), participates(Valdez, movie))) ::: A) movie, soccer game, soccer game, restaurant, movie\nis_sat(And(participates(Nguyen, movie), participates(Olson, restaurant), participates(Pike, soccer_game), participates(Tyner, soccer_game), participates(Valdez, movie))) ::: B) movie, restaurant, soccer game, soccer game, movie\nis_sat(And(participates(Nguyen, soccer_game), participates(Olson, restaurant), participates(Pike, movie),"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_3_14",
    "context": "Each of exactly five persons—Nguyen, Olson, Pike, Tyner, and Valdez—participates in exactly one of three activities: going to a movie, going to a soccer game, or going to a restaurant. The following conditions must apply. Nguyen and Olson do not participate in the same activity as each other, nor does either one of them participate in the same activity as Pike. Exactly two persons go to a soccer game. Tyner and Pike do not participate in the same activity as each other. If Nguyen or Valdez goes to a movie, they both go to a movie.",
    "question": "If Valdez goes to a soccer game, then each of the following could be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) Olson goes to a movie.",
      "B) Nguyen goes to a restaurant.",
      "C) Nguyen goes to a soccer game.",
      "D) Tyner goes to a soccer game.",
      "E) Tyner goes to a movie."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Nguyen, Olson, Pike, Tyner, Valdez])\nactivities = EnumSort([movie, soccer_game, restaurant])\nparticipates = Function([people, activities] -> [bool])\n\n# Constraints\nForAll([p:people], Count([a:activities], participates(p, a)) == 1) ::: Each of exactly five persons participates in exactly one of three activities\nImplies(participates(Nguyen, a), Not(participates(Olson, a))) ::: Nguyen and Olson do not participate in the same activity as each other\nImplies(participates(Nguyen, a), Not(participates(Pike, a))) ::: nor does either one of them participate in the same activity as Pike\nCount([a:activities], participates(a, soccer_game)) == 2 ::: Exactly two persons go to a soccer game\nImplies(participates(Tyner, a), Not(participates(Pike, a))) ::: Tyner and Pike do not participate in the same activity as each other\nImplies(participates(Nguyen, movie), participates(Valdez, movie)) ::: If Nguyen or Valdez goes to a movie, they both go to a movie\n\n# Options\nQuestion ::: If Valdez goes to a soccer game, then each of the following could be true EXCEPT:\nis_exception(is_sat(participates(Olson, movie))) ::: (A)\nis_exception(is_sat(participates(Nguyen, restaurant))) ::: (B)\nis_exception(is_sat(participates(Nguyen, soccer_game))) ::: (C)\nis_exception(is_sat(participates(Tyner, soccer_game))) ::: (D)\nis_exception(is_sat(participates(Tyner, movie))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_3_15",
    "context": "Each of exactly five persons—Nguyen, Olson, Pike, Tyner, and Valdez—participates in exactly one of three activities: going to a movie, going to a soccer game, or going to a restaurant. The following conditions must apply. Nguyen and Olson do not participate in the same activity as each other, nor does either one of them participate in the same activity as Pike. Exactly two persons go to a soccer game. Tyner and Pike do not participate in the same activity as each other. If Nguyen or Valdez goes to a movie, they both go to a movie.",
    "question": "Which one of the following is a pair of persons who could go to a movie together?",
    "answer": "B",
    "options": [
      "A) Nguyen and Tyner",
      "B) Olson and Tyner",
      "C) Olson and Valdez",
      "D) Pike and Olson",
      "E) Pike and Tyner"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Nguyen, Olson, Pike, Tyner, Valdez])\nactivities = EnumSort([movie, soccer_game, restaurant])\nparticipates = Function([people, activities] -> [bool])\n\n# Constraints\nForAll([p:people], Count([a:activities], participates(p, a)) == 1) ::: Each of exactly five persons participates in exactly one of three activities\nImplies(participates(Nguyen, a), Not(participates(Olson, a))) ::: Nguyen and Olson do not participate in the same activity as each other\nImplies(participates(Nguyen, a), Not(participates(Pike, a))) ::: nor does either one of them participate in the same activity as Pike\nCount([a:activities], participates(a, soccer_game)) == 2 ::: Exactly two persons go to a soccer game\nImplies(participates(Tyner, a), Not(participates(Pike, a))) ::: Tyner and Pike do not participate in the same activity as each other\nImplies(participates(Nguyen, movie), participates(Valdez, movie)) ::: If Nguyen or Valdez goes to a movie, they both go to a movie\n\n# Options\nQuestion ::: Which one of the following is a pair of persons who could go to a movie together?\nis_sat(And(participates(Nguyen, movie), participates(Tyner, movie))) ::: (A)\nis_sat(And(participates(Olson, movie), participates(Tyner, movie))) ::: (B)\nis_sat(And(participates(Olson, movie), participates(Valdez, movie))) ::: (C)\nis_sat(And(participates(Pike, movie), participates(Olson, movie))) ::: (D)\nis_sat(And(participates"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_3_16",
    "context": "Each of exactly five persons—Nguyen, Olson, Pike, Tyner, and Valdez—participates in exactly one of three activities: going to a movie, going to a soccer game, or going to a restaurant. The following conditions must apply. Nguyen and Olson do not participate in the same activity as each other, nor does either one of them participate in the same activity as Pike. Exactly two persons go to a soccer game. Tyner and Pike do not participate in the same activity as each other. If Nguyen or Valdez goes to a movie, they both go to a movie.",
    "question": "Each of the following statements must be false EXCEPT:",
    "answer": "B",
    "options": [
      "A) Only Olson goes to a restaurant.",
      "B) Only Pike goes to a restaurant.",
      "C) Only Tyner goes to a restaurant.",
      "D) Only Valdez goes to a restaurant.",
      "E) Tyner and Valdez go to a restaurant together."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Nguyen, Olson, Pike, Tyner, Valdez])\nactivities = EnumSort([movie, soccer_game, restaurant])\nparticipates = Function([people, activities] -> [bool])\n\n# Constraints\nForAll([p:people], Count([a:activities], participates(p, a)) == 1) ::: Each of exactly five persons participates in exactly one of three activities\nImplies(participates(Nguyen, a), Not(participates(Olson, a))) ::: Nguyen and Olson do not participate in the same activity as each other\nImplies(participates(Nguyen, a), Not(participates(Pike, a))) ::: nor does either one of them participate in the same activity as Pike\nCount([a:activities], participates(a, soccer_game)) == 2 ::: Exactly two persons go to a soccer game\nImplies(participates(Tyner, a), Not(participates(Pike, a))) ::: Tyner and Pike do not participate in the same activity as each other\nImplies(participates(Nguyen, movie), participates(Valdez, movie)) ::: If Nguyen or Valdez goes to a movie, they both go to a movie\n\n# Options\nQuestion ::: Each of the following statements must be false EXCEPT:\nis_exception(is_sat(ForAll([p:people], participates(p, restaurant) == Olson))) ::: (A)\nis_exception(is_sat(ForAll([p:people], participates(p, restaurant) == Pike))) ::: (B)\nis_exception(is_sat(ForAll([p:people], participates(p, restaurant) == Tyner))) ::: (C)\nis_exception(is_sat(ForAll([p:people], participates(p, restaurant) == Valdez))) ::: (D)\nis_exception(is_sat("
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_3_17",
    "context": "Each of exactly five persons—Nguyen, Olson, Pike, Tyner, and Valdez—participates in exactly one of three activities: going to a movie, going to a soccer game, or going to a restaurant. The following conditions must apply. Nguyen and Olson do not participate in the same activity as each other, nor does either one of them participate in the same activity as Pike. Exactly two persons go to a soccer game. Tyner and Pike do not participate in the same activity as each other. If Nguyen or Valdez goes to a movie, they both go to a movie.",
    "question": "If Nguyen goes to a soccer game, then which one of the following is a complete and accurate list of the persons any one of whom could go to a movie?",
    "answer": "E",
    "options": [
      "A) Olson",
      "B) Pike, Valdez",
      "C) Olson, Tyner",
      "D) Pike, Tyner, Valdez",
      "E) Olson, Pike, Tyner"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Nguyen, Olson, Pike, Tyner, Valdez])\nactivities = EnumSort([movie, soccer_game, restaurant])\nparticipates = Function([people, activities] -> [bool])\n\n# Constraints\nForAll([p:people], Count([a:activities], participates(p, a)) == 1) ::: Each of exactly five persons participates in exactly one of three activities\nImplies(participates(Nguyen, a), Not(participates(Olson, a))) ::: Nguyen and Olson do not participate in the same activity as each other\nImplies(participates(Nguyen, a), Not(participates(Pike, a))) ::: nor does either one of them participate in the same activity as Pike\nCount([a:activities], participates(a, soccer_game)) == 2 ::: Exactly two persons go to a soccer game\nImplies(participates(Tyner, a), Not(participates(Pike, a))) ::: Tyner and Pike do not participate in the same activity as each other\nImplies(participates(Nguyen, movie), participates(Valdez, movie)) ::: If Nguyen or Valdez goes to a movie, they both go to a movie\n\n# Options\nQuestion ::: If Nguyen goes to a soccer game, then which one of the following is a complete and accurate list of the persons any one of whom could go to a movie?\nis_valid(Exists([p:people], participates(p, movie) == Olson)) ::: A) Olson\nis_valid(Exists([p:people], participates(p, movie) == Pike)) ::: B) Pike, Valdez\nis_valid(Exists([p:people], participates(p, movie) == Olson)) ::: C) Olson, Tyner\nis_valid(Exists([p:people], participates(p, movie) == Pike)) ::: D) Pike"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_3_18",
    "context": "Each of exactly five persons—Nguyen, Olson, Pike, Tyner, and Valdez—participates in exactly one of three activities: going to a movie, going to a soccer game, or going to a restaurant. The following conditions must apply. Nguyen and Olson do not participate in the same activity as each other, nor does either one of them participate in the same activity as Pike. Exactly two persons go to a soccer game. Tyner and Pike do not participate in the same activity as each other. If Nguyen or Valdez goes to a movie, they both go to a movie.",
    "question": "If the condition that exactly two persons go to a soccer game is changed to require that exactly three persons go to a soccer game, but all other conditions remain the same, then which one of the following persons must participate in an activity other than going to a soccer game?",
    "answer": "C",
    "options": [
      "A) Nguyen",
      "B) Olson",
      "C) Pike",
      "D) Tyner",
      "E) Valdez"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Nguyen, Olson, Pike, Tyner, Valdez])\nactivities = EnumSort([movie, soccer_game, restaurant])\nparticipates = Function([people, activities] -> [bool])\n\n# Constraints\nForAll([p:people], Count([a:activities], participates(p, a)) == 1) ::: each of exactly five persons participates in exactly one of three activities\nImplies(participates(Nguyen, a), Not(participates(Olson, a))) ::: Nguyen and Olson do not participate in the same activity as each other\nImplies(participates(Nguyen, a), Not(participates(Pike, a))) ::: nor does either one of them participate in the same activity as Pike\nCount([a:activities], participates(a, soccer_game)) == 2 ::: exactly two persons go to a soccer game\nImplies(participates(Tyner, a), Not(participates(Pike, a))) ::: Tyner and Pike do not participate in the same activity as each other\nImplies(participates(Nguyen, movie), participates(Valdez, movie)) ::: If Nguyen or Valdez goes to a movie, they both go to a movie\n\n# Options\nQuestion ::: If the condition that exactly two persons go to a soccer game is changed to require that exactly three persons go to a soccer game, but all other conditions remain the same, then which one of the following persons must participate in an activity other than going to a soccer game?\nis_exception(is_sat(participates(Nguyen, soccer_game))) ::: (A)\nis_exception(is_sat(participates(Olson, soccer_game))) ::: (B)\nis_exception(is_sat(participates(Pike, soccer_game))) ::: (C)\nis_exception(is_sat(participates(Tyn"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_4_19",
    "context": "In each of two years exactly two of four lawmakers—Feld, Gibson, Hsu, and Ivins—and exactly two of three scientists—Vega, Young, and Zapora—will serve as members of a four-person panel. In each year, one of the members will be chairperson. The chairperson in the first year cannot serve on the panel in the second year. The chairperson in the second year must have served on the panel in the first year. Service on the panel must obey the following conditions: Gibson and Vega do not serve on the panel in the same year as each other. Hsu and Young do not serve on the panel in the same year as each other. Each year, either Ivins or Vega, but not both, serves on the panel.",
    "question": "Which one of the following could be the list of the people who serve on the panel in the first year?",
    "answer": "B",
    "options": [
      "A) Feld, Gibson, Vega, Zapora",
      "B) Feld, Hsu, Vega, Zapora",
      "C) Feld, Ivins, Vega, Zapora",
      "D) Gibson, Hsu, Ivins, Zapora",
      "E) Hsu, Ivins, Young, Zapora"
    ],
    "raw_logic_programs": [
      "# Declarations\nlawmakers = EnumSort([Feld, Gibson, Hsu, Ivins])\nscientists = EnumSort([Vega, Young, Zapora])\nyears = EnumSort([first, second])\nmembers = Function([years] -> [lawmakers + scientists])\nchairperson = Function([years] -> [lawmakers + scientists])\n\n# Constraints\nForAll([y:years], Count([m:lawmakers + scientists], members(y) == m) == 4) ::: exactly two of four lawmakers—Feld, Gibson, Hsu, and Ivins—and exactly two of three scientists—Vega, Young, and Zapora—will serve as members of a four-person panel\nForAll([y:years], Count([m:lawmakers + scientists], chairperson(y) == m) == 1) ::: one of the members will be chairperson\nForAll([m:lawmakers + scientists], Implies(chairperson(first) == m, Not(chairperson(second) == m))) ::: the chairperson in the first year cannot serve on the panel in the second year\nForAll([m:lawmakers + scientists], Implies(chairperson(second) == m, chairperson(first) == m)) ::: the chairperson in the second year must have served on the panel in the first year\nForAll([y:years], Distinct([m:lawmakers + scientists], members(y) == m)) ::: Service on the panel must obey the following conditions\nAnd(members(first) == Gibson, members(first) == Vega) ::: Gibson and Vega do not serve on the panel in the same year as each other\nAnd(members(first) == Hsu, members(first) == Young) ::: Hsu and Young do not serve on the panel in the same year as each other\nOr(members(first) == Ivins, members(first) == Vega) ::: Each year, either Ivins or Vega, but not both"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_4_20",
    "context": "In each of two years exactly two of four lawmakers—Feld, Gibson, Hsu, and Ivins—and exactly two of three scientists—Vega, Young, and Zapora—will serve as members of a four-person panel. In each year, one of the members will be chairperson. The chairperson in the first year cannot serve on the panel in the second year. The chairperson in the second year must have served on the panel in the first year. Service on the panel must obey the following conditions: Gibson and Vega do not serve on the panel in the same year as each other. Hsu and Young do not serve on the panel in the same year as each other. Each year, either Ivins or Vega, but not both, serves on the panel.",
    "question": "If Vega is the chairperson in the first year, which one of the following is a pair of people who must serve on the panel in the second year?",
    "answer": "D",
    "options": [
      "A) Gibson and Young",
      "B) Gibson and Zapora",
      "C) Hsu and Ivins",
      "D) Ivins and Young",
      "E) Vega and Young"
    ],
    "raw_logic_programs": [
      "# Declarations\nlawmakers = EnumSort([Feld, Gibson, Hsu, Ivins])\nscientists = EnumSort([Vega, Young, Zapora])\nyears = EnumSort([first, second])\nmembers = Function([years] -> [lawmakers + scientists])\nchairperson = Function([years] -> [lawmakers + scientists])\n\n# Constraints\nForAll([y:years], Count([m:lawmakers + scientists], members(y) == m) == 4) ::: exactly two of four lawmakers—Feld, Gibson, Hsu, and Ivins—and exactly two of three scientists—Vega, Young, and Zapora—will serve as members of a four-person panel\nForAll([y:years], Count([m:lawmakers + scientists], chairperson(y) == m) == 1) ::: one of the members will be chairperson\nForAll([m:lawmakers + scientists], Implies(members(first)(m), Not(members(second)(m)))) ::: the chairperson in the first year cannot serve on the panel in the second year\nForAll([m:lawmakers + scientists], Implies(members(second)(m), members(first)(m))) ::: the chairperson in the second year must have served on the panel in the first year\nForAll([m:lawmakers + scientists], Implies(members(first)(m), Not(members(first)(m)))) ::: Gibson and Vega do not serve on the panel in the same year as each other\nForAll([m:lawmakers + scientists], Implies(members(first)(m), Not(members(first)(m)))) ::: Hsu and Young do not serve on the panel in the same year as each other\nForAll([m:lawmakers + scientists], Implies(members(first)(m), Not(members(first)(m)))) ::: Each year, either Ivins or Vega, but not both, serves on the panel\n\n# Options\nQuestion ::: If Vega is"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_4_21",
    "context": "In each of two years exactly two of four lawmakers—Feld, Gibson, Hsu, and Ivins—and exactly two of three scientists—Vega, Young, and Zapora—will serve as members of a four-person panel. In each year, one of the members will be chairperson. The chairperson in the first year cannot serve on the panel in the second year. The chairperson in the second year must have served on the panel in the first year. Service on the panel must obey the following conditions: Gibson and Vega do not serve on the panel in the same year as each other. Hsu and Young do not serve on the panel in the same year as each other. Each year, either Ivins or Vega, but not both, serves on the panel.",
    "question": "If Hsu is the chairperson in the first year, which one of the following could be the chairperson in the second year?",
    "answer": "A",
    "options": [
      "A) Feld",
      "B) Gibson",
      "C) Hsu",
      "D) Ivins",
      "E) Young"
    ],
    "raw_logic_programs": [
      "# Declarations\nlawmakers = EnumSort([Feld, Gibson, Hsu, Ivins])\nscientists = EnumSort([Vega, Young, Zapora])\nmembers = Function([lawmakers, scientists] -> [bool])\nchairperson = Function([lawmakers, scientists] -> [bool])\n\n# Constraints\nForAll([y:int], And(y == 1, Count([m:lawmakers], members(m, y)) == 2) ::: In each of two years exactly two of four lawmakers\nAnd(y == 2, Count([m:lawmakers], members(m, y)) == 2) ::: In each of two years exactly two of four lawmakers\nAnd(y == 1, Count([m:scientists], members(m, y)) == 2) ::: In each of two years exactly two of three scientists\nAnd(y == 2, Count([m:scientists], members(m, y)) == 2) ::: In each of two years exactly two of three scientists\nForAll([m:lawmakers], And(1 <= members(m, 1), members(m, 1) <= 1)) ::: In each year, one of the members will be chairperson\nForAll([m:lawmakers], And(1 <= members(m, 2), members(m, 2) <= 1)) ::: In each year, one of the members will be chairperson\nForAll([m:lawmakers], And(1 <= members(m, 1), members(m, 1) <= 1)) ::: The chairperson in the first year cannot serve on the panel in the second year\nForAll([m:lawmakers], And(1 <= members(m, 2), members(m, 2) <= 1)) ::: The chairperson in the second year must have served on the panel in the first year\nForAll([m:lawmakers], And(1 <= members(m, 1), members(m, 1) <= 1)) ::: Service on the panel"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_4_22",
    "context": "In each of two years exactly two of four lawmakers—Feld, Gibson, Hsu, and Ivins—and exactly two of three scientists—Vega, Young, and Zapora—will serve as members of a four-person panel. In each year, one of the members will be chairperson. The chairperson in the first year cannot serve on the panel in the second year. The chairperson in the second year must have served on the panel in the first year. Service on the panel must obey the following conditions: Gibson and Vega do not serve on the panel in the same year as each other. Hsu and Young do not serve on the panel in the same year as each other. Each year, either Ivins or Vega, but not both, serves on the panel.",
    "question": "IF Feld serves on the panel in a given year, any one of the following could serve on the panel that year EXCEPT:",
    "answer": "A",
    "options": [
      "A) Gibson",
      "B) Hsu",
      "C) Ivins",
      "D) Vega",
      "E) Young"
    ],
    "raw_logic_programs": [
      "# Declarations\nlawmakers = EnumSort([Feld, Gibson, Hsu, Ivins])\nscientists = EnumSort([Vega, Young, Zapora])\nyears = EnumSort([first, second])\nserves = Function([lawmakers, years] -> [bool])\nchairperson = Function([lawmakers, years] -> [lawmakers])\n\n# Constraints\nForAll([l:lawmakers], Count([y:years], serves(l, y)) == 1) ::: exactly two of four lawmakers\nForAll([s:scientists], Count([y:years], serves(s, y)) == 1) ::: exactly two of three scientists\nForAll([y:years], Count([l:lawmakers], serves(l, y)) == 2) ::: exactly two of four lawmakers\nForAll([y:years], Count([s:scientists], serves(s, y)) == 2) ::: exactly two of three scientists\nForAll([l:lawmakers], Implies(serves(l, first), Not(serves(l, second)))) ::: the chairperson in the first year cannot serve on the panel in the second year\nForAll([l:lawmakers], Implies(serves(l, second), serves(l, first))) ::: the chairperson in the second year must have served on the panel in the first year\nForAll([l:lawmakers], Implies(serves(l, first), Not(serves(l, second)))) ::: the chairperson in the first year cannot serve on the panel in the second year\nForAll([l:lawmakers], Implies(serves(l, second), serves(l, first))) ::: the chairperson in the second year must have served on the panel in the first year\nForAll([l:lawmakers], Implies(serves(l, first), Not(serves(l, second)))) ::: the chairperson in the first year cannot serve on the panel in the second year\nForAll([l:lawmakers],"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_4_23",
    "context": "In each of two years exactly two of four lawmakers—Feld, Gibson, Hsu, and Ivins—and exactly two of three scientists—Vega, Young, and Zapora—will serve as members of a four-person panel. In each year, one of the members will be chairperson. The chairperson in the first year cannot serve on the panel in the second year. The chairperson in the second year must have served on the panel in the first year. Service on the panel must obey the following conditions: Gibson and Vega do not serve on the panel in the same year as each other. Hsu and Young do not serve on the panel in the same year as each other. Each year, either Ivins or Vega, but not both, serves on the panel.",
    "question": "If Ivins is the chairperson in the first year, which one of the following could be the chairperson in the second year?",
    "answer": "A",
    "options": [
      "A) Feld",
      "B) Gibson",
      "C) Hsu",
      "D) Vega",
      "E) Young"
    ],
    "raw_logic_programs": [
      "# Declarations\nlawmakers = EnumSort([Feld, Gibson, Hsu, Ivins])\nscientists = EnumSort([Vega, Young, Zapora])\nyears = EnumSort([first, second])\nmembers = Function([years] -> [lawmakers + scientists])\nchairperson = Function([years] -> [lawmakers + scientists])\n\n# Constraints\nForAll([y:years], Count([m:lawmakers + scientists], members(y) == m) == 4) ::: exactly two of four lawmakers—Feld, Gibson, Hsu, and Ivins—and exactly two of three scientists—Vega, Young, and Zapora—will serve as members of a four-person panel\nForAll([y:years], Implies(chairperson(y) == m, members(y) == m)) ::: one of the members will be chairperson\nForAll([y:years], Implies(chairperson(y) == m, Not(chairperson(y) == m))) ::: the chairperson in the first year cannot serve on the panel in the second year\nForAll([y:years], Implies(chairperson(y) == m, chairperson(y) == m)) ::: the chairperson in the second year must have served on the panel in the first year\nForAll([y:years], Implies(members(y) == Gibson, Not(members(y) == Vega))) ::: Gibson and Vega do not serve on the panel in the same year as each other\nForAll([y:years], Implies(members(y) == Hsu, Not(members(y) == Young))) ::: Hsu and Young do not serve on the panel in the same year as each other\nForAll([y:years], Implies(members(y) == Ivins, Not(members(y) == Vega))) ::: each year, either Ivins or Vega, but not both, serves on the panel\n\n# Options\nQuestion ::: If Ivins is"
    ]
  },
  {
    "id": "ar_lsat_199809_1-G_4_24",
    "context": "In each of two years exactly two of four lawmakers—Feld, Gibson, Hsu, and Ivins—and exactly two of three scientists—Vega, Young, and Zapora—will serve as members of a four-person panel. In each year, one of the members will be chairperson. The chairperson in the first year cannot serve on the panel in the second year. The chairperson in the second year must have served on the panel in the first year. Service on the panel must obey the following conditions: Gibson and Vega do not serve on the panel in the same year as each other. Hsu and Young do not serve on the panel in the same year as each other. Each year, either Ivins or Vega, but not both, serves on the panel.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Feld is on the panel in the second year.",
      "B) Hsu is on the panel in the first year.",
      "C) Ivins is on the panel in both years.",
      "D) Young is on the panel in both years.",
      "E) Zapora is on the panel in the second year."
    ],
    "raw_logic_programs": [
      "# Declarations\nlawmakers = EnumSort([Feld, Gibson, Hsu, Ivins])\nscientists = EnumSort([Vega, Young, Zapora])\nyears = EnumSort([first, second])\nmembers = Function([years] -> [lawmakers + scientists])\nchairperson = Function([years] -> [lawmakers + scientists])\n\n# Constraints\nForAll([y:years], Count([m:lawmakers + scientists], members(y) == m) == 4) ::: exactly two of four lawmakers—Feld, Gibson, Hsu, and Ivins—and exactly two of three scientists—Vega, Young, and Zapora—will serve as members of a four-person panel\nForAll([y:years], Implies(chairperson(y) == m, members(y) == m)) ::: one of the members will be chairperson\nForAll([y:years], Implies(chairperson(y) == m, Not(chairperson(y) == m))) ::: the chairperson in the first year cannot serve on the panel in the second year\nForAll([y:years], Implies(chairperson(y) == m, chairperson(y) == m)) ::: the chairperson in the second year must have served on the panel in the first year\nForAll([y:years], Implies(members(y) == m, Not(members(y) == m))) ::: Gibson and Vega do not serve on the panel in the same year as each other\nForAll([y:years], Implies(members(y) == m, Not(members(y) == m))) ::: Hsu and Young do not serve on the panel in the same year as each other\nForAll([y:years], Implies(members(y) == m, Or(members(y) == m, members(y) == m))) ::: Each year, either Ivins or Vega, but not both, serves on the panel\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([y:years], members(y) == Feld)) ::: (A)\nis_valid(Exists([y:years], members(y) == Hsu)) ::: (B)\nis_valid(Exists([y:years], members(y) == Ivins)) ::: (C)\nis_valid(Exists([y:years], members(y) == Young)) ::: (D)\nis_valid(Exists([y:years], members(y) == Zapora)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_1_1",
    "context": "During a period of seven consecutive days—from day 1 through day 7—seven investors—Fennelly, Gupta, Hall, Jones, Knight, Lopez, and Moss—will each view a building site exactly once. Each day exactly one investor will view the site. The investors must view the site in accordance with the following conditions: Fennelly views the site on day 3 or else day 5. Lopez views the site on neither day 4 nor day 6. If Jones views the site on day 1, Hall views the site on day 2. If Knight views the site on day 4, Lopez views the site on day 5. Gupta views the site on the day after the day on which Hall views the site.",
    "question": "Which one of the following could be the order in which the investors view the site, from day 1 through day 7?",
    "answer": "E",
    "options": [
      "A) Hall, Gupta, Fennelly, Moss, Knight, Lopez, Jones",
      "B) Hall, Gupta, Lopez, Fennelly, Moss, Knight, Jones",
      "C) Lopez, Gupta, Hall, Moss, Fennelly, Jones, Knight",
      "D) Lopez, Jones, Fennelly, Knight, Hall, Gupta, Moss",
      "E) Lopez, Jones, Knight, Moss, Fennelly, Hall, Gupta"
    ],
    "raw_logic_programs": [
      "# Declarations\ninvestors = EnumSort([Fennelly, Gupta, Hall, Jones, Knight, Lopez, Moss])\ndays = EnumSort([day1, day2, day3, day4, day5, day6, day7])\nviews = Function([investors, days] -> [bool])\n\n# Constraints\nForAll([i:investors], Count([d:days], views(i, d)) == 1) ::: Each day exactly one investor will view the site\nOr(views(Fennelly, day3), views(Fennelly, day5)) ::: Fennelly views the site on day 3 or else day 5\nNot(views(Lopez, day4)) ::: Lopez views the site on neither day 4 nor day 6\nNot(views(Lopez, day6)) ::: Lopez views the site on neither day 4 nor day 6\nAnd(views(Jones, day1), views(Hall, day2)) ::: If Jones views the site on day 1, Hall views the site on day 2\nAnd(views(Knight, day4), views(Lopez, day5)) ::: If Knight views the site on day 4, Lopez views the site on day 5\nviews(Hall, d1) ::: Gupta views the site on the day after the day on which Hall views the site\nviews(Gupta, d2) ::: Gupta views the site on the day after the day on which Hall views the site\n\n# Options\nQuestion ::: Which one of the following could be the order in which the investors view the site, from day 1 through day 7?\nis_sat(And(views(Hall, day1), views(Gupta, day2), views(Fennelly, day3), views(Moss, day4), views(Knight, day5), views(Lopez, day6), views(Jones, day7))) ::: A) Hall, Gupta, Fennelly, Moss, Knight, Lopez, Jones\nis_sat(And(views(Hall, day1), views(Gupta, day2), views(Lopez, day3), views(Fennelly, day4), views(Moss, day5), views(Knight, day6), views(Jones, day7))) ::: B) Hall, Gupta, Lopez, Fennelly, Moss, Knight, Jones\nis_sat(And(views(Lopez, day1), views(Gupta, day2), views(Hall, day3), views(Moss, day4), views(Fennelly"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_1_2",
    "context": "During a period of seven consecutive days—from day 1 through day 7—seven investors—Fennelly, Gupta, Hall, Jones, Knight, Lopez, and Moss—will each view a building site exactly once. Each day exactly one investor will view the site. The investors must view the site in accordance with the following conditions: Fennelly views the site on day 3 or else day 5. Lopez views the site on neither day 4 nor day 6. If Jones views the site on day 1, Hall views the site on day 2. If Knight views the site on day 4, Lopez views the site on day 5. Gupta views the site on the day after the day on which Hall views the site.",
    "question": "If Jones views the site on day 1, which one of the following investors must view the site on day 4?",
    "answer": "E",
    "options": [
      "A) Fennelly",
      "B) Gupta",
      "C) Knight",
      "D) Lopez",
      "E) Moss"
    ],
    "raw_logic_programs": [
      "# Declarations\ninvestors = EnumSort([Fennelly, Gupta, Hall, Jones, Knight, Lopez, Moss])\ndays = EnumSort([day1, day2, day3, day4, day5, day6, day7])\nviews = Function([investors, days] -> [bool])\n\n# Constraints\nForAll([i:investors], Count([d:days], views(i, d)) == 1) ::: Each day exactly one investor will view the site\nAnd(views(Fennelly, day3), views(Fennelly, day5)) ::: Fennelly views the site on day 3 or else day 5\nNot(views(Lopez, day4), views(Lopez, day6)) ::: Lopez views the site on neither day 4 nor day 6\nImplies(views(Jones, day1), views(Hall, day2)) ::: If Jones views the site on day 1, Hall views the site on day 2\nAnd(views(Knight, day4), views(Lopez, day5)) ::: If Knight views the site on day 4, Lopez views the site on day 5\nImplies(views(Hall, d), views(Gupta, d + 1)) ::: Gupta views the site on the day after the day on which Hall views the site\n\n# Options\nQuestion ::: If Jones views the site on day 1, which one of the following investors must view the site on day 4?\nis_sat(views(Fennelly, day4)) ::: (A)\nis_sat(views(Gupta, day4)) ::: (B)\nis_sat(views(Knight, day4)) ::: (C)\nis_sat(views(Lopez, day4)) ::: (D)\nis_sat(views(Moss, day4)) ::: (E)\n------\nProblem:\nIn a certain city, there are exactly six restaurants—A, B, C, D, E, and F—that serve a particular type of food. Each restaurant serves exactly one of the following three types of food—fish, meat, or vegetables—and no other types. The following conditions apply: A serves fish. B serves meat. C serves the same type of food as A. D serves the same type of food as B. E serves the same type of food as C. F serves the same type of food as D.\nQuestion:\nWhich one of the following restaurants could serve vegetables?\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E)"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_1_3",
    "context": "During a period of seven consecutive days—from day 1 through day 7—seven investors—Fennelly, Gupta, Hall, Jones, Knight, Lopez, and Moss—will each view a building site exactly once. Each day exactly one investor will view the site. The investors must view the site in accordance with the following conditions: Fennelly views the site on day 3 or else day 5. Lopez views the site on neither day 4 nor day 6. If Jones views the site on day 1, Hall views the site on day 2. If Knight views the site on day 4, Lopez views the site on day 5. Gupta views the site on the day after the day on which Hall views the site.",
    "question": "If Knight views the site on day 4 and Moss views the site on some day after the day on which Jones views the site, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Jones views the site on day 1.",
      "B) Jones views the site on day 2.",
      "C) Jones views the site on day 6.",
      "D) Moss views the site on day 2.",
      "E) Moss views the site on day 6."
    ],
    "raw_logic_programs": [
      "# Declarations\ninvestors = EnumSort([Fennelly, Gupta, Hall, Jones, Knight, Lopez, Moss])\ndays = EnumSort([day1, day2, day3, day4, day5, day6, day7])\nviews = Function([investors, days] -> [bool])\n\n# Constraints\nForAll([i:investors], Count([d:days], views(i, d)) == 1) ::: Each day exactly one investor will view the site\nAnd(views(Fennelly, day3), views(Fennelly, day5)) ::: Fennelly views the site on day 3 or else day 5\nNot(views(Lopez, day4), views(Lopez, day6)) ::: Lopez views the site on neither day 4 nor day 6\nAnd(views(Jones, day1), views(Hall, day2)) ::: If Jones views the site on day 1, Hall views the site on day 2\nAnd(views(Knight, day4), views(Lopez, day5)) ::: If Knight views the site on day 4, Lopez views the site on day 5\nviews(Gupta, day2) ::: Gupta views the site on the day after the day on which Hall views the site\n\n# Options\nQuestion ::: If Knight views the site on day 4 and Moss views the site on some day after the day on which Jones views the site, which one of the following must be true?\nis_valid(And(views(Knight, day4), views(Moss, day2), views(Jones, day1))) ::: (A)\nis_valid(And(views(Knight, day4), views(Moss, day2), views(Jones, day2))) ::: (B)\nis_valid(And(views(Knight, day4), views(Moss, day6), views(Jones, day1))) ::: (C)\nis_valid(And(views(Knight, day4), views(Moss, day2), views(Jones, day1))) ::: (D)\nis_valid(And(views(Knight, day4), views(Moss, day6), views(Jones, day1))) ::: (E)\n------\nProblem:\nA group of seven people—F, G, H, I, J, K, and L—will be seated in a row of seven chairs. Each person will sit in exactly one chair. The seating must conform to the following conditions: H sits in chair 1. J sits in chair 3. F sits in chair 4."
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_1_4",
    "context": "During a period of seven consecutive days—from day 1 through day 7—seven investors—Fennelly, Gupta, Hall, Jones, Knight, Lopez, and Moss—will each view a building site exactly once. Each day exactly one investor will view the site. The investors must view the site in accordance with the following conditions: Fennelly views the site on day 3 or else day 5. Lopez views the site on neither day 4 nor day 6. If Jones views the site on day 1, Hall views the site on day 2. If Knight views the site on day 4, Lopez views the site on day 5. Gupta views the site on the day after the day on which Hall views the site.",
    "question": "If Hall views the site on day 2, which one of the following is a complete and accurate list of investors any one of whom could be the investor who views the site on day 4?",
    "answer": "C",
    "options": [
      "A) Knight",
      "B) Moss",
      "C) Jones, Moss",
      "D) Knight, Moss",
      "E) Jones, Knight, Moss"
    ],
    "raw_logic_programs": [
      "# Declarations\ninvestors = EnumSort([Fennelly, Gupta, Hall, Jones, Knight, Lopez, Moss])\ndays = EnumSort([day1, day2, day3, day4, day5, day6, day7])\nviews = Function([investors, days] -> [bool])\n\n# Constraints\nForAll([i:investors], Count([d:days], views(i, d)) == 1) ::: Each day exactly one investor will view the site\nAnd(views(Fennelly, day3), views(Fennelly, day5)) ::: Fennelly views the site on day 3 or else day 5\nNot(views(Lopez, day4), views(Lopez, day6)) ::: Lopez views the site on neither day 4 nor day 6\nAnd(views(Jones, day1), views(Hall, day2)) ::: If Jones views the site on day 1, Hall views the site on day 2\nAnd(views(Knight, day4), views(Lopez, day5)) ::: If Knight views the site on day 4, Lopez views the site on day 5\nAnd(views(Hall, d1), views(Gupta, d2)) ::: Gupta views the site on the day after the day on which Hall views the site\n\n# Options\nQuestion ::: If Hall views the site on day 2, which one of the following is a complete and accurate list of investors any one of whom could be the investor who views the site on day 4?\nis_valid(Exists([i:investors], views(i, day4))) ::: A) Knight\nis_valid(Exists([i:investors], views(i, day4))) ::: B) Moss\nis_valid(Exists([i:investors], views(i, day4))) ::: C) Jones, Moss\nis_valid(Exists([i:investors], views(i, day4))) ::: D) Knight, Moss\nis_valid(Exists([i:investors], views(i, day4))) ::: E) Jones, Knight, Moss\n------\nProblem:\nIn a certain city, there are five parks—A, B, C, D, and E—and five museums—F, G, H, I, and J. Each park is located within exactly one of the following five districts—1, 2, 3, 4, and 5—and each museum is located within exactly one of the same five districts. The following conditions apply: Park A is located in district 1. Museum F is located in district 2. Park"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_1_5",
    "context": "During a period of seven consecutive days—from day 1 through day 7—seven investors—Fennelly, Gupta, Hall, Jones, Knight, Lopez, and Moss—will each view a building site exactly once. Each day exactly one investor will view the site. The investors must view the site in accordance with the following conditions: Fennelly views the site on day 3 or else day 5. Lopez views the site on neither day 4 nor day 6. If Jones views the site on day 1, Hall views the site on day 2. If Knight views the site on day 4, Lopez views the site on day 5. Gupta views the site on the day after the day on which Hall views the site.",
    "question": "If Hall views the site on the day after the day Knight views the site and if Fennelly views the site on the day after the day Lopez views the site, then Jones must view the site on day",
    "answer": "D",
    "options": [
      "A) 1",
      "B) 2",
      "C) 3",
      "D) 4",
      "E) 5"
    ],
    "raw_logic_programs": [
      "# Declarations\ninvestors = EnumSort([Fennelly, Gupta, Hall, Jones, Knight, Lopez, Moss])\ndays = EnumSort([day1, day2, day3, day4, day5, day6, day7])\nviews = Function([investors, days] -> [bool])\n\n# Constraints\nForAll([i:investors], Count([d:days], views(i, d)) == 1) ::: Each day exactly one investor will view the site\nAnd(views(Fennelly, day3), views(Fennelly, day5)) ::: Fennelly views the site on day 3 or else day 5\nNot(views(Lopez, day4), views(Lopez, day6)) ::: Lopez views the site on neither day 4 nor day 6\nAnd(views(Jones, day1), views(Hall, day2)) ::: If Jones views the site on day 1, Hall views the site on day 2\nAnd(views(Knight, day4), views(Lopez, day5)) ::: If Knight views the site on day 4, Lopez views the site on day 5\nviews(Gupta, day(Hall + 1)) ::: Gupta views the site on the day after the day on which Hall views the site\n\n# Options\nQuestion ::: If Hall views the site on the day after the day Knight views the site and if Fennelly views the site on the day after the day Lopez views the site, then Jones must view the site on day\nis_sat(And(views(Hall, day(Knight + 1)), views(Fennelly, day(Lopez + 1)), views(Jones, day(day1 + 1)))) ::: A) 1\nis_sat(And(views(Hall, day(Knight + 1)), views(Fennelly, day(Lopez + 1)), views(Jones, day(day2 + 1)))) ::: B) 2\nis_sat(And(views(Hall, day(Knight + 1)), views(Fennelly, day(Lopez + 1)), views(Jones, day(day3 + 1)))) ::: C) 3\nis_sat(And(views(Hall, day(Knight + 1)), views(Fennelly, day(Lopez + 1)), views(Jones, day(day4 + 1)))) ::: D) 4\nis_sat(And(views(Hall, day(Knight + 1)), views(Fennelly, day(L"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_1_6",
    "context": "During a period of seven consecutive days—from day 1 through day 7—seven investors—Fennelly, Gupta, Hall, Jones, Knight, Lopez, and Moss—will each view a building site exactly once. Each day exactly one investor will view the site. The investors must view the site in accordance with the following conditions: Fennelly views the site on day 3 or else day 5. Lopez views the site on neither day 4 nor day 6. If Jones views the site on day 1, Hall views the site on day 2. If Knight views the site on day 4, Lopez views the site on day 5. Gupta views the site on the day after the day on which Hall views the site.",
    "question": "If the day on which Gupta views the site and the day on which Lopez views the site both come at some time before the day on which Fennelly views the site, which one of the following is an investor who could view the site on day 3?",
    "answer": "B",
    "options": [
      "A) Fennelly",
      "B) Gupta",
      "C) Jones",
      "D) Knight",
      "E) Moss"
    ],
    "raw_logic_programs": [
      "# Declarations\ninvestors = EnumSort([Fennelly, Gupta, Hall, Jones, Knight, Lopez, Moss])\ndays = EnumSort([day1, day2, day3, day4, day5, day6, day7])\nviews = Function([investors, days] -> [bool])\n\n# Constraints\nForAll([i:investors], Count([d:days], views(i, d)) == 1) ::: Each day exactly one investor will view the site\nAnd(views(Fennelly, day3), views(Fennelly, day5)) ::: Fennelly views the site on day 3 or else day 5\nNot(views(Lopez, day4), views(Lopez, day6)) ::: Lopez views the site on neither day 4 nor day 6\nAnd(views(Jones, day1), views(Hall, day2)) ::: If Jones views the site on day 1, Hall views the site on day 2\nAnd(views(Knight, day4), views(Lopez, day5)) ::: If Knight views the site on day 4, Lopez views the site on day 5\nAnd(views(Gupta, day2), views(Hall, day1)) ::: Gupta views the site on the day after the day on which Hall views the site\n\n# Options\nQuestion ::: If the day on which Gupta views the site and the day on which Lopez views the site both come at some time before the day on which Fennelly views the site, which one of the following is an investor who could view the site on day 3?\nis_sat(And(views(Gupta, day2), views(Lopez, day1), views(Fennelly, day3))) ::: (A)\nis_sat(And(views(Gupta, day2), views(Lopez, day1), views(Fennelly, day5))) ::: (B)\nis_sat(And(views(Jones, day1), views(Lopez, day1), views(Fennelly, day3))) ::: (C)\nis_sat(And(views(Knight, day4), views(Lopez, day1), views(Fennelly, day3))) ::: (D)\nis_sat(And(views(Moss, day7), views(Lopez, day1), views(Fennelly, day3))) ::: (E)\n------\nProblem:\nIn a certain city, there are five parks—A, B, C, D, and E—and five museums—F, G,"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_2_7",
    "context": "A zoo's reptile house has a straight row of exactly five consecutive habitats—numbered 1 through 5 from left to right—for housing exactly seven reptiles—four snakes and three lizards. Five of the reptiles are female and two are male. The reptiles must be housed as follows: No habitat houses more than two reptiles. No habitat houses both a snake and a lizard. No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard.",
    "question": "Which one of the following could be a complete and accurate matching of habitats to reptiles?",
    "answer": "B",
    "options": [
      "A) 1: two female snakes; 2: one male snake; 3: one female lizard; 4: one male snake, one female lizard; 5: one female lizard",
      "B) 1: empty; 2: two female snakes; 3: two female lizards; 4: two male snakes; 5: one female lizard",
      "C) 1: one female snake, one male snake; 2: two female snakes; 3: one male lizard; 4: one female lizard; 5: one female lizard",
      "D) 1: two male snakes; 2: empty; 3: one female lizard; 4: one female lizard; 5: two female snakes, one female lizard",
      "E) 1: one female snake, one male snake; 2: one female snake, one male snake; 3: one male lizard; 4: one female lizard; 5: one female lizard"
    ],
    "raw_logic_programs": [
      "# Declarations\nhabitats = EnumSort([1, 2, 3, 4, 5])\nreptiles = EnumSort([female_snake_1, female_snake_2, female_snake_3, female_snake_4, male_snake_1, male_snake_2, male_lizard_1, male_lizard_2, female_lizard_1, female_lizard_2, female_lizard_3])\nhouses = Function([habitats, reptiles] -> [bool])\n\n# Constraints\nForAll([h:habitats], Count([r:reptiles], houses(h, r)) <= 2) ::: No habitat houses more than two reptiles\nForAll([h:habitats], Implies(Count([r:reptiles], houses(h, r)) == 2, Not(houses(h, male_lizard_1) && houses(h, male_lizard_2)))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(houses(h, male_lizard_1), Not(houses(h - 1, female_snake_1) || houses(h - 1, female_snake_2) || houses(h - 1, female_snake_3) || houses(h - 1, female_snake_4)))) ::: No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate matching of habitats to reptiles?\nis_sat(ForAll([h:habitats], houses(h, female_snake_1) || houses(h, female_snake_2) || houses(h, female_snake_3) || houses(h, female_snake_4) || houses(h, male_snake_1) || houses(h, male_snake_2) || houses(h, male_lizard_1) || houses(h, male_lizard_2) || houses(h, female_lizard_1) || houses(h, female_lizard_2) || houses(h, female_lizard_3))) ::: A)\nis_sat(ForAll([h:habitats], houses(h, female_snake_1) || houses(h, female_snake_2) || houses(h, female_snake_3) || houses(h, female_snake_4) || houses(h, male_snake_1) || houses(h, male_s"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_2_8",
    "context": "A zoo's reptile house has a straight row of exactly five consecutive habitats—numbered 1 through 5 from left to right—for housing exactly seven reptiles—four snakes and three lizards. Five of the reptiles are female and two are male. The reptiles must be housed as follows: No habitat houses more than two reptiles. No habitat houses both a snake and a lizard. No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard.",
    "question": "If habitat 2 contains at least one female snake and habitat 4 contains two male lizards, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Habitat 3 contains two reptiles.",
      "B) Habitat 5 contains two reptiles.",
      "C) Habitat 1 contains a female lizard.",
      "D) Habitat 2 contains a female lizard.",
      "E) Habitat 5 contains a female lizard."
    ],
    "raw_logic_programs": [
      "# Declarations\nhabitats = EnumSort([1, 2, 3, 4, 5])\nreptiles = EnumSort([snake1, snake2, snake3, snake4, lizard1, lizard2, lizard3])\nhouses = Function([habitats, reptiles] -> [bool])\n\n# Constraints\nForAll([h:habitats], Count([r:reptiles], houses(h, r)) <= 2) ::: No habitat houses more than two reptiles\nForAll([h:habitats], Count([r:reptiles], houses(h, r)) >= 1) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(houses(h, snake1), Not(houses(h, lizard1)))) ::: No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard\n\n# Options\nQuestion ::: If habitat 2 contains at least one female snake and habitat 4 contains two male lizards, then which one of the following could be true?\nis_sat(ForAll([h:habitats], houses(h, snake1))) ::: A) Habitat 3 contains two reptiles.\nis_sat(ForAll([h:habitats], houses(h, snake1))) ::: B) Habitat 5 contains two reptiles.\nis_sat(ForAll([h:habitats], houses(h, lizard1))) ::: C) Habitat 1 contains a female lizard.\nis_sat(ForAll([h:habitats], houses(h, lizard1))) ::: D) Habitat 2 contains a female lizard.\nis_sat(ForAll([h:habitats], houses(h, lizard1))) ::: E) Habitat 5 contains a female lizard.\n------\nProblem:\nA certain company has exactly six employees—A, B, C, D, E, and F—who are assigned to work on exactly three projects—1, 2, and 3. Each employee works on exactly two of the projects, and each project is worked on by exactly two employees. The following conditions apply: A and B work on project 1. C and D work on project 2. E and F work on project 3. A and C work on the same two projects. B and E work on the same two projects.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A and D work on the same two projects.\n(B) B and D work on the same two projects.\n(C) C and E"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_2_9",
    "context": "A zoo's reptile house has a straight row of exactly five consecutive habitats—numbered 1 through 5 from left to right—for housing exactly seven reptiles—four snakes and three lizards. Five of the reptiles are female and two are male. The reptiles must be housed as follows: No habitat houses more than two reptiles. No habitat houses both a snake and a lizard. No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) At least one female reptile is alone in a habitat.",
      "B) At least one male reptile is alone in a habitat.",
      "C) At least one lizard is alone in a habitat.",
      "D) At least one lizard is male.",
      "E) At least one snake is male."
    ],
    "raw_logic_programs": [
      "# Declarations\nreptiles = EnumSort([snake1, snake2, snake3, snake4, lizard1, lizard2, lizard3])\nhabitats = EnumSort([1, 2, 3, 4, 5])\nhouses = Function([reptiles, habitats] -> [bool])\n\n# Constraints\nForAll([r:reptiles], Count([h:habitats], houses(r, h)) == 1) ::: No habitat houses more than two reptiles\nForAll([h:habitats], Count([r:reptiles], houses(r, h)) <= 2) ::: No habitat houses more than two reptiles\nForAll([h:habitats], Implies(houses(snake1, h), Not(houses(lizard1, h)))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(houses(snake2, h), Not(houses(lizard2, h)))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(houses(snake3, h), Not(houses(lizard3, h)))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(houses(snake4, h), Not(houses(lizard1, h)))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(houses(snake4, h), Not(houses(lizard2, h)))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(houses(snake4, h), Not(houses(lizard3, h)))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(houses(snake1, h), Not(houses(lizard1, h + 1)))) ::: No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard\nForAll([h:habitats], Implies(houses(snake2, h), Not(houses(lizard2, h + 1)))) ::: No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard\nForAll([h:habitats], Implies(houses(snake3, h), Not(houses(lizard3, h + 1)))) ::: No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard\nForAll"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_2_10",
    "context": "A zoo's reptile house has a straight row of exactly five consecutive habitats—numbered 1 through 5 from left to right—for housing exactly seven reptiles—four snakes and three lizards. Five of the reptiles are female and two are male. The reptiles must be housed as follows: No habitat houses more than two reptiles. No habitat houses both a snake and a lizard. No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard.",
    "question": "Which one of the following CANNOT be the complete housing arrangement for habitats 1 and 2?",
    "answer": "D",
    "options": [
      "A) 1: one female snake, one male snake; 2: one male snake",
      "B) 1: one male lizard; 2: one male snake",
      "C) 1: two female lizards; 2: one female snake",
      "D) 1: one male snake; 2: empty",
      "E) 1: empty; 2: one female lizard"
    ],
    "raw_logic_programs": [
      "# Declarations\nhabitats = EnumSort([1, 2, 3, 4, 5])\nreptiles = EnumSort([snake1, snake2, snake3, snake4, lizard1, lizard2, lizard3])\nhouses = Function([habitats, reptiles] -> [bool])\n\n# Constraints\nForAll([h:habitats], Count([r:reptiles], houses(h, r)) <= 2) ::: No habitat houses more than two reptiles\nForAll([h:habitats], Count([r:reptiles], houses(h, r)) >= 1) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(houses(h, snake1), Not(houses(h, lizard1)))) ::: No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard\n\n# Options\nQuestion ::: Which one of the following CANNOT be the complete housing arrangement for habitats 1 and 2?\nis_exception(is_sat(houses(1, snake1) && houses(1, snake2) && houses(2, snake3) && houses(2, snake4))) ::: A) 1: one female snake, one male snake; 2: one male snake\nis_exception(is_sat(houses(1, lizard1) && houses(2, snake1))) ::: B) 1: one male lizard; 2: one male snake\nis_exception(is_sat(houses(1, lizard1) && houses(1, lizard2) && houses(2, snake1))) ::: C) 1: two female lizards; 2: one female snake\nis_exception(is_sat(houses(1, snake1) && houses(2, empty))) ::: D) 1: one male snake; 2: empty\nis_exception(is_sat(houses(1, empty) && houses(2, lizard1))) ::: E) 1: empty; 2: one female lizard\n------"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_2_11",
    "context": "A zoo's reptile house has a straight row of exactly five consecutive habitats—numbered 1 through 5 from left to right—for housing exactly seven reptiles—four snakes and three lizards. Five of the reptiles are female and two are male. The reptiles must be housed as follows: No habitat houses more than two reptiles. No habitat houses both a snake and a lizard. No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard.",
    "question": "If habitat 3 is empty, and no snake is housed in a habitat that is immediately next to a habitat containing a snake, then which one of the following could be false?",
    "answer": "A",
    "options": [
      "A) All snakes are housed in even-numbered habitats.",
      "B) None of the lizards is male.",
      "C) No snake is alone in a habitat.",
      "D) No lizard is housed in a habitat that is immediately next to a habitat containing a lizard.",
      "E) Exactly one habitat contains exactly one reptile."
    ],
    "raw_logic_programs": [
      "# Declarations\nhabitats = EnumSort([1, 2, 3, 4, 5])\nreptiles = EnumSort([snake1, snake2, snake3, snake4, lizard1, lizard2, lizard3])\nmale = Function([reptiles] -> [bool])\nfemale = Function([reptiles] -> [bool])\nhouses = Function([habitats, reptiles] -> [bool])\n\n# Constraints\nForAll([h:habitats], Count([r:reptiles], houses(h, r)) <= 2) ::: No habitat houses more than two reptiles\nForAll([h:habitats], Implies(Count([r:reptiles], houses(h, r)) == 2, Not(And(male(r1), male(r2))))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(Count([r:reptiles], houses(h, r)) == 2, Not(And(female(r1), female(r2))))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(Count([r:reptiles], houses(h, r)) == 2, Not(And(snake(r1), lizard(r2))))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(Count([r:reptiles], houses(h, r)) == 2, Not(And(snake(r1), male(r2))))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(Count([r:reptiles], houses(h, r)) == 2, Not(And(lizard(r1), female(r2))))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(Count([r:reptiles], houses(h, r)) == 2, Not(And(male(r1), female(r2))))) ::: No habitat houses both a snake and a lizard\nForAll(["
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_2_12",
    "context": "A zoo's reptile house has a straight row of exactly five consecutive habitats—numbered 1 through 5 from left to right—for housing exactly seven reptiles—four snakes and three lizards. Five of the reptiles are female and two are male. The reptiles must be housed as follows: No habitat houses more than two reptiles. No habitat houses both a snake and a lizard. No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard.",
    "question": "If all snakes are female and each of the lizards has a habitat to itself, then which one of the following habitats CANNOT contain any snakes?",
    "answer": "C",
    "options": [
      "A) habitat 1",
      "B) habitat 2",
      "C) habitat 3",
      "D) habitat 4",
      "E) habitat 5"
    ],
    "raw_logic_programs": [
      "# Declarations\nhabitats = EnumSort([1, 2, 3, 4, 5])\nreptiles = EnumSort([snake1, snake2, snake3, snake4, lizard1, lizard2, lizard3])\nhouses = Function([habitats, reptiles] -> [bool])\n\n# Constraints\nForAll([h:habitats], Count([r:reptiles], houses(h, r)) <= 2) ::: No habitat houses more than two reptiles\nForAll([h:habitats], Implies(Count([r:reptiles], houses(h, r)) == 2, Not(And(houses(h, snake1), houses(h, snake2), houses(h, snake3), houses(h, snake4), houses(h, lizard1), houses(h, lizard2), houses(h, lizard3))))) ::: No habitat houses both a snake and a lizard\nForAll([h:habitats], Implies(houses(h, snake1), Not(And(houses(h - 1, lizard1), houses(h - 1, lizard2), houses(h - 1, lizard3))))) ::: No female snake is housed in a habitat that is immediately next to a habitat housing a male lizard\n\n# Options\nQuestion ::: If all snakes are female and each of the lizards has a habitat to itself, then which one of the following habitats CANNOT contain any snakes?\nis_exception(is_sat(ForAll([r:reptiles], houses(1, r)))) ::: A) habitat 1\nis_exception(is_sat(ForAll([r:reptiles], houses(2, r)))) ::: B) habitat 2\nis_exception(is_sat(ForAll([r:reptiles], houses(3, r)))) ::: C) habitat 3\nis_exception(is_sat(ForAll([r:reptiles], houses(4, r)))) ::: D) habitat 4\nis_exception(is_sat(ForAll([r:reptiles], houses(5, r)))) :"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_3_13",
    "context": "Exactly seven film buffs—Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, and Yow—attend a showing of classic films. Three films are shown, one directed by Fellini, one by Hitchcock, and one by Kurosawa. Each of the film buffs sees exactly one of the three films. The films are shown only once, one film at a time. The following restrictions must apply: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film. Ginnie and Reveka do not see the same film as each other. Ian and Marcos do not see the same film as each other. Viktor and Yow see the same film as each other. Lianna sees the Hitchcock film. Ginnie sees either the Fellini film or the Kurosawa film.",
    "question": "Which one of the following could be an accurate matching of film buffs to films?",
    "answer": "D",
    "options": [
      "A) Ginnie: the Hitchcock film; Ian: the Kurosawa film; Marcos: the Hitchcock film",
      "B) Ginnie: the Kurosawa film; Ian: the Fellini film; Viktor: the Fellini film",
      "C) Ian: the Hitchcock film; Reveka: the Kurosawa film; Viktor: the Fellini film",
      "D) Marcos: the Kurosawa film; Reveka: the Kurosawa film; Viktor: the Kurosawa film",
      "E) Marcos: the Hitchcock film; Reveka: the Hitchcock film; Yow: the Hitchcock film"
    ],
    "raw_logic_programs": [
      "# Declarations\nfilm_buffs = EnumSort([Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, Yow])\nfilms = EnumSort([Fellini, Hitchcock, Kurosawa])\nsees = Function([film_buffs, films] -> [bool])\n\n# Constraints\nForAll([fb:film_buffs], Count([f:films], sees(fb, f)) == 1) ::: each of the film buffs sees exactly one of the three films\nAnd(Count([fb:film_buffs], sees(fb, Hitchcock)) == 2 * Count([fb:film_buffs], sees(fb, Fellini))) ::: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film\nImplies(sees(Ginnie, f), sees(Reveka, f)) ::: Ginnie and Reveka do not see the same film as each other\nImplies(sees(Ian, f), sees(Marcos, f)) ::: Ian and Marcos do not see the same film as each other\nsees(Viktor, f) == sees(Yow, f) ::: Viktor and Yow see the same film as each other\nsees(Lianna, Hitchcock) ::: Lianna sees the Hitchcock film\nOr(sees(Ginnie, Fellini), sees(Ginnie, Kurosawa)) ::: Ginnie sees either the Fellini film or the Kurosawa film\n\n# Options\nQuestion ::: Which one of the following could be an accurate matching of film buffs to films?\nis_sat(And(sees(Ginnie, Hitchcock), sees(Ian, Kurosawa), sees(Marcos, Hitchcock))) ::: A) Ginnie: the Hitchcock film; Ian: the Kurosawa film; Marcos: the Hitchcock film\nis_sat(And(sees(Ginnie, Kurosawa), sees(Ian, Fellini), sees(Viktor, Fellini))) ::: B) Ginnie: the Kurosawa film; Ian: the Fellini film"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_3_14",
    "context": "Exactly seven film buffs—Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, and Yow—attend a showing of classic films. Three films are shown, one directed by Fellini, one by Hitchcock, and one by Kurosawa. Each of the film buffs sees exactly one of the three films. The films are shown only once, one film at a time. The following restrictions must apply: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film. Ginnie and Reveka do not see the same film as each other. Ian and Marcos do not see the same film as each other. Viktor and Yow see the same film as each other. Lianna sees the Hitchcock film. Ginnie sees either the Fellini film or the Kurosawa film.",
    "question": "Each of the following must be false EXCEPT:",
    "answer": "A",
    "options": [
      "A) Reveka is the only film buff to see the Fellini film.",
      "B) Reveka is the only film buff to see the Hitchcock film.",
      "C) Yow is the only film buff to see the Kurosawa film.",
      "D) Exactly two film buffs see the Kurosawa film.",
      "E) Exactly three film buffs see the Hitchcock film."
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Fellini, Hitchcock, Kurosawa])\nfilm_buffs = EnumSort([Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, Yow])\nsees = Function([film_buffs, films] -> [bool])\n\n# Constraints\nForAll([fb:film_buffs], Count([f:films], sees(fb, f)) == 1) ::: Each of the film buffs sees exactly one of the three films\nAnd(sees(Lianna, Hitchcock), Count([fb:film_buffs], sees(fb, Hitchcock)) == 2 * Count([fb:film_buffs], sees(fb, Fellini))) ::: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film\nImplies(sees(Ginnie, f), sees(Reveka, f)) ::: Ginnie and Reveka do not see the same film as each other\nImplies(sees(Ian, f), sees(Marcos, f)) ::: Ian and Marcos do not see the same film as each other\nsees(Viktor, f) == sees(Yow, f) ::: Viktor and Yow see the same film as each other\nOr(sees(Ginnie, Fellini), sees(Ginnie, Kurosawa)) ::: Ginnie sees either the Fellini film or the Kurosawa film\n\n# Options\nQuestion ::: Each of the following must be false EXCEPT:\nis_exception(is_sat(ForAll([fb:film_buffs], sees(fb, Fellini) == sees(Reveka, Fellini)))) ::: (A)\nis_exception(is_sat(ForAll([fb:film_buffs], sees(fb, Hitchcock) == sees(Reveka, Hitchcock)))) ::: (B)\nis_exception(is_sat(ForAll([fb:film_buffs], sees(fb, Kurosawa) == sees(Yow, Kurosawa)))) ::: (C)\nis_exception(is_sat(Count([fb"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_3_15",
    "context": "Exactly seven film buffs—Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, and Yow—attend a showing of classic films. Three films are shown, one directed by Fellini, one by Hitchcock, and one by Kurosawa. Each of the film buffs sees exactly one of the three films. The films are shown only once, one film at a time. The following restrictions must apply: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film. Ginnie and Reveka do not see the same film as each other. Ian and Marcos do not see the same film as each other. Viktor and Yow see the same film as each other. Lianna sees the Hitchcock film. Ginnie sees either the Fellini film or the Kurosawa film.",
    "question": "Which one of the following could be a complete and accurate list of the film buffs who do NOT see the Hitchcock film?",
    "answer": "C",
    "options": [
      "A) Ginnie, Marcos",
      "B) Ginnie Reveka",
      "C) Ginnie, Ian, Reveka",
      "D) Ginnie, Marcos, Yow",
      "E) Ginnie, Viktor, Yow"
    ],
    "raw_logic_programs": [
      "# Declarations\nfilm_buffs = EnumSort([Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, Yow])\nfilms = EnumSort([Fellini, Hitchcock, Kurosawa])\nsees = Function([film_buffs, films] -> [bool])\n\n# Constraints\nForAll([fb:film_buffs], Count([f:films], sees(fb, f)) == 1) ::: each of the film buffs sees exactly one of the three films\nAnd(sees(Lianna, Hitchcock), Count([fb:film_buffs], sees(fb, Hitchcock)) == 2 * Count([fb:film_buffs], sees(fb, Fellini))) ::: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film\nForAll([fb:film_buffs], Implies(fb == Ginnie, fb!= Reveka)) ::: Ginnie and Reveka do not see the same film as each other\nForAll([fb:film_buffs], Implies(fb == Ian, fb!= Marcos)) ::: Ian and Marcos do not see the same film as each other\nForAll([fb:film_buffs], Implies(fb == Viktor, fb == Yow)) ::: Viktor and Yow see the same film as each other\nOr(sees(Ginnie, Fellini), sees(Ginnie, Kurosawa)) ::: Ginnie sees either the Fellini film or the Kurosawa film\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the film buffs who do NOT see the Hitchcock film?\nis_valid(Exists([fb:film_buffs], sees(fb, Hitchcock) == false))) ::: A) Ginnie, Marcos\nis_valid(Exists([fb:film_buffs], sees(fb, Hitchcock) == false))) ::: B) Ginnie Reveka\nis_valid(Exists([fb:film_buffs], sees(fb, Hitchcock) == false))) ::: C) Ginnie, Ian, Reveka\nis"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_3_16",
    "context": "Exactly seven film buffs—Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, and Yow—attend a showing of classic films. Three films are shown, one directed by Fellini, one by Hitchcock, and one by Kurosawa. Each of the film buffs sees exactly one of the three films. The films are shown only once, one film at a time. The following restrictions must apply: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film. Ginnie and Reveka do not see the same film as each other. Ian and Marcos do not see the same film as each other. Viktor and Yow see the same film as each other. Lianna sees the Hitchcock film. Ginnie sees either the Fellini film or the Kurosawa film.",
    "question": "If exactly one film buff sees the Kurosawa film, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Viktor sees the Hitchcock film.",
      "B) Ginnie sees the Fellini film.",
      "C) Marcos sees the Fellini film.",
      "D) Ian sees the Fellini film.",
      "E) Reveka sees the Hitchcock film."
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Fellini, Hitchcock, Kurosawa])\nfilm_buffs = EnumSort([Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, Yow])\nsees = Function([film_buffs, films] -> [bool])\n\n# Constraints\nForAll([f:films], Count([fb:film_buffs], sees(fb, f)) == 1) ::: Each of the film buffs sees exactly one of the three films\nAnd(sees(Ginnie, Fellini), sees(Ginnie, Kurosawa)) ::: Ginnie sees either the Fellini film or the Kurosawa film\nAnd(sees(Lianna, Hitchcock), Not(sees(Lianna, Fellini))) ::: Lianna sees the Hitchcock film\nAnd(sees(Lianna, Hitchcock), Not(sees(Lianna, Kurosawa))) ::: Lianna sees the Hitchcock film\nAnd(sees(Viktor, Yow), sees(Yow, Viktor)) ::: Viktor and Yow see the same film as each other\nAnd(sees(Ginnie, Reveka), sees(Reveka, Ginnie)) ::: Ginnie and Reveka do not see the same film as each other\nAnd(sees(Ian, Marcos), sees(Marcos, Ian)) ::: Ian and Marcos do not see the same film as each other\nCount([fb:film_buffs], sees(fb, Hitchcock)) == 2 * Count([fb:film_buffs], sees(fb, Fellini)) ::: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film\n\n# Options\nQuestion ::: If exactly one film buff sees the Kurosawa film, then which one of the following must be true?\nis_valid(Exists([fb:film_buffs], sees(fb, Hitchcock))) ::: A) Viktor sees the Hitchcock film.\nis_valid(Exists([fb:film_buffs], sees(fb, Fellini))) ::: B) Ginnie"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_3_17",
    "context": "Exactly seven film buffs—Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, and Yow—attend a showing of classic films. Three films are shown, one directed by Fellini, one by Hitchcock, and one by Kurosawa. Each of the film buffs sees exactly one of the three films. The films are shown only once, one film at a time. The following restrictions must apply: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film. Ginnie and Reveka do not see the same film as each other. Ian and Marcos do not see the same film as each other. Viktor and Yow see the same film as each other. Lianna sees the Hitchcock film. Ginnie sees either the Fellini film or the Kurosawa film.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Ginnie sees a different film than Ian does.",
      "B) Ian sees a different film than Lianna does.",
      "C) Ian sees a different film than Viktor does.",
      "D) Ian, Lianna, and Viktor do not all see the same film.",
      "E) Ginnie, Lianna, and Marcos do not all see the same film."
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Fellini, Hitchcock, Kurosawa])\nfilm_buffs = EnumSort([Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, Yow])\nsees = Function([film_buffs, films] -> [bool])\n\n# Constraints\nForAll([fb:film_buffs], Count([f:films], sees(fb, f)) == 1) ::: each of the film buffs sees exactly one of the three films\nAnd(Count([fb:film_buffs], sees(fb, Hitchcock)) == 2 * Count([fb:film_buffs], sees(fb, Fellini))) ::: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film\nImplies(sees(Ginnie, _), Not(sees(Reveka, _))) ::: Ginnie and Reveka do not see the same film as each other\nImplies(sees(Ian, _), Not(sees(Marcos, _))) ::: Ian and Marcos do not see the same film as each other\nImplies(sees(Viktor, _), sees(Yow, _)) ::: Viktor and Yow see the same film as each other\nsees(Lianna, Hitchcock) ::: Lianna sees the Hitchcock film\nOr(sees(Ginnie, Fellini), sees(Ginnie, Kurosawa)) ::: Ginnie sees either the Fellini film or the Kurosawa film\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Implies(sees(Ginnie, _), Not(sees(Ian, _)))) ::: (A)\nis_valid(Implies(sees(Ian, _), Not(sees(Lianna, _)))) ::: (B)\nis_valid(Implies(sees(Ian, _), Not(sees(Viktor, _)))) ::: (C)\nis_valid(Implies(sees(Ian, _), Not(sees(Lianna, _)))) ::: ("
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_3_18",
    "context": "Exactly seven film buffs—Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, and Yow—attend a showing of classic films. Three films are shown, one directed by Fellini, one by Hitchcock, and one by Kurosawa. Each of the film buffs sees exactly one of the three films. The films are shown only once, one film at a time. The following restrictions must apply: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film. Ginnie and Reveka do not see the same film as each other. Ian and Marcos do not see the same film as each other. Viktor and Yow see the same film as each other. Lianna sees the Hitchcock film. Ginnie sees either the Fellini film or the Kurosawa film.",
    "question": "If Viktor sees the same film as Ginnie does, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Ginnie sees the Fellini film.",
      "B) Ian sees the Hitchcock film.",
      "C) Reveka sees the Kurosawa film.",
      "D) Viktor sees the Hitchcock film.",
      "E) Yow sees the Fellini film."
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Fellini, Hitchcock, Kurosawa])\nfilm_buffs = EnumSort([Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, Yow])\nsees = Function([film_buffs, films] -> [bool])\n\n# Constraints\nForAll([f:films], Count([fb:film_buffs], sees(fb, f)) == 1) ::: Each of the film buffs sees exactly one of the three films\nAnd(Count([fb:film_buffs], sees(fb, Hitchcock)) == 2 * Count([fb:film_buffs], sees(fb, Fellini))) ::: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film\nImplies(sees(Ginnie, _), Not(sees(Reveka, _))) ::: Ginnie and Reveka do not see the same film as each other\nImplies(sees(Ian, _), Not(sees(Marcos, _))) ::: Ian and Marcos do not see the same film as each other\nImplies(sees(Viktor, _), sees(Yow, _)) ::: Viktor and Yow see the same film as each other\nsees(Lianna, Hitchcock) ::: Lianna sees the Hitchcock film\nOr(sees(Ginnie, Fellini), sees(Ginnie, Kurosawa)) ::: Ginnie sees either the Fellini film or the Kurosawa film\n\n# Options\nQuestion ::: If Viktor sees the same film as Ginnie does, then which one of the following could be true?\nis_valid(sees(Ginnie, Fellini)) ::: (A)\nis_valid(sees(Ian, Hitchcock)) ::: (B)\nis_valid(sees(Reveka, Kurosawa)) ::: (C)\nis_valid(sees(Viktor, Hitchcock)) ::: (D)\nis_valid(sees(Yow, Fellini)) ::: (E)\n------\nProblem:\nA group of"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_3_19",
    "context": "Exactly seven film buffs—Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, and Yow—attend a showing of classic films. Three films are shown, one directed by Fellini, one by Hitchcock, and one by Kurosawa. Each of the film buffs sees exactly one of the three films. The films are shown only once, one film at a time. The following restrictions must apply: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film. Ginnie and Reveka do not see the same film as each other. Ian and Marcos do not see the same film as each other. Viktor and Yow see the same film as each other. Lianna sees the Hitchcock film. Ginnie sees either the Fellini film or the Kurosawa film.",
    "question": "Each of the following could be complete and accurate list of the film buffs who see the Fellini film EXCEPT:",
    "answer": "E",
    "options": [
      "A) Ginnie, Ian",
      "B) Ginnie, Marcos",
      "C) Ian, Reveka",
      "D) Marcos, Reveka",
      "E) Viktor, Yow"
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Fellini, Hitchcock, Kurosawa])\nfilm_buffs = EnumSort([Ginnie, Ian, Lianna, Marcos, Reveka, Viktor, Yow])\nsees = Function([film_buffs, films] -> [bool])\n\n# Constraints\nForAll([fb:film_buffs], Count([f:films], sees(fb, f)) == 1) ::: Each of the film buffs sees exactly one of the three films\nAnd(sees(Ginnie, Fellini), sees(Ginnie, Kurosawa)) ::: Ginnie sees either the Fellini film or the Kurosawa film\nAnd(sees(Lianna, Hitchcock), Not(sees(Lianna, Fellini))) ::: Lianna sees the Hitchcock film\nAnd(sees(Ginnie, f), sees(Reveka, f)) ::: Ginnie and Reveka do not see the same film as each other\nAnd(sees(Ian, f), sees(Marcos, f)) ::: Ian and Marcos do not see the same film as each other\nAnd(sees(Viktor, f), sees(Yow, f)) ::: Viktor and Yow see the same film as each other\nCount([f:films], sees(f)) == 7 ::: Exactly seven film buffs attend a showing of classic films\nCount([f:films], sees(f)) == 3 ::: Three films are shown\nCount([f:films], sees(f)) == 1 ::: The films are shown only once, one film at a time\nCount([f:films], sees(f)) == 2 ::: Exactly twice as many of the film buffs see the Hitchcock film as see the Fellini film\n\n# Options\nQuestion ::: Each of the following could be complete and accurate list of the film buffs who see the Fellini film EXCEPT:\nis_exception(is_sat(ForAll([fb:film_buffs], sees(fb, Fellini) == sees(Ginnie, Fellini) && sees(fb, Fellini) == sees"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_4_20",
    "context": "Six cars are to be arranged in a straight line, and will be numbered 1 through 6, in order, from the front of the line to the back of the line. Each car is exactly one color: two are green, two are orange, and two are purple. The arrangement of cars is restricted as follows: No car can be the same color as any car next to it in line. Either car 5 or car 6 must be purple. Car 1 cannot be orange. Car 4 cannot be green.",
    "question": "The cars in which one of the following pairs CANNOT be the same color as each other?",
    "answer": "A",
    "options": [
      "A) cars 1 and 4",
      "B) cars 1 and 5",
      "C) cars 3 and 5",
      "D) cars 3 and 6",
      "E) cars 4 and 6"
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([1, 2, 3, 4, 5, 6])\ncolors = EnumSort([green, orange, purple])\ncolor = Function([cars] -> [colors])\n\n# Constraints\nForAll([c:cars], Count([c2:cars], c2!= c, color(c) == color(c2)) == 0) ::: No car can be the same color as any car next to it in line\nOr(color(5) == purple, color(6) == purple) ::: Either car 5 or car 6 must be purple\ncolor(1)!= orange ::: Car 1 cannot be orange\ncolor(4)!= green ::: Car 4 cannot be green\n\n# Options\nQuestion ::: The cars in which one of the following pairs CANNOT be the same color as each other?\nis_exception(is_sat(color(1) == color(4))) ::: (A)\nis_exception(is_sat(color(1) == color(5))) ::: (B)\nis_exception(is_sat(color(3) == color(5))) ::: (C)\nis_exception(is_sat(color(3) == color(6))) ::: (D)\nis_exception(is_sat(color(4) == color(6))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_4_21",
    "context": "Six cars are to be arranged in a straight line, and will be numbered 1 through 6, in order, from the front of the line to the back of the line. Each car is exactly one color: two are green, two are orange, and two are purple. The arrangement of cars is restricted as follows: No car can be the same color as any car next to it in line. Either car 5 or car 6 must be purple. Car 1 cannot be orange. Car 4 cannot be green.",
    "question": "If car 2 is the same color as car 4, then which one of the following statements must be true?",
    "answer": "B",
    "options": [
      "A) Car 1 is purple.",
      "B) Car 2 is orange.",
      "C) Car 3 is green.",
      "D) Car 5 is purple.",
      "E) Car 6 is green"
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([1, 2, 3, 4, 5, 6])\ncolors = EnumSort([green, orange, purple])\ncolor = Function([cars] -> [colors])\n\n# Constraints\nForAll([c:cars], Count([c2:cars], c2!= c, color(c) == color(c2)) == 0) ::: No car can be the same color as any car next to it in line\nOr(color(5) == purple, color(6) == purple) ::: Either car 5 or car 6 must be purple\ncolor(1)!= orange ::: Car 1 cannot be orange\ncolor(4)!= green ::: Car 4 cannot be green\n\n# Options\nQuestion ::: If car 2 is the same color as car 4, then which one of the following statements must be true?\nis_sat(color(1) == purple) ::: (A)\nis_sat(color(2) == orange) ::: (B)\nis_sat(color(3) == green) ::: (C)\nis_sat(color(5) == purple) ::: (D)\nis_sat(color(6) == green) ::: (E)\n------\nProblem:\nA certain company has six employees: A, B, C, D, E, and F."
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_4_22",
    "context": "Six cars are to be arranged in a straight line, and will be numbered 1 through 6, in order, from the front of the line to the back of the line. Each car is exactly one color: two are green, two are orange, and two are purple. The arrangement of cars is restricted as follows: No car can be the same color as any car next to it in line. Either car 5 or car 6 must be purple. Car 1 cannot be orange. Car 4 cannot be green.",
    "question": "If car 4 is purple, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Car 1 is orange.",
      "B) Car 2 is green.",
      "C) Car 3 is orange.",
      "D) Car 5 is green.",
      "E) Car 6 is purple."
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([1, 2, 3, 4, 5, 6])\ncolors = EnumSort([green, orange, purple])\ncolor = Function([cars] -> [colors])\n\n# Constraints\nForAll([c:cars], Count([c2:cars], c2!= c, color(c) == color(c2)) == 0) ::: No car can be the same color as any car next to it in line\nOr(color(5) == purple, color(6) == purple) ::: Either car 5 or car 6 must be purple\ncolor(1)!= orange ::: Car 1 cannot be orange\ncolor(4)!= green ::: Car 4 cannot be green\n\n# Options\nQuestion ::: If car 4 is purple, which one of the following must be true?\nis_sat(color(1) == orange) ::: (A)\nis_sat(color(2) == green) ::: (B)\nis_sat(color(3) == orange) ::: (C)\nis_sat(color(5) == green) ::: (D)\nis_sat(color(6) == purple) ::: (E)\n------\nProblem:\nA certain company has six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_4_23",
    "context": "Six cars are to be arranged in a straight line, and will be numbered 1 through 6, in order, from the front of the line to the back of the line. Each car is exactly one color: two are green, two are orange, and two are purple. The arrangement of cars is restricted as follows: No car can be the same color as any car next to it in line. Either car 5 or car 6 must be purple. Car 1 cannot be orange. Car 4 cannot be green.",
    "question": "Which one of the following statements must be false?",
    "answer": "A",
    "options": [
      "A) Car 2 is green.",
      "B) Car 4 is orange.",
      "C) Car 5 is purple.",
      "D) Car 6 is orange.",
      "E) Car 6 is green."
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([1, 2, 3, 4, 5, 6])\ncolors = EnumSort([green, orange, purple])\ncolor = Function([cars] -> [colors])\n\n# Constraints\nForAll([c:cars], Count([c2:cars], c2!= c, color(c) == color(c2)) == 0) ::: No car can be the same color as any car next to it in line\nOr(color(5) == purple, color(6) == purple) ::: Either car 5 or car 6 must be purple\ncolor(1)!= orange ::: Car 1 cannot be orange\ncolor(4)!= green ::: Car 4 cannot be green\n\n# Options\nQuestion ::: Which one of the following statements must be false?\nis_exception(is_sat(color(2) == green)) ::: (A)\nis_exception(is_sat(color(4) == orange)) ::: (B)\nis_exception(is_sat(color(5) == purple)) ::: (C)\nis_exception(is_sat(color(6) == orange)) ::: (D)\nis_exception(is_sat(color(6) == green)) ::: (E)\n------\nProblem:\nA certain company has six employees: A, B, C, D,"
    ]
  },
  {
    "id": "ar_lsat_199812_2-G_4_24",
    "context": "Six cars are to be arranged in a straight line, and will be numbered 1 through 6, in order, from the front of the line to the back of the line. Each car is exactly one color: two are green, two are orange, and two are purple. The arrangement of cars is restricted as follows: No car can be the same color as any car next to it in line. Either car 5 or car 6 must be purple. Car 1 cannot be orange. Car 4 cannot be green.",
    "question": "If one of the two orange cars is replaced by a third green car, and if the arrangement of cars in line must conform to the same restrictions as before, then which one of the following is a complete and accurate list of the cars each of which must be green?",
    "answer": "D",
    "options": [
      "A) car 1",
      "B) car 3",
      "C) car 5",
      "D) car 1, car 3",
      "E) car l, car 3, car 5"
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([1, 2, 3, 4, 5, 6])\ncolors = EnumSort([green, orange, purple])\ncolor = Function([cars] -> [colors])\n\n# Constraints\nForAll([c:cars], Count([c2:cars], c2!= c, color(c) == color(c2)) == 0) ::: No car can be the same color as any car next to it in line\nOr(color(5) == purple, color(6) == purple) ::: Either car 5 or car 6 must be purple\ncolor(1)!= orange ::: Car 1 cannot be orange\ncolor(4)!= green ::: Car 4 cannot be green\n\n# Options\nQuestion ::: If one of the two orange cars is replaced by a third green car, and if the arrangement of cars in line must conform to the same restrictions as before, then which one of the following is a complete and accurate list of the cars each of which must be green?\nis_sat(ForAll([c:cars], color(c) == green)) ::: A) car 1\nis_sat(ForAll([c:cars], color(c) == green)) ::: B) car 3\nis_sat(ForAll([c:cars], color(c) == green)) ::: C) car 5\nis_s"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_1_1",
    "context": "Exactly eight boats—Jewel, Kashmir, Neptune, Ojibwa, Pacific, Spain, Tornado, and Valhalla—arrived at a dock. No boat arrived at the same time as any other boat. The boats arrived in an order consistent with the following conditions: Tornado arrived before Spain but after Jewel. Neptune arrived before Tornado. Kashmir arrived after Jewel but before Spain. Spain arrived before Ojibwa.",
    "question": "If Neptune arrived after Kashmir, which one of the following must be false?",
    "answer": "B",
    "options": [
      "A) Jewel was the second of the boats to arrive.",
      "B) Kashmir was the fifth of the boats to arrive.",
      "C) Neptune was the third of the boats to arrive.",
      "D) Ojibwa was the sixth of the boats to arrive.",
      "E) Spain was the seventh of the boats to arrive."
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([Jewel, Kashmir, Neptune, Ojibwa, Pacific, Spain, Tornado, Valhalla])\narrived = Function([boats] -> [int])\nForAll([b:boats], And(1 <= arrived(b), arrived(b) <= 8))\n\n# Constraints\nDistinct([b:boats], arrived(b)) ::: No boat arrived at the same time as any other boat\nAnd(arrived(Tornado) < arrived(Spain), arrived(Tornado) > arrived(Jewel)) ::: Tornado arrived before Spain but after Jewel\narrived(Neptune) < arrived(Tornado) ::: Neptune arrived before Tornado\narrived(Kashmir) > arrived(Jewel) ::: Kashmir arrived after Jewel but before Spain\narrived(Spain) < arrived(Ojibwa) ::: Spain arrived before Ojibwa\n\n# Options\nQuestion ::: If Neptune arrived after Kashmir, which one of the following must be false?\nis_exception(is_sat(arrived(Jewel) == 2)) ::: (A)\nis_exception(is_sat(arrived(Kashmir) == 5)) ::: (B)\nis_exception(is_sat(arrived"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_1_2",
    "context": "Exactly eight boats—Jewel, Kashmir, Neptune, Ojibwa, Pacific, Spain, Tornado, and Valhalla—arrived at a dock. No boat arrived at the same time as any other boat. The boats arrived in an order consistent with the following conditions: Tornado arrived before Spain but after Jewel. Neptune arrived before Tornado. Kashmir arrived after Jewel but before Spain. Spain arrived before Ojibwa.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) At least two of the boats arrived before Neptune.",
      "B) At least five of the boats arrived before Pacific.",
      "C) At least four of the boats arrived before Spain.",
      "D) At least three of the boats arrived before Tornado.",
      "E) At least two of the boats arrived before Valhalla."
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([Jewel, Kashmir, Neptune, Ojibwa, Pacific, Spain, Tornado, Valhalla])\narrived = Function([boats] -> [int])\nForAll([b:boats], And(1 <= arrived(b), arrived(b) <= 8))\n\n# Constraints\nDistinct([b:boats], arrived(b)) ::: No boat arrived at the same time as any other boat\nAnd(arrived(Tornado) < arrived(Spain), arrived(Tornado) > arrived(Jewel)) ::: Tornado arrived before Spain but after Jewel\narrived(Neptune) < arrived(Tornado) ::: Neptune arrived before Tornado\nAnd(arrived(Kashmir) > arrived(Jewel), arrived(Kashmir) < arrived(Spain)) ::: Kashmir arrived after Jewel but before Spain\narrived(Spain) < arrived(Ojibwa) ::: Spain arrived before Ojibwa\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([b:boats], arrived(b) < arrived(Neptune))) ::: A) At least two of the boats arrived before Neptune.\nis_valid(Exists([b:boats], arrived(b) < arrived(Pacific))) :"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_1_3",
    "context": "Exactly eight boats—Jewel, Kashmir, Neptune, Ojibwa, Pacific, Spain, Tornado, and Valhalla—arrived at a dock. No boat arrived at the same time as any other boat. The boats arrived in an order consistent with the following conditions: Tornado arrived before Spain but after Jewel. Neptune arrived before Tornado. Kashmir arrived after Jewel but before Spain. Spain arrived before Ojibwa.",
    "question": "Of the eight boats, what is the maximum number that could have arrived before Jewel?",
    "answer": "D",
    "options": [
      "A) none",
      "B) one",
      "C) two",
      "D) three",
      "E) four"
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([Jewel, Kashmir, Neptune, Ojibwa, Pacific, Spain, Tornado, Valhalla])\narrived = Function([boats] -> [int])\nForAll([b:boats], And(1 <= arrived(b), arrived(b) <= 8))\n\n# Constraints\nDistinct([b:boats], arrived(b)) ::: No boat arrived at the same time as any other boat\nAnd(arrived(Tornado) < arrived(Spain), arrived(Tornado) > arrived(Jewel)) ::: Tornado arrived before Spain but after Jewel\narrived(Neptune) < arrived(Tornado) ::: Neptune arrived before Tornado\nAnd(arrived(Kashmir) > arrived(Jewel), arrived(Kashmir) < arrived(Spain)) ::: Kashmir arrived after Jewel but before Spain\narrived(Spain) < arrived(Ojibwa) ::: Spain arrived before Ojibwa\n\n# Options\nQuestion ::: Of the eight boats, what is the maximum number that could have arrived before Jewel?\nis_sat(ForAll([b:boats], arrived(b) <= arrived(Jewel))) ::: A) none\nis_sat(Exists([b:boats], arrived(b) < arrived(Jewel)))"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_1_4",
    "context": "Exactly eight boats—Jewel, Kashmir, Neptune, Ojibwa, Pacific, Spain, Tornado, and Valhalla—arrived at a dock. No boat arrived at the same time as any other boat. The boats arrived in an order consistent with the following conditions: Tornado arrived before Spain but after Jewel. Neptune arrived before Tornado. Kashmir arrived after Jewel but before Spain. Spain arrived before Ojibwa.",
    "question": "Of the eight boats, if Valhalla was the second to arrive, then which one of the following CANNOT be true?",
    "answer": "E",
    "options": [
      "A) Jewel was the third to arrive.",
      "B) Jewel was the first to arrive.",
      "C) Kashmir was the third to arrive.",
      "D) Pacific was the third to arrive.",
      "E) Tornado was the third to arrive."
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([Jewel, Kashmir, Neptune, Ojibwa, Pacific, Spain, Tornado, Valhalla])\narrived = Function([boats] -> [int])\nForAll([b:boats], And(1 <= arrived(b), arrived(b) <= 8))\n\n# Constraints\nDistinct([b:boats], arrived(b)) ::: No boat arrived at the same time as any other boat\nAnd(arrived(Tornado) < arrived(Spain), arrived(Tornado) > arrived(Jewel)) ::: Tornado arrived before Spain but after Jewel\narrived(Neptune) < arrived(Tornado) ::: Neptune arrived before Tornado\nAnd(arrived(Kashmir) > arrived(Jewel), arrived(Kashmir) < arrived(Spain)) ::: Kashmir arrived after Jewel but before Spain\narrived(Spain) < arrived(Ojibwa) ::: Spain arrived before Ojibwa\n\n# Options\nQuestion ::: Of the eight boats, if Valhalla was the second to arrive, then which one of the following CANNOT be true?\nis_exception(is_sat(arrived(Jewel) == 3)) ::: A) Jewel was the third to arrive.\nis_exception(is_sat(ar"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_1_5",
    "context": "Exactly eight boats—Jewel, Kashmir, Neptune, Ojibwa, Pacific, Spain, Tornado, and Valhalla—arrived at a dock. No boat arrived at the same time as any other boat. The boats arrived in an order consistent with the following conditions: Tornado arrived before Spain but after Jewel. Neptune arrived before Tornado. Kashmir arrived after Jewel but before Spain. Spain arrived before Ojibwa.",
    "question": "If Valhalla arrived before Neptune but after Pacific, which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Tornado arrived before Valhalla.",
      "B) Kashmir arrived before Pacific.",
      "C) Ojibwa was not the last of the boats to arrive.",
      "D) Spain arrived before Valhalla.",
      "E) Spain was not the seventh of the boats to arrive."
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([Jewel, Kashmir, Neptune, Ojibwa, Pacific, Spain, Tornado, Valhalla])\narrived = Function([boats] -> [int])\nForAll([b:boats], And(1 <= arrived(b), arrived(b) <= 8))\n\n# Constraints\nDistinct([b:boats], arrived(b)) ::: No boat arrived at the same time as any other boat\nAnd(arrived(Tornado) > arrived(Jewel), arrived(Tornado) < arrived(Spain)) ::: Tornado arrived before Spain but after Jewel\narrived(Neptune) < arrived(Tornado) ::: Neptune arrived before Tornado\nAnd(arrived(Kashmir) > arrived(Jewel), arrived(Kashmir) < arrived(Spain)) ::: Kashmir arrived after Jewel but before Spain\narrived(Spain) < arrived(Ojibwa) ::: Spain arrived before Ojibwa\n\n# Options\nQuestion ::: If Valhalla arrived before Neptune but after Pacific, which one of the following could be true?\nis_exception(is_sat(arrived(Tornado) < arrived(Valhalla))) ::: (A)\nis_exception(is_sat(arrived(Kashmir) < arrived"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_1_6",
    "context": "Exactly eight boats—Jewel, Kashmir, Neptune, Ojibwa, Pacific, Spain, Tornado, and Valhalla—arrived at a dock. No boat arrived at the same time as any other boat. The boats arrived in an order consistent with the following conditions: Tornado arrived before Spain but after Jewel. Neptune arrived before Tornado. Kashmir arrived after Jewel but before Spain. Spain arrived before Ojibwa.",
    "question": "Of the boats, what are, respectively, the minimum number and the maximum number that could have arrived before Kashmir?",
    "answer": "A",
    "options": [
      "A) one, five",
      "B) two, five",
      "C) three, five",
      "D) one, six",
      "E) two, six"
    ],
    "raw_logic_programs": [
      "# Declarations\nboats = EnumSort([Jewel, Kashmir, Neptune, Ojibwa, Pacific, Spain, Tornado, Valhalla])\narrived = Function([boats] -> [int])\nForAll([b:boats], And(1 <= arrived(b), arrived(b) <= 8))\n\n# Constraints\nDistinct([b:boats], arrived(b)) ::: No boat arrived at the same time as any other boat\nAnd(arrived(Tornado) < arrived(Spain), arrived(Tornado) > arrived(Jewel)) ::: Tornado arrived before Spain but after Jewel\narrived(Neptune) < arrived(Tornado) ::: Neptune arrived before Tornado\narrived(Kashmir) > arrived(Jewel) ::: Kashmir arrived after Jewel\narrived(Kashmir) < arrived(Spain) ::: Kashmir arrived after Jewel but before Spain\narrived(Spain) < arrived(Ojibwa) ::: Spain arrived before Ojibwa\n\n# Options\nQuestion ::: Of the boats, what are, respectively, the minimum number and the maximum number that could have arrived before Kashmir?\nis_sat(ForAll([b:boats], Implies(arrived(b) < arrived(Kashmir), b!= Kashmir))) ::: A) one, five\nis_sat(ForAll([b:boats], Implies(arrived(b) < arrived(Kashmir), b!= Kashmir))) ::: B) two, five\nis_sat(ForAll([b:boats], Implies(arrived(b) < arrived(Kashmir), b!= Kashmir))) ::: C) three, five\nis_sat(ForAll([b:boats], Implies(arrived(b) < arrived(Kashmir), b!= Kashmir))) ::: D) one, six\nis_sat(ForAll([b:boats], Implies(arrived(b) < arrived(Kashmir), b!= Kashmir))) ::: E) two, six\n------"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_2_7",
    "context": "A park contains at most five of seven kinds of trees—firs, laurels, maples, oaks, pines, spruces, and yews—consistent with the following conditions: If maples are in the park, yews are not. If firs are in the park, pines are not. If yews are not in the park, then either laurels or oaks, but not both, are in the park. If it is not the case that the park contains both laurels and oaks, then it contains firs and spruces.",
    "question": "Which one of the following could be a complete and accurate list of the kinds of trees in the park?",
    "answer": "D",
    "options": [
      "A) firs, maples",
      "B) firs, laurels, oaks",
      "C) firs, laurels, pines, spruces",
      "D) firs, laurels, spruces, yews",
      "E) firs, maples, oaks, spruces, yews"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrees = EnumSort([firs, laurels, maples, oaks, pines, spruces, yews])\nin_park = Function([trees] -> [bool])\n\n# Constraints\nForAll([t:trees], Count([t:trees], in_park(t)) <= 5) ::: A park contains at most five of seven kinds of trees\nImplies(in_park(maples), Not(in_park(yews))) ::: If maples are in the park, yews are not\nImplies(in_park(firs), Not(in_park(pines))) ::: If firs are in the park, pines are not\nImplies(Not(in_park(yews)), Or(in_park(laurels), in_park(oaks))) ::: If yews are not in the park, then either laurels or oaks, but not both, are in the park\nImplies(Not(Or(in_park(laurels), in_park(oaks))), And(in_park(firs), in_park(spruces))) ::: If it is not the case that the park contains both laurels and oaks, then it contains firs and spruces\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the kinds of trees in the park?\nis_sat(And(in_park(firs), in_park(maples))) ::: A) firs, maples\nis_sat(And(in_park(firs), in_park(laurels), in_park(oaks))) ::: B) firs, laurels, oaks\nis_sat(And(in_park(firs), in_park(laurels), in_park(pines), in_park(spruces))) ::: C) firs, laurels, pines, spruces\nis_sat(And(in_park(firs), in_park(laurels), in_park(spruces), in_park(yews))) ::: D) firs, laurels, spruces, yews"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_2_8",
    "context": "A park contains at most five of seven kinds of trees—firs, laurels, maples, oaks, pines, spruces, and yews—consistent with the following conditions: If maples are in the park, yews are not. If firs are in the park, pines are not. If yews are not in the park, then either laurels or oaks, but not both, are in the park. If it is not the case that the park contains both laurels and oaks, then it contains firs and spruces.",
    "question": "If neither maples nor spruces are in the park, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Exactly four kinds of trees are in the park.",
      "B) Exactly five kinds of trees are in the park.",
      "C) Laurels are not in the park.",
      "D) Oaks are not in the park.",
      "E) Yews are not in the park."
    ],
    "raw_logic_programs": [
      "# Declarations\ntrees = EnumSort([firs, laurels, maples, oaks, pines, spruces, yews])\nin_park = Function([trees] -> [bool])\n\n# Constraints\nForAll([t:trees], Count([t:trees], in_park(t)) <= 5) ::: A park contains at most five of seven kinds of trees\nImplies(in_park(maples), Not(in_park(yews))) ::: If maples are in the park, yews are not\nImplies(in_park(firs), Not(in_park(pines))) ::: If firs are in the park, pines are not\nImplies(Not(in_park(yews)), Or(in_park(laurels), in_park(oaks))) ::: If yews are not in the park, then either laurels or oaks, but not both, are in the park\nImplies(Not(Or(in_park(laurels), in_park(oaks))), And(in_park(firs), in_park(spruces))) ::: If it is not the case that the park contains both laurels and oaks, then it contains firs and spruces\n\n# Options\nQuestion ::: If neither maples nor spruces are in the park, then which one of the following could be true?\nis_valid(Exists([t:trees], in_park(t))) ::: A) Exactly four kinds of trees are in the park.\nis_valid(Exists([t:trees], in_park(t))) ::: B) Exactly five kinds of trees are in the park.\nis_valid(Exists([t:trees], Not(in_park(t)))) ::: C) Laurels are not in the park.\nis_valid(Exists([t:trees], Not(in_park(t)))) ::: D) Oaks are not in the park.\nis_valid(Exists([t:trees], Not(in_park(t)))) ::: E) Yews are not in the park.\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_2_9",
    "context": "A park contains at most five of seven kinds of trees—firs, laurels, maples, oaks, pines, spruces, and yews—consistent with the following conditions: If maples are in the park, yews are not. If firs are in the park, pines are not. If yews are not in the park, then either laurels or oaks, but not both, are in the park. If it is not the case that the park contains both laurels and oaks, then it contains firs and spruces.",
    "question": "Which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Neither firs nor laurels are in the park.",
      "B) Neither laurels, oaks, nor yews are in the park.",
      "C) Neither laurels nor spruces are in the park.",
      "D) Neither maples nor yews are in the park.",
      "E) Neither oaks nor spruces are in the park."
    ],
    "raw_logic_programs": [
      "# Declarations\ntrees = EnumSort([firs, laurels, maples, oaks, pines, spruces, yews])\nin_park = Function([trees] -> [bool])\n\n# Constraints\nForAll([t:trees], Count([t:trees], in_park(t)) <= 5) ::: A park contains at most five of seven kinds of trees\nImplies(in_park(maples), Not(in_park(yews))) ::: If maples are in the park, yews are not\nImplies(in_park(firs), Not(in_park(pines))) ::: If firs are in the park, pines are not\nImplies(Not(in_park(yews)), Or(in_park(laurels), in_park(oaks))) ::: If yews are not in the park, then either laurels or oaks, but not both, are in the park\nImplies(Not(Or(in_park(laurels), in_park(oaks))), And(in_park(firs), in_park(spruces))) ::: If it is not the case that the park contains both laurels and oaks, then it contains firs and spruces\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(ForAll([t:trees], Not(in_park(t)))) ::: A) Neither firs nor laurels are in the park.\nis_sat(ForAll([t:trees], Not(in_park(t)))) ::: B) Neither laurels, oaks, nor yews are in the park.\nis_sat(ForAll([t:trees], Not(in_park(t)))) ::: C) Neither laurels nor spruces are in the park.\nis_sat(ForAll([t:trees], Not(in_park(t)))) ::: D) Neither maples nor yews are in the park.\nis_sat(ForAll([t:trees], Not(in_park(t)))) ::: E) Neither oaks nor spruces are in the park.\n------"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_2_10",
    "context": "A park contains at most five of seven kinds of trees—firs, laurels, maples, oaks, pines, spruces, and yews—consistent with the following conditions: If maples are in the park, yews are not. If firs are in the park, pines are not. If yews are not in the park, then either laurels or oaks, but not both, are in the park. If it is not the case that the park contains both laurels and oaks, then it contains firs and spruces.",
    "question": "If firs are not in the park, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Maples are not in the park.",
      "B) Spruces are not in the park.",
      "C) Yews are not in the park.",
      "D) Pines are in the park.",
      "E) Spruces are in the park."
    ],
    "raw_logic_programs": [
      "# Declarations\ntrees = EnumSort([firs, laurels, maples, oaks, pines, spruces, yews])\nin_park = Function([trees] -> [bool])\n\n# Constraints\nForAll([t:trees], Count([t:trees], in_park(t)) <= 5) ::: A park contains at most five of seven kinds of trees\nImplies(in_park(maples), Not(in_park(yews))) ::: If maples are in the park, yews are not\nImplies(in_park(firs), Not(in_park(pines))) ::: If firs are in the park, pines are not\nImplies(Not(in_park(yews)), Or(in_park(laurels), in_park(oaks))) ::: If yews are not in the park, then either laurels or oaks, but not both, are in the park\nImplies(Not(Or(in_park(laurels), in_park(oaks))), Or(in_park(firs), in_park(spruces))) ::: If it is not the case that the park contains both laurels and oaks, then it contains firs and spruces\n\n# Options\nQuestion ::: If firs are not in the park, then which one of the following must be true?\nis_valid(Not(in_park(maples))) ::: (A)\nis_valid(Not(in_park(spruces))) ::: (B)\nis_valid(Not(in_park(yews))) ::: (C)\nis_valid(in_park(pines)) ::: (D)\nis_valid(in_park(spruces)) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to work on exactly three projects—X, Y, and Z—in accordance with the following conditions: F and G are assigned to the same project. H and I are assigned to the same project. J and K are assigned to the same project. F and H are assigned to different projects. G and J are assigned"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_2_11",
    "context": "A park contains at most five of seven kinds of trees—firs, laurels, maples, oaks, pines, spruces, and yews—consistent with the following conditions: If maples are in the park, yews are not. If firs are in the park, pines are not. If yews are not in the park, then either laurels or oaks, but not both, are in the park. If it is not the case that the park contains both laurels and oaks, then it contains firs and spruces.",
    "question": "If pines are in the park, then which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Exactly four kinds of trees are in the park.",
      "B) Exactly five kinds of trees are in the park.",
      "C) Neither firs nor maples are in the park.",
      "D) Neither firs nor oaks are in the park.",
      "E) Neither laurels nor maples are in the park."
    ],
    "raw_logic_programs": [
      "# Declarations\ntrees = EnumSort([firs, laurels, maples, oaks, pines, spruces, yews])\nin_park = Function([trees] -> [bool])\n\n# Constraints\nForAll([t:trees], Count([t:trees], in_park(t)) <= 5) ::: A park contains at most five of seven kinds of trees\nImplies(in_park(maples), Not(in_park(yews))) ::: If maples are in the park, yews are not\nImplies(in_park(firs), Not(in_park(pines))) ::: If firs are in the park, pines are not\nImplies(Not(in_park(yews)), Or(in_park(laurels), in_park(oaks))) ::: If yews are not in the park, then either laurels or oaks, but not both, are in the park\nImplies(Not(Or(in_park(laurels), in_park(oaks))), And(in_park(firs), in_park(spruces))) ::: If it is not the case that the park contains both laurels and oaks, then it contains firs and spruces\n\n# Options\nQuestion ::: If pines are in the park, then which one of the following must be true?\nis_valid(Count([t:trees], in_park(t)) == 4)) ::: (A)\nis_valid(Count([t:trees], in_park(t)) == 5)) ::: (B)\nis_valid(Not(in_park(firs))) ::: (C)\nis_valid(Not(in_park(firs))) ::: (D)\nis_valid(Not(in_park(laurels))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_2_12",
    "context": "A park contains at most five of seven kinds of trees—firs, laurels, maples, oaks, pines, spruces, and yews—consistent with the following conditions: If maples are in the park, yews are not. If firs are in the park, pines are not. If yews are not in the park, then either laurels or oaks, but not both, are in the park. If it is not the case that the park contains both laurels and oaks, then it contains firs and spruces.",
    "question": "Each of the following could be an accurate, partial list of the kinds of trees in the park EXCEPT:",
    "answer": "E",
    "options": [
      "A) oaks, spruces",
      "B) oaks, yews",
      "C) firs, laurels, oaks",
      "D) firs, maples, oaks",
      "E) laurels, maples, oaks"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrees = EnumSort([firs, laurels, maples, oaks, pines, spruces, yews])\nin_park = Function([trees] -> [bool])\nForAll([t:trees], And(in_park(t) == true, in_park(t) == false))\n\n# Constraints\nCount([t:trees], in_park(t)) <= 5 ::: A park contains at most five of seven kinds of trees\nImplies(in_park(maples), Not(in_park(yews))) ::: If maples are in the park, yews are not\nImplies(in_park(firs), Not(in_park(pines))) ::: If firs are in the park, pines are not\nImplies(Not(in_park(yews)), Or(in_park(laurels), in_park(oaks))) ::: If yews are not in the park, then either laurels or oaks, but not both, are in the park\nImplies(Not(Or(in_park(laurels), in_park(oaks))), And(in_park(firs), in_park(spruces))) ::: If it is not the case that the park contains both laurels and oaks, then it contains firs and spruces\n\n# Options\nQuestion ::: Each of the following could be an accurate, partial list of the kinds of trees in the park EXCEPT:\nis_exception(is_sat(And(in_park(oaks), in_park(spruces)))) ::: A) oaks, spruces\nis_exception(is_sat(And(in_park(oaks), in_park(yews)))) ::: B) oaks, yews\nis_exception(is_sat(And(in_park(firs), in_park(laurels), in_park(oaks)))) ::: C) firs, laurels, oaks\nis_exception(is_sat(And(in_park(firs), in_park(maples), in_park(oaks)))) ::: D) firs, maples, o"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_3_13",
    "context": "Four married couples—Francisco and Gabrielle, Kyoko and Lee, Olivia and Peter, Raymond and Simone—will dine together at the same circular table. Each person will sit in a different one of the eight chairs evenly spaced around the table. The chairs are numbered from 1 through 8 with successively numbered chairs next to each other and chair 1 next to chair 8. Seating arrangements must meet the following conditions: No person sits next to her or his spouse. Simone sits in chair 1 and Raymond sits in chair 4. Neither Peter nor Olivia sits next to Raymond. Neither Kyoko nor Lee sits next to Gabrielle.",
    "question": "Which one of the following could be the list of people sitting in chairs 5 through 8, respectively?",
    "answer": "E",
    "options": [
      "A) Francisco, Olivia, Gabrielle, Peter",
      "B) Francisco, Gabrielle, Peter, Lee",
      "C) Olivia, Gabrielle, Peter, Kyoko",
      "D) Gabrielle, Lee, Olivia, Kyoko",
      "E) Lee, Olivia, Francisco, Kyoko"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Francisco, Gabrielle, Kyoko, Lee, Olivia, Peter, Raymond, Simone])\nchairs = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nsits = Function([people, chairs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([c:chairs], sits(p, c)) == 1) ::: each person will sit in a different one of the eight chairs\nForAll([c:chairs], Count([p:people], sits(p, c)) == 1) ::: each person will sit in a different one of the eight chairs\nForAll([p:people], Not(sits(p, c1) && sits(p, c2))) ::: no person sits next to her or his spouse\nsits(Simone, 1) ::: Simone sits in chair 1\nsits(Raymond, 4) ::: Raymond sits in chair 4\nNot(sits(Peter, 2) || sits(Peter, 6)) ::: Neither Peter nor Olivia sits next to Raymond\nNot(sits(Kyoko, 2) || sits(Kyoko, 6)) ::: Neither Kyoko nor Lee sits next to Gabrielle\n\n# Options\nQuestion ::: Which one of the following could be the list of people sitting in chairs 5 through 8, respectively?\nis_valid(Exists([p:people], And(sits(p, 5), sits(Olivia, 6), sits(Gabrielle, 7), sits(Peter, 8)))) ::: A) Francisco, Olivia, Gabrielle, Peter\nis_valid(Exists([p:people], And(sits(p, 5), sits(Gabrielle, 6), sits(Peter, 7), sits(Lee, 8)))) ::: B) Francisco, Gabrielle, Peter, Lee\nis_valid(Exists([p:people], And(sits(Olivia, 5), sits(Gabrielle"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_3_14",
    "context": "Four married couples—Francisco and Gabrielle, Kyoko and Lee, Olivia and Peter, Raymond and Simone—will dine together at the same circular table. Each person will sit in a different one of the eight chairs evenly spaced around the table. The chairs are numbered from 1 through 8 with successively numbered chairs next to each other and chair 1 next to chair 8. Seating arrangements must meet the following conditions: No person sits next to her or his spouse. Simone sits in chair 1 and Raymond sits in chair 4. Neither Peter nor Olivia sits next to Raymond. Neither Kyoko nor Lee sits next to Gabrielle.",
    "question": "Each of the following could be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) Peter and Gabrielle sit in chairs 2 and 3, respectively.",
      "B) Peter and Kyoko sit in chairs 1 and 3, respectively.",
      "C) Francisco, Kyoko, and Peter sit in chairs 5, 6, and 7, respectively.",
      "D) Gabrielle, Olivia, and Kyoko sit in chairs 5, 6, and 7, respectively.",
      "E) Gabrielle, Peter, and Lee sit in chairs 5, 6, and 7, respectively."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Francisco, Gabrielle, Kyoko, Lee, Olivia, Peter, Raymond, Simone])\nchairs = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nsits = Function([people, chairs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([c:chairs], sits(p, c)) == 1) ::: each person will sit in a different one of the eight chairs\nForAll([c:chairs], Count([p:people], sits(p, c)) == 1) ::: evenly spaced around the table\nForAll([p:people], Not(sits(p, c1) && sits(p, c2))) ::: no person sits next to her or his spouse\nsits(Simone, 1) ::: Simone sits in chair 1\nsits(Raymond, 4) ::: Raymond sits in chair 4\nNot(sits(Peter, c1) && sits(Raymond, c2)) ::: Neither Peter nor Olivia sits next to Raymond\nNot(sits(Kyoko, c1) && sits(Gabrielle, c2)) ::: Neither Kyoko nor Lee sits next to Gabrielle\n\n# Options\nQuestion ::: Each of the following could be true EXCEPT:\nis_exception(is_sat(sits(Peter, 2) && sits(Gabrielle, 3))) ::: (A)\nis_exception(is_sat(sits(Peter, 1) && sits(Kyoko, 3))) ::: (B)\nis_exception(is_sat(sits(Francisco, 5) && sits(Kyoko, 6) && sits(Peter, 7))) ::: (C)\nis_exception(is_sat(sits(Gabrielle, 5) && sits(Olivia, 6) && sits(Kyoko, 7))) ::: (D)\nis_exception(is_sat"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_3_15",
    "context": "Four married couples—Francisco and Gabrielle, Kyoko and Lee, Olivia and Peter, Raymond and Simone—will dine together at the same circular table. Each person will sit in a different one of the eight chairs evenly spaced around the table. The chairs are numbered from 1 through 8 with successively numbered chairs next to each other and chair 1 next to chair 8. Seating arrangements must meet the following conditions: No person sits next to her or his spouse. Simone sits in chair 1 and Raymond sits in chair 4. Neither Peter nor Olivia sits next to Raymond. Neither Kyoko nor Lee sits next to Gabrielle.",
    "question": "If Francisco sits in chair 2 and Olivia sits next to Simone, Gabrielle must sit next to which one of the following persons?",
    "answer": "E",
    "options": [
      "A) Francisco",
      "B) Olivia",
      "C) Lee",
      "D) Raymond",
      "E) Peter"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Francisco, Gabrielle, Kyoko, Lee, Olivia, Peter, Raymond, Simone])\nchairs = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nsits = Function([people, chairs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([c:chairs], sits(p, c)) == 1) ::: each person will sit in a different one of the eight chairs\nForAll([c:chairs], Count([p:people], sits(p, c)) == 1) ::: each person will sit in a different one of the eight chairs\nForAll([p:people], Not(sits(p, c1) && sits(p, c2))) ::: no person sits next to her or his spouse\nsits(Simone, 1) ::: Simone sits in chair 1\nsits(Raymond, 4) ::: Raymond sits in chair 4\nNot(sits(Peter, c1) && sits(Raymond, c2)) ::: Neither Peter nor Olivia sits next to Raymond\nNot(sits(Kyoko, c1) && sits(Gabrielle, c2)) ::: Neither Kyoko nor Lee sits next to Gabrielle\nsits(Francisco, 2) ::: Francisco sits in chair 2\nsits(Olivia, 6) ::: Olivia sits next to Simone\n\n# Options\nQuestion ::: If Francisco sits in chair 2 and Olivia sits next to Simone, Gabrielle must sit next to which one of the following persons?\nis_valid(Exists([p:people], sits(Gabrielle, c1) && sits(p, c2))) ::: (A)\nis_valid(Exists([p:people], sits(Gabrielle, c1) && sits(p, c2))) ::: (B)\nis_valid(Exists([p:people], sits(Gabrielle, c1) && sits(p, c2)))"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_3_16",
    "context": "Four married couples—Francisco and Gabrielle, Kyoko and Lee, Olivia and Peter, Raymond and Simone—will dine together at the same circular table. Each person will sit in a different one of the eight chairs evenly spaced around the table. The chairs are numbered from 1 through 8 with successively numbered chairs next to each other and chair 1 next to chair 8. Seating arrangements must meet the following conditions: No person sits next to her or his spouse. Simone sits in chair 1 and Raymond sits in chair 4. Neither Peter nor Olivia sits next to Raymond. Neither Kyoko nor Lee sits next to Gabrielle.",
    "question": "If neither Gabrielle nor Lee sits next to Raymond, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Francisco sits next to Raymond.",
      "B) Olivia sits next to Simone.",
      "C) Francisco sits in chair 3.",
      "D) Olivia sits in chair 6.",
      "E) Olivia sits in chair 7."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Francisco, Gabrielle, Kyoko, Lee, Olivia, Peter, Raymond, Simone])\nchairs = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nsits = Function([people, chairs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([c:chairs], sits(p, c)) == 1) ::: each person will sit in a different one of the eight chairs\nForAll([c:chairs], Count([p:people], sits(p, c)) == 1) ::: each person will sit in a different one of the eight chairs\nForAll([p:people], Not(sits(p, c1) && sits(p, c2))) ::: no person sits next to her or his spouse\nsits(Simone, 1) ::: Simone sits in chair 1\nsits(Raymond, 4) ::: Raymond sits in chair 4\nNot(sits(Peter, c1) && sits(Raymond, c2)) ::: Neither Peter nor Olivia sits next to Raymond\nNot(sits(Kyoko, c1) && sits(Gabrielle, c2)) ::: Neither Kyoko nor Lee sits next to Gabrielle\n\n# Options\nQuestion ::: If neither Gabrielle nor Lee sits next to Raymond, which one of the following must be true?\nis_valid(Exists([c:chairs], sits(Francisco, c) && sits(Raymond, c + 1))) ::: (A)\nis_valid(Exists([c:chairs], sits(Olivia, c) && sits(Simone, c + 1))) ::: (B)\nis_valid(Exists([c:chairs], sits(Francisco, 3))) ::: (C)\nis_valid(Exists([c:chairs], sits(Olivia, 6))) ::: (D)\nis_valid(Exists([c:chairs], sits(Olivia, 7))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_3_17",
    "context": "Four married couples—Francisco and Gabrielle, Kyoko and Lee, Olivia and Peter, Raymond and Simone—will dine together at the same circular table. Each person will sit in a different one of the eight chairs evenly spaced around the table. The chairs are numbered from 1 through 8 with successively numbered chairs next to each other and chair 1 next to chair 8. Seating arrangements must meet the following conditions: No person sits next to her or his spouse. Simone sits in chair 1 and Raymond sits in chair 4. Neither Peter nor Olivia sits next to Raymond. Neither Kyoko nor Lee sits next to Gabrielle.",
    "question": "If Lee sits in chair 2, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Peter sits next to Gabrielle.",
      "B) Kyoko sits next to Simone.",
      "C) Francisco sits next to Lee.",
      "D) Gabrielle sits in chair 5.",
      "E) Olivia sits in chair 6."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Francisco, Gabrielle, Kyoko, Lee, Olivia, Peter, Raymond, Simone])\nchairs = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nsits = Function([people, chairs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([c:chairs], sits(p, c)) == 1) ::: each person will sit in a different one of the eight chairs\nForAll([c:chairs], Count([p:people], sits(p, c)) == 1) ::: each person will sit in a different one of the eight chairs\nForAll([p:people], Not(sits(p, c1) && sits(p, c2))) ::: no person sits next to her or his spouse\nsits(Simone, 1) ::: Simone sits in chair 1\nsits(Raymond, 4) ::: Raymond sits in chair 4\nNot(sits(Peter, c1) && sits(Raymond, c2)) ::: Neither Peter nor Olivia sits next to Raymond\nNot(sits(Kyoko, c1) && sits(Gabrielle, c2)) ::: Neither Kyoko nor Lee sits next to Gabrielle\nsits(Lee, 2) ::: Lee sits in chair 2\n\n# Options\nQuestion ::: If Lee sits in chair 2, which one of the following must be true?\nis_valid(Exists([c:chairs], sits(Peter, c) && sits(Gabrielle, c + 1))) ::: (A)\nis_valid(Exists([c:chairs], sits(Kyoko, c) && sits(Simone, c + 1))) ::: (B)\nis_valid(Exists([c:chairs], sits(Francisco, c) && sits(Lee, c + 1))) ::: (C)\nis_valid(Exists([c:chairs], sits(Gabrielle, 5))) ::: (D)\nis_"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_3_18",
    "context": "Four married couples—Francisco and Gabrielle, Kyoko and Lee, Olivia and Peter, Raymond and Simone—will dine together at the same circular table. Each person will sit in a different one of the eight chairs evenly spaced around the table. The chairs are numbered from 1 through 8 with successively numbered chairs next to each other and chair 1 next to chair 8. Seating arrangements must meet the following conditions: No person sits next to her or his spouse. Simone sits in chair 1 and Raymond sits in chair 4. Neither Peter nor Olivia sits next to Raymond. Neither Kyoko nor Lee sits next to Gabrielle.",
    "question": "If both Francisco and Gabrielle sit next to Raymond, which one of the following is a complete and accurate list of people any one of whom could sit next to Olivia?",
    "answer": "E",
    "options": [
      "A) Francisco, Gabrielle, Kyoko",
      "B) Lee, Simone, Kyoko",
      "C) Lee, Gabrielle, Kyoko",
      "D) Francisco, Lee, Gabrielle, Kyoko",
      "E) Lee, Simone, Gabrielle, Kyoko"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Francisco, Gabrielle, Kyoko, Lee, Olivia, Peter, Raymond, Simone])\nchairs = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nsits = Function([people, chairs] -> [bool])\n\n# Constraints\nForAll([p:people], Count([c:chairs], sits(p, c)) == 1) ::: each person will sit in a different one of the eight chairs\nForAll([c:chairs], Count([p:people], sits(p, c)) == 1) ::: each person will sit in a different one of the eight chairs\nForAll([p:people], Not(sits(p, c) == sits(p, c + 1))) ::: successively numbered chairs next to each other\nForAll([p:people], Not(sits(p, c) == sits(p, c - 1))) ::: successively numbered chairs next to each other\nsits(Simone, 1) ::: Simone sits in chair 1\nsits(Raymond, 4) ::: Raymond sits in chair 4\nForAll([p:people], Implies(p == Simone, Not(sits(p, c) == sits(Raymond, c)))) ::: No person sits next to her or his spouse\nForAll([p:people], Implies(p == Raymond, Not(sits(p, c) == sits(Simone, c)))) ::: No person sits next to her or his spouse\nForAll([p:people], Implies(p == Peter, Not(sits(p, c) == sits(Raymond, c)))) ::: Neither Peter nor Olivia sits next to Raymond\nForAll([p:people], Implies(p == Olivia, Not(sits(p, c) == sits(Raymond, c)))) ::: Neither Peter nor Olivia sits next to Raymond\nForAll([p:people], Implies(p == Kyoko, Not(sits(p, c) == sits(Gabrielle, c))))"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_4_19",
    "context": "Zeno's Unfinished Furniture sells exactly five types of furniture—footstools, hutches, sideboards, tables, and vanities. Irene buys just four items, each of a different type, and each made entirely of one kind of wood—maple, oak, pine, or rosewood. The following conditions govern Irene's purchases: Any vanity she buys is maple. Any rosewood item she buys is a sideboard. If she buys a vanity, she does not buy a footstool. If Irene buys a footstool, she also buys a table made of the same wood. Irene does not buy an oak table. Exactly two of the items she buys are made of the same kind of wood as each other.",
    "question": "Which one of the following could be an accurate list of the items Irene buys?",
    "answer": "E",
    "options": [
      "A) Maple footstool, maple hutch, rosewood sideboard, maple table",
      "B) oak hutch, rosewood sideboard, pine table, oak vanity",
      "C) rosewood hutch, maple sideboard, oak table, maple vanity",
      "D) pine footstool, rosewood sideboard, pine table, maple vanity",
      "E) maple footstool, pine hutch, oak sideboard, maple table"
    ],
    "raw_logic_programs": [
      "# Declarations\nfurniture = EnumSort([footstools, hutches, sideboards, tables, vanities])\nwoods = EnumSort([maple, oak, pine, rosewood])\nbought = Function([furniture] -> [woods])\n\n# Constraints\nForAll([f:furniture], Count([w:woods], bought(f) == w) == 1) ::: each item is made entirely of one kind of wood\nAnd(bought(vanities) == maple, bought(sideboards) == rosewood) ::: Any vanity she buys is maple. Any rosewood item she buys is a sideboard.\nAnd(bought(vanities) == maple, bought(footstools)!= maple) ::: If she buys a vanity, she does not buy a footstool.\nAnd(bought(footstools) == maple, bought(tables) == maple) ::: If Irene buys a footstool, she also buys a table made of the same wood.\nbought(tables)!= oak ::: Irene does not buy an oak table.\nCount([w:woods], Count([f:furniture], bought(f) == w) == 2) == 2 ::: Exactly two of the items she buys are made of the same kind of wood as each other.\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the items Irene buys?\nis_valid(Exists([f:furniture], bought(f) == maple) & Exists([f:furniture], bought(f) == oak) & Exists([f:furniture], bought(f) == pine) & Exists([f:furniture], bought(f) == rosewood)) ::: A) Maple footstool, maple hutch, rosewood sideboard, maple table\nis_valid(Exists([f:furniture], bought(f) == maple) & Exists([f:furniture], bought(f) == oak) & Exists([f:furniture], bought(f) == pine) & Exists([f:furniture], bought(f)"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_4_20",
    "context": "Zeno's Unfinished Furniture sells exactly five types of furniture—footstools, hutches, sideboards, tables, and vanities. Irene buys just four items, each of a different type, and each made entirely of one kind of wood—maple, oak, pine, or rosewood. The following conditions govern Irene's purchases: Any vanity she buys is maple. Any rosewood item she buys is a sideboard. If she buys a vanity, she does not buy a footstool. If Irene buys a footstool, she also buys a table made of the same wood. Irene does not buy an oak table. Exactly two of the items she buys are made of the same kind of wood as each other.",
    "question": "If Irene buys one item made of rosewood and two items made of maple, then which one of the following pairs could be two of the items she buys?",
    "answer": "C",
    "options": [
      "A) a rosewood sideboard and an oak footstool",
      "B) an oak hutch and a pine sideboard",
      "C) an oak hutch and a maple table",
      "D) a maple sideboard and a maple vanity",
      "E) a maple hutch and a maple table"
    ],
    "raw_logic_programs": [
      "# Declarations\nitems = EnumSort([footstools, hutches, sideboards, tables, vanities])\nwoods = EnumSort([maple, oak, pine, rosewood])\nbought = Function([items, woods] -> [bool])\n\n# Constraints\nForAll([i:items], Count([w:woods], bought(i, w)) == 1) ::: Irene buys just four items, each of a different type, and each made entirely of one kind of wood\nAnd(bought(vanities, maple), Not(bought(footstools, maple))) ::: Any vanity she buys is maple. If she buys a vanity, she does not buy a footstool\nAnd(bought(sideboards, rosewood), Not(bought(footstools, rosewood))) ::: Any rosewood item she buys is a sideboard\nAnd(bought(footstools, maple), bought(tables, maple)) ::: If Irene buys a footstool, she also buys a table made of the same wood\nNot(bought(tables, oak)) ::: Irene does not buy an oak table\nCount([w:woods], Count([i:items], bought(i, w)) == 2) == 2 ::: Exactly two of the items she buys are made of the same kind of wood as each other\n\n# Options\nQuestion ::: If Irene buys one item made of rosewood and two items made of maple, then which one of the following pairs could be two of the items she buys?\nis_exception(is_sat(And(bought(sideboards, rosewood), bought(footstools, oak)))) ::: (A)\nis_exception(is_sat(And(bought(hutches, oak), bought(sideboards, pine)))) ::: (B)\nis_exception(is_sat(And(bought(hutches, oak), bought(tables, maple)))) ::: (C)\nis_exception(is_sat(And(bought(sideboards, maple), bought(vanities, maple)))) ::: (D)\nis_exception(is_sat(And"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_4_21",
    "context": "Zeno's Unfinished Furniture sells exactly five types of furniture—footstools, hutches, sideboards, tables, and vanities. Irene buys just four items, each of a different type, and each made entirely of one kind of wood—maple, oak, pine, or rosewood. The following conditions govern Irene's purchases: Any vanity she buys is maple. Any rosewood item she buys is a sideboard. If she buys a vanity, she does not buy a footstool. If Irene buys a footstool, she also buys a table made of the same wood. Irene does not buy an oak table. Exactly two of the items she buys are made of the same kind of wood as each other.",
    "question": "Which one of the following is a complete and accurate list of all the woods any footstool that Irene buys could be made of?",
    "answer": "B",
    "options": [
      "A) maple, oak",
      "B) maple, pine",
      "C) maple, rosewood",
      "D) maple, oak, pine",
      "E) maple, oak, pine, rosewood"
    ],
    "raw_logic_programs": [
      "# Declarations\nfurniture = EnumSort([footstools, hutches, sideboards, tables, vanities])\nwoods = EnumSort([maple, oak, pine, rosewood])\nbought = Function([furniture] -> [woods])\n\n# Constraints\nForAll([f:furniture], Count([w:woods], bought(f) == w) == 1) ::: each item is made entirely of one kind of wood\nAnd(bought(vanities) == maple, bought(rosewood) == sideboards) ::: Any vanity she buys is maple. Any rosewood item she buys is a sideboard.\nAnd(bought(vanities), Not(bought(footstools))) ::: If she buys a vanity, she does not buy a footstool\nAnd(bought(footstools), bought(tables)) ::: If Irene buys a footstool, she also buys a table made of the same wood\nNot(bought(tables) == oak) ::: Irene does not buy an oak table\nCount([w:woods], Count([f:furniture], bought(f) == w) == 2) == 2 ::: Exactly two of the items she buys are made of the same kind of wood as each other\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of all the woods any footstool that Irene buys could be made of?\nis_valid(Exists([w:woods], bought(footstools) == w)) ::: A) maple, oak\nis_valid(Exists([w:woods], bought(footstools) == w)) ::: B) maple, pine\nis_valid(Exists([w:woods], bought(footstools) == w)) ::: C) maple, rosewood\nis_valid(Exists([w:woods], bought(footstools) == w)) ::: D) maple, oak, pine\nis_valid(Exists([w:woods], bought(footstools) == w)) ::: E) maple, oak, pine, rosewood\n------\nProblem:\nA certain company has exactly five employees"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_4_22",
    "context": "Zeno's Unfinished Furniture sells exactly five types of furniture—footstools, hutches, sideboards, tables, and vanities. Irene buys just four items, each of a different type, and each made entirely of one kind of wood—maple, oak, pine, or rosewood. The following conditions govern Irene's purchases: Any vanity she buys is maple. Any rosewood item she buys is a sideboard. If she buys a vanity, she does not buy a footstool. If Irene buys a footstool, she also buys a table made of the same wood. Irene does not buy an oak table. Exactly two of the items she buys are made of the same kind of wood as each other.",
    "question": "Suppose Irene buys a footstool. Then which one of the following is a complete and accurate list of items any one of which she could buy in maple?",
    "answer": "B",
    "options": [
      "A) footstool, hutch, sideboard, table, vanity",
      "B) footstool, hutch, sideboard, table",
      "C) footstool, hutch, sideboard",
      "D) footstool, hutch",
      "E) footstool"
    ],
    "raw_logic_programs": [
      "# Declarations\nitems = EnumSort([footstool, hutch, sideboard, table, vanity])\nwoods = EnumSort([maple, oak, pine, rosewood])\nbought = Function([items, woods] -> [bool])\n\n# Constraints\nForAll([i:items], Count([w:woods], bought(i, w)) == 1) ::: each item is made entirely of one kind of wood\nAnd(bought(vanity, maple), bought(rosewood, sideboard)) ::: Any vanity she buys is maple. Any rosewood item she buys is a sideboard.\nAnd(bought(vanity, maple), Not(bought(footstool, maple))) ::: If she buys a vanity, she does not buy a footstool.\nAnd(bought(footstool, maple), bought(table, maple)) ::: If Irene buys a footstool, she also buys a table made of the same wood.\nNot(bought(table, oak)) ::: Irene does not buy an oak table.\nAnd(bought(i1:items, w1:woods), bought(i2:items, w2:woods), i1!= i2, w1 == w2) ::: Exactly two of the items she buys are made of the same kind of wood as each other.\n\n# Options\nQuestion ::: Suppose Irene buys a footstool. Then which one of the following is a complete and accurate list of items any one of which she could buy in maple?\nis_valid(Exists([i:items], bought(i, maple) && i == footstool)) ::: A) footstool, hutch, sideboard, table, vanity\nis_valid(Exists([i:items], bought(i, maple) && i == footstool && i == hutch)) ::: B) footstool, hutch, sideboard, table\nis_valid(Exists([i:items], bought(i, maple) && i == footstool && i == hutch && i == sideboard)) ::: C) footstool, hutch, sideboard\nis_valid(Exists([i:items], bought"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_4_23",
    "context": "Zeno's Unfinished Furniture sells exactly five types of furniture—footstools, hutches, sideboards, tables, and vanities. Irene buys just four items, each of a different type, and each made entirely of one kind of wood—maple, oak, pine, or rosewood. The following conditions govern Irene's purchases: Any vanity she buys is maple. Any rosewood item she buys is a sideboard. If she buys a vanity, she does not buy a footstool. If Irene buys a footstool, she also buys a table made of the same wood. Irene does not buy an oak table. Exactly two of the items she buys are made of the same kind of wood as each other.",
    "question": "Which one of the following CANNOT be the two items Irene buys that are made of the same wood as each other?",
    "answer": "A",
    "options": [
      "A) footstool, hutch",
      "B) hutch, sideboard",
      "C) hutch, table",
      "D) sideboard, vanity",
      "E) table, vanity"
    ],
    "raw_logic_programs": [
      "# Declarations\nfurniture = EnumSort([footstools, hutches, sideboards, tables, vanities])\nwood = EnumSort([maple, oak, pine, rosewood])\nbought = Function([furniture] -> [wood])\n\n# Constraints\nForAll([f:furniture], Count([w:wood], bought(f) == w) == 1) ::: each item is made entirely of one kind of wood\nAnd(bought(vanities) == maple, bought(sideboards) == rosewood) ::: Any vanity she buys is maple. Any rosewood item she buys is a sideboard.\nAnd(bought(vanities), Not(bought(footstools))) ::: If she buys a vanity, she does not buy a footstool\nAnd(bought(footstools), bought(tables)) ::: If Irene buys a footstool, she also buys a table made of the same wood\nNot(bought(tables) == oak) ::: Irene does not buy an oak table\nCount([f:furniture], Count([w:wood], bought(f) == w) == 2) == 2 ::: Exactly two of the items she buys are made of the same kind of wood as each other\n\n# Options\nQuestion ::: Which one of the following CANNOT be the two items Irene buys that are made of the same wood as each other?\nis_exception(is_sat(bought(footstools) == bought(hutches))) ::: (A)\nis_exception(is_sat(bought(hutches) == bought(sideboards))) ::: (B)\nis_exception(is_sat(bought(hutches) == bought(tables))) ::: (C)\nis_exception(is_sat(bought(sideboards) == bought(vanities))) ::: (D)\nis_exception(is_sat(bought(tables) == bought(vanities))) ::: (E)\n------\nProblem:\nA certain company has exactly five employees—Fred, Gina, Hank, Iris, and Jill—who work in the accounting, human resources, information"
    ]
  },
  {
    "id": "ar_lsat_199902_2-G_4_24",
    "context": "Zeno's Unfinished Furniture sells exactly five types of furniture—footstools, hutches, sideboards, tables, and vanities. Irene buys just four items, each of a different type, and each made entirely of one kind of wood—maple, oak, pine, or rosewood. The following conditions govern Irene's purchases: Any vanity she buys is maple. Any rosewood item she buys is a sideboard. If she buys a vanity, she does not buy a footstool. If Irene buys a footstool, she also buys a table made of the same wood. Irene does not buy an oak table. Exactly two of the items she buys are made of the same kind of wood as each other.",
    "question": "If Irene does not buy an item made of maple, then each of the following must be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) Irene buys a footstool.",
      "B) Irene buys a pine hutch.",
      "C) Irene buys a rosewood sideboard.",
      "D) Irene buys exactly one item made of oak.",
      "E) Irene buys exactly two items made of pine."
    ],
    "raw_logic_programs": [
      "# Declarations\nfurniture = EnumSort([footstools, hutches, sideboards, tables, vanities])\nwood = EnumSort([maple, oak, pine, rosewood])\nbought = Function([furniture, wood] -> [bool])\n\n# Constraints\nForAll([f:furniture], Count([w:wood], bought(f, w)) == 1) ::: Irene buys just four items, each of a different type, and each made entirely of one kind of wood\nAnd(bought(vanities, maple), bought(sideboards, rosewood)) ::: Any vanity she buys is maple. Any rosewood item she buys is a sideboard.\nAnd(bought(vanities, maple), Not(bought(footstools, maple))) ::: If she buys a vanity, she does not buy a footstool.\nAnd(bought(footstools, maple), bought(tables, maple)) ::: If Irene buys a footstool, she also buys a table made of the same wood.\nNot(bought(tables, oak)) ::: Irene does not buy an oak table.\nAnd(bought(f:furniture, w:wood), bought(f:furniture, w:wood)) ::: Exactly two of the items she buys are made of the same kind of wood as each other.\n\n# Options\nQuestion ::: If Irene does not buy an item made of maple, then each of the following must be true EXCEPT:\nis_exception(is_sat(bought(footstools, maple))) ::: (A)\nis_exception(is_sat(bought(hutches, pine))) ::: (B)\nis_exception(is_sat(bought(sideboards, rosewood))) ::: (C)\nis_exception(is_sat(bought(tables, oak))) ::: (D)\nis_exception(is_sat(bought(footstools, pine), bought(hutches, pine))) ::: (E)\n------\nProblem:\nThe following is a list of the six members of the board of directors of a"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_1_1",
    "context": "Six racehorses—K, L, M, N, O, and P—will be assigned to six positions arranged in a straight line and numbered consecutively 1 through 6. The horses are assigned to the positions, one horse per position, according to the following conditions: K and L must be assigned to positions that are separated from each other by exactly one position. K and N cannot be assigned to positions that are next to each other. N must be assigned to a higher-numbered position than M. P must be assigned to position 3.",
    "question": "Which one of the following lists an acceptable assignment of horses to positions 1 though 6, respectively?",
    "answer": "B",
    "options": [
      "A) K, L, P, M, N, O",
      "B) M, K, P, L, N, O",
      "C) M, N, K, P, L, O",
      "D) N, O, P, K, M, L",
      "E) O, M, P, L, N, K"
    ],
    "raw_logic_programs": [
      "# Declarations\nhorses = EnumSort([K, L, M, N, O, P])\npositions = EnumSort([1, 2, 3, 4, 5, 6])\nassigned = Function([horses, positions] -> [bool])\n\n# Constraints\nForAll([h:horses], Count([p:positions], assigned(h, p)) == 1) ::: one horse per position\nAnd(assigned(K, p), assigned(L, q), p!= q, p + 1 == q) ::: K and L must be assigned to positions that are separated from each other by exactly one position\nAnd(assigned(K, p), assigned(N, q), p!= q, p + 1!= q) ::: K and N cannot be assigned to positions that are next to each other\nAnd(assigned(N, p), assigned(M, q), p > q) ::: N must be assigned to a higher-numbered position than M\nassigned(P, 3) ::: P must be assigned to position 3\n\n# Options\nQuestion ::: Which one of the following lists an acceptable assignment of horses to positions 1 though 6, respectively?\nis_sat(And(assigned(K, 1), assigned(L, 2), assigned(P, 3), assigned(M, 4), assigned(N, 5), assigned(O, 6))) ::: A) K, L, P, M, N, O\nis_sat(And(assigned(M, 1), assigned(K, 2), assigned(P, 3), assigned(L, 4), assigned(N, 5), assigned(O, 6))) ::: B) M, K, P, L, N, O\nis_sat(And(assigned(M, 1), assigned(N, 2), assigned(K, 3), assigned(P, 4), assigned(L, 5), assigned(O, 6))) ::: C) M, N, K, P, L, O\nis_sat(And(assigned(N, 1), assigned(O, 2), assigned(P, 3), assigned(K, 4),"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_1_2",
    "context": "Six racehorses—K, L, M, N, O, and P—will be assigned to six positions arranged in a straight line and numbered consecutively 1 through 6. The horses are assigned to the positions, one horse per position, according to the following conditions: K and L must be assigned to positions that are separated from each other by exactly one position. K and N cannot be assigned to positions that are next to each other. N must be assigned to a higher-numbered position than M. P must be assigned to position 3.",
    "question": "Which one of the following is a complete and accurate list of the positions any one of which can be the position to which K is assigned?",
    "answer": "E",
    "options": [
      "A) 1, 2",
      "B) 2, 3",
      "C) 2, 4",
      "D) 2, 4, 5",
      "E) 2, 4, 6"
    ],
    "raw_logic_programs": [
      "# Declarations\nhorses = EnumSort([K, L, M, N, O, P])\npositions = EnumSort([1, 2, 3, 4, 5, 6])\nassigned = Function([horses, positions] -> [bool])\n\n# Constraints\nForAll([h:horses], Count([p:positions], assigned(h, p)) == 1) ::: one horse per position\nAnd(assigned(K, p1), assigned(L, p2), p1!= p2, p1 + 1 == p2) ::: K and L must be assigned to positions that are separated from each other by exactly one position\nAnd(assigned(K, p1), assigned(N, p2), p1!= p2, p1 + 1!= p2) ::: K and N cannot be assigned to positions that are next to each other\nAnd(assigned(N, p1), assigned(M, p2), p1 > p2) ::: N must be assigned to a higher-numbered position than M\nassigned(P, 3) ::: P must be assigned to position 3\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the positions any one of which can be the position to which K is assigned?\nis_sat(ForAll([p:positions], assigned(K, p) == (p == 1) || (p == 2))) ::: (A)\nis_sat(ForAll([p:positions], assigned(K, p) == (p == 2) || (p == 3))) ::: (B)\nis_sat(ForAll([p:positions], assigned(K, p) == (p == 2) || (p == 4))) ::: (C)\nis_sat(ForAll([p:positions], assigned(K, p) == (p == 2) || (p == 4) || (p == 5))) ::: (D)\nis_sat(ForAll([p:positions], assigned(K, p) == (p == 2) || (p == 4) || (p == 6))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_1_3",
    "context": "Six racehorses—K, L, M, N, O, and P—will be assigned to six positions arranged in a straight line and numbered consecutively 1 through 6. The horses are assigned to the positions, one horse per position, according to the following conditions: K and L must be assigned to positions that are separated from each other by exactly one position. K and N cannot be assigned to positions that are next to each other. N must be assigned to a higher-numbered position than M. P must be assigned to position 3.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "E",
    "options": [
      "A) K is assigned to position 2.",
      "B) L is assigned to position 2.",
      "C) M is assigned to position 1.",
      "D) M is assigned to position 5.",
      "E) O is assigned to position 2."
    ],
    "raw_logic_programs": [
      "# Declarations\nhorses = EnumSort([K, L, M, N, O, P])\npositions = EnumSort([1, 2, 3, 4, 5, 6])\nassigned = Function([horses, positions] -> [bool])\n\n# Constraints\nForAll([h:horses], Count([p:positions], assigned(h, p)) == 1) ::: one horse per position\nAnd(assigned(K, p1), assigned(L, p2), p1!= p2, p1 + 1 == p2) ::: K and L must be assigned to positions that are separated from each other by exactly one position\nNot(And(assigned(K, p1), assigned(N, p2), p1 == p2 + 1)) ::: K and N cannot be assigned to positions that are next to each other\nAnd(assigned(N, p1), assigned(M, p2), p1 > p2) ::: N must be assigned to a higher-numbered position than M\nassigned(P, 3) ::: P must be assigned to position 3\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(assigned(K, 2))) ::: (A)\nis_exception(is_sat(assigned(L, 2))) ::: (B)\nis_exception(is_sat(assigned(M, 1))) ::: (C)\nis_exception(is_sat(assigned(M, 5))) ::: (D)\nis_exception(is_sat(assigned(O, 2))) ::: (E)\n------\nProblem:\nA certain company has six employees—F, G, H, I, J, and K—who work in either or both of two departments, sales and research. The following conditions apply: F and G work in the same department. H and I work in different departments. J works in research. K works in sales.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) F works in sales.\n(B) G works in sales.\n(C) H works in"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_1_4",
    "context": "Six racehorses—K, L, M, N, O, and P—will be assigned to six positions arranged in a straight line and numbered consecutively 1 through 6. The horses are assigned to the positions, one horse per position, according to the following conditions: K and L must be assigned to positions that are separated from each other by exactly one position. K and N cannot be assigned to positions that are next to each other. N must be assigned to a higher-numbered position than M. P must be assigned to position 3.",
    "question": "Which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Either K or else L is assigned to position 2.",
      "B) Either K or else L is assigned to position 4.",
      "C) Either M or else N is assigned to position 2.",
      "D) Either M or else N is assigned to position 5.",
      "E) Either M or else O is assigned to position 6."
    ],
    "raw_logic_programs": [
      "# Declarations\nhorses = EnumSort([K, L, M, N, O, P])\npositions = EnumSort([1, 2, 3, 4, 5, 6])\nassigned = Function([horses, positions] -> [bool])\n\n# Constraints\nForAll([h:horses], Count([p:positions], assigned(h, p)) == 1) ::: one horse per position\nAnd(assigned(K, p), assigned(L, q), p!= q, p + 1 == q) ::: K and L must be assigned to positions that are separated from each other by exactly one position\nAnd(assigned(K, p), assigned(N, q), p!= q, p + 1!= q) ::: K and N cannot be assigned to positions that are next to each other\nAnd(assigned(N, p), assigned(M, q), p > q) ::: N must be assigned to a higher-numbered position than M\nassigned(P, 3) ::: P must be assigned to position 3\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([p:positions], assigned(K, p) && p == 2)) ::: (A)\nis_valid(Exists([p:positions], assigned(L, p) && p == 2)) ::: (B)\nis_valid(Exists([p:positions], assigned(M, p) && p == 2)) ::: (C)\nis_valid(Exists([p:positions], assigned(M, p) && p == 5)) ::: (D)\nis_valid(Exists([p:positions], assigned(O, p) && p == 6)) ::: (E)\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The managers are seated in a row of six chairs, one chair per manager, in the following order: The manager of department A is seated in chair 1. The manager of department B is seated in chair 2. The manager of department C is seated in chair 3. The"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_1_5",
    "context": "Six racehorses—K, L, M, N, O, and P—will be assigned to six positions arranged in a straight line and numbered consecutively 1 through 6. The horses are assigned to the positions, one horse per position, according to the following conditions: K and L must be assigned to positions that are separated from each other by exactly one position. K and N cannot be assigned to positions that are next to each other. N must be assigned to a higher-numbered position than M. P must be assigned to position 3.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "C",
    "options": [
      "A) L and N are assigned to positions that are next to each other.",
      "B) M and K are assigned to positions that are next to each other.",
      "C) M and O are assigned to positions that are next to each other.",
      "D) L and N are assigned to positions that are separated from each other by exactly one position.",
      "E) M and P are assigned to positions that are separated from each other by exactly one position."
    ],
    "raw_logic_programs": [
      "# Declarations\nhorses = EnumSort([K, L, M, N, O, P])\npositions = EnumSort([1, 2, 3, 4, 5, 6])\nassigned = Function([horses, positions] -> [bool])\n\n# Constraints\nForAll([h:horses], Count([p:positions], assigned(h, p)) == 1) ::: one horse per position\nAnd(assigned(K, p1), assigned(L, p2), p1!= p2, p1 + 1 == p2) ::: K and L must be assigned to positions that are separated from each other by exactly one position\nAnd(assigned(K, p1), assigned(N, p2), p1!= p2, p1 + 1!= p2) ::: K and N cannot be assigned to positions that are next to each other\nAnd(assigned(N, p1), assigned(M, p2), p1 > p2) ::: N must be assigned to a higher-numbered position than M\nassigned(P, 3) ::: P must be assigned to position 3\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(And(assigned(L, p1), assigned(N, p2), p1!= p2, p1 + 1 == p2))) ::: (A)\nis_exception(is_sat(And(assigned(M, p1), assigned(K, p2), p1!= p2, p1 + 1 == p2))) ::: (B)\nis_exception(is_sat(And(assigned(M, p1), assigned(O, p2), p1!= p2, p1 + 1 == p2))) ::: (C)\nis_exception(is_sat(And(assigned(L, p1), assigned(N, p2), p1!= p2, p1 + 1!= p2))) ::: (D)\nis_exception(is_sat(And(assigned(M, p1), assigned(P, p2), p1!= p2, p1 + 1!= p"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_2_6",
    "context": "To prepare for fieldwork, exactly four different researchers—a geologist, a historian, a linguist, and a paleontologist—will learn at least one and at most three of four languages—Rundi, Swahili, Tigrinya, and Yoruba. They must learn the languages according to the following specifications: Exactly one researcher learns Rundi. Exactly two researchers learn Swahili. Exactly two researchers learn Tigrinya. Exactly three researchers learn Yoruba. Any language learned by the linguist or paleontologist is not learned by the geologist. Any language learned by the geologist is learned by the historian.",
    "question": "Which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) The linguist learns three languages—Rundi, Swahili, and Tigrinya.",
      "B) The linguist learns three languages—Swahili, Tigrinya, and Yoruba.",
      "C) The historian learns three languages—Rundi, Swahili, and Tigrinya.",
      "D) The historian learns three languages—Swahili, Tigrinya, and Yoruba.",
      "E) The paleontologist learns three languages—Rundi, Swahili, and Tigrinya."
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([geologist, historian, linguist, paleontologist])\nlanguages = EnumSort([Rundi, Swahili, Tigrinya, Yoruba])\nlearns = Function([researchers, languages] -> [bool])\n\n# Constraints\nForAll([r:researchers], Count([l:languages], learns(r, l)) >= 1) ::: each researcher learns at least one language\nForAll([r:researchers], Count([l:languages], learns(r, l)) <= 3) ::: each researcher learns at most three languages\nCount([r:researchers], learns(r, Rundi)) == 1 ::: Exactly one researcher learns Rundi\nCount([r:researchers], learns(r, Swahili)) == 2 ::: Exactly two researchers learn Swahili\nCount([r:researchers], learns(r, Tigrinya)) == 2 ::: Exactly two researchers learn Tigrinya\nCount([r:researchers], learns(r, Yoruba)) == 3 ::: Exactly three researchers learn Yoruba\nForAll([l:languages], Implies(learns(linguist, l), Not(learns(geologist, l)))) ::: Any language learned by the linguist or paleontologist is not learned by the geologist\nForAll([l:languages], Implies(learns(geologist, l), learns(historian, l))) ::: Any language learned by the geologist is learned by the historian\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(And(learns(linguist, Rundi), learns(linguist, Swahili), learns(linguist, Tigrinya))) ::: (A)\nis_valid(And(learns(linguist, Swahili), learns(linguist, Tigrinya), learns(linguist, Yoruba))) ::: (B)\nis_valid(And(learns(historian, Rundi), learns(historian, Swahili), learns(historian,"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_2_7",
    "context": "To prepare for fieldwork, exactly four different researchers—a geologist, a historian, a linguist, and a paleontologist—will learn at least one and at most three of four languages—Rundi, Swahili, Tigrinya, and Yoruba. They must learn the languages according to the following specifications: Exactly one researcher learns Rundi. Exactly two researchers learn Swahili. Exactly two researchers learn Tigrinya. Exactly three researchers learn Yoruba. Any language learned by the linguist or paleontologist is not learned by the geologist. Any language learned by the geologist is learned by the historian.",
    "question": "If the linguist learns three of the languages, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) The linguist learns Tigrinya.",
      "B) The linguist learns Rundi.",
      "C) The linguist learns Swahili.",
      "D) The paleontologist learns Rundi.",
      "E) The paleontologist learns Swahili."
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([geologist, historian, linguist, paleontologist])\nlanguages = EnumSort([Rundi, Swahili, Tigrinya, Yoruba])\nlearns = Function([researchers, languages] -> [bool])\n\n# Constraints\nForAll([r:researchers], Count([l:languages], learns(r, l)) >= 1) ::: learn at least one and at most three of four languages\nCount([l:languages], learns(linguist, l)) == 3 ::: the linguist learns three of the languages\nCount([l:languages], learns(geologist, l)) == 3 ::: the geologist learns three of the languages\nCount([l:languages], learns(historian, l)) == 3 ::: the historian learns three of the languages\nCount([l:languages], learns(paleontologist, l)) == 3 ::: the paleontologist learns three of the languages\nCount([l:languages], learns(r, l)) == 1 ::: Exactly one researcher learns Rundi\nCount([l:languages], learns(r, l)) == 2 ::: Exactly two researchers learn Swahili\nCount([l:languages], learns(r, l)) == 2 ::: Exactly two researchers learn Tigrinya\nCount([l:languages], learns(r, l)) == 3 ::: Exactly three researchers learn Yoruba\nForAll([l:languages], Implies(learns(linguist, l), Not(learns(geologist, l)))) ::: Any language learned by the linguist or paleontologist is not learned by the geologist\nForAll([l:languages], Implies(learns(geologist, l), learns(historian, l))) ::: Any language learned by the geologist is learned by the historian\n\n# Options\nQuestion ::: If the linguist learns three of the languages, then which one of the following must be true?\nis_valid(Exists([l:languages], learns(linguist, l) && learns(l, Tigrinya))) ::: A) The"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_2_8",
    "context": "To prepare for fieldwork, exactly four different researchers—a geologist, a historian, a linguist, and a paleontologist—will learn at least one and at most three of four languages—Rundi, Swahili, Tigrinya, and Yoruba. They must learn the languages according to the following specifications: Exactly one researcher learns Rundi. Exactly two researchers learn Swahili. Exactly two researchers learn Tigrinya. Exactly three researchers learn Yoruba. Any language learned by the linguist or paleontologist is not learned by the geologist. Any language learned by the geologist is learned by the historian.",
    "question": "Each of the following could be true of the researcher who learns Rundi EXCEPT:",
    "answer": "C",
    "options": [
      "A) The researcher also learns Tigrinya but not Swahili.",
      "B) The researcher learns neither Tigrinya nor Swahili.",
      "C) The researcher also learns Tigrinya but not Yoruba.",
      "D) The researcher also learns both Tigrinya and Yoruba.",
      "E) The researcher also learns Yoruba but not Tigrinya."
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([geologist, historian, linguist, paleontologist])\nlanguages = EnumSort([Rundi, Swahili, Tigrinya, Yoruba])\nlearns = Function([researchers, languages] -> [bool])\n\n# Constraints\nForAll([r:researchers], Count([l:languages], learns(r, l)) >= 1) ::: each researcher learns at least one language\nForAll([r:researchers], Count([l:languages], learns(r, l)) <= 3) ::: each researcher learns at most three languages\nCount([r:researchers], learns(r, Rundi)) == 1 ::: Exactly one researcher learns Rundi\nCount([r:researchers], learns(r, Swahili)) == 2 ::: Exactly two researchers learn Swahili\nCount([r:researchers], learns(r, Tigrinya)) == 2 ::: Exactly two researchers learn Tigrinya\nCount([r:researchers], learns(r, Yoruba)) == 3 ::: Exactly three researchers learn Yoruba\nForAll([l:languages], Implies(learns(linguist, l), Not(learns(geologist, l)))) ::: Any language learned by the linguist or paleontologist is not learned by the geologist\nForAll([l:languages], Implies(learns(geologist, l), learns(historian, l))) ::: Any language learned by the geologist is learned by the historian\n\n# Options\nQuestion ::: Each of the following could be true of the researcher who learns Rundi EXCEPT:\nis_exception(is_sat(learns(Rundi, geologist) && learns(Tigrinya, geologist) && Not(learns(Swahili, geologist)))) ::: A) The researcher also learns Tigrinya but not Swahili.\nis_exception(is_sat(learns(Rundi, geologist) && Not(learns(Tigrinya, geologist)) && Not(learns(Swahili, geologist))))"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_2_9",
    "context": "To prepare for fieldwork, exactly four different researchers—a geologist, a historian, a linguist, and a paleontologist—will learn at least one and at most three of four languages—Rundi, Swahili, Tigrinya, and Yoruba. They must learn the languages according to the following specifications: Exactly one researcher learns Rundi. Exactly two researchers learn Swahili. Exactly two researchers learn Tigrinya. Exactly three researchers learn Yoruba. Any language learned by the linguist or paleontologist is not learned by the geologist. Any language learned by the geologist is learned by the historian.",
    "question": "Each of the following could be a complete and accurate list of the researchers who learn both Swahili and Yoruba EXCEPT:",
    "answer": "B",
    "options": [
      "A) the historian",
      "B) the paleontologist",
      "C) the historian, the linguist",
      "D) the historian, the paleontologist",
      "E) the linguist, the paleontologist"
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([geologist, historian, linguist, paleontologist])\nlanguages = EnumSort([Rundi, Swahili, Tigrinya, Yoruba])\nlearns = Function([researchers, languages] -> [bool])\n\n# Constraints\nForAll([r:researchers], Count([l:languages], learns(r, l)) >= 1) ::: learn at least one and at most three of four languages\nCount([l:languages], learns(r, l)) == 1 ::: Exactly one researcher learns Rundi\nCount([l:languages], learns(r, l)) == 2 ::: Exactly two researchers learn Swahili\nCount([l:languages], learns(r, l)) == 2 ::: Exactly two researchers learn Tigrinya\nCount([l:languages], learns(r, l)) == 3 ::: Exactly three researchers learn Yoruba\nForAll([l:languages], Implies(learns(linguist, l), Not(learns(geologist, l)))) ::: Any language learned by the linguist or paleontologist is not learned by the geologist\nForAll([l:languages], Implies(learns(geologist, l), learns(historian, l))) ::: Any language learned by the geologist is learned by the historian\n\n# Options\nQuestion ::: Each of the following could be a complete and accurate list of the researchers who learn both Swahili and Yoruba EXCEPT:\nis_exception(is_sat(learns(historian, Swahili) && learns(historian, Yoruba))) ::: (A)\nis_exception(is_sat(learns(paleontologist, Swahili) && learns(paleontologist, Yoruba))) ::: (B)\nis_exception(is_sat(learns(historian, Swahili) && learns(linguist, Yoruba))) ::: (C)\nis_exception(is_sat(learns(historian, Swahili) && learns(paleontologist, Yoruba))) ::: (D)"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_2_10",
    "context": "To prepare for fieldwork, exactly four different researchers—a geologist, a historian, a linguist, and a paleontologist—will learn at least one and at most three of four languages—Rundi, Swahili, Tigrinya, and Yoruba. They must learn the languages according to the following specifications: Exactly one researcher learns Rundi. Exactly two researchers learn Swahili. Exactly two researchers learn Tigrinya. Exactly three researchers learn Yoruba. Any language learned by the linguist or paleontologist is not learned by the geologist. Any language learned by the geologist is learned by the historian.",
    "question": "If the geologist learns exactly two of the languages, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) The paleontologist learns Rundi.",
      "B) The paleontologist learns Swahili.",
      "C) The historian learns Rundi.",
      "D) The paleontologist learns exactly three of the languages.",
      "E) The historian learns exactly two of the languages."
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([geologist, historian, linguist, paleontologist])\nlanguages = EnumSort([Rundi, Swahili, Tigrinya, Yoruba])\nlearns = Function([researchers, languages] -> [bool])\n\n# Constraints\nForAll([r:researchers], Count([l:languages], learns(r, l)) >= 1) ::: learn at least one and at most three of four languages\nCount([l:languages], learns(geologist, l)) == 2 ::: the geologist learns exactly two of the languages\nAnd(Count([l:languages], learns(linguist, l)) == 2, Count([l:languages], learns(paleontologist, l)) == 2) ::: Exactly two researchers learn Swahili\nAnd(Count([l:languages], learns(linguist, l)) == 2, Count([l:languages], learns(paleontologist, l)) == 2) ::: Exactly two researchers learn Tigrinya\nAnd(Count([l:languages], learns(linguist, l)) == 3, Count([l:languages], learns(paleontologist, l)) == 3) ::: Exactly three researchers learn Yoruba\nForAll([l:languages], Implies(learns(linguist, l), Not(learns(geologist, l)))) ::: Any language learned by the linguist or paleontologist is not learned by the geologist\nForAll([l:languages], Implies(learns(geologist, l), learns(historian, l))) ::: Any language learned by the geologist is learned by the historian\n\n# Options\nQuestion ::: If the geologist learns exactly two of the languages, then which one of the following could be true?\nis_exception(is_sat(learns(paleontologist, Rundi))) ::: (A)\nis_exception(is_sat(learns(paleontologist, Swahili))) ::: (B)\nis_exception(is_sat(learns(historian, Rundi))) ::: (C)\nis"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_2_11",
    "context": "To prepare for fieldwork, exactly four different researchers—a geologist, a historian, a linguist, and a paleontologist—will learn at least one and at most three of four languages—Rundi, Swahili, Tigrinya, and Yoruba. They must learn the languages according to the following specifications: Exactly one researcher learns Rundi. Exactly two researchers learn Swahili. Exactly two researchers learn Tigrinya. Exactly three researchers learn Yoruba. Any language learned by the linguist or paleontologist is not learned by the geologist. Any language learned by the geologist is learned by the historian.",
    "question": "Which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Fewer of the languages are learned by the historian than are learned by the paleontologist.",
      "B) Fewer of the languages are learned by the geologist than are learned by the historian.",
      "C) Fewer of the languages are learned by the geologist than are learned by the linguist.",
      "D) Fewer of the languages are learned by the paleontologist than are learned by the linguist.",
      "E) Fewer of the languages are learned by the paleontologist than are learned by the historian."
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([geologist, historian, linguist, paleontologist])\nlanguages = EnumSort([Rundi, Swahili, Tigrinya, Yoruba])\nlearns = Function([researchers, languages] -> [bool])\n\n# Constraints\nForAll([r:researchers], Count([l:languages], learns(r, l)) >= 1) ::: each researcher learns at least one language\nForAll([r:researchers], Count([l:languages], learns(r, l)) <= 3) ::: each researcher learns at most three languages\nCount([l:languages], learns(geologist, l)) == 1 ::: Exactly one researcher learns Rundi\nCount([l:languages], learns(linguist, l)) == 1 ::: Exactly two researchers learn Swahili\nCount([l:languages], learns(paleontologist, l)) == 1 ::: Exactly two researchers learn Tigrinya\nCount([l:languages], learns(historian, l)) == 1 ::: Exactly three researchers learn Yoruba\nForAll([l:languages], Implies(learns(linguist, l), Not(learns(geologist, l)))) ::: Any language learned by the linguist or paleontologist is not learned by the geologist\nForAll([l:languages], Implies(learns(geologist, l), learns(historian, l))) ::: Any language learned by the geologist is learned by the historian\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Count([l:languages], learns(historian, l)) < Count([l:languages], learns(paleontologist, l))) ::: (A)\nis_valid(Count([l:languages], learns(geologist, l)) < Count([l:languages], learns(historian, l))) ::: (B)\nis_valid(Count([l:languages], learns(geologist, l)) < Count([l:languages], learns(linguist, l))) ::: (C)\nis"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_2_12",
    "context": "To prepare for fieldwork, exactly four different researchers—a geologist, a historian, a linguist, and a paleontologist—will learn at least one and at most three of four languages—Rundi, Swahili, Tigrinya, and Yoruba. They must learn the languages according to the following specifications: Exactly one researcher learns Rundi. Exactly two researchers learn Swahili. Exactly two researchers learn Tigrinya. Exactly three researchers learn Yoruba. Any language learned by the linguist or paleontologist is not learned by the geologist. Any language learned by the geologist is learned by the historian.",
    "question": "If exactly two of the languages are learned by the historian, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) The paleontologist does not learn Rundi.",
      "B) The geologist does not learn Swahili.",
      "C) The linguist does not learn Rundi.",
      "D) The historian does not learn Rundi.",
      "E) The paleontologist does not learn Swahili."
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([geologist, historian, linguist, paleontologist])\nlanguages = EnumSort([Rundi, Swahili, Tigrinya, Yoruba])\nlearns = Function([researchers, languages] -> [bool])\n\n# Constraints\nForAll([r:researchers], Count([l:languages], learns(r, l)) >= 1) ::: learn at least one and at most three of four languages\nCount([l:languages], learns(geologist, l)) == 1 ::: Exactly one researcher learns Rundi\nCount([l:languages], learns(historian, l)) == 2 ::: Exactly two researchers learn Swahili\nCount([l:languages], learns(linguist, l)) == 2 ::: Exactly two researchers learn Tigrinya\nCount([l:languages], learns(paleontologist, l)) == 3 ::: Exactly three researchers learn Yoruba\nForAll([l:languages], Implies(learns(linguist, l), Not(learns(geologist, l)))) ::: Any language learned by the linguist or paleontologist is not learned by the geologist\nForAll([l:languages], Implies(learns(geologist, l), learns(historian, l))) ::: Any language learned by the geologist is learned by the historian\n\n# Options\nQuestion ::: If exactly two of the languages are learned by the historian, then which one of the following must be true?\nis_exception(is_sat(learns(paleontologist, Rundi))) ::: (A)\nis_exception(is_sat(learns(geologist, Swahili))) ::: (B)\nis_exception(is_sat(learns(linguist, Rundi))) ::: (C)\nis_exception(is_sat(learns(historian, Rundi))) ::: (D)\nis_exception(is_sat(learns(paleontologist, Swahili))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_3_13",
    "context": "During three days—Monday through Wednesday—a health officer will inspect exactly six buildings—three hotels: Grace, Jacaranda, and Lido; and three restaurants: Seville, Vesuvio, and Zeno. Each day, exactly two buildings are inspected: one in the morning and one in the afternoon. Inspections must occur according to the following conditions: Hotels are not inspected on Wednesday. Grace is inspected at some time before Jacaranda. Grace is not inspected on the same day as Seville. If Zeno is inspected in the morning, Lido is also inspected in the morning.",
    "question": "Which one of the following could be the order in which the buildings are inspected, listed in order from Monday morning through Wednesday afternoon?",
    "answer": "D",
    "options": [
      "A) Grace, Seville, Jacaranda, Lido, Vesuvio, Zeno",
      "B) Grace, Vesuvio, Zeno, Jacaranda, Lido, Seville",
      "C) Lido, Jacaranda, Grace, Vesuvio, Zeno, Seville",
      "D) Lido, Seville, Grace, Jacaranda, Zeno, Vesuvio",
      "E) Zeno, Grace, Jacaranda, Lido, Seville, Vesuvio"
    ],
    "raw_logic_programs": [
      "# Declarations\nbuildings = EnumSort([Grace, Jacaranda, Lido, Seville, Vesuvio, Zeno])\ndays = EnumSort([Monday, Tuesday, Wednesday])\ninspected = Function([buildings, days] -> [bool])\n\n# Constraints\nForAll([b:buildings], Count([d:days], inspected(b, d)) == 1) ::: exactly two buildings are inspected each day\nForAll([d:days], And(inspected(Grace, d), inspected(Jacaranda, d))) ::: Grace is inspected at some time before Jacaranda\nForAll([d:days], Implies(inspected(Grace, d), Not(inspected(Seville, d)))) ::: Grace is not inspected on the same day as Seville\nForAll([d:days], Implies(inspected(Zeno, d) == morning, inspected(Lido, d) == morning)) ::: If Zeno is inspected in the morning, Lido is also inspected in the morning\nForAll([d:days], Implies(d == Wednesday, Not(inspected(Grace, d)))) ::: Hotels are not inspected on Wednesday\n\n# Options\nQuestion ::: Which one of the following could be the order in which the buildings are inspected, listed in order from Monday morning through Wednesday afternoon?\nis_sat(And(inspected(Grace, Monday), inspected(Seville, Monday), inspected(Jacaranda, Tuesday), inspected(Lido, Tuesday), inspected(Vesuvio, Wednesday), inspected(Zeno, Wednesday))) ::: A) Grace, Seville, Jacaranda, Lido, Vesuvio, Zeno\nis_sat(And(inspected(Grace, Monday), inspected(Vesuvio, Monday), inspected(Zeno, Tuesday), inspected(Jacaranda, Tuesday), inspected(Lido, Wednesday), inspected(Seville, Wednesday))) ::: B) Grace, Vesuvio"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_3_14",
    "context": "During three days—Monday through Wednesday—a health officer will inspect exactly six buildings—three hotels: Grace, Jacaranda, and Lido; and three restaurants: Seville, Vesuvio, and Zeno. Each day, exactly two buildings are inspected: one in the morning and one in the afternoon. Inspections must occur according to the following conditions: Hotels are not inspected on Wednesday. Grace is inspected at some time before Jacaranda. Grace is not inspected on the same day as Seville. If Zeno is inspected in the morning, Lido is also inspected in the morning.",
    "question": "Which one of the following could be the buildings inspected in the mornings, listed in order from Monday through Wednesday?",
    "answer": "C",
    "options": [
      "A) Grace, Jacaranda, Zeno",
      "B) Jacaranda, Vesuvio, Seville",
      "C) Lido, Jacaranda, Vesuvio",
      "D) Seville, Jacaranda, Vesuvio",
      "E) Seville, Lido, Zeno"
    ],
    "raw_logic_programs": [
      "# Declarations\nbuildings = EnumSort([Grace, Jacaranda, Lido, Seville, Vesuvio, Zeno])\ndays = EnumSort([Monday, Tuesday, Wednesday])\ninspected = Function([buildings, days] -> [bool])\n\n# Constraints\nForAll([b:buildings], Count([d:days], inspected(b, d)) == 1) ::: exactly two buildings are inspected each day\nForAll([d:days], Count([b:buildings], inspected(b, d)) == 2) ::: exactly two buildings are inspected each day\nForAll([b:buildings], Implies(inspected(b, Wednesday), b == restaurant)) ::: Hotels are not inspected on Wednesday\nForAll([b:buildings], Implies(inspected(Grace, d), inspected(Jacaranda, d))) ::: Grace is inspected at some time before Jacaranda\nForAll([b:buildings], Implies(inspected(Grace, d), Not(inspected(Seville, d)))) ::: Grace is not inspected on the same day as Seville\nForAll([b:buildings], Implies(inspected(Zeno, Monday), inspected(Lido, Monday))) ::: If Zeno is inspected in the morning, Lido is also inspected in the morning\n\n# Options\nQuestion ::: Which one of the following could be the buildings inspected in the mornings, listed in order from Monday through Wednesday?\nis_sat(And(inspected(Grace, Monday), inspected(Jacaranda, Tuesday), inspected(Zeno, Wednesday))) ::: A) Grace, Jacaranda, Zeno\nis_sat(And(inspected(Jacaranda, Monday), inspected(Vesuvio, Tuesday), inspected(Seville, Wednesday))) ::: B) Jacaranda, Vesuvio, Seville\nis_sat(And(inspected(Lido, Monday), inspected(Jacaranda, Tuesday), inspected(Vesuvio"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_3_15",
    "context": "During three days—Monday through Wednesday—a health officer will inspect exactly six buildings—three hotels: Grace, Jacaranda, and Lido; and three restaurants: Seville, Vesuvio, and Zeno. Each day, exactly two buildings are inspected: one in the morning and one in the afternoon. Inspections must occur according to the following conditions: Hotels are not inspected on Wednesday. Grace is inspected at some time before Jacaranda. Grace is not inspected on the same day as Seville. If Zeno is inspected in the morning, Lido is also inspected in the morning.",
    "question": "Which one of the following is a pair of buildings that, if inspected on the same day as each other, must be inspected on Monday?",
    "answer": "B",
    "options": [
      "A) Grace and Jacaranda",
      "B) Grace and Vesuvio",
      "C) Jacaranda and Lido",
      "D) Lido and Seville",
      "E) Lido and Vesuvio"
    ],
    "raw_logic_programs": [
      "# Declarations\nbuildings = EnumSort([Grace, Jacaranda, Lido, Seville, Vesuvio, Zeno])\ndays = EnumSort([Monday, Tuesday, Wednesday])\ninspected = Function([buildings, days] -> [bool])\n\n# Constraints\nForAll([b:buildings], Count([d:days], inspected(b, d)) == 1) ::: exactly two buildings are inspected each day\nForAll([d:days], Count([b:buildings], inspected(b, d)) == 2) ::: exactly two buildings are inspected each day\nForAll([b:buildings], Implies(inspected(b, Wednesday), b!= Grace)) ::: Hotels are not inspected on Wednesday\nForAll([b:buildings], Implies(inspected(Grace, d), inspected(Jacaranda, d))) ::: Grace is inspected at some time before Jacaranda\nForAll([b:buildings], Implies(inspected(Grace, d), Not(inspected(Seville, d)))) ::: Grace is not inspected on the same day as Seville\nForAll([b:buildings], Implies(inspected(Zeno, Monday), inspected(Lido, Monday))) ::: If Zeno is inspected in the morning, Lido is also inspected in the morning\n\n# Options\nQuestion ::: Which one of the following is a pair of buildings that, if inspected on the same day as each other, must be inspected on Monday?\nis_sat(And(inspected(Grace, Monday), inspected(Jacaranda, Monday))) ::: (A)\nis_sat(And(inspected(Grace, Monday), inspected(Vesuvio, Monday))) ::: (B)\nis_sat(And(inspected(Jacaranda, Monday), inspected(Lido, Monday))) ::: (C)\nis_sat(And(inspected(Lido, Monday), inspected(Seville, Monday))) ::: (D)\nis_sat(And(inspected(Lido,"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_3_16",
    "context": "During three days—Monday through Wednesday—a health officer will inspect exactly six buildings—three hotels: Grace, Jacaranda, and Lido; and three restaurants: Seville, Vesuvio, and Zeno. Each day, exactly two buildings are inspected: one in the morning and one in the afternoon. Inspections must occur according to the following conditions: Hotels are not inspected on Wednesday. Grace is inspected at some time before Jacaranda. Grace is not inspected on the same day as Seville. If Zeno is inspected in the morning, Lido is also inspected in the morning.",
    "question": "If Grace is inspected on Tuesday, which one of the following could be the buildings inspected in the afternoons, listed in order from Monday through Wednesday?",
    "answer": "B",
    "options": [
      "A) Lido, Jacaranda, Vesuvio",
      "B) Lido, Jacaranda, Zeno",
      "C) Lido, Vesuvio, Zeno",
      "D) Seville, Grace, Vesuvio",
      "E) Seville, Jacaranda, Lido"
    ],
    "raw_logic_programs": [
      "# Declarations\nbuildings = EnumSort([Grace, Jacaranda, Lido, Seville, Vesuvio, Zeno])\ndays = EnumSort([Monday, Tuesday, Wednesday])\ninspected = Function([buildings, days] -> [bool])\n\n# Constraints\nForAll([b:buildings], Count([d:days], inspected(b, d)) == 1) ::: exactly two buildings are inspected each day\nForAll([d:days], Count([b:buildings], inspected(b, d)) == 2) ::: exactly two buildings are inspected each day\nForAll([b:buildings], Implies(inspected(b, Wednesday), b!= Grace)) ::: Hotels are not inspected on Wednesday\nForAll([b:buildings], Implies(inspected(Grace, d), inspected(Jacaranda, d))) ::: Grace is inspected at some time before Jacaranda\nForAll([b:buildings], Implies(inspected(Grace, d), Not(inspected(Seville, d)))) ::: Grace is not inspected on the same day as Seville\nForAll([b:buildings], Implies(inspected(Zeno, Monday), inspected(Lido, Monday))) ::: If Zeno is inspected in the morning, Lido is also inspected in the morning\n\n# Options\nQuestion ::: If Grace is inspected on Tuesday, which one of the following could be the buildings inspected in the afternoons, listed in order from Monday through Wednesday?\nis_sat(And(inspected(Lido, Monday), inspected(Jacaranda, Monday), inspected(Vesuvio, Wednesday))) ::: A) Lido, Jacaranda, Vesuvio\nis_sat(And(inspected(Lido, Monday), inspected(Jacaranda, Monday), inspected(Zeno, Wednesday))) ::: B) Lido, Jacaranda, Zeno\nis_sat(And(inspected(Lido, Monday), inspected(Vesuvio, Monday),"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_3_17",
    "context": "During three days—Monday through Wednesday—a health officer will inspect exactly six buildings—three hotels: Grace, Jacaranda, and Lido; and three restaurants: Seville, Vesuvio, and Zeno. Each day, exactly two buildings are inspected: one in the morning and one in the afternoon. Inspections must occur according to the following conditions: Hotels are not inspected on Wednesday. Grace is inspected at some time before Jacaranda. Grace is not inspected on the same day as Seville. If Zeno is inspected in the morning, Lido is also inspected in the morning.",
    "question": "If Seville is inspected on Monday morning, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Grace is inspected on Tuesday afternoon.",
      "B) Jacaranda is inspected on Monday afternoon.",
      "C) Lido is inspected on Tuesday morning.",
      "D) Vesuvio is inspected on Wednesday morning.",
      "E) Zeno is inspected on Wednesday morning."
    ],
    "raw_logic_programs": [
      "# Declarations\nbuildings = EnumSort([Grace, Jacaranda, Lido, Seville, Vesuvio, Zeno])\ndays = EnumSort([Monday, Tuesday, Wednesday])\ntimes = EnumSort([morning, afternoon])\ninspected = Function([buildings, days, times] -> [bool])\n\n# Constraints\nForAll([b:buildings], Count([d:days, t:times], inspected(b, d, t)) == 1) ::: exactly two buildings are inspected each day\nForAll([d:days], Count([b:buildings, t:times], inspected(b, d, t)) == 2) ::: exactly two buildings are inspected each day\nForAll([b:buildings], Implies(b == Grace, Not(inspected(b, Wednesday, _)))) ::: Hotels are not inspected on Wednesday\nForAll([b:buildings], Implies(b == Grace, inspected(b, _, _) < inspected(Jacaranda, _, _))) ::: Grace is inspected at some time before Jacaranda\nForAll([b:buildings], Implies(b == Grace, Not(inspected(b, _, _) == inspected(Seville, _, _)))) ::: Grace is not inspected on the same day as Seville\nForAll([b:buildings], Implies(inspected(Zeno, _, morning), inspected(Lido, _, morning))) ::: If Zeno is inspected in the morning, Lido is also inspected in the morning\n\n# Options\nQuestion ::: If Seville is inspected on Monday morning, which one of the following must be true?\nis_sat(ForAll([b:buildings], inspected(b, Tuesday, afternoon) == inspected(Grace, Tuesday, afternoon))) ::: (A)\nis_sat(ForAll([b:buildings], inspected(b, Monday, afternoon) == inspected(Jacaranda, Monday, afternoon))) ::: (B)\nis_sat(ForAll([b:buildings], inspected(b, T"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_3_18",
    "context": "During three days—Monday through Wednesday—a health officer will inspect exactly six buildings—three hotels: Grace, Jacaranda, and Lido; and three restaurants: Seville, Vesuvio, and Zeno. Each day, exactly two buildings are inspected: one in the morning and one in the afternoon. Inspections must occur according to the following conditions: Hotels are not inspected on Wednesday. Grace is inspected at some time before Jacaranda. Grace is not inspected on the same day as Seville. If Zeno is inspected in the morning, Lido is also inspected in the morning.",
    "question": "If Grace is inspected on Monday morning and Zeno is inspected on Wednesday morning, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Jacaranda is inspected before Lido is inspected.",
      "B) Jacaranda is inspected after Lido is inspected.",
      "C) Jacaranda is inspected after Seville is inspected.",
      "D) Lido is inspected before Seville is inspected.",
      "E) Lido is inspected before Vesuvio is inspected."
    ],
    "raw_logic_programs": [
      "# Declarations\nbuildings = EnumSort([Grace, Jacaranda, Lido, Seville, Vesuvio, Zeno])\ndays = EnumSort([Monday, Tuesday, Wednesday])\ninspected = Function([buildings, days] -> [bool])\n\n# Constraints\nForAll([b:buildings], Count([d:days], inspected(b, d)) == 1) ::: exactly two buildings are inspected each day\nForAll([d:days], Count([b:buildings], inspected(b, d)) == 2) ::: exactly two buildings are inspected each day\nForAll([b:buildings], Implies(inspected(b, Wednesday), b == restaurant)) ::: Hotels are not inspected on Wednesday\nForAll([b:buildings], Implies(inspected(Grace, d), inspected(Jacaranda, d))) ::: Grace is inspected at some time before Jacaranda\nForAll([b:buildings], Implies(inspected(Grace, d), Not(inspected(Seville, d)))) ::: Grace is not inspected on the same day as Seville\nForAll([b:buildings], Implies(inspected(Zeno, d), inspected(Lido, d))) ::: If Zeno is inspected in the morning, Lido is also inspected in the morning\n\n# Options\nQuestion ::: If Grace is inspected on Monday morning and Zeno is inspected on Wednesday morning, which one of the following must be true?\nis_valid(ForAll([b:buildings], Implies(inspected(b, Monday), b == hotel))) ::: (A)\nis_valid(ForAll([b:buildings], Implies(inspected(b, Tuesday), b == hotel))) ::: (B)\nis_valid(ForAll([b:buildings], Implies(inspected(b, Tuesday), b == restaurant))) ::: (C)\nis_valid(ForAll([b:buildings], Implies(inspected(b, Wednesday), b == restaurant))) ::: (D)"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_4_19",
    "context": "Morrisville's town council has exactly three members: Fu, Gianola, and Herstein. During one week, the council members vote on exactly three bills: a recreation bill, a school bill, and a tax bill. Each council member votes either for or against each bill. The following is known: Each member of the council votes for at least one of the bills and against at least one of the bills. Exactly two members of the council vote for the recreation bill. Exactly one member of the council votes for the school bill. Exactly one member of the council votes for the tax bill. Fu votes for the recreation bill and against the school bill. Gianola votes against the recreation bill. Herstein votes against the tax bill.",
    "question": "Which one of the following statements could be true?",
    "answer": "D",
    "options": [
      "A) Fu and Gianola vote the same way on the tax bill.",
      "B) Gianola and Herstein vote the same way on the recreation bill.",
      "C) Gianola and Herstein vote the same way on the school bill.",
      "D) Fu votes for one of the bills and Gianola votes for two of the bills.",
      "E) Fu votes for two of the bills and Gianola votes for two of the bills."
    ],
    "raw_logic_programs": [
      "# Declarations\ncouncil_members = EnumSort([Fu, Gianola, Herstein])\nbills = EnumSort([recreation_bill, school_bill, tax_bill])\nvotes = Function([council_members, bills] -> [bool])\n\n# Constraints\nForAll([m:council_members], Count([b:bills], votes(m, b)) == 3) ::: the council members vote on exactly three bills\nForAll([m:council_members], Count([b:bills], votes(m, b)) >= 1) ::: Each member of the council votes for at least one of the bills\nForAll([m:council_members], Count([b:bills], votes(m, b)) <= 3) ::: Each member of the council votes against at least one of the bills\nAnd(votes(Fu, recreation_bill), votes(Gianola, recreation_bill), votes(Herstein, recreation_bill)) ::: Exactly two members of the council vote for the recreation bill\nAnd(votes(Fu, school_bill), votes(Gianola, school_bill), votes(Herstein, school_bill)) ::: Exactly one member of the council votes for the school bill\nAnd(votes(Fu, tax_bill), votes(Gianola, tax_bill), votes(Herstein, tax_bill)) ::: Exactly one member of the council votes for the tax bill\nvotes(Fu, recreation_bill) ::: Fu votes for the recreation bill\nNot(votes(Fu, school_bill)) ::: Fu votes against the school bill\nNot(votes(Gianola, recreation_bill)) ::: Gianola votes against the recreation bill\nNot(votes(Herstein, tax_bill)) ::: Herstein votes against the tax bill\n\n# Options\nQuestion ::: Which one of the following statements could be true?\nis_valid(And(votes(Fu, tax_bill), votes(Gianola"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_4_20",
    "context": "Morrisville's town council has exactly three members: Fu, Gianola, and Herstein. During one week, the council members vote on exactly three bills: a recreation bill, a school bill, and a tax bill. Each council member votes either for or against each bill. The following is known: Each member of the council votes for at least one of the bills and against at least one of the bills. Exactly two members of the council vote for the recreation bill. Exactly one member of the council votes for the school bill. Exactly one member of the council votes for the tax bill. Fu votes for the recreation bill and against the school bill. Gianola votes against the recreation bill. Herstein votes against the tax bill.",
    "question": "If the set of members of the council who vote against the school bill is the same set of members who vote against the tax bill, then which one of the following statements must be true?",
    "answer": "E",
    "options": [
      "A) Fu votes for the tax bill.",
      "B) Gianola votes for the recreation bill.",
      "C) Gianola votes against the school bill.",
      "D) Herstein votes against the recreation bill.",
      "E) Herstein votes against the school bill."
    ],
    "raw_logic_programs": [
      "# Declarations\nmembers = EnumSort([Fu, Gianola, Herstein])\nbills = EnumSort([recreation, school, tax])\nvotes = Function([members, bills] -> [bool])\n\n# Constraints\nForAll([m:members], Count([b:bills], votes(m, b)) == 2) ::: Each member of the council votes for at least one of the bills and against at least one of the bills\nAnd(votes(m, recreation), votes(m, school)) ::: Exactly two members of the council vote for the recreation bill\nAnd(votes(m, school), votes(m, tax)) ::: Exactly one member of the council votes for the school bill\nAnd(votes(m, tax), votes(m, recreation)) ::: Exactly one member of the council votes for the tax bill\nvotes(Fu, recreation) ::: Fu votes for the recreation bill\nNot(votes(Fu, school)) ::: Fu votes against the school bill\nNot(votes(Gianola, recreation)) ::: Gianola votes against the recreation bill\nNot(votes(Herstein, tax)) ::: Herstein votes against the tax bill\n\n# Options\nQuestion ::: If the set of members of the council who vote against the school bill is the same set of members who vote against the tax bill, then which one of the following statements must be true?\nis_valid(Exists([m:members], And(Not(votes(m, school)), votes(m, tax)))) ::: (A)\nis_valid(Exists([m:members], And(votes(m, recreation), Not(votes(m, school))))) ::: (B)\nis_valid(Exists([m:members], And(Not(votes(m, school)), Not(votes(m, tax))))) ::: (C)\nis_valid(Exists([m:members], And(Not(votes(m, recreation)), Not(votes(m, tax))))) ::: (D)\nis_valid(Exists([m:members], And(Not(votes("
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_4_21",
    "context": "Morrisville's town council has exactly three members: Fu, Gianola, and Herstein. During one week, the council members vote on exactly three bills: a recreation bill, a school bill, and a tax bill. Each council member votes either for or against each bill. The following is known: Each member of the council votes for at least one of the bills and against at least one of the bills. Exactly two members of the council vote for the recreation bill. Exactly one member of the council votes for the school bill. Exactly one member of the council votes for the tax bill. Fu votes for the recreation bill and against the school bill. Gianola votes against the recreation bill. Herstein votes against the tax bill.",
    "question": "If Gianola votes for the tax bill, then which one of the following statements could be true?",
    "answer": "A",
    "options": [
      "A) Fu and Gianola each vote for exactly one bill.",
      "B) Gianola and Herstein each vote for exactly one bill.",
      "C) Fu votes for exactly two bills.",
      "D) Gianola votes for the recreation bill.",
      "E) Herstein votes against the recreation bill."
    ],
    "raw_logic_programs": [
      "# Declarations\ncouncil_members = EnumSort([Fu, Gianola, Herstein])\nbills = EnumSort([recreation_bill, school_bill, tax_bill])\nvotes = Function([council_members, bills] -> [bool])\n\n# Constraints\nForAll([m:council_members], Count([b:bills], votes(m, b)) == 3) ::: the council members vote on exactly three bills\nForAll([m:council_members], Count([b:bills], votes(m, b)) >= 1) ::: Each member of the council votes for at least one of the bills and against at least one of the bills\nAnd(votes(Fu, recreation_bill), votes(Gianola, recreation_bill), votes(Herstein, recreation_bill)) ::: Exactly two members of the council vote for the recreation bill\nAnd(votes(Fu, school_bill), votes(Gianola, school_bill), votes(Herstein, school_bill)) ::: Exactly one member of the council votes for the school bill\nAnd(votes(Fu, tax_bill), votes(Gianola, tax_bill), votes(Herstein, tax_bill)) ::: Exactly one member of the council votes for the tax bill\nvotes(Fu, recreation_bill) ::: Fu votes for the recreation bill and against the school bill\nNot(votes(Gianola, recreation_bill)) ::: Gianola votes against the recreation bill\nNot(votes(Herstein, tax_bill)) ::: Herstein votes against the tax bill\n\n# Options\nQuestion ::: If Gianola votes for the tax bill, then which one of the following statements could be true?\nis_valid(Exists([m:council_members], Count([b:bills], votes(m, b)) == 1))) ::: A) Fu and Gianola each vote for exactly one bill.\nis_valid(Exists([m:council_members], Count([b:"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_4_22",
    "context": "Morrisville's town council has exactly three members: Fu, Gianola, and Herstein. During one week, the council members vote on exactly three bills: a recreation bill, a school bill, and a tax bill. Each council member votes either for or against each bill. The following is known: Each member of the council votes for at least one of the bills and against at least one of the bills. Exactly two members of the council vote for the recreation bill. Exactly one member of the council votes for the school bill. Exactly one member of the council votes for the tax bill. Fu votes for the recreation bill and against the school bill. Gianola votes against the recreation bill. Herstein votes against the tax bill.",
    "question": "If Gianola votes for exactly two of the three bills, which one of the following statements must be true?",
    "answer": "C",
    "options": [
      "A) Fu votes for the tax bill.",
      "B) Gianola votes for the recreation bill.",
      "C) Gianola votes for the school bill.",
      "D) Gianola votes against the tax bill.",
      "E) Herstein votes for the school bill."
    ],
    "raw_logic_programs": [
      "# Declarations\ncouncil_members = EnumSort([Fu, Gianola, Herstein])\nbills = EnumSort([recreation_bill, school_bill, tax_bill])\nvotes = Function([council_members, bills] -> [bool])\n\n# Constraints\nForAll([m:council_members], Count([b:bills], votes(m, b)) == 3) ::: the council members vote on exactly three bills\nForAll([m:council_members], Count([b:bills], votes(m, b)) >= 1) ::: Each member of the council votes for at least one of the bills and against at least one of the bills\nAnd(votes(Fu, recreation_bill), votes(Fu, school_bill)) ::: Fu votes for the recreation bill and against the school bill\nAnd(votes(Gianola, recreation_bill), votes(Gianola, school_bill)) ::: Exactly two members of the council vote for the recreation bill\nAnd(votes(Gianola, school_bill), votes(Gianola, tax_bill)) ::: Exactly one member of the council votes for the school bill\nAnd(votes(Herstein, recreation_bill), votes(Herstein, tax_bill)) ::: Exactly one member of the council votes for the tax bill\nvotes(Gianola, recreation_bill) ::: Gianola votes against the recreation bill\nvotes(Herstein, tax_bill) ::: Herstein votes against the tax bill\n\n# Options\nQuestion ::: If Gianola votes for exactly two of the three bills, which one of the following statements must be true?\nis_valid(Exists([b:bills], votes(Fu, b))) ::: (A)\nis_valid(Exists([b:bills], votes(Gianola, b))) ::: (B)\nis_valid(Exists([b:bills], votes(Gianola, b))) ::: (C)\nis_valid(Exists([b:bills], votes(Gianola, b))) ::: (D)\nis_valid(Exists([b:bills], votes(Herstein, b))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_199906_2-G_4_23",
    "context": "Morrisville's town council has exactly three members: Fu, Gianola, and Herstein. During one week, the council members vote on exactly three bills: a recreation bill, a school bill, and a tax bill. Each council member votes either for or against each bill. The following is known: Each member of the council votes for at least one of the bills and against at least one of the bills. Exactly two members of the council vote for the recreation bill. Exactly one member of the council votes for the school bill. Exactly one member of the council votes for the tax bill. Fu votes for the recreation bill and against the school bill. Gianola votes against the recreation bill. Herstein votes against the tax bill.",
    "question": "If one of the members of the council votes against exactly the same bills as does another member of the council, then which one of the following statements must be true?",
    "answer": "E",
    "options": [
      "A) Fu votes for the tax bill.",
      "B) Gianola votes for the recreation bill.",
      "C) Gianola votes against the school bill.",
      "D) Gianola votes for exactly one bill",
      "E) Herstein votes for exactly one bill."
    ],
    "raw_logic_programs": [
      "# Declarations\nmembers = EnumSort([Fu, Gianola, Herstein])\nbills = EnumSort([recreation, school, tax])\nvotes = Function([members, bills] -> [bool])\n\n# Constraints\nForAll([m:members], Count([b:bills], votes(m, b)) == 2) ::: Each member of the council votes for at least one of the bills and against at least one of the bills\nAnd(votes(Fu, recreation), votes(Fu, school)) ::: Exactly two members of the council vote for the recreation bill\nAnd(votes(Fu, school), votes(Fu, tax)) ::: Exactly one member of the council votes for the school bill\nAnd(votes(Fu, tax), votes(Fu, recreation)) ::: Exactly one member of the council votes for the tax bill\nvotes(Fu, recreation) ::: Fu votes for the recreation bill and against the school bill\nNot(votes(Gianola, recreation)) ::: Gianola votes against the recreation bill\nNot(votes(Herstein, tax)) ::: Herstein votes against the tax bill\n\n# Options\nQuestion ::: If one of the members of the council votes against exactly the same bills as does another member of the council, then which one of the following statements must be true?\nis_valid(Exists([m:members], And(votes(m, recreation), votes(m, school), votes(m, tax)))) ::: (A)\nis_valid(Exists([m:members], And(Not(votes(m, recreation)), votes(m, school), votes(m, tax)))) ::: (B)\nis_valid(Exists([m:members], And(votes(m, recreation), Not(votes(m, school)), votes(m, tax)))) ::: (C)\nis_valid(Exists([m:members], And(Not(votes(m, recreation)), Not(votes(m, school)), votes(m, tax)))) ::: (D)\nis_valid(Exists([m:members], And(votes(m, recreation), votes(m, school), Not(votes(m, tax))))) ::: (E)\n------\nProblem:\nA certain company has"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_1_1",
    "context": "On a Tuesday, an accountant has exactly seven bills—numbered 1 through 7—to pay by Thursday of the same week. The accountant will pay each bill only once according to the following rules: Either three or four of the seven bills must be paid on Wednesday, the rest on Thursday. Bill 1 cannot be paid on the same day as bill 5. Bill 2 must be paid on Thursday. Bill 4 must be paid on the same day as bill 7. If bill 6 is paid on Wednesday, bill 7 must be paid on Thursday.",
    "question": "If exactly four bills are paid on Wednesday, then those four bills could be",
    "answer": "D",
    "options": [
      "A) 1, 3, 4, and 6",
      "B) 1, 3, 5, and 6",
      "C) 2, 4, 5, and 7",
      "D) 3, 4, 5, and 7",
      "E) 3, 4, 6, and 7"
    ],
    "raw_logic_programs": [
      "# Declares\nbills = EnumSort([1, 2, 3, 4, 5, 6, 7])\ndays = EnumSort([Wednesday, Thursday])\npaid = Function([bills, days] -> [bool])\n\n# Constraints\nForAll([b:bills], Count([d:days], paid(b, d)) == 1) ::: The accountant will pay each bill only once\nAnd(Count([b:bills], paid(b, Wednesday)) == 3, Count([b:bills], paid(b, Wednesday)) == 4) ::: Either three or four of the seven bills must be paid on Wednesday, the rest on Thursday\nImplies(paid(1, Wednesday), Not(paid(5, Wednesday))) ::: Bill 1 cannot be paid on the same day as bill 5\npaid(2, Thursday) ::: Bill 2 must be paid on Thursday\npaid(4, Thursday) ::: Bill 4 must be paid on the same day as bill 7\nImplies(paid(6, Wednesday), Not(paid(7, Wednesday))) ::: If bill 6 is paid on Wednesday, bill 7 must be paid on Thursday\n\n# Options\nQuestion ::: If exactly four bills are paid on Wednesday, then those four bills could be\nis_exception(is_sat(And(paid(1, Wednesday), paid(3, Wednesday), paid(4, Wednesday), paid(6, Wednesday)))) ::: A) 1, 3, 4, and 6\nis_exception(is_sat(And(paid(1, Wednesday), paid(3, Wednesday), paid(5, Wednesday), paid(6, Wednesday)))) ::: B) 1, 3, 5, and 6\nis_exception(is_sat(And(paid(2, Wednesday), paid(4, Wednesday), paid(5, Wednesday), paid(7, Wednesday)))) ::: C) 2, 4, 5, and 7\nis_exception(is_sat(And(pa"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_1_2",
    "context": "On a Tuesday, an accountant has exactly seven bills—numbered 1 through 7—to pay by Thursday of the same week. The accountant will pay each bill only once according to the following rules: Either three or four of the seven bills must be paid on Wednesday, the rest on Thursday. Bill 1 cannot be paid on the same day as bill 5. Bill 2 must be paid on Thursday. Bill 4 must be paid on the same day as bill 7. If bill 6 is paid on Wednesday, bill 7 must be paid on Thursday.",
    "question": "Which one of the following is a complete and accurate list of the bills any one of which could be among the bills paid on Wednesday?",
    "answer": "C",
    "options": [
      "A) 3, 5, and 6",
      "B) 1, 3, 4, 6, and 7",
      "C) 1, 3, 4, 5, 6, and 7",
      "D) 2, 3, 4, 5, 6, and 7",
      "E) 1, 2, 3, 4, 5, 6, and 7"
    ],
    "raw_logic_programs": [
      "# Declares\nbills = EnumSort([1, 2, 3, 4, 5, 6, 7])\npaid = Function([bills, days] -> [bool])\ndays = EnumSort([Wednesday, Thursday])\n\n# Constraints\nForAll([b:bills], Count([d:days], paid(b, d)) == 1) ::: The accountant will pay each bill only once\nAnd(Count([b:bills], paid(b, Wednesday)) == 3, Count([b:bills], paid(b, Wednesday)) == 4) ::: Either three or four of the seven bills must be paid on Wednesday, the rest on Thursday\nImplies(paid(1, d), Not(paid(5, d))) ::: Bill 1 cannot be paid on the same day as bill 5\npaid(2, Thursday) ::: Bill 2 must be paid on Thursday\npaid(4, d) == paid(7, d) ::: Bill 4 must be paid on the same day as bill 7\nImplies(paid(6, Wednesday), paid(7, Thursday)) ::: If bill 6 is paid on Wednesday, bill 7 must be paid on Thursday\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the bills any one of which could be among the bills paid on Wednesday?\nis_valid(Exists([b:bills], And(paid(b, Wednesday), b == 3))) ::: A) 3, 5, and 6\nis_valid(Exists([b:bills], And(paid(b, Wednesday), b == 1))) ::: B) 1, 3, 4, 6, and 7\nis_valid(Exists([b:bills], And(paid(b, Wednesday), b == 4))) ::: C) 1, 3, 4, 5, 6, and 7\nis_valid(Exists([b:bills], And(paid(b, Wednesday), b == 2))) ::: D) 2, 3, 4, 5, 6, and"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_1_3",
    "context": "On a Tuesday, an accountant has exactly seven bills—numbered 1 through 7—to pay by Thursday of the same week. The accountant will pay each bill only once according to the following rules: Either three or four of the seven bills must be paid on Wednesday, the rest on Thursday. Bill 1 cannot be paid on the same day as bill 5. Bill 2 must be paid on Thursday. Bill 4 must be paid on the same day as bill 7. If bill 6 is paid on Wednesday, bill 7 must be paid on Thursday.",
    "question": "If bill 2 and bill 6 are paid on different days from each other, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Exactly three bills are paid on Wednesday.",
      "B) Exactly three bills are paid on Thursday.",
      "C) Bill 1 is paid on the same day as bill 4.",
      "D) Bill 2 is paid on the same day as bill 3.",
      "E) Bill 5 is paid on the same day as bill 7."
    ],
    "raw_logic_programs": [
      "# Declarations\nbills = EnumSort([1, 2, 3, 4, 5, 6, 7])\npaid = Function([bills, days] -> [bool])\ndays = EnumSort([Wednesday, Thursday])\n\n# Constraints\nForAll([b:bills], Count([d:days], paid(b, d)) == 1) ::: The accountant will pay each bill only once\nAnd(Count([b:bills], paid(b, Wednesday)) == 3, Count([b:bills], paid(b, Wednesday)) == 4) ::: Either three or four of the seven bills must be paid on Wednesday, the rest on Thursday\nImplies(paid(1, d), Not(paid(5, d))) ::: Bill 1 cannot be paid on the same day as bill 5\npaid(2, Thursday) ::: Bill 2 must be paid on Thursday\npaid(4, d) == paid(7, d) ::: Bill 4 must be paid on the same day as bill 7\nImplies(paid(6, Wednesday), paid(7, Thursday)) ::: If bill 6 is paid on Wednesday, bill 7 must be paid on Thursday\n\n# Options\nQuestion ::: If bill 2 and bill 6 are paid on different days from each other, which one of the following must be true?\nis_valid(Exists([b:bills], Count([d:days], paid(b, d)) == 3))) ::: A) Exactly three bills are paid on Wednesday.\nis_valid(Exists([b:bills], Count([d:days], paid(b, d)) == 3))) ::: B) Exactly three bills are paid on Thursday.\nis_valid(Exists([b:bills], paid(1, d) == paid(4, d))) ::: C) Bill 1 is paid on the same day as bill 4.\nis_valid(Exists([b:bills], paid(2, d) == paid(3, d))) ::: D) Bill 2 is paid on the same day as bill 3.\nis_valid(Exists([b:bills], paid(5, d"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_1_4",
    "context": "On a Tuesday, an accountant has exactly seven bills—numbered 1 through 7—to pay by Thursday of the same week. The accountant will pay each bill only once according to the following rules: Either three or four of the seven bills must be paid on Wednesday, the rest on Thursday. Bill 1 cannot be paid on the same day as bill 5. Bill 2 must be paid on Thursday. Bill 4 must be paid on the same day as bill 7. If bill 6 is paid on Wednesday, bill 7 must be paid on Thursday.",
    "question": "If bill 6 is paid on Wednesday, which one of the following bills must also be paid on Wednesday?",
    "answer": "B",
    "options": [
      "A) 1",
      "B) 3",
      "C) 4",
      "D) 5",
      "E) 7"
    ],
    "raw_logic_programs": [
      "# Declarations\nbills = EnumSort([1, 2, 3, 4, 5, 6, 7])\npaid = Function([bills, days] -> [bool])\ndays = EnumSort([Wednesday, Thursday])\n\n# Constraints\nForAll([b:bills], Count([d:days], paid(b, d)) == 1) ::: The accountant will pay each bill only once\nAnd(Count([b:bills], paid(b, Wednesday)) == 3, Count([b:bills], paid(b, Wednesday)) == 4) ::: Either three or four of the seven bills must be paid on Wednesday, the rest on Thursday\nImplies(paid(1, Wednesday), Not(paid(5, Wednesday))) ::: Bill 1 cannot be paid on the same day as bill 5\npaid(2, Thursday) ::: Bill 2 must be paid on Thursday\npaid(4, Wednesday) == paid(7, Wednesday) ::: Bill 4 must be paid on the same day as bill 7\nImplies(paid(6, Wednesday), paid(7, Thursday)) ::: If bill 6 is paid on Wednesday, bill 7 must be paid on Thursday\n\n# Options\nQuestion ::: If bill 6 is paid on Wednesday, which one of the following bills must also be paid on Wednesday?\nis_sat(paid(1, Wednesday)) ::: A) 1\nis_sat(paid(3, Wednesday)) ::: B) 3\nis_sat(paid(4, Wednesday)) ::: C) 4\nis_sat(paid(5, Wednesday)) ::: D) 5\nis_sat(paid(7, Wednesday)) ::: E) 7\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who work in pairs to complete a project. The following conditions apply: F and G work together. H and I work together. J and K work together. F and H work together.\nQuestion:\nWhich one of the following pairs of employees"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_1_5",
    "context": "On a Tuesday, an accountant has exactly seven bills—numbered 1 through 7—to pay by Thursday of the same week. The accountant will pay each bill only once according to the following rules: Either three or four of the seven bills must be paid on Wednesday, the rest on Thursday. Bill 1 cannot be paid on the same day as bill 5. Bill 2 must be paid on Thursday. Bill 4 must be paid on the same day as bill 7. If bill 6 is paid on Wednesday, bill 7 must be paid on Thursday.",
    "question": "If bill 4 is paid on Thursday, which one of the following is a pair of bills that could also be paid on Thursday?",
    "answer": "B",
    "options": [
      "A) 1 and 5",
      "B) 1 and 7",
      "C) 3 and 5",
      "D) 3 and 6",
      "E) 6 and 7"
    ],
    "raw_logic_programs": [
      "# Declarations\nbills = EnumSort([1, 2, 3, 4, 5, 6, 7])\ndays = EnumSort([Wednesday, Thursday])\npaid = Function([bills, days] -> [bool])\n\n# Constraints\nForAll([b:bills], Count([d:days], paid(b, d)) == 1) ::: The accountant will pay each bill only once\nAnd(Count([b:bills], paid(b, Wednesday)) == 3, Count([b:bills], paid(b, Wednesday)) == 4) ::: Either three or four of the seven bills must be paid on Wednesday, the rest on Thursday\nImplies(paid(1, Wednesday), Not(paid(5, Wednesday))) ::: Bill 1 cannot be paid on the same day as bill 5\npaid(2, Thursday) ::: Bill 2 must be paid on Thursday\npaid(4, Thursday) ::: Bill 4 must be paid on the same day as bill 7\nImplies(paid(6, Wednesday), Not(paid(7, Wednesday))) ::: If bill 6 is paid on Wednesday, bill 7 must be paid on Thursday\npaid(4, Thursday) ::: If bill 4 is paid on Thursday\n\n# Options\nQuestion ::: If bill 4 is paid on Thursday, which one of the following is a pair of bills that could also be paid on Thursday?\nis_sat(And(paid(1, Thursday), paid(5, Thursday))) ::: A) 1 and 5\nis_sat(And(paid(1, Thursday), paid(7, Thursday))) ::: B) 1 and 7\nis_sat(And(paid(3, Thursday), paid(5, Thursday))) ::: C) 3 and 5\nis_sat(And(paid(3, Thursday), paid(6, Thursday))) ::: D) 3 and 6\nis_sat(And(paid(6, Thursday), paid(7, Thursday)))"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_1_6",
    "context": "On a Tuesday, an accountant has exactly seven bills—numbered 1 through 7—to pay by Thursday of the same week. The accountant will pay each bill only once according to the following rules: Either three or four of the seven bills must be paid on Wednesday, the rest on Thursday. Bill 1 cannot be paid on the same day as bill 5. Bill 2 must be paid on Thursday. Bill 4 must be paid on the same day as bill 7. If bill 6 is paid on Wednesday, bill 7 must be paid on Thursday.",
    "question": "Which one of the following statements must be true?",
    "answer": "C",
    "options": [
      "A) If bill 2 is paid on Thursday, bill 3 is paid on Wednesday.",
      "B) If bill 4 is paid on Thursday, bill 1 is paid on Wednesday.",
      "C) If bill 4 is paid on Thursday, bill 3 is paid on Wednesday.",
      "D) If bill 6 is paid on Thursday, bill 3 is also paid on Thursday.",
      "E) If bill 6 is paid on Thursday, bill 4 is also paid on Thursday."
    ],
    "raw_logic_programs": [
      "# Declarations\nbills = EnumSort([1, 2, 3, 4, 5, 6, 7])\ndays = EnumSort([Wednesday, Thursday])\npaid = Function([bills, days] -> [bool])\n\n# Constraints\nForAll([b:bills], Count([d:days], paid(b, d)) == 1) ::: The accountant will pay each bill only once\nAnd(Count([b:bills], paid(b, Wednesday)) == 3, Count([b:bills], paid(b, Wednesday)) == 4) ::: Either three or four of the seven bills must be paid on Wednesday, the rest on Thursday\nImplies(paid(1, Wednesday), Not(paid(5, Wednesday))) ::: Bill 1 cannot be paid on the same day as bill 5\npaid(2, Thursday) ::: Bill 2 must be paid on Thursday\npaid(4, Thursday) ::: Bill 4 must be paid on the same day as bill 7\nImplies(paid(6, Wednesday), paid(7, Thursday)) ::: If bill 6 is paid on Wednesday, bill 7 must be paid on Thursday\n\n# Options\nQuestion ::: Which one of the following statements must be true?\nis_valid(Exists([b:bills], And(paid(b, Thursday), paid(3, Wednesday)))) ::: (A)\nis_valid(Exists([b:bills], And(paid(b, Thursday), paid(1, Wednesday)))) ::: (B)\nis_valid(Exists([b:bills], And(paid(b, Thursday), paid(3, Wednesday)))) ::: (C)\nis_valid(Exists([b:bills], And(paid(b, Thursday), paid(6, Thursday)))) ::: (D)\nis_valid(Exists([b:bills], And(paid(b, Thursday), paid(4, Thursday)))) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—F, G, H, I, J, and K—who"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_2_7",
    "context": "Two mannequins—1 and 2—will be dressed for display in outfits chosen from ten articles of clothing. Each article is in exactly one of three colors: navy, red, or yellow. There are three hats—one in each color; three jackets—one in each color; three skirts—one in each color; and one red tie. Each mannequin wears exactly one of the hats, one of the jackets, and one of the skirts. Furthermore, their outfits must meet the following restrictions: Neither mannequin wears all three colors. Each mannequin wears a hat in a different color from the jacket it wears. Mannequin 2 wears the navy skirt. Mannequin 1 wears the tie.",
    "question": "Which one of the following could be complete outfits for the two mannequins?",
    "answer": "D",
    "options": [
      "A) mannequin 1: navy hat, red jacket, yellow skirt, red tie mannequin 2: red hat, navy jacket, navy skirt",
      "B) mannequin 1: red hat, red jacket, yellow skirt, red tie mannequin 2: yellow hat, navy jacket, navy skirt",
      "C) mannequin 1: red hat, yellow jacket, red skirt, red tie mannequin 2: yellow hat, navy jacket, yellow skirt",
      "D) mannequin 1: yellow hat, red jacket, yellow skirt, red tie mannequin 2: red hat, navy jacket, navy skirt",
      "E) mannequin 1: yellow hat, yellow jacket, red skirt mannequin 2: red hat, navy jacket, navy skirt"
    ],
    "raw_logic_programs": [
      "# Declarations\nmannequins = EnumSort([1, 2])\ncolors = EnumSort([navy, red, yellow])\nclothes = EnumSort([hats, jackets, skirts, tie])\nwears = Function([mannequins, clothes] -> [colors])\n\n# Constraints\nForAll([m:mannequins], Count([c:colors], wears(m, c)) == 3) ::: Each mannequin wears exactly one of the hats, one of the jackets, and one of the skirts\nForAll([m:mannequins], Count([c:colors], wears(m, c) == c) == 3) ::: Neither mannequin wears all three colors\nForAll([m:mannequins], Implies(wears(m, hats) == wears(m, jackets), wears(m, skirts)!= wears(m, jackets))) ::: Each mannequin wears a hat in a different color from the jacket it wears\nwears(2, skirts) == navy ::: Mannequin 2 wears the navy skirt\nwears(1, tie) == red ::: Mannequin 1 wears the tie\n\n# Options\nQuestion ::: Which one of the following could be complete outfits for the two mannequins?\nis_sat(And(wears(1, hats) == navy, wears(1, jackets) == red, wears(1, skirts) == yellow, wears(1, tie) == red, wears(2, hats) == red, wears(2, jackets) == navy, wears(2, skirts) == navy)) ::: A) mannequin 1: navy hat, red jacket, yellow skirt, red tie mannequin 2: red hat, navy jacket, navy skirt\nis_sat(And(wears(1, hats) == red, wears(1, jackets) == red, wears(1, skirts) == yellow, wears(1, tie) == red, wears(2, hats) == yellow, wears(2, jackets) == navy, wears"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_2_8",
    "context": "Two mannequins—1 and 2—will be dressed for display in outfits chosen from ten articles of clothing. Each article is in exactly one of three colors: navy, red, or yellow. There are three hats—one in each color; three jackets—one in each color; three skirts—one in each color; and one red tie. Each mannequin wears exactly one of the hats, one of the jackets, and one of the skirts. Furthermore, their outfits must meet the following restrictions: Neither mannequin wears all three colors. Each mannequin wears a hat in a different color from the jacket it wears. Mannequin 2 wears the navy skirt. Mannequin 1 wears the tie.",
    "question": "Which one of the following could be true of the mannequins' outfits?",
    "answer": "E",
    "options": [
      "A) Mannequin 1 wears the navy jacket and the yellow skirt.",
      "B) Mannequin 2 wears the red hat and the red jacket.",
      "C) Mannequin 1 wears exactly one red article of clothing.",
      "D) Mannequin 1 wears exactly three yellow articles of clothing.",
      "E) Mannequin 2 wears no red articles of clothing."
    ],
    "raw_logic_programs": [
      "# Declarations\nmannequins = EnumSort([1, 2])\ncolors = EnumSort([navy, red, yellow])\nclothes = EnumSort([hats, jackets, skirts, tie])\nwears = Function([mannequins, clothes] -> [colors])\n\n# Constraints\nForAll([m:mannequins], Count([c:colors], wears(m, c)) == 3) ::: Each mannequin wears exactly one of the hats, one of the jackets, and one of the skirts\nForAll([m:mannequins], Count([c:colors], wears(m, c) == c) <= 3) ::: Neither mannequin wears all three colors\nForAll([m:mannequins], wears(m, hats)!= wears(m, jackets)) ::: Each mannequin wears a hat in a different color from the jacket it wears\nwears(2, skirts) == navy ::: Mannequin 2 wears the navy skirt\nwears(1, tie) == red ::: Mannequin 1 wears the tie\n\n# Options\nQuestion ::: Which one of the following could be true of the mannequins' outfits?\nis_valid(Exists([m:mannequins], wears(m, jackets) == navy)) ::: (A)\nis_valid(Exists([m:mannequins], wears(m, hats) == red)) ::: (B)\nis_valid(Exists([m:mannequins], wears(m, skirts) == red)) ::: (C)\nis_valid(Exists([m:mannequins], wears(m, tie) == red)) ::: (D)\nis_valid(Exists([m:mannequins], wears(m, hats) == red)) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—is to be divided into two teams of three people each. Each team will be assigned to one of two tasks—either task 1 or task 2. The following conditions apply: A and B are on the same team. C and D are on the"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_2_9",
    "context": "Two mannequins—1 and 2—will be dressed for display in outfits chosen from ten articles of clothing. Each article is in exactly one of three colors: navy, red, or yellow. There are three hats—one in each color; three jackets—one in each color; three skirts—one in each color; and one red tie. Each mannequin wears exactly one of the hats, one of the jackets, and one of the skirts. Furthermore, their outfits must meet the following restrictions: Neither mannequin wears all three colors. Each mannequin wears a hat in a different color from the jacket it wears. Mannequin 2 wears the navy skirt. Mannequin 1 wears the tie.",
    "question": "If mannequin 1 wears the navy jacket, which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Mannequin 1 wears the yellow hat.",
      "B) Mannequin 1 wears the yellow skirt.",
      "C) Mannequin 2 wears the red hat.",
      "D) Mannequin 2 wears the yellow hat.",
      "E) Mannequin 2 wears the yellow jacket."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_2_10",
    "context": "Two mannequins—1 and 2—will be dressed for display in outfits chosen from ten articles of clothing. Each article is in exactly one of three colors: navy, red, or yellow. There are three hats—one in each color; three jackets—one in each color; three skirts—one in each color; and one red tie. Each mannequin wears exactly one of the hats, one of the jackets, and one of the skirts. Furthermore, their outfits must meet the following restrictions: Neither mannequin wears all three colors. Each mannequin wears a hat in a different color from the jacket it wears. Mannequin 2 wears the navy skirt. Mannequin 1 wears the tie.",
    "question": "If all four of the red articles of clothing are included in the two mannequins' outfits, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Mannequin 1 wears the red hat.",
      "B) Mannequin 1 wears the yellow jacket.",
      "C) Mannequin 2 wears the navy jacket.",
      "D) Mannequin 1 wears no navy articles of clothing.",
      "E) Mannequin 2 wears no yellow articles of clothing."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_2_11",
    "context": "Two mannequins—1 and 2—will be dressed for display in outfits chosen from ten articles of clothing. Each article is in exactly one of three colors: navy, red, or yellow. There are three hats—one in each color; three jackets—one in each color; three skirts—one in each color; and one red tie. Each mannequin wears exactly one of the hats, one of the jackets, and one of the skirts. Furthermore, their outfits must meet the following restrictions: Neither mannequin wears all three colors. Each mannequin wears a hat in a different color from the jacket it wears. Mannequin 2 wears the navy skirt. Mannequin 1 wears the tie.",
    "question": "If mannequin 2 wears the red jacket, then mannequin 1 must wear the",
    "answer": "B",
    "options": [
      "A) navy hat",
      "B) red hat",
      "C) yellow hat",
      "D) red skirt",
      "E) yellow skirt"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_2_12",
    "context": "Two mannequins—1 and 2—will be dressed for display in outfits chosen from ten articles of clothing. Each article is in exactly one of three colors: navy, red, or yellow. There are three hats—one in each color; three jackets—one in each color; three skirts—one in each color; and one red tie. Each mannequin wears exactly one of the hats, one of the jackets, and one of the skirts. Furthermore, their outfits must meet the following restrictions: Neither mannequin wears all three colors. Each mannequin wears a hat in a different color from the jacket it wears. Mannequin 2 wears the navy skirt. Mannequin 1 wears the tie.",
    "question": "If all three of the yellow articles of clothing are included in the two mannequins' outfits, which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Mannequin 1 wears the navy jacket.",
      "B) Mannequin 1 wears the yellow jacket.",
      "C) Mannequin 1 wears the red skirt.",
      "D) Mannequin 2 wears the red hat.",
      "E) Mannequin 2 wears the red jacket."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_2_13",
    "context": "Two mannequins—1 and 2—will be dressed for display in outfits chosen from ten articles of clothing. Each article is in exactly one of three colors: navy, red, or yellow. There are three hats—one in each color; three jackets—one in each color; three skirts—one in each color; and one red tie. Each mannequin wears exactly one of the hats, one of the jackets, and one of the skirts. Furthermore, their outfits must meet the following restrictions: Neither mannequin wears all three colors. Each mannequin wears a hat in a different color from the jacket it wears. Mannequin 2 wears the navy skirt. Mannequin 1 wears the tie.",
    "question": "If mannequin 1 wears the skirt that is the same color as the jacket that mannequin 2 wears, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Mannequin 1 wears the yellow hat.",
      "B) Mannequin 1 wears the yellow jacket.",
      "C) Mannequin 2 wears the navy hat.",
      "D) Mannequin 2 wears the red hat.",
      "E) Mannequin 2 wears the red jacket."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_3_14",
    "context": "A college dean will present seven awards for outstanding language research. The awards—one for French, one for German, one for Hebrew, one for Japanese, one for Korean, one for Latin, and one for Swahili—must be presented consecutively, one at a time, in conformity with the following constraints: The German award is not presented first. The Hebrew award is presented at some time before the Korean award is presented. The Latin award is presented at some time before the Japanese award is presented. The French award is presented either immediately before or immediately after the Hebrew award is presented. The Korean award is presented either immediately before or immediately after the Latin award is presented.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) The French award is presented at some time before the Japanese award is presented.",
      "B) The French award is presented at some time before the Swahili award is presented.",
      "C) The German award is presented at some time before the Korean award is presented.",
      "D) The German award is presented at some time before the Swahili award is presented.",
      "E) The Swahili award is presented at some time before the Hebrew award is presented."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_3_15",
    "context": "A college dean will present seven awards for outstanding language research. The awards—one for French, one for German, one for Hebrew, one for Japanese, one for Korean, one for Latin, and one for Swahili—must be presented consecutively, one at a time, in conformity with the following constraints: The German award is not presented first. The Hebrew award is presented at some time before the Korean award is presented. The Latin award is presented at some time before the Japanese award is presented. The French award is presented either immediately before or immediately after the Hebrew award is presented. The Korean award is presented either immediately before or immediately after the Latin award is presented.",
    "question": "If the Hebrew award is presented fourth, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The French award is presented fifth.",
      "B) The German award is presented third.",
      "C) The Japanese award is presented sixth.",
      "D) The Korean award is presented fifth.",
      "E) The Swahili award is presented first."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_3_16",
    "context": "A college dean will present seven awards for outstanding language research. The awards—one for French, one for German, one for Hebrew, one for Japanese, one for Korean, one for Latin, and one for Swahili—must be presented consecutively, one at a time, in conformity with the following constraints: The German award is not presented first. The Hebrew award is presented at some time before the Korean award is presented. The Latin award is presented at some time before the Japanese award is presented. The French award is presented either immediately before or immediately after the Hebrew award is presented. The Korean award is presented either immediately before or immediately after the Latin award is presented.",
    "question": "If the German award is presented third, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) The French award is presented fourth.",
      "B) The Japanese award is presented fifth.",
      "C) The Japanese award is presented sixth.",
      "D) The Korean award is presented second.",
      "E) The Swahili award is presented fifth."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_3_17",
    "context": "A college dean will present seven awards for outstanding language research. The awards—one for French, one for German, one for Hebrew, one for Japanese, one for Korean, one for Latin, and one for Swahili—must be presented consecutively, one at a time, in conformity with the following constraints: The German award is not presented first. The Hebrew award is presented at some time before the Korean award is presented. The Latin award is presented at some time before the Japanese award is presented. The French award is presented either immediately before or immediately after the Hebrew award is presented. The Korean award is presented either immediately before or immediately after the Latin award is presented.",
    "question": "The earliest that the Japanese award could be presented is",
    "answer": "C",
    "options": [
      "A) third",
      "B) fourth",
      "C) fifth",
      "D) sixth",
      "E) seventh"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_3_18",
    "context": "A college dean will present seven awards for outstanding language research. The awards—one for French, one for German, one for Hebrew, one for Japanese, one for Korean, one for Latin, and one for Swahili—must be presented consecutively, one at a time, in conformity with the following constraints: The German award is not presented first. The Hebrew award is presented at some time before the Korean award is presented. The Latin award is presented at some time before the Japanese award is presented. The French award is presented either immediately before or immediately after the Hebrew award is presented. The Korean award is presented either immediately before or immediately after the Latin award is presented.",
    "question": "If the Japanese award is presented at some time before the Swahili award is presented, any of the following could be true EXCEPT:",
    "answer": "A",
    "options": [
      "A) The German award is presented immediately before the French award is presented.",
      "B) The German award is presented immediately before the Japanese award is presented.",
      "C) The Hebrew award is presented immediately before the Latin award is presented.",
      "D) The Korean award is presented immediately before the Japanese award is presented.",
      "E) The Swahili award is presented immediately before the German award is presented."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_3_19",
    "context": "A college dean will present seven awards for outstanding language research. The awards—one for French, one for German, one for Hebrew, one for Japanese, one for Korean, one for Latin, and one for Swahili—must be presented consecutively, one at a time, in conformity with the following constraints: The German award is not presented first. The Hebrew award is presented at some time before the Korean award is presented. The Latin award is presented at some time before the Japanese award is presented. The French award is presented either immediately before or immediately after the Hebrew award is presented. The Korean award is presented either immediately before or immediately after the Latin award is presented.",
    "question": "The order in which the awards are presented is completely determined if which one of the following is true?",
    "answer": "D",
    "options": [
      "A) The French award is presented immediately before the German award is presented, and the Korean award is presented immediately before the Latin award is presented.",
      "B) The French award is presented immediately before the Hebrew award is presented, and the Hebrew award is presented immediately before the Korean award is presented.",
      "C) The French award is presented immediately before the Latin award is presented, and the Korean award is presented immediately before the Japanese award is presented.",
      "D) The German award is presented immediately before the French award is presented, and the Latin award is presented immediately before the Japanese award is presented.",
      "E) The German award is presented immediately before the Korean award is presented, and the Hebrew award is presented immediately before the French award is presented."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_4_20",
    "context": "Exactly six piano classes are given sequentially on Monday: two with more than one student and four with exactly one student. Exactly four females—Gimena, Holly, Iyanna, and Kate—and five males—Leung, Nate, Oscar, Pedro, and Saul—attend these classes. Each student attends exactly one class. The following must obtain: Iyanna and Leung together constitute one class. Pedro and exactly two others together constitute one class. Kate is the first female, but not the first student, to attend a class. Gimena's class is at some time after Iyanna's but at sometime before Pedro's. Oscar's class is at some time after Gimena's.",
    "question": "Which one of the following students could attend the first class?",
    "answer": "E",
    "options": [
      "A) Holly",
      "B) Leung",
      "C) Oscar",
      "D) Pedro",
      "E) Saul"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_4_21",
    "context": "Exactly six piano classes are given sequentially on Monday: two with more than one student and four with exactly one student. Exactly four females—Gimena, Holly, Iyanna, and Kate—and five males—Leung, Nate, Oscar, Pedro, and Saul—attend these classes. Each student attends exactly one class. The following must obtain: Iyanna and Leung together constitute one class. Pedro and exactly two others together constitute one class. Kate is the first female, but not the first student, to attend a class. Gimena's class is at some time after Iyanna's but at sometime before Pedro's. Oscar's class is at some time after Gimena's.",
    "question": "Which one of the following is a complete and accurate list of classes any one of which could be the class Gimena attends?",
    "answer": "A",
    "options": [
      "A) the fourth, the fifth",
      "B) the fourth, the sixth",
      "C) the second, the fourth, the fifth",
      "D) the third, the fifth, the sixth",
      "E) the second, the third, the fourth"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_4_22",
    "context": "Exactly six piano classes are given sequentially on Monday: two with more than one student and four with exactly one student. Exactly four females—Gimena, Holly, Iyanna, and Kate—and five males—Leung, Nate, Oscar, Pedro, and Saul—attend these classes. Each student attends exactly one class. The following must obtain: Iyanna and Leung together constitute one class. Pedro and exactly two others together constitute one class. Kate is the first female, but not the first student, to attend a class. Gimena's class is at some time after Iyanna's but at sometime before Pedro's. Oscar's class is at some time after Gimena's.",
    "question": "Which one of the following pairs of students could be in the class with Pedro?",
    "answer": "B",
    "options": [
      "A) Gimena and Holly",
      "B) Holly and Saul",
      "C) Kate and Nate",
      "D) Leung and Oscar",
      "E) Nate and Saul"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_4_23",
    "context": "Exactly six piano classes are given sequentially on Monday: two with more than one student and four with exactly one student. Exactly four females—Gimena, Holly, Iyanna, and Kate—and five males—Leung, Nate, Oscar, Pedro, and Saul—attend these classes. Each student attends exactly one class. The following must obtain: Iyanna and Leung together constitute one class. Pedro and exactly two others together constitute one class. Kate is the first female, but not the first student, to attend a class. Gimena's class is at some time after Iyanna's but at sometime before Pedro's. Oscar's class is at some time after Gimena's.",
    "question": "If Oscar and Pedro do not attend the same class as each other, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Gimena attends the fifth class.",
      "B) Holly attends the third class.",
      "C) Iyanna attends the fourth class.",
      "D) Nate attends the fifth class.",
      "E) Saul attends the second class."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199910_3-G_4_24",
    "context": "Exactly six piano classes are given sequentially on Monday: two with more than one student and four with exactly one student. Exactly four females—Gimena, Holly, Iyanna, and Kate—and five males—Leung, Nate, Oscar, Pedro, and Saul—attend these classes. Each student attends exactly one class. The following must obtain: Iyanna and Leung together constitute one class. Pedro and exactly two others together constitute one class. Kate is the first female, but not the first student, to attend a class. Gimena's class is at some time after Iyanna's but at sometime before Pedro's. Oscar's class is at some time after Gimena's.",
    "question": "Suppose the condition that Oscar attends a class after Gimena is replaced with the condition that Oscar attends a class before Gimena and after Kate. If all the other conditions remain the same, then which class must Holly attend?",
    "answer": "E",
    "options": [
      "A) the second",
      "B) the third",
      "C) the fourth",
      "D) the fifth",
      "E) the sixth"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_1_1",
    "context": "This morning, a bakery makes exactly one delivery, consisting of exactly six loaves of bread. Each of the loaves is exactly one of three kinds: oatmeal, rye, or wheat, and each is either sliced or unsliced. The loaves that the bakery delivers this morning must be consistent with the following: There are at least two kinds of loaves. There are no more than three rye loaves. There is no unsliced wheat loaf. There is at least one unsliced oatmeal loaf. If two or more of the loaves are unsliced, then at least one of the unsliced loaves is rye.",
    "question": "Which one of the following could be a complete and accurate list of the loaves that the bakery delivers?",
    "answer": "D",
    "options": [
      "A) six unsliced oatmeal loaves",
      "B) five unsliced oatmeal loaves, one sliced rye loaf",
      "C) five unsliced oatmeal loaves, one unsliced wheat loaf",
      "D) four unsliced oatmeal loaves, two unsliced rye loaves",
      "E) four unsliced oatmeal loaves, two sliced wheat loaves"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_1_2",
    "context": "This morning, a bakery makes exactly one delivery, consisting of exactly six loaves of bread. Each of the loaves is exactly one of three kinds: oatmeal, rye, or wheat, and each is either sliced or unsliced. The loaves that the bakery delivers this morning must be consistent with the following: There are at least two kinds of loaves. There are no more than three rye loaves. There is no unsliced wheat loaf. There is at least one unsliced oatmeal loaf. If two or more of the loaves are unsliced, then at least one of the unsliced loaves is rye.",
    "question": "Each of the following could be a complete and accurate list of the unsliced loaves that the bakery delivers EXCEPT:",
    "answer": "A",
    "options": [
      "A) three oatmeal loaves",
      "B) three oatmeal loaves, one rye loaf",
      "C) two oatmeal loaves, two rye loaves",
      "D) two oatmeal loaves, three rye loaves",
      "E) one oatmeal loaf, one rye loaf"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_1_3",
    "context": "This morning, a bakery makes exactly one delivery, consisting of exactly six loaves of bread. Each of the loaves is exactly one of three kinds: oatmeal, rye, or wheat, and each is either sliced or unsliced. The loaves that the bakery delivers this morning must be consistent with the following: There are at least two kinds of loaves. There are no more than three rye loaves. There is no unsliced wheat loaf. There is at least one unsliced oatmeal loaf. If two or more of the loaves are unsliced, then at least one of the unsliced loaves is rye.",
    "question": "Which one of the following statements CANNOT be true?",
    "answer": "C",
    "options": [
      "A) The only unsliced loaves are oatmeal loaves.",
      "B) The only sliced loaves are rye loaves.",
      "C) The only unsliced loaves are rye loaves.",
      "D) The number of sliced loaves is exactly one greater than the number of sliced oatmeal loaves.",
      "E) The number of unsliced loaves is exactly one greater than the number of unsliced oatmeal loaves."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_1_4",
    "context": "This morning, a bakery makes exactly one delivery, consisting of exactly six loaves of bread. Each of the loaves is exactly one of three kinds: oatmeal, rye, or wheat, and each is either sliced or unsliced. The loaves that the bakery delivers this morning must be consistent with the following: There are at least two kinds of loaves. There are no more than three rye loaves. There is no unsliced wheat loaf. There is at least one unsliced oatmeal loaf. If two or more of the loaves are unsliced, then at least one of the unsliced loaves is rye.",
    "question": "Which one of the following statements must be true?",
    "answer": "D",
    "options": [
      "A) At least one of the loaves is rye.",
      "B) At least one of the loaves is wheat.",
      "C) At least one of the loaves is sliced.",
      "D) No more than four oatmeal loaves are sliced.",
      "E) No more than four wheat loaves are sliced."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_1_5",
    "context": "This morning, a bakery makes exactly one delivery, consisting of exactly six loaves of bread. Each of the loaves is exactly one of three kinds: oatmeal, rye, or wheat, and each is either sliced or unsliced. The loaves that the bakery delivers this morning must be consistent with the following: There are at least two kinds of loaves. There are no more than three rye loaves. There is no unsliced wheat loaf. There is at least one unsliced oatmeal loaf. If two or more of the loaves are unsliced, then at least one of the unsliced loaves is rye.",
    "question": "If the bakery delivers exactly four wheat loaves, then the bakery could also deliver",
    "answer": "B",
    "options": [
      "A) one sliced rye loaf and one unsliced rye loaf",
      "B) one sliced oatmeal loaf and one unsliced oatmeal loaf",
      "C) two unsliced rye loaves",
      "D) two unsliced oatmeal loaves",
      "E) two sliced oatmeal loaves"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_2_6",
    "context": "The six messages on an answering machine were each left by one of Fleure, Greta, Hildy, Liam, Pasquale, or Theodore, consistent with the following: At most one person left more than one message. No person left more than three messages. If the first message is Hildy's, the last is Pasquale's. If Greta left any message, Fleure and Pasquale did also. If Fleure left any message, Pasquale and Theodore did also, all of Pasquale's preceding any of Theodore's. If Pasquale left any message, Hildy and Liam did also, all of Hildy's preceding any of Liam's.",
    "question": "Which one of the following could be a complete and accurate list of the messages left on the answering machine, from first to last?",
    "answer": "D",
    "options": [
      "A) Fleure's, Pasquale's, Theodore's, Hildy's, Pasquale's, Liam's",
      "B) Greta's, Pasquale's, Theodore's, Theodore's, Hildy's, Liam's",
      "C) Hildy's, Hildy's, Hildy's, Liam's, Pasquale's, Theodore's",
      "D) Pasquale's, Hildy's, Fleure's, Liam's, Theodore's, Theodore's",
      "E) Pasquale's, Hildy's, Theodore's, Hildy's, Liam's, Liam's"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_2_7",
    "context": "The six messages on an answering machine were each left by one of Fleure, Greta, Hildy, Liam, Pasquale, or Theodore, consistent with the following: At most one person left more than one message. No person left more than three messages. If the first message is Hildy's, the last is Pasquale's. If Greta left any message, Fleure and Pasquale did also. If Fleure left any message, Pasquale and Theodore did also, all of Pasquale's preceding any of Theodore's. If Pasquale left any message, Hildy and Liam did also, all of Hildy's preceding any of Liam's.",
    "question": "The first and last messages on the answering machine could be the first and second messages left by which one of the following?",
    "answer": "A",
    "options": [
      "A) Fleure",
      "B) Hildy",
      "C) Liam",
      "D) Pasquale",
      "E) Theodore"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_2_8",
    "context": "The six messages on an answering machine were each left by one of Fleure, Greta, Hildy, Liam, Pasquale, or Theodore, consistent with the following: At most one person left more than one message. No person left more than three messages. If the first message is Hildy's, the last is Pasquale's. If Greta left any message, Fleure and Pasquale did also. If Fleure left any message, Pasquale and Theodore did also, all of Pasquale's preceding any of Theodore's. If Pasquale left any message, Hildy and Liam did also, all of Hildy's preceding any of Liam's.",
    "question": "If Greta left the fifth message, then which one of the following messages CANNOT have been left by Theodore?",
    "answer": "A",
    "options": [
      "A) the first message",
      "B) the second message",
      "C) the third message",
      "D) the fourth message",
      "E) the sixth message"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_2_9",
    "context": "The six messages on an answering machine were each left by one of Fleure, Greta, Hildy, Liam, Pasquale, or Theodore, consistent with the following: At most one person left more than one message. No person left more than three messages. If the first message is Hildy's, the last is Pasquale's. If Greta left any message, Fleure and Pasquale did also. If Fleure left any message, Pasquale and Theodore did also, all of Pasquale's preceding any of Theodore's. If Pasquale left any message, Hildy and Liam did also, all of Hildy's preceding any of Liam's.",
    "question": "Each of the following must be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) Liam left at least one message.",
      "B) Theodore left at least one message.",
      "C) Hildy left at least one message.",
      "D) Exactly one person left at least two messages.",
      "E) At least four people left messages."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_2_10",
    "context": "The six messages on an answering machine were each left by one of Fleure, Greta, Hildy, Liam, Pasquale, or Theodore, consistent with the following: At most one person left more than one message. No person left more than three messages. If the first message is Hildy's, the last is Pasquale's. If Greta left any message, Fleure and Pasquale did also. If Fleure left any message, Pasquale and Theodore did also, all of Pasquale's preceding any of Theodore's. If Pasquale left any message, Hildy and Liam did also, all of Hildy's preceding any of Liam's.",
    "question": "If the only message Pasquale left is the fifth message, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Hildy left the first message.",
      "B) Theodore left exactly two messages.",
      "C) Liam left exactly two messages.",
      "D) Liam left the second message.",
      "E) Fleure left the third and fourth messages."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_3_11",
    "context": "Exactly five cars—Frank's, Marquitta's, Orlando's, Taishah's, and Vinquetta's—are washed, each exactly once. The cars are washed one at a time, with each receiving exactly one kind of wash: regular, super, or premium. The following conditions must apply: The first car washed does not receive a super wash, though at least one car does. Exactly one car receives a premium wash. The second and third cars washed receive the same kind of wash as each other. Neither Orlando's nor Taishah's is washed before Vinquetta's. Marquitta's is washed before Frank's, but after Orlando's. Marquitta's and the car washed immediately before Marquitta's receive regular washes.",
    "question": "Which one of the following could be an accurate list of the cars in the order in which they are washed, matched with type of wash received?",
    "answer": "B",
    "options": [
      "A) Orlando's: premium; Vinquetta's: regular; Taishah's: regular; Marquitta's: regular; Frank's: super",
      "B) Vinquetta's: premium; Orlando's: regular; Taishah's: regular; Marquitta's: regular; Frank's: super",
      "C) Vinquetta's: regular; Marquitta's: regular; Taishah's: regular; Orlando's: super; Frank's: super",
      "D) Vinquetta's: super; Orlando's: regular; Marquitta's: regular; Frank's: regular; Taishah's: super",
      "E) Vinquetta's: premium; Orlando's: regular; Marquitta's: regular; Frank's: regular; Taishah's: regular"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_3_12",
    "context": "Exactly five cars—Frank's, Marquitta's, Orlando's, Taishah's, and Vinquetta's—are washed, each exactly once. The cars are washed one at a time, with each receiving exactly one kind of wash: regular, super, or premium. The following conditions must apply: The first car washed does not receive a super wash, though at least one car does. Exactly one car receives a premium wash. The second and third cars washed receive the same kind of wash as each other. Neither Orlando's nor Taishah's is washed before Vinquetta's. Marquitta's is washed before Frank's, but after Orlando's. Marquitta's and the car washed immediately before Marquitta's receive regular washes.",
    "question": "If Vinquetta's car does not receive a premium wash, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Orlando's and Vinquetta's cars receive the same kind of wash as each other.",
      "B) Marquitta's and Taishah's cars receive the same kind of wash as each other.",
      "C) The fourth car washed receives a premium wash.",
      "D) Orlando's car is washed third.",
      "E) Marquitta's car is washed fourth."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_3_13",
    "context": "Exactly five cars—Frank's, Marquitta's, Orlando's, Taishah's, and Vinquetta's—are washed, each exactly once. The cars are washed one at a time, with each receiving exactly one kind of wash: regular, super, or premium. The following conditions must apply: The first car washed does not receive a super wash, though at least one car does. Exactly one car receives a premium wash. The second and third cars washed receive the same kind of wash as each other. Neither Orlando's nor Taishah's is washed before Vinquetta's. Marquitta's is washed before Frank's, but after Orlando's. Marquitta's and the car washed immediately before Marquitta's receive regular washes.",
    "question": "If the last two cars washed receive the same kind of wash as each other, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Orlando's car is washed third.",
      "B) Taishah's car is washed fifth.",
      "C) Taishah's car is washed before Marquitta's car.",
      "D) Vinquetta's car receives a regular wash.",
      "E) Exactly one car receives a super wash."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_3_14",
    "context": "Exactly five cars—Frank's, Marquitta's, Orlando's, Taishah's, and Vinquetta's—are washed, each exactly once. The cars are washed one at a time, with each receiving exactly one kind of wash: regular, super, or premium. The following conditions must apply: The first car washed does not receive a super wash, though at least one car does. Exactly one car receives a premium wash. The second and third cars washed receive the same kind of wash as each other. Neither Orlando's nor Taishah's is washed before Vinquetta's. Marquitta's is washed before Frank's, but after Orlando's. Marquitta's and the car washed immediately before Marquitta's receive regular washes.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Vinquetta's car receives a premium wash.",
      "B) Exactly two cars receive a super wash.",
      "C) The fifth car washed receives a super wash.",
      "D) The fourth car washed receives a super wash.",
      "E) The second car washed receives a regular wash."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_3_15",
    "context": "Exactly five cars—Frank's, Marquitta's, Orlando's, Taishah's, and Vinquetta's—are washed, each exactly once. The cars are washed one at a time, with each receiving exactly one kind of wash: regular, super, or premium. The following conditions must apply: The first car washed does not receive a super wash, though at least one car does. Exactly one car receives a premium wash. The second and third cars washed receive the same kind of wash as each other. Neither Orlando's nor Taishah's is washed before Vinquetta's. Marquitta's is washed before Frank's, but after Orlando's. Marquitta's and the car washed immediately before Marquitta's receive regular washes.",
    "question": "Which one of the following is a complete and accurate list of the cars that must receive a regular wash?",
    "answer": "B",
    "options": [
      "A) Frank's, Marquitta's",
      "B) Marquitta's, Orlando's",
      "C) Marquitta's, Orlando's, Taishah's",
      "D) Marquitta's, Taishah's",
      "E) Marquitta's, Vinquetta's"
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([Frank, Marquitta, Orlando, Taishah, Vinquetta])\nwashes = EnumSort([regular, super, premium])\nwashed = Function([cars, washes] -> [bool])\n\n# Constraints\nForAll([c:cars], Count([w:washes], washed(c, w)) == 1) ::: The cars are washed one at a time, with each receiving exactly one kind of wash\nAnd(washed(cars[1], regular), washed(cars[1], super)) ::: The first car washed does not receive a super wash, though at least one car does\nCount([w:washes], washed(cars[i], w)) == 1 ::: Exactly one car receives a premium wash\nAnd(washed(cars[2], washes[i]), washed(cars[3], washes[i])) ::: The second and third cars washed receive the same kind of wash as each other\nNot(And(washed(Orlando, washes[i]), washed(Taishah, washes[i]))) ::: Neither Orlando's nor Taishah's is washed before Vinquetta's\nAnd(washed(Marquitta, washes[i]), washed(Frank, washes[i])) ::: Marquitta's is washed before Frank's, but after Orlando's\nAnd(washed(Marquitta, regular), washed(cars[i], regular)) ::: Marquitta's and the car washed immediately before Marquitta's receive regular washes\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the cars that must receive a regular wash?\nis_sat(And(washed(Frank, regular), washed(Marquitta, regular))) ::: A) Frank's, Marquitta's\nis_sat(And(washed(Marquitta, regular), washed(Orlando, regular))) ::: B) Marquitta's, Orlando's\nis_sat(And(washed(Marquitta, regular), washed(Orlando, regular), washed(Taishah, regular))) ::: C) Marquitta's, Orlando's, Taishah's\nis_sat(And(washed(Marquitta, regular), washed(Taishah, regular))) ::: D) Marquitta's, Taishah's\nis_sat(And(washed(Marquitta, regular), washed(Vinquetta, regular))) ::: E) Marquitta's, Vinquetta's\n------"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_3_16",
    "context": "Exactly five cars—Frank's, Marquitta's, Orlando's, Taishah's, and Vinquetta's—are washed, each exactly once. The cars are washed one at a time, with each receiving exactly one kind of wash: regular, super, or premium. The following conditions must apply: The first car washed does not receive a super wash, though at least one car does. Exactly one car receives a premium wash. The second and third cars washed receive the same kind of wash as each other. Neither Orlando's nor Taishah's is washed before Vinquetta's. Marquitta's is washed before Frank's, but after Orlando's. Marquitta's and the car washed immediately before Marquitta's receive regular washes.",
    "question": "Suppose that in addition to the original five cars Jabrohn's car is also washed. If all the other conditions hold as given, which one of the following CANNOT be true?",
    "answer": "A",
    "options": [
      "A) Orlando's car receives a premium wash.",
      "B) Vinquetta's car receives a super wash.",
      "C) Four cars receive a regular wash.",
      "D) Only the second and third cars washed receive a regular wash.",
      "E) Jabrohn's car is washed after Frank's car."
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([Frank, Marquitta, Orlando, Taishah, Vinquetta])\nwashes = EnumSort([regular, super, premium])\nwashed = Function([cars, washes] -> [bool])\n\n# Constraints\nForAll([c:cars], Count([w:washes], washed(c, w)) == 1) ::: each car is washed exactly once\nAnd(washed(cars[1], regular), washed(cars[1], super)) ::: The first car washed does not receive a super wash, though at least one car does\nCount([c:cars], washed(c, premium)) == 1 ::: Exactly one car receives a premium wash\nAnd(washed(cars[2], regular), washed(cars[2], super)) ::: The second and third cars washed receive the same kind of wash as each other\nAnd(washed(cars[2], regular), washed(cars[3], regular)) ::: The second and third cars washed receive the same kind of wash as each other\nAnd(washed(cars[2], super), washed(cars[3], super)) ::: The second and third cars washed receive the same kind of wash as each other\nAnd(washed(cars[2], premium), washed(cars[3], premium)) ::: The second and third cars washed receive the same kind of wash as each other\nAnd(washed(Orlando, regular), washed(Taishah, regular)) ::: Neither Orlando's nor Taishah's is washed before Vinquetta's\nAnd(washed(Orlando, super), washed(Taishah, super)) ::: Neither Orlando's nor Taishah's is washed before Vinquetta's\nAnd(washed(Orlando, premium), washed(Taishah, premium)) ::: Neither Orlando's nor Taishah's is washed before Vinquetta's\nAnd(washed(Marquitta, regular), washed(Frank, regular)) ::: Marquitta's and the car washed immediately before Marquitta's receive regular washes\nAnd(washed(Marquitta, super), washed(Frank, super)) ::: Marquitta's and the car washed immediately before Marquitta's receive regular washes\nAnd(washed(Marquitta, premium), washed(Frank, premium)) ::: Marquitta's and the car washed immediately before Marquitta's receive regular washes\n\n# Options\nQuestion ::: Suppose that in addition to the original five cars Jabrohn"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_4_17",
    "context": "Exactly seven toy-truck models—F, G, H, J, K, M, and S—are assembled on seven assembly lines, exactly one model to a line. The seven lines are arranged side by side and numbered consecutively 1 through 7. Assignment of models to lines must meet the following conditions: F is assembled on a lower-numbered line than J. M is assembled on the line numbered one lower than the line on which G is assembled. H is assembled on line 1 or else line 7. S is assembled on line 4.",
    "question": "Which one of the following is an acceptable assignment of toy-truck models to lines, on order from line 1 through line 7?",
    "answer": "B",
    "options": [
      "A) F, J, K, S, H, M, G",
      "B) F, K, J, S, M, G, H",
      "C) F, M, K, S, G, J, H",
      "D) H, K, S, M, G, F, J",
      "E) H, M, G, S, J, F, K"
    ],
    "raw_logic_programs": [
      "# Declarations\nmodels = EnumSort([F, G, H, J, K, M, S])\nlines = EnumSort([1, 2, 3, 4, 5, 6, 7])\nassembled = Function([models, lines] -> [bool])\n\n# Constraints\nForAll([m:models], Count([l:lines], assembled(m, l)) == 1) ::: exactly one model to a line\nAnd(assembled(F, l1), assembled(J, l2), l1 < l2) ::: F is assembled on a lower-numbered line than J\nAnd(assembled(M, l1), assembled(G, l2), l1 + 1 == l2) ::: M is assembled on the line numbered one lower than the line on which G is assembled\nOr(assembled(H, 1), assembled(H, 7)) ::: H is assembled on line 1 or else line 7\nassembled(S, 4) ::: S is assembled on line 4\n\n# Options\nQuestion ::: Which one of the following is an acceptable assignment of toy-truck models to lines, on order from line 1 through line 7?\nis_sat(ForAll([m:models], assembled(m, m))) ::: A) F, J, K, S, H, M, G\nis_sat(ForAll([m:models], assembled(m, m))) ::: B) F, K, J, S, M, G, H\nis_sat(ForAll([m:models], assembled(m, m))) ::: C) F, M, K, S, G, J, H\nis_sat(ForAll([m:models], assembled(m, m))) ::: D) H, K, S, M, G, F, J\nis_sat(ForAll([m:models], assembled(m, m))) ::: E) H, M, G, S, J, F, K\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete six different projects. The following conditions apply: F and G work together on exactly one project. H and J work together on exactly one project. K and L work together on exactly one project. F and J work together on exactly one project. G and K work together on exactly one project.\nQuestion:\nWhich one of the following pairs of employees could work together on exactly one project?\nChoices:\n(A) F and H\n(B) G and J\n(C) H and K\n(D) J and L\n(E) K and L\n###\n# Declarations"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_4_18",
    "context": "Exactly seven toy-truck models—F, G, H, J, K, M, and S—are assembled on seven assembly lines, exactly one model to a line. The seven lines are arranged side by side and numbered consecutively 1 through 7. Assignment of models to lines must meet the following conditions: F is assembled on a lower-numbered line than J. M is assembled on the line numbered one lower than the line on which G is assembled. H is assembled on line 1 or else line 7. S is assembled on line 4.",
    "question": "It must be true that the lowest-numbered line on which",
    "answer": "C",
    "options": [
      "A) F can be assembled is line 2",
      "B) G can be assembled is line 3",
      "C) J can be assembled is line 2",
      "D) K can be assembled is line 3",
      "E) M can be assembled is line 2"
    ],
    "raw_logic_programs": [
      "# Declarations\nmodels = EnumSort([F, G, H, J, K, M, S])\nlines = EnumSort([1, 2, 3, 4, 5, 6, 7])\nassembled = Function([models, lines] -> [bool])\n\n# Constraints\nForAll([m:models], Count([l:lines], assembled(m, l)) == 1) ::: exactly one model to a line\nassembled(F, l) < assembled(J, l) ::: F is assembled on a lower-numbered line than J\nassembled(M, l) < assembled(G, l) ::: M is assembled on the line numbered one lower than the line on which G is assembled\nOr(assembled(H, 1), assembled(H, 7)) ::: H is assembled on line 1 or else line 7\nassembled(S, 4) ::: S is assembled on line 4\n\n# Options\nQuestion ::: It must be true that the lowest-numbered line on which\nis_valid(Exists([l:lines], assembled(F, l) == 2)) ::: A) F can be assembled is line 2\nis_valid(Exists([l:lines], assembled(G, l) == 3)) ::: B) G can be assembled is line 3\nis_valid(Exists([l:lines], assembled(J, l) == 2)) ::: C) J can be assembled is line 2\nis_valid(Exists([l:lines], assembled(K, l) == 3)) ::: D) K can be assembled is line 3\nis_valid(Exists([l:lines], assembled(M, l) == 2)) ::: E) M can be assembled is line 2\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who are assigned to work on exactly six projects—M, N, O, P, Q, and R. Each employee is assigned to work on exactly one project, and each project is assigned to exactly one employee. The following conditions apply: F is assigned to project M. G is assigned to project N. H is assigned to project O. J is assigned to project P. K is assigned to project Q. L is assigned to project R.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) F is assigned to project N\n(B) G is assigned to project M\n(C) H is assigned to project P\n(D) J is assigned to project O\n(E) K is assigned to project R\n###\n# Declarations\nemployees = EnumSort([F, G, H"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_4_19",
    "context": "Exactly seven toy-truck models—F, G, H, J, K, M, and S—are assembled on seven assembly lines, exactly one model to a line. The seven lines are arranged side by side and numbered consecutively 1 through 7. Assignment of models to lines must meet the following conditions: F is assembled on a lower-numbered line than J. M is assembled on the line numbered one lower than the line on which G is assembled. H is assembled on line 1 or else line 7. S is assembled on line 4.",
    "question": "If K is assembled on line 5, which one of the following is a pair of models that could be assembled, not necessarily in the order given, on lines whose numbers are consecutive to each other?",
    "answer": "C",
    "options": [
      "A) G, H",
      "B) G, J",
      "C) H, J",
      "D) J, M",
      "E) M, S"
    ],
    "raw_logic_programs": [
      "# Declarations\nmodels = EnumSort([F, G, H, J, K, M, S])\nlines = EnumSort([1, 2, 3, 4, 5, 6, 7])\nassembled = Function([models, lines] -> [bool])\n\n# Constraints\nForAll([m:models], Count([l:lines], assembled(m, l)) == 1) ::: exactly one model to a line\nassembled(F, l) < assembled(J, l) ::: F is assembled on a lower-numbered line than J\nassembled(M, l) < assembled(G, l) ::: M is assembled on the line numbered one lower than the line on which G is assembled\nOr(assembled(H, 1), assembled(H, 7)) ::: H is assembled on line 1 or else line 7\nassembled(S, 4) ::: S is assembled on line 4\nassembled(K, 5) ::: K is assembled on line 5\n\n# Options\nQuestion ::: If K is assembled on line 5, which one of the following is a pair of models that could be assembled, not necessarily in the order given, on lines whose numbers are consecutive to each other?\nis_sat(And(assembled(G, l), assembled(H, l + 1))) ::: (A)\nis_sat(And(assembled(G, l), assembled(J, l + 1))) ::: (B)\nis_sat(And(assembled(H, l), assembled(J, l + 1))) ::: (C)\nis_sat(And(assembled(J, l), assembled(M, l + 1))) ::: (D)\nis_sat(And(assembled(M, l), assembled(S, l + 1))) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who are assigned to work on exactly six projects—M, N, O, P, Q, and R. Each employee is assigned to work on exactly one project, and each project is assigned to exactly one employee. The following conditions apply: F is assigned to project M. G is assigned to project N. H is assigned to project O. J is assigned to project P. K is assigned to project Q. L is assigned to project R.\nQuestion:\nIf F is assigned to project N, which one of the following must be true?\nChoices:\n(A) G is assigned to project M.\n(B) G is assigned to project O.\n(C) H is assigned to project M.\n("
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_4_20",
    "context": "Exactly seven toy-truck models—F, G, H, J, K, M, and S—are assembled on seven assembly lines, exactly one model to a line. The seven lines are arranged side by side and numbered consecutively 1 through 7. Assignment of models to lines must meet the following conditions: F is assembled on a lower-numbered line than J. M is assembled on the line numbered one lower than the line on which G is assembled. H is assembled on line 1 or else line 7. S is assembled on line 4.",
    "question": "There can be at most how many lines between the line on which F is assembled and the line on which J is assembled?",
    "answer": "D",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nlines = EnumSort([1, 2, 3, 4, 5, 6, 7])\nmodels = EnumSort([F, G, H, J, K, M, S])\nassembled = Function([lines, models] -> [bool])\n\n# Constraints\nForAll([l:lines], Count([m:models], assembled(l, m)) == 1) ::: exactly one model to a line\nassembled(F, l) < assembled(J, l) ::: F is assembled on a lower-numbered line than J\nassembled(M, l) < assembled(G, l) ::: M is assembled on the line numbered one lower than the line on which G is assembled\nOr(assembled(H, 1), assembled(H, 7)) ::: H is assembled on line 1 or else line 7\nassembled(S, 4) ::: S is assembled on line 4\n\n# Options\nQuestion ::: There can be at most how many lines between the line on which F is assembled and the line on which J is assembled?\nis_sat(ForAll([l:lines], assembled(F, l) < assembled(J, l) < assembled(M, l))) ::: A) one\nis_sat(ForAll([l:lines], assembled(F, l) < assembled(J, l) < assembled(M, l) < assembled(S, l))) ::: B) two\nis_sat(ForAll([l:lines], assembled(F, l) < assembled(J, l) < assembled(M, l) < assembled(S, l) < assembled(K, l))) ::: C) three\nis_sat(ForAll([l:lines], assembled(F, l) < assembled(J, l) < assembled(M, l) < assembled(S, l) < assembled(K, l) < assembled(G, l))) ::: D) four\nis_sat(ForAll([l:lines], assembled(F, l) < assembled(J, l) < assembled(M, l) < assembled(S, l) < assembled(K, l) < assembled(G, l) < assembled(H, l))) ::: E) five\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who are assigned to exactly six different jobs—A, B, C, D, E, and F. The following conditions apply: F is assigned to job A. G is assigned to job B. H is assigned to job C. J is assigned to job D. K is"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_4_21",
    "context": "Exactly seven toy-truck models—F, G, H, J, K, M, and S—are assembled on seven assembly lines, exactly one model to a line. The seven lines are arranged side by side and numbered consecutively 1 through 7. Assignment of models to lines must meet the following conditions: F is assembled on a lower-numbered line than J. M is assembled on the line numbered one lower than the line on which G is assembled. H is assembled on line 1 or else line 7. S is assembled on line 4.",
    "question": "If K is assembled on line 2, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) F is assembled on a lower-numbered line than S.",
      "B) H is assembled on a lower-numbered line than G.",
      "C) J is assembled on a lower-numbered line than H.",
      "D) M is assembled on a lower-numbered line than J.",
      "E) S is assembled on a lower-numbered line than J."
    ],
    "raw_logic_programs": [
      "# Declarations\nmodels = EnumSort([F, G, H, J, K, M, S])\nlines = EnumSort([1, 2, 3, 4, 5, 6, 7])\nassembled = Function([models, lines] -> [bool])\n\n# Constraints\nForAll([m:models], Count([l:lines], assembled(m, l)) == 1) ::: exactly one model to a line\nAnd(assembled(F, l1), assembled(J, l2), l1 < l2) ::: F is assembled on a lower-numbered line than J\nAnd(assembled(M, l1), assembled(G, l2), l1 == l2 - 1) ::: M is assembled on the line numbered one lower than the line on which G is assembled\nAnd(assembled(H, 1), assembled(H, 7)) ::: H is assembled on line 1 or else line 7\nassembled(S, 4) ::: S is assembled on line 4\n\n# Options\nQuestion ::: If K is assembled on line 2, which one of the following must be true?\nis_sat(ForAll([m:models], assembled(F, l1), assembled(S, l2), l1 < l2)) ::: (A)\nis_sat(ForAll([m:models], assembled(H, l1), assembled(G, l2), l1 < l2)) ::: (B)\nis_sat(ForAll([m:models], assembled(J, l1), assembled(H, l2), l1 < l2)) ::: (C)\nis_sat(ForAll([m:models], assembled(M, l1), assembled(J, l2), l1 < l2)) ::: (D)\nis_sat(ForAll([m:models], assembled(S, l1), assembled(J, l2), l1 < l2)) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete specific projects. The following conditions apply: F and G are a team. H and J are a team. K and L are a team. F and H are a team. J and L are a team.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) F and J are a team.\n(B) G and K are a team.\n(C) H and K are a team.\n(D) J and L are a team.\n(E) K and L are a team.\n###\n# Declar"
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_4_22",
    "context": "Exactly seven toy-truck models—F, G, H, J, K, M, and S—are assembled on seven assembly lines, exactly one model to a line. The seven lines are arranged side by side and numbered consecutively 1 through 7. Assignment of models to lines must meet the following conditions: F is assembled on a lower-numbered line than J. M is assembled on the line numbered one lower than the line on which G is assembled. H is assembled on line 1 or else line 7. S is assembled on line 4.",
    "question": "If G is assembled on the line numbered one less than the line on which F is assembled, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) F is assembled on line 3.",
      "B) G is assembled on line 5.",
      "C) H is assembled on line 1.",
      "D) K is assembled on line 5.",
      "E) M is assembled on line 6."
    ],
    "raw_logic_programs": [
      "# Declarations\nmodels = EnumSort([F, G, H, J, K, M, S])\nlines = EnumSort([1, 2, 3, 4, 5, 6, 7])\nassembled = Function([models, lines] -> [bool])\n\n# Constraints\nForAll([m:models], Count([l:lines], assembled(m, l)) == 1) ::: exactly one model to a line\nAnd(assembled(F, l1), assembled(J, l2), l1 < l2) ::: F is assembled on a lower-numbered line than J\nAnd(assembled(M, l1), assembled(G, l2), l1 == l2 - 1) ::: M is assembled on the line numbered one lower than the line on which G is assembled\nAnd(assembled(H, l1), l1 == 1, l1 == 7) ::: H is assembled on line 1 or else line 7\nassembled(S, 4) ::: S is assembled on line 4\n\n# Options\nQuestion ::: If G is assembled on the line numbered one less than the line on which F is assembled, then which one of the following must be true?\nis_sat(And(assembled(F, 3), assembled(G, 4))) ::: (A)\nis_sat(And(assembled(G, 5), assembled(F, 4))) ::: (B)\nis_sat(And(assembled(H, 1), assembled(F, 4))) ::: (C)\nis_sat(And(assembled(K, 5), assembled(F, 4))) ::: (D)\nis_sat(And(assembled(M, 6), assembled(F, 4))) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who are assigned to work on exactly six projects—M, N, O, P, Q, and R. Each employee is assigned to work on exactly one project, and each project is assigned to exactly one employee. The following conditions apply: F is assigned to project M. G is assigned to project N. H is assigned to project O. J is assigned to project P. K is assigned to project Q. L is assigned to project R.\nQuestion:\nIf F is assigned to project P, then which one of the following must be true?\nChoices:\n(A) G is assigned to project Q.\n(B) H is assigned to project R.\n(C) J is assigned to project M.\n(D) K is assigned to project N."
    ]
  },
  {
    "id": "ar_lsat_199912_1-G_4_23",
    "context": "Exactly seven toy-truck models—F, G, H, J, K, M, and S—are assembled on seven assembly lines, exactly one model to a line. The seven lines are arranged side by side and numbered consecutively 1 through 7. Assignment of models to lines must meet the following conditions: F is assembled on a lower-numbered line than J. M is assembled on the line numbered one lower than the line on which G is assembled. H is assembled on line 1 or else line 7. S is assembled on line 4.",
    "question": "If M is assembled on line 1, which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) F is assembled on a line numbered one lower than the line on which H is assembled.",
      "B) F is assembled on a line numbered one lower than the line on which K is assembled.",
      "C) G is assembled on a line numbered one lower than the line on which J is assembled.",
      "D) G is assembled on a line numbered one lower than the line on which K is assembled.",
      "E) K is assembled on a line numbered one lower than the line on which G is assembled."
    ],
    "raw_logic_programs": [
      "# Declarations\nmodels = EnumSort([F, G, H, J, K, M, S])\nlines = EnumSort([1, 2, 3, 4, 5, 6, 7])\nassembled = Function([models, lines] -> [bool])\n\n# Constraints\nForAll([m:models], Count([l:lines], assembled(m, l)) == 1) ::: exactly one model to a line\nAnd(assembled(F, l1), assembled(J, l2), l1 < l2) ::: F is assembled on a lower-numbered line than J\nAnd(assembled(M, l1), assembled(G, l2), l1 == l2 - 1) ::: M is assembled on the line numbered one lower than the line on which G is assembled\nAnd(assembled(H, 1), assembled(H, 7)) ::: H is assembled on line 1 or else line 7\nassembled(S, 4) ::: S is assembled on line 4\n\n# Options\nQuestion ::: If M is assembled on line 1, which one of the following could be true?\nis_exception(is_sat(And(assembled(F, l1), assembled(H, l2), l1 == l2 - 1))) ::: (A)\nis_exception(is_sat(And(assembled(F, l1), assembled(K, l2), l1 == l2 - 1))) ::: (B)\nis_exception(is_sat(And(assembled(G, l1), assembled(J, l2), l1 == l2 - 1))) ::: (C)\nis_exception(is_sat(And(assembled(G, l1), assembled(K, l2), l1 == l2 - 1))) ::: (D)\nis_exception(is_sat(And(assembled(K, l1), assembled(G, l2), l1 == l2 - 1))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 60 employees who are either female or over 40 years old. The company has a total of 70 employees who are either male or under 40 years old. The company has a total of 30 employees who are either managers or female. The company has a total of 40 employees who are either managers or over 40 years old. The company has a total of 50 employees who are either nonmanagers or under 40 years old."
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_1_1",
    "context": "At a water carnival, each of the eight lifeguards—J, K, L, M, P, Q, R, and S—will participate in two events, a boat race and a rescue exercise. For each of these events the eight lifeguards are grouped into four two-person teams, subject to the following rules: If two lifeguards are teammates in the boat race, they cannot also be teammates in the rescue exercise. L and Q are teammates in the boat race. K and L are teammates in the rescue exercise. R and S are not teammates in either event.",
    "question": "Which one of the following could be a list of the four teams participating in the boat race?",
    "answer": "D",
    "options": [
      "A) J and L; K and S; M and Q; P and R",
      "B) J and M; K and P; L and Q; R and S",
      "C) J and M; K and R; L and S; P and Q",
      "D) J and M; K and S; L and Q; P and R",
      "E) J and P; K and L; M and R; Q and S"
    ],
    "raw_logic_programs": [
      "# Declarations\nlifeguards = EnumSort([J, K, L, M, P, Q, R, S])\nevents = EnumSort([boat_race, rescue_exercise])\nteams = Function([events, lifeguards] -> [lifeguards])\n\n# Constraints\nForAll([e:events], Count([l:lifeguards], teams(e, l)) == 4) ::: For each of these events the eight lifeguards are grouped into four two-person teams\nForAll([l:lifeguards], Count([e:events], teams(e, l) == l) == 2) ::: each of the eight lifeguards will participate in two events\nForAll([e:events], ForAll([l:lifeguards], teams(e, l) == l)) ::: If two lifeguards are teammates in the boat race, they cannot also be teammates in the rescue exercise\nteams(boat_race, L) == Q ::: L and Q are teammates in the boat race\nteams(rescue_exercise, K) == L ::: K and L are teammates in the rescue exercise\nNot(teams(boat_race, R) == S) ::: R and S are not teammates in either event\n\n# Options\nQuestion ::: Which one of the following could be a list of the four teams participating in the boat race?\nis_valid(Exists([l:lifeguards], teams(boat_race, l) == J) && Exists([l:lifeguards], teams(boat_race, l) == L) && Exists([l:lifeguards], teams(boat_race, l) == S) && Exists([l:lifeguards], teams(boat_race, l) == M)) ::: A) J and L; K and S; M and Q; P and R\nis_valid(Exists([l:lifeguards], teams(boat_race, l) == J) && Exists([l:lifeguards], teams(boat_race, l) == M) && Exists([l:lifeguards], teams(boat_race, l) == K) && Exists([l:lifeguards], teams(boat_race, l) == P) && Exists([l:lifeguards], teams(boat_race, l) == L) && Exists([l:lifeguards], teams(boat_race, l) == Q) && Exists([l:lifeguards], teams(boat_race, l) == R) && Exists([l:lifeguards], teams(boat_race, l) == S)) ::: B) J"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_1_2",
    "context": "At a water carnival, each of the eight lifeguards—J, K, L, M, P, Q, R, and S—will participate in two events, a boat race and a rescue exercise. For each of these events the eight lifeguards are grouped into four two-person teams, subject to the following rules: If two lifeguards are teammates in the boat race, they cannot also be teammates in the rescue exercise. L and Q are teammates in the boat race. K and L are teammates in the rescue exercise. R and S are not teammates in either event.",
    "question": "Which one of the following is a pair of lifeguards who cannot be teammates in the rescue exercise but who could be teammates in the boat race?",
    "answer": "B",
    "options": [
      "A) J and P",
      "B) K and R",
      "C) L and S",
      "D) P and M",
      "E) P and Q"
    ],
    "raw_logic_programs": [
      "# Declarations\nlifeguards = EnumSort([J, K, L, M, P, Q, R, S])\nevents = EnumSort([boat_race, rescue_exercise])\nteams = Function([lifeguards, events] -> [lifeguards])\n\n# Constraints\nForAll([e:events], Distinct([l:lifeguards], teams(l, e))) ::: If two lifeguards are teammates in the boat race, they cannot also be teammates in the rescue exercise\nteams(L, boat_race) == teams(Q, boat_race) ::: L and Q are teammates in the boat race\nteams(K, rescue_exercise) == teams(L, rescue_exercise) ::: K and L are teammates in the rescue exercise\nteams(R, boat_race)!= teams(S, boat_race) ::: R and S are not teammates in either event\nteams(R, rescue_exercise)!= teams(S, rescue_exercise) ::: R and S are not teammates in either event\n\n# Options\nQuestion ::: Which one of the following is a pair of lifeguards who cannot be teammates in the rescue exercise but who could be teammates in the boat race?\nis_valid(teams(J, boat_race) == teams(P, boat_race)) ::: (A)\nis_valid(teams(K, boat_race) == teams(R, boat_race)) ::: (B)\nis_valid(teams(L, boat_race) == teams(S, boat_race)) ::: (C)\nis_valid(teams(P, boat_race) == teams(M, boat_race)) ::: (D)\nis_valid(teams(P, boat_race) == teams(Q, boat_race)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_1_3",
    "context": "At a water carnival, each of the eight lifeguards—J, K, L, M, P, Q, R, and S—will participate in two events, a boat race and a rescue exercise. For each of these events the eight lifeguards are grouped into four two-person teams, subject to the following rules: If two lifeguards are teammates in the boat race, they cannot also be teammates in the rescue exercise. L and Q are teammates in the boat race. K and L are teammates in the rescue exercise. R and S are not teammates in either event.",
    "question": "If M and P are teammates in the boat race and J and R are teammates in the rescue exercise, which one of the following is a pair that must be teammates in the boat race?",
    "answer": "B",
    "options": [
      "A) J and K",
      "B) J and S",
      "C) K and L",
      "D) K and S",
      "E) Q and R"
    ],
    "raw_logic_programs": [
      "# Declarations\nlifeguards = EnumSort([J, K, L, M, P, Q, R, S])\nevents = EnumSort([boat_race, rescue_exercise])\nteams = Function([lifeguards, events] -> [lifeguards])\n\n# Constraints\nForAll([e:events], Distinct([l:lifeguards], teams(l, e))) ::: If two lifeguards are teammates in the boat race, they cannot also be teammates in the rescue exercise\nteams(L, boat_race) == teams(Q, boat_race) ::: L and Q are teammates in the boat race\nteams(K, rescue_exercise) == teams(L, rescue_exercise) ::: K and L are teammates in the rescue exercise\nteams(R, boat_race)!= teams(S, boat_race) ::: R and S are not teammates in either event\nteams(M, boat_race) == teams(P, boat_race) ::: M and P are teammates in the boat race\nteams(J, rescue_exercise) == teams(R, rescue_exercise) ::: J and R are teammates in the rescue exercise\n\n# Options\nQuestion ::: If M and P are teammates in the boat race and J and R are teammates in the rescue exercise, which one of the following is a pair that must be teammates in the boat race?\nis_sat(teams(J, boat_race) == teams(K, boat_race)) ::: (A)\nis_sat(teams(J, boat_race) == teams(S, boat_race)) ::: (B)\nis_sat(teams(K, boat_race) == teams(L, boat_race)) ::: (C)\nis_sat(teams(K, boat_"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_1_4",
    "context": "At a water carnival, each of the eight lifeguards—J, K, L, M, P, Q, R, and S—will participate in two events, a boat race and a rescue exercise. For each of these events the eight lifeguards are grouped into four two-person teams, subject to the following rules: If two lifeguards are teammates in the boat race, they cannot also be teammates in the rescue exercise. L and Q are teammates in the boat race. K and L are teammates in the rescue exercise. R and S are not teammates in either event.",
    "question": "If P and K are teammates in the boat race and P and Q are teammates in the rescue exercise, then each of the following lists a pair of lifeguards who must be teammates in one of the two events EXCEPT:",
    "answer": "A",
    "options": [
      "A) J and M",
      "B) J and R",
      "C) J and S",
      "D) M and R",
      "E) M and S"
    ],
    "raw_logic_programs": [
      "# Declarations\nlifeguards = EnumSort([J, K, L, M, P, Q, R, S])\nevents = EnumSort([boat_race, rescue_exercise])\nteammates = Function([lifeguards, events] -> [lifeguards])\n\n# Constraints\nForAll([l:lifeguards], Count([e:events], teammates(l, e)) == 2) ::: each of the eight lifeguards will participate in two events\nForAll([l1:lifeguards, l2:lifeguards], Implies(teammates(l1, boat_race) == l2, Not(teammates(l1, rescue_exercise) == l2))) ::: If two lifeguards are teammates in the boat race, they cannot also be teammates in the rescue exercise\nteammates(L, boat_race) == Q ::: L and Q are teammates in the boat race\nteammates(K, rescue_exercise) == L ::: K and L are teammates in the rescue exercise\nNot(teammates(R, boat_race) == S) ::: R and S are not teammates in either event\nteammates(P, boat_race) == K ::: P and K are teammates in the boat race\nteammates(P, rescue_exercise) == Q ::: P and Q are teammates in the rescue exercise\n\n# Options\nQuestion ::: If P and K are teammates in the boat race and P and Q are teammates in the rescue exercise, then each of the following lists a pair of lifeguards who must be teammates in one of the two events EXCEPT:\nis_exception(is_sat(teammates(J, boat_race) == M)) ::: A) J and M\nis_exception(is_sat(teammates("
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_1_5",
    "context": "At a water carnival, each of the eight lifeguards—J, K, L, M, P, Q, R, and S—will participate in two events, a boat race and a rescue exercise. For each of these events the eight lifeguards are grouped into four two-person teams, subject to the following rules: If two lifeguards are teammates in the boat race, they cannot also be teammates in the rescue exercise. L and Q are teammates in the boat race. K and L are teammates in the rescue exercise. R and S are not teammates in either event.",
    "question": "If J and P are teammates in the boat race, then M could be the teammate of",
    "answer": "E",
    "options": [
      "A) K in the boat race and S in the rescue exercise",
      "B) L in the boat race and S in the rescue exercise",
      "C) R in the boat race and L in the rescue exercise",
      "D) S in the boat race and K in the rescue exercise",
      "E) S in the boat race and P in the rescue exercise"
    ],
    "raw_logic_programs": [
      "# Declarations\nlifeguards = EnumSort([J, K, L, M, P, Q, R, S])\nevents = EnumSort([boat_race, rescue_exercise])\nteams = Function([lifeguards, events] -> [lifeguards])\n\n# Constraints\nForAll([e:events], Count([l:lifeguards], teams(l, e)) == 4) ::: For each of these events the eight lifeguards are grouped into four two-person teams\nForAll([l:lifeguards], Count([e:events], teams(l, e)) == 2) ::: each of the eight lifeguards will participate in two events\nForAll([l1:lifeguards, l2:lifeguards], Implies(teams(l1, boat_race) == teams(l2, boat_race), teams(l1, rescue_exercise)!= teams(l2, rescue_exercise))) ::: If two lifeguards are teammates in the boat race, they cannot also be teammates in the rescue exercise\nteams(L, boat_race) == teams(Q, boat_race) ::: L and Q are teammates in the boat race\nteams(K, rescue_exercise) == teams(L, rescue_exercise) ::: K and L are teammates in the rescue exercise\nteams(R, boat_race)!= teams(S, boat_race) ::: R and S are not teammates in either event\nteams(R, rescue_exercise)!= teams(S, rescue_exercise) ::: R and S are not teammates in either event\n\n# Options\nQuestion ::: If J and P are teammates in the boat race, then M could be the teammate of\nis_valid(teams(M, boat_race) == teams(K, boat_race) &&"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_2_6",
    "context": "A critic ranks exactly seven restaurants—Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, and Vistula—from highest (best) to lowest (worst). The ranking must meet the following conditions: Pastilla ranks higher than Lautrec but lower than Robusto. Medici ranks higher than Vistula but lower than Tantoko. If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's. If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla. There are no ties.",
    "question": "Which one of the following could be an accurate ranking of the restaurants, from highest to lowest?",
    "answer": "C",
    "options": [
      "A) Tantoko, Medici, Scheherazade's, Pastilla, Vistula, Robusto, Lautrec",
      "B) Robusto, Pastilla, Tantoko, Medici, Scheherazade's, Vistula, Lautrec",
      "C) Tantoko, Medici, Scheherazade's, Robusto, Vistula, Pastilla, Lautrec",
      "D) Tantoko, Robusto, Medici, Vistula, Pastilla, Scheherazade's, Lautrec",
      "E) Robusto, Pastilla, Scheherazade's, Medici, Vistula, Tantoko, Lautrec"
    ],
    "raw_logic_programs": [
      "# Declarations\nrestaurants = EnumSort([Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, Vistula])\nranks = Function([restaurants] -> [int])\nForAll([r:restaurants], And(1 <= ranks(r), ranks(r) <= 7))\n\n# Constraints\nDistinct([r:restaurants], ranks(r)) ::: There are no ties\nranks(Pastilla) < ranks(Robusto) ::: Pastilla ranks higher than Lautrec but lower than Robusto\nranks(Medici) < ranks(Vistula) ::: Medici ranks higher than Vistula but lower than Tantoko\nImplies(ranks(Scheherazade's) > ranks(Pastilla), ranks(Medici) > ranks(Scheherazade's)) ::: If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's\nImplies(ranks(Medici) > ranks(Scheherazade's), ranks(Scheherazade's) > ranks(Pastilla)) ::: If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla\n\n# Options\nQuestion ::: Which one of the following could be an accurate ranking of the restaurants, from highest to lowest?\nis_sat(ranks(Tantoko) == 1, ranks(Medici) == 2, ranks(Scheherazade's) == 3, ranks(Pastilla) == 4, ranks(Vistula) == 5, ranks(Robusto) == 6, ranks(Lautrec) == 7) ::: A) Tantoko, Medici, Scheherazade's, Pastilla, Vistula, Robusto, Lautrec\nis_sat(ranks(Robusto)"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_2_7",
    "context": "A critic ranks exactly seven restaurants—Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, and Vistula—from highest (best) to lowest (worst). The ranking must meet the following conditions: Pastilla ranks higher than Lautrec but lower than Robusto. Medici ranks higher than Vistula but lower than Tantoko. If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's. If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla. There are no ties.",
    "question": "If Pastilla ranks second highest, then which one of the following is a complete and accurate list of restaurants any one of which could be ranked fourth highest?",
    "answer": "E",
    "options": [
      "A) Lautrec",
      "B) Lautrec, Vistula",
      "C) Scheherazade's, Lautrec",
      "D) Scheherazade's, Lautrec, Medici",
      "E) Scheherazade's, Lautrec, Tantoko"
    ],
    "raw_logic_programs": [
      "# Declarations\nrestaurants = EnumSort([Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, Vistula])\nranks = Function([restaurants] -> [int])\nForAll([r:restaurants], And(1 <= ranks(r), ranks(r) <= 7))\n\n# Constraints\nDistinct([r:restaurants], ranks(r)) ::: There are no ties\nAnd(ranks(Pastilla) > ranks(Lautrec), ranks(Pastilla) < ranks(Robusto)) ::: Pastilla ranks higher than Lautrec but lower than Robusto\nAnd(ranks(Medici) > ranks(Vistula), ranks(Medici) < ranks(Tantoko)) ::: Medici ranks higher than Vistula but lower than Tantoko\nAnd(ranks(Scheherazade's) > ranks(Pastilla), ranks(Medici) > ranks(Scheherazade's)) ::: If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's\nAnd(ranks(Medici) > ranks(Scheherazade's), ranks(Scheherazade's) > ranks(Pastilla)) ::: If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla\n\n# Options\nQuestion ::: If Pastilla ranks second highest, then which one of the following is a complete and accurate list of restaurants any one of which could be ranked fourth highest?\nis_exception(is_sat(ForAll([r:restaurants], ranks(r) == 4) && ranks(Lautrec) == 4)) ::: A) Lautrec\nis_exception(is_sat(ForAll([r:restaurants], ranks(r) == 4) && ranks(Lautrec) == 4 &&"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_2_8",
    "context": "A critic ranks exactly seven restaurants—Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, and Vistula—from highest (best) to lowest (worst). The ranking must meet the following conditions: Pastilla ranks higher than Lautrec but lower than Robusto. Medici ranks higher than Vistula but lower than Tantoko. If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's. If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla. There are no ties.",
    "question": "Which one of the following is the lowest ranking that Medici could have?",
    "answer": "E",
    "options": [
      "A) second highest",
      "B) third highest",
      "C) fourth highest",
      "D) fifth highest",
      "E) sixth highest"
    ],
    "raw_logic_programs": [
      "# Declarations\nrestaurants = EnumSort([Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, Vistula])\nranks = Function([restaurants] -> [int])\nForAll([r:restaurants], And(1 <= ranks(r), ranks(r) <= 7))\n\n# Constraints\nDistinct([r:restaurants], ranks(r)) ::: There are no ties\nranks(Pastilla) < ranks(Robusto) ::: Pastilla ranks higher than Lautrec but lower than Robusto\nranks(Medici) > ranks(Vistula) ::: Medici ranks higher than Vistula but lower than Tantoko\nImplies(ranks(Scheherazade's) > ranks(Pastilla), ranks(Medici) > ranks(Scheherazade's)) ::: If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's\nImplies(ranks(Medici) > ranks(Scheherazade's), ranks(Scheherazade's) > ranks(Pastilla)) ::: If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla\n\n# Options\nQuestion ::: Which one of the following is the lowest ranking that Medici could have?\nis_sat(ranks(Medici) == 2) ::: A) second highest\nis_sat(ranks(Medici) == 3) ::: B) third highest\nis_sat(ranks(Medici) == 4) ::: C) fourth highest\nis_sat(ranks(Medici) == 5) ::: D) fifth highest\nis_sat(ranks(Medici) == 6) ::: E) sixth highest\n------\nProblem:\nA company has exactly six employees—Fred, G"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_2_9",
    "context": "A critic ranks exactly seven restaurants—Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, and Vistula—from highest (best) to lowest (worst). The ranking must meet the following conditions: Pastilla ranks higher than Lautrec but lower than Robusto. Medici ranks higher than Vistula but lower than Tantoko. If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's. If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla. There are no ties.",
    "question": "If Medici ranks lower than Lautrec, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Lautrec ranks higher than Tantoko.",
      "B) Scheherazade's ranks higher than Vistula.",
      "C) Pastilla ranks higher than Tantoko.",
      "D) Tantoko ranks higher than Scheherazade's.",
      "E) Tantoko ranks higher than Pastilla."
    ],
    "raw_logic_programs": [
      "# Declarations\nrestaurants = EnumSort([Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, Vistula])\nranks = Function([restaurants] -> [int])\nForAll([r:restaurants], And(1 <= ranks(r), ranks(r) <= 7))\n\n# Constraints\nDistinct([r:restaurants], ranks(r)) ::: There are no ties\nranks(Pastilla) > ranks(Lautrec) ::: Pastilla ranks higher than Lautrec\nranks(Pastilla) < ranks(Robusto) ::: Pastilla ranks lower than Robusto\nranks(Medici) > ranks(Vistula) ::: Medici ranks higher than Vistula\nranks(Medici) < ranks(Tantoko) ::: Medici ranks lower than Tantoko\nImplies(ranks(Scheherazade's) > ranks(Pastilla), ranks(Medici) > ranks(Scheherazade's)) ::: If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's\nImplies(ranks(Medici) > ranks(Scheherazade's), ranks(Scheherazade's) > ranks(Pastilla)) ::: If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla\n\n# Options\nQuestion ::: If Medici ranks lower than Lautrec, then which one of the following must be true?\nis_valid(Implies(ranks(Medici) < ranks(Lautrec), ranks(Lautrec) > ranks(Tantoko))) ::: A) Lautrec ranks higher than Tantoko.\nis_valid(Implies(ranks(Medici) < ranks(Lautrec), ranks(Scheherazade's) > ranks(Vistula"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_2_10",
    "context": "A critic ranks exactly seven restaurants—Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, and Vistula—from highest (best) to lowest (worst). The ranking must meet the following conditions: Pastilla ranks higher than Lautrec but lower than Robusto. Medici ranks higher than Vistula but lower than Tantoko. If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's. If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla. There are no ties.",
    "question": "If Vistula ranks higher than Robusto, then which one of the following restaurants could be ranked fifth highest?",
    "answer": "C",
    "options": [
      "A) Tantoko",
      "B) Medici",
      "C) Scheherazade's",
      "D) Vistula",
      "E) Pastilla"
    ],
    "raw_logic_programs": [
      "# Declarations\nrestaurants = EnumSort([Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, Vistula])\nranks = Function([restaurants] -> [int])\nForAll([r:restaurants], And(1 <= ranks(r), ranks(r) <= 7))\n\n# Constraints\nDistinct([r:restaurants], ranks(r)) ::: There are no ties\nAnd(ranks(Pastilla) < ranks(Robusto), ranks(Pastilla) > ranks(Lautrec)) ::: Pastilla ranks higher than Lautrec but lower than Robusto\nAnd(ranks(Medici) > ranks(Vistula), ranks(Medici) < ranks(Tantoko)) ::: Medici ranks higher than Vistula but lower than Tantoko\nImplies(ranks(Scheherazade's) > ranks(Pastilla), ranks(Medici) > ranks(Scheherazade's)) ::: If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's\nImplies(ranks(Medici) > ranks(Scheherazade's), ranks(Scheherazade's) > ranks(Pastilla)) ::: If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla\n\n# Options\nQuestion ::: If Vistula ranks higher than Robusto, then which one of the following restaurants could be ranked fifth highest?\nis_valid(Exists([r:restaurants], ranks(r) == 5)) ::: A) Tantoko\nis_valid(Exists([r:restaurants], ranks(r) == 5)) ::: B) Medici\nis_valid(Exists([r:restaurants], ranks(r) == 5)) ::: C) Scheherazade's\nis_"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_2_11",
    "context": "A critic ranks exactly seven restaurants—Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, and Vistula—from highest (best) to lowest (worst). The ranking must meet the following conditions: Pastilla ranks higher than Lautrec but lower than Robusto. Medici ranks higher than Vistula but lower than Tantoko. If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's. If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla. There are no ties.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "E",
    "options": [
      "A) Pastilla ranks second highest.",
      "B) Vistula ranks third highest.",
      "C) Lautrec ranks third highest.",
      "D) Robusto ranks fifth highest.",
      "E) Scheherazade's ranks sixth highest."
    ],
    "raw_logic_programs": [
      "# Declarations\nrestaurants = EnumSort([Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, Vistula])\nranks = Function([restaurants] -> [int])\nForAll([r:restaurants], And(1 <= ranks(r), ranks(r) <= 7))\n\n# Constraints\nDistinct([r:restaurants], ranks(r)) ::: There are no ties\nranks(Pastilla) > ranks(Lautrec) ::: Pastilla ranks higher than Lautrec\nranks(Medici) > ranks(Vistula) ::: Medici ranks higher than Vistula\nranks(Medici) < ranks(Tantoko) ::: Medici ranks lower than Tantoko\nImplies(ranks(Scheherazade's) > ranks(Pastilla), ranks(Medici) > ranks(Scheherazade's)) ::: If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's\nImplies(ranks(Medici) > ranks(Scheherazade's), ranks(Scheherazade's) > ranks(Pastilla)) ::: If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(ranks(Pastilla) == 2)) ::: A) Pastilla ranks second highest.\nis_exception(is_sat(ranks(Vistula) == 3)) ::: B) Vistula ranks third highest.\nis_exception(is_sat(ranks(Lautrec) == 3)) ::: C) Lautrec ranks third highest.\nis_exception(is_sat(ranks(Robusto) == 5)) :::"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_2_12",
    "context": "A critic ranks exactly seven restaurants—Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, and Vistula—from highest (best) to lowest (worst). The ranking must meet the following conditions: Pastilla ranks higher than Lautrec but lower than Robusto. Medici ranks higher than Vistula but lower than Tantoko. If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's. If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla. There are no ties.",
    "question": "If Tantoko is ranked third highest, then which one of the following CANNOT be true?",
    "answer": "B",
    "options": [
      "A) Lautrec ranked fourth highest.",
      "B) Pastilla is ranked fifth highest.",
      "C) Medici is ranked fifth highest.",
      "D) Scheherazade's is ranked fifth highest.",
      "E) Medici is ranked sixth highest."
    ],
    "raw_logic_programs": [
      "# Declarations\nrestaurants = EnumSort([Lautrec, Medici, Pastilla, Robusto, Scheherazade's, Tantoko, Vistula])\nranks = Function([restaurants] -> [int])\nForAll([r:restaurants], And(1 <= ranks(r), ranks(r) <= 7))\n\n# Constraints\nDistinct([r:restaurants], ranks(r)) ::: There are no ties\nranks(Pastilla) > ranks(Lautrec) ::: Pastilla ranks higher than Lautrec\nranks(Medici) > ranks(Vistula) ::: Medici ranks higher than Vistula\nranks(Robusto) > ranks(Pastilla) ::: Pastilla ranks higher than Lautrec but lower than Robusto\nImplies(ranks(Scheherazade's) > ranks(Pastilla), ranks(Medici) > ranks(Scheherazade's)) ::: If Scheherazade's ranks higher than Pastilla, Medici ranks higher than Scheherazade's\nImplies(ranks(Medici) > ranks(Scheherazade's), ranks(Scheherazade's) > ranks(Pastilla)) ::: If Medici ranks higher than Scheherazade's, Scheherazade's ranks higher than Pastilla\n\n# Options\nQuestion ::: If Tantoko is ranked third highest, then which one of the following CANNOT be true?\nis_exception(is_sat(ranks(Lautrec) == 4)) ::: A) Lautrec ranked fourth highest.\nis_exception(is_sat(ranks(Pastilla) == 5)) ::: B) Pastilla is ranked fifth highest.\nis_exception(is_sat(ranks(Medici) == 5)) ::: C) Medici is ranked fifth highest.\nis_exception(is_sat(ranks(Scheherazade's) == 5)) ::: D) Scheherazade's is ranked fifth highest.\nis_exception(is_sat(ranks(Medici) == 6)) ::: E) Medici is ranked sixth highest.\n------"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_3_13",
    "context": "Each of exactly three parks—Jessup, Island, and Hilltop—has at least one attraction. Each attraction is exactly one of five different types: fountain, garden, museum, playground, or theater. Among the three parks at least one of each type of attraction is included. No two attractions of the same type are included in any park. The following conditions must apply: Each of exactly two parks has a garden. Jessup has a museum but not a theater. Island has exactly one attraction. No park has both a playground and a fountain. Each park that has a theater also has a garden. Each park that has a museum also has a playground.",
    "question": "Which one of the following could be a complete and accurate matching of each park to its attractions?",
    "answer": "D",
    "options": [
      "A) Jessup: garden, museum; Island: playground; Hilltop: garden, theater",
      "B) Jessup: museum, theater; Island: garden; Hilltop: fountain, garden, playground, theater",
      "C) Jessup: garden, museum, playground; Island: theater; Hilltop: garden, museum, playground",
      "D) Jessup: garden, museum, playground; Island: fountain; Hilltop: garden, theater",
      "E) Jessup: museum, playground; Island: fountain, garden; Hilltop: garden, theater"
    ],
    "raw_logic_programs": [
      "# Declarations\nparks = EnumSort([Jessup, Island, Hilltop])\nattractions = EnumSort([fountain, garden, museum, playground, theater])\nhas = Function([parks, attractions] -> [bool])\n\n# Constraints\nForAll([p:parks], Count([a:attractions], has(p, a)) >= 1) ::: Each of exactly three parks has at least one attraction\nForAll([a:attractions], Count([p:parks], has(p, a)) >= 1) ::: Each attraction is exactly one of five different types\nForAll([p:parks, a:attractions], Implies(has(p, a), Not(has(p, Not(a))))) ::: No two attractions of the same type are included in any park\nCount([p:parks], And(has(p, garden), has(p, Not(garden)))) == 2 ::: Each of exactly two parks has a garden\nhas(Jessup, museum) ::: Jessup has a museum\nNot(has(Jessup, theater)) ::: Jessup has a museum but not a theater\nhas(Island, Not(attractions)) ::: Island has exactly one attraction\nForAll([p:parks], Implies(has(p, playground), Not(has(p, fountain)))) ::: No park has both a playground and a fountain\nForAll([p:parks], Implies(has(p, theater), has(p, garden))) ::: Each park that has a theater also has a garden\nForAll([p:parks], Implies(has(p, museum), has(p, playground))) ::: Each park that has a museum also has a playground\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate matching of each park to its attractions?\nis_sat(And(has(Jessup, garden), has(Jessup, museum), has(Island, playground), has(Hilltop, garden), has(Hilltop, theater))) ::: A) Jessup: garden, museum; Island: playground; Hilltop: garden,"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_3_14",
    "context": "Each of exactly three parks—Jessup, Island, and Hilltop—has at least one attraction. Each attraction is exactly one of five different types: fountain, garden, museum, playground, or theater. Among the three parks at least one of each type of attraction is included. No two attractions of the same type are included in any park. The following conditions must apply: Each of exactly two parks has a garden. Jessup has a museum but not a theater. Island has exactly one attraction. No park has both a playground and a fountain. Each park that has a theater also has a garden. Each park that has a museum also has a playground.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "D",
    "options": [
      "A) Neither Island nor Hilltop has a museum.",
      "B) Neither Island nor Hilltop has a playground.",
      "C) Neither Jessup nor Hilltop has a fountain.",
      "D) Neither Jessup nor Island has a garden.",
      "E) Neither Jessup nor Island has a theater."
    ],
    "raw_logic_programs": [
      "# Declarations\nparks = EnumSort([Jessup, Island, Hilltop])\nattractions = EnumSort([fountain, garden, museum, playground, theater])\nhas = Function([parks, attractions] -> [bool])\n\n# Constraints\nForAll([p:parks], Count([a:attractions], has(p, a)) >= 1) ::: Each of exactly three parks has at least one attraction\nForAll([a:attractions], Count([p:parks], has(p, a)) >= 1) ::: Each attraction is exactly one of five different types\nForAll([p:parks], Count([a:attractions], has(p, a)) == 1) ::: No two attractions of the same type are included in any park\nAnd(has(Jessup, museum), Not(has(Jessup, theater))) ::: Jessup has a museum but not a theater\nAnd(has(Island, garden), has(Island, museum)) ::: Each of exactly two parks has a garden\nAnd(has(Island, attraction), has(Island, attraction)) ::: Island has exactly one attraction\nAnd(has(Jessup, theater), has(Jessup, garden)) ::: Each park that has a theater also has a garden\nAnd(has(Jessup, museum), has(Jessup, playground)) ::: Each park that has a museum also has a playground\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(Not(has(Island, museum)))) ::: A) Neither Island nor Hilltop has a museum.\nis_exception(is_sat(Not(has(Island, playground)))) ::: B) Neither Island nor Hilltop has a playground.\nis_exception(is_sat(Not(has(Jessup, fountain)))) ::: C) Neither Jessup nor Hilltop has a fountain.\nis_exception(is_sat(Not(has(Jessup, garden)))) ::: D) Neither Jessup nor Island has a garden.\nis_exception(is_sat"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_3_15",
    "context": "Each of exactly three parks—Jessup, Island, and Hilltop—has at least one attraction. Each attraction is exactly one of five different types: fountain, garden, museum, playground, or theater. Among the three parks at least one of each type of attraction is included. No two attractions of the same type are included in any park. The following conditions must apply: Each of exactly two parks has a garden. Jessup has a museum but not a theater. Island has exactly one attraction. No park has both a playground and a fountain. Each park that has a theater also has a garden. Each park that has a museum also has a playground.",
    "question": "If each of exactly two of the parks has a fountain, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Island does not have a fountain.",
      "B) Jessup does not have a garden.",
      "C) Jessup has exactly two attractions.",
      "D) Hilltop has exactly three attractions.",
      "E) Hilltop has exactly four attractions."
    ],
    "raw_logic_programs": [
      "# Declarations\nparks = EnumSort([Jessup, Island, Hilltop])\nattractions = EnumSort([fountain, garden, museum, playground, theater])\nhas = Function([parks, attractions] -> [bool])\n\n# Constraints\nForAll([p:parks], Count([a:attractions], has(p, a)) >= 1) ::: Each of exactly three parks—Jessup, Island, and Hilltop—has at least one attraction\nAnd(has(Jessup, museum), Not(has(Jessup, theater))) ::: Jessup has a museum but not a theater\nForAll([p:parks], And(has(p, fountain), has(p, playground)) == False) ::: No park has both a playground and a fountain\nForAll([p:parks], And(has(p, theater), has(p, garden)) == True) ::: Each park that has a theater also has a garden\nForAll([p:parks], And(has(p, museum), has(p, playground)) == True) ::: Each park that has a museum also has a playground\n\n# Options\nQuestion ::: If each of exactly two of the parks has a fountain, then which one of the following could be true?\nis_sat(And(has(Island, fountain), has(Jessup, fountain))) ::: A) Island does not have a fountain.\nis_sat(And(has(Jessup, garden), has(Island, garden))) ::: B) Jessup does not have a garden.\nis_sat(And(has(Jessup, museum), has(Jessup, playground))) ::: C) Jessup has exactly two attractions.\nis_sat(And(has(Hilltop, fountain), has(Hilltop, garden), has(Hilltop, museum), has(Hilltop, playground))) ::: D) Hilltop has exactly three attractions.\nis_sat(And(has(Hilltop, fountain), has(Hilltop, garden), has(Hilltop, museum), has(H"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_3_16",
    "context": "Each of exactly three parks—Jessup, Island, and Hilltop—has at least one attraction. Each attraction is exactly one of five different types: fountain, garden, museum, playground, or theater. Among the three parks at least one of each type of attraction is included. No two attractions of the same type are included in any park. The following conditions must apply: Each of exactly two parks has a garden. Jessup has a museum but not a theater. Island has exactly one attraction. No park has both a playground and a fountain. Each park that has a theater also has a garden. Each park that has a museum also has a playground.",
    "question": "If Jessup has exactly three attractions, then it is possible to determine the exact set of attractions featured by which of the parks?",
    "answer": "B",
    "options": [
      "A) Island only",
      "B) Jessup only",
      "C) Island and Hilltop only",
      "D) Island and Jessup only",
      "E) Jessup, Island, and Hilltop"
    ],
    "raw_logic_programs": [
      "# Declarations\nparks = EnumSort([Jessup, Island, Hilltop])\nattractions = EnumSort([fountain, garden, museum, playground, theater])\nhas = Function([parks, attractions] -> [bool])\n\n# Constraints\nForAll([p:parks], Count([a:attractions], has(p, a)) >= 1) ::: Each of exactly three parks—Jessup, Island, and Hilltop—has at least one attraction\nAnd(has(Jessup, museum), Not(has(Jessup, theater))) ::: Jessup has a museum but not a theater\nForAll([p:parks], Implies(has(p, fountain), Not(has(p, playground)))) ::: No park has both a playground and a fountain\nForAll([p:parks], Implies(has(p, theater), has(p, garden))) ::: Each park that has a theater also has a garden\nForAll([p:parks], Implies(has(p, museum), has(p, playground))) ::: Each park that has a museum also has a playground\n\n# Options\nQuestion ::: If Jessup has exactly three attractions, then it is possible to determine the exact set of attractions featured by which of the parks?\nis_sat(ForAll([p:parks], has(p, fountain) == has(Island, fountain))) ::: A) Island only\nis_sat(ForAll([p:parks], has(p, fountain) == has(Jessup, fountain))) ::: B) Jessup only\nis_sat(ForAll([p:parks], has(p, fountain) == has(Island, fountain) == has(Hilltop, fountain))) ::: C) Island and Hilltop only\nis_sat(ForAll([p:parks], has(p, fountain) == has(Island, fountain) == has(Jessup, fountain))) ::: D) Island and Jessup only\nis_sat(ForAll([p:parks], has(p, fountain)"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_3_17",
    "context": "Each of exactly three parks—Jessup, Island, and Hilltop—has at least one attraction. Each attraction is exactly one of five different types: fountain, garden, museum, playground, or theater. Among the three parks at least one of each type of attraction is included. No two attractions of the same type are included in any park. The following conditions must apply: Each of exactly two parks has a garden. Jessup has a museum but not a theater. Island has exactly one attraction. No park has both a playground and a fountain. Each park that has a theater also has a garden. Each park that has a museum also has a playground.",
    "question": "If the attraction included in Island is of the same type as an attraction included in Jessup, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Hilltop has a playground.",
      "B) Island has a museum.",
      "C) Island has a fountain.",
      "D) Island has a garden.",
      "E) Jessup has a garden."
    ],
    "raw_logic_programs": [
      "# Declarations\nparks = EnumSort([Jessup, Island, Hilltop])\nattractions = EnumSort([fountain, garden, museum, playground, theater])\nhas = Function([parks, attractions] -> [bool])\n\n# Constraints\nForAll([p:parks], Count([a:attractions], has(p, a)) >= 1) ::: Each of exactly three parks has at least one attraction\nAnd(has(Jessup, museum), Not(has(Jessup, theater))) ::: Jessup has a museum but not a theater\nForAll([p:parks], Implies(has(p, playground), Not(has(p, fountain)))) ::: No park has both a playground and a fountain\nForAll([p:parks], Implies(has(p, theater), has(p, garden))) ::: Each park that has a theater also has a garden\nForAll([p:parks], Implies(has(p, museum), has(p, playground))) ::: Each park that has a museum also has a playground\n\n# Options\nQuestion ::: If the attraction included in Island is of the same type as an attraction included in Jessup, then which one of the following must be true?\nis_sat(ForAll([p:parks], has(p, playground))) ::: A) Hilltop has a playground.\nis_sat(ForAll([p:parks], has(p, museum))) ::: B) Island has a museum.\nis_sat(ForAll([p:parks], has(p, fountain))) ::: C) Island has a fountain.\nis_sat(ForAll([p:parks], has(p, garden))) ::: D) Island has a garden.\nis_sat(ForAll([p:parks], has(p, garden))) ::: E) Jessup has a garden.\n------\nProblem:\nA certain company has exactly five employees: A, B, C, D, and E. Each employee is assigned to work in exactly one of the following five departments: accounting, human resources, information technology, marketing, and sales. The following conditions apply"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_3_18",
    "context": "Each of exactly three parks—Jessup, Island, and Hilltop—has at least one attraction. Each attraction is exactly one of five different types: fountain, garden, museum, playground, or theater. Among the three parks at least one of each type of attraction is included. No two attractions of the same type are included in any park. The following conditions must apply: Each of exactly two parks has a garden. Jessup has a museum but not a theater. Island has exactly one attraction. No park has both a playground and a fountain. Each park that has a theater also has a garden. Each park that has a museum also has a playground.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Both Hilltop and Island have a garden.",
      "B) Both Hilltop and Island have a playground.",
      "C) Both Hilltop and Island have a theater.",
      "D) Both Island and Jessup have a fountain.",
      "E) Both Island and Jessup have a garden."
    ],
    "raw_logic_programs": [
      "# Declarations\nparks = EnumSort([Jessup, Island, Hilltop])\nattractions = EnumSort([fountain, garden, museum, playground, theater])\nhas = Function([parks, attractions] -> [bool])\n\n# Constraints\nForAll([p:parks], Count([a:attractions], has(p, a)) >= 1) ::: Each of exactly three parks has at least one attraction\nForAll([a:attractions], Count([p:parks], has(p, a)) >= 1) ::: Each attraction is exactly one of five different types\nForAll([p:parks], Count([a:attractions], has(p, a)) == 1) ::: No two attractions of the same type are included in any park\nAnd(has(Jessup, museum), Not(has(Jessup, theater))) ::: Jessup has a museum but not a theater\nAnd(has(Island, a), has(Hilltop, a)) ::: Each of exactly two parks has a garden\nAnd(has(p:parks, a), has(p, b)) ::: No park has both a playground and a fountain\nAnd(has(p:parks, theater), has(p, garden)) ::: Each park that has a theater also has a garden\nAnd(has(p:parks, museum), has(p, playground)) ::: Each park that has a museum also has a playground\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(And(has(Hilltop, garden), has(Island, garden))) ::: (A)\nis_valid(And(has(Hilltop, playground), has(Island, playground))) ::: (B)\nis_valid(And(has(Hilltop, theater), has(Island, theater))) ::: (C)\nis_valid(And(has(Island, fountain), has(Jessup, fountain))) ::: (D)\nis_valid(And(has(Island, garden), has(Jessup, garden))) ::: (E)\n------\nProblem:"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_3_19",
    "context": "Each of exactly three parks—Jessup, Island, and Hilltop—has at least one attraction. Each attraction is exactly one of five different types: fountain, garden, museum, playground, or theater. Among the three parks at least one of each type of attraction is included. No two attractions of the same type are included in any park. The following conditions must apply: Each of exactly two parks has a garden. Jessup has a museum but not a theater. Island has exactly one attraction. No park has both a playground and a fountain. Each park that has a theater also has a garden. Each park that has a museum also has a playground.",
    "question": "If Hilltop has exactly three attractions, then each of the following could be true EXCEPT:",
    "answer": "A",
    "options": [
      "A) Hilltop has a museum.",
      "B) Hilltop has a playground.",
      "C) Island does not have a fountain.",
      "D) Island has a garden.",
      "E) Jessup has a garden."
    ],
    "raw_logic_programs": [
      "# Declarations\nparks = EnumSort([Jessup, Island, Hilltop])\nattractions = EnumSort([fountain, garden, museum, playground, theater])\nhas = Function([parks, attractions] -> [bool])\n\n# Constraints\nForAll([p:parks], Count([a:attractions], has(p, a)) >= 1) ::: Each of exactly three parks—Jessup, Island, and Hilltop—has at least one attraction\nAnd(has(Jessup, museum), Not(has(Jessup, theater))) ::: Jessup has a museum but not a theater\nForAll([p:parks], Implies(has(p, playground), Not(has(p, fountain)))) ::: No park has both a playground and a fountain\nForAll([p:parks], Implies(has(p, theater), has(p, garden))) ::: Each park that has a theater also has a garden\nForAll([p:parks], Implies(has(p, museum), has(p, playground))) ::: Each park that has a museum also has a playground\n\n# Options\nQuestion ::: If Hilltop has exactly three attractions, then each of the following could be true EXCEPT:\nis_exception(is_sat(has(Hilltop, museum))) ::: A) Hilltop has a museum.\nis_exception(is_sat(has(Hilltop, playground))) ::: B) Hilltop has a playground.\nis_exception(is_sat(Not(has(Island, fountain)))) ::: C) Island does not have a fountain.\nis_exception(is_sat(has(Island, garden))) ::: D) Island has a garden.\nis_exception(is_sat(has(Jessup, garden))) ::: E) Jessup has a garden.\n------\nProblem:\nA certain company has exactly five employees: A, B, C, D, and E. Each employee is assigned to work in exactly one of the following five departments: accounting, human resources, information technology, marketing, and sales. The following conditions apply: A is assigned to work"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_4_20",
    "context": "Each year for the next three years, Dynamic Motors will assemble four new automobile models—the Volante, the Whisper, the Xavier, and the Ziggurat—in exactly five of its factories—F, G, H, I, and K. Each factory will assemble exactly one model in each year. Because of contractual obligations Dynamic will assemble all four models each year according to the following constraints: No model is manufactured in the same factory in consecutive years. Neither Volantes nor Whispers are assembled in any factory in which Xaviers were assembled the previous year. Neither Volantes nor Xaviers are assembled in any factory in which Ziggurats were assembled the previous year. In any year, only one factory assembles Zigurats.",
    "question": "Which one of the following could be the assembly schedule for factories F and G for the first two years?",
    "answer": "A",
    "options": [
      "A) year 1: Volantes in F, Ziggurats in G year 2: Xaviers in F, Whispers in G",
      "B) year 1: Whispers in F, Xaviers in G year 2: Whispers in F, Ziggurats in G",
      "C) year 1: Xaviers in F, Volantes in G year 2: Ziggurats in F, Ziggurats in G",
      "D) year 1: Xaviers in F, Xaviers in G year 2: Whispers in F, Ziggurats in G",
      "E) year 1: Ziggurats in F, Whispers in G year 2: Volantes in F, Volantes in G"
    ],
    "raw_logic_programs": [
      "# Declarations\nfactories = EnumSort([F, G, H, I, K])\nmodels = EnumSort([Volante, Whisper, Xavier, Ziggurat])\nyears = EnumSort([1, 2, 3])\nassembles = Function([factories, models, years] -> [bool])\n\n# Constraints\nForAll([f:factories], Count([m:models], assembles(f, m, 1)) == 1) ::: Each factory will assemble exactly one model in each year\nForAll([m:models], Count([f:factories], assembles(f, m, 1)) == 1) ::: Each model is assembled in exactly one factory in each year\nForAll([f:factories], Count([m:models], assembles(f, m, 2)) == 1) ::: Each factory will assemble exactly one model in each year\nForAll([m:models], Count([f:factories], assembles(f, m, 2)) == 1) ::: Each model is assembled in exactly one factory in each year\nForAll([f:factories], Count([m:models], assembles(f, m, 3)) == 1) ::: Each factory will assemble exactly one model in each year\nForAll([m:models], Count([f:factories], assembles(f, m, 3)) == 1) ::: Each model is assembled in exactly one factory in each year\nForAll([f:factories], Implies(assembles(f, Volante, 1), Not(assembles(f, Whisper, 2)))) ::: No model is manufactured in the same factory in consecutive years\nForAll([f:factories], Implies(assembles(f, Xavier, 1), Not(assembles(f, Ziggurat, 2)))) ::: No model is manufactured in the same factory in consecutive years\nForAll([f:factories], Implies(assembles(f, Ziggurat, 1), Not(assembles(f, Whisper, 2)))) ::: No model is manufactured in the same factory in consecutive years\nForAll([f:factories], Implies(ass"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_4_21",
    "context": "Each year for the next three years, Dynamic Motors will assemble four new automobile models—the Volante, the Whisper, the Xavier, and the Ziggurat—in exactly five of its factories—F, G, H, I, and K. Each factory will assemble exactly one model in each year. Because of contractual obligations Dynamic will assemble all four models each year according to the following constraints: No model is manufactured in the same factory in consecutive years. Neither Volantes nor Whispers are assembled in any factory in which Xaviers were assembled the previous year. Neither Volantes nor Xaviers are assembled in any factory in which Ziggurats were assembled the previous year. In any year, only one factory assembles Zigurats.",
    "question": "If in the first year Volantes and Whispers are assembled in F and G, respectively, the models that are assembled in the second year in F and G, respectively, could be",
    "answer": "B",
    "options": [
      "A) Volantes and Whispers",
      "B) Whispers and Volantes",
      "C) Whispers and Ziggurats",
      "D) Ziggurats and Whispers",
      "E) Ziggurats and Ziggurats"
    ],
    "raw_logic_programs": [
      "# Declarations\nfactories = EnumSort([F, G, H, I, K])\nmodels = EnumSort([Volante, Whisper, Xavier, Ziggurat])\nyears = EnumSort([1, 2, 3])\nassembled = Function([factories, models, years] -> [bool])\n\n# Constraints\nForAll([f:factories], Count([m:models], assembled(f, m, 1)) == 1) ::: Each factory will assemble exactly one model in each year\nForAll([m:models], Count([f:factories], assembled(f, m, 1)) == 1) ::: No model is manufactured in the same factory in consecutive years\nForAll([f:factories], Count([m:models], assembled(f, m, 2)) == 1) ::: Each factory will assemble exactly one model in each year\nForAll([m:models], Count([f:factories], assembled(f, m, 2)) == 1) ::: No model is manufactured in the same factory in consecutive years\nForAll([f:factories], Count([m:models], assembled(f, m, 3)) == 1) ::: Each factory will assemble exactly one model in each year\nForAll([m:models], Count([f:factories], assembled(f, m, 3)) == 1) ::: No model is manufactured in the same factory in consecutive years\nForAll([f:factories], Implies(assembled(f, Volante, 1), Not(assembled(f, Whisper, 2)))) ::: Neither Volantes nor Whispers are assembled in any factory in which Xaviers were assembled the previous year\nForAll([f:factories], Implies(assembled(f, Volante, 1), Not(assembled(f, Xavier, 2)))) ::: Neither Volantes nor Xaviers are assembled in any factory in which Ziggurats were assembled the previous year\nForAll([f:factories], Implies(assembled(f, Ziggurat, 1), Not(assembled(f, Ziggurat, 2)))) :"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_4_22",
    "context": "Each year for the next three years, Dynamic Motors will assemble four new automobile models—the Volante, the Whisper, the Xavier, and the Ziggurat—in exactly five of its factories—F, G, H, I, and K. Each factory will assemble exactly one model in each year. Because of contractual obligations Dynamic will assemble all four models each year according to the following constraints: No model is manufactured in the same factory in consecutive years. Neither Volantes nor Whispers are assembled in any factory in which Xaviers were assembled the previous year. Neither Volantes nor Xaviers are assembled in any factory in which Ziggurats were assembled the previous year. In any year, only one factory assembles Zigurats.",
    "question": "Which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Xaviers are assembled in exactly two of the factories in the first year.",
      "B) Xaviers are assembled in exactly one of the factories in the second year.",
      "C) Xaviers are assembled in exactly two of the factories in the second year.",
      "D) Xaviers are assembled in exactly one of the factories in the third year.",
      "E) Xaviers are assembled in exactly two of the factories in the third year."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_4_23",
    "context": "Each year for the next three years, Dynamic Motors will assemble four new automobile models—the Volante, the Whisper, the Xavier, and the Ziggurat—in exactly five of its factories—F, G, H, I, and K. Each factory will assemble exactly one model in each year. Because of contractual obligations Dynamic will assemble all four models each year according to the following constraints: No model is manufactured in the same factory in consecutive years. Neither Volantes nor Whispers are assembled in any factory in which Xaviers were assembled the previous year. Neither Volantes nor Xaviers are assembled in any factory in which Ziggurats were assembled the previous year. In any year, only one factory assembles Zigurats.",
    "question": "If in the second year Ziggurats are assembled in F, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Volantes are assembled in exactly one of the factories in the third year.",
      "B) Whispers are assembled in exactly one of the factories in the third year.",
      "C) Volantes are assembled in F in the first year.",
      "D) Whispers are assembled in F in the first year.",
      "E) Xaviers are assembled in F in the first year."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200002_1-G_4_24",
    "context": "Each year for the next three years, Dynamic Motors will assemble four new automobile models—the Volante, the Whisper, the Xavier, and the Ziggurat—in exactly five of its factories—F, G, H, I, and K. Each factory will assemble exactly one model in each year. Because of contractual obligations Dynamic will assemble all four models each year according to the following constraints: No model is manufactured in the same factory in consecutive years. Neither Volantes nor Whispers are assembled in any factory in which Xaviers were assembled the previous year. Neither Volantes nor Xaviers are assembled in any factory in which Ziggurats were assembled the previous year. In any year, only one factory assembles Zigurats.",
    "question": "If in the second year Volantes and Whispers are assembled in F and G, respectively, the models that are assembled in the first year in F and G, respectively, could be",
    "answer": "A",
    "options": [
      "A) Whispers and Volantes",
      "B) Whispers and Xaviers",
      "C) Xaviers and Volantes",
      "D) Xaviers and Ziggurats",
      "E) Ziggurats and Volantes"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_1_1",
    "context": "Each of seven television programs—H, J, L, P, Q, S, V—is assigned a different rank: from first through seventh (from most popular to least popular). The ranking is consistent with the following conditions: J and L are each less popular than H. J is more popular than Q. S and V are each less popular than L. P and S are each less popular than Q. S is not seventh.",
    "question": "Which one of the following could be the order of the programs, from most popular to least popular?",
    "answer": "C",
    "options": [
      "A) J, H, L, Q, V, S, P",
      "B) H, L, Q, J, S, P, V",
      "C) H, J, Q, L, S, V, P",
      "D) H, J, V, L, Q, S, P",
      "E) H, L, V, J, Q, P, S"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_1_2",
    "context": "Each of seven television programs—H, J, L, P, Q, S, V—is assigned a different rank: from first through seventh (from most popular to least popular). The ranking is consistent with the following conditions: J and L are each less popular than H. J is more popular than Q. S and V are each less popular than L. P and S are each less popular than Q. S is not seventh.",
    "question": "If J is more popular than L, and S is more popular than P, then which one of the following must be true of the ranking?",
    "answer": "A",
    "options": [
      "A) J is second.",
      "B) J is third.",
      "C) L is third.",
      "D) Q is third.",
      "E) P is seventh."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_1_3",
    "context": "Each of seven television programs—H, J, L, P, Q, S, V—is assigned a different rank: from first through seventh (from most popular to least popular). The ranking is consistent with the following conditions: J and L are each less popular than H. J is more popular than Q. S and V are each less popular than L. P and S are each less popular than Q. S is not seventh.",
    "question": "Which one of the following programs CANNOT be ranked third?",
    "answer": "E",
    "options": [
      "A) L",
      "B) J",
      "C) Q",
      "D) V",
      "E) P"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_1_4",
    "context": "Each of seven television programs—H, J, L, P, Q, S, V—is assigned a different rank: from first through seventh (from most popular to least popular). The ranking is consistent with the following conditions: J and L are each less popular than H. J is more popular than Q. S and V are each less popular than L. P and S are each less popular than Q. S is not seventh.",
    "question": "If V is more popular than Q and J is less popular than L, then which one of the following could be true of the ranking?",
    "answer": "D",
    "options": [
      "A) P is more popular than S.",
      "B) S is more popular than V.",
      "C) P is more popular than L.",
      "D) J is more popular than V.",
      "E) Q is more popular than V."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_1_5",
    "context": "Each of seven television programs—H, J, L, P, Q, S, V—is assigned a different rank: from first through seventh (from most popular to least popular). The ranking is consistent with the following conditions: J and L are each less popular than H. J is more popular than Q. S and V are each less popular than L. P and S are each less popular than Q. S is not seventh.",
    "question": "If Q is more popular than L, then each of the following must be true of the ranking EXCEPT:",
    "answer": "B",
    "options": [
      "A) H is first.",
      "B) L is fourth.",
      "C) V is not fourth.",
      "D) J is not third.",
      "E) Q is third."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_2_6",
    "context": "Bird-watchers explore a forest to see which of the following six kinds of birds—grosbeak, harrier, jay, martin, shrike, wren—it contains. The findings are consistent with the following conditions: If harriers are in the forest, then grosbeaks are not. If jays, martins, or both are in the forest, then so are harriers. If wrens are in the forest, then so are grosbeaks. If jays are not in the forest, then shrikes are.",
    "question": "Which one of the following could be a complete and accurate list of the birds NOT in the forest?",
    "answer": "D",
    "options": [
      "A) jays, shrikes",
      "B) harriers, grosbeaks",
      "C) grosbeaks, jays, martins",
      "D) grosbeaks, martins, shrikes, wrens",
      "E) martins, shrikes"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_2_7",
    "context": "Bird-watchers explore a forest to see which of the following six kinds of birds—grosbeak, harrier, jay, martin, shrike, wren—it contains. The findings are consistent with the following conditions: If harriers are in the forest, then grosbeaks are not. If jays, martins, or both are in the forest, then so are harriers. If wrens are in the forest, then so are grosbeaks. If jays are not in the forest, then shrikes are.",
    "question": "If both martins and harriers are in the forest, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Shrikes are the only other birds in the forest.",
      "B) Jays are the only other birds in the forest.",
      "C) The forest contains neither jays nor shrikes.",
      "D) There are at least two other kinds of birds in the forest.",
      "E) There are at most two other kinds of birds in the forest."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_2_8",
    "context": "Bird-watchers explore a forest to see which of the following six kinds of birds—grosbeak, harrier, jay, martin, shrike, wren—it contains. The findings are consistent with the following conditions: If harriers are in the forest, then grosbeaks are not. If jays, martins, or both are in the forest, then so are harriers. If wrens are in the forest, then so are grosbeaks. If jays are not in the forest, then shrikes are.",
    "question": "If jays are not in the forest, then which one of the following must be false?",
    "answer": "D",
    "options": [
      "A) Martins are in the forest.",
      "B) Harriers are in the forest.",
      "C) Neither martins nor harriers are in the forest.",
      "D) Neither martins nor shrikes are in the forest.",
      "E) Harriers and shrikes are the only birds in the forest."
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([grosbeak, harrier, jay, martin, shrike, wren])\nin_forest = Function([birds] -> [bool])\n\n# Constraints\nForAll([b:birds], Not(in_forest(b) == in_forest(b))) ::: If harriers are in the forest, then grosbeaks are not\nAnd(in_forest(jay), in_forest(martin), in_forest(harrier)) ::: If jays, martins, or both are in the forest, then so are harriers\nin_forest(wren) -> in_forest(grosbeak) ::: If wrens are in the forest, then so are grosbeaks\nNot(in_forest(jay)) -> in_forest(shrike) ::: If jays are not in the forest, then shrikes are\n\n# Options\nQuestion ::: If jays are not in the forest, then which one of the following must be false?\nis_exception(is_sat(in_forest(martin))) ::: (A)\nis_exception(is_sat(in_forest(harrier))) ::: (B)\nis_exception(is_sat(Not(in_forest(martin)) && Not(in_forest(harrier)))) ::: (C)\nis_exception(is_sat(Not(in_forest(martin)) && Not(in_forest(shrike)))) ::: (D)\nis_exception(is_sat(in_forest(harrier) && in_forest(shrike))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_2_9",
    "context": "Bird-watchers explore a forest to see which of the following six kinds of birds—grosbeak, harrier, jay, martin, shrike, wren—it contains. The findings are consistent with the following conditions: If harriers are in the forest, then grosbeaks are not. If jays, martins, or both are in the forest, then so are harriers. If wrens are in the forest, then so are grosbeaks. If jays are not in the forest, then shrikes are.",
    "question": "Which one of the following is the maximum number of the six kinds of birds the forest could contain?",
    "answer": "C",
    "options": [
      "A) two",
      "B) three",
      "C) four",
      "D) five",
      "E) six"
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([grosbeak, harrier, jay, martin, shrike, wren])\nin_forest = Function([birds] -> [bool])\n\n# Constraints\nForAll([b:birds], Not(in_forest(b))) ::: If harriers are in the forest, then grosbeaks are not\nAnd(in_forest(jay), in_forest(martin), in_forest(harrier)) ::: If jays, martins, or both are in the forest, then so are harriers\nAnd(in_forest(wren), in_forest(grosbeak)) ::: If wrens are in the forest, then so are grosbeaks\nNot(in_forest(jay)) ::: If jays are not in the forest, then shrikes are\n\n# Options\nQuestion ::: Which one of the following is the maximum number of the six kinds of birds the forest could contain?\nis_sat(Count([b:birds], in_forest(b)) == 2) ::: A) two\nis_sat(Count([b:birds], in_forest(b)) == 3) ::: B) three\nis_sat(Count([b:birds], in_forest(b)) == 4) ::: C) four\nis_sat(Count([b:birds], in_forest(b)) == 5) ::: D) five\nis_sat(Count([b:birds], in_forest(b)) == 6) ::: E) six\n------\nProblem:\nA certain company has six departments—A, B, C, D,"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_2_10",
    "context": "Bird-watchers explore a forest to see which of the following six kinds of birds—grosbeak, harrier, jay, martin, shrike, wren—it contains. The findings are consistent with the following conditions: If harriers are in the forest, then grosbeaks are not. If jays, martins, or both are in the forest, then so are harriers. If wrens are in the forest, then so are grosbeaks. If jays are not in the forest, then shrikes are.",
    "question": "Which one of the following pairs of birds CANNOT be among those birds contained in the forest?",
    "answer": "A",
    "options": [
      "A) jays, wrens",
      "B) jays, shrikes",
      "C) shrikes, wrens",
      "D) jays, martins",
      "E) shrikes, martins"
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([grosbeak, harrier, jay, martin, shrike, wren])\nin_forest = Function([birds] -> [bool])\n\n# Constraints\nForAll([b:birds], Not(in_forest(b) && Not(in_forest(b)))) ::: no bird is both in and not in the forest\nImplies(in_forest(harrier), Not(in_forest(grosbeak))) ::: If harriers are in the forest, then grosbeaks are not\nOr(in_forest(jay), in_forest(martin), in_forest(jay) && in_forest(martin)) ::: If jays, martins, or both are in the forest, then so are harriers\nImplies(in_forest(wren), in_forest(grosbeak)) ::: If wrens are in the forest, then so are grosbeaks\nImplies(Not(in_forest(jay)), in_forest(shrike)) ::: If jays are not in the forest, then shrikes are\n\n# Options\nQuestion ::: Which one of the following pairs of birds CANNOT be among those birds contained in the forest?\nis_exception(is_sat(And(in_forest(jay), in_forest(wren)))) ::: (A)\nis_exception(is_sat(And(in_forest(jay), in_forest(shrike)))) ::: (B)\nis_exception(is_sat(And(in_forest(shrike), in_forest(wren)))) ::: (C)"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_2_11",
    "context": "Bird-watchers explore a forest to see which of the following six kinds of birds—grosbeak, harrier, jay, martin, shrike, wren—it contains. The findings are consistent with the following conditions: If harriers are in the forest, then grosbeaks are not. If jays, martins, or both are in the forest, then so are harriers. If wrens are in the forest, then so are grosbeaks. If jays are not in the forest, then shrikes are.",
    "question": "If grosbeaks are in the forest, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Shrikes are in the forest.",
      "B) Wrens are in the forest.",
      "C) The forest contains both wrens and shrikes.",
      "D) At most two kinds of birds are in the forest.",
      "E) At least three kinds of birds are in the forest."
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([grosbeak, harrier, jay, martin, shrike, wren])\nin_forest = Function([birds] -> [bool])\n\n# Constraints\nForAll([b:birds], Not(in_forest(b) == in_forest(b))) ::: no two birds are in the forest at the same time\nImplies(in_forest(harrier), Not(in_forest(grosbeak))) ::: If harriers are in the forest, then grosbeaks are not\nAnd(in_forest(jay), in_forest(martin), in_forest(harrier)) ::: If jays, martins, or both are in the forest, then so are harriers\nImplies(in_forest(wren), in_forest(grosbeak)) ::: If wrens are in the forest, then so are grosbeaks\nImplies(Not(in_forest(jay)), in_forest(shrike)) ::: If jays are not in the forest, then shrikes are\n\n# Options\nQuestion ::: If grosbeaks are in the forest, then which one of the following must be true?\nis_valid(ForAll([b:birds], Implies(in_forest(grosbeak), in_forest(shrike)))) ::: A) Shrikes are in the forest.\nis_valid(ForAll([b:birds], Implies(in_forest(grosbeak), in_forest(wren)))) ::: B) Wrens are in the forest.\nis_valid(ForAll([b:birds], Implies(in_for"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_2_12",
    "context": "Bird-watchers explore a forest to see which of the following six kinds of birds—grosbeak, harrier, jay, martin, shrike, wren—it contains. The findings are consistent with the following conditions: If harriers are in the forest, then grosbeaks are not. If jays, martins, or both are in the forest, then so are harriers. If wrens are in the forest, then so are grosbeaks. If jays are not in the forest, then shrikes are.",
    "question": "Suppose the condition is added that if shrikes are in the forest, then harriers are not. If all other conditions remain in effect, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) The forest contains both jays and shrikes.",
      "B) The forest contains both wrens and shrikes.",
      "C) The forest contains both martins and shrikes.",
      "D) Jays are not in the forest, whereas martins are.",
      "E) Only two of the six kinds of birds are not in the forest."
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([grosbeak, harrier, jay, martin, shrike, wren])\nin_forest = Function([birds] -> [bool])\n\n# Constraints\nForAll([b:birds], Not(in_forest(b) == in_forest(b))) ::: If harriers are in the forest, then grosbeaks are not\nAnd(in_forest(jay), in_forest(martin), in_forest(both)) ::: If jays, martins, or both are in the forest, then so are harriers\nin_forest(wren) -> in_forest(grosbeak) ::: If wrens are in the forest, then so are grosbeaks\nNot(in_forest(jay)) -> in_forest(shrike) ::: If jays are not in the forest, then shrikes are\nin_forest(shrike) -> Not(in_forest(harrier)) ::: If shrikes are in the forest, then harriers are not\n\n# Options\nQuestion ::: Suppose the condition is added that if shrikes are in the forest, then harriers are not. If all other conditions remain in effect, then which one of the following could be true?\nis_sat(And(in_forest(jay), in_forest(shrike))) ::: (A)\nis_sat(And(in_forest(wren), in_forest(shrike))) ::: (B)\nis_sat(And(in_forest(martin), in_forest(shrike))) ::: (C)\nis_sat(And(Not("
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_3_13",
    "context": "From among ten stones, a jeweler will select six, one for each of six rings. Of the stones, three—F, G, and H—are rubies; three—J, K, and M—are sapphires; and four—W, X, Y, and Z—are topazes. The selection of stones must meet the following restrictions: At least two of the topazes are selected. If exactly two of the sapphires are selected, exactly one of the rubies is selected. If W is selected, neither H nor Z is selected. If M is selected, W is also selected.",
    "question": "Which one of the following could be the selection of stones?",
    "answer": "D",
    "options": [
      "A) F, G, H, M, X, Y",
      "B) F, G, J, K, M, W",
      "C) F, G, J, K, W, X",
      "D) G, H, J, X, Y, Z",
      "E) G, H, K, W, X, Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nstones = EnumSort([F, G, H, J, K, M, W, X, Y, Z])\nrings = EnumSort([ring1, ring2, ring3, ring4, ring5, ring6])\nselected = Function([stones, rings] -> [bool])\n\n# Constraints\nForAll([s:stones], Count([r:rings], selected(s, r)) <= 1) ::: one for each of six rings\nAnd(Count([s:stones], selected(s, ring1)) == 1, Count([s:stones], selected(s, ring2)) == 1, Count([s:stones], selected(s, ring3)) == 1, Count([s:stones], selected(s, ring4)) == 1, Count([s:stones], selected(s, ring5)) == 1, Count([s:stones], selected(s, ring6)) == 1) ::: six stones\nAnd(Count([s:stones], selected(s, ring1) && s == F) == 1, Count([s:stones], selected(s, ring2) && s == F) == 1, Count([s:stones], selected(s, ring3) && s == F) == 1, Count([s:stones], selected(s, ring4) && s == F) == 1, Count([s:stones], selected(s, ring5) && s == F) == 1, Count([s:stones], selected(s, ring6) && s == F) == 1) ::: F is selected\nAnd(Count([s:stones], selected(s, ring1) && s == G"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_3_14",
    "context": "From among ten stones, a jeweler will select six, one for each of six rings. Of the stones, three—F, G, and H—are rubies; three—J, K, and M—are sapphires; and four—W, X, Y, and Z—are topazes. The selection of stones must meet the following restrictions: At least two of the topazes are selected. If exactly two of the sapphires are selected, exactly one of the rubies is selected. If W is selected, neither H nor Z is selected. If M is selected, W is also selected.",
    "question": "Which one of the following most be true?",
    "answer": "E",
    "options": [
      "A) G is selected.",
      "B) J is selected.",
      "C) X is selected.",
      "D) Of at least one of the three types of stones, exactly one stone is selected.",
      "E) Of at least one of the three types of stones, exactly three stones are selected."
    ],
    "raw_logic_programs": [
      "# Declarations\nstones = EnumSort([F, G, H, J, K, M, W, X, Y, Z])\ntypes = EnumSort([ruby, sapphire, topaz])\nselected = Function([stones] -> [types])\n\n# Constraints\nForAll([s:stones], Count([t:types], selected(s) == t) <= 1) ::: exactly one of the three types of stones\nAnd(selected(W), selected(M)) ::: If M is selected, W is also selected\nAnd(selected(W), Not(selected(H))) ::: If W is selected, neither H nor Z is selected\nAnd(selected(W), Not(selected(Z))) ::: If W is selected, neither H nor Z is selected\nAnd(Count([t:types], selected(t) == sapphire) == 2, Count([t:types], selected(t) == ruby) == 1) ::: If exactly two of the sapphires are selected, exactly one of the rubies is selected\nCount([t:types], selected(t) == topaz) >= 2 ::: At least two of the topazes are selected\n\n# Options\nQuestion ::: Which one of the following most be true?\nis_valid(Exists([s:stones], selected(s) == ruby)) ::: (A)\nis_valid(Exists([s:stones], selected(s) == sapphire)) ::: (B)\nis_valid(Exists([s:stones], selected(s) == topaz)) ::: (C)\nis_valid(Exists([t:types], Count([s:stones], selected(s) == t) == 1)) ::: (D)"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_3_15",
    "context": "From among ten stones, a jeweler will select six, one for each of six rings. Of the stones, three—F, G, and H—are rubies; three—J, K, and M—are sapphires; and four—W, X, Y, and Z—are topazes. The selection of stones must meet the following restrictions: At least two of the topazes are selected. If exactly two of the sapphires are selected, exactly one of the rubies is selected. If W is selected, neither H nor Z is selected. If M is selected, W is also selected.",
    "question": "If Z is selected, which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) All three of the sapphires are selected.",
      "B) Both J and M are selected.",
      "C) Both K and M are selected.",
      "D) None of the rubies is selected.",
      "E) None of the sapphires is selected."
    ],
    "raw_logic_programs": [
      "# Declarations\nstones = EnumSort([F, G, H, J, K, M, W, X, Y, Z])\nrings = EnumSort([ring1, ring2, ring3, ring4, ring5, ring6])\nselected = Function([stones, rings] -> [bool])\n\n# Constraints\nForAll([s:stones], Count([r:rings], selected(s, r)) <= 1) ::: one for each of six rings\nAnd(selected(W, ring1), selected(M, ring1)) ::: If W is selected, M is also selected\nAnd(selected(M, ring1), Not(selected(W, ring1))) ::: If M is selected, W is not selected\nAnd(selected(W, ring1), Not(selected(H, ring1))) ::: If W is selected, H is not selected\nAnd(selected(W, ring1), Not(selected(Z, ring1))) ::: If W is selected, Z is not selected\nAnd(selected(J, ring1), selected(K, ring1)) ::: If exactly two of the sapphires are selected, exactly one of the rubies is selected\nCount([s:stones], selected(s, ring1)) == 6 ::: six stones are selected\nCount([s:stones], selected(s, ring1) == true) >= 2 ::: At least two of the topazes are selected\n\n# Options\nQuestion ::: If Z is selected, which one of the following could be true?\nis_exception(is_sat(And(selected(J, ring1), selected(K, ring1), selected(M, ring1)))) ::: A) All three of the sapphires are"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_3_16",
    "context": "From among ten stones, a jeweler will select six, one for each of six rings. Of the stones, three—F, G, and H—are rubies; three—J, K, and M—are sapphires; and four—W, X, Y, and Z—are topazes. The selection of stones must meet the following restrictions: At least two of the topazes are selected. If exactly two of the sapphires are selected, exactly one of the rubies is selected. If W is selected, neither H nor Z is selected. If M is selected, W is also selected.",
    "question": "If exactly two rubies are selected, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) H is selected.",
      "B) J is selected.",
      "C) Z is selected.",
      "D) Exactly one sapphire is selected.",
      "E) Exactly two topazes are selected."
    ],
    "raw_logic_programs": [
      "# Declarations\nstones = EnumSort([F, G, H, J, K, M, W, X, Y, Z])\nrings = EnumSort([ring1, ring2, ring3, ring4, ring5, ring6])\nselected = Function([stones, rings] -> [bool])\n\n# Constraints\nForAll([s:stones], Count([r:rings], selected(s, r)) <= 1) ::: one for each of six rings\nAnd(selected(F, ring1), selected(G, ring1), selected(H, ring1)) ::: three—F, G, and H—are rubies\nAnd(selected(J, ring1), selected(K, ring1), selected(M, ring1)) ::: three—J, K, and M—are sapphires\nAnd(selected(W, ring1), selected(X, ring1), selected(Y, ring1), selected(Z, ring1)) ::: four—W, X, Y, and Z—are topazes\nCount([s:stones], And(selected(s, ring1), s == topaz)) >= 2 ::: At least two of the topazes are selected\nAnd(Count([s:stones], And(selected(s, ring1), s == sapphire)) == 2, Count([s:stones], And(selected(s, ring1), s == ruby)) == 1) ::: If exactly two of the sapphires are selected, exactly one of the rubies is selected\nAnd(selected(W, ring1), Not(selected(H, ring1))) ::: If W is selected, neither H nor Z is selected\nAnd(selected(M, ring1), selected("
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_3_17",
    "context": "From among ten stones, a jeweler will select six, one for each of six rings. Of the stones, three—F, G, and H—are rubies; three—J, K, and M—are sapphires; and four—W, X, Y, and Z—are topazes. The selection of stones must meet the following restrictions: At least two of the topazes are selected. If exactly two of the sapphires are selected, exactly one of the rubies is selected. If W is selected, neither H nor Z is selected. If M is selected, W is also selected.",
    "question": "Which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) The selection of stones includes at least one ruby.",
      "B) The selection of stones includes at most two rubies.",
      "C) The selection of stones includes either F or Z, or both.",
      "D) The selection of stones includes either X or Y, or both.",
      "E) The selection of stones includes either X or Z, or both."
    ],
    "raw_logic_programs": [
      "# Declarations\nstones = EnumSort([F, G, H, J, K, M, W, X, Y, Z])\nrings = EnumSort([ring1, ring2, ring3, ring4, ring5, ring6])\nselected = Function([stones, rings] -> [bool])\n\n# Constraints\nForAll([s:stones], Count([r:rings], selected(s, r)) <= 1) ::: one for each of six rings\nAnd(selected(W, ring1), selected(M, ring1)) ::: If M is selected, W is also selected\nAnd(selected(W, ring1), Not(selected(H, ring1))) ::: If W is selected, neither H nor Z is selected\nAnd(selected(W, ring1), Not(selected(Z, ring1))) ::: If W is selected, neither H nor Z is selected\nAnd(Count([s:stones], selected(s, ring1)) == 2, Count([s:stones], selected(s, ring1)) == 1)) ::: If exactly two of the sapphires are selected, exactly one of the rubies is selected\nCount([s:stones], selected(s, ring1)) >= 2 ::: At least two of the topazes are selected\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([s:stones], selected(s, ring1) && s == F || s == G || s == H))) ::: (A)\nis_valid(Exists([s:stones], selected(s, ring1) && s == F || s == G || s == H)) ::: (B)\nis_valid(Exists([s"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_3_18",
    "context": "From among ten stones, a jeweler will select six, one for each of six rings. Of the stones, three—F, G, and H—are rubies; three—J, K, and M—are sapphires; and four—W, X, Y, and Z—are topazes. The selection of stones must meet the following restrictions: At least two of the topazes are selected. If exactly two of the sapphires are selected, exactly one of the rubies is selected. If W is selected, neither H nor Z is selected. If M is selected, W is also selected.",
    "question": "If J and M are the only sapphires selected, which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) F and G are both selected.",
      "B) F and X are both selected.",
      "C) G and H are both selected.",
      "D) G and K are both selected.",
      "E) Y and Z are both selected."
    ],
    "raw_logic_programs": [
      "# Declarations\nstones = EnumSort([F, G, H, J, K, M, W, X, Y, Z])\nrings = EnumSort([ring1, ring2, ring3, ring4, ring5, ring6])\nselected = Function([stones, rings] -> [bool])\n\n# Constraints\nForAll([s:stones], Count([r:rings], selected(s, r)) <= 1) ::: one for each of six rings\nAnd(selected(F, ring1), selected(G, ring1), selected(H, ring1)) ::: three—F, G, and H—are rubies\nAnd(selected(J, ring1), selected(K, ring1), selected(M, ring1)) ::: three—J, K, and M—are sapphires\nAnd(selected(W, ring1), selected(X, ring1), selected(Y, ring1), selected(Z, ring1)) ::: four—W, X, Y, and Z—are topazes\nCount([s:stones], And(selected(s, ring1), s == topaz)) >= 2 ::: At least two of the topazes are selected\nAnd(Count([s:stones], And(selected(s, ring1), s == sapphire)) == 2, Count([s:stones], And(selected(s, ring1), s == ruby)) == 1) ::: If exactly two of the sapphires are selected, exactly one of the rubies is selected\nImplies(selected(W, ring1), Not(selected(H, ring1))) ::: If W is selected, neither H nor Z is selected\nImplies(selected(M, ring1), selected(W, ring1)) ::: If M is selected, W is also selected\n\n# Options\nQuestion ::: If J and M are the only sapphires selected, which one of the following could be true?\nis_valid(And(selected(F, ring1), selected(G, ring1))) ::: (A)\nis_valid(And(selected(F, ring1), selected(X, ring1))) ::: (B)\nis_valid(And(selected(G, ring1), selected(H, ring1))) ::: (C)\nis_valid(And(selected(G, ring1), selected(K, ring1))) ::: (D)\nis_valid(And(selected(Y, ring1), selected(Z, ring1))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_4_19",
    "context": "There are exactly ten stores and no other buildings on Oak Street. On the north side of the street, from west to east, are stores 1, 3, 5, 7, and 9; on the south side of the street, also from west to east, are stores 2, 4, 6, 8, and 10. The stores on the north side are located directly across the street from those on the south side, facing each other in pairs, as follows: 1 and 2; 3 and 4; 5 and 6; 7 and 8; 9 and 10. Each store is decorated with lights in exactly one of the following colors: green, red, and yellow. The stores have been decorated with lights according to the following conditions: No store is decorated with lights of the same color as those of any store adjacent to it. No store is decorated with lights of the same color as those of the store directly across the street from it. Yellow lights decorate exactly one store on each side of the street. Red lights decorate store 4. Yellow lights decorate store 5.",
    "question": "Which one of the following could be an accurate list of the colors of the lights that decorate stores 2, 4, 6, 8, and 10, respectively?",
    "answer": "B",
    "options": [
      "A) green, red, green, red, green",
      "B) green, red, green, yellow, red",
      "C) green, red, yellow, red, green",
      "D) yellow, green, red, green, red",
      "E) yellow, red, green, red, yellow"
    ],
    "raw_logic_programs": [
      ",\n# Declarations\nstores = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ncolors = EnumSort([green, red, yellow])\nlights = Function([stores] -> [colors])\n\n# Constraints\nForAll([s:stores], Count([c:colors], lights(s) == c) == 1) ::: Each store is decorated with lights in exactly one of the following colors\nForAll([s:stores], Implies(lights(s) == lights(s + 1), s!= 10)) ::: No store is decorated with lights of the same color as those of any store adjacent to it\nForAll([s:stores], Implies(lights(s) == lights(s - 1), s!= 1)) ::: No store is decorated with lights of the same color as those of the store directly across the street from it\nCount([s:stores], lights(s) == green) == 2 ::: Yellow lights decorate exactly one store on each side of the street\nlights(4) == red ::: Red lights decorate store 4\nlights(5) == yellow ::: Yellow lights decorate store 5\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the colors of the lights that decorate stores 2, 4, 6, 8, and 10, respectively?\nis_sat(lights(2) == green, lights(4) == red, lights(6) == green, lights(8) == red, lights(10) == green) ::: (A)\nis_sat(lights(2) == green, lights(4) == red, lights(6) == green, lights(8) == yellow, lights(10) == red) ::: (B)\nis_sat(lights(2) == green, lights(4) == red, lights(6) == yellow, lights(8) == red, lights(10) == green) ::: (C)\nis_sat(lights(2) == yellow, lights(4) == green, lights(6) == red, lights(8) == green, lights(10) == red) ::: (D)\nis_sat(lights(2) == yellow, lights(4) == red, lights(6) == green, lights(8) == red, lights(10) == yellow)"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_4_20",
    "context": "There are exactly ten stores and no other buildings on Oak Street. On the north side of the street, from west to east, are stores 1, 3, 5, 7, and 9; on the south side of the street, also from west to east, are stores 2, 4, 6, 8, and 10. The stores on the north side are located directly across the street from those on the south side, facing each other in pairs, as follows: 1 and 2; 3 and 4; 5 and 6; 7 and 8; 9 and 10. Each store is decorated with lights in exactly one of the following colors: green, red, and yellow. The stores have been decorated with lights according to the following conditions: No store is decorated with lights of the same color as those of any store adjacent to it. No store is decorated with lights of the same color as those of the store directly across the street from it. Yellow lights decorate exactly one store on each side of the street. Red lights decorate store 4. Yellow lights decorate store 5.",
    "question": "If green lights decorate store 7, then each of the following statements could be false EXCEPT:",
    "answer": "D",
    "options": [
      "A) Green lights decorate store 2.",
      "B) Green lights decorate store 10.",
      "C) Red lights decorate store 8.",
      "D) Red lights decorate store 9.",
      "E) Yellow lights decorate store 2."
    ],
    "raw_logic_programs": [
      ",\n# Declarations\nstores = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ncolors = EnumSort([green, red, yellow])\nlights = Function([stores] -> [colors])\n\n# Constraints\nForAll([s:stores], Count([c:colors], lights(s) == c) == 1) ::: Each store is decorated with lights in exactly one of the following colors\nForAll([s:stores], Implies(s < 6, lights(s)!= lights(s + 1))) ::: No store is decorated with lights of the same color as those of any store adjacent to it\nForAll([s:stores], Implies(s < 10, lights(s)!= lights(s - 1))) ::: No store is decorated with lights of the same color as those of the store directly across the street from it\nCount([s:stores], lights(s) == yellow) == 2 ::: Yellow lights decorate exactly one store on each side of the street\nlights(4) == red ::: Red lights decorate store 4\nlights(5) == yellow ::: Yellow lights decorate store 5\nlights(7) == green ::: If green lights decorate store 7\n\n# Options\nQuestion ::: If green lights decorate store 7, then each of the following statements could be false EXCEPT:\nis_exception(is_sat(lights(2) == green)) ::: A) Green lights decorate store 2.\nis_exception(is_sat(lights(10) == green)) ::: B) Green lights decorate store 10.\nis_exception(is_sat(lights(8) == red)) ::: C) Red lights decorate store 8.\nis_exception(is_sat(lights(9) == red)) ::: D) Red lights decorate store 9.\nis_exception(is_sat(lights(2) == yellow)) ::: E) Yellow lights decorate store 2.\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments: sales, production, or administration. The following conditions apply: The number of employees in the sales department is 20 more than the number of employees in the production department. The number of employees in the production department is 10 more than the number of"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_4_21",
    "context": "There are exactly ten stores and no other buildings on Oak Street. On the north side of the street, from west to east, are stores 1, 3, 5, 7, and 9; on the south side of the street, also from west to east, are stores 2, 4, 6, 8, and 10. The stores on the north side are located directly across the street from those on the south side, facing each other in pairs, as follows: 1 and 2; 3 and 4; 5 and 6; 7 and 8; 9 and 10. Each store is decorated with lights in exactly one of the following colors: green, red, and yellow. The stores have been decorated with lights according to the following conditions: No store is decorated with lights of the same color as those of any store adjacent to it. No store is decorated with lights of the same color as those of the store directly across the street from it. Yellow lights decorate exactly one store on each side of the street. Red lights decorate store 4. Yellow lights decorate store 5.",
    "question": "Which one of the following statements must be true?",
    "answer": "B",
    "options": [
      "A) Green lights decorate store 10.",
      "B) Red lights decorate store 1.",
      "C) Red lights decorate store 8.",
      "D) Yellow lights decorate store 8.",
      "E) Yellow lights decorate store 10."
    ],
    "raw_logic_programs": [
      ",\n# Declarations\nstores = EnumSort([1, 3, 5, 7, 9, 2, 4, 6, 8, 10])\ncolors = EnumSort([green, red, yellow])\nlights = Function([stores] -> [colors])\n\n# Constraints\nForAll([s:stores], Count([c:colors], lights(s) == c) == 1) ::: Each store is decorated with lights in exactly one of the following colors\nForAll([s:stores], Implies(lights(s) == lights(s + 1), s!= 10)) ::: No store is decorated with lights of the same color as those of any store adjacent to it\nForAll([s:stores], Implies(lights(s) == lights(s - 1), s!= 1)) ::: No store is decorated with lights of the same color as those of the store directly across the street from it\nCount([s:stores], lights(s) == yellow) == 2 ::: Yellow lights decorate exactly one store on each side of the street\nlights(4) == red ::: Red lights decorate store 4\nlights(5) == yellow ::: Yellow lights decorate store 5\n\n# Options\nQuestion ::: Which one of the following statements must be true?\nis_valid(lights(10) == green) ::: (A)\nis_valid(lights(1) == red) ::: (B)\nis_valid(lights(8) == red) ::: (C)\nis_valid(lights(8) == yellow) ::: (D)\nis_valid(lights(10) == yellow) ::: (E)\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following departments: accounting, human resources, information technology, and marketing. The following conditions apply: A is assigned to work in the accounting department. B is assigned to work in the human resources department. C is assigned to work in the information technology department. D is assigned to work in the marketing department. E is assigned to work in the same department as A. F is assigned to work in the same department as B.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A and B are the only employees assigned to work in the accounting department.\n(B) A and"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_4_22",
    "context": "There are exactly ten stores and no other buildings on Oak Street. On the north side of the street, from west to east, are stores 1, 3, 5, 7, and 9; on the south side of the street, also from west to east, are stores 2, 4, 6, 8, and 10. The stores on the north side are located directly across the street from those on the south side, facing each other in pairs, as follows: 1 and 2; 3 and 4; 5 and 6; 7 and 8; 9 and 10. Each store is decorated with lights in exactly one of the following colors: green, red, and yellow. The stores have been decorated with lights according to the following conditions: No store is decorated with lights of the same color as those of any store adjacent to it. No store is decorated with lights of the same color as those of the store directly across the street from it. Yellow lights decorate exactly one store on each side of the street. Red lights decorate store 4. Yellow lights decorate store 5.",
    "question": "If green lights decorate five stores on the street, then which one of the following statements must be true?",
    "answer": "E",
    "options": [
      "A) Green lights decorate store 9.",
      "B) Red lights decorate store 2.",
      "C) Red lights decorate store 7.",
      "D) Red lights decorate store 10.",
      "E) Yellow lights decorate store 8."
    ],
    "raw_logic_programs": [
      ",\n# Declarations\nstores = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ncolors = EnumSort([green, red, yellow])\nlights = Function([stores] -> [colors])\n\n# Constraints\nForAll([s:stores], Count([c:colors], lights(s) == c) == 1) ::: Each store is decorated with lights in exactly one of the following colors\nForAll([s:stores], Implies(lights(s) == lights(s + 1), s!= 10)) ::: No store is decorated with lights of the same color as those of any store adjacent to it\nForAll([s:stores], Implies(lights(s) == lights(s - 1), s!= 1)) ::: No store is decorated with lights of the same color as those of the store directly across the street from it\nCount([s:stores], lights(s) == yellow) == 2 ::: Yellow lights decorate exactly one store on each side of the street\nlights(4) == red ::: Red lights decorate store 4\nlights(5) == yellow ::: Yellow lights decorate store 5\n\n# Options\nQuestion ::: If green lights decorate five stores on the street, then which one of the following statements must be true?\nis_valid(lights(9) == green) ::: (A)\nis_valid(lights(2) == red) ::: (B)\nis_valid(lights(7) == red) ::: (C)\nis_valid(lights(10) == red) ::: (D)\nis_valid(lights(8) == yellow) ::: (E)\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following departments: accounting, human resources, information technology, and marketing. The following conditions apply: B is assigned to work in the accounting department. C is assigned to work in the human resources department. D is assigned to work in the information technology department. E is assigned to work in the marketing department. A is assigned to work in the same department as F.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A is assigned to work in the accounting department.\n(B) A is assigned to work in the human"
    ]
  },
  {
    "id": "ar_lsat_200012_4-G_4_23",
    "context": "There are exactly ten stores and no other buildings on Oak Street. On the north side of the street, from west to east, are stores 1, 3, 5, 7, and 9; on the south side of the street, also from west to east, are stores 2, 4, 6, 8, and 10. The stores on the north side are located directly across the street from those on the south side, facing each other in pairs, as follows: 1 and 2; 3 and 4; 5 and 6; 7 and 8; 9 and 10. Each store is decorated with lights in exactly one of the following colors: green, red, and yellow. The stores have been decorated with lights according to the following conditions: No store is decorated with lights of the same color as those of any store adjacent to it. No store is decorated with lights of the same color as those of the store directly across the street from it. Yellow lights decorate exactly one store on each side of the street. Red lights decorate store 4. Yellow lights decorate store 5.",
    "question": "Suppose that yellow lights decorate exactly two stores, not just one, on the south side of the street and decorate exactly one store on the north side. If all of the other conditions remain the same, then which one of the following statements must be true?",
    "answer": "D",
    "options": [
      "A) Green lights decorate store 1.",
      "B) Red lights decorate store 7.",
      "C) Red lights decorate store 10.",
      "D) Yellow lights decorate store 2.",
      "E) Yellow lights decorate store 8."
    ],
    "raw_logic_programs": [
      "# Declarations\nstores = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ncolors = EnumSort([green, red, yellow])\nlights = Function([stores] -> [colors])\n\n# Constraints\nForAll([s:stores], Count([c:colors], lights(s) == c) == 1) ::: Each store is decorated with lights in exactly one of the following colors\nForAll([s:stores], Implies(lights(s) == lights(s + 1), s!= 10)) ::: No store is decorated with lights of the same color as those of any store adjacent to it\nForAll([s:stores], Implies(lights(s) == lights(s - 1), s!= 1)) ::: No store is decorated with lights of the same color as those of the store directly across the street from it\nCount([s:stores], lights(s) == yellow) == 2 ::: Yellow lights decorate exactly one store on each side of the street\nlights(4) == red ::: Red lights decorate store 4\nlights(5) == yellow ::: Yellow lights decorate store 5\n\n# Options\nQuestion ::: Suppose that yellow lights decorate exactly two stores, not just one, on the south side of the street and decorate exactly one store on the north side. If all of the other conditions remain the same, then which one of the following statements must be true?\nis_sat(lights(1) == green) ::: (A)\nis_sat(lights(7) == red) ::: (B)\nis_sat(lights(10) == red) ::: (C)\nis_sat(lights(2) == yellow) ::: (D)\nis_sat(lights(8) == yellow) ::: (E)\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following departments: accounting, human resources, information technology, and marketing. The following conditions apply: B is assigned to work in the accounting department. C is assigned to work in the human resources department. D is assigned to work in the information technology department. E is assigned to work in the marketing department. A is assigned to work in the same department as F.\nQuestion:\nWhich one of the following"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_1_1",
    "context": "Jill, Kurt, Larisa, Manny, and Olga are the clerks in a supermarket. The supermarket has exactly nine parallel aisles, numbered consecutively 1 through 9 from one end of the store to the other. Each aisle is stocked by exactly one clerk and no clerk stocks more than two aisles. Stocking assignments must meet the following conditions: Olga stocks exactly one aisle. Kurt stocks aisle 2. Manny does not stock aisle 1. Jill does not stock consecutive aisles. Kurt stocks the only aisle between the two aisles Manny stocks. Exactly one of Larisa's aisles is an end aisle. Olga's aisle is numbered higher than either of Kurt's aisles, and lower than at least one of Larisa's.",
    "question": "Which one of the following clerks could stock two consecutive aisles?",
    "answer": "C",
    "options": [
      "A) Jill",
      "B) Kurt",
      "C) Larisa",
      "D) Manny",
      "E) Olga"
    ],
    "raw_logic_programs": [
      "# Declarations\nclerks = EnumSort([Jill, Kurt, Larisa, Manny, Olga])\naisles = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9])\nstocks = Function([clerks, aisles] -> [bool])\n\n# Constraints\nForAll([c:clerks], Count([a:aisles], stocks(c, a)) == 1) ::: Each aisle is stocked by exactly one clerk\nForAll([c:clerks], Count([a:aisles], stocks(c, a)) <= 2) ::: no clerk stocks more than two aisles\nstocks(Olga, 1) ::: Olga stocks exactly one aisle\nstocks(Kurt, 2) ::: Kurt stocks aisle 2\nNot(stocks(Manny, 1)) ::: Manny does not stock aisle 1\nForAll([a:aisles], Implies(stocks(Jill, a), Not(stocks(Jill, a - 1)))) ::: Jill does not stock consecutive aisles\nAnd(stocks(Kurt, a), stocks(Manny, b)) => a < b ::: Kurt stocks the only aisle between the two aisles Manny stocks\nAnd(stocks(Larisa, a), stocks(Larisa, b)) => a!= b ::: Exactly one of Larisa's aisles is an end aisle\nAnd(stocks(Olga, a), stocks(Kurt, b)) => a > b ::: Olga's aisle is numbered higher than either of Kurt's aisles\nAnd(stocks(Olga, a), stocks(Larisa, b)) => a < b ::: Olga's aisle is numbered lower than at least one of Larisa's\n\n# Options\nQuestion ::: Which one of the following clerks could stock two consecutive aisles?\nis_valid(Exists([a:aisles], And(stocks(Jill, a), stocks(Jill, a + 1)))) ::: (A)\nis_valid(Exists([a:aisles], And(stocks(Kurt, a), stocks(Kurt, a + 1)))) ::: (B)\nis_valid(Exists([a:aisles], And(stocks(Larisa, a), stocks"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_1_2",
    "context": "Jill, Kurt, Larisa, Manny, and Olga are the clerks in a supermarket. The supermarket has exactly nine parallel aisles, numbered consecutively 1 through 9 from one end of the store to the other. Each aisle is stocked by exactly one clerk and no clerk stocks more than two aisles. Stocking assignments must meet the following conditions: Olga stocks exactly one aisle. Kurt stocks aisle 2. Manny does not stock aisle 1. Jill does not stock consecutive aisles. Kurt stocks the only aisle between the two aisles Manny stocks. Exactly one of Larisa's aisles is an end aisle. Olga's aisle is numbered higher than either of Kurt's aisles, and lower than at least one of Larisa's.",
    "question": "Which one of the following is a pair of clerks, neither of whom could stock aisle 5?",
    "answer": "E",
    "options": [
      "A) Jill and Manny",
      "B) Kurt and Olga",
      "C) Larisa and Manny",
      "D) Kurt and Manny",
      "E) Larisa and Olga"
    ],
    "raw_logic_programs": [
      "# Declarations\nclerks = EnumSort([Jill, Kurt, Larisa, Manny, Olga])\naisles = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9])\nstocks = Function([clerks, aisles] -> [bool])\n\n# Constraints\nForAll([c:clerks], Count([a:aisles], stocks(c, a)) == 1) ::: each clerk stocks exactly one aisle\nForAll([a:aisles], Count([c:clerks], stocks(c, a)) == 1) ::: no clerk stocks more than two aisles\nCount([a:aisles], stocks(Olga, a)) == 1 ::: Olga stocks exactly one aisle\nstocks(Kurt, 2) ::: Kurt stocks aisle 2\nNot(stocks(Manny, 1)) ::: Manny does not stock aisle 1\nForAll([a:aisles], Implies(stocks(Jill, a), Not(stocks(Jill, a - 1)))) ::: Jill does not stock consecutive aisles\nAnd(stocks(Kurt, a), stocks(Manny, b), a < b) ::: Kurt stocks the only aisle between the two aisles Manny stocks\nCount([a:aisles], stocks(Larisa, a)) == 2 ::: Exactly one of Larisa's aisles is an end aisle\nAnd(stocks(Olga, a), stocks(Kurt, b), a > b) ::: Olga's aisle is numbered higher than either of Kurt's aisles\nAnd(stocks(Olga, a), stocks(Larisa, b), a < b) ::: lower than at least one of Larisa's\n\n# Options\nQuestion ::: Which one of the following is a pair of clerks, neither of whom could stock aisle 5?\nis_exception(is_sat(And(stocks(Jill, 5), stocks(Manny, 5)))) ::: (A)\nis_exception(is_sat(And(stocks(Kurt, 5), stocks(Olga, 5)))) ::: (B)\nis_exception(is_sat(And(stocks(Larisa, 5), stocks(Manny,"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_1_3",
    "context": "Jill, Kurt, Larisa, Manny, and Olga are the clerks in a supermarket. The supermarket has exactly nine parallel aisles, numbered consecutively 1 through 9 from one end of the store to the other. Each aisle is stocked by exactly one clerk and no clerk stocks more than two aisles. Stocking assignments must meet the following conditions: Olga stocks exactly one aisle. Kurt stocks aisle 2. Manny does not stock aisle 1. Jill does not stock consecutive aisles. Kurt stocks the only aisle between the two aisles Manny stocks. Exactly one of Larisa's aisles is an end aisle. Olga's aisle is numbered higher than either of Kurt's aisles, and lower than at least one of Larisa's.",
    "question": "Which one of the following is a complete and accurate list of clerks, any one of whom could stock aisle 3?",
    "answer": "B",
    "options": [
      "A) Jill, Kurt, Larisa",
      "B) Jill, Larisa, Manny",
      "C) Jill, Larisa, Olga",
      "D) Jill, Kurt, Larisa, Manny",
      "E) Jill, Kurt, Larisa, Olga"
    ],
    "raw_logic_programs": [
      "# Declarations\nclerks = EnumSort([Jill, Kurt, Larisa, Manny, Olga])\naisles = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9])\nstocks = Function([clerks, aisles] -> [bool])\n\n# Constraints\nForAll([c:clerks], Count([a:aisles], stocks(c, a)) == 1) ::: each clerk stocks exactly one aisle\nForAll([a:aisles], Count([c:clerks], stocks(c, a)) == 1) ::: each aisle is stocked by exactly one clerk\nstocks(Olga, aisles) == 1 ::: Olga stocks exactly one aisle\nstocks(Kurt, 2) ::: Kurt stocks aisle 2\nNot(stocks(Manny, 1)) ::: Manny does not stock aisle 1\nForAll([a:aisles], Implies(stocks(Jill, a), Not(stocks(Jill, a - 1)))) ::: Jill does not stock consecutive aisles\nAnd(stocks(Manny, aisles), stocks(Kurt, aisles)) ::: Kurt stocks the only aisle between the two aisles Manny stocks\nAnd(stocks(Larisa, aisles), stocks(Larisa, aisles)) ::: Exactly one of Larisa's aisles is an end aisle\nAnd(stocks(Olga, aisles), stocks(Kurt, aisles)) ::: Olga's aisle is numbered higher than either of Kurt's aisles\nAnd(stocks(Olga, aisles), stocks(Larisa, aisles)) ::: Olga's aisle is numbered lower than at least one of Larisa's\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of clerks, any one of whom could stock aisle 3?\nis_sat(ForAll([c:clerks], stocks(c, 3) == stocks(Jill, c))) ::: (A)\nis_sat(ForAll([c:clerks], stocks(c, 3) == stocks(Larisa, c))) ::: (B)\nis_sat(ForAll([c:clerks"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_1_4",
    "context": "Jill, Kurt, Larisa, Manny, and Olga are the clerks in a supermarket. The supermarket has exactly nine parallel aisles, numbered consecutively 1 through 9 from one end of the store to the other. Each aisle is stocked by exactly one clerk and no clerk stocks more than two aisles. Stocking assignments must meet the following conditions: Olga stocks exactly one aisle. Kurt stocks aisle 2. Manny does not stock aisle 1. Jill does not stock consecutive aisles. Kurt stocks the only aisle between the two aisles Manny stocks. Exactly one of Larisa's aisles is an end aisle. Olga's aisle is numbered higher than either of Kurt's aisles, and lower than at least one of Larisa's.",
    "question": "Which one of the following is a complete and accurate list of aisles, any one of which could be one of the aisles Manny stocks?",
    "answer": "D",
    "options": [
      "A) 1, 3, 4, 5",
      "B) 3, 5, 7, 9",
      "C) 3, 4, 5, 6",
      "D) 3, 4, 5, 6, 7",
      "E) 3, 5, 7"
    ],
    "raw_logic_programs": [
      "# Declarations\nclerks = EnumSort([Jill, Kurt, Larisa, Manny, Olga])\naisles = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9])\nstocks = Function([clerks, aisles] -> [bool])\n\n# Constraints\nForAll([c:clerks], Count([a:aisles], stocks(c, a)) == 1) ::: each clerk stocks exactly one aisle\nForAll([a:aisles], Count([c:clerks], stocks(c, a)) == 1) ::: each aisle is stocked by exactly one clerk\nCount([a:aisles], stocks(Olga, a)) == 1 ::: Olga stocks exactly one aisle\nstocks(Kurt, 2) ::: Kurt stocks aisle 2\nForAll([a:aisles], Implies(stocks(Manny, a), a!= 1)) ::: Manny does not stock aisle 1\nForAll([a:aisles], Implies(stocks(Jill, a), Not(stocks(Jill, a - 1)))) ::: Jill does not stock consecutive aisles\nAnd(stocks(Kurt, a), stocks(Manny, b), a < b) ::: Kurt stocks the only aisle between the two aisles Manny stocks\nCount([a:aisles], stocks(Larisa, a)) == 2 ::: Larisa stocks exactly two aisles\nAnd(stocks(Larisa, a), stocks(Larisa, b), a!= b) ::: Larisa does not stock consecutive aisles\nAnd(stocks(Larisa, a), stocks(Larisa, b), a < b) ::: Larisa's aisles are not both end aisles\nAnd(stocks(Larisa, a), stocks(Larisa, b), a > b) ::: Larisa's aisles are not both end aisles\nAnd(stocks(Olga, a), stocks(Kurt, b), a > b) ::: Olga's aisle is numbered higher than either of Kurt's aisles\nAnd(stocks(Olga, a), stocks(Larisa, b), a < b) ::: Olga's aisle is numbered lower than at least one of Larisa's"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_1_5",
    "context": "Jill, Kurt, Larisa, Manny, and Olga are the clerks in a supermarket. The supermarket has exactly nine parallel aisles, numbered consecutively 1 through 9 from one end of the store to the other. Each aisle is stocked by exactly one clerk and no clerk stocks more than two aisles. Stocking assignments must meet the following conditions: Olga stocks exactly one aisle. Kurt stocks aisle 2. Manny does not stock aisle 1. Jill does not stock consecutive aisles. Kurt stocks the only aisle between the two aisles Manny stocks. Exactly one of Larisa's aisles is an end aisle. Olga's aisle is numbered higher than either of Kurt's aisles, and lower than at least one of Larisa's.",
    "question": "If Larisa's aisles are separated by the maximum number of aisles that could separate her aisles, which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Jill stocks aisle 6.",
      "B) Manny stocks aisle 7.",
      "C) Both of Jill's aisles are numbered lower than Olga's.",
      "D) Jill stocks only even-numbered aisles.",
      "E) Only one clerk stocks a higher numbered aisle than Olga does."
    ],
    "raw_logic_programs": [
      "# Declarations\nclerks = EnumSort([Jill, Kurt, Larisa, Manny, Olga])\naisles = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9])\nstocks = Function([clerks, aisles] -> [bool])\n\n# Constraints\nForAll([c:clerks], Count([a:aisles], stocks(c, a)) == 1) ::: each clerk stocks exactly one aisle\nForAll([a:aisles], Count([c:clerks], stocks(c, a)) == 1) ::: each aisle is stocked by exactly one clerk\nstocks(Olga, 1) ::: Olga stocks exactly one aisle\nstocks(Kurt, 2) ::: Kurt stocks aisle 2\nNot(stocks(Manny, 1)) ::: Manny does not stock aisle 1\nForAll([a:aisles], Implies(stocks(Jill, a), Not(stocks(Jill, a + 1)))) ::: Jill does not stock consecutive aisles\nAnd(stocks(Manny, a), stocks(Manny, b)) ::: Kurt stocks the only aisle between the two aisles Manny stocks\nAnd(stocks(Larisa, a), stocks(Larisa, b)) ::: Exactly one of Larisa's aisles is an end aisle\nAnd(stocks(Olga, a), stocks(Olga, b)) ::: Olga's aisle is numbered higher than either of Kurt's aisles, and lower than at least one of Larisa's\n\n# Options\nQuestion ::: If Larisa's aisles are separated by the maximum number of aisles that could separate her aisles, which one of the following could be true?\nis_valid(Exists([a:aisles], stocks(Jill, a) && a == 6)) ::: (A)\nis_valid(Exists([a:aisles], stocks(Manny, a) && a == 7)) ::: (B)\nis_valid(Exists([a:aisles], stocks(Jill, a) && a < stocks(Olga, a))) ::: (C)\nis_valid(Exists([a:aisles], stocks(Jill, a) && a % 2 == 0)) ::: (D)\nis_valid(Exists([a:aisles], stocks(Olga, a) && a > stocks(a, a))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_1_6",
    "context": "Jill, Kurt, Larisa, Manny, and Olga are the clerks in a supermarket. The supermarket has exactly nine parallel aisles, numbered consecutively 1 through 9 from one end of the store to the other. Each aisle is stocked by exactly one clerk and no clerk stocks more than two aisles. Stocking assignments must meet the following conditions: Olga stocks exactly one aisle. Kurt stocks aisle 2. Manny does not stock aisle 1. Jill does not stock consecutive aisles. Kurt stocks the only aisle between the two aisles Manny stocks. Exactly one of Larisa's aisles is an end aisle. Olga's aisle is numbered higher than either of Kurt's aisles, and lower than at least one of Larisa's.",
    "question": "If Jill stocks aisle 3, then which one of the following CANNOT be true?",
    "answer": "E",
    "options": [
      "A) Jill stocks aisle 9.",
      "B) Kurt stocks aisle 6.",
      "C) Larisa stocks aisle 4.",
      "D) Manny stocks aisle 4.",
      "E) Olga stocks aisle 6."
    ],
    "raw_logic_programs": [
      "# Declarations\nclerks = EnumSort([Jill, Kurt, Larisa, Manny, Olga])\naisles = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9])\nstocks = Function([clerks, aisles] -> [bool])\n\n# Constraints\nForAll([c:clerks], Count([a:aisles], stocks(c, a)) == 1) ::: each clerk stocks exactly one aisle\nForAll([a:aisles], Count([c:clerks], stocks(c, a)) == 1) ::: each aisle is stocked by exactly one clerk\nCount([a:aisles], stocks(Olga, a)) == 1 ::: Olga stocks exactly one aisle\nstocks(Kurt, 2) ::: Kurt stocks aisle 2\nNot(stocks(Manny, 1)) ::: Manny does not stock aisle 1\nForAll([a:aisles], Implies(stocks(Jill, a), Not(stocks(Jill, a - 1)))) ::: Jill does not stock consecutive aisles\nAnd(stocks(Manny, a), stocks(Manny, b), a!= b) ::: Manny stocks two aisles\nAnd(stocks(Kurt, a), stocks(Kurt, b), a!= b) ::: Kurt stocks two aisles\nAnd(stocks(Kurt, a), stocks(Manny, b), a!= b) ::: Kurt stocks the only aisle between the two aisles Manny stocks\nAnd(stocks(Larisa, a), stocks(Larisa, b), a!= b) ::: Larisa stocks two aisles\nAnd(stocks(Larisa, a), stocks(Larisa, b), a!= b) ::: Larisa stocks two aisles\nAnd(stocks(Larisa, a), stocks(Larisa, b), a!= b) ::: Larisa stocks two aisles\nAnd(stocks(Larisa, a), stocks(Larisa, b), a!= b) ::: Larisa stocks two aisles\nAnd(stocks(Larisa, a), stocks(Larisa, b), a!= b) ::: Larisa stocks two aisles\nAnd(stocks(Larisa, a), stocks(Larisa, b), a!= b) ::: Larisa stocks two aisles\nAnd(stocks(Larisa, a), stocks(Larisa, b), a!= b) ::: Larisa stocks two a"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_1_7",
    "context": "Jill, Kurt, Larisa, Manny, and Olga are the clerks in a supermarket. The supermarket has exactly nine parallel aisles, numbered consecutively 1 through 9 from one end of the store to the other. Each aisle is stocked by exactly one clerk and no clerk stocks more than two aisles. Stocking assignments must meet the following conditions: Olga stocks exactly one aisle. Kurt stocks aisle 2. Manny does not stock aisle 1. Jill does not stock consecutive aisles. Kurt stocks the only aisle between the two aisles Manny stocks. Exactly one of Larisa's aisles is an end aisle. Olga's aisle is numbered higher than either of Kurt's aisles, and lower than at least one of Larisa's.",
    "question": "Suppose that, rather than just one, Larisa stocks both end aisles; all other conditions remaining in effect, which one of the following CANNOT be true?",
    "answer": "B",
    "options": [
      "A) Jill stocks aisle 3.",
      "B) Olga stocks aisle 6.",
      "C) Olga stocks the only aisle between the two aisles that Jill stocks.",
      "D) Kurt stocks only even-numbered aisles.",
      "E) One of Larisa's aisles is immediately next to Olga's."
    ],
    "raw_logic_programs": [
      "# Declarations\nclerks = EnumSort([Jill, Kurt, Larisa, Manny, Olga])\naisles = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9])\nstocks = Function([clerks, aisles] -> [bool])\n\n# Constraints\nForAll([c:clerks], Count([a:aisles], stocks(c, a)) >= 1) ::: Each aisle is stocked by exactly one clerk\nForAll([c:clerks], Count([a:aisles], stocks(c, a)) <= 2) ::: no clerk stocks more than two aisles\nCount([a:aisles], stocks(Olga, a)) == 1 ::: Olga stocks exactly one aisle\nstocks(Kurt, 2) ::: Kurt stocks aisle 2\nNot(stocks(Manny, 1)) ::: Manny does not stock aisle 1\nForAll([a:aisles], Implies(stocks(Jill, a), Not(stocks(Jill, a - 1)))) ::: Jill does not stock consecutive aisles\nAnd(stocks(Manny, a), stocks(Manny, b)) ::: Kurt stocks the only aisle between the two aisles Manny stocks\nAnd(stocks(Larisa, a), stocks(Larisa, b)) ::: Exactly one of Larisa's aisles is an end aisle\nAnd(stocks(Olga, a), stocks(Olga, b)) ::: Olga's aisle is numbered higher than either of Kurt's aisles\nAnd(stocks(Olga, a), stocks(Olga, b)) ::: Olga's aisle is lower than at least one of Larisa's\n\n# Options\nQuestion ::: Suppose that, rather than just one, Larisa stocks both end aisles; all other conditions remaining in effect, which one of the following CANNOT be true?\nis_exception(is_sat(stocks(Jill, 3))) ::: (A)\nis_exception(is_sat(stocks(Olga, 6))) ::: (B)\nis_exception(is_sat(And(stocks(Olga, a), stocks(Olga, b), stocks(Jill, a), stocks(Jill, b), a < b))) ::: (C)\nis_exception(is_sat(ForAll([a:aisles], Implies(stocks(Kurt,"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_2_8",
    "context": "A five-week adult education course consists of exactly five lectures with a different lecture given each week. No lecture is given more than once. Each lecture is delivered by a different speaker. The following conditions are true about the speakers and their lectures: Each speaker lectures on a philosopher in whom he or she specializes. No two speakers lecture on the same philosopher. The first week's speaker specializes in Kant, Locke, and Mill, and no other philosophers. The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers. The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers. The fifth week's speaker specializes in Nietzsche, Ockham, and Plato, and no other philosophers.",
    "question": "Which one of the following statements could be true?",
    "answer": "E",
    "options": [
      "A) The first speaker lectures on Mill.",
      "B) The second speaker lectures on Mill.",
      "C) The second speaker lectures on Nietzsche.",
      "D) The fifth speaker lectures on Nietzsche.",
      "E) The fifth speaker lectures on Ockham."
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([first, second, third, fourth, fifth])\nphilosophers = EnumSort([Kant, Locke, Mill, Nietzsche, Ockham, Plato])\nlectures = Function([speakers, philosophers] -> [bool])\n\n# Constraints\nForAll([s:speakers], Count([p:philosophers], lectures(s, p)) == 1) ::: Each speaker lectures on a philosopher in whom he or she specializes\nForAll([s:speakers], Count([p:philosophers], lectures(s, p)) == 1) ::: No two speakers lecture on the same philosopher\nAnd(lectures(first, Kant), lectures(first, Locke), lectures(first, Mill)) ::: The first week's speaker specializes in Kant, Locke, and Mill, and no other philosophers\nAnd(lectures(second, Kant), lectures(second, Locke), lectures(second, Mill), lectures(second, Nietzsche)) ::: The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nAnd(lectures(third, Mill), lectures(third, Nietzsche)) ::: The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers\nAnd(lectures(fifth, Nietzsche), lectures(fifth, Ockham), lectures(fifth, Plato)) ::: The fifth week's speaker specializes in Nietzsche, Ockham, and Plato, and no other philosophers\n\n# Options\nQuestion ::: Which one of the following statements could be true?\nis_valid(lectures(first, Mill)) ::: A) The first speaker lectures on Mill.\nis_valid(lectures(second, Mill)) ::: B) The second speaker lectures on Mill.\nis_valid(lectures(second, Nietzsche)) ::: C) The second speaker lectures on Nietzsche.\nis_valid(lectures(fifth, Nietzsche)) ::: D) The fifth speaker lectures on Nietzsche.\nis_valid(lectures(fifth, Ockham)) ::: E) The fifth speaker lectures on Ockham.\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of the following three departments: accounting, marketing, or sales. The following conditions apply: The number of employees in the accounting department is 20 more than the number of employees in the marketing department. The number of"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_2_9",
    "context": "A five-week adult education course consists of exactly five lectures with a different lecture given each week. No lecture is given more than once. Each lecture is delivered by a different speaker. The following conditions are true about the speakers and their lectures: Each speaker lectures on a philosopher in whom he or she specializes. No two speakers lecture on the same philosopher. The first week's speaker specializes in Kant, Locke, and Mill, and no other philosophers. The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers. The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers. The fifth week's speaker specializes in Nietzsche, Ockham, and Plato, and no other philosophers.",
    "question": "What is the maximum possible number of different schedules for the five lectures in which those philosophers who are discussed are discussed in alphabetical order?",
    "answer": "A",
    "options": [
      "A) 2",
      "B) 3",
      "C) 4",
      "D) 5",
      "E) 6"
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([first, second, third, fourth, fifth])\nphilosophers = EnumSort([Kant, Locke, Mill, Nietzsche, Ockham, Plato])\nspecializes = Function([speakers, philosophers] -> [bool])\nlectures = Function([speakers, philosophers] -> [bool])\n\n# Constraints\nForAll([s:speakers], Count([p:philosophers], specializes(s, p)) == 3) ::: Each speaker lectures on a philosopher in whom he or she specializes\nForAll([s:speakers], Count([p:philosophers], lectures(s, p)) == 1) ::: No lecture is given more than once\nForAll([s:speakers], Count([p:philosophers], specializes(s, p)) == 3) ::: Each speaker lectures on a philosopher in whom he or she specializes\nForAll([s:speakers], Count([p:philosophers], lectures(s, p)) == 1) ::: No lecture is given more than once\nForAll([s:speakers], Count([p:philosophers], specializes(s, p)) == 3) ::: Each speaker lectures on a philosopher in whom he or she specializes\nForAll([s:speakers], Count([p:philosophers], lectures(s, p)) == 1) ::: No lecture is given more than once\nForAll([s:speakers], Count([p:philosophers], specializes(s, p)) == 3) ::: Each speaker lectures on a philosopher in whom he or she specializes\nForAll([s:speakers], Count([p:philosophers], lectures(s, p)) == 1) ::: No lecture is given more than once\nForAll([s:speakers], Count([p:philosophers], specializes(s, p)) == 3) ::: Each speaker lectures on a philosopher in whom he or she specializes\nForAll([s:speakers], Count([p:philosophers], lectures(s, p)) == 1) ::: No lecture is given more than once\nForAll([s:speakers], Count([p:philosophers], specializes(s, p)) == 3) ::: Each speaker lectures on a philosopher in whom he or she specializes\nForAll([s:speakers], Count([p:philosophers], lectures(s, p)) == 1) ::: No lecture is given more than once\nForAll([s:speakers], Count([p:philosophers], special"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_2_10",
    "context": "A five-week adult education course consists of exactly five lectures with a different lecture given each week. No lecture is given more than once. Each lecture is delivered by a different speaker. The following conditions are true about the speakers and their lectures: Each speaker lectures on a philosopher in whom he or she specializes. No two speakers lecture on the same philosopher. The first week's speaker specializes in Kant, Locke, and Mill, and no other philosophers. The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers. The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers. The fifth week's speaker specializes in Nietzsche, Ockham, and Plato, and no other philosophers.",
    "question": "Which one of the following, if known, would allow one to determine the entire lecture schedule and identify for each week the philosopher who is lectured on that week?",
    "answer": "C",
    "options": [
      "A) the weeks that Kant, Locke, and Mill are lectured on",
      "B) the weeks that Kant, Mill, and Nietzsche are lectured on",
      "C) the weeks that Kant, Mill, and Ockham are lectured on",
      "D) the weeks that Mill, Nietzsche, and Ockham are lectured on",
      "E) the weeks that Mill, Nietzsche, and Plato are lectured on"
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([first, second, third, fourth, fifth])\nphilosophers = EnumSort([Kant, Locke, Mill, Nietzsche, Ockham, Plato])\nlectures = Function([speakers, philosophers] -> [bool])\n\n# Constraints\nForAll([s:speakers], Count([p:philosophers], lectures(s, p)) == 1) ::: Each speaker lectures on a philosopher in whom he or she specializes\nForAll([s:speakers], Count([p:philosophers], lectures(s, p)) == 1) ::: No two speakers lecture on the same philosopher\nAnd(lectures(first, Kant), lectures(first, Locke), lectures(first, Mill)) ::: The first week's speaker specializes in Kant, Locke, and Mill, and no other philosophers\nAnd(lectures(second, Kant), lectures(second, Locke), lectures(second, Mill), lectures(second, Nietzsche)) ::: The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nAnd(lectures(third, Mill), lectures(third, Nietzsche)) ::: The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers\nAnd(lectures(fifth, Nietzsche), lectures(fifth, Ockham), lectures(fifth, Plato)) ::: The fifth week's speaker specializes in Nietzsche, Ockham, and Plato, and no other philosophers\n\n# Options\nQuestion ::: Which one of the following, if known, would allow one to determine the entire lecture schedule and identify for each week the philosopher who is lectured on that week?\nis_sat(ForAll([s:speakers], lectures(s, Kant) == lectures(s, Locke) == lectures(s, Mill))) ::: A) the weeks that Kant, Locke, and Mill are lectured on\nis_sat(ForAll([s:speakers], lectures(s, Kant) == lectures(s, Mill) == lectures(s, Nietzsche))) ::: B) the weeks that Kant, Mill, and Nietzsche are lectured on\nis_sat(ForAll([s:speakers], lectures(s, Kant) == lectures(s, Mill) == lectures(s, Ockham))) ::: C) the weeks that Kant, Mill, and Ockham are lectured on\nis_sat(ForAll([s:speakers],"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_2_11",
    "context": "A five-week adult education course consists of exactly five lectures with a different lecture given each week. No lecture is given more than once. Each lecture is delivered by a different speaker. The following conditions are true about the speakers and their lectures: Each speaker lectures on a philosopher in whom he or she specializes. No two speakers lecture on the same philosopher. The first week's speaker specializes in Kant, Locke, and Mill, and no other philosophers. The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers. The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers. The fifth week's speaker specializes in Nietzsche, Ockham, and Plato, and no other philosophers.",
    "question": "Assume that, of the six philosophers, Kant and Nietzsche are the only German philosophers, and Locke, Mill, and Ockham are the only British philosophers. Each of the following statements could be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) The first and fourth speakers lecture on British philosophers.",
      "B) The first and fourth speakers lecture on German philosophers.",
      "C) The second and third speakers lecture on British philosophers.",
      "D) The third and fourth speakers lecture on German philosophers.",
      "E) The fourth and fifth speakers lecture on British philosophers."
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([first, second, third, fourth, fifth])\nphilosophers = EnumSort([Kant, Locke, Mill, Nietzsche, Ockham, Plato])\nspecializes = Function([speakers, philosophers] -> [bool])\nlectures = Function([speakers, philosophers] -> [bool])\n\n# Constraints\nForAll([s:speakers], Count([p:philosophers], specializes(s, p)) == 3) ::: Each speaker lectures on a philosopher in whom he or she specializes\nForAll([s:speakers], Count([p:philosophers], lectures(s, p)) == 1) ::: No two speakers lecture on the same philosopher\nspecializes(first, Kant) ::: The first week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(first, Locke) ::: The first week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(first, Mill) ::: The first week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(first, Nietzsche) ::: The first week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(second, Kant) ::: The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(second, Locke) ::: The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(second, Mill) ::: The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(second, Nietzsche) ::: The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(third, Mill) ::: The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers\nspecializes(third, Nietzsche) ::: The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers\nspecializes(fourth, Mill) ::: The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers\nspecializes(fourth, Nietzsche) ::: The third week'"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_2_12",
    "context": "A five-week adult education course consists of exactly five lectures with a different lecture given each week. No lecture is given more than once. Each lecture is delivered by a different speaker. The following conditions are true about the speakers and their lectures: Each speaker lectures on a philosopher in whom he or she specializes. No two speakers lecture on the same philosopher. The first week's speaker specializes in Kant, Locke, and Mill, and no other philosophers. The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers. The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers. The fifth week's speaker specializes in Nietzsche, Ockham, and Plato, and no other philosophers.",
    "question": "Suppose the third speaker were a specialist not only in Mill and Nietzsche, but also in Sartre. If all of the other conditions remained the same, then each of the following could be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) Mill is lectured on in the first lecture and Nietzsche in the fourth.",
      "B) Mill is lectured on in the second lecture and Nietzsche in the third.",
      "C) Mill is lectured on in the second lecture and Nietzsche in the fourth.",
      "D) Mill is lectured on in the fourth lecture and Nietzsche in the fifth.",
      "E) Nietzsche is lectured on in the second lecture and Mill in the fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([first, second, third, fourth, fifth])\nphilosophers = EnumSort([Kant, Locke, Mill, Nietzsche, Ockham, Plato, Sartre])\nspecializes = Function([speakers, philosophers] -> [bool])\nlectures = Function([speakers, philosophers] -> [bool])\n\n# Constraints\nForAll([s:speakers], Count([p:philosophers], specializes(s, p)) == 3) ::: Each speaker lectures on a philosopher in whom he or she specializes\nForAll([s:speakers], Count([p:philosophers], lectures(s, p)) == 1) ::: No two speakers lecture on the same philosopher\nspecializes(first, Kant) ::: The first week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(first, Locke) ::: The first week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(first, Mill) ::: The first week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(first, Nietzsche) ::: The first week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(second, Kant) ::: The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(second, Locke) ::: The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(second, Mill) ::: The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(second, Nietzsche) ::: The second week's speaker specializes in Kant, Locke, Mill, and Nietzsche, and no other philosophers\nspecializes(third, Mill) ::: The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers\nspecializes(third, Nietzsche) ::: The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers\nspecializes(fourth, Mill) ::: The third week's and fourth week's speakers each specialize in Mill and Nietzsche, and no other philosophers\nspecializes(fourth, Nietzsche) :::"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_3_13",
    "context": "Exactly seven different trains—Quigley, Rockville, Sunnydale, Tilbury, Victoria, Wooster, and York—arrive at Middlebrook Station on Saturday. The following conditions govern their arrivals: The trains arrive one at a time. Either the York or the Wooster arrives fourth. The Sunnydale arrives at some time after the Wooster but at some time before the York. Both the Tilbury and the Victoria arrive at some time after the Rockville. The Tilbury does not arrive next after the Victoria; nor does the Victoria arrive next after the Tilbury.",
    "question": "Which one of the following could be the order in which the trains arrive, from first to last?",
    "answer": "C",
    "options": [
      "A) Rockville, Tilbury, Victoria, Wooster, Sunnydale, York, Quigley",
      "B) Rockville, Wooster, Quigley, York, Tilbury, Sunnydale, Victoria",
      "C) Rockville, Tilbury, Quigley, Wooster, Sunnydale, York, Victoria",
      "D) Quigley, Rockville, Wooster, Sunnydale, Victoria, York, Tilbury",
      "E) Tilbury, Rockville, Quigley, Wooster, Sunnydale, York, Victoria"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrains = EnumSort([Quigley, Rockville, Sunnydale, Tilbury, Victoria, Wooster, York])\narrives = Function([trains] -> [int])\nForAll([t:trains], And(1 <= arrives(t), arrives(t) <= 7))\n\n# Constraints\nDistinct([t:trains], arrives(t)) ::: The trains arrive one at a time\nOr(arrives(York) == 4, arrives(Wooster) == 4) ::: Either the York or the Wooster arrives fourth\nAnd(arrives(Wooster) < arrives(Sunnydale), arrives(Sunnydale) < arrives(York)) ::: The Sunnydale arrives at some time after the Wooster but at some time before the York\nAnd(arrives(Tilbury) > arrives(Rockville), arrives(Victoria) > arrives(Rockville)) ::: Both the Tilbury and the Victoria arrive at some time after the Rockville\nNot(And(arrives(Tilbury) == arrives(Victoria) + 1, arrives(Victoria) == arrives(Tilbury) + 1)) ::: The Tilbury does not arrive next after the Victoria; nor does the Victoria arrive next after the Tilbury\n\n# Options\nQuestion ::: Which one of the following could be the order in which the trains arrive, from first to last?\nis_sat(ForAll([t:trains], arrives(t) == [Rockville, Tilbury, Victoria, Wooster, Sunnydale, York, Quigley][t])) ::: A) Rockville, Tilbury, Victoria, Wooster, Sunnydale, York, Quigley\nis_sat(ForAll([t:trains], arrives(t) == [Rockville, Wooster, Quigley, York, Tilbury, Sunnydale, Victoria][t])) ::: B) Rockville, Wooster, Quigley, York, Tilbury, Sunnydale, Victoria\nis_sat(ForAll([t:trains], arrives(t) == [Rockville, Tilbury, Quigley, Wooster, Sunnydale, York, Victoria][t])) ::: C) Rockville, Tilbury, Quigley, Wooster, Sunnydale, York, Victoria\nis_sat(ForAll([t:trains], arrives(t) == [Quigley, Rockville, Wooster, Sunnydale, Victoria, York, Tilbury][t])) ::: D) Quigley, Rockville, Wooster,"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_3_14",
    "context": "Exactly seven different trains—Quigley, Rockville, Sunnydale, Tilbury, Victoria, Wooster, and York—arrive at Middlebrook Station on Saturday. The following conditions govern their arrivals: The trains arrive one at a time. Either the York or the Wooster arrives fourth. The Sunnydale arrives at some time after the Wooster but at some time before the York. Both the Tilbury and the Victoria arrive at some time after the Rockville. The Tilbury does not arrive next after the Victoria; nor does the Victoria arrive next after the Tilbury.",
    "question": "If the Wooster arrives at some time before the Rockville, then exactly how many different orders are there in which the seven trains could arrive?",
    "answer": "A",
    "options": [
      "A) four",
      "B) five",
      "C) six",
      "D) seven",
      "E) eight"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrains = EnumSort([Quigley, Rockville, Sunnydale, Tilbury, Victoria, Wooster, York])\narrives = Function([trains] -> [int])\nForAll([t:trains], And(1 <= arrives(t), arrives(t) <= 7))\n\n# Constraints\nDistinct([t:trains], arrives(t)) ::: The trains arrive one at a time\nOr(arrives(York) == 4, arrives(Wooster) == 4) ::: Either the York or the Wooster arrives fourth\nAnd(arrives(Sunnydale) > arrives(Wooster), arrives(Sunnydale) < arrives(York)) ::: The Sunnydale arrives at some time after the Wooster but at some time before the York\nAnd(arrives(Tilbury) > arrives(Rockville), arrives(Victoria) > arrives(Rockville)) ::: Both the Tilbury and the Victoria arrive at some time after the Rockville\nAnd(arrives(Tilbury)!= arrives(Victoria) + 1, arrives(Victoria)!= arrives(Tilbury) + 1) ::: The Tilbury does not arrive next after the Victoria; nor does the Victoria arrive next after the Tilbury\n\n# Options\nQuestion ::: If the Wooster arrives at some time before the Rockville, then exactly how many different orders are there in which the seven trains could arrive?\nis_sat(ForAll([t:trains], arrives(t) == 1)) ::: A) four\nis_sat(ForAll([t:trains], arrives(t) == 2)) ::: B) five\nis_sat(ForAll([t:trains], arrives(t) == 3)) ::: C) six\nis_sat(ForAll([t:trains], arrives(t) == 4)) ::: D) seven\nis_sat(ForAll([t:trains], arrives(t) == 5)) ::: E) eight\n------\nProblem:\nA certain company has exactly six employees—Fred, Gail, Hank, Iris, Jim, and Karen—who work in pairs to complete specific projects. The following conditions apply: Fred and Gail work together on at least one project. Hank and Iris work together on at least one project. Jim and Karen work together on at least one project. Fred and Hank work together on at least one project. Gail and Iris work together on at least one project. Jim and Karen work together on at least one project.\nQuestion:"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_3_15",
    "context": "Exactly seven different trains—Quigley, Rockville, Sunnydale, Tilbury, Victoria, Wooster, and York—arrive at Middlebrook Station on Saturday. The following conditions govern their arrivals: The trains arrive one at a time. Either the York or the Wooster arrives fourth. The Sunnydale arrives at some time after the Wooster but at some time before the York. Both the Tilbury and the Victoria arrive at some time after the Rockville. The Tilbury does not arrive next after the Victoria; nor does the Victoria arrive next after the Tilbury.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The first train to arrive is the Rockville.",
      "B) The Quigley arrives at some time before the Sunnydale.",
      "C) The Rockville arrives at some time before the Wooster.",
      "D) The Victoria arrives at some time before the York.",
      "E) The Wooster arrives at some time before the York."
    ],
    "raw_logic_programs": [
      "# Declarations\ntrains = EnumSort([Quigley, Rockville, Sunnydale, Tilbury, Victoria, Wooster, York])\narrives = Function([trains] -> [int])\nForAll([t:trains], And(1 <= arrives(t), arrives(t) <= 7))\n\n# Constraints\nDistinct([t:trains], arrives(t)) ::: The trains arrive one at a time\nOr(arrives(York) == 4, arrives(Wooster) == 4) ::: Either the York or the Wooster arrives fourth\nAnd(arrives(Sunnydale) > arrives(Wooster), arrives(Sunnydale) < arrives(York)) ::: The Sunnydale arrives at some time after the Wooster but at some time before the York\nAnd(arrives(Tilbury) > arrives(Rockville), arrives(Victoria) > arrives(Rockville)) ::: Both the Tilbury and the Victoria arrive at some time after the Rockville\nAnd(arrives(Tilbury)!= arrives(Victoria) + 1, arrives(Victoria)!= arrives(Tilbury) + 1) ::: The Tilbury does not arrive next after the Victoria; nor does the Victoria arrive next after the Tilbury\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(arrives(Rockville) == 1) ::: (A)\nis_valid(arrives(Quigley) < arrives(Sunnydale)) ::: (B)\nis_valid(arrives(Rockville) < arrives(Wooster)) ::: (C)\nis_valid(arrives(Victoria) < arrives(York)) ::: (D)\nis_valid(arrives(Wooster) < arrives(York)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_3_16",
    "context": "Exactly seven different trains—Quigley, Rockville, Sunnydale, Tilbury, Victoria, Wooster, and York—arrive at Middlebrook Station on Saturday. The following conditions govern their arrivals: The trains arrive one at a time. Either the York or the Wooster arrives fourth. The Sunnydale arrives at some time after the Wooster but at some time before the York. Both the Tilbury and the Victoria arrive at some time after the Rockville. The Tilbury does not arrive next after the Victoria; nor does the Victoria arrive next after the Tilbury.",
    "question": "Which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) The Sunnydale is the next train to arrive after the Quigley.",
      "B) The Rockville is the next train to arrive after the Sunnydale.",
      "C) The Rockville is the next train to arrive after the Tilbury.",
      "D) The Quigley is the next train to arrive after the Sunnydale.",
      "E) The Quigley is the next train to arrive after the Wooster."
    ],
    "raw_logic_programs": [
      "# Declares\ntrains = EnumSort([Quigley, Rockville, Sunnydale, Tilbury, Victoria, Wooster, York])\narrives = Function([trains] -> [int])\nForAll([t:trains], And(1 <= arrives(t), arrives(t) <= 7))\n\n# Constraints\nDistinct([t:trains], arrives(t)) ::: The trains arrive one at a time\nOr(arrives(York) == 4, arrives(Wooster) == 4) ::: Either the York or the Wooster arrives fourth\nAnd(arrives(Wooster) < arrives(Sunnydale), arrives(Sunnydale) < arrives(York)) ::: The Sunnydale arrives at some time after the Wooster but at some time before the York\nAnd(arrives(Tilbury) > arrives(Rockville), arrives(Victoria) > arrives(Rockville)) ::: Both the Tilbury and the Victoria arrive at some time after the Rockville\nNot(And(arrives(Tilbury) == arrives(Victoria) + 1, arrives(Victoria) == arrives(Tilbury) + 1)) ::: The Tilbury does not arrive next after the Victoria; nor does the Victoria arrive next after the Tilbury\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(And(arrives(Quigley) == 1, arrives(Sunnydale) == 2)) ::: (A)\nis_valid(And(arrives(Rockville) == 2, arrives(Sunnydale) == 3)) ::: (B)\nis_valid(And(arrives(Rockville) == 2, arrives(Tilbury) == 3)) ::: (C)\nis_valid(And(arrives(Quigley) == 1"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_3_17",
    "context": "Exactly seven different trains—Quigley, Rockville, Sunnydale, Tilbury, Victoria, Wooster, and York—arrive at Middlebrook Station on Saturday. The following conditions govern their arrivals: The trains arrive one at a time. Either the York or the Wooster arrives fourth. The Sunnydale arrives at some time after the Wooster but at some time before the York. Both the Tilbury and the Victoria arrive at some time after the Rockville. The Tilbury does not arrive next after the Victoria; nor does the Victoria arrive next after the Tilbury.",
    "question": "If exactly one of the trains arrives after the Wooster but before the York, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) The sixth train to arrive is the Sunnydale.",
      "B) The sixth train to arrive is the Tilbury.",
      "C) The third train to arrive is the Rockville.",
      "D) The second train to arrive is the Sunnydale.",
      "E) The first train to arrive is the Rockville."
    ],
    "raw_logic_programs": [
      "# Declares\ntrains = EnumSort([Quigley, Rockville, Sunnydale, Tilbury, Victoria, Wooster, York])\narrives = Function([trains] -> [int])\nForAll([t:trains], And(1 <= arrives(t), arrives(t) <= 7))\n\n# Constraints\nDistinct([t:trains], arrives(t)) ::: The trains arrive one at a time\nOr(arrives(York) == 4, arrives(Wooster) == 4) ::: Either the York or the Wooster arrives fourth\nAnd(arrives(Sunnydale) > arrives(Wooster), arrives(Sunnydale) < arrives(York)) ::: The Sunnydale arrives at some time after the Wooster but at some time before the York\nAnd(arrives(Tilbury) > arrives(Rockville), arrives(Victoria) > arrives(Rockville)) ::: Both the Tilbury and the Victoria arrive at some time after the Rockville\nAnd(arrives(Tilbury)!= arrives(Victoria) + 1, arrives(Victoria)!= arrives(Tilbury) + 1) ::: The Tilbury does not arrive next after the Victoria; nor does the Victoria arrive next after the Tilbury\n\n# Options\nQuestion ::: If exactly one of the trains arrives after the Wooster but before the York, then which one of the following could be true?\nis_exception(is_sat(arrives(Sunnydale) == 6)) ::: (A)\nis_exception(is_sat(arrives(Tilbury) == 6)) ::: (B)\nis_exception(is_sat(arrives(Rockville) == 3)) ::: (C)\nis_exception(is_sat(arrives(Sunnydale) == 2)) ::: (D"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_3_18",
    "context": "Exactly seven different trains—Quigley, Rockville, Sunnydale, Tilbury, Victoria, Wooster, and York—arrive at Middlebrook Station on Saturday. The following conditions govern their arrivals: The trains arrive one at a time. Either the York or the Wooster arrives fourth. The Sunnydale arrives at some time after the Wooster but at some time before the York. Both the Tilbury and the Victoria arrive at some time after the Rockville. The Tilbury does not arrive next after the Victoria; nor does the Victoria arrive next after the Tilbury.",
    "question": "If the Quigley arrives at some time before the Rockville, then the Wooster must arrive",
    "answer": "C",
    "options": [
      "A) second",
      "B) third",
      "C) fourth",
      "D) fifth",
      "E) sixth"
    ],
    "raw_logic_programs": [
      "# Declares\ntrains = EnumSort([Quigley, Rockville, Sunnydale, Tilbury, Victoria, Wooster, York])\narrives = Function([trains] -> [int])\nForAll([t:trains], And(1 <= arrives(t), arrives(t) <= 7))\n\n# Constraints\nDistinct([t:trains], arrives(t)) ::: The trains arrive one at a time\nOr(arrives(York) == 4, arrives(Wooster) == 4) ::: Either the York or the Wooster arrives fourth\nAnd(arrives(Sunnydale) > arrives(Wooster), arrives(Sunnydale) < arrives(York)) ::: The Sunnydale arrives at some time after the Wooster but at some time before the York\nAnd(arrives(Tilbury) > arrives(Rockville), arrives(Victoria) > arrives(Rockville)) ::: Both the Tilbury and the Victoria arrive at some time after the Rockville\nAnd(arrives(Tilbury)!= arrives(Victoria) + 1, arrives(Victoria)!= arrives(Tilbury) + 1) ::: The Tilbury does not arrive next after the Victoria; nor does the Victoria arrive next after the Tilbury\n\n# Options\nQuestion ::: If the Quigley arrives at some time before the Rockville, then the Wooster must arrive\nis_sat(And(arrives(Quigley) < arrives(Rockville), arrives(Wooster) == 2)) ::: A) second\nis_sat(And(arrives(Quigley) < arrives(Rockville), arrives(Wooster) == 3)) ::: B) third\nis_sat(And(arrives(Quigley) < arrives(Rockville), arrives(Wooster) == 4))"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_4_19",
    "context": "Each of exactly six doctors—Juarez, Kudrow, Longtree, Nance, Onawa, and Palermo—is at exactly one of two clinics: Souderton or Randsborough. The following conditions must be satisfied: Kudrow is at Randsborough if Juarez is at Souderton. Onawa is at Souderton if Juarez is at Randsborough. If Longtree is at Souderton, then both Nance and Palermo are at Randsborough. If Nance is at Randsborough, then so is Onawa. If Palermo is at Randsborough, then both Kudrow and Onawa are at Souderton.",
    "question": "Which one of the following could be a complete and accurate list of the doctors that are at Souderton?",
    "answer": "B",
    "options": [
      "A) Juarez, Kudrow, Onawa",
      "B) Juarez, Nance, Onawa, Palermo",
      "C) Kudrow, Longtree, Onawa",
      "D) Nance, Onawa",
      "E) Nance, Palermo"
    ],
    "raw_logic_programs": [
      "# Declarations\ndoctors = EnumSort([Juarez, Kudrow, Longtree, Nance, Onawa, Palermo])\nclinics = EnumSort([Randsborough, Souderton])\nat = Function([doctors, clinics] -> [bool])\n\n# Constraints\nForAll([d:doctors], Count([c:clinics], at(d, c)) == 1) ::: Each of exactly six doctors is at exactly one of two clinics\nImplies(at(Juarez, Souderton), at(Kudrow, Randsborough)) ::: Kudrow is at Randsborough if Juarez is at Souderton\nImplies(at(Juarez, Randsborough), at(Onawa, Souderton)) ::: Onawa is at Souderton if Juarez is at Randsborough\nImplies(at(Longtree, Souderton), And(at(Nance, Randsborough), at(Palermo, Randsborough))) ::: If Longtree is at Souderton, then both Nance and Palermo are at Randsborough\nImplies(at(Nance, Randsborough), at(Onawa, Randsborough)) ::: If Nance is at Randsborough, then so is Onawa\nImplies(at(Palermo, Randsborough), And(at(Kudrow, Souderton), at(Onawa, Souderton))) ::: If Palermo is at Randsborough, then both Kudrow and Onawa are at Souderton\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the doctors that are at Souderton?\nis_exception(is_sat(And(at(Juarez, Souderton), at(Kudrow, Souderton), at(Onawa, Souderton)))) ::: A) Juarez, Kudrow, Onawa\nis_exception(is_sat(And(at"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_4_20",
    "context": "Each of exactly six doctors—Juarez, Kudrow, Longtree, Nance, Onawa, and Palermo—is at exactly one of two clinics: Souderton or Randsborough. The following conditions must be satisfied: Kudrow is at Randsborough if Juarez is at Souderton. Onawa is at Souderton if Juarez is at Randsborough. If Longtree is at Souderton, then both Nance and Palermo are at Randsborough. If Nance is at Randsborough, then so is Onawa. If Palermo is at Randsborough, then both Kudrow and Onawa are at Souderton.",
    "question": "If Palermo is at Randsborough, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Juarez is at Randsborough.",
      "B) Kudrow is at Randsborough.",
      "C) Longtree is at Souderton.",
      "D) Nance is at Randsborough.",
      "E) Onawa is at Randsborough."
    ],
    "raw_logic_programs": [
      "# Declarations\ndoctors = EnumSort([Juarez, Kudrow, Longtree, Nance, Onawa, Palermo])\nclinics = EnumSort([Randsborough, Souderton])\nat = Function([doctors, clinics] -> [bool])\n\n# Constraints\nForAll([d:doctors], Count([c:clinics], at(d, c)) == 1) ::: Each of exactly six doctors is at exactly one of two clinics\nImplies(at(Juarez, Souderton), at(Kudrow, Randsborough)) ::: Kudrow is at Randsborough if Juarez is at Souderton\nImplies(at(Juarez, Randsborough), at(Onawa, Souderton)) ::: Onawa is at Souderton if Juarez is at Randsborough\nImplies(at(Longtree, Souderton), And(at(Nance, Randsborough), at(Palermo, Randsborough))) ::: If Longtree is at Souderton, then both Nance and Palermo are at Randsborough\nImplies(at(Nance, Randsborough), at(Onawa, Randsborough)) ::: If Nance is at Randsborough, then so is Onawa\nImplies(at(Palermo, Randsborough), And(at(Kudrow, Souderton), at(Onawa, Souderton))) ::: If Palermo is at Randsborough, then both Kudrow and Onawa are at Souderton\n\n# Options\nQuestion ::: If Palermo is at Randsborough, then which one of the following must be true?\nis_sat(Implies(at(Palermo, Randsborough), at(Juarez, Randsborough))) ::: (A)\nis_sat(Implies(at(Palermo, Randsborough), at(Kudrow, Randsborough))) ::: (B)\nis_sat(Implies"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_4_21",
    "context": "Each of exactly six doctors—Juarez, Kudrow, Longtree, Nance, Onawa, and Palermo—is at exactly one of two clinics: Souderton or Randsborough. The following conditions must be satisfied: Kudrow is at Randsborough if Juarez is at Souderton. Onawa is at Souderton if Juarez is at Randsborough. If Longtree is at Souderton, then both Nance and Palermo are at Randsborough. If Nance is at Randsborough, then so is Onawa. If Palermo is at Randsborough, then both Kudrow and Onawa are at Souderton.",
    "question": "What is the minimum number of doctors that could be at Souderton?",
    "answer": "C",
    "options": [
      "A) zero",
      "B) one",
      "C) two",
      "D) three",
      "E) four"
    ],
    "raw_logic_programs": [
      "# Declarations\ndoctors = EnumSort([Juarez, Kudrow, Longtree, Nance, Onawa, Palermo])\nclinics = EnumSort([Souderton, Randsborough])\nat = Function([doctors, clinics] -> [bool])\n\n# Constraints\nForAll([d:doctors], Count([c:clinics], at(d, c)) == 1) ::: each doctor is at exactly one of two clinics\nImplies(at(Juarez, Souderton), at(Kudrow, Randsborough)) ::: Kudrow is at Randsborough if Juarez is at Souderton\nImplies(at(Juarez, Randsborough), at(Onawa, Souderton)) ::: Onawa is at Souderton if Juarez is at Randsborough\nImplies(at(Longtree, Souderton), And(at(Nance, Randsborough), at(Palermo, Randsborough))) ::: If Longtree is at Souderton, then both Nance and Palermo are at Randsborough\nImplies(at(Nance, Randsborough), at(Onawa, Randsborough)) ::: If Nance is at Randsborough, then so is Onawa\nImplies(at(Palermo, Randsborough), And(at(Kudrow, Souderton), at(Onawa, Souderton))) ::: If Palermo is at Randsborough, then both Kudrow and Onawa are at Souderton\n\n# Options\nQuestion ::: What is the minimum number of doctors that could be at Souderton?\nis_sat(ForAll([d:doctors], at(d, Souderton))) ::: A) zero\nis_sat(Exists([d:doctors], at(d, Souderton))) ::: B) one\nis_sat(Exists([d:doctors], And(at(d, Souderton), Exists([d:"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_4_22",
    "context": "Each of exactly six doctors—Juarez, Kudrow, Longtree, Nance, Onawa, and Palermo—is at exactly one of two clinics: Souderton or Randsborough. The following conditions must be satisfied: Kudrow is at Randsborough if Juarez is at Souderton. Onawa is at Souderton if Juarez is at Randsborough. If Longtree is at Souderton, then both Nance and Palermo are at Randsborough. If Nance is at Randsborough, then so is Onawa. If Palermo is at Randsborough, then both Kudrow and Onawa are at Souderton.",
    "question": "If Nance and Onawa are at different clinics, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Juarez is at Souderton.",
      "B) Kudrow is at Souderton.",
      "C) Palermo is at Randsborough.",
      "D) Four doctors are at Souderton.",
      "E) Four doctors are at Randsborough."
    ],
    "raw_logic_programs": [
      "# Declarations\ndoctors = EnumSort([Juarez, Kudrow, Longtree, Nance, Onawa, Palermo])\nclinics = EnumSort([Souderton, Randsborough])\nat = Function([doctors, clinics] -> [bool])\n\n# Constraints\nForAll([d:doctors], Count([c:clinics], at(d, c)) == 1) ::: Each of exactly six doctors is at exactly one of two clinics\nImplies(at(Juarez, Souderton), at(Kudrow, Randsborough)) ::: Kudrow is at Randsborough if Juarez is at Souderton\nImplies(at(Juarez, Randsborough), at(Onawa, Souderton)) ::: Onawa is at Souderton if Juarez is at Randsborough\nImplies(at(Longtree, Souderton), And(at(Nance, Randsborough), at(Palermo, Randsborough))) ::: If Longtree is at Souderton, then both Nance and Palermo are at Randsborough\nImplies(at(Nance, Randsborough), at(Onawa, Randsborough)) ::: If Nance is at Randsborough, then so is Onawa\nImplies(at(Palermo, Randsborough), And(at(Kudrow, Souderton), at(Onawa, Souderton))) ::: If Palermo is at Randsborough, then both Kudrow and Onawa are at Souderton\n\n# Options\nQuestion ::: If Nance and Onawa are at different clinics, which one of the following must be true?\nis_sat(And(at(Juarez, Souderton), Not(at(Nance, Souderton)))) ::: (A)\nis_sat(And(at(Kudrow, Souderton), Not(at(Nance, Souderton)))) ::: (B)\nis"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_4_23",
    "context": "Each of exactly six doctors—Juarez, Kudrow, Longtree, Nance, Onawa, and Palermo—is at exactly one of two clinics: Souderton or Randsborough. The following conditions must be satisfied: Kudrow is at Randsborough if Juarez is at Souderton. Onawa is at Souderton if Juarez is at Randsborough. If Longtree is at Souderton, then both Nance and Palermo are at Randsborough. If Nance is at Randsborough, then so is Onawa. If Palermo is at Randsborough, then both Kudrow and Onawa are at Souderton.",
    "question": "Which one of the following CANNOT be a pair of the doctors at Randsborough?",
    "answer": "E",
    "options": [
      "A) Juarez and Kudrow",
      "B) Juarez and Palermo",
      "C) Kudrow and Onawa",
      "D) Nance and Onawa",
      "E) Nance and Palermo"
    ],
    "raw_logic_programs": [
      "# Declarations\ndoctors = EnumSort([Juarez, Kudrow, Longtree, Nance, Onawa, Palermo])\nclinics = EnumSort([Randsborough, Souderton])\nat = Function([doctors, clinics] -> [bool])\n\n# Constraints\nForAll([d:doctors], Count([c:clinics], at(d, c)) == 1) ::: Each of exactly six doctors is at exactly one of two clinics\nAnd(at(Kudrow, Randsborough), at(Juarez, Souderton)) ::: Kudrow is at Randsborough if Juarez is at Souderton\nAnd(at(Onawa, Souderton), at(Juarez, Randsborough)) ::: Onawa is at Souderton if Juarez is at Randsborough\nAnd(at(Longtree, Souderton), And(at(Nance, Randsborough), at(Palermo, Randsborough))) ::: If Longtree is at Souderton, then both Nance and Palermo are at Randsborough\nAnd(at(Nance, Randsborough), at(Onawa, Randsborough)) ::: If Nance is at Randsborough, then so is Onawa\nAnd(at(Palermo, Randsborough), And(at(Kudrow, Souderton), at(Onawa, Souderton))) ::: If Palermo is at Randsborough, then both Kudrow and Onawa are at Souderton\n\n# Options\nQuestion ::: Which one of the following CANNOT be a pair of the doctors at Randsborough?\nis_exception(is_sat(And(at(Juarez, Randsborough), at(Kudrow, Randsborough)))) ::: (A)\nis_exception(is_sat(And(at(Juarez, Randsborough), at(Palermo, Randsborough)))) ::: (B)\nis_exception"
    ]
  },
  {
    "id": "ar_lsat_200106_4-G_4_24",
    "context": "Each of exactly six doctors—Juarez, Kudrow, Longtree, Nance, Onawa, and Palermo—is at exactly one of two clinics: Souderton or Randsborough. The following conditions must be satisfied: Kudrow is at Randsborough if Juarez is at Souderton. Onawa is at Souderton if Juarez is at Randsborough. If Longtree is at Souderton, then both Nance and Palermo are at Randsborough. If Nance is at Randsborough, then so is Onawa. If Palermo is at Randsborough, then both Kudrow and Onawa are at Souderton.",
    "question": "If Kudrow is at Souderton, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Juarez is at Souderton.",
      "B) Nance is at Souderton.",
      "C) Onawa is at Randsborough.",
      "D) Palermo is at Souderton.",
      "E) Palermo is at Randsborough."
    ],
    "raw_logic_programs": [
      "# Declarations\ndoctors = EnumSort([Juarez, Kudrow, Longtree, Nance, Onawa, Palermo])\nclinics = EnumSort([Randsborough, Souderton])\nat = Function([doctors, clinics] -> [bool])\n\n# Constraints\nForAll([d:doctors], Count([c:clinics], at(d, c)) == 1) ::: Each of exactly six doctors is at exactly one of two clinics\nAnd(at(Kudrow, Randsborough), at(Juarez, Souderton)) ::: Kudrow is at Randsborough if Juarez is at Souderton\nAnd(at(Onawa, Souderton), at(Juarez, Randsborough)) ::: Onawa is at Souderton if Juarez is at Randsborough\nAnd(at(Longtree, Souderton), And(at(Nance, Randsborough), at(Palermo, Randsborough))) ::: If Longtree is at Souderton, then both Nance and Palermo are at Randsborough\nAnd(at(Nance, Randsborough), at(Onawa, Randsborough)) ::: If Nance is at Randsborough, then so is Onawa\nAnd(at(Palermo, Randsborough), And(at(Kudrow, Souderton), at(Onawa, Souderton))) ::: If Palermo is at Randsborough, then both Kudrow and Onawa are at Souderton\n\n# Options\nQuestion ::: If Kudrow is at Souderton, then which one of the following must be true?\nis_valid(at(Juarez, Souderton)) ::: (A)\nis_valid(at(Nance, Souderton)) ::: (B)\nis_valid(at(Onawa, Randsborough)) ::: (C)\nis_valid(at(Palermo, Souderton)) ::: (D)"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_1_1",
    "context": "From among eight candidates, four astronauts will be selected for a space flight. Four of the candidates—F, J, K, and L—are experienced astronauts and four—M, N, P, and T—are inexperienced astronauts. F, M, P, and T are geologists whereas J, K, L, and N are radiobiologists. The astronauts must be selected according to the following conditions: Exactly two experienced astronauts and two inexperienced astronauts are selected. Exactly two geologists and two radiobiologists are selected. Either P or L or both are selected.",
    "question": "Which one of the following is an acceptable selection of astronauts for the space flight?",
    "answer": "D",
    "options": [
      "A) F, J, N, and T",
      "B) F, L, M, and P",
      "C) F, M, N, and P",
      "D) J, L, M, and T",
      "E) K, L, N, and T"
    ],
    "raw_logic_programs": [
      "# Declarations\nastronauts = EnumSort([F, J, K, L, M, N, P, T])\nexperienced = EnumSort([F, J, K, L])\ninexperienced = EnumSort([M, N, P, T])\ngeologists = EnumSort([F, M, P, T])\nradiobiologists = EnumSort([J, K, L, N])\nselected = Function([astronauts] -> [bool])\n\n# Constraints\nCount([a:astronauts], selected(a)) == 4 ::: Exactly two experienced astronauts and two inexperienced astronauts are selected\nAnd(Count([a:astronauts], And(selected(a), a in experienced)), Count([a:astronauts], And(selected(a), a in inexperienced))) == 2) ::: Exactly two geologists and two radiobiologists are selected\nOr(selected(P), selected(L), And(selected(P), selected(L))) ::: Either P or L or both are selected\n\n# Options\nQuestion ::: Which one of the following is an acceptable selection of astronauts for the space flight?\nis_sat(And(selected(F), selected(J), selected(N), selected(T))) ::: A) F, J, N, and T\nis_sat(And(selected(F), selected(L), selected(M), selected(P))) ::: B) F, L, M, and P\nis_sat(And(selected(F), selected(M), selected(N), selected(P))) ::: C) F, M, N, and P\nis_sat(And(selected(J), selected(L), selected(M), selected(T))) ::: D) J, L, M, and T\nis_sat(And(selected(K), selected(L), selected(N), selected(T))) ::: E) K, L, N, and T\n------"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_1_2",
    "context": "From among eight candidates, four astronauts will be selected for a space flight. Four of the candidates—F, J, K, and L—are experienced astronauts and four—M, N, P, and T—are inexperienced astronauts. F, M, P, and T are geologists whereas J, K, L, and N are radiobiologists. The astronauts must be selected according to the following conditions: Exactly two experienced astronauts and two inexperienced astronauts are selected. Exactly two geologists and two radiobiologists are selected. Either P or L or both are selected.",
    "question": "If F and P are selected for the space flight, the other two astronauts selected must be",
    "answer": "A",
    "options": [
      "A) a radiobiologist who is an experienced astronaut and a radiobiologist who is an inexperienced astronaut",
      "B) a radiobiologist who is an experienced astronaut and a geologist who is an inexperienced astronaut",
      "C) a radiobiologist and a geologist, both of whom are experienced astronauts",
      "D) two radiobiologists, both of whom are experienced astronauts",
      "E) two radiobiologists, both of whom are inexperienced astronauts"
    ],
    "raw_logic_programs": [
      "# Declarations\nastronauts = EnumSort([F, J, K, L, M, N, P, T])\nexperienced = EnumSort([F, J, K, L])\ninexperienced = EnumSort([M, N, P, T])\ngeologists = EnumSort([F, M, P, T])\nradiobiologists = EnumSort([J, K, L, N])\nselected = Function([astronauts] -> [bool])\n\n# Constraints\nForAll([a:astronauts], Or(selected(a), Not(selected(a)))) ::: Exactly two experienced astronauts and two inexperienced astronauts are selected\nAnd(Count([a:astronauts], And(selected(a), experienced(a))), 2) ::: Exactly two geologists and two radiobiologists are selected\nAnd(Count([a:astronauts], And(selected(a), geologists(a))), 2) ::: Either P or L or both are selected\n\n# Options\nQuestion ::: If F and P are selected for the space flight, the other two astronauts selected must be\nis_valid(And(selected(J), selected(N))) ::: (A)\nis_valid(And(selected(J), selected(T))) ::: (B)\nis_valid(And(selected(J), selected(K))) ::: (C)\nis_valid(And(selected(J), selected(L))) ::: (D)\nis_valid(And(selected(J), selected(M))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_1_3",
    "context": "From among eight candidates, four astronauts will be selected for a space flight. Four of the candidates—F, J, K, and L—are experienced astronauts and four—M, N, P, and T—are inexperienced astronauts. F, M, P, and T are geologists whereas J, K, L, and N are radiobiologists. The astronauts must be selected according to the following conditions: Exactly two experienced astronauts and two inexperienced astronauts are selected. Exactly two geologists and two radiobiologists are selected. Either P or L or both are selected.",
    "question": "If F and J are selected for the space flight, which one of the following must also be selected?",
    "answer": "D",
    "options": [
      "A) K",
      "B) L",
      "C) M",
      "D) N",
      "E) T"
    ],
    "raw_logic_programs": [
      "# Declarations\nastronauts = EnumSort([F, J, K, L, M, N, P, T])\nexperienced = EnumSort([F, J, K, L])\ninexperienced = EnumSort([M, N, P, T])\ngeologists = EnumSort([F, M, P, T])\nradiobiologists = EnumSort([J, K, L, N])\nselected = Function([astronauts] -> [bool])\n\n# Constraints\nForAll([a:astronauts], Or(selected(a), Not(selected(a)))) ::: Exactly two experienced astronauts and two inexperienced astronauts are selected\nAnd(selected(F), selected(J)) ::: F and J are selected for the space flight\nAnd(selected(P), selected(L)) ::: Either P or L or both are selected\n\n# Options\nQuestion ::: If F and J are selected for the space flight, which one of the following must also be selected?\nis_sat(And(selected(F), selected(J), selected(K))) ::: (A)\nis_sat(And(selected(F), selected(J), selected(L))) ::: (B)\nis_sat(And(selected(F), selected(J), selected(M))) ::: (C)\nis_sat(And(selected(F), selected(J), selected(N))) ::: (D)\nis_sat(And(selected(F), selected(J), selected(T))) ::: (E)\n------\nProblem:\nA company has six employees: A, B, C, D, E, and F. Each employee is assigned to work in one of the following three departments: accounting, marketing, or sales. The following conditions apply: A and B work in the same department. C and D work in different departments. E and F work in different departments. A and E work in different departments.\nQuestion:\nWhich one of the"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_1_4",
    "context": "From among eight candidates, four astronauts will be selected for a space flight. Four of the candidates—F, J, K, and L—are experienced astronauts and four—M, N, P, and T—are inexperienced astronauts. F, M, P, and T are geologists whereas J, K, L, and N are radiobiologists. The astronauts must be selected according to the following conditions: Exactly two experienced astronauts and two inexperienced astronauts are selected. Exactly two geologists and two radiobiologists are selected. Either P or L or both are selected.",
    "question": "If M and T are selected for the space flight, which one of the following could be, but need not be, selected for the flight?",
    "answer": "B",
    "options": [
      "A) F",
      "B) J",
      "C) L",
      "D) N",
      "E) P"
    ],
    "raw_logic_programs": [
      "# Declarations\nastronauts = EnumSort([F, J, K, L, M, N, P, T])\nexperienced = EnumSort([F, J, K, L])\ninexperienced = EnumSort([M, N, P, T])\ngeologists = EnumSort([F, M, P, T])\nradiobiologists = EnumSort([J, K, L, N])\nselected = Function([astronauts] -> [bool])\n\n# Constraints\nForAll([a:astronauts], Or(selected(a), Not(selected(a)))) ::: Exactly two experienced astronauts and two inexperienced astronauts are selected\nAnd(selected(F), selected(M)) ::: Exactly two geologists and two radiobiologists are selected\nOr(selected(P), selected(L)) ::: Either P or L or both are selected\n\n# Options\nQuestion ::: If M and T are selected for the space flight, which one of the following could be, but need not be, selected for the flight?\nis_exception(is_sat(selected(F))) ::: (A)\nis_exception(is_sat(selected(J))) ::: (B)\nis_exception(is_sat(selected(L))) ::: (C)\nis_exception(is_sat(selected(N))) ::: (D)\nis_exception(is_sat(selected(P))) ::: (E)\n------\nProblem:\nA company has six employees: A, B, C, D, E, and F. Each employee is assigned to work in one of the following departments: accounting, human resources, or public relations. The following conditions apply: B and E are assigned to the same department. C is assigned to a different department from A. D is assigned to a different department from B. F is assigned to a different department from E.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A)"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_1_5",
    "context": "From among eight candidates, four astronauts will be selected for a space flight. Four of the candidates—F, J, K, and L—are experienced astronauts and four—M, N, P, and T—are inexperienced astronauts. F, M, P, and T are geologists whereas J, K, L, and N are radiobiologists. The astronauts must be selected according to the following conditions: Exactly two experienced astronauts and two inexperienced astronauts are selected. Exactly two geologists and two radiobiologists are selected. Either P or L or both are selected.",
    "question": "If N is selected for the space flight, which one of the following must also be selected?",
    "answer": "A",
    "options": [
      "A) F",
      "B) J",
      "C) L",
      "D) M",
      "E) T"
    ],
    "raw_logic_programs": [
      "# Declarations\nastronauts = EnumSort([F, J, K, L, M, N, P, T])\nexperienced = EnumSort([F, J, K, L])\ninexperienced = EnumSort([M, N, P, T])\ngeologists = EnumSort([F, M, P, T])\nradiobiologists = EnumSort([J, K, L, N])\nselected = Function([astronauts] -> [bool])\n\n# Constraints\nForAll([a:astronauts], Or(selected(a), Not(selected(a)))) ::: Exactly two experienced astronauts and two inexperienced astronauts are selected\nAnd(selected(F), selected(M), selected(P), selected(T)) ::: Exactly two geologists and two radiobiologists are selected\nOr(selected(P), selected(L), And(selected(P), selected(L))) ::: Either P or L or both are selected\n\n# Options\nQuestion ::: If N is selected for the space flight, which one of the following must also be selected?\nis_sat(And(selected(N), selected(F))) ::: (A)\nis_sat(And(selected(N), selected(J))) ::: (B)\nis_sat(And(selected(N), selected(L))) ::: (C)\nis_sat(And(selected(N), selected(M))) ::: (D)\nis_sat(And(selected(N), selected(T))) ::: (E)\n------\nProblem:\nA company has six employees: A, B, C, D, E, and F. Each employee is assigned to work in one of the following three departments: accounting, marketing, or sales. The following conditions apply: A and B work in the same department. C and D work in different departments. E and F work in different departments. A and E work in different departments.\nQuestion:\nWhich one of"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_2_6",
    "context": "A showroom contains exactly six new cars—T, V, W, X, Y, and Z—each equipped with at least one of the following three options: power windows, leather interior, and sunroof. No car has any other options. The following conditions must apply: V has power windows and a sunroof. W has power windows and a leather interior. W and Y have no options in common. X has more options than W. V and Z have exactly one option in common. T has fewer options than Z.",
    "question": "For exactly how many of the six cars is it possible to determine exactly which options each one has?",
    "answer": "C",
    "options": [
      "A) two",
      "B) three",
      "C) four",
      "D) five",
      "E) six"
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([T, V, W, X, Y, Z])\noptions = EnumSort([power_windows, leather_interior, sunroof])\nhas = Function([cars, options] -> [bool])\n\n# Constraints\nForAll([c:cars], Count([o:options], has(c, o)) >= 1) ::: each car has at least one of the following three options\nAnd(has(V, power_windows), has(V, sunroof)) ::: V has power windows and a sunroof\nAnd(has(W, power_windows), has(W, leather_interior)) ::: W has power windows and a leather interior\nForAll([o:options], Implies(has(W, o), Not(has(Y, o)))) ::: W and Y have no options in common\nCount([o:options], has(X, o)) > Count([o:options], has(W, o)) ::: X has more options than W\nCount([o:options], has(V, o)) == Count([o:options], has(Z, o)) ::: V and Z have exactly one option in common\nCount([o:options], has(T, o)) < Count([o:options], has(Z, o)) ::: T has fewer options than Z\n\n# Options\nQuestion ::: For exactly how many of the six cars is it possible to determine exactly which options each one has?\nis_sat(ForAll([c:cars], Count([o:options], has(c, o)) == 1)) ::: A) two\nis_sat(ForAll([c:cars], Count([o:options], has(c, o)) == 2)) ::: B) three\nis_sat(ForAll([c:cars], Count([o:options], has(c, o)) == 3)) ::: C) four\nis_sat(ForAll([c:cars], Count([o:options], has"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_2_7",
    "context": "A showroom contains exactly six new cars—T, V, W, X, Y, and Z—each equipped with at least one of the following three options: power windows, leather interior, and sunroof. No car has any other options. The following conditions must apply: V has power windows and a sunroof. W has power windows and a leather interior. W and Y have no options in common. X has more options than W. V and Z have exactly one option in common. T has fewer options than Z.",
    "question": "Which one of the following must be false?",
    "answer": "A",
    "options": [
      "A) Exactly five of the six cars have leather interiors.",
      "B) Exactly five of the six cars have sunroofs.",
      "C) Exactly four of the six cars have leather interiors.",
      "D) Exactly four of the six cars have power windows.",
      "E) Exactly four of the six cars have sunroofs."
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([T, V, W, X, Y, Z])\noptions = EnumSort([power_windows, leather_interior, sunroof])\nhas = Function([cars, options] -> [bool])\n\n# Constraints\nForAll([c:cars], Count([o:options], has(c, o)) >= 1) ::: each car has at least one of the following three options\nAnd(has(V, power_windows), has(V, sunroof)) ::: V has power windows and a sunroof\nAnd(has(W, power_windows), has(W, leather_interior)) ::: W has power windows and a leather interior\nForAll([o:options], Implies(has(W, o), Not(has(Y, o)))) ::: W and Y have no options in common\nCount([o:options], has(X, o)) > Count([o:options], has(W, o)) ::: X has more options than W\nAnd(has(V, o), has(Z, o)) ::: V and Z have exactly one option in common\nCount([o:options], has(T, o)) < Count([o:options], has(Z, o)) ::: T has fewer options than Z\n\n# Options\nQuestion ::: Which one of the following must be false?\nis_exception(is_sat(Count([c:cars], has(c, leather_interior)) == 5)) ::: A) Exactly five of the six cars have leather interiors.\nis_exception(is_sat(Count([c:cars], has(c, sunroof)) == 5)) ::: B) Exactly five of the six cars have sunroofs.\nis_exception(is_sat(Count([c:cars], has(c, leather_interior)) == 4)) ::: C) Exactly four of the six cars have leather interiors.\nis_exception(is"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_2_8",
    "context": "A showroom contains exactly six new cars—T, V, W, X, Y, and Z—each equipped with at least one of the following three options: power windows, leather interior, and sunroof. No car has any other options. The following conditions must apply: V has power windows and a sunroof. W has power windows and a leather interior. W and Y have no options in common. X has more options than W. V and Z have exactly one option in common. T has fewer options than Z.",
    "question": "If all the cars that have leather interiors also have power windows, which one of the following must be false?",
    "answer": "E",
    "options": [
      "A) T has power windows.",
      "B) T has a sunroof.",
      "C) V has power windows.",
      "D) Z has power windows.",
      "E) Z has a sunroof."
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([T, V, W, X, Y, Z])\noptions = EnumSort([power_windows, leather_interior, sunroof])\nhas = Function([cars, options] -> [bool])\n\n# Constraints\nForAll([c:cars], Count([o:options], has(c, o)) >= 1) ::: each car has at least one of the following three options\nAnd(has(V, power_windows), has(V, sunroof)) ::: V has power windows and a sunroof\nAnd(has(W, power_windows), has(W, leather_interior)) ::: W has power windows and a leather interior\nForAll([o:options], Implies(has(W, o), Not(has(Y, o)))) ::: W and Y have no options in common\nCount([o:options], has(X, o)) > Count([o:options], has(W, o)) ::: X has more options than W\nCount([o:options], has(V, o)) == Count([o:options], has(Z, o)) ::: V and Z have exactly one option in common\nCount([o:options], has(T, o)) < Count([o:options], has(Z, o)) ::: T has fewer options than Z\n\n# Options\nQuestion ::: If all the cars that have leather interiors also have power windows, which one of the following must be false?\nis_exception(is_sat(has(T, power_windows))) ::: A) T has power windows.\nis_exception(is_sat(has(T, sunroof))) ::: B) T has a sunroof.\nis_exception(is_sat(has(V, power_windows))) ::: C) V has power windows.\nis_exception(is_sat(has(Z, power_windows))) ::: D) Z has power windows.\nis_exception(is_sat(has("
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_2_9",
    "context": "A showroom contains exactly six new cars—T, V, W, X, Y, and Z—each equipped with at least one of the following three options: power windows, leather interior, and sunroof. No car has any other options. The following conditions must apply: V has power windows and a sunroof. W has power windows and a leather interior. W and Y have no options in common. X has more options than W. V and Z have exactly one option in common. T has fewer options than Z.",
    "question": "If Z has no options in common with T but has at least one option in common with every other car, then which one of the following must be false?",
    "answer": "D",
    "options": [
      "A) T has power windows.",
      "B) Z has a sunroof.",
      "C) Exactly four of the six cars have power windows.",
      "D) Exactly four of the six cars have leather interiors.",
      "E) Exactly four of the six cars have sunroofs."
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([T, V, W, X, Y, Z])\noptions = EnumSort([power_windows, leather_interior, sunroof])\nhas = Function([cars, options] -> [bool])\n\n# Constraints\nForAll([c:cars], Count([o:options], has(c, o)) >= 1) ::: each car has at least one of the following three options\nAnd(has(V, power_windows), has(V, sunroof)) ::: V has power windows and a sunroof\nAnd(has(W, power_windows), has(W, leather_interior)) ::: W has power windows and a leather interior\nForAll([o:options], Implies(has(W, o), Not(has(Y, o)))) ::: W and Y have no options in common\nCount([o:options], has(X, o)) > Count([o:options], has(W, o)) ::: X has more options than W\nAnd(has(V, o), has(Z, o)) ::: V and Z have exactly one option in common\nCount([o:options], has(T, o)) < Count([o:options], has(Z, o)) ::: T has fewer options than Z\n\n# Options\nQuestion ::: If Z has no options in common with T but has at least one option in common with every other car, then which one of the following must be false?\nis_exception(is_sat(has(T, power_windows))) ::: A) T has power windows.\nis_exception(is_sat(has(Z, sunroof))) ::: B) Z has a sunroof.\nis_exception(is_sat(Count([c:cars], has(c, power_windows)) == 4))) ::: C) Exactly four of the six cars have power windows.\nis_exception(is_sat(Count([c:cars], has(c, leather_inter"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_2_10",
    "context": "A showroom contains exactly six new cars—T, V, W, X, Y, and Z—each equipped with at least one of the following three options: power windows, leather interior, and sunroof. No car has any other options. The following conditions must apply: V has power windows and a sunroof. W has power windows and a leather interior. W and Y have no options in common. X has more options than W. V and Z have exactly one option in common. T has fewer options than Z.",
    "question": "Suppose that no two cars have exactly the same options as one another. In that case, each of the following could be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) Exactly three of the six cars have power windows.",
      "B) Exactly four of the six cars have power windows.",
      "C) Exactly three of the six cars have sunroofs.",
      "D) Exactly four of the six cars have sunroofs.",
      "E) Exactly four of the six cars have leather interiors."
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([T, V, W, X, Y, Z])\noptions = EnumSort([power_windows, leather_interior, sunroof])\nhas = Function([cars, options] -> [bool])\n\n# Constraints\nForAll([c:cars], Count([o:options], has(c, o)) >= 1) ::: each car has at least one of the following three options\nAnd(has(V, power_windows), has(V, sunroof)) ::: V has power windows and a sunroof\nAnd(has(W, power_windows), has(W, leather_interior)) ::: W has power windows and a leather interior\nForAll([o:options], Implies(has(W, o), Not(has(Y, o)))) ::: W and Y have no options in common\nCount([o:options], has(X, o)) > Count([o:options], has(W, o)) ::: X has more options than W\nAnd(has(V, power_windows), has(Z, power_windows)) ::: V and Z have exactly one option in common\nCount([o:options], has(T, o)) < Count([o:options], has(Z, o)) ::: T has fewer options than Z\n\n# Options\nQuestion ::: Suppose that no two cars have exactly the same options as one another. In that case, each of the following could be true EXCEPT:\nis_exception(is_sat(Count([c:cars], has(c, power_windows)) == 3))) ::: A) Exactly three of the six cars have power windows.\nis_exception(is_sat(Count([c:cars], has(c, power_windows)) == 4))) ::: B) Exactly four of the six cars have power windows.\nis_exception(is_sat(Count([c:cars], has(c, sunroof)) == 3))) ::: C) Exactly three"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_2_11",
    "context": "A showroom contains exactly six new cars—T, V, W, X, Y, and Z—each equipped with at least one of the following three options: power windows, leather interior, and sunroof. No car has any other options. The following conditions must apply: V has power windows and a sunroof. W has power windows and a leather interior. W and Y have no options in common. X has more options than W. V and Z have exactly one option in common. T has fewer options than Z.",
    "question": "If exactly four of the six cars have leather interiors, and exactly four of the six cars have power windows, then each of the following must be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) T and V have no options in common.",
      "B) T and Y have no options in common.",
      "C) T and Z have exactly one option in common.",
      "D) W and Z have exactly one option in common.",
      "E) Y and Z have no options in common."
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([T, V, W, X, Y, Z])\noptions = EnumSort([power_windows, leather_interior, sunroof])\nhas = Function([cars, options] -> [bool])\n\n# Constraints\nForAll([c:cars], Count([o:options], has(c, o)) >= 1) ::: each car has at least one of the following three options\nAnd(has(V, power_windows), has(V, sunroof)) ::: V has power windows and a sunroof\nAnd(has(W, power_windows), has(W, leather_interior)) ::: W has power windows and a leather interior\nForAll([o:options], Implies(has(W, o), Not(has(Y, o)))) ::: W and Y have no options in common\nCount([o:options], has(X, o)) > Count([o:options], has(W, o)) ::: X has more options than W\nAnd(has(V, o), has(Z, o)) ::: V and Z have exactly one option in common\nCount([o:options], has(T, o)) < Count([o:options], has(Z, o)) ::: T has fewer options than Z\n\n# Options\nQuestion ::: If exactly four of the six cars have leather interiors, and exactly four of the six cars have power windows, then each of the following must be true EXCEPT:\nis_exception(is_sat(ForAll([c:cars], Implies(has(c, leather_interior), has(c, power_windows))))) ::: A)\nis_exception(is_sat(ForAll([c:cars], Implies(has(c, leather_interior), Not(has(c, sunroof))))) ::: B)\nis_exception(is_sat(ForAll([c:cars], Implies(has(c, power_windows), Not(has(c, sunroof))))) ::: C)\nis_exception(is_sat(ForAll([c:cars], Implies(has(c, power_windows), has(c, leather_interior))))) ::: D)\nis_exception(is_sat(ForAll([c:cars], Implies(has(c, sunroof), Not(has(c, leather_interior))))) ::: E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_2_12",
    "context": "A showroom contains exactly six new cars—T, V, W, X, Y, and Z—each equipped with at least one of the following three options: power windows, leather interior, and sunroof. No car has any other options. The following conditions must apply: V has power windows and a sunroof. W has power windows and a leather interior. W and Y have no options in common. X has more options than W. V and Z have exactly one option in common. T has fewer options than Z.",
    "question": "Suppose that the condition requiring that X has more options than W is replaced by a new condition requiring that X and W have exactly two options in common. If all of the other original conditions remain in effect, which one of the following must be false?",
    "answer": "D",
    "options": [
      "A) T and X have no options in common.",
      "B) V and X have exactly one option in common.",
      "C) V and X have exactly two options in common.",
      "D) X and Z have no options in common.",
      "E) X and Z have exactly two options in common."
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([T, V, W, X, Y, Z])\noptions = EnumSort([power_windows, leather_interior, sunroof])\nhas = Function([cars, options] -> [bool])\n\n# Constraints\nForAll([c:cars], Count([o:options], has(c, o)) >= 1) ::: each car has at least one of the following three options\nAnd(has(V, power_windows), has(V, sunroof)) ::: V has power windows and a sunroof\nAnd(has(W, power_windows), has(W, leather_interior)) ::: W has power windows and a leather interior\nForAll([o:options], Implies(has(W, o), Not(has(Y, o)))) ::: W and Y have no options in common\nCount([o:options], has(X, o)) > Count([o:options], has(W, o)) ::: X has more options than W\nAnd(has(V, o), has(Z, o)) ::: V and Z have exactly one option in common\nCount([o:options], has(T, o)) < Count([o:options], has(Z, o)) ::: T has fewer options than Z\n\n# Options\nQuestion ::: Suppose that the condition requiring that X has more options than W is replaced by a new condition requiring that X and W have exactly two options in common. If all of the other original conditions remain in effect, which one of the following must be false?\nis_exception(is_sat(ForAll([o:options], Implies(has(T, o), Not(has(X, o)))))) ::: A) T and X have no options in common.\nis_exception(is_sat(And(has(V, o), has(X, o)))) ::: B) V and X have exactly one option in common.\nis_exception(is_sat(And(has(V, o), has(X, o)))) ::: C) V and X have exactly two options in common.\nis_exception(is_sat(ForAll([o:options], Implies(has(X, o), Not(has(Z, o)))))) ::: D) X and Z have no options in common.\nis_exception(is_sat(And(has(X, o), has(Z, o)))) ::: E) X and Z have exactly two options in common.\n------"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_3_13",
    "context": "Quentin, Robert, Shiro, Tony, and Umeko are the only members of the Kim family who attend an opera. Each of them sits in a separate seat in either row G or row H, and each sits in a seat numbered 1, 2, or 3. Consecutively numbered seats within each row are adjacent. Each member of the Kim family sits in a seat adjacent to, and in the same row as, at least one other member of the family. Tony and Umeko sit in row H. Shiro and Umeko sit in lower numbered seats than does Tony. Robert sits in the same row as Quentin or Shiro or both. Robert sits in a seat numbered 2.",
    "question": "Which one of the following statements could be true?",
    "answer": "A",
    "options": [
      "A) Seat G3 is empty.",
      "B) Seat H2 is empty.",
      "C) Shiro sits in a seat numbered 3.",
      "D) Tony sits in a seat numbered 1.",
      "E) Umeko sits in a seat numbered 3."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Quentin, Robert, Shiro, Tony, Umeko])\nrows = EnumSort([G, H])\nseats = EnumSort([1, 2, 3])\nsits = Function([people, rows, seats] -> [bool])\n\n# Constraints\nForAll([p:people], Count([r:rows, s:seats], sits(p, r, s)) == 1) ::: Each of them sits in a separate seat in either row G or row H\nForAll([r:rows], Count([s:seats], sits(p, r, s)) == 3) ::: Each sits in a seat numbered 1, 2, or 3\nForAll([p:people], Count([p2:people], And(sits(p, r, s), sits(p2, r, s))) >= 1) ::: Each member of the Kim family sits in a seat adjacent to, and in the same row as, at least one other member of the family\nsits(Tony, H, 2) ::: Tony and Umeko sit in row H\nsits(Shiro, H, 3) ::: Shiro and Umeko sit in lower numbered seats than does Tony\nsits(Robert, r, 2) ::: Robert sits in the same row as Quentin or Shiro or both\n\n# Options\nQuestion ::: Which one of the following statements could be true?\nis_valid(Exists([r:rows, s:seats], sits(r, s) == false)) ::: A) Seat G3 is empty.\nis_valid(Exists([r:rows, s:seats], sits(r, s) == false)) ::: B) Seat H2 is empty.\nis_valid(Exists([r:rows, s:seats], sits(r, s) == true)) ::: C) Shiro sits in a seat numbered 3.\nis_valid(Exists([r:rows, s:seats], sits(r, s) == true)) ::: D) Tony sits in a seat numbered 1.\nis_valid(Exists([r:rows, s:seats], sits(r, s) == true)) ::: E) Umeko sits in a seat numbered 3.\n------\nProblem:\nThe following is a list of the six members of the Kappa family:"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_3_14",
    "context": "Quentin, Robert, Shiro, Tony, and Umeko are the only members of the Kim family who attend an opera. Each of them sits in a separate seat in either row G or row H, and each sits in a seat numbered 1, 2, or 3. Consecutively numbered seats within each row are adjacent. Each member of the Kim family sits in a seat adjacent to, and in the same row as, at least one other member of the family. Tony and Umeko sit in row H. Shiro and Umeko sit in lower numbered seats than does Tony. Robert sits in the same row as Quentin or Shiro or both. Robert sits in a seat numbered 2.",
    "question": "Which one of the following statements could be true?",
    "answer": "B",
    "options": [
      "A) Robert sits in row H.",
      "B) Shiro sits in row H.",
      "C) Quentin sits in the same row as, and in a seat adjacent to, Shiro.",
      "D) Robert sits in the same row as, and in a seat adjacent to, Tony.",
      "E) Robert sits in the same row as, and in a seat adjacent to, Umeko."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Quentin, Robert, Shiro, Tony, Umeko])\nrows = EnumSort([G, H])\nseats = EnumSort([1, 2, 3])\nseats_in_row = Function([rows] -> [seats])\nsits = Function([people, rows, seats] -> [bool])\n\n# Constraints\nForAll([p:people], sits(p, G, 1) || sits(p, G, 2) || sits(p, G, 3) || sits(p, H, 1) || sits(p, H, 2) || sits(p, H, 3)) ::: Each of them sits in a separate seat in either row G or row H\nForAll([p:people], sits(p, G, 1) || sits(p, G, 2) || sits(p, G, 3) || sits(p, H, 1) || sits(p, H, 2) || sits(p, H, 3)) ::: Each of them sits in a seat numbered 1, 2, or 3\nForAll([p:people], sits(p, G, 1) || sits(p, G, 2) || sits(p, G, 3) || sits(p, H, 1) || sits(p, H, 2) || sits(p, H, 3)) ::: Each of them sits in a seat numbered 1, 2, or 3\nForAll([p:people], sits(p, G, 1) || sits(p, G, 2) || sits(p, G, 3) || sits(p, H, 1) || sits(p, H, 2) || sits(p, H, 3)) ::: Each of them sits in a seat numbered 1, 2, or 3\nForAll([p:people], sits(p, G, 1) || sits(p, G, 2) || sits(p, G, 3) || sits(p, H, 1) || sits(p, H, 2) || sits(p, H, 3)) ::: Each of them sits in a seat numbered 1, 2, or 3\nForAll([p:"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_3_15",
    "context": "Quentin, Robert, Shiro, Tony, and Umeko are the only members of the Kim family who attend an opera. Each of them sits in a separate seat in either row G or row H, and each sits in a seat numbered 1, 2, or 3. Consecutively numbered seats within each row are adjacent. Each member of the Kim family sits in a seat adjacent to, and in the same row as, at least one other member of the family. Tony and Umeko sit in row H. Shiro and Umeko sit in lower numbered seats than does Tony. Robert sits in the same row as Quentin or Shiro or both. Robert sits in a seat numbered 2.",
    "question": "If Tony sits in a seat numbered 2, then which one of the following statements could be false?",
    "answer": "C",
    "options": [
      "A) Quentin sits in a seat numbered 3.",
      "B) Umeko sits in a seat numbered 1.",
      "C) Quentin sits in the same row as, and in a seat adjacent to, Robert.",
      "D) Robert sits in the same row as, and in a seat adjacent to, Shiro.",
      "E) Tony sits in the same row as, and in a seat adjacent to, Umeko."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Quentin, Robert, Shiro, Tony, Umeko])\nrows = EnumSort([G, H])\nseats = EnumSort([1, 2, 3])\nsits = Function([people, rows, seats] -> [bool])\n\n# Constraints\nForAll([p:people], Or(sits(p, G, 1), sits(p, G, 2), sits(p, G, 3))) ::: Each of them sits in a separate seat in either row G or row H\nForAll([p:people], Or(sits(p, H, 1), sits(p, H, 2), sits(p, H, 3))) ::: Each of them sits in a separate seat in either row G or row H\nForAll([p:people], Or(sits(p, G, 1), sits(p, H, 1))) ::: Each sits in a seat adjacent to, and in the same row as, at least one other member of the family\nForAll([p:people], Or(sits(p, G, 2), sits(p, H, 2))) ::: Each sits in a seat adjacent to, and in the same row as, at least one other member of the family\nForAll([p:people], Or(sits(p, G, 3), sits(p, H, 3))) ::: Each sits in a seat adjacent to, and in the same row as, at least one other member of the family\nsits(Tony, H, 2) ::: Tony and Umeko sit in row H\nsits(Shiro, H, 1) ::: Shiro and Umeko sit in lower numbered seats than does Tony\nsits(Robert, G, 2) ::: Robert sits in the same row as Quentin or Shiro or both\nsits(Robert, H, 2) ::: Robert sits in the same row as Quentin or Shiro or both\n\n# Options\nQuestion ::: If Tony sits in a seat numbered 2, then which one of the following statements could be false?\nis_valid(sits(Quentin, G, 3)) ::: (A)\nis_valid(sits(Umeko, H, 1)) ::: (B)\nis_valid(sits(Quentin, G, 3) && sits(Robert"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_3_16",
    "context": "Quentin, Robert, Shiro, Tony, and Umeko are the only members of the Kim family who attend an opera. Each of them sits in a separate seat in either row G or row H, and each sits in a seat numbered 1, 2, or 3. Consecutively numbered seats within each row are adjacent. Each member of the Kim family sits in a seat adjacent to, and in the same row as, at least one other member of the family. Tony and Umeko sit in row H. Shiro and Umeko sit in lower numbered seats than does Tony. Robert sits in the same row as Quentin or Shiro or both. Robert sits in a seat numbered 2.",
    "question": "Considering only the six seats in which members of the Kim family could sit, which one of the following is a complete and accurate list of those seats any one of which could be empty?",
    "answer": "E",
    "options": [
      "A) G1, G3",
      "B) G3, H1",
      "C) H1, H3",
      "D) G1, G3, H1",
      "E) G1, G3, H1, H3"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Quentin, Robert, Shiro, Tony, Umeko])\nrows = EnumSort([G, H])\nseats = EnumSort([1, 2, 3])\nseats_in_row = Function([rows] -> [seats])\nsits = Function([people, rows, seats] -> [bool])\n\n# Constraints\nForAll([p:people], Count([r:rows, s:seats], sits(p, r, s)) == 1) ::: Each of them sits in a separate seat in either row G or row H\nForAll([r:rows], Count([s:seats], sits(p, r, s)) == 3) ::: each sits in a seat numbered 1, 2, or 3\nForAll([p:people], Count([p2:people], And(sits(p, r, s), sits(p2, r, s))) >= 1) ::: each sits in a seat adjacent to, and in the same row as, at least one other member of the family\nsits(Tony, H, 3) ::: Tony and Umeko sit in row H\nsits(Shiro, H, 2) ::: Shiro and Umeko sit in lower numbered seats than does Tony\nsits(Robert, G, 2) ::: Robert sits in the same row as Quentin or Shiro or both\nsits(Robert, G, 2) ::: Robert sits in a seat numbered 2\n\n# Options\nQuestion ::: Considering only the six seats in which members of the Kim family could sit, which one of the following is a complete and accurate list of those seats any one of which could be empty?\nis_valid(Exists([r:rows, s:seats], sits(Quentin, r, s) && sits(Robert, r, s) && sits(Shiro, r, s) && sits(Tony, r, s) && sits(Umeko, r, s))) ::: A) G1, G3\nis_valid(Exists([r:rows, s:seats], sits(Quentin, r, s) && sits(Robert, r, s) && sits(Shiro, r, s) && sits(Tony, r, s) && sits(Umeko, r, s))) ::: B) G3, H"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_4_17",
    "context": "Quentin, Robert, Shiro, Tony, and Umeko are the only members of the Kim family who attend an opera. Each of them sits in a separate seat in either row G or row H, and each sits in a seat numbered 1, 2, or 3. Consecutively numbered seats within each row are adjacent. Each member of the Kim family sits in a seat adjacent to, and in the same row as, at least one other member of the family. Tony and Umeko sit in row H. Shiro and Umeko sit in lower numbered seats than does Tony. Robert sits in the same row as Quentin or Shiro or both. Robert sits in a seat numbered 2.",
    "question": "Which one of the following is a complete and accurate list of those members of the Kim family any one of whom could sit in seat H2?",
    "answer": "E",
    "options": [
      "A) Quentin",
      "B) Shiro, Umeko",
      "C) Robert, Shiro, Umeko",
      "D) Tony, Shiro, Umeko",
      "E) Quentin, Shiro, Tony, Umeko"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Quentin, Robert, Shiro, Tony, Umeko])\nrows = EnumSort([G, H])\nseats = EnumSort([1, 2, 3])\nseat = Function([people, rows] -> [seats])\n\n# Constraints\nForAll([p:people], Or(seat(p, G) == 1, seat(p, G) == 2, seat(p, G) == 3)) ::: Each of them sits in a separate seat in either row G or row H, and each sits in a seat numbered 1, 2, or 3\nForAll([p:people], seat(p, G)!= seat(p, H)) ::: Consecutively numbered seats within each row are adjacent\nForAll([p:people], seat(p, G)!= seat(p, H)) ::: Each member of the Kim family sits in a seat adjacent to, and in the same row as, at least one other member of the family\nseat(Tony, H) ::: Tony and Umeko sit in row H\nseat(Shiro, H) ::: Shiro and Umeko sit in lower numbered seats than does Tony\nseat(Umeko, H) ::: Shiro and Umeko sit in lower numbered seats than does Tony\nseat(Robert, G) ::: Robert sits in the same row as Quentin or Shiro or both\nseat(Robert, H) ::: Robert sits in the same row as Quentin or Shiro or both\nseat(Robert, 2) ::: Robert sits in a seat numbered 2\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of those members of the Kim family any one of whom could sit in seat H2?\nis_valid(Exists([p:people], seat(p, H) == 2)) ::: A) Quentin\nis_valid(Exists([p:people], seat(p, H) == 2)) ::: B) Shiro, Umeko\nis_valid(Exists([p:people], seat(p, H) == 2)) ::: C) Robert, Shiro, Umeko\nis_valid(Exists([p:people], seat(p, H) == 2)) ::: D) Tony, Shiro, Umeko\nis_valid(Exists([p:people], seat(p, H) =="
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_4_18",
    "context": "Exactly seven professors—Madison, Nilsson, Orozco, Paton, Robinson, Sarkis, and Togo—were hired in the years 1989 through 1995. Each professor has one or more specialities, and any two professors hired in the same year or in consecutive years do not have a specialty in common. The professors were hired according to the following conditions: Madison was hired in 1993, Robinson in 1991. There is at least one specialty that Madison, Orozco, and Togo have in common. Nilsson shares a specialty with Robinson. Paton and Sarkis were each hired at least one year before Madison and at least one year after Nilsson. Orozco, who shares a specialty with Sarkis, was hired in 1990.",
    "question": "Which one of the following is a complete and accurate list of the professors who could have been hired in the years 1989 through 1991?",
    "answer": "C",
    "options": [
      "A) Nilsson, Orozco, Robinson",
      "B) Orozco, Robinson, Sarkis",
      "C) Nilsson, Orozco, Paton, Robinson",
      "D) Nilsson, Orozco, Paton, Sarkis",
      "E) Orozco, Paton, Robinson, Sarkis"
    ],
    "raw_logic_programs": [
      "# Declarations\nprofessors = EnumSort([Madison, Nilsson, Orozco, Paton, Robinson, Sarkis, Togo])\nyears = EnumSort([1989, 1990, 1991, 1992, 1993, 1994, 1995])\nhired = Function([professors, years] -> [bool])\nspecialties = EnumSort([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z])\nspecialty = Function([professors] -> [specialties])\n\n# Constraints\nForAll([p:professors], Count([s:specialties], specialty(p) == s) >= 1) ::: Each professor has one or more specialties\nForAll([p1:professors, p2:professors], And(p1!= p2, hired(p1, y), hired(p2, y)) => Implies(y!= y+1, y!= y-1)) ::: any two professors hired in the same year or in consecutive years do not have a specialty in common\nhired(Madison, 1993) ::: Madison was hired in 1993\nhired(Robinson, 1991) ::: Robinson in 1991\nAnd(hired(Madison, y), hired(Orozco, y), hired(Togo, y)) => Count([s:specialties], specialty(Madison) == s && specialty(Orozco) == s && specialty(Togo) == s) >= 1 ::: There is at least one specialty that Madison, Orozco, and Togo have in common\nAnd(hired(Nilsson, y), hired(Robinson, y)) => Count([s:specialties], specialty(Nilsson) == s && specialty(Robinson) == s) >= 1 ::: Nilsson shares a specialty with Robinson\nAnd(hired(Paton, y), hired(Sarkis, y)) => Count([s:specialties], specialty(Paton) == s && specialty(Sarkis) == s) >= 1 ::: Paton and Sarkis were each hired at least one year"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_4_19",
    "context": "Exactly seven professors—Madison, Nilsson, Orozco, Paton, Robinson, Sarkis, and Togo—were hired in the years 1989 through 1995. Each professor has one or more specialities, and any two professors hired in the same year or in consecutive years do not have a specialty in common. The professors were hired according to the following conditions: Madison was hired in 1993, Robinson in 1991. There is at least one specialty that Madison, Orozco, and Togo have in common. Nilsson shares a specialty with Robinson. Paton and Sarkis were each hired at least one year before Madison and at least one year after Nilsson. Orozco, who shares a specialty with Sarkis, was hired in 1990.",
    "question": "If exactly one professor was hired in 1991, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Madison and Paton share a specialty.",
      "B) Robinson and Sarkis share a specialty.",
      "C) Paton was hired exactly one year after Orozco.",
      "D) Exactly one professor was hired in 1994.",
      "E) Exactly two professors were hired in 1993."
    ],
    "raw_logic_programs": [
      "# Declarations\nprofessors = EnumSort([Madison, Nilsson, Orozco, Paton, Robinson, Sarkis, Togo])\nyears = EnumSort([1989, 1990, 1991, 1992, 1993, 1994, 1995])\nspecialties = EnumSort([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z])\nhired = Function([professors, years] -> [bool])\nspecialty = Function([professors, specialties] -> [bool])\n\n# Constraints\nForAll([p:professors], Count([y:years], hired(p, y)) == 1) ::: Exactly seven professors were hired in the years 1989 through 1995\nForAll([p1:professors, p2:professors], Implies(And(hired(p1, y1), hired(p2, y2)), Not(And(y1 == y2, specialty(p1, s) == specialty(p2, s))))) ::: any two professors hired in the same year or in consecutive years do not have a specialty in common\nhired(Madison, 1993) ::: Madison was hired in 1993\nhired(Robinson, 1991) ::: Robinson in 1991\nForAll([s:specialties], Implies(And(specialty(Madison, s), specialty(Orozco, s), specialty(Togo, s)), specialty(Madison, s) == specialty(Orozco, s) == specialty(Togo, s))) ::: There is at least one specialty that Madison, Orozco, and Togo have in common\nspecialty(Nilsson, s) == specialty(Robinson, s) ::: Nilsson shares a specialty with Robinson\nForAll([p:professors], Implies(And(p!= Madison, p!= Nilsson), And(hired(p, y1), hired(Madison, y2), hired(Nilsson, y3), y1 < y2, y2 < y3))) ::: Paton and S"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_4_20",
    "context": "Exactly seven professors—Madison, Nilsson, Orozco, Paton, Robinson, Sarkis, and Togo—were hired in the years 1989 through 1995. Each professor has one or more specialities, and any two professors hired in the same year or in consecutive years do not have a specialty in common. The professors were hired according to the following conditions: Madison was hired in 1993, Robinson in 1991. There is at least one specialty that Madison, Orozco, and Togo have in common. Nilsson shares a specialty with Robinson. Paton and Sarkis were each hired at least one year before Madison and at least one year after Nilsson. Orozco, who shares a specialty with Sarkis, was hired in 1990.",
    "question": "Which one of the following must be false?",
    "answer": "E",
    "options": [
      "A) Nilsson was hired in 1989.",
      "B) Paton was hired in 1990.",
      "C) Paton was hired in 1991.",
      "D) Sarkis was hired in 1992.",
      "E) Togo was hired in 1994."
    ],
    "raw_logic_programs": [
      "# Declarations\nprofessors = EnumSort([Madison, Nilsson, Orozco, Paton, Robinson, Sarkis, Togo])\nyears = EnumSort([1989, 1990, 1991, 1992, 1993, 1994, 1995])\nhired = Function([professors, years] -> [bool])\nspecialties = EnumSort([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z])\nhas_specialty = Function([professors, specialties] -> [bool])\n\n# Constraints\nForAll([p:professors], Count([y:years], hired(p, y)) == 1) ::: Exactly seven professors were hired in the years 1989 through 1995\nForAll([p:professors], Count([s:specialties], has_specialty(p, s)) >= 1) ::: Each professor has one or more specialities\nForAll([p1:professors, p2:professors], Implies(And(hired(p1, y1), hired(p2, y2)), Not(And(y1 == y2, has_specialty(p1, s), has_specialty(p2, s))))) ::: any two professors hired in the same year or in consecutive years do not have a specialty in common\nhired(Madison, 1993) ::: Madison was hired in 1993\nhired(Robinson, 1991) ::: Robinson in 1991\nForAll([s:specialties], Implies(And(has_specialty(Madison, s), has_specialty(Orozco, s), has_specialty(Togo, s)), has_specialty(Orozco, s))) ::: There is at least one specialty that Madison, Orozco, and Togo have in common\nhas_specialty(Nilsson, s) == has_specialty(Robinson, s) ::: Nilsson shares a specialty with Robinson\nForAll([p:professors], Implies(And(p!= Madison, p!= Nilsson, hired(p, y1"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_4_21",
    "context": "Exactly seven professors—Madison, Nilsson, Orozco, Paton, Robinson, Sarkis, and Togo—were hired in the years 1989 through 1995. Each professor has one or more specialities, and any two professors hired in the same year or in consecutive years do not have a specialty in common. The professors were hired according to the following conditions: Madison was hired in 1993, Robinson in 1991. There is at least one specialty that Madison, Orozco, and Togo have in common. Nilsson shares a specialty with Robinson. Paton and Sarkis were each hired at least one year before Madison and at least one year after Nilsson. Orozco, who shares a specialty with Sarkis, was hired in 1990.",
    "question": "Which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Orozco was hired before Paton.",
      "B) Paton was hired before Sarkis.",
      "C) Sarkis was hired before Robinson.",
      "D) Robinson was hired before Sarkis.",
      "E) Madison was hired before Sarkis."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_4_22",
    "context": "Exactly seven professors—Madison, Nilsson, Orozco, Paton, Robinson, Sarkis, and Togo—were hired in the years 1989 through 1995. Each professor has one or more specialities, and any two professors hired in the same year or in consecutive years do not have a specialty in common. The professors were hired according to the following conditions: Madison was hired in 1993, Robinson in 1991. There is at least one specialty that Madison, Orozco, and Togo have in common. Nilsson shares a specialty with Robinson. Paton and Sarkis were each hired at least one year before Madison and at least one year after Nilsson. Orozco, who shares a specialty with Sarkis, was hired in 1990.",
    "question": "If exactly two professors were hired in 1992, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Orozco, Paton, and Togo share a specialty.",
      "B) Madison, Paton, and Togo share a specialty.",
      "C) Exactly two professors were hired in 1991.",
      "D) Exactly two professors were hired in 1993.",
      "E) Paton was hired in 1991."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200110_3-G_4_23",
    "context": "Exactly seven professors—Madison, Nilsson, Orozco, Paton, Robinson, Sarkis, and Togo—were hired in the years 1989 through 1995. Each professor has one or more specialities, and any two professors hired in the same year or in consecutive years do not have a specialty in common. The professors were hired according to the following conditions: Madison was hired in 1993, Robinson in 1991. There is at least one specialty that Madison, Orozco, and Togo have in common. Nilsson shares a specialty with Robinson. Paton and Sarkis were each hired at least one year before Madison and at least one year after Nilsson. Orozco, who shares a specialty with Sarkis, was hired in 1990.",
    "question": "If Paton and Madison have a specialty in common, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Nilsson does not share a specialty with Paton.",
      "B) Exactly one professor was hired in 1990.",
      "C) Exactly one professor was hired in 1991.",
      "D) Exactly two professors were hired in each of two years.",
      "E) Paton was hired at least one year before Sarkis."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_1_1",
    "context": "A fruit stand carries at least one kind of the following kinds of fruit: figs, kiwis, oranges, pears, tangerines, and watermelons. The stand does not carry any other kind of fruit. The selection of fruits the stand carries is consistent with the following conditions: If the stand carries kiwis, then it does not carry pears. If the stand does not carry tangerines, then it carries kiwis. If the stand carries oranges, then it carries both pears and watermelons. If the stand carries watermelons, then it carries figs or tangerines or both.",
    "question": "Which one of the following could be a complete and accurate list of the kinds of fruit the stand carries?",
    "answer": "B",
    "options": [
      "A) oranges, pears",
      "B) pears, tangerines",
      "C) oranges, pears, watermelons",
      "D) oranges, tangerines, watermelons",
      "E) kiwis, oranges, pears, watermelons"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_1_2",
    "context": "A fruit stand carries at least one kind of the following kinds of fruit: figs, kiwis, oranges, pears, tangerines, and watermelons. The stand does not carry any other kind of fruit. The selection of fruits the stand carries is consistent with the following conditions: If the stand carries kiwis, then it does not carry pears. If the stand does not carry tangerines, then it carries kiwis. If the stand carries oranges, then it carries both pears and watermelons. If the stand carries watermelons, then it carries figs or tangerines or both.",
    "question": "Which one of the following could be the only kind of fruit the stand carries?",
    "answer": "D",
    "options": [
      "A) figs",
      "B) oranges",
      "C) pears",
      "D) tangerines",
      "E) watermelons"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_1_3",
    "context": "A fruit stand carries at least one kind of the following kinds of fruit: figs, kiwis, oranges, pears, tangerines, and watermelons. The stand does not carry any other kind of fruit. The selection of fruits the stand carries is consistent with the following conditions: If the stand carries kiwis, then it does not carry pears. If the stand does not carry tangerines, then it carries kiwis. If the stand carries oranges, then it carries both pears and watermelons. If the stand carries watermelons, then it carries figs or tangerines or both.",
    "question": "Which one of the following CANNOT be a complete and accurate list of the kinds of fruit the stand carries?",
    "answer": "E",
    "options": [
      "A) kiwis, tangerines",
      "B) tangerines, watermelons",
      "C) figs, kiwis, watermelons",
      "D) oranges, pears, tangerines, watermelons",
      "E) figs, kiwis, oranges, pears, watermelons"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_1_4",
    "context": "A fruit stand carries at least one kind of the following kinds of fruit: figs, kiwis, oranges, pears, tangerines, and watermelons. The stand does not carry any other kind of fruit. The selection of fruits the stand carries is consistent with the following conditions: If the stand carries kiwis, then it does not carry pears. If the stand does not carry tangerines, then it carries kiwis. If the stand carries oranges, then it carries both pears and watermelons. If the stand carries watermelons, then it carries figs or tangerines or both.",
    "question": "If the stand carries no watermelons, then which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) The stand carries kiwis.",
      "B) The stand carries at least two kinds of fruit.",
      "C) The stand carries at most three kinds of fruit.",
      "D) The stand carries neither oranges nor pears.",
      "E) The stand carries neither oranges nor kiwis."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_1_5",
    "context": "A fruit stand carries at least one kind of the following kinds of fruit: figs, kiwis, oranges, pears, tangerines, and watermelons. The stand does not carry any other kind of fruit. The selection of fruits the stand carries is consistent with the following conditions: If the stand carries kiwis, then it does not carry pears. If the stand does not carry tangerines, then it carries kiwis. If the stand carries oranges, then it carries both pears and watermelons. If the stand carries watermelons, then it carries figs or tangerines or both.",
    "question": "If the stand carries watermelons, then which one of the following must be false?",
    "answer": "E",
    "options": [
      "A) The stand does not carry figs.",
      "B) The stand does not carry tangerines.",
      "C) The stand does not carry pears.",
      "D) The stand carries pears but not oranges.",
      "E) The stand carries pears but not tangerines."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_1_6",
    "context": "A fruit stand carries at least one kind of the following kinds of fruit: figs, kiwis, oranges, pears, tangerines, and watermelons. The stand does not carry any other kind of fruit. The selection of fruits the stand carries is consistent with the following conditions: If the stand carries kiwis, then it does not carry pears. If the stand does not carry tangerines, then it carries kiwis. If the stand carries oranges, then it carries both pears and watermelons. If the stand carries watermelons, then it carries figs or tangerines or both.",
    "question": "If the condition that if the fruit stand does not carry tangerines then it does carry kiwis is suspended, and all other conditions remain in effect, then which one of the following CANNOT be a complete and accurate list of the kinds of fruit the stand carries?",
    "answer": "C",
    "options": [
      "A) pears",
      "B) figs, pears",
      "C) oranges, pears, watermelons",
      "D) figs, pears, watermelons",
      "E) figs, oranges, pears, watermelons"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_2_7",
    "context": "A radio talk show host airs five telephone calls sequentially. The calls, one from each of Felicia, Gwen, Henry, Isaac, and Mel, are each either live or taped (but not both). Two calls are from Vancouver, two are from Seattle, and one is from Kelowna. The following conditions must apply: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order. The third call aired, from Kelowna, is taped. Both Seattle calls are live. Both Gwen's and Felicia's calls air after Henry's. Neither Mel nor Felicia calls from Seattle.",
    "question": "Which one of the following could be an accurate list of the calls, listed in the order in which they are aired?",
    "answer": "E",
    "options": [
      "A) Isaac's, Henry's, Felicia's, Mel's, Gwen's",
      "B) Isaac's, Mel's, Gwen's, Henry's, Felicia's",
      "C) Mel's, Gwen's, Henry's, Isaac's, Felicia's",
      "D) Mel's, Isaac's, Gwen's, Henry's, Felicia's",
      "E) Mel's, Isaac's, Henry's, Felicia's, Gwen's"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_2_8",
    "context": "A radio talk show host airs five telephone calls sequentially. The calls, one from each of Felicia, Gwen, Henry, Isaac, and Mel, are each either live or taped (but not both). Two calls are from Vancouver, two are from Seattle, and one is from Kelowna. The following conditions must apply: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order. The third call aired, from Kelowna, is taped. Both Seattle calls are live. Both Gwen's and Felicia's calls air after Henry's. Neither Mel nor Felicia calls from Seattle.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Felicia's call airs fifth.",
      "B) Gwen's call airs first.",
      "C) Henry's call airs second.",
      "D) Isaac's call airs third.",
      "E) Mel's call airs fifth."
    ],
    "raw_logic_programs": [
      "# Declarations\ncalls = EnumSort([Felicia, Gwen, Henry, Isaac, Mel])\ncities = EnumSort([Kelowna, Seattle, Vancouver])\nlive = Function([calls] -> [bool])\ntaped = Function([calls] -> [bool])\n\n# Constraints\nForAll([c:calls], Or(live(c), taped(c))) ::: The calls, one from each of Felicia, Gwen, Henry, Isaac, and Mel, are each either live or taped (but not both)\nAnd(live(Isaac), live(Mel)) ::: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order\nAnd(taped(Kelowna), live(Seattle)) ::: The third call aired, from Kelowna, is taped. Both Seattle calls are live\nAnd(live(Gwen), live(Felicia)) ::: Both Gwen's and Felicia's calls air after Henry's\nAnd(Not(live(Mel)), Not(live(Felicia))) ::: Neither Mel nor Felicia calls from Seattle\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(ForAll([c:calls], live(c) == live(Felicia))) ::: A) Felicia's call airs fifth.\nis_valid(ForAll([c:calls], live(c) == live(Gwen))) ::: B) Gwen's call airs first.\nis_valid(ForAll([c:calls], live(c) == live(Henry))) ::: C) Henry's call airs second.\nis_valid(ForAll([c:calls], live(c) == live(Isaac))) ::: D) Isaac's call airs third.\nis_valid(ForAll([c:calls], live(c) == live(Mel))) ::: E) Mel's call airs fifth.\n------"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_2_9",
    "context": "A radio talk show host airs five telephone calls sequentially. The calls, one from each of Felicia, Gwen, Henry, Isaac, and Mel, are each either live or taped (but not both). Two calls are from Vancouver, two are from Seattle, and one is from Kelowna. The following conditions must apply: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order. The third call aired, from Kelowna, is taped. Both Seattle calls are live. Both Gwen's and Felicia's calls air after Henry's. Neither Mel nor Felicia calls from Seattle.",
    "question": "If the first call aired is from Seattle, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Felicia's call is the next call aired after Isaac's.",
      "B) Henry's call is the next call aired after Felicia's.",
      "C) Henry's call is the next call aired after Mel's.",
      "D) Henry's call is the next call aired after Isaac's.",
      "E) Isaac's call is the next call aired after Mel's."
    ],
    "raw_logic_programs": [
      "# Declarations\ncalls = EnumSort([Felicia, Gwen, Henry, Isaac, Mel])\ncities = EnumSort([Kelowna, Seattle, Vancouver])\nlive = Function([calls] -> [bool])\ntaped = Function([calls] -> [bool])\n\n# Constraints\nForAll([c:calls], Or(live(c), taped(c))) ::: The calls, one from each of Felicia, Gwen, Henry, Isaac, and Mel, are each either live or taped (but not both)\nAnd(live(Isaac), live(Mel)) ::: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order\nAnd(taped(Kelowna), live(Seattle)) ::: The third call aired, from Kelowna, is taped. Both Seattle calls are live\nAnd(live(Gwen), live(Felicia)) ::: Both Gwen's and Felicia's calls air after Henry's\nAnd(Not(live(Mel)), Not(live(Felicia))) ::: Neither Mel nor Felicia calls from Seattle\n\n# Options\nQuestion ::: If the first call aired is from Seattle, then which one of the following could be true?\nis_exception(is_sat(And(live(Isaac), live(Felicia)))) ::: A) Felicia's call is the next call aired after Isaac's.\nis_exception(is_sat(And(live(Henry), live(Felicia)))) ::: B) Henry's call is the next call aired after Felicia's.\nis_exception(is_sat(And(live(Henry), live(Mel)))) ::: C) Henry's call is the next call aired after Mel's.\nis_exception(is_sat(And(live(Henry), live(Isaac)))) ::: D) Henry's call is the next call aired after Isaac's."
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_2_10",
    "context": "A radio talk show host airs five telephone calls sequentially. The calls, one from each of Felicia, Gwen, Henry, Isaac, and Mel, are each either live or taped (but not both). Two calls are from Vancouver, two are from Seattle, and one is from Kelowna. The following conditions must apply: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order. The third call aired, from Kelowna, is taped. Both Seattle calls are live. Both Gwen's and Felicia's calls air after Henry's. Neither Mel nor Felicia calls from Seattle.",
    "question": "If a taped call airs first, then which one of the following CANNOT be true?",
    "answer": "C",
    "options": [
      "A) Felicia's call airs fourth.",
      "B) Gwen's call airs fifth.",
      "C) A taped call airs second.",
      "D) A taped call airs third.",
      "E) A taped call airs fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\ncalls = EnumSort([Felicia, Gwen, Henry, Isaac, Mel])\ncities = EnumSort([Kelowna, Seattle, Vancouver])\nlive = Function([calls] -> [bool])\ntaped = Function([calls] -> [bool])\n\n# Constraints\nForAll([c:calls], Or(live(c), taped(c))) ::: The calls, one from each of Felicia, Gwen, Henry, Isaac, and Mel, are each either live or taped (but not both)\nAnd(live(Isaac), live(Mel)) ::: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order\nAnd(taped(Kelowna), live(Seattle)) ::: The third call aired, from Kelowna, is taped. Both Seattle calls are live\nAnd(live(Gwen), live(Felicia)) ::: Both Gwen's and Felicia's calls air after Henry's\nAnd(Not(live(Mel)), Not(live(Felicia))) ::: Neither Mel nor Felicia calls from Seattle\n\n# Options\nQuestion ::: If a taped call airs first, then which one of the following CANNOT be true?\nis_exception(is_sat(live(Felicia) == 4)) ::: A) Felicia's call airs fourth.\nis_exception(is_sat(live(Gwen) == 5)) ::: B) Gwen's call airs fifth.\nis_exception(is_sat(taped(Kelowna) == 2)) ::: C) A taped call airs second.\nis_exception(is_sat(taped(Kelowna) == 3)) ::: D) A taped call airs third.\nis_exception(is_sat(taped(Kelowna) == 4)) ::: E) A taped call airs fourth.\n------"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_2_11",
    "context": "A radio talk show host airs five telephone calls sequentially. The calls, one from each of Felicia, Gwen, Henry, Isaac, and Mel, are each either live or taped (but not both). Two calls are from Vancouver, two are from Seattle, and one is from Kelowna. The following conditions must apply: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order. The third call aired, from Kelowna, is taped. Both Seattle calls are live. Both Gwen's and Felicia's calls air after Henry's. Neither Mel nor Felicia calls from Seattle.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Gwen's call is live.",
      "B) Henry's call is live.",
      "C) Mel's call is live.",
      "D) Felicia's call is taped.",
      "E) Isaac's call is taped."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Felicia, Gwen, Henry, Isaac, Mel])\ncities = EnumSort([Kelowna, Seattle, Vancouver])\ncalls = Function([people, cities] -> [bool])\n\n# Constraints\nForAll([p:people], Count([c:cities], calls(p, c)) == 1) ::: each of Felicia, Gwen, Henry, Isaac, and Mel calls from exactly one of the following three cities\nAnd(calls(Isaac, _), calls(Mel, _)) ::: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order\nAnd(calls(Kelowna, _), Not(calls(Kelowna, _))) ::: The third call aired, from Kelowna, is taped\nAnd(calls(Seattle, _), calls(Seattle, _)) ::: Both Seattle calls are live\nAnd(calls(Henry, _), calls(Gwen, _), calls(Felicia, _)) ::: Both Gwen's and Felicia's calls air after Henry's\nAnd(Not(calls(Mel, Seattle)), Not(calls(Felicia, Seattle))) ::: Neither Mel nor Felicia calls from Seattle\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([p:people], calls(p, _) && calls(Gwen, _))) ::: A) Gwen's call is live.\nis_valid(Exists([p:people], calls(p, _) && calls(Henry, _))) ::: B) Henry's call is live.\nis_valid(Exists([p:people], calls(p, _) && calls(Mel, _))) ::: C) Mel's call is live.\nis_valid(Exists([p:people], Not(calls(p, _)) && calls(Felicia, _))) ::: D) Felicia's call is"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_2_12",
    "context": "A radio talk show host airs five telephone calls sequentially. The calls, one from each of Felicia, Gwen, Henry, Isaac, and Mel, are each either live or taped (but not both). Two calls are from Vancouver, two are from Seattle, and one is from Kelowna. The following conditions must apply: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order. The third call aired, from Kelowna, is taped. Both Seattle calls are live. Both Gwen's and Felicia's calls air after Henry's. Neither Mel nor Felicia calls from Seattle.",
    "question": "If no two live calls are aired consecutively and no two taped calls are aired consecutively, then in exactly how many distinct orders could the calls from the five people be aired?",
    "answer": "A",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Felicia, Gwen, Henry, Isaac, Mel])\ncities = EnumSort([Kelowna, Seattle, Vancouver])\ncalls = Function([people, cities] -> [bool])\n\n# Constraints\nForAll([p:people], Count([c:cities], calls(p, c)) == 1) ::: each of Felicia, Gwen, Henry, Isaac, and Mel calls from exactly one of the following three cities\nAnd(calls(Isaac, _), calls(Mel, _)) ::: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order\nAnd(calls(Kelowna, _), Not(calls(Kelowna, _))) ::: The third call aired, from Kelowna, is taped\nAnd(calls(Seattle, _), calls(Seattle, _)) ::: Both Seattle calls are live\nAnd(calls(Henry, _), calls(Gwen, _), calls(Felicia, _)) ::: Both Gwen's and Felicia's calls air after Henry's\nAnd(Not(calls(Mel, Seattle)), Not(calls(Felicia, Seattle))) ::: Neither Mel nor Felicia calls from Seattle\n\n# Options\nQuestion ::: If no two live calls are aired consecutively and no two taped calls are aired consecutively, then in exactly how many distinct orders could the calls from the five people be aired?\nis_sat(ForAll([p:people], Count([c:cities], calls(p, c)) == 1)) ::: A) one\nis_sat(ForAll([p:people], Count([c:cities], calls(p, c)) == 2)) ::: B) two\nis_sat(ForAll([p:people], Count([c:cities], calls(p, c)) == 3)) ::: C) three\nis_sat(ForAll"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_2_13",
    "context": "A radio talk show host airs five telephone calls sequentially. The calls, one from each of Felicia, Gwen, Henry, Isaac, and Mel, are each either live or taped (but not both). Two calls are from Vancouver, two are from Seattle, and one is from Kelowna. The following conditions must apply: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order. The third call aired, from Kelowna, is taped. Both Seattle calls are live. Both Gwen's and Felicia's calls air after Henry's. Neither Mel nor Felicia calls from Seattle.",
    "question": "If a taped call airs second, then which one of the following CANNOT be true?",
    "answer": "B",
    "options": [
      "A) The first call aired is from Seattle.",
      "B) The first call aired is from Vancouver.",
      "C) The fourth call aired is from Seattle.",
      "D) The fifth call aired is from Seattle.",
      "E) The fifth call aired is from Vancouver."
    ],
    "raw_logic_programs": [
      "# Declarations\ncalls = EnumSort([Felicia, Gwen, Henry, Isaac, Mel])\ncities = EnumSort([Kelowna, Seattle, Vancouver])\nlive = Function([calls] -> [bool])\ntaped = Function([calls] -> [bool])\n\n# Constraints\nForAll([c:calls], Or(live(c), taped(c))) ::: The calls, one from each of Felicia, Gwen, Henry, Isaac, and Mel, are each either live or taped (but not both)\nAnd(live(Isaac), live(Mel)) ::: Isaac's and Mel's calls are the first two calls aired, but not necessarily in that order\nAnd(taped(Kelowna), Count([c:calls], c == Kelowna) == 1) ::: The third call aired, from Kelowna, is taped\nAnd(live(Seattle), Count([c:calls], c == Seattle) == 2) ::: Both Seattle calls are live\nAnd(live(Gwen), live(Felicia)) ::: Both Gwen's and Felicia's calls air after Henry's\nAnd(Not(live(Mel)), Not(live(Felicia))) ::: Neither Mel nor Felicia calls from Seattle\n\n# Options\nQuestion ::: If a taped call airs second, then which one of the following CANNOT be true?\nis_exception(is_sat(live(Seattle) && live(Isaac))) ::: A) The first call aired is from Seattle.\nis_exception(is_sat(live(Vancouver) && live(Isaac))) ::: B) The first call aired is from Vancouver.\nis_exception(is_sat(live(Seattle) && live(Kelowna))) ::: C) The fourth call aired is from Seattle.\nis_exception(is_sat(live(Seattle) && live(Mel))) ::: D) The"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_3_14",
    "context": "Gutierrez, Hoffman, Imamura, Kelly, Lapas, and Moore ride a bus together. Each sits facing forward in a different one of the six seats on the left side of the bus. The seats are in consecutive rows that are numbered 1, 2, and 3 from front to back. Each row has exactly two seats: a window seat and an aisle seat. The following conditions must apply: Hoffman occupies the aisle seat immediately behind Gutierrez's aisle seat. If Moore occupies an aisle seat, Hoffman sits in the same row as Lapas. If Gutierrez sits in the same row as Kelly, Moore occupies the seat immediately and directly behind Imamura's seat. If Kelly occupies a window seat, Moore sits in row 3. If Kelly sits in row 3, Imamura sits in row 1.",
    "question": "Which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Imamura sits in row 2, whereas Kelly sits in row 3.",
      "B) Gutierrez sits in the same row as Kelly, immediately and directly behind Moore.",
      "C) Gutierrez occupies a window seat in the same row as Lapas.",
      "D) Moore occupies an aisle seat in the same row as Lapas.",
      "E) Kelly and Moore both sit in row 3."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Gutierrez, Hoffman, Imamura, Kelly, Lapas, Moore])\nseats = EnumSort([1, 2, 3])\nrows = EnumSort([1, 2, 3])\nseat_type = EnumSort([aisle, window])\nsits = Function([people, seats] -> [rows])\n\n# Constraints\nForAll([p:people], Count([s:seats], sits(p, s) == s) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([s:seats], Count([r:rows], sits(s, r) == r) == 1) ::: The seats are in consecutive rows that are numbered 1, 2, and 3 from front to back\nForAll([s:seats], Count([t:seat_type], sits(s, t) == t) == 1) ::: Each row has exactly two seats: a window seat and an aisle seat\nsits(Hoffman, aisle) == sits(Gutierrez, aisle) + 1 ::: Hoffman occupies the aisle seat immediately behind Gutierrez's aisle seat\nImplies(sits(Moore, aisle), sits(Hoffman, r) == sits(Lapas, r)) ::: If Moore occupies an aisle seat, Hoffman sits in the same row as Lapas\nImplies(sits(Gutierrez, r) == sits(Kelly, r), sits(Moore, s) == sits(Imamura, s) + 1) ::: If Gutierrez sits in the same row as Kelly, Moore occupies the seat immediately and directly behind Imamura's seat\nImplies(sits(Kelly, window), sits(Moore, 3)) ::: If Kelly occupies a window seat,"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_3_15",
    "context": "Gutierrez, Hoffman, Imamura, Kelly, Lapas, and Moore ride a bus together. Each sits facing forward in a different one of the six seats on the left side of the bus. The seats are in consecutive rows that are numbered 1, 2, and 3 from front to back. Each row has exactly two seats: a window seat and an aisle seat. The following conditions must apply: Hoffman occupies the aisle seat immediately behind Gutierrez's aisle seat. If Moore occupies an aisle seat, Hoffman sits in the same row as Lapas. If Gutierrez sits in the same row as Kelly, Moore occupies the seat immediately and directly behind Imamura's seat. If Kelly occupies a window seat, Moore sits in row 3. If Kelly sits in row 3, Imamura sits in row 1.",
    "question": "If Lapas and Kelly each occupy a window seat, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Moore occupies the aisle seat in row 3.",
      "B) Imamura occupies the window seat in row 3.",
      "C) Gutierrez sits in the same row as Kelly.",
      "D) Gutierrez sits in the same row as Moore.",
      "E) Moore sits in the same row as Lapas."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Gutierrez, Hoffman, Imamura, Kelly, Lapas, Moore])\nseats = EnumSort([1, 2, 3])\nrows = EnumSort([1, 2, 3])\nseat_type = EnumSort([aisle, window])\nsits = Function([people, rows, seat_type] -> [bool])\n\n# Constraints\nForAll([p:people], Count([r:rows], sits(p, r, aisle)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([r:rows], Count([p:people], sits(p, r, aisle)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([r:rows], Count([p:people], sits(p, r, window)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([r:rows], sits(p, r, aisle)) + Count([r:rows], sits(p, r, window)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([r:rows], sits(p, r, aisle)) + Count([r:rows], sits(p, r, window)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([r:rows], sits(p, r, aisle)) + Count([r:rows], sits(p, r, window)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([r"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_3_16",
    "context": "Gutierrez, Hoffman, Imamura, Kelly, Lapas, and Moore ride a bus together. Each sits facing forward in a different one of the six seats on the left side of the bus. The seats are in consecutive rows that are numbered 1, 2, and 3 from front to back. Each row has exactly two seats: a window seat and an aisle seat. The following conditions must apply: Hoffman occupies the aisle seat immediately behind Gutierrez's aisle seat. If Moore occupies an aisle seat, Hoffman sits in the same row as Lapas. If Gutierrez sits in the same row as Kelly, Moore occupies the seat immediately and directly behind Imamura's seat. If Kelly occupies a window seat, Moore sits in row 3. If Kelly sits in row 3, Imamura sits in row 1.",
    "question": "If Moore sits in row 1, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Hoffman sits in row 2.",
      "B) Imamura sits in row 2.",
      "C) Imamura sits in row 3.",
      "D) Kelly sits in row 1.",
      "E) Lapas sits in row 3."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Gutierrez, Hoffman, Imamura, Kelly, Lapas, Moore])\nseats = EnumSort([1, 2, 3])\nrows = EnumSort([1, 2, 3])\nsits = Function([people, seats] -> [bool])\n\n# Constraints\nForAll([p:people], Count([s:seats], sits(p, s)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([s:seats], Count([r:rows], sits(s, r)) == 1) ::: The seats are in consecutive rows that are numbered 1, 2, and 3 from front to back\nForAll([p:people], Count([r:rows], sits(p, r)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([r:rows], sits(p, r)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([s:seats], sits(p, s)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([s:seats], sits(p, s)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([s:seats], sits(p, s)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([s:seats], sits(p, s)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_3_17",
    "context": "Gutierrez, Hoffman, Imamura, Kelly, Lapas, and Moore ride a bus together. Each sits facing forward in a different one of the six seats on the left side of the bus. The seats are in consecutive rows that are numbered 1, 2, and 3 from front to back. Each row has exactly two seats: a window seat and an aisle seat. The following conditions must apply: Hoffman occupies the aisle seat immediately behind Gutierrez's aisle seat. If Moore occupies an aisle seat, Hoffman sits in the same row as Lapas. If Gutierrez sits in the same row as Kelly, Moore occupies the seat immediately and directly behind Imamura's seat. If Kelly occupies a window seat, Moore sits in row 3. If Kelly sits in row 3, Imamura sits in row 1.",
    "question": "If Kelly occupies the aisle seat in row 3, then each of the following must be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) Gutierrez sits in the same row as Imamura.",
      "B) Hoffman sits in the same row as Lapas.",
      "C) Lapas occupies a window seat.",
      "D) Moore occupies a window seat.",
      "E) Gutierrez sits in row 1."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Gutierrez, Hoffman, Imamura, Kelly, Lapas, Moore])\nseats = EnumSort([1, 2, 3])\nrows = EnumSort([1, 2, 3])\nseat_type = EnumSort([aisle, window])\nsits = Function([people, rows, seat_type] -> [bool])\n\n# Constraints\nForAll([p:people], Count([r:rows], sits(p, r, aisle)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([r:rows], Count([p:people], sits(p, r, aisle)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([r:rows], Count([p:people], sits(p, r, window)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([r:rows], sits(p, r, aisle)) + Count([r:rows], sits(p, r, window)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([r:rows], sits(p, r, aisle)) + Count([r:rows], sits(p, r, window)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([r:rows], sits(p, r, aisle)) + Count([r:rows], sits(p, r, window)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([p:people], Count([r"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_3_18",
    "context": "Gutierrez, Hoffman, Imamura, Kelly, Lapas, and Moore ride a bus together. Each sits facing forward in a different one of the six seats on the left side of the bus. The seats are in consecutive rows that are numbered 1, 2, and 3 from front to back. Each row has exactly two seats: a window seat and an aisle seat. The following conditions must apply: Hoffman occupies the aisle seat immediately behind Gutierrez's aisle seat. If Moore occupies an aisle seat, Hoffman sits in the same row as Lapas. If Gutierrez sits in the same row as Kelly, Moore occupies the seat immediately and directly behind Imamura's seat. If Kelly occupies a window seat, Moore sits in row 3. If Kelly sits in row 3, Imamura sits in row 1.",
    "question": "If neither Gutierrez nor Imamura sits in row 1, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Hoffman sits in row 2.",
      "B) Kelly sits in row 2.",
      "C) Moore sits in row 2.",
      "D) Imamura occupies an aisle seat.",
      "E) Moore occupies an aisle seat."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Gutierrez, Hoffman, Imamura, Kelly, Lapas, Moore])\nseats = EnumSort([1, 2, 3])\nrows = EnumSort([1, 2, 3])\nseat_type = EnumSort([aisle, window])\nsits = Function([people, rows, seat_type] -> [bool])\n\n# Constraints\nForAll([p:people], Count([r:rows], sits(p, r, aisle)) == 1) ::: Each sits facing forward in a different one of the six seats on the left side of the bus\nForAll([r:rows], Count([p:people], sits(p, r, aisle)) == 1) ::: Each row has exactly two seats: a window seat and an aisle seat\nAnd(sits(Hoffman, r, aisle), sits(Gutierrez, r, aisle)) ::: Hoffman occupies the aisle seat immediately behind Gutierrez's aisle seat\nAnd(sits(Moore, r, aisle), sits(Lapas, r, aisle)) ::: If Moore occupies an aisle seat, Hoffman sits in the same row as Lapas\nAnd(sits(Gutierrez, r, aisle), sits(Kelly, r, aisle)) ::: If Gutierrez sits in the same row as Kelly, Moore occupies the seat immediately and directly behind Imamura's seat\nAnd(sits(Kelly, r, window), sits(Moore, r, aisle)) ::: If Kelly occupies a window seat, Moore sits in row 3\nAnd(sits(Kelly, r, aisle), sits(Imamura, r, aisle)) ::: If Kelly sits in row 3, Imamura sits in row 1\n\n# Options\nQuestion ::: If neither Gutierrez nor Imamura sits in row 1, then which one of the following could be true?\nis_valid(Exists([r:rows], sits(Hoffman, r, aisle))) ::: A) Hoffman sits in row 2.\nis_valid(Exists([r:rows], sits(Kelly, r, aisle))) ::: B) Kelly sits in row 2.\nis_valid(Exists([r:rows], sits(Moore, r, aisle))) ::: C) Moore sits in row 2.\nis_valid(Exists([r:rows], sits(Imamura, r, aisle))) ::: D) Imamura occupies an aisle seat.\nis_valid(Exists([r:rows], sits(Moore, r, aisle))) ::: E) Moore occupies an aisle seat.\n------"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_4_19",
    "context": "An airline has four flights from New York to Sarasota—flights 1, 2, 3, and 4. On each flight there is exactly one pilot and exactly one co-pilot. The pilots are Fazio, Germond, Kyle, and Lopez; the co-pilots are Reich, Simon, Taylor, and Umlas. Each pilot and co-pilot is assigned to exactly one flight. The flights take off in numerical order. Fazio's flight takes off before Germond's, and at least one other flight takes off between their flights. Kyle is assigned to flight 2. Lopez is assigned to the same flight as Umlas.",
    "question": "Which one of the following pilot and co-pilot teams could be assigned to flight 1?",
    "answer": "A",
    "options": [
      "A) Fazio and Reich",
      "B) Fazio and Umlas",
      "C) Germond and Reich",
      "D) Germond and Umlas",
      "E) Lopez and Taylor"
    ],
    "raw_logic_programs": [
      "# Declarations\nflights = EnumSort([1, 2, 3, 4])\npilots = EnumSort([Fazio, Germond, Kyle, Lopez])\nco_pilots = EnumSort([Reich, Simon, Taylor, Umlas])\npilot = Function([flights] -> [pilots])\nco_pilot = Function([flights] -> [co_pilots])\n\n# Constraints\nForAll([f:flights], And(pilot(f)!= pilot(f + 1), co_pilot(f)!= co_pilot(f + 1))) ::: Each pilot and co_pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= co_pilot(f), pilot(f)!= co_pilot(f + 1), pilot(f)!= co_pilot(f - 1), co_pilot(f)!= pilot(f + 1), co_pilot(f)!= pilot(f - 1), co_pilot(f)!= pilot(f + 2))) ::: Each pilot and co_pilot is assigned to exactly one flight\npilot(2) == Kyle ::: Kyle is assigned to flight 2\npilot(1) < pilot(2) ::: Fazio's flight takes off before Germond's\npilot(1) < pilot(3) ::: Fazio's flight takes off before Germond's\npilot(1) < pilot(4) ::: Fazio's flight takes off before Germond's\npilot(2) < pilot(3) ::: at least one other flight takes off between their flights\npilot(2) < pilot(4) ::: at least one other flight takes off between their flights\nco_pilot(2) == Umlas ::: Lopez is assigned to the same flight as Umlas\n\n# Options\nQuestion ::: Which one of the following pilot and co-pilot teams could be assigned to flight 1?\nis_valid(Exists([f:flights], And(pilot(f) == Fazio, co_pilot(f) == Reich)))) ::: (A)\nis_valid(Exists([f:flights], And(pilot(f) == Fazio, co_pilot(f) == Umlas)))) ::: (B)\nis_valid(Exists([f:flights], And(pilot(f) == Germond, co_pilot(f) == Reich)))) ::: (C)\nis_valid(Exists([f:flights], And(pilot(f) == Germond, co_pilot(f) == Umlas)))) ::: (D)"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_4_20",
    "context": "An airline has four flights from New York to Sarasota—flights 1, 2, 3, and 4. On each flight there is exactly one pilot and exactly one co-pilot. The pilots are Fazio, Germond, Kyle, and Lopez; the co-pilots are Reich, Simon, Taylor, and Umlas. Each pilot and co-pilot is assigned to exactly one flight. The flights take off in numerical order. Fazio's flight takes off before Germond's, and at least one other flight takes off between their flights. Kyle is assigned to flight 2. Lopez is assigned to the same flight as Umlas.",
    "question": "If Reich's flight is later than Umlas's, which one of the following statements cannot be true?",
    "answer": "C",
    "options": [
      "A) Fazio's flight is earlier than Simon's.",
      "B) Kyle's flight is earlier than Reich's.",
      "C) Kyle's flight is earlier than Taylor's.",
      "D) Simon's flight is earlier than Reich's.",
      "E) Taylor's flight is earlier than Kyle's."
    ],
    "raw_logic_programs": [
      "# Declarations\nflights = EnumSort([1, 2, 3, 4])\npilots = EnumSort([Fazio, Germond, Kyle, Lopez])\ncopilots = EnumSort([Reich, Simon, Taylor, Umlas])\npilot = Function([flights] -> [pilots])\ncopilot = Function([flights] -> [copilots])\n\n# Constraints\nForAll([f:flights], And(pilot(f)!= pilot(f + 1), copilot(f)!= copilot(f + 1))) ::: Each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= copilot(f), pilot(f)!= copilot(f + 1), copilot(f)!= pilot(f + 1))) ::: Each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= pilot(f + 1), copilot(f)!= copilot(f + 1))) ::: Each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= copilot(f), pilot(f)!= copilot(f + 1), copilot(f)!= pilot(f + 1))) ::: Each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= pilot(f + 1), copilot(f)!= copilot(f + 1))) ::: Each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= copilot(f), pilot(f)!= copilot(f + 1), copilot(f)!= pilot(f + 1))) ::: Each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= pilot(f + 1), copilot(f)!= copilot(f + 1))) ::: Each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= copilot(f), pilot(f)!= copilot(f + 1), copilot(f)!= pilot(f + 1))) ::: Each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= pilot(f + 1), copilot(f)!= copilot(f + 1))) ::: Each pilot and co-pilot is assigned to exactly one flight\nForAll([f:fl"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_4_21",
    "context": "An airline has four flights from New York to Sarasota—flights 1, 2, 3, and 4. On each flight there is exactly one pilot and exactly one co-pilot. The pilots are Fazio, Germond, Kyle, and Lopez; the co-pilots are Reich, Simon, Taylor, and Umlas. Each pilot and co-pilot is assigned to exactly one flight. The flights take off in numerical order. Fazio's flight takes off before Germond's, and at least one other flight takes off between their flights. Kyle is assigned to flight 2. Lopez is assigned to the same flight as Umlas.",
    "question": "If Lopez's flight is earlier than Germond's, which one of the following statements could be false?",
    "answer": "D",
    "options": [
      "A) Fazio's flight is earlier than Umlas's.",
      "B) Germond is assigned to flight 4.",
      "C) Either Reich's or Taylor's flight is earlier than Umlas's.",
      "D) Simon's flight is earlier than Umlas's.",
      "E) Umlas is assigned to flight 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nflights = EnumSort([1, 2, 3, 4])\npilots = EnumSort([Fazio, Germond, Kyle, Lopez])\ncopilots = EnumSort([Reich, Simon, Taylor, Umlas])\nassigned = Function([flights, pilots, copilots] -> [bool])\n\n# Constraints\nForAll([f:flights], Count([p:pilots], assigned(f, p)) == 1) ::: each pilot is assigned to exactly one flight\nForAll([f:flights], Count([c:copilots], assigned(f, c)) == 1) ::: each co-pilot is assigned to exactly one flight\nForAll([f:flights], Count([p:pilots, c:copilots], assigned(f, p) && assigned(f, c)) == 1) ::: each flight has exactly one pilot and exactly one co-pilot\nForAll([f:flights], f < f + 1) ::: flights take off in numerical order\nAnd(assigned(f, Fazio), assigned(f + 1, Germond)) ::: Fazio's flight takes off before Germond's\nAnd(assigned(f, Fazio), assigned(f + 2, Germond)) ::: at least one other flight takes off between their flights\nassigned(2, Kyle) ::: Kyle is assigned to flight 2\nassigned(f, Lopez) && assigned(f, Umlas) ::: Lopez is assigned to the same flight as Umlas\n\n# Options\nQuestion ::: If Lopez's flight is earlier than Germond's, which one of the following statements could be false?\nis_exception(is_sat(assigned(f, Fazio) && assigned(f + 1, Umlas))) ::: (A)\nis_exception(is_sat(assigned(4, Germond))) ::: (B)\nis_exception(Or(assigned(f, Reich) && assigned(f + 1, Umlas), assigned(f, Taylor) && assigned(f + 1, Umlas))) ::: (C)\nis_exception(is_sat(assigned(f, Simon) && assigned(f + 1, Umlas))) ::: (D)\nis_exception(is_sat(assigned(3, Umlas))) ::: (E)\n------\nProblem:\nA company has four departments—A, B, C, and D—and each department has four employees—E, F, G, and H. Each employee is assigned to exactly one department. The following conditions apply: E is assigned to department A. F is assigned to department B. G is assigned to department C. H is assigned to department D.\nQuestion:\nWhich one of the following must be true"
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_4_22",
    "context": "An airline has four flights from New York to Sarasota—flights 1, 2, 3, and 4. On each flight there is exactly one pilot and exactly one co-pilot. The pilots are Fazio, Germond, Kyle, and Lopez; the co-pilots are Reich, Simon, Taylor, and Umlas. Each pilot and co-pilot is assigned to exactly one flight. The flights take off in numerical order. Fazio's flight takes off before Germond's, and at least one other flight takes off between their flights. Kyle is assigned to flight 2. Lopez is assigned to the same flight as Umlas.",
    "question": "What is the maximum possible number of different pilot and co-pilot teams, any one of which could be assigned to flight 4?",
    "answer": "C",
    "options": [
      "A) 2",
      "B) 3",
      "C) 4",
      "D) 5",
      "E) 6"
    ],
    "raw_logic_programs": [
      "# Declarations\nflights = EnumSort([1, 2, 3, 4])\npilots = EnumSort([Fazio, Germond, Kyle, Lopez])\ncopilots = EnumSort([Reich, Simon, Taylor, Umlas])\npilot = Function([flights] -> [pilots])\ncopilot = Function([flights] -> [copilots])\n\n# Constraints\nForAll([f:flights], And(pilot(f)!= pilot(f + 1), copilot(f)!= copilot(f + 1))) ::: each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= copilot(f), copilot(f)!= pilot(f))) ::: each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= pilot(f + 1), copilot(f)!= copilot(f + 1))) ::: each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= copilot(f + 1), copilot(f)!= pilot(f + 1))) ::: each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= copilot(f), copilot(f)!= pilot(f))) ::: each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= copilot(f + 1), copilot(f)!= pilot(f + 1))) ::: each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= copilot(f), copilot(f)!= pilot(f))) ::: each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= copilot(f + 1), copilot(f)!= pilot(f + 1))) ::: each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= copilot(f), copilot(f)!= pilot(f))) ::: each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!= copilot(f + 1), copilot(f)!= pilot(f + 1))) ::: each pilot and co-pilot is assigned to exactly one flight\nForAll([f:flights], And(pilot(f)!="
    ]
  },
  {
    "id": "ar_lsat_200112_4-G_4_23",
    "context": "An airline has four flights from New York to Sarasota—flights 1, 2, 3, and 4. On each flight there is exactly one pilot and exactly one co-pilot. The pilots are Fazio, Germond, Kyle, and Lopez; the co-pilots are Reich, Simon, Taylor, and Umlas. Each pilot and co-pilot is assigned to exactly one flight. The flights take off in numerical order. Fazio's flight takes off before Germond's, and at least one other flight takes off between their flights. Kyle is assigned to flight 2. Lopez is assigned to the same flight as Umlas.",
    "question": "If Simon's flight is later than Lopez's, then which one of the following statements could be false?",
    "answer": "D",
    "options": [
      "A) Germond's flight is later than Reich's.",
      "B) Germond's flight is later than Taylor's.",
      "C) Lopez's flight is later than Taylor's.",
      "D) Taylor's flight is later than Reich's.",
      "E) Umlas's flight is later than Reich's."
    ],
    "raw_logic_programs": [
      "# Declarations\nflights = EnumSort([1, 2, 3, 4])\npilots = EnumSort([Fazio, Germond, Kyle, Lopez])\ncopilots = EnumSort([Reich, Simon, Taylor, Umlas])\nassigned = Function([flights, pilots, copilots] -> [bool])\n\n# Constraints\nForAll([f:flights], Count([p:pilots], assigned(f, p, _)) == 1) ::: each pilot is assigned to exactly one flight\nForAll([f:flights], Count([c:copilots], assigned(f, _, c)) == 1) ::: each co-pilot is assigned to exactly one flight\nForAll([f:flights], Count([p:pilots, c:copilots], assigned(f, p, c)) == 1) ::: each flight has exactly one pilot and exactly one co-pilot\nForAll([f:flights], f < f + 1) ::: flights take off in numerical order\nAnd(assigned(f, Fazio, _), assigned(f + 1, Germond, _)) ::: Fazio's flight takes off before Germond's\nAnd(assigned(f, Fazio, _), assigned(f + 1, Germond, _), Count([f:flights], f < f + 1) > 1) ::: at least one other flight takes off between their flights\nassigned(2, Kyle, _) ::: Kyle is assigned to flight 2\nassigned(f, Lopez, Umlas) ::: Lopez is assigned to the same flight as Umlas\n\n# Options\nQuestion ::: If Simon's flight is later than Lopez's, then which one of the following statements could be false?\nis_exception(is_sat(assigned(f, Germond, Reich) && f > f + 1)) ::: (A)\nis_exception(is_sat(assigned(f, Germond, Taylor) && f > f + 1)) ::: (B)\nis_exception(is_sat(assigned(f, Lopez, Taylor) && f > f + 1)) ::: (C)\nis_exception(is_sat(assigned(f, Taylor, Reich) && f > f + 1)) ::: (D)\nis_exception(is_sat(assigned(f, Umlas, Reich) && f > f + 1)) ::: (E)\n------\nProblem:\nA company has four departments—A, B, C, and D—and each department has four employees—E, F, G, and H. Each employee is assigned to exactly one department. The following conditions apply: E is assigned to department A. F is assigned to department B. G is assigned to department C."
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_1_1",
    "context": "A school has exactly four dormitories that are to be fully occupied—Richards, Tuscarora, Veblen, and Wisteria—each consisting entirely of a North wing and a South wing. The following rules govern assignment of students to dormitory wings: Each wing is assigned only male students or only female students. Exactly three wings have males assigned to them. Richards North and Tuscarora North are assigned females. If a dormitory has males assigned to one of its wings, then its other wing is assigned females. If males are assigned to Veblen South, then Wisteria North is assigned males.",
    "question": "If females are assigned to Veblen South and Veblen North, then which one of the following could be two other wings that are also assigned females?",
    "answer": "D",
    "options": [
      "A) Richards North and Tuscarora South",
      "B) Richards South and Wisteria South",
      "C) Richards South and Tuscarora North",
      "D) Tuscarora North and Wisteria South",
      "E) Tuscarora South and Wisteria South"
    ],
    "raw_logic_programs": [
      "# Declarations\ndormitories = EnumSort([Richards, Tuscarora, Veblen, Wisteria])\nwings = EnumSort([North, South])\ngender = EnumSort([male, female])\nassigned = Function([dormitories, wings] -> [gender])\n\n# Constraints\nForAll([d:dormitories], And(assigned(d, North) == assigned(d, South), assigned(d, North)!= assigned(d, South))) ::: Each wing is assigned only male students or only female students\nCount([d:dormitories], And(assigned(d, North) == male, assigned(d, South) == male)) == 3 ::: Exactly three wings have males assigned to them\nassigned(Richards, North) == female ::: Richards North and Tuscarora North are assigned females\nForAll([d:dormitories], Implies(And(assigned(d, North) == male, assigned(d, South) == male), assigned(d, North) == assigned(d, South))) ::: If a dormitory has males assigned to one of its wings, then its other wing is assigned females\nImplies(assigned(Veblen, South) == male, assigned(Wisteria, North) == male) ::: If males are assigned to Veblen South, then Wisteria North is assigned males\nassigned(Veblen, South) == female ::: females are assigned to Veblen South and Veblen North\n\n# Options\nQuestion ::: If females are assigned to Veblen South and Veblen North, then which one of the following could be two other wings that are also assigned females?\nis_exception(is_sat(And(assigned(Richards, North) == female, assigned(Tuscarora, South) == female))) ::: A) Richards North and Tuscarora South\nis_exception(is_sat(And(assigned(Richards, South) == female, assigned(Wisteria, South) == female))) ::: B) Richards South and Wisteria South\nis_exception(is_sat(And(assigned(Richards, South) == female, assigned(Tuscarora, North) == female))) ::: C) Richards South and Tuscarora North\nis_exception(is_sat(And(assigned(Tuscarora, North) == female, assigned(Wisteria, South) == female))) ::: D) Tuscarora North and Wisteria South\nis_exception(is_sat(And(assigned(Tuscarora, South) == female, assigned(Wisteria, South) == female))) ::: E) Tuscarora South and Wisteria South\n------\nProblem:\nA company has exactly four departments—A, B, C, and D—each of which has exactly three employees. The following conditions apply: The employees in department A are named F, G"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_1_2",
    "context": "A school has exactly four dormitories that are to be fully occupied—Richards, Tuscarora, Veblen, and Wisteria—each consisting entirely of a North wing and a South wing. The following rules govern assignment of students to dormitory wings: Each wing is assigned only male students or only female students. Exactly three wings have males assigned to them. Richards North and Tuscarora North are assigned females. If a dormitory has males assigned to one of its wings, then its other wing is assigned females. If males are assigned to Veblen South, then Wisteria North is assigned males.",
    "question": "It CANNOT be true that females are assigned to both",
    "answer": "B",
    "options": [
      "A) Richards South and Wisteria South",
      "B) Richards South and Tuscarora South",
      "C) Richards South and Veblen North",
      "D) Tuscarora South and Wisteria South",
      "E) Veblen North and Wisteria South"
    ],
    "raw_logic_programs": [
      "# Declarations\ndormitories = EnumSort([Richards, Tuscarora, Veblen, Wisteria])\nwings = EnumSort([North, South])\ngender = EnumSort([male, female])\nassigned = Function([dormitories, wings, gender] -> [bool])\n\n# Constraints\nForAll([d:dormitories], And(assigned(d, North, male), assigned(d, South, female)) | And(assigned(d, North, female), assigned(d, South, male))) ::: Each wing is assigned only male students or only female students\nCount([d:dormitories], And(assigned(d, North, male), assigned(d, South, male))) == 3 ::: Exactly three wings have males assigned to them\nassigned(Richards, North, female) ::: Richards North and Tuscarora North are assigned females\nForAll([d:dormitories], Implies(assigned(d, North, male), assigned(d, South, female))) ::: If a dormitory has males assigned to one of its wings, then its other wing is assigned females\nImplies(assigned(Veblen, South, male), assigned(Wisteria, North, male)) ::: If males are assigned to Veblen South, then Wisteria North is assigned males\n\n# Options\nQuestion ::: It CANNOT be true that females are assigned to both\nis_exception(is_sat(And(assigned(Richards, South, female), assigned(Wisteria, South, female)))) ::: A) Richards South and Wisteria South\nis_exception(is_sat(And(assigned(Richards, South, female), assigned(Tuscarora, South, female)))) ::: B) Richards South and Tuscarora South\nis_exception(is_sat(And(assigned(Richards, South, female), assigned(Veblen, North, female)))) ::: C) Richards South and Veblen North\nis_exception(is_sat(And(assigned(Tuscarora, South, female), assigned(Wisteria, South, female)))) ::: D) Tuscarora South and Wisteria South\nis_exception(is_sat(And(assigned(Veblen, North, female), assigned(Wisteria, South, female)))) ::: E) Veblen North and Wisteria South\n------\nProblem:\nA company has exactly four departments—A, B, C, and D—each of which has exactly three employees. The following conditions apply: The employees in department A are named F, G, and H. The employees in department B are named I, J, and K. The employees in department C are named L, M, and N. The employees in department D are named O, P, and Q. The employees are assigned to work on exactly three projects—1, 2, and 3—each of which is"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_1_3",
    "context": "A school has exactly four dormitories that are to be fully occupied—Richards, Tuscarora, Veblen, and Wisteria—each consisting entirely of a North wing and a South wing. The following rules govern assignment of students to dormitory wings: Each wing is assigned only male students or only female students. Exactly three wings have males assigned to them. Richards North and Tuscarora North are assigned females. If a dormitory has males assigned to one of its wings, then its other wing is assigned females. If males are assigned to Veblen South, then Wisteria North is assigned males.",
    "question": "If Wisteria North is assigned females, then females must also be assigned to which one of the following?",
    "answer": "D",
    "options": [
      "A) Richards South",
      "B) Wisteria South",
      "C) Tuscarora South",
      "D) Veblen South",
      "E) Veblen North"
    ],
    "raw_logic_programs": [
      "# Declarations\ndormitories = EnumSort([Richards, Tuscarora, Veblen, Wisteria])\nwings = EnumSort([North, South])\ngender = EnumSort([male, female])\nassigned = Function([dormitories, wings, gender] -> [bool])\n\n# Constraints\nForAll([d:dormitories], And(assigned(d, North, male), assigned(d, South, female)) | And(assigned(d, North, female), assigned(d, South, male))) ::: Each wing is assigned only male students or only female students\nCount([d:dormitories], And(assigned(d, North, male), assigned(d, South, male))) == 3 ::: Exactly three wings have males assigned to them\nassigned(Richards, North, female) ::: Richards North and Tuscarora North are assigned females\nForAll([d:dormitories], Implies(And(assigned(d, North, male), assigned(d, South, male)), assigned(d, North, female))) ::: If a dormitory has males assigned to one of its wings, then its other wing is assigned females\nImplies(assigned(Veblen, South, male), assigned(Wisteria, North, male)) ::: If males are assigned to Veblen South, then Wisteria North is assigned males\n\n# Options\nQuestion ::: If Wisteria North is assigned females, then females must also be assigned to which one of the following?\nis_sat(ForAll([d:dormitories], And(assigned(d, North, female), assigned(d, South, female)))) ::: A) Richards South\nis_sat(ForAll([d:dormitories], And(assigned(d, North, female), assigned(d, South, female)))) ::: B) Wisteria South\nis_sat(ForAll([d:dormitories], And(assigned(d, North, female), assigned(d, South, female)))) ::: C) Tuscarora South\nis_sat(ForAll([d:dormitories], And(assigned(d, North, female), assigned(d, South, female)))) ::: D) Veblen South\nis_sat(ForAll([d:dormitories], And(assigned(d, North, female), assigned(d, South, female)))) ::: E) Veblen North\n------\nProblem:\nA company has exactly four departments—A, B, C, and D—each of which has exactly three employees. The following conditions apply: The employees in department A are named F, G, and H. The employees in department B are named I, J, and K. The employees in department C are named L, M, and N. The employees in department D are named O, P, and Q. The employees are assigned to work on exactly three projects—1, 2, and 3—each of"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_1_4",
    "context": "A school has exactly four dormitories that are to be fully occupied—Richards, Tuscarora, Veblen, and Wisteria—each consisting entirely of a North wing and a South wing. The following rules govern assignment of students to dormitory wings: Each wing is assigned only male students or only female students. Exactly three wings have males assigned to them. Richards North and Tuscarora North are assigned females. If a dormitory has males assigned to one of its wings, then its other wing is assigned females. If males are assigned to Veblen South, then Wisteria North is assigned males.",
    "question": "If males are assigned to Veblen South, which one of the following is a complete and accurate list of the wings that CANNOT be assigned males?",
    "answer": "D",
    "options": [
      "A) Richards North, Tuscarora North",
      "B) Richards North, Tuscarora North, Veblen North",
      "C) Richards North, Tuscarora North, Wisteria South",
      "D) Richards North, Tuscarora North, Veblen North, Wisteria South",
      "E) Richards North, Richards South, Tuscarora North, Veblen North, Wisteria South"
    ],
    "raw_logic_programs": [
      "# Declarations\ndormitories = EnumSort([Richards, Tuscarora, Veblen, Wisteria])\nwings = EnumSort([North, South])\nassigns = Function([dormitories, wings] -> [bool])\n\n# Constraints\nForAll([d:dormitories], Count([w:wings], assigns(d, w)) == 2) ::: each wing is assigned only male students or only female students\nAnd(assigns(Richards, North), assigns(Tuscarora, North)) ::: Exactly three wings have males assigned to them\nAnd(assigns(Richards, North), assigns(Tuscarora, North)) ::: Richards North and Tuscarora North are assigned females\nAnd(assigns(d:dormitories, North), assigns(d, South)) ::: If a dormitory has males assigned to one of its wings, then its other wing is assigned females\nAnd(assigns(Veblen, South), assigns(Wisteria, North)) ::: If males are assigned to Veblen South, then Wisteria North is assigned males\n\n# Options\nQuestion ::: If males are assigned to Veblen South, which one of the following is a complete and accurate list of the wings that CANNOT be assigned males?\nis_exception(is_sat(assigns(Richards, North) && assigns(Tuscarora, North))) ::: A) Richards North, Tuscarora North\nis_exception(is_sat(assigns(Richards, North) && assigns(Tuscarora, North) && assigns(Veblen, North))) ::: B) Richards North, Tuscarora North, Veblen North\nis_exception(is_sat(assigns(Richards, North) && assigns(Tuscarora, North) && assigns(Wisteria, South))) ::: C) Richards North, Tuscarora North, Wisteria South\nis_exception(is_sat(assigns(Richards, North) && assigns(Tuscarora, North) && assigns(Veblen, North) && assigns(Wisteria, South))) ::: D) Richards North, Tuscarora North, Veblen North, Wisteria South\nis_exception(is_sat(assigns(Richards, North) && assigns(Richards, South) && assigns(Tuscarora, North) && assigns(Veblen, North) && assigns(Wisteria, South))) ::: E) Richards North, Richards South, Tuscarora North, Veblen North, Wisteria South\n------\nProblem:\nA company has exactly four departments—A, B, C, and D—each of which has exactly three employees. The following conditions apply: The employees in department A are named Al, Bob, and Carl. The employees in department B are named Bob"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_1_5",
    "context": "A school has exactly four dormitories that are to be fully occupied—Richards, Tuscarora, Veblen, and Wisteria—each consisting entirely of a North wing and a South wing. The following rules govern assignment of students to dormitory wings: Each wing is assigned only male students or only female students. Exactly three wings have males assigned to them. Richards North and Tuscarora North are assigned females. If a dormitory has males assigned to one of its wings, then its other wing is assigned females. If males are assigned to Veblen South, then Wisteria North is assigned males.",
    "question": "If Tuscarora South is assigned females, then it could be true that females are assigned to both",
    "answer": "D",
    "options": [
      "A) Richards South and Wisteria North",
      "B) Richards South and Wisteria South",
      "C) Veblen North and Wisteria North",
      "D) Veblen South and Wisteria South",
      "E) Veblen South and Veblen North"
    ],
    "raw_logic_programs": [
      "# Declarations\ndormitories = EnumSort([Richards, Tuscarora, Veblen, Wisteria])\nwings = EnumSort([North, South])\ngender = EnumSort([male, female])\nassigned = Function([dormitories, wings, gender] -> [bool])\n\n# Constraints\nForAll([d:dormitories], And(assigned(d, North, male), assigned(d, South, female)) | And(assigned(d, North, female), assigned(d, South, male))) ::: Each wing is assigned only male students or only female students\nCount([d:dormitories], And(assigned(d, North, male), assigned(d, South, male))) == 3 ::: Exactly three wings have males assigned to them\nassigned(Richards, North, female) ::: Richards North and Tuscarora North are assigned females\nForAll([d:dormitories], Implies(assigned(d, North, male), assigned(d, South, female))) ::: If a dormitory has males assigned to one of its wings, then its other wing is assigned females\nImplies(assigned(Veblen, South, male), assigned(Wisteria, North, male)) ::: If males are assigned to Veblen South, then Wisteria North is assigned males\nassigned(Tuscarora, South, female) ::: Tuscarora South is assigned females\n\n# Options\nQuestion ::: If Tuscarora South is assigned females, then it could be true that females are assigned to both\nis_valid(And(assigned(Richards, South, female), assigned(Wisteria, North, female))) ::: A) Richards South and Wisteria North\nis_valid(And(assigned(Richards, South, female), assigned(Wisteria, South, female))) ::: B) Richards South and Wisteria South\nis_valid(And(assigned(Veblen, North, female), assigned(Wisteria, North, female))) ::: C) Veblen North and Wisteria North\nis_valid(And(assigned(Veblen, South, female), assigned(Wisteria, South, female))) ::: D) Veblen South and Wisteria South\nis_valid(And(assigned(Veblen, South, female), assigned(Veblen, North, female))) ::: E) Veblen South and Veblen North\n------"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_2_6",
    "context": "In a single day, exactly seven trucks—S, T, U, W, X, Y, and Z—are the only arrivals at a warehouse. No truck arrives at the same time as any other truck, and no truck arrives more than once that day. Each truck is either green or red (but not both). The following conditions apply: No two consecutive arrivals are red. Y arrives at some time before both T and W. Exactly two of the trucks that arrive before Y are red. S is the sixth arrival. Z arrives at some time before U.",
    "question": "Which one of the following could be the order, from first to last, in which the trucks arrive?",
    "answer": "A",
    "options": [
      "A) X, Z, U, Y, W, S, T",
      "B) X, Y, Z, U, W, S, T",
      "C) Z, W, U, T, Y, S, X",
      "D) Z, U, T, Y, W, S, X",
      "E) U, Z, Y, T, S, W, X"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrucks = EnumSort([S, T, U, W, X, Y, Z])\ncolors = EnumSort([green, red])\narrives = Function([trucks, colors] -> [int])\n\n# Constraints\nDistinct([t:trucks], arrives(t, _)) ::: no truck arrives at the same time as any other truck\nDistinct([c:colors], arrives(_, c)) ::: no truck arrives more than once that day\nForAll([t:trucks], And(1 <= arrives(t, _), arrives(t, _) <= 7)) ::: each truck is either green or red\nAnd(arrives(Y, _) < arrives(T, _), arrives(Y, _) < arrives(W, _)) ::: Y arrives at some time before both T and W\nCount([t:trucks], And(arrives(t, red), arrives(t, _) < arrives(Y, _))) == 2 ::: exactly two of the trucks that arrive before Y are red\narrives(S, _) == 6 ::: S is the sixth arrival\nAnd(arrives(Z, _) < arrives(U, _), arrives(Z, _) < arrives(W, _)) ::: Z arrives at some time before U\n\n# Options\nQuestion ::: Which one of the following could be the order, from first to last, in which the trucks arrive?\nis_sat(ForAll([t:trucks], arrives(t, _) == 7 - t)) ::: (A)\nis_sat(ForAll([t:trucks], arrives(t, _) == 7 - t)) ::: (B)\nis_sat(ForAll([t:trucks], arrives(t, _) == 7 - t)) ::: (C)\nis_sat(ForAll([t:trucks], arrives(t, _) == 7 - t)) ::: (D)\nis_sat(ForAll([t:trucks], arrives(t, _) == 7 - t)) ::: (E)\n------\nProblem:\nIn a certain city, there are exactly six parks—A, B, C, D, E, and F—and exactly six streets—G, H, I, J, K, and L. Each park"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_2_7",
    "context": "In a single day, exactly seven trucks—S, T, U, W, X, Y, and Z—are the only arrivals at a warehouse. No truck arrives at the same time as any other truck, and no truck arrives more than once that day. Each truck is either green or red (but not both). The following conditions apply: No two consecutive arrivals are red. Y arrives at some time before both T and W. Exactly two of the trucks that arrive before Y are red. S is the sixth arrival. Z arrives at some time before U.",
    "question": "For which one of the following pairs of trucks is it the case that they CANNOT both be red?",
    "answer": "B",
    "options": [
      "A) S and X",
      "B) T and S",
      "C) U and W",
      "D) W and T",
      "E) X and Z"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrucks = EnumSort([S, T, U, W, X, Y, Z])\ncolors = EnumSort([green, red])\narrives = Function([trucks, trucks] -> [bool])\n\n# Constraints\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: no truck arrives at the same time as any other truck\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: no truck arrives more than once that day\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nDistinct([t:trucks], arrives(t, t)) ::: no two consecutive arrivals are red\narrives(Y, T) < arrives(Y, W) ::: Y arrives at some time before both T and W\nCount([t:trucks], And(arrives(t, Y) < arrives(t, Y), arrives(t, t) == red)) == 2 ::: exactly two of the trucks that arrive before Y are red\narrives(S, S) == 6 ::: S is the sixth arrival\narrives(Z, U) < arrives(U, U) ::: Z arrives at some time before U\n\n# Options\nQuestion ::: For which one of the following pairs of trucks is it the case that they CANNOT both be red?\nis_exception(is_sat(arrives(S, S) == red, arrives(X, X) == red)) ::: (A)\nis_exception(is_sat(arrives(T, T) == red, arrives(S, S) == red)) ::: (B)\nis_exception(is_sat(arrives(U, U) == red, arrives(W, W) == red)) ::: (C)\nis_exception(is_sat(arrives(W, W) == red, arrives(T, T) == red)) ::: (D)\nis_exception(is_sat(arrives(X, X) == red, arrives(Z, Z) =="
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_2_8",
    "context": "In a single day, exactly seven trucks—S, T, U, W, X, Y, and Z—are the only arrivals at a warehouse. No truck arrives at the same time as any other truck, and no truck arrives more than once that day. Each truck is either green or red (but not both). The following conditions apply: No two consecutive arrivals are red. Y arrives at some time before both T and W. Exactly two of the trucks that arrive before Y are red. S is the sixth arrival. Z arrives at some time before U.",
    "question": "If X is the third arrival, then which one of the following trucks must be green?",
    "answer": "C",
    "options": [
      "A) S",
      "B) T",
      "C) U",
      "D) W",
      "E) Z"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrucks = EnumSort([S, T, U, W, X, Y, Z])\ncolors = EnumSort([green, red])\narrives = Function([trucks, int] -> [bool])\n\n# Constraints\nForAll([t:trucks], And(1 <= arrives(t, 1), arrives(t, 1) <= 7)) ::: no truck arrives at the same time as any other truck\nForAll([t:trucks], And(1 <= arrives(t, 2), arrives(t, 2) <= 7)) ::: no truck arrives more than once that day\nDistinct([t:trucks], arrives(t, 1)) ::: no two consecutive arrivals are red\nAnd(arrives(Y, 1) < arrives(T, 1), arrives(Y, 1) < arrives(W, 1)) ::: Y arrives at some time before both T and W\nCount([t:trucks], And(arrives(t, 1) < arrives(Y, 1), arrives(t, 2) == red)) == 2 ::: exactly two of the trucks that arrive before Y are red\narrives(S, 1) == 6 ::: S is the sixth arrival\nAnd(arrives(Z, 1) < arrives(U, 1), arrives(Z, 2) == red) ::: Z arrives at some time before U\n\n# Options\nQuestion ::: If X is the third arrival, then which one of the following trucks must be green?\nis_sat(And(arrives(X, 1) == 3, arrives(S, 2) == green)) ::: A) S\nis_sat(And(arrives(X, 1) == 3, arrives(T, 2) == green)) ::: B) T\nis_sat(And(arrives(X, 1) == 3, arrives(U, 2) == green)) ::: C) U\nis_sat(And(arrives(X, 1) == 3, arrives(W, 2) == green)) ::: D) W\nis_sat(And(arrives(X, 1) == 3, arrives(Z, 2"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_2_9",
    "context": "In a single day, exactly seven trucks—S, T, U, W, X, Y, and Z—are the only arrivals at a warehouse. No truck arrives at the same time as any other truck, and no truck arrives more than once that day. Each truck is either green or red (but not both). The following conditions apply: No two consecutive arrivals are red. Y arrives at some time before both T and W. Exactly two of the trucks that arrive before Y are red. S is the sixth arrival. Z arrives at some time before U.",
    "question": "If exactly three of the trucks are green, then which one of the following trucks must be green?",
    "answer": "A",
    "options": [
      "A) S",
      "B) T",
      "C) U",
      "D) W",
      "E) Z"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrucks = EnumSort([S, T, U, W, X, Y, Z])\ncolors = EnumSort([green, red])\narrives = Function([trucks, trucks] -> [bool])\n\n# Constraints\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: no truck arrives at the same time as any other truck\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: no truck arrives more than once that day\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nDistinct([t:trucks], arrives(t, t)) ::: no two consecutive arrivals are red\narrives(Y, T) < arrives(Y, W) ::: Y arrives at some time before both T and W\nCount([t:trucks], And(arrives(t, Y) < arrives(t, Y), arrives(t, t) == red)) == 2 ::: exactly two of the trucks that arrive before Y are red\narrives(S, S) == 6 ::: S is the sixth arrival\narrives(Z, U) < arrives(U, U) ::: Z arrives at some time before U\n\n# Options\nQuestion ::: If exactly three of the trucks are green, then which one of the following trucks must be green?\nis_valid(Exists([t:trucks], arrives(t, t) == green)) ::: A) S\nis_valid(Exists([t:trucks], arrives(t, t) == green)) ::: B) T\nis_valid(Exists([t:trucks], arrives(t, t) == green)) ::: C) U\nis_valid(Exists([t:trucks], arrives(t, t) == green)) ::: D) W\nis_valid(Exists([t:trucks], arrives(t, t) == green)) ::: E) Z\n------\nProblem:\nIn a certain city, there are exactly six streets—A, B, C, D, E, and F—that run parallel"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_2_10",
    "context": "In a single day, exactly seven trucks—S, T, U, W, X, Y, and Z—are the only arrivals at a warehouse. No truck arrives at the same time as any other truck, and no truck arrives more than once that day. Each truck is either green or red (but not both). The following conditions apply: No two consecutive arrivals are red. Y arrives at some time before both T and W. Exactly two of the trucks that arrive before Y are red. S is the sixth arrival. Z arrives at some time before U.",
    "question": "For exactly how many of the seven trucks can one determine exactly how many trucks arrived before it?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrucks = EnumSort([S, T, U, W, X, Y, Z])\ncolors = EnumSort([green, red])\narrives = Function([trucks, trucks] -> [bool])\n\n# Constraints\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: no truck arrives at the same time as any other truck\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: no truck arrives more than once that day\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t1, t2:trucks], Implies(arrives(t1, t2), Not(arrives(t2, t1)))) ::: no two consecutive arrivals are red\nForAll([t1, t2:trucks], Implies(arrives(t1, t2), Not(arrives(t2, t1)))) ::: no two consecutive arrivals are red\nForAll([t1, t2:trucks],"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_2_11",
    "context": "In a single day, exactly seven trucks—S, T, U, W, X, Y, and Z—are the only arrivals at a warehouse. No truck arrives at the same time as any other truck, and no truck arrives more than once that day. Each truck is either green or red (but not both). The following conditions apply: No two consecutive arrivals are red. Y arrives at some time before both T and W. Exactly two of the trucks that arrive before Y are red. S is the sixth arrival. Z arrives at some time before U.",
    "question": "Which one of the following pairs of trucks CANNOT arrive consecutively at the warehouse?",
    "answer": "E",
    "options": [
      "A) U and Y",
      "B) X and Y",
      "C) Y and T",
      "D) Y and W",
      "E) Y and Z"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrucks = EnumSort([S, T, U, W, X, Y, Z])\ncolors = EnumSort([green, red])\narrives = Function([trucks, trucks] -> [bool])\n\n# Constraints\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: no truck arrives at the same time as any other truck\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: no truck arrives more than once that day\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t, t) <= 7)) ::: each truck is either green or red\nForAll([t:trucks], And(1 <= arrives(t, t), arrives(t,"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_3_12",
    "context": "A total of six books occupies three small shelves—one on the first shelf, two on the second shelf, and three on the third shelf. Two of the books are grammars—one of Farsi, the other of Hausa. Two others are linguistics monographs—one on phonology, the other on semantics. The remaining two books are novels—one by Vonnegut, the other by Woolf. The books' arrangement is consistent with the following: There is at least one novel on the same shelf as the Farsi grammar. The monographs are not both on the same shelf. The Vonnegut novel is not on the same shelf as either monograph.",
    "question": "Which one of the following could be an accurate matching of the bookshelves to the books on each of them?",
    "answer": "B",
    "options": [
      "A) first shelf: Hausa grammar second shelf: semantics monograph, Vonnegut novel third shelf: Farsi grammar, phonology monograph, Woolf novel",
      "B) first shelf: semantics monograph second shelf: Farsi grammar, Vonnegut novel third shelf: Hausa grammar, phonology monograph, Woolf novel",
      "C) first shelf: Vonnegut novel second shelf: phonology monograph, Farsi grammar third shelf: Hausa grammar, semantics monograph, Woolf novel",
      "D) first shelf: Woolf novel second shelf: phonology and semantics monographs third shelf: Farsi and Hausa grammars, Vonnegut novel",
      "E) first shelf: Woolf novel second shelf: Farsi grammar, Vonnegut novel third shelf: Hausa grammar, phonology and semantics monographs"
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([Farsi_grammar, Hausa_grammar, phonology_monograph, semantics_monograph, Vonnegut_novel, Woolf_novel])\nshelves = EnumSort([first_shelf, second_shelf, third_shelf])\non_shelf = Function([books, shelves] -> [bool])\n\n# Constraints\nForAll([b:books], Count([s:shelves], on_shelf(b, s)) == 1) ::: A total of six books occupies three small shelves\nAnd(on_shelf(Farsi_grammar, first_shelf), on_shelf(Vonnegut_novel, first_shelf)) ::: There is at least one novel on the same shelf as the Farsi grammar\nForAll([b1:books, b2:books], Implies(b1!= b2, And(on_shelf(b1, s1), on_shelf(b2, s2)) => s1!= s2)) ::: The monographs are not both on the same shelf\nForAll([b:books], Implies(b!= Vonnegut_novel, And(on_shelf(b, s1), on_shelf(Vonnegut_novel, s2)) => s1!= s2)) ::: The Vonnegut novel is not on the same shelf as either monograph\n\n# Options\nQuestion ::: Which one of the following could be an accurate matching of the bookshelves to the books on each of them?\nis_sat(And(on_shelf(Hausa_grammar, first_shelf), on_shelf(semantics_monograph, second_shelf), on_shelf(Vonnegut_novel, second_shelf), on_shelf(Farsi_grammar, third_shelf), on_shelf(phonology_monograph, third_shelf), on_shelf(Woolf_novel, third_shelf))) ::: A)\nis_sat(And(on_shelf(semantics_monograph, first_shelf), on_shelf(Farsi_grammar, second_shelf), on_shelf(Vonnegut_novel, second_shelf), on_shelf(Hausa_grammar, third_shelf), on"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_3_13",
    "context": "A total of six books occupies three small shelves—one on the first shelf, two on the second shelf, and three on the third shelf. Two of the books are grammars—one of Farsi, the other of Hausa. Two others are linguistics monographs—one on phonology, the other on semantics. The remaining two books are novels—one by Vonnegut, the other by Woolf. The books' arrangement is consistent with the following: There is at least one novel on the same shelf as the Farsi grammar. The monographs are not both on the same shelf. The Vonnegut novel is not on the same shelf as either monograph.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "A",
    "options": [
      "A) A grammar is on the first shelf.",
      "B) A linguistics monograph is on the same shelf as the Hausa grammar.",
      "C) A novel is on the first shelf.",
      "D) The novels are on the same shelf as each other.",
      "E) Neither linguistics monograph is on the first shelf."
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([Farsi, Hausa, phonology, semantics, Vonnegut, Woolf])\nshelves = EnumSort([first, second, third])\non_shelf = Function([books, shelves] -> [bool])\n\n# Constraints\nForAll([b:books], Count([s:shelves], on_shelf(b, s)) == 1) ::: A total of six books occupies three small shelves\nAnd(on_shelf(Farsi, s), Count([b:books], And(b!= Farsi, on_shelf(b, s))) >= 1) ::: There is at least one novel on the same shelf as the Farsi grammar\nForAll([b:books], Implies(on_shelf(b, s), Not(on_shelf(b, s1)))) ::: The monographs are not both on the same shelf\nForAll([b:books], Implies(on_shelf(Vonnegut, s), Not(on_shelf(b, s)))) ::: The Vonnegut novel is not on the same shelf as either monograph\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(on_shelf(Farsi, first))) ::: A) A grammar is on the first shelf.\nis_exception(is_sat(on_shelf(Hausa, s) && on_shelf(phonology, s))) ::: B) A linguistics monograph is on the same shelf as the Hausa grammar.\nis_exception(is_sat(on_shelf(Vonnegut, first))) ::: C) A novel is on the first shelf.\nis_exception(is_sat(on_shelf(Vonnegut, s) && on_shelf(Woolf, s))) ::: D) The novels are on the same shelf as each other.\nis_exception(is_sat(Not(on_shelf(phonology, first)) && Not(on_shelf(semantics, first)))) ::: E) Neither linguistics monograph is on the first shelf.\n------\nProblem:\nA total of six books occupies three small shelves—one on the first shelf, two on the second shelf, and three on the third shelf. Two of the books are"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_3_14",
    "context": "A total of six books occupies three small shelves—one on the first shelf, two on the second shelf, and three on the third shelf. Two of the books are grammars—one of Farsi, the other of Hausa. Two others are linguistics monographs—one on phonology, the other on semantics. The remaining two books are novels—one by Vonnegut, the other by Woolf. The books' arrangement is consistent with the following: There is at least one novel on the same shelf as the Farsi grammar. The monographs are not both on the same shelf. The Vonnegut novel is not on the same shelf as either monograph.",
    "question": "Which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) A linguistics monograph and a grammar are on the second shelf.",
      "B) A novel and a grammar are on the second shelf.",
      "C) At least one linguistics monograph and at least one grammar are on the third shelf.",
      "D) At least one novel and at least one grammar are on the third shelf.",
      "E) At least one novel and at least one linguistics monograph are on the third shelf."
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([Farsi, Hausa, phonology, semantics, Vonnegut, Woolf])\nshelves = EnumSort([first, second, third])\non_shelf = Function([books, shelves] -> [bool])\n\n# Constraints\nForAll([b:books], Count([s:shelves], on_shelf(b, s)) == 1) ::: A total of six books occupies three small shelves\nAnd(on_shelf(Farsi, s), on_shelf(Vonnegut, s)) ::: There is at least one novel on the same shelf as the Farsi grammar\nAnd(on_shelf(phonology, s), on_shelf(semantics, s)) ::: The monographs are not both on the same shelf\nAnd(on_shelf(Vonnegut, s), Not(on_shelf(phonology, s))) ::: The Vonnegut novel is not on the same shelf as either monograph\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(And(on_shelf(phonology, second), on_shelf(Farsi, second))) ::: (A)\nis_valid(And(on_shelf(Vonnegut, second), on_shelf(Farsi, second))) ::: (B)\nis_valid(And(on_shelf(phonology, third), on_shelf(Farsi, third))) ::: (C)\nis_valid(And(on_shelf(Vonnegut, third), on_shelf(Farsi, third))) ::: (D)\nis_valid(And(on_shelf(phonology, third), on_shelf(Vonnegut, third))) ::: (E)\n------\nProblem:\nA total of six books occupies three small shelves—one on the first shelf, two on the second shelf, and three on the third shelf. Two of the books are grammars—one of Farsi, the other of Hausa. Two others are linguistics monographs—one on phonology, the other on semantics. The remaining two books are novels—one by Vonnegut, the other by Woolf. The books' arrangement is consistent with the following: There is at least one novel on the same shelf as the Farsi grammar. The monographs are not"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_3_15",
    "context": "A total of six books occupies three small shelves—one on the first shelf, two on the second shelf, and three on the third shelf. Two of the books are grammars—one of Farsi, the other of Hausa. Two others are linguistics monographs—one on phonology, the other on semantics. The remaining two books are novels—one by Vonnegut, the other by Woolf. The books' arrangement is consistent with the following: There is at least one novel on the same shelf as the Farsi grammar. The monographs are not both on the same shelf. The Vonnegut novel is not on the same shelf as either monograph.",
    "question": "If both grammars are on the same shelf, which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) The phonology monograph is on the third shelf.",
      "B) A novel is on the first shelf.",
      "C) Both novels are on the second shelf.",
      "D) The Farsi grammar is on the second shelf.",
      "E) The phonology monograph is on the first shelf."
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([Farsi, Hausa, phonology, semantics, Vonnegut, Woolf])\nshelves = EnumSort([first, second, third])\non_shelf = Function([books, shelves] -> [bool])\n\n# Constraints\nForAll([b:books], Count([s:shelves], on_shelf(b, s)) == 1) ::: A total of six books occupies three small shelves\nAnd(on_shelf(Farsi, first), on_shelf(Hausa, second), on_shelf(phonology, third), on_shelf(semantics, second), on_shelf(Vonnegut, third), on_shelf(Woolf, first)) ::: There is at least one novel on the same shelf as the Farsi grammar\nAnd(on_shelf(Farsi, first), on_shelf(Hausa, second), on_shelf(phonology, third), on_shelf(semantics, first), on_shelf(Vonnegut, third), on_shelf(Woolf, second)) ::: The monographs are not both on the same shelf\nAnd(on_shelf(Farsi, first), on_shelf(Hausa, second), on_shelf(phonology, first), on_shelf(semantics, third), on_shelf(Vonnegut, third), on_shelf(Woolf, second)) ::: The Vonnegut novel is not on the same shelf as either monograph\n\n# Options\nQuestion ::: If both grammars are on the same shelf, which one of the following could be true?\nis_exception(is_sat(on_shelf(phonology, third))) ::: A) The phonology monograph is on the third shelf.\nis_exception(is_sat(on_shelf(Vonnegut, first))) ::: B) A novel is on the first shelf.\nis_exception(is_sat(And(on_shelf(Vonnegut, second), on_shelf(Woolf, second)))) ::: C) Both novels are on the second shelf.\nis_exception(is_sat(on_shelf(Farsi, second))) ::: D) The Farsi grammar is on the second shelf.\nis_exception(is_sat(on_shelf(phonology, first))) ::: E) The phonology monograph is on the first shelf.\n------"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_3_16",
    "context": "A total of six books occupies three small shelves—one on the first shelf, two on the second shelf, and three on the third shelf. Two of the books are grammars—one of Farsi, the other of Hausa. Two others are linguistics monographs—one on phonology, the other on semantics. The remaining two books are novels—one by Vonnegut, the other by Woolf. The books' arrangement is consistent with the following: There is at least one novel on the same shelf as the Farsi grammar. The monographs are not both on the same shelf. The Vonnegut novel is not on the same shelf as either monograph.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) A linguistics monograph is on the first shelf.",
      "B) No more than one novel is on each shelf.",
      "C) The Farsi grammar is not on the same shelf as the Hausa grammar.",
      "D) The semantics monograph is not on the same shelf as the Woolf novel.",
      "E) The Woolf novel is not on the first shelf."
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([Farsi, Hausa, phonology, semantics, Vonnegut, Woolf])\nshelves = EnumSort([first, second, third])\non_shelf = Function([books, shelves] -> [bool])\n\n# Constraints\nForAll([b:books], Count([s:shelves], on_shelf(b, s)) == 1) ::: A total of six books occupies three small shelves\nAnd(on_shelf(Farsi, s), on_shelf(Vonnegut, s)) ::: There is at least one novel on the same shelf as the Farsi grammar\nForAll([m:monographs], Implies(on_shelf(m, s1), on_shelf(m, s2))) ::: The monographs are not both on the same shelf\nForAll([m:monographs], Implies(on_shelf(m, s), Not(on_shelf(Vonnegut, s)))) ::: The Vonnegut novel is not on the same shelf as either monograph\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([s:shelves], on_shelf(phonology, s))) ::: (A)\nis_valid(Exists([s:shelves], on_shelf(Vonnegut, s))) ::: (B)\nis_valid(Exists([s:shelves], on_shelf(Farsi, s))) ::: (C)\nis_valid(Exists([s:shelves], on_shelf(semantics, s))) ::: (D)\nis_valid(Exists([s:shelves], on_shelf(Woolf, s))) ::: (E)\n------\nProblem:\nA total of six books occupies three small shelves—one on the first shelf, two on the second shelf, and three on the third shelf. Two of the books are grammars—one of Farsi, the other of Hausa. Two others are linguistics monographs—one on phonology, the other on semantics. The remaining two books are novels—one by Vonnegut, the other by Woolf. The books' arrangement is consistent with the following: There is at least one novel on the same shelf as the Farsi grammar. The monographs are not both on the same shelf. The Vonnegut novel is not on the same shelf as either monograph.\nQuestion:\nWhich one of the following"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_3_17",
    "context": "A total of six books occupies three small shelves—one on the first shelf, two on the second shelf, and three on the third shelf. Two of the books are grammars—one of Farsi, the other of Hausa. Two others are linguistics monographs—one on phonology, the other on semantics. The remaining two books are novels—one by Vonnegut, the other by Woolf. The books' arrangement is consistent with the following: There is at least one novel on the same shelf as the Farsi grammar. The monographs are not both on the same shelf. The Vonnegut novel is not on the same shelf as either monograph.",
    "question": "If the Farsi grammar is not on the third shelf, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) The phonology monograph is on the second shelf.",
      "B) The Hausa grammar is on the second shelf.",
      "C) The semantics monograph is on the third shelf.",
      "D) The Vonnegut novel is on the third shelf.",
      "E) The Woolf novel is on the second shelf."
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([Farsi, Hausa, phonology, semantics, Vonnegut, Woolf])\nshelves = EnumSort([first, second, third])\non = Function([books, shelves] -> [bool])\n\n# Constraints\nForAll([b:books], Count([s:shelves], on(b, s)) == 1) ::: A total of six books occupies three small shelves\nAnd(on(Farsi, s), Count([b:books], And(b!= Farsi, on(b, s))) >= 1) ::: There is at least one novel on the same shelf as the Farsi grammar\nForAll([b:books], Implies(on(b, s), Not(on(b, s')))) ::: The monographs are not both on the same shelf\nForAll([b:books], Implies(on(b, s), Not(on(Vonnegut, s)))) ::: The Vonnegut novel is not on the same shelf as either monograph\n\n# Options\nQuestion ::: If the Farsi grammar is not on the third shelf, which one of the following could be true?\nis_valid(Exists([s:shelves], on(phonology, s))) ::: A) The phonology monograph is on the second shelf.\nis_valid(Exists([s:shelves], on(Hausa, s))) ::: B) The Hausa grammar is on the second shelf.\nis_valid(Exists([s:shelves], on(semantics, s))) ::: C) The semantics monograph is on the third shelf.\nis_valid(Exists([s:shelves], on(Vonnegut, s))) ::: D) The Vonnegut novel is on the third shelf.\nis_valid(Exists([s:shelves], on(Woolf, s))) ::: E) The Woolf novel is on the second shelf.\n------\nProblem:\nA total of six books occupies three small shelves—one on the first shelf, two on the second shelf, and three on the third shelf. Two of the books are grammars—one of Farsi, the other of Hausa. Two others are linguistics monographs—one on phonology, the other on semantics. The remaining two books are novels—one by Vonnegut, the other by Woolf. The books' arrangement is consistent with the following: There is at least one novel on the same shelf as the Farsi grammar."
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_3_18",
    "context": "A total of six books occupies three small shelves—one on the first shelf, two on the second shelf, and three on the third shelf. Two of the books are grammars—one of Farsi, the other of Hausa. Two others are linguistics monographs—one on phonology, the other on semantics. The remaining two books are novels—one by Vonnegut, the other by Woolf. The books' arrangement is consistent with the following: There is at least one novel on the same shelf as the Farsi grammar. The monographs are not both on the same shelf. The Vonnegut novel is not on the same shelf as either monograph.",
    "question": "If the Hausa grammar and the phonology monograph are on the same shelf, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The phonology monograph is on the third shelf.",
      "B) The Vonnegut novel is on the second shelf.",
      "C) The semantics monograph is on the second shelf.",
      "D) The semantics monograph is on the first shelf.",
      "E) The Woolf novel is on the third shelf."
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([Farsi, Hausa, phonology, semantics, Vonnegut, Woolf])\nshelves = EnumSort([first, second, third])\non_shelf = Function([books, shelves] -> [bool])\n\n# Constraints\nForAll([b:books], Count([s:shelves], on_shelf(b, s)) == 1) ::: A total of six books occupies three small shelves\nAnd(on_shelf(Farsi, s), on_shelf(Vonnegut, s)) ::: There is at least one novel on the same shelf as the Farsi grammar\nForAll([m:monographs], Implies(on_shelf(m, s), on_shelf(m, s'))) ::: The monographs are not both on the same shelf\nForAll([m:monographs], Implies(on_shelf(m, s), Not(on_shelf(Vonnegut, s)))) ::: The Vonnegut novel is not on the same shelf as either monograph\n\n# Options\nQuestion ::: If the Hausa grammar and the phonology monograph are on the same shelf, which one of the following must be true?\nis_valid(Exists([s:shelves], on_shelf(phonology, s) && on_shelf(Hausa, s))) ::: A) The phonology monograph is on the third shelf.\nis_valid(Exists([s:shelves], on_shelf(Vonnegut, s) && on_shelf(second, s))) ::: B) The Vonnegut novel is on the second shelf.\nis_valid(Exists([s:shelves], on_shelf(semantics, s) && on_shelf(second, s))) ::: C) The semantics monograph is on the second shelf.\nis_valid(Exists([s:shelves], on_shelf(semantics, s) && on_shelf(first, s))) ::: D) The semantics monograph is on the first shelf.\nis_valid(Exists([s:shelves], on_shelf(Woolf, s) && on_shelf(third, s))) ::: E) The Woolf novel is on the third shelf.\n------\nProblem:\nA total of six books occupies three small shelves—one on the first shelf, two on the second shelf, and three on the third shelf. Two of the books are"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_4_19",
    "context": "A swim team with exactly five members—Jacobson, Kruger, Lu, Miller, Ortiz—swims a ten-lap relay race. Each team member swims exactly two of the laps: one swims laps 1 and 6, one swims laps 2 and 7, one swims laps 3 and 8, one swims laps 4 and 9, and one swims laps 5 and 10. The following conditions apply: Neither of Kruger's laps is immediately before either of Lu's. Jacobson does not swim lap 9. Ortiz's first lap is after (but not necessarily immediately after) Miller's. At least one of Jacobson's laps is immediately after one of Ortiz's laps.",
    "question": "Which one of the following could be an accurate list of the swimmers of the first five laps, in order from lap 1 through lap 5?",
    "answer": "A",
    "options": [
      "A) Jacobson, Kruger, Miller, Lu, Ortiz",
      "B) Kruger, Miller, Ortiz, Jacobson, Lu",
      "C) Lu, Miller, Jacobson, Kruger, Ortiz",
      "D) Ortiz, Kruger, Miller, Lu, Jacobson",
      "E) Miller, Ortiz, Jacobson, Kruger, Lu"
    ],
    "raw_logic_programs": [
      "# Declarations\nswimmers = EnumSort([Jacobson, Kruger, Lu, Miller, Ortiz])\nlaps = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nswims = Function([swimmers, laps] -> [bool])\n\n# Constraints\nForAll([s:swimmers], Count([l:laps], swims(s, l)) == 2) ::: each team member swims exactly two of the laps\nAnd(swims(Jacobson, 1), swims(Jacobson, 6)) ::: one swims laps 1 and 6\nAnd(swims(Kruger, 2), swims(Kruger, 7)) ::: one swims laps 2 and 7\nAnd(swims(Lu, 3), swims(Lu, 8)) ::: one swims laps 3 and 8\nAnd(swims(Miller, 4), swims(Miller, 9)) ::: one swims laps 4 and 9\nAnd(swims(Ortiz, 5), swims(Ortiz, 10)) ::: one swims laps 5 and 10\nForAll([s:swimmers], Implies(swims(s, 1), swims(s, 6))) ::: Neither of Kruger's laps is immediately before either of Lu's\nImplies(swims(Jacobson, 9), Not(swims(Jacobson, 1))) ::: Jacobson does not swim lap 9\nImplies(swims(Ortiz, 1), swims(Miller, 1)) ::: Ortiz's first lap is after (but not necessarily immediately after) Miller's\nForAll([s:swimmers], Implies(swims(s, 1), swims(s, 6))) ::: At least one of Jacobson's laps is immediately after one of Ortiz's laps\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the swimmers of the first five laps, in order from lap 1 through lap 5?\nis_valid(Exists([s:swimmers], swims(s, 1) && swims(s, 6))) ::: A) Jacobson, Kruger, Miller, Lu, Ortiz\nis_valid(Exists([s:swimmers], swims(s, 2) && swims("
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_4_20",
    "context": "A swim team with exactly five members—Jacobson, Kruger, Lu, Miller, Ortiz—swims a ten-lap relay race. Each team member swims exactly two of the laps: one swims laps 1 and 6, one swims laps 2 and 7, one swims laps 3 and 8, one swims laps 4 and 9, and one swims laps 5 and 10. The following conditions apply: Neither of Kruger's laps is immediately before either of Lu's. Jacobson does not swim lap 9. Ortiz's first lap is after (but not necessarily immediately after) Miller's. At least one of Jacobson's laps is immediately after one of Ortiz's laps.",
    "question": "If Jacobson swims lap 8, then for exactly how many of the ten laps can one determine which team member swims the lap?",
    "answer": "A",
    "options": [
      "A) ten",
      "B) eight",
      "C) six",
      "D) four",
      "E) two"
    ],
    "raw_logic_programs": [
      "# Declarations\nswimmers = EnumSort([Jacobson, Kruger, Lu, Miller, Ortiz])\nlaps = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nswims = Function([swimmers, laps] -> [bool])\n\n# Constraints\nForAll([s:swimmers], Count([l:laps], swims(s, l)) == 2) ::: each team member swims exactly two of the laps\nAnd(swims(Kruger, 1), swims(Kruger, 6)) ::: one swims laps 1 and 6\nAnd(swims(Kruger, 2), swims(Kruger, 7)) ::: one swims laps 2 and 7\nAnd(swims(Kruger, 3), swims(Kruger, 8)) ::: one swims laps 3 and 8\nAnd(swims(Kruger, 4), swims(Kruger, 9)) ::: one swims laps 4 and 9\nAnd(swims(Kruger, 5), swims(Kruger, 10)) ::: one swims laps 5 and 10\nForAll([s:swimmers], Implies(swims(Kruger, s), Not(swims(Lu, s)))) ::: Neither of Kruger's laps is immediately before either of Lu's\nNot(swims(Jacobson, 9)) ::: Jacobson does not swim lap 9\nswims(Ortiz, 1) > swims(Miller, 1) ::: Ortiz's first lap is after (but not necessarily immediately after) Miller's\nForAll([s:swimmers], Implies(swims(Jacobson, s), Not(swims(Ortiz, s)))) ::: At least one of Jacobson's laps is immediately after one of Ortiz's laps\n\n# Options\nQuestion ::: If Jacobson swims lap 8, then for exactly how many of the ten laps can one determine which team member swims the lap?\nis_sat(ForAll([l:laps], swims(Jacobson, l) == swims(Kruger, l))) ::: A) ten\nis_sat(ForAll([l:laps], swims(Jacobson, l) == swims(Kruger, l))) ::: B) eight\nis_"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_4_21",
    "context": "A swim team with exactly five members—Jacobson, Kruger, Lu, Miller, Ortiz—swims a ten-lap relay race. Each team member swims exactly two of the laps: one swims laps 1 and 6, one swims laps 2 and 7, one swims laps 3 and 8, one swims laps 4 and 9, and one swims laps 5 and 10. The following conditions apply: Neither of Kruger's laps is immediately before either of Lu's. Jacobson does not swim lap 9. Ortiz's first lap is after (but not necessarily immediately after) Miller's. At least one of Jacobson's laps is immediately after one of Ortiz's laps.",
    "question": "If Ortiz swims lap 4, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Jacobson swims lap 1.",
      "B) Jacobson swims lap 3.",
      "C) Kruger swims lap 5.",
      "D) Lu swims lap 3.",
      "E) Miller swims lap 5."
    ],
    "raw_logic_programs": [
      "# Declarations\nswimmers = EnumSort([Jacobson, Kruger, Lu, Miller, Ortiz])\nlaps = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nswims = Function([swimmers, laps] -> [bool])\n\n# Constraints\nForAll([s:swimmers], Count([l:laps], swims(s, l)) == 2) ::: each team member swims exactly two of the laps\nAnd(swims(Kruger, 1), swims(Kruger, 6)) ::: one swims laps 1 and 6\nAnd(swims(Kruger, 2), swims(Kruger, 7)) ::: one swims laps 2 and 7\nAnd(swims(Kruger, 3), swims(Kruger, 8)) ::: one swims laps 3 and 8\nAnd(swims(Kruger, 4), swims(Kruger, 9)) ::: one swims laps 4 and 9\nAnd(swims(Kruger, 5), swims(Kruger, 10)) ::: one swims laps 5 and 10\nForAll([s:swimmers], Implies(swims(Kruger, s), Not(swims(Lu, s)))) ::: Neither of Kruger's laps is immediately before either of Lu's\nNot(swims(Jacobson, 9)) ::: Jacobson does not swim lap 9\nAnd(swims(Ortiz, 4), swims(Miller, 3)) ::: Ortiz's first lap is after (but not necessarily immediately after) Miller's\nAnd(swims(Jacobson, 1), swims(Ortiz, 2)) ::: At least one of Jacobson's laps is immediately after one of Ortiz's laps\n\n# Options\nQuestion ::: If Ortiz swims lap 4, then which one of the following could be true?\nis_valid(Exists([s:swimmers], swims(s, 1))) ::: A) Jacobson swims lap 1.\nis_valid(Exists([s:swimmers], swims(s, 3))) ::: B) Jacobson swims lap 3.\nis_valid(Exists([s:swimmers], swims(s, 5))) ::: C) Kruger swims lap"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_4_22",
    "context": "A swim team with exactly five members—Jacobson, Kruger, Lu, Miller, Ortiz—swims a ten-lap relay race. Each team member swims exactly two of the laps: one swims laps 1 and 6, one swims laps 2 and 7, one swims laps 3 and 8, one swims laps 4 and 9, and one swims laps 5 and 10. The following conditions apply: Neither of Kruger's laps is immediately before either of Lu's. Jacobson does not swim lap 9. Ortiz's first lap is after (but not necessarily immediately after) Miller's. At least one of Jacobson's laps is immediately after one of Ortiz's laps.",
    "question": "Which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Jacobson swims lap 4.",
      "B) Kruger swims lap 5.",
      "C) Lu swims lap 5.",
      "D) Miller swims lap 10.",
      "E) Ortiz swims lap 6."
    ],
    "raw_logic_programs": [
      "# Declarations\nswimmers = EnumSort([Jacobson, Kruger, Lu, Miller, Ortiz])\nlaps = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nswims = Function([swimmers, laps] -> [bool])\n\n# Constraints\nForAll([s:swimmers], Count([l:laps], swims(s, l)) == 2) ::: each team member swims exactly two of the laps\nAnd(swims(Kruger, 1), swims(Kruger, 6)) ::: one swims laps 1 and 6\nAnd(swims(Kruger, 2), swims(Kruger, 7)) ::: one swims laps 2 and 7\nAnd(swims(Kruger, 3), swims(Kruger, 8)) ::: one swims laps 3 and 8\nAnd(swims(Kruger, 4), swims(Kruger, 9)) ::: one swims laps 4 and 9\nAnd(swims(Kruger, 5), swims(Kruger, 10)) ::: one swims laps 5 and 10\nForAll([s1:swimmers, s2:swimmers], Implies(s1!= s2, And(swims(s1, 1), swims(s2, 6)), swims(s1, 2), swims(s2, 7)), swims(s1, 3), swims(s2, 8)), swims(s1, 4), swims(s2, 9)), swims(s1, 5), swims(s2, 10))) ::: Neither of Kruger's laps is immediately before either of Lu's\nNot(swims(Jacobson, 9)) ::: Jacobson does not swim lap 9\nAnd(swims(Ortiz, 1), swims(Miller, 1)) ::: Ortiz's first lap is after (but not necessarily immediately after) Miller's\nAnd(swims(Jacobson, 1), swims(Ortiz, 1)) ::: At least one of Jacobson's laps is immediately after one of Ortiz's laps\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(swims(Jacobson, 4)) ::: A"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_4_23",
    "context": "A swim team with exactly five members—Jacobson, Kruger, Lu, Miller, Ortiz—swims a ten-lap relay race. Each team member swims exactly two of the laps: one swims laps 1 and 6, one swims laps 2 and 7, one swims laps 3 and 8, one swims laps 4 and 9, and one swims laps 5 and 10. The following conditions apply: Neither of Kruger's laps is immediately before either of Lu's. Jacobson does not swim lap 9. Ortiz's first lap is after (but not necessarily immediately after) Miller's. At least one of Jacobson's laps is immediately after one of Ortiz's laps.",
    "question": "Jacobson CANNOT swim which one of the following laps?",
    "answer": "B",
    "options": [
      "A) lap 1",
      "B) lap 2",
      "C) lap 3",
      "D) lap 6",
      "E) lap 10"
    ],
    "raw_logic_programs": [
      "# Declarations\nswimmers = EnumSort([Jacobson, Kruger, Lu, Miller, Ortiz])\nlaps = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nswims = Function([swimmers, laps] -> [bool])\n\n# Constraints\nForAll([s:swimmers], Count([l:laps], swims(s, l)) == 2) ::: each team member swims exactly two of the laps\nAnd(swims(Kruger, 1), swims(Kruger, 6)) ::: one swims laps 1 and 6\nAnd(swims(Kruger, 2), swims(Kruger, 7)) ::: one swims laps 2 and 7\nAnd(swims(Kruger, 3), swims(Kruger, 8)) ::: one swims laps 3 and 8\nAnd(swims(Kruger, 4), swims(Kruger, 9)) ::: one swims laps 4 and 9\nAnd(swims(Kruger, 5), swims(Kruger, 10)) ::: one swims laps 5 and 10\nForAll([s:swimmers], Implies(swims(Kruger, s), Not(swims(Lu, s)))) ::: Neither of Kruger's laps is immediately before either of Lu's\nNot(swims(Jacobson, 9)) ::: Jacobson does not swim lap 9\nAnd(swims(Ortiz, 1), swims(Miller, 1)) ::: Ortiz's first lap is after (but not necessarily immediately after) Miller's\nAnd(swims(Jacobson, 1), swims(Ortiz, 1)) ::: At least one of Jacobson's laps is immediately after one of Ortiz's laps\n\n# Options\nQuestion ::: Jacobson CANNOT swim which one of the following laps?\nis_exception(is_sat(swims(Jacobson, 1))) ::: A) lap 1\nis_exception(is_sat(swims(Jacobson, 2))) ::: B) lap 2\nis_exception(is_sat(swims(Jacobson, 3))) ::: C) lap 3\nis_exception(is_sat(swims(Jacobson, 6)))"
    ]
  },
  {
    "id": "ar_lsat_200206_3-G_4_24",
    "context": "A swim team with exactly five members—Jacobson, Kruger, Lu, Miller, Ortiz—swims a ten-lap relay race. Each team member swims exactly two of the laps: one swims laps 1 and 6, one swims laps 2 and 7, one swims laps 3 and 8, one swims laps 4 and 9, and one swims laps 5 and 10. The following conditions apply: Neither of Kruger's laps is immediately before either of Lu's. Jacobson does not swim lap 9. Ortiz's first lap is after (but not necessarily immediately after) Miller's. At least one of Jacobson's laps is immediately after one of Ortiz's laps.",
    "question": "Which one of the following could be an accurate list of the swimmers of the last five laps, in order from lap 6 through lap 10?",
    "answer": "C",
    "options": [
      "A) Jacobson, Miller, Kruger, Ortiz, Lu",
      "B) Kruger, Lu, Miller, Ortiz, Jacobson",
      "C) Lu, Kruger, Miller, Ortiz, Jacobson",
      "D) Miller, Kruger, Ortiz, Jacobson, Lu",
      "E) Ortiz, Jacobson, Kruger, Miller, Lu"
    ],
    "raw_logic_programs": [
      "# Declarations\nswimmers = EnumSort([Jacobson, Kruger, Lu, Miller, Ortiz])\nlaps = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nswims = Function([swimmers, laps] -> [bool])\n\n# Constraints\nForAll([s:swimmers], Count([l:laps], swims(s, l)) == 2) ::: each team member swims exactly two of the laps\nAnd(swims(Kruger, 1), swims(Kruger, 6)) ::: one swims laps 1 and 6\nAnd(swims(Kruger, 2), swims(Kruger, 7)) ::: one swims laps 2 and 7\nAnd(swims(Kruger, 3), swims(Kruger, 8)) ::: one swims laps 3 and 8\nAnd(swims(Kruger, 4), swims(Kruger, 9)) ::: one swims laps 4 and 9\nAnd(swims(Kruger, 5), swims(Kruger, 10)) ::: one swims laps 5 and 10\nForAll([s:swimmers], Implies(swims(Kruger, s), Not(swims(Lu, s)))) ::: Neither of Kruger's laps is immediately before either of Lu's\nNot(swims(Jacobson, 9)) ::: Jacobson does not swim lap 9\nAnd(swims(Ortiz, s), swims(Miller, s)) ::: Ortiz's first lap is after (but not necessarily immediately after) Miller's\nAnd(swims(Jacobson, s), swims(Ortiz, s)) ::: At least one of Jacobson's laps is immediately after one of Ortiz's laps\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the swimmers of the last five laps, in order from lap 6 through lap 10?\nis_sat(And(swims(Jacobson, 6), swims(Miller, 7), swims(Kruger, 8), swims(Ortiz, 9), swims(Lu, 10))) ::: A) Jacobson, Miller, Kruger, Ortiz, Lu\nis_sat(And(swims(Kruger"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_1_1",
    "context": "A car drives into the center ring of a circus and exactly eight clowns—Q, R, S, T, V, W, Y, and Z—get out of the car, one clown at a time. The order in which the clowns get out of the car is consistent with the following conditions: V gets out at some time before both Y and Q. Q gets out at some time after Z. T gets out at some time before V but at some time after R. S gets out at some time after V. R gets out at some time before W.",
    "question": "Which one of the following could be the order, from first to last, in which the clowns get out of the car?",
    "answer": "E",
    "options": [
      "A) T, Z, V, R, W, Y, S, Q",
      "B) Z, R, W, Q, T, V, Y, S",
      "C) R, W, T, V, Q, Z, S, Y",
      "D) Z, W, R, T, V, Y, Q, S",
      "E) R, W, T, V, Z, S, Y, Q"
    ],
    "raw_logic_programs": [
      "# Declarations\nclowns = EnumSort([Q, R, S, T, V, W, Y, Z])\ngets_out = Function([clowns] -> [int])\nForAll([c:clowns], And(1 <= gets_out(c), gets_out(c) <= 8))\n\n# Constraints\nDistinct([c:clowns], gets_out(c)) ::: The order in which the clowns get out of the car is consistent with the following conditions\nAnd(gets_out(V) < gets_out(Y), gets_out(V) < gets_out(Q)) ::: V gets out at some time before both Y and Q\ngets_out(Q) > gets_out(Z) ::: Q gets out at some time after Z\nAnd(gets_out(T) < gets_out(V), gets_out(T) > gets_out(R)) ::: T gets out at some time before V but at some time after R\ngets_out(S) > gets_out(V) ::: S gets out at some time after V\ngets_out(R) < gets_out(W) ::: R gets out at some time before W\n\n# Options\nQuestion ::: Which one of the following could be the order, from first to last, in which the clowns get out of the car?\nis_sat(ForAll([c:clowns], gets_out(c) == c)) ::: A) T, Z, V, R, W, Y, S, Q\nis_sat(ForAll([c:clowns], gets_out(c) == c)) ::: B) Z, R, W, Q, T, V, Y, S\nis_sat(ForAll([c:clowns], gets_out(c) == c)) ::: C) R, W, T, V, Q, Z, S, Y\nis_sat(ForAll([c:clowns], gets_out(c) == c)) ::: D) Z, W, R, T, V, Y, Q, S\nis_sat(ForAll([c:clowns], gets_out(c) == c)) ::: E) R, W, T, V, Z, S, Y, Q\n------"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_1_2",
    "context": "A car drives into the center ring of a circus and exactly eight clowns—Q, R, S, T, V, W, Y, and Z—get out of the car, one clown at a time. The order in which the clowns get out of the car is consistent with the following conditions: V gets out at some time before both Y and Q. Q gets out at some time after Z. T gets out at some time before V but at some time after R. S gets out at some time after V. R gets out at some time before W.",
    "question": "Which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Y is the second clown to get out of the car.",
      "B) R is the third clown to get out of the car.",
      "C) Q is the fourth clown to get out of the car.",
      "D) S is the fifth clown to get out of the car.",
      "E) V is the sixth clown to get out of the car."
    ],
    "raw_logic_programs": [
      "# Declarations\nclowns = EnumSort([Q, R, S, T, V, W, Y, Z])\ngets_out = Function([clowns] -> [int])\nForAll([c:clowns], And(1 <= gets_out(c), gets_out(c) <= 8))\n\n# Constraints\nDistinct([c:clowns], gets_out(c)) ::: The order in which the clowns get out of the car is consistent with the following conditions\nAnd(gets_out(V) < gets_out(Y), gets_out(V) < gets_out(Q)) ::: V gets out at some time before both Y and Q\ngets_out(Q) > gets_out(Z) ::: Q gets out at some time after Z\nAnd(gets_out(T) < gets_out(V), gets_out(T) > gets_out(R)) ::: T gets out at some time before V but at some time after R\ngets_out(S) > gets_out(V) ::: S gets out at some time after V\ngets_out(R) < gets_out(W) ::: R gets out at some time before W\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(And(gets_out(Y) == 2, gets_out(V) == 1, gets_out(Q) == 3, gets_out(T) == 4, gets_out(R) == 5, gets_out(S) == 6, gets_out(W) == 7, gets_out(Z) == 8)) ::: A) Y is the second clown to get out of the car.\nis_valid(And(gets_out(R) == 3, gets_out(V) == 1, gets_out(Q) == 2, gets_out(T) == 4, gets_out(S) == 5, gets_out(W) == 6, gets_out(Y) == 7, gets_out(Z) == 8)) ::: B) R is the third clown to get out of the car.\nis_valid(And(gets_out(Q) == 4, gets_out(V) =="
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_1_3",
    "context": "A car drives into the center ring of a circus and exactly eight clowns—Q, R, S, T, V, W, Y, and Z—get out of the car, one clown at a time. The order in which the clowns get out of the car is consistent with the following conditions: V gets out at some time before both Y and Q. Q gets out at some time after Z. T gets out at some time before V but at some time after R. S gets out at some time after V. R gets out at some time before W.",
    "question": "If Z is the seventh clown to get out of the car, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) R is the second clown to get out of the car.",
      "B) T is the fourth clown to get out of the car.",
      "C) W is the fifth clown to get out of the car.",
      "D) V is the sixth clown to get out of the car.",
      "E) Y is the eighth clown to get out of the car."
    ],
    "raw_logic_programs": [
      "# Declarations\nclowns = EnumSort([Q, R, S, T, V, W, Y, Z])\ngets_out = Function([clowns] -> [int])\nForAll([c:clowns], And(1 <= gets_out(c), gets_out(c) <= 8))\n\n# Constraints\nDistinct([c:clowns], gets_out(c)) ::: The order in which the clowns get out of the car is consistent with the following conditions\nAnd(gets_out(V) < gets_out(Y), gets_out(V) < gets_out(Q)) ::: V gets out at some time before both Y and Q\ngets_out(Q) > gets_out(Z) ::: Q gets out at some time after Z\nAnd(gets_out(T) < gets_out(V), gets_out(T) > gets_out(R)) ::: T gets out at some time before V but at some time after R\ngets_out(S) > gets_out(V) ::: S gets out at some time after V\ngets_out(R) < gets_out(W) ::: R gets out at some time before W\n\n# Options\nQuestion ::: If Z is the seventh clown to get out of the car, then which one of the following could be true?\nis_exception(is_sat(gets_out(R) == 2)) ::: A) R is the second clown to get out of the car.\nis_exception(is_sat(gets_out(T) == 4)) ::: B) T is the fourth clown to get out of the car.\nis_exception(is_sat(gets_out(W) == 5)) ::: C) W is the fifth clown to get out of the car.\nis_exception(is_sat(gets_out(V) == 6)) ::: D) V is the sixth clown to get out of the car.\nis_exception(is_sat(gets_out(Y) == 8)) ::: E) Y is the eighth clown to get out of the car.\n------\nProblem:\nA group of eight people—A, B, C, D, E, F, G, and"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_1_4",
    "context": "A car drives into the center ring of a circus and exactly eight clowns—Q, R, S, T, V, W, Y, and Z—get out of the car, one clown at a time. The order in which the clowns get out of the car is consistent with the following conditions: V gets out at some time before both Y and Q. Q gets out at some time after Z. T gets out at some time before V but at some time after R. S gets out at some time after V. R gets out at some time before W.",
    "question": "If T is the fourth clown to get out of the car, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) R is the first clown to get out of the car.",
      "B) Z is the second clown to get out of the car.",
      "C) W is the third clown to get out of the car.",
      "D) V is the fifth clown to get out of the car.",
      "E) Y is the seventh clown to get out of the car."
    ],
    "raw_logic_programs": [
      "# Declarations\nclowns = EnumSort([Q, R, S, T, V, W, Y, Z])\ngets_out = Function([clowns] -> [int])\nForAll([c:clowns], And(1 <= gets_out(c), gets_out(c) <= 8))\n\n# Constraints\nDistinct([c:clowns], gets_out(c)) ::: The order in which the clowns get out of the car is consistent with the following conditions\nAnd(gets_out(V) < gets_out(Y), gets_out(V) < gets_out(Q)) ::: V gets out at some time before both Y and Q\ngets_out(Q) > gets_out(Z) ::: Q gets out at some time after Z\nAnd(gets_out(T) < gets_out(V), gets_out(T) > gets_out(R)) ::: T gets out at some time before V but at some time after R\ngets_out(S) > gets_out(V) ::: S gets out at some time after V\ngets_out(R) < gets_out(W) ::: R gets out at some time before W\n\n# Options\nQuestion ::: If T is the fourth clown to get out of the car, then which one of the following must be true?\nis_exception(is_sat(gets_out(R) == 1)) ::: A) R is the first clown to get out of the car.\nis_exception(is_sat(gets_out(Z) == 2)) ::: B) Z is the second clown to get out of the car.\nis_exception(is_sat(gets_out(W) == 3)) ::: C) W is the third clown to get out of the car.\nis_exception(is_sat(gets_out(V) == 5)) ::: D) V is the fifth clown to get out of the car.\nis_exception(is_sat(gets_out(Y) == 7)) ::: E) Y is the seventh clown to get out of the car.\n------\nProblem:\nA group of eight people—A, B, C, D, E, F, G, and H"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_1_5",
    "context": "A car drives into the center ring of a circus and exactly eight clowns—Q, R, S, T, V, W, Y, and Z—get out of the car, one clown at a time. The order in which the clowns get out of the car is consistent with the following conditions: V gets out at some time before both Y and Q. Q gets out at some time after Z. T gets out at some time before V but at some time after R. S gets out at some time after V. R gets out at some time before W.",
    "question": "If Q is the fifth clown to get out of the car, then each of the following could be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) Z is the first clown to get out of the car.",
      "B) T is the second clown to get out of the car.",
      "C) V is the third clown to get out of the car.",
      "D) W is the fourth clown to get out of the car.",
      "E) Y is the sixth clown to get out of the car."
    ],
    "raw_logic_programs": [
      "# Declarations\nclowns = EnumSort([Q, R, S, T, V, W, Y, Z])\ngets_out = Function([clowns] -> [int])\nForAll([c:clowns], And(1 <= gets_out(c), gets_out(c) <= 8))\n\n# Constraints\nDistinct([c:clowns], gets_out(c)) ::: The order in which the clowns get out of the car is consistent with the following conditions\nAnd(gets_out(V) < gets_out(Y), gets_out(V) < gets_out(Q)) ::: V gets out at some time before both Y and Q\ngets_out(Q) > gets_out(Z) ::: Q gets out at some time after Z\nAnd(gets_out(T) < gets_out(V), gets_out(T) > gets_out(R)) ::: T gets out at some time before V but at some time after R\ngets_out(S) > gets_out(V) ::: S gets out at some time after V\ngets_out(R) < gets_out(W) ::: R gets out at some time before W\n\n# Options\nQuestion ::: If Q is the fifth clown to get out of the car, then each of the following could be true EXCEPT:\nis_exception(is_sat(gets_out(Z) == 1)) ::: A) Z is the first clown to get out of the car.\nis_exception(is_sat(gets_out(T) == 2)) ::: B) T is the second clown to get out of the car.\nis_exception(is_sat(gets_out(V) == 3)) ::: C) V is the third clown to get out of the car.\nis_exception(is_sat(gets_out(W) == 4)) ::: D) W is the fourth clown to get out of the car.\nis_exception(is_sat(gets_out(Y) == 6)) ::: E) Y is the sixth clown to get out of the car.\n------\nProblem:\nA group of eight people—A, B, C, D, E, F, G, and"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_1_6",
    "context": "A car drives into the center ring of a circus and exactly eight clowns—Q, R, S, T, V, W, Y, and Z—get out of the car, one clown at a time. The order in which the clowns get out of the car is consistent with the following conditions: V gets out at some time before both Y and Q. Q gets out at some time after Z. T gets out at some time before V but at some time after R. S gets out at some time after V. R gets out at some time before W.",
    "question": "If R is the second clown to get out of the car, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) S gets out of the car at some time before T does.",
      "B) T gets out of the car at some time before W does.",
      "C) W gets out of the car at some time before V does.",
      "D) Y gets out of the car at some time before Q does.",
      "E) Z gets out of the car at some time before W does."
    ],
    "raw_logic_programs": [
      "# Declarations\nclowns = EnumSort([Q, R, S, T, V, W, Y, Z])\ngets_out = Function([clowns] -> [int])\nForAll([c:clowns], And(1 <= gets_out(c), gets_out(c) <= 8))\n\n# Constraints\nDistinct([c:clowns], gets_out(c)) ::: The order in which the clowns get out of the car is consistent with the following conditions\nAnd(gets_out(V) < gets_out(Y), gets_out(V) < gets_out(Q)) ::: V gets out at some time before both Y and Q\ngets_out(Q) > gets_out(Z) ::: Q gets out at some time after Z\nAnd(gets_out(T) > gets_out(R), gets_out(T) < gets_out(V)) ::: T gets out at some time before V but at some time after R\ngets_out(S) > gets_out(V) ::: S gets out at some time after V\ngets_out(R) < gets_out(W) ::: R gets out at some time before W\n\n# Options\nQuestion ::: If R is the second clown to get out of the car, which one of the following must be true?\nis_valid(Exists([c:clowns], gets_out(c) == 1) && gets_out(S) < gets_out(T)) ::: A) S gets out of the car at some time before T does.\nis_valid(Exists([c:clowns], gets_out(c) == 1) && gets_out(T) < gets_out(W)) ::: B) T gets out of the car at some time before W does.\nis_valid(Exists([c:clowns], gets_out(c) == 1) && gets_out(W) < gets_out(V)) ::: C) W gets out of the car at some time before V does.\nis_valid(Exists([c:clowns], gets_out(c) == 1) && gets_out(Y) < gets_out(Q)) ::: D) Y gets out of the car at some time before Q does.\nis_valid"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_1_7",
    "context": "A car drives into the center ring of a circus and exactly eight clowns—Q, R, S, T, V, W, Y, and Z—get out of the car, one clown at a time. The order in which the clowns get out of the car is consistent with the following conditions: V gets out at some time before both Y and Q. Q gets out at some time after Z. T gets out at some time before V but at some time after R. S gets out at some time after V. R gets out at some time before W.",
    "question": "If V gets out of the car at some time before Z does, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) R is the second clown to get out of the car.",
      "B) T is the fourth clown to get out of the car.",
      "C) Q is the fourth clown to get out of the car.",
      "D) V is the fifth clown to get out of the car.",
      "E) Z is the sixth clown to get out of the car."
    ],
    "raw_logic_programs": [
      "# Declarations\nclowns = EnumSort([Q, R, S, T, V, W, Y, Z])\ngets_out = Function([clowns] -> [int])\nForAll([c:clowns], And(1 <= gets_out(c), gets_out(c) <= 8))\n\n# Constraints\nDistinct([c:clowns], gets_out(c)) ::: The order in which the clowns get out of the car is consistent with the following conditions\nAnd(gets_out(V) < gets_out(Y), gets_out(V) < gets_out(Q)) ::: V gets out at some time before both Y and Q\ngets_out(Q) > gets_out(Z) ::: Q gets out at some time after Z\nAnd(gets_out(T) > gets_out(R), gets_out(T) < gets_out(V)) ::: T gets out at some time before V but at some time after R\ngets_out(S) > gets_out(V) ::: S gets out at some time after V\ngets_out(R) < gets_out(W) ::: R gets out at some time before W\n\n# Options\nQuestion ::: If V gets out of the car at some time before Z does, then which one of the following could be true?\nis_exception(is_sat(gets_out(R) == 2)) ::: A) R is the second clown to get out of the car.\nis_exception(is_sat(gets_out(T) == 4)) ::: B) T is the fourth clown to get out of the car.\nis_exception(is_sat(gets_out(Q) == 4)) ::: C) Q is the fourth clown to get out of the car.\nis_exception(is_sat(gets_out(V) == 5)) ::: D) V is the fifth clown to get out of the car.\nis_exception(is_sat(gets_out(Z) == 6)) ::: E) Z is the sixth clown to get out of the car.\n------\nProblem:\nA group of eight people—A, B, C, D, E, F, G, and H—are"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_2_8",
    "context": "Each of six tasks—harvesting, milling, plowing, spinning, threshing, and weaving—will be demonstrated exactly once at a farm exhibition. No two tasks will be demonstrated concurrently. Three volunteers—Frank, Gladys, and Leslie—will each demonstrate exactly two of the tasks. The tasks must be demonstrated in accordance with the following conditions: Frank demonstrates exactly one task before Gladys demonstrates any of the tasks. Frank performs neither the first nor the last demonstration. Gladys demonstrates neither harvesting nor milling. Leslie demonstrates neither harvesting nor threshing. Milling is the next task demonstrated after threshing is demonstrated.",
    "question": "Which one of the following is an acceptable list of the volunteers and the tasks each demonstrates, in order from the first to the last demonstration?",
    "answer": "C",
    "options": [
      "A) Frank: weaving; Gladys: threshing; Leslie: milling; Leslie: spinning; Frank: harvesting; Gladys: plowing",
      "B) Leslie: plowing; Frank: harvesting; Frank: threshing; Leslie: milling; Gladys: spinning; Gladys: weaving",
      "C) Leslie: plowing; Frank: spinning; Gladys: threshing; Leslie: milling; Frank: harvesting; Gladys: weaving",
      "D) Leslie: spinning; Leslie: weaving; Frank: plowing; Gladys: harvesting; Frank: threshing; Gladys: milling",
      "E) Leslie: weaving; Frank: threshing; Gladys: spinning; Leslie: milling; Frank: harvesting; Gladys: plowing"
    ],
    "raw_logic_programs": [
      "# Declarations\ntasks = EnumSort([harvesting, milling, plowing, spinning, threshing, weaving])\nvolunteers = EnumSort([Frank, Gladys, Leslie])\ndemonstrates = Function([volunteers, tasks] -> [bool])\n\n# Constraints\nForAll([v:volunteers], Count([t:tasks], demonstrates(v, t)) == 2) ::: each volunteer demonstrates exactly two of the tasks\nForAll([t:tasks], Count([v:volunteers], demonstrates(v, t)) == 1) ::: each task will be demonstrated exactly once\nForAll([t:tasks], Implies(demonstrates(Frank, t), Not(demonstrates(Gladys, t)))) ::: Frank demonstrates exactly one task before Gladys demonstrates any of the tasks\nForAll([t:tasks], Implies(demonstrates(Frank, t), Not(t == harvesting))) ::: Frank performs neither the first nor the last demonstration\nForAll([t:tasks], Implies(demonstrates(Gladys, t), Not(t == harvesting))) ::: Gladys demonstrates neither harvesting nor milling\nForAll([t:tasks], Implies(demonstrates(Leslie, t), Not(t == harvesting))) ::: Leslie demonstrates neither harvesting nor threshing\nForAll([t:tasks], Implies(demonstrates(Leslie, t), Not(t == threshing))) ::: Milling is the next task demonstrated after threshing is demonstrated\n\n# Options\nQuestion ::: Which one of the following is an acceptable list of the volunteers and the tasks each demonstrates, in order from the first to the last demonstration?\nis_sat(ForAll([t:tasks], demonstrates(Frank, t) == (t == weaving))) ::: A) Frank: weaving; Gladys: threshing; Leslie: milling; Leslie: spinning; Frank: harvesting; Gladys: plowing\nis_sat(ForAll([t:tasks], demonstrates(Leslie, t) == (t == plowing))) ::: B) Leslie: plowing; Frank: harvesting; Frank: thres"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_2_9",
    "context": "Each of six tasks—harvesting, milling, plowing, spinning, threshing, and weaving—will be demonstrated exactly once at a farm exhibition. No two tasks will be demonstrated concurrently. Three volunteers—Frank, Gladys, and Leslie—will each demonstrate exactly two of the tasks. The tasks must be demonstrated in accordance with the following conditions: Frank demonstrates exactly one task before Gladys demonstrates any of the tasks. Frank performs neither the first nor the last demonstration. Gladys demonstrates neither harvesting nor milling. Leslie demonstrates neither harvesting nor threshing. Milling is the next task demonstrated after threshing is demonstrated.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Frank demonstrates harvesting.",
      "B) Frank demonstrates milling.",
      "C) Frank demonstrates threshing.",
      "D) Gladys demonstrates plowing.",
      "E) Gladys demonstrates weaving."
    ],
    "raw_logic_programs": [
      "# Declarations\ntasks = EnumSort([harvesting, milling, plowing, spinning, threshing, weaving])\ndemonstrates = Function([tasks, people] -> [bool])\npeople = EnumSort([Frank, Gladys, Leslie])\n\n# Constraints\nForAll([t:tasks], Count([p:people], demonstrates(t, p)) == 1) ::: each task will be demonstrated exactly once\nForAll([p:people], Count([t:tasks], demonstrates(t, p)) == 2) ::: each volunteer will demonstrate exactly two of the tasks\nForAll([t:tasks], And(1 <= demonstrates(t, Frank), demonstrates(t, Frank) <= 6)) ::: Frank demonstrates exactly one task before Gladys demonstrates any of the tasks\nNot(And(demonstrates(1, Frank), demonstrates(6, Frank))) ::: Frank performs neither the first nor the last demonstration\nNot(And(demonstrates(harvesting, Gladys), demonstrates(milling, Gladys))) ::: Gladys demonstrates neither harvesting nor milling\nNot(And(demonstrates(harvesting, Leslie), demonstrates(threshing, Leslie))) ::: Leslie demonstrates neither harvesting nor threshing\nAnd(demonstrates(threshing, Frank), demonstrates(milling, Frank)) ::: Milling is the next task demonstrated after threshing is demonstrated\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(demonstrates(harvesting, Frank)) ::: (A)\nis_valid(demonstrates(milling, Frank)) ::: (B)\nis_valid(demonstrates(threshing, Frank)) ::: (C)\nis_valid(demonstrates(plowing, Gladys)) ::: (D)\nis_valid(demonstrates(weaving, Gladys)) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—will be divided into two teams of three people each. Each team will consist of exactly one person from each of the following three groups: Group 1, Group 2, and Group 3. The following conditions"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_2_10",
    "context": "Each of six tasks—harvesting, milling, plowing, spinning, threshing, and weaving—will be demonstrated exactly once at a farm exhibition. No two tasks will be demonstrated concurrently. Three volunteers—Frank, Gladys, and Leslie—will each demonstrate exactly two of the tasks. The tasks must be demonstrated in accordance with the following conditions: Frank demonstrates exactly one task before Gladys demonstrates any of the tasks. Frank performs neither the first nor the last demonstration. Gladys demonstrates neither harvesting nor milling. Leslie demonstrates neither harvesting nor threshing. Milling is the next task demonstrated after threshing is demonstrated.",
    "question": "If Leslie performs the fourth demonstration, then harvesting could be the demonstration performed",
    "answer": "B",
    "options": [
      "A) first",
      "B) second",
      "C) third",
      "D) fourth",
      "E) sixth"
    ],
    "raw_logic_programs": [
      "# Declarations\ntasks = EnumSort([harvesting, milling, plowing, spinning, threshing, weaving])\ndemonstrates = Function([tasks, people] -> [bool])\npeople = EnumSort([Frank, Gladys, Leslie])\n\n# Constraints\nForAll([t:tasks], Count([p:people], demonstrates(t, p)) == 1) ::: each task will be demonstrated exactly once\nForAll([p:people], Count([t:tasks], demonstrates(t, p)) == 2) ::: each volunteer will demonstrate exactly two of the tasks\nForAll([t:tasks], And(1 <= demonstrates(t, Frank), demonstrates(t, Frank) <= 6)) ::: Frank demonstrates exactly one task before Gladys demonstrates any of the tasks\nForAll([t:tasks], And(1 <= demonstrates(t, Frank), demonstrates(t, Frank) <= 6)) ::: Frank performs neither the first nor the last demonstration\nForAll([t:tasks], Implies(demonstrates(t, Gladys), t!= harvesting)) ::: Gladys demonstrates neither harvesting nor milling\nForAll([t:tasks], Implies(demonstrates(t, Leslie), t!= harvesting)) ::: Leslie demonstrates neither harvesting nor threshing\nForAll([t:tasks], Implies(demonstrates(t, Leslie), t!= threshing)) ::: Milling is the next task demonstrated after threshing is demonstrated\n\n# Options\nQuestion ::: If Leslie performs the fourth demonstration, then harvesting could be the demonstration performed\nis_exception(is_sat(demonstrates(harvesting, Frank) == 1)) ::: A) first\nis_exception(is_sat(demonstrates(harvesting, Frank) == 2)) ::: B) second\nis_exception(is_sat(demonstrates(harvesting, Frank) == 3)) ::: C) third\nis_exception(is_sat(demonstrates(harvesting, Frank) == 4)) ::: D) fourth\nis_exception(is_sat(demonstrates(harvesting, Frank) == 6)) ::: E"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_2_11",
    "context": "Each of six tasks—harvesting, milling, plowing, spinning, threshing, and weaving—will be demonstrated exactly once at a farm exhibition. No two tasks will be demonstrated concurrently. Three volunteers—Frank, Gladys, and Leslie—will each demonstrate exactly two of the tasks. The tasks must be demonstrated in accordance with the following conditions: Frank demonstrates exactly one task before Gladys demonstrates any of the tasks. Frank performs neither the first nor the last demonstration. Gladys demonstrates neither harvesting nor milling. Leslie demonstrates neither harvesting nor threshing. Milling is the next task demonstrated after threshing is demonstrated.",
    "question": "If Gladys demonstrates plowing immediately before Frank demonstrates threshing, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Frank demonstrates harvesting for the second demonstration.",
      "B) Gladys demonstrates spinning for the fifth demonstration.",
      "C) Leslie demonstrates weaving for the first demonstration.",
      "D) Gladys performs the fourth demonstration.",
      "E) Leslie performs the sixth demonstration."
    ],
    "raw_logic_programs": [
      "# Declarations\ntasks = EnumSort([harvesting, milling, plowing, spinning, threshing, weaving])\ndemonstrates = Function([tasks, people] -> [bool])\npeople = EnumSort([Frank, Gladys, Leslie])\n\n# Constraints\nForAll([t:tasks], Count([p:people], demonstrates(t, p)) == 1) ::: each task will be demonstrated exactly once\nForAll([p:people], Count([t:tasks], demonstrates(t, p)) == 2) ::: each volunteer will demonstrate exactly two of the tasks\nForAll([t:tasks], And(1 <= demonstrates(t, Frank), demonstrates(t, Frank) <= 6)) ::: Frank demonstrates exactly one task before Gladys demonstrates any of the tasks\nForAll([t:tasks], And(1 <= demonstrates(t, Gladys), demonstrates(t, Gladys) <= 6)) ::: Frank performs neither the first nor the last demonstration\nForAll([t:tasks], Implies(demonstrates(t, Gladys), Not(t == harvesting))) ::: Gladys demonstrates neither harvesting nor milling\nForAll([t:tasks], Implies(demonstrates(t, Leslie), Not(t == harvesting))) ::: Leslie demonstrates neither harvesting nor threshing\nForAll([t:tasks], Implies(demonstrates(t, Leslie), Not(t == threshing))) ::: Milling is the next task demonstrated after threshing is demonstrated\n\n# Options\nQuestion ::: If Gladys demonstrates plowing immediately before Frank demonstrates threshing, which one of the following must be true?\nis_valid(Exists([t:tasks], demonstrates(t, Frank) == 2) && t == harvesting) ::: (A)\nis_valid(Exists([t:tasks], demonstrates(t, Gladys) == 5) && t == spinning) ::: (B)\nis_valid(Exists([t:tasks], demonstrates(t, Leslie) == 1) && t == weaving) ::: (C)\nis_valid(Exists([t:tasks], demonstrates(t, Gladys) == 4)) ::: (D)\nis_valid(Exists([t:tasks], demonstrates(t, Leslie) == 6)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_2_12",
    "context": "Each of six tasks—harvesting, milling, plowing, spinning, threshing, and weaving—will be demonstrated exactly once at a farm exhibition. No two tasks will be demonstrated concurrently. Three volunteers—Frank, Gladys, and Leslie—will each demonstrate exactly two of the tasks. The tasks must be demonstrated in accordance with the following conditions: Frank demonstrates exactly one task before Gladys demonstrates any of the tasks. Frank performs neither the first nor the last demonstration. Gladys demonstrates neither harvesting nor milling. Leslie demonstrates neither harvesting nor threshing. Milling is the next task demonstrated after threshing is demonstrated.",
    "question": "Which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Frank performs the second demonstration.",
      "B) Gladys performs the fourth demonstration.",
      "C) Gladys performs the sixth demonstration.",
      "D) Leslie performs the first demonstration.",
      "E) Leslie performs the second demonstration."
    ],
    "raw_logic_programs": [
      "# Declarations\ntasks = EnumSort([harvesting, milling, plowing, spinning, threshing, weaving])\ndemonstrates = Function([tasks, people] -> [bool])\npeople = EnumSort([Frank, Gladys, Leslie])\n\n# Constraints\nForAll([t:tasks], Count([p:people], demonstrates(t, p)) == 1) ::: each task will be demonstrated exactly once\nForAll([p:people], Count([t:tasks], demonstrates(t, p)) == 2) ::: each volunteer will demonstrate exactly two of the tasks\nForAll([t:tasks], And(1 <= demonstrates(t, Frank), demonstrates(t, Frank) <= 6)) ::: Frank demonstrates exactly one task before Gladys demonstrates any of the tasks\nForAll([t:tasks], And(1 <= demonstrates(t, Gladys), demonstrates(t, Gladys) <= 6)) ::: Frank performs neither the first nor the last demonstration\nForAll([t:tasks], Implies(demonstrates(t, Gladys), Not(t == harvesting))) ::: Gladys demonstrates neither harvesting nor milling\nForAll([t:tasks], Implies(demonstrates(t, Gladys), Not(t == milling))) ::: Gladys demonstrates neither harvesting nor milling\nForAll([t:tasks], Implies(demonstrates(t, Leslie), Not(t == harvesting))) ::: Leslie demonstrates neither harvesting nor threshing\nForAll([t:tasks], Implies(demonstrates(t, Leslie), Not(t == threshing))) ::: Leslie demonstrates neither harvesting nor threshing\nForAll([t:tasks], Implies(demonstrates(t, Leslie), Not(t == milling))) ::: Leslie demonstrates neither harvesting nor threshing\nForAll([t:tasks], Implies(demonstrates(t, Leslie), Not(t == weaving))) ::: Leslie demonstrates neither harvesting nor threshing\nForAll([t:tasks], Implies(demonstrates(t, Leslie), Not(t == plowing))) ::: Leslie demonstrates neither harvesting nor threshing\nForAll([t:tasks], Implies(demonstrates(t, Leslie), Not(t == spinning"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_2_13",
    "context": "Each of six tasks—harvesting, milling, plowing, spinning, threshing, and weaving—will be demonstrated exactly once at a farm exhibition. No two tasks will be demonstrated concurrently. Three volunteers—Frank, Gladys, and Leslie—will each demonstrate exactly two of the tasks. The tasks must be demonstrated in accordance with the following conditions: Frank demonstrates exactly one task before Gladys demonstrates any of the tasks. Frank performs neither the first nor the last demonstration. Gladys demonstrates neither harvesting nor milling. Leslie demonstrates neither harvesting nor threshing. Milling is the next task demonstrated after threshing is demonstrated.",
    "question": "Which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Harvesting is demonstrated first.",
      "B) Milling is demonstrated second.",
      "C) Threshing is demonstrated first.",
      "D) Threshing is demonstrated last.",
      "E) Weaving is demonstrated first."
    ],
    "raw_logic_programs": [
      "# Declarations\ntasks = EnumSort([harvesting, milling, plowing, spinning, threshing, weaving])\ndemonstrates = Function([tasks, people] -> [bool])\npeople = EnumSort([Frank, Gladys, Leslie])\n\n# Constraints\nForAll([t:tasks], Count([p:people], demonstrates(t, p)) == 1) ::: each task will be demonstrated exactly once\nForAll([p:people], Count([t:tasks], demonstrates(t, p)) == 2) ::: each volunteer will demonstrate exactly two of the tasks\nForAll([t:tasks], And(1 <= demonstrates(t, Frank), demonstrates(t, Frank) <= 6)) ::: Frank demonstrates exactly one task before Gladys demonstrates any of the tasks\nForAll([t:tasks], And(1 <= demonstrates(t, Frank), demonstrates(t, Frank) <= 6)) ::: Frank performs neither the first nor the last demonstration\nForAll([t:tasks], Implies(demonstrates(t, Gladys), t!= harvesting)) ::: Gladys demonstrates neither harvesting nor milling\nForAll([t:tasks], Implies(demonstrates(t, Leslie), t!= harvesting)) ::: Leslie demonstrates neither harvesting nor threshing\nForAll([t:tasks], Implies(demonstrates(t, Leslie), t!= threshing)) ::: Milling is the next task demonstrated after threshing is demonstrated\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(Exists([t:tasks], demonstrates(t, Frank) == 1)) ::: (A)\nis_valid(Exists([t:tasks], demonstrates(t, Frank) == 2)) ::: (B)\nis_valid(Exists([t:tasks], demonstrates(t, Frank) == 1)) ::: (C)\nis_valid(Exists([t:tasks], demonstrates(t, Frank) == 6)) ::: (D)\nis_valid(Exists([t:tasks], demonstrates(t, Frank) == 1)) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—will be divided into two teams of three people each. Each team will consist of exactly one person from each of the following three"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_3_14",
    "context": "Seven job applicants—Feng, Garcia, Herrera, Ilias, Weiss, Xavier, and Yates—are hired to fill seven new positions at Chroma, Inc. One position is in the management department, three are in the production department, and three are in the sales department. The following conditions must apply: Herrera is hired for a position in the same department as Yates. Feng is hired for a position in a different department from Garcia. If Xavier is hired for a sales position, then Weiss is hired for a production position. Feng is hired for a production position.",
    "question": "Which one of the following could be a complete and accurate matching of the applicants with the departments in which they were hired?",
    "answer": "E",
    "options": [
      "A) management: Weiss; production: Feng, Herrera, Yates; sales: Garcia, Ilias, Xavier",
      "B) management: Weiss; production: Garcia, Ilias, Xavier; sales: Feng, Herrera, Yates",
      "C) management: Xavier; production: Feng, Garcia, Herrera; sales: Ilias, Yates, Weiss",
      "D) management: Xavier; production: Feng, Herrera, Ilias; sales: Garcia, Weiss, Yates",
      "E) management: Xavier; production: Feng, Ilias, Weiss; sales: Garcia, Herrera, Yates"
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Feng, Garcia, Herrera, Ilias, Weiss, Xavier, Yates])\ndepartments = EnumSort([management, production, sales])\nhired = Function([applicants, departments] -> [bool])\n\n# Constraints\nForAll([a:applicants], Count([d:departments], hired(a, d)) == 1) ::: one position is in the management department, three are in the production department, and three are in the sales department\nAnd(hired(Herrera, d), hired(Yates, d)) ::: Herrera is hired for a position in the same department as Yates\nAnd(hired(Feng, d), hired(Garcia, d), Not(d == d)) ::: Feng is hired for a position in a different department from Garcia\nAnd(hired(Xavier, sales), hired(Weiss, production)) ::: If Xavier is hired for a sales position, then Weiss is hired for a production position\nhired(Feng, production) ::: Feng is hired for a production position\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate matching of the applicants with the departments in which they were hired?\nis_sat(And(hired(Weiss, management), hired(Feng, production), hired(Herrera, production), hired(Yates, production), hired(Garcia, sales), hired(Ilias, sales), hired(Xavier, sales))) ::: A) management: Weiss; production: Feng, Herrera, Yates; sales: Garcia, Ilias, Xavier\nis_sat(And(hired(Weiss, management), hired(Garcia, production), hired(Ilias, production), hired(Xavier, production), hired(Feng, sales), hired(Herrera, sales), hired(Yates, sales))) ::: B) management: Weiss; production: Garcia, Ilias, Xavier; sales: Feng, Herrera, Yates\nis_sat(And(hired(Xavier, management), hired(Feng, production), hired(Garcia, production), hired(Herrera, production), hired(Ilias, sales), hired(Yates, sales), hired("
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_3_15",
    "context": "Seven job applicants—Feng, Garcia, Herrera, Ilias, Weiss, Xavier, and Yates—are hired to fill seven new positions at Chroma, Inc. One position is in the management department, three are in the production department, and three are in the sales department. The following conditions must apply: Herrera is hired for a position in the same department as Yates. Feng is hired for a position in a different department from Garcia. If Xavier is hired for a sales position, then Weiss is hired for a production position. Feng is hired for a production position.",
    "question": "Which one of the following is a complete and accurate list of the applicants, each of whom CANNOT be hired for a production position?",
    "answer": "D",
    "options": [
      "A) Feng, Ilias, Xavier",
      "B) Garcia, Herrera, Yates",
      "C) Herrera, Yates",
      "D) Garcia",
      "E) Ilias"
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Feng, Garcia, Herrera, Ilias, Weiss, Xavier, Yates])\ndepartments = EnumSort([management, production, sales])\nhired = Function([applicants, departments] -> [bool])\n\n# Constraints\nForAll([a:applicants], Count([d:departments], hired(a, d)) == 1) ::: one position is in the management department, three are in the production department, and three are in the sales department\nAnd(hired(Herrera, d), hired(Yates, d)) ::: Herrera is hired for a position in the same department as Yates\nAnd(hired(Feng, d1), hired(Garcia, d2), d1!= d2) ::: Feng is hired for a position in a different department from Garcia\nAnd(hired(Xavier, sales), hired(Weiss, production)) ::: If Xavier is hired for a sales position, then Weiss is hired for a production position\nhired(Feng, production) ::: Feng is hired for a production position\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the applicants, each of whom CANNOT be hired for a production position?\nis_valid(ForAll([a:applicants], Or(a == Feng, a == Ilias, a == Xavier))) ::: A) Feng, Ilias, Xavier\nis_valid(ForAll([a:applicants], Or(a == Garcia, a == Herrera, a == Yates))) ::: B) Garcia, Herrera, Yates\nis_valid(ForAll([a:applicants], Or(a == Herrera, a == Yates))) ::: C) Herrera, Yates\nis_valid(ForAll([a:applicants], Or(a == Garcia))) ::: D) Garcia\nis_valid(ForAll([a:applicants], Or(a == Ilias))) ::: E) Ilias\n------\nProblem:\nA certain company has a total of 100 employees, some of whom are managers and some of whom are not. The company has a total of 100 employees, some of whom are managers and some of whom are not. The company has a total of 100 employees, some of whom are"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_3_16",
    "context": "Seven job applicants—Feng, Garcia, Herrera, Ilias, Weiss, Xavier, and Yates—are hired to fill seven new positions at Chroma, Inc. One position is in the management department, three are in the production department, and three are in the sales department. The following conditions must apply: Herrera is hired for a position in the same department as Yates. Feng is hired for a position in a different department from Garcia. If Xavier is hired for a sales position, then Weiss is hired for a production position. Feng is hired for a production position.",
    "question": "It can be determined in which department each of the seven applicants is hired if which one of the following statements is true?",
    "answer": "C",
    "options": [
      "A) Feng and Weiss are both hired for production positions.",
      "B) Garcia and Yates are both hired for sales positions.",
      "C) Ilias and Weiss are both hired for sales positions.",
      "D) Ilias and Weiss are both hired for production positions.",
      "E) Ilias and Xavier are both hired for production positions."
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Feng, Garcia, Herrera, Ilias, Weiss, Xavier, Yates])\ndepartments = EnumSort([management, production, sales])\nhired = Function([applicants, departments] -> [bool])\n\n# Constraints\nForAll([a:applicants], Count([d:departments], hired(a, d)) == 1) ::: each applicant is hired for exactly one department\nAnd(hired(Herrera, d), hired(Yates, d)) ::: Herrera is hired for a position in the same department as Yates\nAnd(hired(Feng, d1), hired(Garcia, d2), d1!= d2) ::: Feng is hired for a position in a different department from Garcia\nAnd(hired(Xavier, sales), hired(Weiss, production)) ::: If Xavier is hired for a sales position, then Weiss is hired for a production position\nhired(Feng, production) ::: Feng is hired for a production position\n\n# Options\nQuestion ::: It can be determined in which department each of the seven applicants is hired if which one of the following statements is true?\nis_sat(ForAll([a:applicants], Count([d:departments], hired(a, d)) == 1)) ::: A) Feng and Weiss are both hired for production positions.\nis_sat(ForAll([a:applicants], Count([d:departments], hired(a, d)) == 1)) ::: B) Garcia and Yates are both hired for sales positions.\nis_sat(ForAll([a:applicants], Count([d:departments], hired(a, d)) == 1)) ::: C) Ilias and Weiss are both hired for sales positions.\nis_sat(ForAll([a:applicants], Count([d:departments], hired(a, d)) == 1)) ::: D) Ilias and Weiss are both hired for production positions.\nis_sat(ForAll([a:applicants], Count([d:departments], hired(a, d)) == 1)) ::: E) Ilias and Xavier are both hired for production positions.\n------\nProblem:\nA certain company"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_3_17",
    "context": "Seven job applicants—Feng, Garcia, Herrera, Ilias, Weiss, Xavier, and Yates—are hired to fill seven new positions at Chroma, Inc. One position is in the management department, three are in the production department, and three are in the sales department. The following conditions must apply: Herrera is hired for a position in the same department as Yates. Feng is hired for a position in a different department from Garcia. If Xavier is hired for a sales position, then Weiss is hired for a production position. Feng is hired for a production position.",
    "question": "Each of the following could be an accurate partial list of the applicants hired for sales positions EXCEPT:",
    "answer": "B",
    "options": [
      "A) Garcia, Ilias",
      "B) Garcia, Xavier",
      "C) Garcia, Yates",
      "D) Herrera, Weiss",
      "E) Herrera, Xavier"
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Feng, Garcia, Herrera, Ilias, Weiss, Xavier, Yates])\ndepartments = EnumSort([management, production, sales])\nhired = Function([applicants, departments] -> [bool])\n\n# Constraints\nForAll([a:applicants], Count([d:departments], hired(a, d)) == 1) ::: one position is in the management department, three are in the production department, and three are in the sales department\nAnd(hired(Herrera, d), hired(Yates, d)) ::: Herrera is hired for a position in the same department as Yates\nAnd(hired(Feng, d1), hired(Garcia, d2), d1!= d2) ::: Feng is hired for a position in a different department from Garcia\nAnd(hired(Xavier, sales), hired(Weiss, production)) ::: If Xavier is hired for a sales position, then Weiss is hired for a production position\nhired(Feng, production) ::: Feng is hired for a production position\n\n# Options\nQuestion ::: Each of the following could be an accurate partial list of the applicants hired for sales positions EXCEPT:\nis_exception(is_sat(And(hired(Garcia, sales), hired(Ilias, sales)))) ::: A) Garcia, Ilias\nis_exception(is_sat(And(hired(Garcia, sales), hired(Xavier, sales)))) ::: B) Garcia, Xavier\nis_exception(is_sat(And(hired(Garcia, sales), hired(Yates, sales)))) ::: C) Garcia, Yates\nis_exception(is_sat(And(hired(Herrera, sales), hired(Weiss, sales)))) ::: D) Herrera, Weiss\nis_exception(is_sat(And(hired(Herrera, sales), hired(Xavier, sales)))) ::: E) Herrera, Xavier\n------\nProblem:\nA certain company has a total of 100 employees, including 10 managers and 90 nonmanagers. The company has a total of 100 computers, including 10 computers that are used only by managers and 90 computers that are used"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_3_18",
    "context": "Seven job applicants—Feng, Garcia, Herrera, Ilias, Weiss, Xavier, and Yates—are hired to fill seven new positions at Chroma, Inc. One position is in the management department, three are in the production department, and three are in the sales department. The following conditions must apply: Herrera is hired for a position in the same department as Yates. Feng is hired for a position in a different department from Garcia. If Xavier is hired for a sales position, then Weiss is hired for a production position. Feng is hired for a production position.",
    "question": "If Feng is hired for a position in the same department as Xavier, then each of the following could be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) Garcia is hired for a sales position.",
      "B) Herrera is hired for a production position.",
      "C) Ilias is hired for a sales position.",
      "D) Weiss is hired for the management position.",
      "E) Weiss is hired for a production position."
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Feng, Garcia, Herrera, Ilias, Weiss, Xavier, Yates])\ndepartments = EnumSort([management, production, sales])\nhired = Function([applicants, departments] -> [bool])\n\n# Constraints\nForAll([a:applicants], Count([d:departments], hired(a, d)) == 1) ::: each applicant is hired for exactly one position\nAnd(hired(Herrera, d), hired(Yates, d)) ::: Herrera is hired for a position in the same department as Yates\nAnd(hired(Feng, d1), hired(Garcia, d2), d1!= d2) ::: Feng is hired for a position in a different department from Garcia\nAnd(hired(Xavier, sales), hired(Weiss, production)) ::: If Xavier is hired for a sales position, then Weiss is hired for a production position\nhired(Feng, production) ::: Feng is hired for a production position\n\n# Options\nQuestion ::: If Feng is hired for a position in the same department as Xavier, then each of the following could be true EXCEPT:\nis_exception(is_sat(hired(Garcia, sales))) ::: (A)\nis_exception(is_sat(hired(Herrera, production))) ::: (B)\nis_exception(is_sat(hired(Ilias, sales))) ::: (C)\nis_exception(is_sat(hired(Weiss, management))) ::: (D)\nis_exception(is_sat(hired(Weiss, production))) ::: (E)\n------\nProblem:\nA company has six employees—Fred, Gina, Hank, Iris, Jill, and Kim—who work in either the accounting, human resources, or public relations department. The following conditions apply: Hank and Jill work in the same department. Iris does not work in the same department as Fred. Kim works in a different department from Gina. Fred does not work in the same department as Kim.\nQuestion:\nIf Hank works in the accounting department, then each of the following could be true EXCEPT:\nChoices:\n(A) Gina works in the human resources department.\n(B) Iris"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_3_19",
    "context": "Seven job applicants—Feng, Garcia, Herrera, Ilias, Weiss, Xavier, and Yates—are hired to fill seven new positions at Chroma, Inc. One position is in the management department, three are in the production department, and three are in the sales department. The following conditions must apply: Herrera is hired for a position in the same department as Yates. Feng is hired for a position in a different department from Garcia. If Xavier is hired for a sales position, then Weiss is hired for a production position. Feng is hired for a production position.",
    "question": "If Xavier is not hired for one of the production positions, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Feng and Herrera are both hired for sales positions.",
      "B) Herrera and Weiss are both hired for sales positions.",
      "C) Feng and Yates are both hired for production positions.",
      "D) Garcia and Weiss are both hired for production positions.",
      "E) Herrera and Weiss are both hired for production positions."
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Feng, Garcia, Herrera, Ilias, Weiss, Xavier, Yates])\ndepartments = EnumSort([management, production, sales])\nhired = Function([applicants, departments] -> [bool])\n\n# Constraints\nForAll([a:applicants], Count([d:departments], hired(a, d)) == 1) ::: each applicant is hired for exactly one department\nAnd(hired(Herrera, d), hired(Yates, d)) ::: Herrera is hired for a position in the same department as Yates\nAnd(hired(Feng, d1), hired(Garcia, d2), d1!= d2) ::: Feng is hired for a position in a different department from Garcia\nAnd(hired(Xavier, sales), hired(Weiss, production)) ::: If Xavier is hired for a sales position, then Weiss is hired for a production position\nhired(Feng, production) ::: Feng is hired for a production position\n\n# Options\nQuestion ::: If Xavier is not hired for one of the production positions, then which one of the following could be true?\nis_sat(And(Not(hired(Xavier, production)), hired(Feng, sales), hired(Herrera, sales))) ::: A) Feng and Herrera are both hired for sales positions.\nis_sat(And(Not(hired(Xavier, production)), hired(Herrera, sales), hired(Weiss, sales))) ::: B) Herrera and Weiss are both hired for sales positions.\nis_sat(And(Not(hired(Xavier, production)), hired(Feng, production), hired(Yates, production))) ::: C) Feng and Yates are both hired for production positions.\nis_sat(And(Not(hired(Xavier, production)), hired(Garcia, production), hired(Weiss, production))) ::: D) Garcia and Weiss are both hired for production positions.\nis_sat(And(Not(hired(Xavier, production)), hired(Herrera, production), hired(Weiss, production))) ::: E) Herrera and Weiss are both hired for production positions.\n------\nProblem:\nA"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_4_20",
    "context": "Musicians perform each of exactly five pieces—Nexus, Onyx, Synchrony, Tailwind, and Virtual—once, and one at a time; the pieces are performed successively (though not necessarily in that order). Each piece is performed with exactly two instruments: Nexus with fiddle and lute, Onyx with harp and mandolin, Synchrony with guitar and harp, Tailwind with fiddle and guitar, and Virtual with lute and mandolin. The following conditions must apply: Each piece shares one instrument with the piece performed immediately before it or after it (or both). Either Nexus or Tailwind is performed second.",
    "question": "Which one of the following could be the order, from first to last, in which the pieces are performed?",
    "answer": "D",
    "options": [
      "A) Nexus, Synchrony, Onyx, Virtual, Tailwind",
      "B) Synchrony, Tailwind, Onyx, Nexus, Virtual",
      "C) Tailwind, Nexus, Onyx, Virtual, Synchrony",
      "D) Tailwind, Nexus, Synchrony, Onyx, Virtual",
      "E) Virtual, Nexus, Synchrony, Onyx, Tailwind"
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([Nexus, Onyx, Synchrony, Tailwind, Virtual])\ninstruments = EnumSort([fiddle, harp, guitar, lute, mandolin])\nperformed = Function([pieces, instruments] -> [bool])\n\n# Constraints\nForAll([p:pieces], Count([i:instruments], performed(p, i)) == 2) ::: each piece is performed with exactly two instruments\nAnd(performed(Nexus, fiddle), performed(Nexus, lute)) ::: Nexus with fiddle and lute\nAnd(performed(Onyx, harp), performed(Onyx, mandolin)) ::: Onyx with harp and mandolin\nAnd(performed(Synchrony, guitar), performed(Synchrony, harp)) ::: Synchrony with guitar and harp\nAnd(performed(Tailwind, fiddle), performed(Tailwind, guitar)) ::: Tailwind with fiddle and guitar\nAnd(performed(Virtual, lute), performed(Virtual, mandolin)) ::: Virtual with lute and mandolin\nForAll([p:pieces], Count([p2:pieces], And(p!= p2, Or(performed(p, i), performed(p2, i)))) == 1) ::: Each piece shares one instrument with the piece performed immediately before it or after it (or both)\nOr(performed(Nexus, fiddle), performed(Tailwind, fiddle)) ::: Either Nexus or Tailwind is performed second\n\n# Options\nQuestion ::: Which one of the following could be the order, from first to last, in which the pieces are performed?\nis_sat(ForAll([p:pieces], performed(p, instruments[p]))) ::: (A)\nis_sat(ForAll([p:pieces], performed(p, instruments[p]))) ::: (B)\nis_sat(ForAll([p:pieces], performed(p, instruments[p]))) ::: (C)\nis_sat(ForAll([p:pieces], performed(p, instruments[p]))) ::: (D)\nis_sat(ForAll([p:pieces], performed(p, instruments[p]))) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—is"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_4_21",
    "context": "Musicians perform each of exactly five pieces—Nexus, Onyx, Synchrony, Tailwind, and Virtual—once, and one at a time; the pieces are performed successively (though not necessarily in that order). Each piece is performed with exactly two instruments: Nexus with fiddle and lute, Onyx with harp and mandolin, Synchrony with guitar and harp, Tailwind with fiddle and guitar, and Virtual with lute and mandolin. The following conditions must apply: Each piece shares one instrument with the piece performed immediately before it or after it (or both). Either Nexus or Tailwind is performed second.",
    "question": "Which one of the following instruments CANNOT be shared by the third and fourth pieces performed?",
    "answer": "A",
    "options": [
      "A) fiddle",
      "B) guitar",
      "C) harp",
      "D) lute",
      "E) mandolin"
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([Nexus, Onyx, Synchrony, Tailwind, Virtual])\ninstruments = EnumSort([fiddle, guitar, harp, lute, mandolin])\nperformed = Function([pieces, instruments] -> [bool])\n\n# Constraints\nForAll([p:pieces], Count([i:instruments], performed(p, i)) == 2) ::: Each piece is performed with exactly two instruments\nForAll([p:pieces], Count([p2:pieces], And(p!= p2, Count([i:instruments], performed(p, i) == performed(p2, i)) == 1)) == 1) ::: Each piece shares one instrument with the piece performed immediately before it or after it (or both)\nOr(performed(Nexus, fiddle), performed(Tailwind, fiddle)) ::: Either Nexus or Tailwind is performed second\n\n# Options\nQuestion ::: Which one of the following instruments CANNOT be shared by the third and fourth pieces performed?\nis_exception(is_sat(ForAll([p:pieces], Count([i:instruments], performed(p, i) == performed(p+1, i)) == 1))) ::: A) fiddle\nis_exception(is_sat(ForAll([p:pieces], Count([i:instruments], performed(p, i) == performed(p+1, i)) == 1))) ::: B) guitar\nis_exception(is_sat(ForAll([p:pieces], Count([i:instruments], performed(p, i) == performed(p+1, i)) == 1))) ::: C) harp\nis_exception(is_sat(ForAll([p:pieces], Count([i:instruments], performed(p, i) == performed(p+1, i)) == 1))) ::: D) lute\nis_exception(is_sat(ForAll([p:pieces], Count([i:instruments], performed(p, i) == performed(p+1, i)) == 1))) ::: E) mandolin\n------"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_4_22",
    "context": "Musicians perform each of exactly five pieces—Nexus, Onyx, Synchrony, Tailwind, and Virtual—once, and one at a time; the pieces are performed successively (though not necessarily in that order). Each piece is performed with exactly two instruments: Nexus with fiddle and lute, Onyx with harp and mandolin, Synchrony with guitar and harp, Tailwind with fiddle and guitar, and Virtual with lute and mandolin. The following conditions must apply: Each piece shares one instrument with the piece performed immediately before it or after it (or both). Either Nexus or Tailwind is performed second.",
    "question": "If each piece (except the fifth) shares one instrument with the piece performed immediately after it, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Virtual is performed first.",
      "B) Synchrony is performed second.",
      "C) Onyx is performed third.",
      "D) Nexus is performed fourth.",
      "E) Tailwind is performed fifth."
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([Nexus, Onyx, Synchrony, Tailwind, Virtual])\ninstruments = EnumSort([fiddle, harp, guitar, lute, mandolin])\nperformed = Function([pieces, instruments] -> [bool])\n\n# Constraints\nForAll([p:pieces], Count([i:instruments], performed(p, i)) == 2) ::: Each piece is performed with exactly two instruments\nForAll([p:pieces], And(performed(p, fiddle), performed(p, lute)), performed(p, harp), performed(p, guitar), performed(p, mandolin)) ::: Nexus with fiddle and lute, Onyx with harp and mandolin, Synchrony with guitar and harp, Tailwind with fiddle and guitar, and Virtual with lute and mandolin\nForAll([p:pieces], Count([p2:pieces], And(p!= p2, Count([i:instruments], performed(p, i) == performed(p2, i)) == 1)) == 1) ::: Each piece shares one instrument with the piece performed immediately before it or after it (or both)\nOr(performed(Nexus, fiddle), performed(Tailwind, fiddle)) ::: Either Nexus or Tailwind is performed second\n\n# Options\nQuestion ::: If each piece (except the fifth) shares one instrument with the piece performed immediately after it, then which one of the following could be true?\nis_exception(is_sat(performed(Virtual, lute))) ::: (A)\nis_exception(is_sat(performed(Synchrony, guitar))) ::: (B)\nis_exception(is_sat(performed(Onyx, harp))) ::: (C)\nis_exception(is_sat(performed(Nexus, fiddle))) ::: (D)\nis_exception(is_sat(performed(Tailwind, fiddle))) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—is to be divided into two groups of three"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_4_23",
    "context": "Musicians perform each of exactly five pieces—Nexus, Onyx, Synchrony, Tailwind, and Virtual—once, and one at a time; the pieces are performed successively (though not necessarily in that order). Each piece is performed with exactly two instruments: Nexus with fiddle and lute, Onyx with harp and mandolin, Synchrony with guitar and harp, Tailwind with fiddle and guitar, and Virtual with lute and mandolin. The following conditions must apply: Each piece shares one instrument with the piece performed immediately before it or after it (or both). Either Nexus or Tailwind is performed second.",
    "question": "Each of the following could be the piece performed first EXCEPT:",
    "answer": "B",
    "options": [
      "A) Nexus",
      "B) Onyx",
      "C) Synchrony",
      "D) Tailwind",
      "E) Virtual"
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([Nexus, Onyx, Synchrony, Tailwind, Virtual])\ninstruments = EnumSort([fiddle, harp, guitar, lute, mandolin])\nperformed = Function([pieces, instruments] -> [bool])\n\n# Constraints\nForAll([p:pieces], Count([i:instruments], performed(p, i)) == 2) ::: Each piece is performed with exactly two instruments\nForAll([p:pieces], Count([p2:pieces], And(p!= p2, Count([i:instruments], performed(p, i) == performed(p2, i)) == 1)) == 1) ::: Each piece shares one instrument with the piece performed immediately before it or after it (or both)\nOr(performed(Nexus, fiddle), performed(Tailwind, fiddle)) ::: Either Nexus or Tailwind is performed second\n\n# Options\nQuestion ::: Each of the following could be the piece performed first EXCEPT:\nis_exception(is_sat(performed(Nexus, fiddle))) ::: (A)\nis_exception(is_sat(performed(Onyx, harp))) ::: (B)\nis_exception(is_sat(performed(Synchrony, guitar))) ::: (C)\nis_exception(is_sat(performed(Tailwind, fiddle))) ::: (D)\nis_exception(is_sat(performed(Virtual, lute))) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—is to be divided into two groups of three. Each person will be in exactly one of the two groups. The following conditions apply: A and B are in the same group. C and D are in the same group. E and F are in the same group.\nQuestion:\nWhich one of the following could be the two groups?\nChoices:\n(A) A, B, C; D, E, F\n(B) A, B, D; C, E, F\n(C) A, B, E; C"
    ]
  },
  {
    "id": "ar_lsat_200210_2-G_4_24",
    "context": "Musicians perform each of exactly five pieces—Nexus, Onyx, Synchrony, Tailwind, and Virtual—once, and one at a time; the pieces are performed successively (though not necessarily in that order). Each piece is performed with exactly two instruments: Nexus with fiddle and lute, Onyx with harp and mandolin, Synchrony with guitar and harp, Tailwind with fiddle and guitar, and Virtual with lute and mandolin. The following conditions must apply: Each piece shares one instrument with the piece performed immediately before it or after it (or both). Either Nexus or Tailwind is performed second.",
    "question": "If Synchrony is performed fifth, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Nexus is performed third.",
      "B) Onyx is performed third.",
      "C) Tailwind is performed fourth.",
      "D) Virtual is performed first.",
      "E) Virtual is performed second."
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([Nexus, Onyx, Synchrony, Tailwind, Virtual])\ninstruments = EnumSort([fiddle, harp, guitar, lute, mandolin])\nperformed = Function([pieces, instruments] -> [bool])\n\n# Constraints\nForAll([p:pieces], Count([i:instruments], performed(p, i)) == 2) ::: each piece is performed with exactly two instruments\nForAll([p:pieces], And(performed(p, fiddle), performed(p, lute)), performed(p, harp), performed(p, guitar), performed(p, mandolin)) ::: Nexus with fiddle and lute, Onyx with harp and mandolin, Synchrony with guitar and harp, Tailwind with fiddle and guitar, and Virtual with lute and mandolin\nForAll([p:pieces], Count([p2:pieces], And(p!= p2, Or(performed(p, i), performed(p2, i)))) == 1) ::: Each piece shares one instrument with the piece performed immediately before it or after it (or both)\nOr(performed(Nexus, fiddle), performed(Tailwind, fiddle)) ::: Either Nexus or Tailwind is performed second\nperformed(Synchrony, guitar) ::: Synchrony is performed fifth\n\n# Options\nQuestion ::: If Synchrony is performed fifth, then which one of the following could be true?\nis_valid(Exists([p:pieces], performed(p, fiddle) && performed(p, lute) && performed(p, 3))) ::: (A)\nis_valid(Exists([p:pieces], performed(p, harp) && performed(p, mandolin) && performed(p, 3))) ::: (B)\nis_valid(Exists([p:pieces], performed(p, fiddle) && performed(p, guitar) && performed(p, 4))) ::: (C)\nis_valid(Exists([p:pieces], performed(p, lute) && performed(p, mandolin) && performed(p, 1))) ::: (D)"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_1_1",
    "context": "Eight files will be ordered from first to eighth. Each file falls into exactly one of three categories: red files (H, M, O), green files (P, V, X), or yellow files (T, Z). The files must be ordered according to the following conditions: H must be placed into some position before O, but H cannot immediately precede O. X must be placed into some position before V. X and V must be separated by the same number of files as separate H and O. Z must immediately precede M. The first file cannot be a red file.",
    "question": "Which one of the following is an acceptable ordering of the files from first to eighth?",
    "answer": "D",
    "options": [
      "A) H X O V Z M P T",
      "B) P M Z H X O V T",
      "C) P Z M H O T X V",
      "D) X Z M V H T P O",
      "E) Z M H P O X V T"
    ],
    "raw_logic_programs": [
      "# Declarations\nfiles = EnumSort([H, M, O, P, V, X, Z, T])\ncategories = EnumSort([red, green, yellow])\ncategory = Function([files] -> [categories])\nForAll([f:files], And(1 <= category(f), category(f) <= 3))\n\n# Constraints\nForAll([f:files], And(1 <= category(f), category(f) <= 3))\nForAll([f:files], And(1 <= category(f), category(f) <= 3))\nForAll([f:files], And(1 <= category(f), category(f) <= 3))\nForAll([f:files], And(1 <= category(f), category(f) <= 3))\nForAll([f:files], And(1 <= category(f), category(f) <= 3))\nForAll([f:files], And(1 <= category(f), category(f) <= 3))\nForAll([f:files], And(1 <= category(f), category(f) <= 3))\nForAll([f:files], And(1 <= category(f), category(f) <= 3))\n\n# Options\nQuestion ::: Which one of the following is an acceptable ordering of the files from first to eighth?\nis_valid(ForAll([f:files], And(1 <= category(f), category(f) <= 3))) ::: A) H X O V Z M P T\nis_valid(ForAll([f:files], And(1 <= category(f), category(f) <= 3))) ::: B) P M Z H X O V T\nis_valid(ForAll([f:files], And(1 <= category(f), category(f) <= 3))) ::: C) P Z M H O T X V\nis_valid(ForAll([f:files], And(1 <= category(f), category(f) <= 3))) ::: D) X Z M V H T P O\nis_valid(ForAll([f:files], And(1 <= category(f), category(f) <= 3))) ::: E) Z M H P O X V T"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_1_2",
    "context": "Eight files will be ordered from first to eighth. Each file falls into exactly one of three categories: red files (H, M, O), green files (P, V, X), or yellow files (T, Z). The files must be ordered according to the following conditions: H must be placed into some position before O, but H cannot immediately precede O. X must be placed into some position before V. X and V must be separated by the same number of files as separate H and O. Z must immediately precede M. The first file cannot be a red file.",
    "question": "The largest possible number of files that can separate Z from H is",
    "answer": "C",
    "options": [
      "A) two",
      "B) three",
      "C) four",
      "D) five",
      "E) six"
    ],
    "raw_logic_programs": [
      "# Declarations\nfiles = EnumSort([H, M, O, P, V, X, Z, T])\ncategories = EnumSort([red, green, yellow])\ncategory = Function([files] -> [categories])\nForAll([f:files], And(1 <= category(f), category(f) <= 3))\n\n# Constraints\nForAll([f:files], And(1 <= category(f), category(f) <= 3)) ::: Each file falls into exactly one of three categories\nAnd(category(H) == red, category(O) == red) ::: H must be placed into some position before O, but H cannot immediately precede O\nAnd(category(X) == green, category(V) == green) ::: X must be placed into some position before V\nAnd(category(X) == category(V), category(H) == category(O)) ::: X and V must be separated by the same number of files as separate H and O\nAnd(category(Z) == yellow, category(M) == red) ::: Z must immediately precede M\nNot(category(H) == red) ::: The first file cannot be a red file\n\n# Options\nQuestion ::: The largest possible number of files that can separate Z from H is\nis_sat(ForAll([f:files], category(f) == category(Z))) ::: A) two\nis_sat(ForAll([f:files], category(f) == category(Z))) ::: B) three\nis_sat(ForAll([f:files], category(f) == category(Z))) ::: C) four\nis_sat(ForAll([f:files], category(f) == category(Z))) ::: D) five\nis_sat(ForAll([f:files], category(f) == category(Z))) ::: E) six\n------\nProblem:\nA group of eight people—A, B, C, D, E, F, G, and H—will be seated in a row of eight chairs. Each person will sit in exactly one chair, and no two people will sit in the same chair. The seating must conform to the following conditions: A sits in the chair immediately to"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_1_3",
    "context": "Eight files will be ordered from first to eighth. Each file falls into exactly one of three categories: red files (H, M, O), green files (P, V, X), or yellow files (T, Z). The files must be ordered according to the following conditions: H must be placed into some position before O, but H cannot immediately precede O. X must be placed into some position before V. X and V must be separated by the same number of files as separate H and O. Z must immediately precede M. The first file cannot be a red file.",
    "question": "If each of the three red files is immediately followed by a green file, which one of the following must be a yellow file?",
    "answer": "A",
    "options": [
      "A) the first",
      "B) the second",
      "C) the third",
      "D) the fourth",
      "E) the fifth"
    ],
    "raw_logic_programs": [
      "# Declarations\nfiles = EnumSort([H, M, O, P, V, X, T, Z])\ncategories = EnumSort([red, green, yellow])\ncategory = Function([files] -> [categories])\nForAll([f:files], And(1 <= category(f), category(f) <= 3))\n\n# Constraints\nForAll([f:files], And(1 <= category(f), category(f) <= 3)) ::: Each file falls into exactly one of three categories\nAnd(category(H) == red, category(M) == red, category(O) == red) ::: red files (H, M, O)\nAnd(category(P) == green, category(V) == green, category(X) == green) ::: green files (P, V, X)\nAnd(category(T) == yellow, category(Z) == yellow) ::: yellow files (T, Z)\nAnd(category(H) == category(O), category(P) == category(V), category(T) == category(Z)) ::: The files must be ordered according to the following conditions\nAnd(category(H) == red, category(O) == red, category(P) == green, category(V) == green, category(T) == yellow, category(Z) == yellow) ::: The files must be ordered according to the following conditions\nAnd(category(H) == red, category(O) == red, category(P) == green, category(V) == green, category(T) == yellow, category(Z) == yellow) ::: The files must be ordered according to the following conditions\nAnd(category(H) == red, category(O) == red, category(P) == green, category(V) == green, category(T) == yellow, category(Z) == yellow) ::: The files must be ordered according to the following conditions\nAnd(category(H) == red, category(O) == red, category(P) == green, category(V) == green, category(T) == yellow, category(Z) == yellow) ::: The files must be ordered according to the following conditions\nAnd(category(H) == red, category(O) == red, category"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_1_4",
    "context": "Eight files will be ordered from first to eighth. Each file falls into exactly one of three categories: red files (H, M, O), green files (P, V, X), or yellow files (T, Z). The files must be ordered according to the following conditions: H must be placed into some position before O, but H cannot immediately precede O. X must be placed into some position before V. X and V must be separated by the same number of files as separate H and O. Z must immediately precede M. The first file cannot be a red file.",
    "question": "The largest possible number of files that can separate X from V is",
    "answer": "C",
    "options": [
      "A) three",
      "B) four",
      "C) five",
      "D) six",
      "E) seven"
    ],
    "raw_logic_programs": [
      "# Declarations\nfiles = EnumSort([H, M, O, P, V, X, T, Z])\ncategories = EnumSort([red, green, yellow])\ncategory = Function([files] -> [categories])\nForAll([f:files], And(1 <= category(f), category(f) <= 3))\n\n# Constraints\nForAll([f:files], And(1 <= category(f), category(f) <= 3)) ::: Each file falls into exactly one of three categories\nAnd(category(H) == red, category(O) == red) ::: H must be placed into some position before O, but H cannot immediately precede O\nAnd(category(X) == green, category(V) == green) ::: X must be placed into some position before V\nAnd(category(X) < category(V), Count([f:files], category(f) == category(X)) == Count([f:files], category(f) == category(V))) ::: X and V must be separated by the same number of files as separate H and O\nAnd(category(Z) == yellow, category(M) == red) ::: Z must immediately precede M\ncategory(H)!= 1 ::: The first file cannot be a red file\n\n# Options\nQuestion ::: The largest possible number of files that can separate X from V is\nis_sat(Count([f:files], category(f) == category(X)) == 4) ::: A) three\nis_sat(Count([f:files], category(f) == category(X)) == 5) ::: B) four\nis_sat(Count([f:files], category(f) == category(X)) == 6) ::: C) five\nis_sat(Count([f:files], category(f) == category(X)) == 7) ::: D) six\nis_sat(Count([f:files], category(f) == category(X)) == 8) ::: E) seven\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The following conditions apply: The number of managers is 1"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_1_5",
    "context": "Eight files will be ordered from first to eighth. Each file falls into exactly one of three categories: red files (H, M, O), green files (P, V, X), or yellow files (T, Z). The files must be ordered according to the following conditions: H must be placed into some position before O, but H cannot immediately precede O. X must be placed into some position before V. X and V must be separated by the same number of files as separate H and O. Z must immediately precede M. The first file cannot be a red file.",
    "question": "If Z is placed in the fifth position, then which one of the following is a complete and accurate list of the positions, any one of which could be H's position?",
    "answer": "C",
    "options": [
      "A) first, third, fourth",
      "B) first, second, third",
      "C) second, third, fourth",
      "D) second, third, fourth, sixth",
      "E) third, fourth, sixth, seventh"
    ],
    "raw_logic_programs": [
      "# Declarations\nfiles = EnumSort([H, M, O, P, V, X, T, Z])\ncategories = EnumSort([red, green, yellow])\npositions = EnumSort([first, second, third, fourth, fifth, sixth, seventh, eighth])\nordered = Function([files, positions] -> [bool])\nForAll([f:files], And(1 <= ordered(f, first), ordered(f, first) <= 8))\n\n# Constraints\nForAll([f:files], Or(categories(f) == red, categories(f) == green, categories(f) == yellow)) ::: Each file falls into exactly one of three categories\nAnd(categories(H) == red, categories(M) == red, categories(O) == red) ::: red files (H, M, O)\nAnd(categories(P) == green, categories(V) == green, categories(X) == green) ::: green files (P, V, X)\nAnd(categories(T) == yellow, categories(Z) == yellow) ::: yellow files (T, Z)\nAnd(ordered(H, first), Not(ordered(O, first))) ::: The first file cannot be a red file\nAnd(ordered(H, first), Not(ordered(O, first))) ::: The first file cannot be a red file\nAnd(ordered(H, first), Not(ordered(O, first))) ::: The first file cannot be a red file\nAnd(ordered(H, first), Not(ordered(O, first))) ::: The first file cannot be a red file\nAnd(ordered(H, first), Not(ordered(O, first))) ::: The first file cannot be a red file\nAnd(ordered(H, first), Not(ordered(O, first))) ::: The first file cannot be a red file\nAnd(ordered(H, first), Not(ordered(O, first))) ::: The first file cannot be a red file\nAnd(ordered(H, first), Not(ordered(O, first))) ::: The first file cannot be a red file\nAnd(ordered(H, first), Not(ordered(O, first))) ::: The first file cannot be a red file\nAnd(ordered(H"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_2_6",
    "context": "Exactly three employees of Capital Enterprises—Maria, Suki, and Tate—attend a three-day conference together. Each day, there are exactly three sessions on the three topics of the conference—one on hiring, one on investing, and one on regulations. The following rules govern the conference: Each conference participant attends exactly two sessions, which are on different topics and on different days. Neither Maria nor Suki attends any session on investing. Tate does not attend any session on the third day. At most two Capital employees attend any given session together.",
    "question": "What is the maximum number of sessions attended by at least one Capital employee?",
    "answer": "D",
    "options": [
      "A) three",
      "B) four",
      "C) five",
      "D) six",
      "E) seven"
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Maria, Suki, Tate])\ntopics = EnumSort([hiring, investing, regulations])\ndays = EnumSort([first, second, third])\nattends = Function([employees, topics, days] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([t:topics, d:days], attends(e, t, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([t:topics], Count([e:employees, d:days], attends(e, t, d)) >= 1) ::: at least one Capital employee attends each session\nForAll([e:employees], Count([t:topics, d:days], attends(e, t, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([t:topics, d:days], attends(e, t, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([t:topics, d:days], attends(e, t, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([t:topics, d:days], attends(e, t, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([t:topics, d:days], attends(e, t, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([t:topics, d:days], attends(e, t, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([t:topics, d:days], attends(e, t, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([t:topics, d:"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_2_7",
    "context": "Exactly three employees of Capital Enterprises—Maria, Suki, and Tate—attend a three-day conference together. Each day, there are exactly three sessions on the three topics of the conference—one on hiring, one on investing, and one on regulations. The following rules govern the conference: Each conference participant attends exactly two sessions, which are on different topics and on different days. Neither Maria nor Suki attends any session on investing. Tate does not attend any session on the third day. At most two Capital employees attend any given session together.",
    "question": "Which one of the following must be false?",
    "answer": "E",
    "options": [
      "A) Maria attends sessions only on the first two days.",
      "B) Suki attends sessions only on the last two days.",
      "C) Exactly two Capital employees attend a session together on the second day.",
      "D) Exactly one session is attended by one or more Capital employees on the second day.",
      "E) Exactly three sessions are attended by one or more Capital employees on the third day."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Maria, Suki, Tate])\ntopics = EnumSort([hiring, investing, regulations])\ndays = EnumSort([first, second, third])\nattends = Function([employees, topics, days] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([t:topics, d:days], attends(e, t, d)) == 2) ::: Each conference participant attends exactly two sessions, which are on different topics and on different days\nAnd(Not(attends(Maria, investing, _)), Not(attends(Suki, investing, _))) ::: Neither Maria nor Suki attends any session on investing\nNot(attends(Tate, _, third)) ::: Tate does not attend any session on the third day\nForAll([t:topics, d:days], Count([e:employees], attends(e, t, d)) <= 2) ::: At most two Capital employees attend any given session together\n\n# Options\nQuestion ::: Which one of the following must be false?\nis_exception(is_sat(ForAll([d:days], Not(attends(Maria, _, d))))) ::: (A)\nis_exception(is_sat(ForAll([d:days], Not(attends(Suki, _, d))))) ::: (B)\nis_exception(is_sat(Count([t:topics, d:days], attends(_, t, d)) == 2))) ::: (C)\nis_exception(is_sat(Count([t:topics, d:days], attends(_, t, d)) == 1))) ::: (D)\nis_exception(is_sat(Count([t:topics, d:days], attends(_, t, d)) == 3))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_2_8",
    "context": "Exactly three employees of Capital Enterprises—Maria, Suki, and Tate—attend a three-day conference together. Each day, there are exactly three sessions on the three topics of the conference—one on hiring, one on investing, and one on regulations. The following rules govern the conference: Each conference participant attends exactly two sessions, which are on different topics and on different days. Neither Maria nor Suki attends any session on investing. Tate does not attend any session on the third day. At most two Capital employees attend any given session together.",
    "question": "If exactly two sessions on the third day are attended by one or more Capital employees, then which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Exactly two sessions on the first day are attended by one or more Capital employees.",
      "B) Exactly two sessions on the second day are attended by one or more Capital employees.",
      "C) Maria and Suki do not attend any session together.",
      "D) Maria and Tate do not attend any session together.",
      "E) Tate attends a session on investing."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Maria, Suki, Tate])\ntopics = EnumSort([hiring, investing, regulations])\ndays = EnumSort([first, second, third])\nattends = Function([employees, topics, days] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([t:topics, d:days], attends(e, t, d)) == 2) ::: Each conference participant attends exactly two sessions, which are on different topics and on different days\nAnd(Not(attends(Maria, investing, _)), Not(attends(Suki, investing, _))) ::: Neither Maria nor Suki attends any session on investing\nNot(attends(Tate, _, third)) ::: Tate does not attend any session on the third day\nForAll([t:topics, d:days], Count([e:employees], attends(e, t, d)) <= 2) ::: At most two Capital employees attend any given session together\n\n# Options\nQuestion ::: If exactly two sessions on the third day are attended by one or more Capital employees, then which one of the following must be true?\nis_sat(ForAll([t:topics, d:days], Count([e:employees], attends(e, t, d)) == 2)) ::: (A)\nis_sat(ForAll([t:topics, d:days], Count([e:employees], attends(e, t, d)) == 2)) ::: (B)\nis_sat(ForAll([t:topics, d:days], Count([e:employees], attends(e, t, d)) == 2)) ::: (C)\nis_sat(ForAll([t:topics, d:days], Count([e:employees], attends(e, t, d"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_2_9",
    "context": "Exactly three employees of Capital Enterprises—Maria, Suki, and Tate—attend a three-day conference together. Each day, there are exactly three sessions on the three topics of the conference—one on hiring, one on investing, and one on regulations. The following rules govern the conference: Each conference participant attends exactly two sessions, which are on different topics and on different days. Neither Maria nor Suki attends any session on investing. Tate does not attend any session on the third day. At most two Capital employees attend any given session together.",
    "question": "Each of the following is possible EXCEPT:",
    "answer": "B",
    "options": [
      "A) Every session attended by at least one Capital employee is attended by exactly one Capital employee.",
      "B) Every session attended by at least one Capital employee is attended by exactly two Capital employees.",
      "C) Every session attended by Maria is also attended by Suki.",
      "D) Every session attended by Suki is also attended by Tate.",
      "E) Every session attended by Tate is also attended by Maria."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Maria, Suki, Tate])\ntopics = EnumSort([hiring, investing, regulations])\nsessions = Function([employees, topics] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([t:topics], sessions(e, t)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], And(sessions(e, hiring), sessions(e, regulations))) ::: Neither Maria nor Suki attends any session on investing\nNot(sessions(Tate, regulations)) ::: Tate does not attend any session on the third day\nForAll([t:topics], Count([e:employees], sessions(e, t)) <= 2) ::: At most two Capital employees attend any given session together\n\n# Options\nQuestion ::: Each of the following is possible EXCEPT:\nis_exception(is_sat(ForAll([t:topics], Count([e:employees], sessions(e, t)) == 1))) ::: (A)\nis_exception(is_sat(ForAll([t:topics], Count([e:employees], sessions(e, t)) == 2))) ::: (B)\nis_exception(is_sat(ForAll([t:topics], sessions(Maria, t) == sessions(Suki, t)))) ::: (C)\nis_exception(is_sat(ForAll([t:topics], sessions(Suki, t) == sessions(Tate, t)))) ::: (D)\nis_exception(is_sat(ForAll([t:topics], sessions(Tate, t) == sessions(Maria, t)))) ::: (E)\n------\nProblem:\nA company has exactly six employees—Fred, Gina, Hank, Iris, Jill,"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_2_10",
    "context": "Exactly three employees of Capital Enterprises—Maria, Suki, and Tate—attend a three-day conference together. Each day, there are exactly three sessions on the three topics of the conference—one on hiring, one on investing, and one on regulations. The following rules govern the conference: Each conference participant attends exactly two sessions, which are on different topics and on different days. Neither Maria nor Suki attends any session on investing. Tate does not attend any session on the third day. At most two Capital employees attend any given session together.",
    "question": "If all three sessions on the first day are attended by one or more Capital employees, then which one of the following must be false?",
    "answer": "A",
    "options": [
      "A) Maria and Suki attend a session together on the third day.",
      "B) Suki and Tate attend a session together on the second day.",
      "C) Maria attends a session on hiring on the second day.",
      "D) Suki attends a session on regulations on the third day.",
      "E) Tate attends a session on investing on the first day."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Maria, Suki, Tate])\ntopics = EnumSort([hiring, investing, regulations])\ndays = EnumSort([first, second, third])\nattends = Function([employees, topics, days] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([t:topics, d:days], attends(e, t, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], And(attends(e, hiring, d), attends(e, investing, d)), attends(e, regulations, d)) ::: which are on different topics and on different days\nForAll([e:employees], Implies(e == Maria, Not(attends(e, investing, d)))) ::: Neither Maria nor Suki attends any session on investing\nForAll([e:employees], Implies(e == Tate, Not(attends(e, t, third)))) ::: Tate does not attend any session on the third day\nForAll([t:topics, d:days], Count([e:employees], attends(e, t, d)) <= 2) ::: At most two Capital employees attend any given session together\n\n# Options\nQuestion ::: If all three sessions on the first day are attended by one or more Capital employees, then which one of the following must be false?\nis_exception(is_sat(And(attends(Maria, _, first), attends(Suki, _, first)))) ::: (A)\nis_exception(is_sat(And(attends(Suki, _, second), attends(Tate, _, second)))) ::: (B)\nis_exception(is_sat(And(attends(Maria, hiring, second), attends(Maria, _, first)))) ::: (C"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_2_11",
    "context": "Exactly three employees of Capital Enterprises—Maria, Suki, and Tate—attend a three-day conference together. Each day, there are exactly three sessions on the three topics of the conference—one on hiring, one on investing, and one on regulations. The following rules govern the conference: Each conference participant attends exactly two sessions, which are on different topics and on different days. Neither Maria nor Suki attends any session on investing. Tate does not attend any session on the third day. At most two Capital employees attend any given session together.",
    "question": "If Maria and Tate are the only Capital employees to attend a session on the first day, then each of the following could be true EXCEPT:",
    "answer": "A",
    "options": [
      "A) Maria and Suki attend exactly two sessions together.",
      "B) Maria and Tate attend exactly two sessions together.",
      "C) Suki and Tate attend exactly one session together.",
      "D) Maria attends a session on regulations on the second day.",
      "E) Tate attends a session on hiring on the second day."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Maria, Suki, Tate])\ntopics = EnumSort([hiring, investing, regulations])\nsessions = Function([employees, topics] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([t:topics], sessions(e, t)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([d:days], sessions(e, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([t:topics], sessions(e, t)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([d:days], sessions(e, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([t:topics], sessions(e, t)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([d:days], sessions(e, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([t:topics], sessions(e, t)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([d:days], sessions(e, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([t:topics], sessions(e, t)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count([d:days], sessions(e, d)) == 2) ::: Each conference participant attends exactly two sessions\nForAll([e:employees], Count"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_3_12",
    "context": "Of the five Pohl children—Sara, Theo, Uma, Will, and Zoe—three are left-handed and two are right-handed. Each of the five children was born in a different one of seven calendar years, 1990 through 1996. The following conditions apply: No two left-handed children were born in consecutive years. No two right-handed children were born in consecutive years. Sara, who is left-handed, was born before Uma. Zoe was born before both Theo and Will. A left-handed child was born in 1991. Uma, who is right-handed, was born in 1993.",
    "question": "Which one of the following could be an accurate matching of each Pohl child with the year in which that child was born?",
    "answer": "E",
    "options": [
      "A) Sara: 1990; Zoe: 1992; Uma: 1993; Will: 1994; and Theo: 1995",
      "B) Sara: 1991; Uma: 1993; Theo: 1994; Zoe: 1995; and Will: 1996",
      "C) Zoe: 1990; Sara: 1991; Uma: 1992; Theo: 1994; and Will: 1995",
      "D) Zoe: 1990; Sara: 1991; Uma: 1993; Theo: 1994; and Will: 1995",
      "E) Zoe: 1990; Sara: 1991; Uma: 1993; Theo: 1994; and Will: 1996"
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Sara, Theo, Uma, Will, Zoe])\nyears = EnumSort([1990, 1991, 1992, 1993, 1994, 1995, 1996])\nhanded = EnumSort([left, right])\nborn = Function([children, years] -> [handed])\n\n# Constraints\nForAll([c:children], Count([y:years], born(c, y) == left) + Count([y:years], born(c, y) == right) == 1) ::: three are left-handed and two are right-handed\nForAll([c:children], Count([y:years], born(c, y) == left) == 3) ::: three are left-handed\nForAll([c:children], Count([y:years], born(c, y) == right) == 2) ::: two are right-handed\nForAll([c:children], Count([y:years], born(c, y) == left) == 3) ::: three are left-handed\nForAll([c:children], Count([y:years], born(c, y) == right) == 2) ::: two are right-handed\nForAll([c:children], Count([y:years], born(c, y) == left) == 3) ::: three are left-handed\nForAll([c:children], Count([y:years], born(c, y) == right) == 2) ::: two are right-handed\nForAll([c:children], Count([y:years], born(c, y) == left) == 3) ::: three are left-handed\nForAll([c:children], Count([y:years], born(c, y) == right) == 2) :"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_3_13",
    "context": "Of the five Pohl children—Sara, Theo, Uma, Will, and Zoe—three are left-handed and two are right-handed. Each of the five children was born in a different one of seven calendar years, 1990 through 1996. The following conditions apply: No two left-handed children were born in consecutive years. No two right-handed children were born in consecutive years. Sara, who is left-handed, was born before Uma. Zoe was born before both Theo and Will. A left-handed child was born in 1991. Uma, who is right-handed, was born in 1993.",
    "question": "If Sara was born before Zoe was born, then which one of the following statements CANNOT be true?",
    "answer": "D",
    "options": [
      "A) Will is left-handed.",
      "B) Zoe is left-handed.",
      "C) Theo was born after Will was born.",
      "D) Uma was born after Zoe was born.",
      "E) No child was born in 1990."
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Sara, Theo, Uma, Will, Zoe])\nhandedness = EnumSort([left, right])\nborn = Function([children, int] -> [bool])\n\n# Constraints\nForAll([c:children], Count([h:handedness], born(c, h)) == 1) ::: each child is either left-handed or right-handed\nAnd(born(Sara, left), born(Uma, right)) ::: Sara, who is left-handed, was born before Uma\nAnd(born(Zoe, left), born(Theo, right), born(Will, right)) ::: Zoe was born before both Theo and Will\nAnd(born(Sara, left), born(Theo, left), born(Will, left)) ::: No two left-handed children were born in consecutive years\nAnd(born(Uma, right), born(Will, right), born(Zoe, right)) ::: No two right-handed children were born in consecutive years\nborn(Sara, 1991) ::: A left-handed child was born in 1991\nborn(Uma, 1993) ::: Uma, who is right-handed, was born in 1993\n\n# Options\nQuestion ::: If Sara was born before Zoe was born, then which one of the following statements CANNOT be true?\nis_exception(is_sat(born(Will, left))) ::: (A)\nis_exception(is_sat(born(Zoe, left))) ::: (B)\nis_exception(is_sat(born(Theo, 1994))) ::: (C)\nis_exception(is_sat(born(Uma, 1994))) ::: (D)\nis_exception(is_sat(ForAll([y:int], Not("
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_3_14",
    "context": "Of the five Pohl children—Sara, Theo, Uma, Will, and Zoe—three are left-handed and two are right-handed. Each of the five children was born in a different one of seven calendar years, 1990 through 1996. The following conditions apply: No two left-handed children were born in consecutive years. No two right-handed children were born in consecutive years. Sara, who is left-handed, was born before Uma. Zoe was born before both Theo and Will. A left-handed child was born in 1991. Uma, who is right-handed, was born in 1993.",
    "question": "Which one of the following must be false?",
    "answer": "C",
    "options": [
      "A) None of the children was born in 1990, nor was a child born in 1992.",
      "B) None of the children was born in 1992, nor was a child born in 1995.",
      "C) None of the children was born in 1994, nor was a child born in 1996.",
      "D) One of the children was born in 1990, and another in 1993.",
      "E) One of the children was born in 1993, and another in 1995."
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Sara, Theo, Uma, Will, Zoe])\nyears = EnumSort([1990, 1991, 1992, 1993, 1994, 1995, 1996])\nborn = Function([children, years] -> [bool])\nleft_handed = Function([children] -> [bool])\nright_handed = Function([children] -> [bool])\n\n# Constraints\nForAll([c:children], Or(left_handed(c), right_handed(c))) ::: three are left-handed and two are right-handed\nForAll([c:children], And(1990 <= born(c), born(c) <= 1996)) ::: each of the five children was born in a different one of seven calendar years\nForAll([c:children], Implies(left_handed(c), Not(And(born(c) == born(c-1), born(c) == born(c+1))))) ::: No two left-handed children were born in consecutive years\nForAll([c:children], Implies(right_handed(c), Not(And(born(c) == born(c-1), born(c) == born(c+1))))) ::: No two right-handed children were born in consecutive years\nAnd(born(Sara) < born(Uma), left_handed(Sara)) ::: Sara, who is left-handed, was born before Uma\nAnd(born(Zoe) < born(Theo), born(Zoe) < born(Will)) ::: Zoe was born before both Theo and Will\nAnd(born(Uma) == 1993, right_handed(Uma)) ::: Uma, who is right-handed, was born in 1993\nAnd(born"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_3_15",
    "context": "Of the five Pohl children—Sara, Theo, Uma, Will, and Zoe—three are left-handed and two are right-handed. Each of the five children was born in a different one of seven calendar years, 1990 through 1996. The following conditions apply: No two left-handed children were born in consecutive years. No two right-handed children were born in consecutive years. Sara, who is left-handed, was born before Uma. Zoe was born before both Theo and Will. A left-handed child was born in 1991. Uma, who is right-handed, was born in 1993.",
    "question": "If Theo was born after Will was born, then how many sequential orderings of the children, from firstborn to lastborn, are possible?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Sara, Theo, Uma, Will, Zoe])\nhandedness = EnumSort([left, right])\nborn = Function([children, int] -> [bool])\n\n# Constraints\nForAll([c:children], Count([h:handedness], born(c, h)) == 1) ::: each child is either left-handed or right-handed\nForAll([c:children], Count([y:int], born(c, y)) == 1) ::: each child was born in a different one of seven calendar years\nForAll([c:children], And(born(c, left), Not(Exists([c2:children], And(c2!= c, born(c2, left), c2 < c))))) ::: No two left-handed children were born in consecutive years\nForAll([c:children], And(born(c, right), Not(Exists([c2:children], And(c2!= c, born(c2, right), c2 < c))))) ::: No two right-handed children were born in consecutive years\nborn(Sara, left) ::: Sara, who is left-handed, was born before Uma\nborn(Zoe, left) ::: Zoe was born before both Theo and Will\nborn(Uma, right) ::: Uma, who is right-handed, was born in 1993\nborn(1991, left) ::: A left-handed child was born in 1991\n\n# Options\nQuestion ::: If Theo was born after Will was born, then how many sequential orderings of the children, from firstborn to lastborn, are possible?\nis_sat(ForAll([c:children], born(c, left) == born(c, right))) ::: A) one\nis_sat(ForAll([c:children], born(c, left) == Not(born("
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_3_16",
    "context": "Of the five Pohl children—Sara, Theo, Uma, Will, and Zoe—three are left-handed and two are right-handed. Each of the five children was born in a different one of seven calendar years, 1990 through 1996. The following conditions apply: No two left-handed children were born in consecutive years. No two right-handed children were born in consecutive years. Sara, who is left-handed, was born before Uma. Zoe was born before both Theo and Will. A left-handed child was born in 1991. Uma, who is right-handed, was born in 1993.",
    "question": "If none of the children was born in 1995, then which one of the following statements must be true?",
    "answer": "D",
    "options": [
      "A) Theo was born in 1994.",
      "B) Will was born in 1994.",
      "C) Will was born in 1996.",
      "D) Zoe was born in 1990.",
      "E) Zoe was born in 1994."
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Sara, Theo, Uma, Will, Zoe])\nhandedness = EnumSort([left, right])\nborn = Function([children, int] -> [bool])\n\n# Constraints\nForAll([c:children], Count([h:handedness], born(c, h)) == 1) ::: each child is either left-handed or right-handed\nAnd(ForAll([c:children], Not(born(c, left) == born(c, right))), Count([c:children], born(c, left)) == 3, Count([c:children], born(c, right)) == 2) ::: three are left-handed and two are right-handed\nForAll([c:children], Count([y:int], born(c, y)) == 1) ::: each child was born in a different one of seven calendar years\nAnd(ForAll([c:children], Not(born(c, left) == born(c, right))), Count([c:children], born(c, left)) == 3, Count([c:children], born(c, right)) == 2) ::: three are left-handed and two are right-handed\nForAll([c:children], Count([y:int], born(c, y)) == 1) ::: each child was born in a different one of seven calendar years\nAnd(ForAll([c:children], Not(born(c, left) == born(c, right))), Count([c:children], born(c, left)) == 3, Count([c:children], born(c, right)) == 2) ::: three are left-handed and two are right-handed\nForAll([c:children], Count([y:int], born(c, y)) == 1) ::: each child was born in a different one of seven calendar years\nAnd(ForAll([c:children], Not(born(c,"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_3_17",
    "context": "Of the five Pohl children—Sara, Theo, Uma, Will, and Zoe—three are left-handed and two are right-handed. Each of the five children was born in a different one of seven calendar years, 1990 through 1996. The following conditions apply: No two left-handed children were born in consecutive years. No two right-handed children were born in consecutive years. Sara, who is left-handed, was born before Uma. Zoe was born before both Theo and Will. A left-handed child was born in 1991. Uma, who is right-handed, was born in 1993.",
    "question": "If Theo is right-handed, then each of the following statements must be false EXCEPT:",
    "answer": "D",
    "options": [
      "A) Theo was born in 1996.",
      "B) Will was born in 1995.",
      "C) Uma was born exactly three years before Theo was born.",
      "D) Zoe was born exactly one year before Theo was born.",
      "E) Will is right-handed."
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Sara, Theo, Uma, Will, Zoe])\nhandedness = EnumSort([left, right])\nborn = Function([children, int] -> [bool])\n\n# Constraints\nForAll([c:children], Count([h:handedness], born(c, h)) == 1) ::: each of the five children was born in a different one of seven calendar years\nAnd(born(Sara, left), born(Uma, right)) ::: Sara, who is left-handed, was born before Uma\nAnd(born(Zoe, left), born(Theo, right), born(Will, right)) ::: Zoe was born before both Theo and Will\nAnd(born(Sara, left), born(Theo, left), born(Will, left)) ::: No two left-handed children were born in consecutive years\nAnd(born(Sara, right), born(Theo, right), born(Will, right)) ::: No two right-handed children were born in consecutive years\nborn(Sara, left) ::: A left-handed child was born in 1991\nborn(Uma, right) ::: Uma, who is right-handed, was born in 1993\n\n# Options\nQuestion ::: If Theo is right-handed, then each of the following statements must be false EXCEPT:\nis_exception(is_sat(born(Theo, 1996))) ::: (A)\nis_exception(is_sat(born(Will, 1995))) ::: (B)\nis_exception(is_sat(born(Uma, 1990))) ::: (C)\nis_exception(is_sat(born(Zoe, 1995))) ::: (D)\nis_exception(is_sat(born(Will, right))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_3_18",
    "context": "Of the five Pohl children—Sara, Theo, Uma, Will, and Zoe—three are left-handed and two are right-handed. Each of the five children was born in a different one of seven calendar years, 1990 through 1996. The following conditions apply: No two left-handed children were born in consecutive years. No two right-handed children were born in consecutive years. Sara, who is left-handed, was born before Uma. Zoe was born before both Theo and Will. A left-handed child was born in 1991. Uma, who is right-handed, was born in 1993.",
    "question": "If Zoe was born before Uma was born, then which one of the following statements must be false?",
    "answer": "D",
    "options": [
      "A) No child was born in 1992.",
      "B) No child was born in 1995.",
      "C) Theo is left-handed.",
      "D) Zoe is left-handed.",
      "E) Will is left-handed."
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Sara, Theo, Uma, Will, Zoe])\nhandedness = EnumSort([left, right])\nborn = Function([children, int] -> [bool])\n\n# Constraints\nForAll([c:children], Count([y:int], born(c, y)) == 1) ::: each of the five children was born in a different one of seven calendar years\nForAll([c:children], Count([h:handedness], born(c, h) == 1) == 1) ::: each of the five children was born in a different one of seven calendar years\nAnd(born(Sara, left), born(Uma, right)) ::: Sara, who is left-handed, was born before Uma\nAnd(born(Zoe, left), born(Theo, right), born(Will, right)) ::: Zoe was born before both Theo and Will\nAnd(born(Sara, left), born(Theo, left), born(Will, left)) ::: No two left-handed children were born in consecutive years\nAnd(born(Uma, right), born(Will, right), born(Zoe, right)) ::: No two right-handed children were born in consecutive years\nborn(Sara, 1991) ::: A left-handed child was born in 1991\nborn(Uma, 1993) ::: Uma, who is right-handed, was born in 1993\n\n# Options\nQuestion ::: If Zoe was born before Uma was born, then which one of the following statements must be false?\nis_exception(is_sat(ForAll([y:int], Not(born(y, y))))) ::: A) No child was born in 1992.\nis_exception(is_sat(ForAll([y:int], Not(born(y, y))))) ::: B) No child"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_4_19",
    "context": "Barbara is shopping at a pet store to select fish for her new aquarium from among the following species: J, K, L, M, N, O, and P. For each of the seven species, the store has several fish available. Barbara makes her selection in a manner consistent with the following conditions: If she selects one or more K, then she does not select any O. If she selects one or more M, then she does not select any N. If she selects one or more M, then she selects at least one O. If she selects one or more N, then she selects at least one O. If she selects one or more O, then she selects at least one P. If she selects one or more P, then she selects at least one O. If she selects any O at all, then she selects at least two O.",
    "question": "Which one of the following could be a complete and accurate list of the fish Barbara selects for her aquarium?",
    "answer": "C",
    "options": [
      "A) three J, one K, two M",
      "B) one J, one K, one M, three O",
      "C) one J, one M, two O, one P",
      "D) one J, one N, one O, two P",
      "E) one M, one N, two O, one P"
    ],
    "raw_logic_programs": [
      "# Declarations\nfish = EnumSort([J, K, L, M, N, O, P])\nselected = Function([fish] -> [bool])\nForAll([f:fish], And(0 <= selected(f), selected(f) <= 1))\n\n# Constraints\nImplies(selected(K), Not(selected(O))) ::: If she selects one or more K, then she does not select any O\nImplies(selected(M), Not(selected(N))) ::: If she selects one or more M, then she does not select any N\nImplies(selected(M), selected(O)) ::: If she selects one or more M, then she selects at least one O\nImplies(selected(N), selected(O)) ::: If she selects one or more N, then she selects at least one O\nImplies(selected(O), selected(P)) ::: If she selects one or more O, then she selects at least one P\nImplies(selected(P), selected(O)) ::: If she selects one or more P, then she selects at least one O\nImplies(selected(O), Count([f:fish], selected(f)) >= 2) ::: If she selects any O at all, then she selects at least two O\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the fish Barbara selects for her aquarium?\nis_sat(And(selected(J), selected(K), selected(M), Not(selected(N)), Not(selected(O)), Not(selected(P)))) ::: (A)\nis_sat(And(selected(J), selected(K), Not(selected(M)), Not(selected(N)), selected(O), selected(P))) ::: (B)\nis_sat(And(selected(J), Not(selected(K)), selected(M), Not(selected(N)), selected(O), selected(P))) ::: (C)\nis_sat(And(selected(J), Not"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_4_20",
    "context": "Barbara is shopping at a pet store to select fish for her new aquarium from among the following species: J, K, L, M, N, O, and P. For each of the seven species, the store has several fish available. Barbara makes her selection in a manner consistent with the following conditions: If she selects one or more K, then she does not select any O. If she selects one or more M, then she does not select any N. If she selects one or more M, then she selects at least one O. If she selects one or more N, then she selects at least one O. If she selects one or more O, then she selects at least one P. If she selects one or more P, then she selects at least one O. If she selects any O at all, then she selects at least two O.",
    "question": "If Barbara does not select any fish of species P, then it could be true that she selects fish of species",
    "answer": "A",
    "options": [
      "A) J and of species K",
      "B) J and of species M",
      "C) K and of species M",
      "D) K and of species N",
      "E) L and of species O"
    ],
    "raw_logic_programs": [
      "# Declarations\nspecies = EnumSort([J, K, L, M, N, O, P])\nfish = Function([species] -> [int])\nForAll([s:species], And(0 <= fish(s), fish(s) <= 7))\n\n# Constraints\nForAll([s:species], Or(fish(s) == 0, fish(s) > 0)) ::: For each of the seven species, the store has several fish available\nImplies(fish(K) > 0, fish(O) == 0) ::: If she selects one or more K, then she does not select any O\nImplies(fish(M) > 0, fish(N) == 0) ::: If she selects one or more M, then she does not select any N\nImplies(fish(M) > 0, fish(O) > 0) ::: If she selects one or more M, then she selects at least one O\nImplies(fish(N) > 0, fish(O) > 0) ::: If she selects one or more N, then she selects at least one O\nImplies(fish(O) > 0, fish(P) > 0) ::: If she selects one or more O, then she selects at least one P\nImplies(fish(P) > 0, fish(O) > 0) ::: If she selects one or more P, then she selects at least one O\nImplies(fish(O) > 0, fish(O) >= 2) ::: If she selects any O at all, then she selects at least two O\n\n# Options\nQuestion ::: If Barbara does not select any fish of species P, then it could be true that she selects fish of species\nis_valid(Exists([s:species], s == J and fish(s) > 0 and Exists([s:species], s == K and fish(s) > 0))) ::: (A)\nis_valid(Exists([s"
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_4_21",
    "context": "Barbara is shopping at a pet store to select fish for her new aquarium from among the following species: J, K, L, M, N, O, and P. For each of the seven species, the store has several fish available. Barbara makes her selection in a manner consistent with the following conditions: If she selects one or more K, then she does not select any O. If she selects one or more M, then she does not select any N. If she selects one or more M, then she selects at least one O. If she selects one or more N, then she selects at least one O. If she selects one or more O, then she selects at least one P. If she selects one or more P, then she selects at least one O. If she selects any O at all, then she selects at least two O.",
    "question": "If Barbara selects fish of as many species as possible, then she cannot select any fish of which one of the following species?",
    "answer": "A",
    "options": [
      "A) K",
      "B) L",
      "C) M",
      "D) N",
      "E) P"
    ],
    "raw_logic_programs": [
      "# Declarations\nspecies = EnumSort([J, K, L, M, N, O, P])\nfish = Function([species] -> [int])\nForAll([s:species], And(0 <= fish(s), fish(s) <= 7))\n\n# Constraints\nForAll([s:species], fish(s) >= 0) ::: For each of the seven species, the store has several fish available\nImplies(fish(K) > 0, fish(O) == 0) ::: If she selects one or more K, then she does not select any O\nImplies(fish(M) > 0, fish(N) == 0) ::: If she selects one or more M, then she does not select any N\nImplies(fish(M) > 0, fish(O) > 0) ::: If she selects one or more M, then she selects at least one O\nImplies(fish(N) > 0, fish(O) > 0) ::: If she selects one or more N, then she selects at least one O\nImplies(fish(O) > 0, fish(P) > 0) ::: If she selects one or more O, then she selects at least one P\nImplies(fish(P) > 0, fish(O) > 0) ::: If she selects one or more P, then she selects at least one O\nImplies(fish(O) > 0, fish(O) >= 2) ::: If she selects any O at all, then she selects at least two O\n\n# Options\nQuestion ::: If Barbara selects fish of as many species as possible, then she cannot select any fish of which one of the following species?\nis_exception(is_sat(fish(K) == 7)) ::: (A)\nis_exception(is_sat(fish(L) == 7)) ::: (B)\nis_exception(is_sat(fish(M) =="
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_4_22",
    "context": "Barbara is shopping at a pet store to select fish for her new aquarium from among the following species: J, K, L, M, N, O, and P. For each of the seven species, the store has several fish available. Barbara makes her selection in a manner consistent with the following conditions: If she selects one or more K, then she does not select any O. If she selects one or more M, then she does not select any N. If she selects one or more M, then she selects at least one O. If she selects one or more N, then she selects at least one O. If she selects one or more O, then she selects at least one P. If she selects one or more P, then she selects at least one O. If she selects any O at all, then she selects at least two O.",
    "question": "Which one of the following statements must be false?",
    "answer": "C",
    "options": [
      "A) Barbara selects exactly four fish, at least one of which is a J.",
      "B) Barbara selects exactly four fish, at least one of which is an L.",
      "C) Barbara selects exactly three fish, at least one of which is an M.",
      "D) Barbara selects exactly three fish, at least one of which is an O.",
      "E) Barbara selects exactly three fish, at least one of which is a P."
    ],
    "raw_logic_programs": [
      "# Declarations\nfish = EnumSort([J, K, L, M, N, O, P])\nselected = Function([fish] -> [bool])\nForAll([f:fish], And(0 <= selected(f), selected(f) <= 1))\n\n# Constraints\nImplies(selected(K), Not(selected(O))) ::: If she selects one or more K, then she does not select any O\nImplies(selected(M), Not(selected(N))) ::: If she selects one or more M, then she does not select any N\nImplies(selected(M), selected(O)) ::: If she selects one or more M, then she selects at least one O\nImplies(selected(N), selected(O)) ::: If she selects one or more N, then she selects at least one O\nImplies(selected(O), selected(P)) ::: If she selects one or more O, then she selects at least one P\nImplies(selected(P), selected(O)) ::: If she selects one or more P, then she selects at least one O\nImplies(selected(O), Count([f:fish], selected(f)) >= 2) ::: If she selects any O at all, then she selects at least two O\n\n# Options\nQuestion ::: Which one of the following statements must be false?\nis_exception(is_sat(And(Count([f:fish], selected(f)) == 4, selected(J)))) ::: (A)\nis_exception(is_sat(And(Count([f:fish], selected(f)) == 4, selected(L)))) ::: (B)\nis_exception(is_sat(And(Count([f:fish], selected(f)) == 3, selected(M)))) ::: (C)\nis_exception(is_sat(And(Count([f:fish], selected(f)) == 3, selected(O)))) ::: (D)\nis_exception(is_sat("
    ]
  },
  {
    "id": "ar_lsat_200212_1-G_4_23",
    "context": "Barbara is shopping at a pet store to select fish for her new aquarium from among the following species: J, K, L, M, N, O, and P. For each of the seven species, the store has several fish available. Barbara makes her selection in a manner consistent with the following conditions: If she selects one or more K, then she does not select any O. If she selects one or more M, then she does not select any N. If she selects one or more M, then she selects at least one O. If she selects one or more N, then she selects at least one O. If she selects one or more O, then she selects at least one P. If she selects one or more P, then she selects at least one O. If she selects any O at all, then she selects at least two O.",
    "question": "If Barbara selects at least one fish for her aquarium, then which one of the following lists the minimum and maximum possible numbers, respectively, of different species of fish that Barbara selects?",
    "answer": "B",
    "options": [
      "A) 1, 4",
      "B) 1, 5",
      "C) 1, 6",
      "D) 2, 5",
      "E) 2, 6"
    ],
    "raw_logic_programs": [
      "# Declarations\nspecies = EnumSort([J, K, L, M, N, O, P])\nfish = Function([species] -> [int])\nForAll([s:species], And(0 <= fish(s), fish(s) <= 7))\n\n# Constraints\nForAll([s:species], Or(fish(s) == 0, fish(s) > 0)) ::: Barbara makes her selection in a manner consistent with the following conditions\nImplies(fish(K) > 0, fish(O) == 0) ::: If she selects one or more K, then she does not select any O\nImplies(fish(M) > 0, fish(N) == 0) ::: If she selects one or more M, then she does not select any N\nImplies(fish(M) > 0, fish(O) > 0) ::: If she selects one or more M, then she selects at least one O\nImplies(fish(N) > 0, fish(O) > 0) ::: If she selects one or more N, then she selects at least one O\nImplies(fish(O) > 0, fish(P) > 0) ::: If she selects one or more O, then she selects at least one P\nImplies(fish(P) > 0, fish(O) > 0) ::: If she selects one or more P, then she selects at least one O\nImplies(fish(O) > 0, fish(O) >= 2) ::: If she selects any O at all, then she selects at least two O\n\n# Options\nQuestion ::: If Barbara selects at least one fish for her aquarium, then which one of the following lists the minimum and maximum possible numbers, respectively, of different species of fish that Barbara selects?\nis_sat(And(fish(J) == 0, fish(K) == 0, fish(L) == 0, fish(M) == 0, fish"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_1_1",
    "context": "Charlie makes a soup by adding exactly six kinds of foods—kale, lentils, mushrooms, onions, tomatoes, and zucchini—to a broth, one food at a time. No food is added more than once. The order in which Charlie adds the foods to the broth must be consistent with the following: If the mushrooms are added third, then the lentils are added last. If the zucchini is added first, then the lentils are added at some time before the onions. Neither the tomatoes nor the kale is added fifth. The mushrooms are added at some time before the tomatoes or the kale, but not before both.",
    "question": "Which one of the following could be the order in which the foods are added to the broth?",
    "answer": "D",
    "options": [
      "A) kale, mushrooms, onions, lentils, tomatoes, zucchini",
      "B) kale, zucchini, mushrooms, tomatoes, lentils, onions",
      "C) lentils, mushrooms, zucchini, kale, onions, tomatoes",
      "D) zucchini, lentils, kale, mushrooms, onions, tomatoes",
      "E) zucchini, tomatoes, onions, mushrooms, lentils, kale"
    ],
    "raw_logic_programs": [
      "# Declarations\nfoods = EnumSort([kale, lentils, mushrooms, onions, tomatoes, zucchini])\nadded = Function([foods] -> [int])\nForAll([f:foods], And(1 <= added(f), added(f) <= 6))\n\n# Constraints\nDistinct([f:foods], added(f)) ::: No food is added more than once\nAnd(added(mushrooms) == 3, added(lentils) == 6) ::: If the mushrooms are added third, then the lentils are added last\nAnd(added(zucchini) == 1, added(lentils) < added(onions)) ::: If the zucchini is added first, then the lentils are added at some time before the onions\nAnd(added(tomatoes)!= 5, added(kale)!= 5) ::: Neither the tomatoes nor the kale is added fifth\nAnd(added(mushrooms) < added(tomatoes), added(mushrooms) < added(kale)) ::: The mushrooms are added at some time before the tomatoes or the kale, but not before both\n\n# Options\nQuestion ::: Which one of the following could be the order in which the foods are added to the broth?\nis_sat(ForAll([f:foods], added(f) == f)) ::: (A)\nis_sat(ForAll([f:foods], added(f) == f)) ::: (B)\nis_sat(ForAll([f:foods], added(f) == f)) ::: (C)\nis_sat(ForAll([f:foods], added(f) == f)) ::: (D)\nis_sat(ForAll([f:foods], added(f) == f)) ::: (E)\n------\nProblem:\nA group of six people—A"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_1_2",
    "context": "Charlie makes a soup by adding exactly six kinds of foods—kale, lentils, mushrooms, onions, tomatoes, and zucchini—to a broth, one food at a time. No food is added more than once. The order in which Charlie adds the foods to the broth must be consistent with the following: If the mushrooms are added third, then the lentils are added last. If the zucchini is added first, then the lentils are added at some time before the onions. Neither the tomatoes nor the kale is added fifth. The mushrooms are added at some time before the tomatoes or the kale, but not before both.",
    "question": "Which one of the following foods CANNOT be added first?",
    "answer": "C",
    "options": [
      "A) kale",
      "B) lentils",
      "C) mushrooms",
      "D) onions",
      "E) tomatoes"
    ],
    "raw_logic_programs": [
      "# Declarations\nfoods = EnumSort([kale, lentils, mushrooms, onions, tomatoes, zucchini])\nadded = Function([foods] -> [int])\nForAll([f:foods], And(1 <= added(f), added(f) <= 6))\n\n# Constraints\nDistinct([f:foods], added(f)) ::: No food is added more than once\nAnd(added(mushrooms) == 3, added(lentils) == 6) ::: If the mushrooms are added third, then the lentils are added last\nAnd(added(zucchini) == 1, added(lentils) < added(onions)) ::: If the zucchini is added first, then the lentils are added at some time before the onions\nAnd(added(tomatoes)!= 5, added(kale)!= 5) ::: Neither the tomatoes nor the kale is added fifth\nAnd(added(mushrooms) < added(tomatoes), added(mushrooms) < added(kale)) ::: The mushrooms are added at some time before the tomatoes or the kale, but not before both\n\n# Options\nQuestion ::: Which one of the following foods CANNOT be added first?\nis_exception(is_sat(added(kale) == 1)) ::: A) kale\nis_exception(is_sat(added(lentils) == 1)) ::: B) lentils\nis_exception(is_sat(added(mushrooms) == 1)) ::: C) mushrooms\nis_exception(is_sat(added(onions) == 1)) ::: D) onions\nis_exception(is_sat(added(tomatoes) == 1)) ::: E) tomatoes\n------\nProblem:\nA group of six people—A, B, C, D, E"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_1_3",
    "context": "Charlie makes a soup by adding exactly six kinds of foods—kale, lentils, mushrooms, onions, tomatoes, and zucchini—to a broth, one food at a time. No food is added more than once. The order in which Charlie adds the foods to the broth must be consistent with the following: If the mushrooms are added third, then the lentils are added last. If the zucchini is added first, then the lentils are added at some time before the onions. Neither the tomatoes nor the kale is added fifth. The mushrooms are added at some time before the tomatoes or the kale, but not before both.",
    "question": "If the lentils are added last, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) At least one of the foods is added at some time before the zucchini.",
      "B) At least two of the foods are added at some time before the kale.",
      "C) The mushrooms are added third.",
      "D) The zucchini is added third.",
      "E) The tomatoes are added fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\nfoods = EnumSort([kale, lentils, mushrooms, onions, tomatoes, zucchini])\nadded = Function([foods] -> [int])\nForAll([f:foods], And(1 <= added(f), added(f) <= 6))\n\n# Constraints\nDistinct([f:foods], added(f)) ::: No food is added more than once\nAnd(added(mushrooms) < added(lentils), added(mushrooms) == 3) ::: If the mushrooms are added third, then the lentils are added last\nAnd(added(zucchini) == 1, added(lentils) < added(onions)) ::: If the zucchini is added first, then the lentils are added at some time before the onions\nAnd(added(tomatoes)!= 5, added(kale)!= 5) ::: Neither the tomatoes nor the kale is added fifth\nAnd(added(mushrooms) < added(tomatoes), added(mushrooms) < added(kale)) ::: The mushrooms are added at some time before the tomatoes or the kale, but not before both\n\n# Options\nQuestion ::: If the lentils are added last, then which one of the following must be true?\nis_valid(Exists([f:foods], added(f) < added(zucchini))) ::: (A)\nis_valid(Exists([f:foods], added(f) < added(kale))) ::: (B)\nis_valid(added(mushrooms) == 3) ::: (C)\nis_valid(added(zucchini) == 3) ::: (D)\nis_valid(added(tomatoes) == 4) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—are"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_1_4",
    "context": "Charlie makes a soup by adding exactly six kinds of foods—kale, lentils, mushrooms, onions, tomatoes, and zucchini—to a broth, one food at a time. No food is added more than once. The order in which Charlie adds the foods to the broth must be consistent with the following: If the mushrooms are added third, then the lentils are added last. If the zucchini is added first, then the lentils are added at some time before the onions. Neither the tomatoes nor the kale is added fifth. The mushrooms are added at some time before the tomatoes or the kale, but not before both.",
    "question": "Which one of the following could be an accurate partial ordering of the foods added to the broth?",
    "answer": "C",
    "options": [
      "A) lentils: second; mushrooms: third",
      "B) mushrooms: fourth; lentils: last",
      "C) onions: second; mushrooms: fifth",
      "D) zucchini: first; lentils: last",
      "E) zucchini: first; mushrooms: second"
    ],
    "raw_logic_programs": [
      "# Declarations\nfoods = EnumSort([kale, lentils, mushrooms, onions, tomatoes, zucchini])\nadded = Function([foods] -> [int])\nForAll([f:foods], And(1 <= added(f), added(f) <= 6))\n\n# Constraints\nDistinct([f:foods], added(f)) ::: No food is added more than once\nAnd(added(mushrooms) == 3, added(lentils) == 6) ::: If the mushrooms are added third, then the lentils are added last\nAnd(added(zucchini) == 1, added(lentils) < added(onions)) ::: If the zucchini is added first, then the lentils are added at some time before the onions\nAnd(added(tomatoes)!= 5, added(kale)!= 5) ::: Neither the tomatoes nor the kale is added fifth\nAnd(added(mushrooms) < added(tomatoes), added(mushrooms) < added(kale)) ::: The mushrooms are added at some time before the tomatoes or the kale, but not before both\n\n# Options\nQuestion ::: Which one of the following could be an accurate partial ordering of the foods added to the broth?\nis_exception(is_sat(added(lentils) == 2, added(mushrooms) == 3)) ::: (A)\nis_exception(is_sat(added(mushrooms) == 4, added(lentils) == 6)) ::: (B)\nis_exception(is_sat(added(onions) == 2, added(mushrooms) == 5)) ::: (C)\nis_exception(is_sat(added(zucchini) == 1, added(lentils) == 6)) ::: (D)\nis_exception(is_sat(added(zucchini) == 1, added(mushrooms) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_1_5",
    "context": "Charlie makes a soup by adding exactly six kinds of foods—kale, lentils, mushrooms, onions, tomatoes, and zucchini—to a broth, one food at a time. No food is added more than once. The order in which Charlie adds the foods to the broth must be consistent with the following: If the mushrooms are added third, then the lentils are added last. If the zucchini is added first, then the lentils are added at some time before the onions. Neither the tomatoes nor the kale is added fifth. The mushrooms are added at some time before the tomatoes or the kale, but not before both.",
    "question": "If the zucchini is added first, then which one of the following CANNOT be true?",
    "answer": "D",
    "options": [
      "A) The kale is added second.",
      "B) The tomatoes are added second.",
      "C) The lentils are added third.",
      "D) The lentils are added fourth.",
      "E) The onions are added fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\nfoods = EnumSort([kale, lentils, mushrooms, onions, tomatoes, zucchini])\nadded = Function([foods] -> [int])\nForAll([f:foods], And(1 <= added(f), added(f) <= 6))\n\n# Constraints\nDistinct([f:foods], added(f)) ::: No food is added more than once\nAnd(added(mushrooms) == 3, added(lentils) == 6) ::: If the mushrooms are added third, then the lentils are added last\nAnd(added(zucchini) == 1, added(lentils) < added(onions)) ::: If the zucchini is added first, then the lentils are added at some time before the onions\nAnd(added(tomatoes)!= 5, added(kale)!= 5) ::: Neither the tomatoes nor the kale is added fifth\nAnd(added(mushrooms) < added(tomatoes), added(mushrooms) < added(kale)) ::: The mushrooms are added at some time before the tomatoes or the kale, but not before both\n\n# Options\nQuestion ::: If the zucchini is added first, then which one of the following CANNOT be true?\nis_exception(is_sat(added(kale) == 2)) ::: (A)\nis_exception(is_sat(added(tomatoes) == 2)) ::: (B)\nis_exception(is_sat(added(lentils) == 3)) ::: (C)\nis_exception(is_sat(added(lentils) == 4)) ::: (D)\nis_exception(is_sat(added(onions) == 4)) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—are to be seated in a row of six chairs. The seating is to be done in accordance with the following conditions: A is"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_2_6",
    "context": "A study sponsored by a consumer group tests exactly five of seven cold medications—F, G, H, I, K, L, and M—and ranks the medications tested from first (best) to fifth (worst). There are no ties. The following conditions must apply: L ranks second. Either F or G ranks first. I is tested. H ranks better than G if both are tested. K ranks better than F if both are tested. If M is tested, both F and H are also tested.",
    "question": "Which one of the following could be the five cold medications that the study ranks, listed from first to fifth?",
    "answer": "D",
    "options": [
      "A) F, I, L, H, G",
      "B) F, L, G, H, M",
      "C) F, L, I, G, M",
      "D) F, L, I, H, M",
      "E) F, L, K, I, G"
    ],
    "raw_logic_programs": [
      "# Declarations\nmedications = EnumSort([F, G, H, I, K, L, M])\nranks = Function([medications] -> [int])\nForAll([m:medications], And(1 <= ranks(m), ranks(m) <= 5))\n\n# Constraints\nDistinct([m:medications], ranks(m)) ::: There are no ties\nranks(L) == 2 ::: L ranks second\nOr(ranks(F) == 1, ranks(G) == 1) ::: Either F or G ranks first\nranks(I) == 1 ::: I is tested\nImplies(ranks(H) == 1, ranks(G) == 5) ::: H ranks better than G if both are tested\nImplies(ranks(K) == 1, ranks(F) == 5) ::: K ranks better than F if both are tested\nImplies(ranks(M) == 1, And(ranks(F) == 1, ranks(H) == 1)) ::: If M is tested, both F and H are also tested\n\n# Options\nQuestion ::: Which one of the following could be the five cold medications that the study ranks, listed from first to fifth?\nis_sat(And(ranks(F) == 1, ranks(I) == 2, ranks(L) == 3, ranks(H) == 4, ranks(G) == 5)) ::: A) F, I, L, H, G\nis_sat(And(ranks(F) == 1, ranks(L) == 2, ranks(G) == 3, ranks(H) == 4, ranks(M) == 5)) ::: B) F, L, G, H, M\nis_sat(And(ranks(F) == 1, ranks(L) == 2, ranks(I) == 3, ranks(G) == 4, ranks(M) == 5)) ::: C) F, L, I, G, M\nis_sat(And(ran"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_2_7",
    "context": "A study sponsored by a consumer group tests exactly five of seven cold medications—F, G, H, I, K, L, and M—and ranks the medications tested from first (best) to fifth (worst). There are no ties. The following conditions must apply: L ranks second. Either F or G ranks first. I is tested. H ranks better than G if both are tested. K ranks better than F if both are tested. If M is tested, both F and H are also tested.",
    "question": "Which one of the following could be true of the study?",
    "answer": "C",
    "options": [
      "A) G ranks better than M.",
      "B) H ranks better than F.",
      "C) I ranks better than F.",
      "D) K ranks better than G.",
      "E) M ranks better than G."
    ],
    "raw_logic_programs": [
      "# Declarations\nmedications = EnumSort([F, G, H, I, K, L, M])\nranks = Function([medications] -> [int])\nForAll([m:medications], And(1 <= ranks(m), ranks(m) <= 5))\n\n# Constraints\nDistinct([m:medications], ranks(m)) ::: There are no ties\nranks(L) == 2 ::: L ranks second\nOr(ranks(F) == 1, ranks(G) == 1) ::: Either F or G ranks first\nranks(I) == 1 ::: I is tested\nImplies(ranks(H) == 1, ranks(G) == 1) ::: H ranks better than G if both are tested\nImplies(ranks(K) == 1, ranks(F) == 1) ::: K ranks better than F if both are tested\nImplies(ranks(M) == 1, And(ranks(F) == 1, ranks(H) == 1)) ::: If M is tested, both F and H are also tested\n\n# Options\nQuestion ::: Which one of the following could be true of the study?\nis_sat(And(ranks(G) == 1, ranks(M) == 1)) ::: A) G ranks better than M.\nis_sat(And(ranks(H) == 1, ranks(F) == 1)) ::: B) H ranks better than F.\nis_sat(And(ranks(I) == 1, ranks(F) == 1)) ::: C) I ranks better than F.\nis_sat(And(ranks(K) == 1, ranks(G) == 1)) ::: D) K ranks better than G.\nis_sat(And(ranks(M) == 1, ranks(G) == 1)) ::: E) M ranks better than G.\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to work"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_2_8",
    "context": "A study sponsored by a consumer group tests exactly five of seven cold medications—F, G, H, I, K, L, and M—and ranks the medications tested from first (best) to fifth (worst). There are no ties. The following conditions must apply: L ranks second. Either F or G ranks first. I is tested. H ranks better than G if both are tested. K ranks better than F if both are tested. If M is tested, both F and H are also tested.",
    "question": "Which one of the following cold medications must be among those tested in the study?",
    "answer": "A",
    "options": [
      "A) F",
      "B) G",
      "C) H",
      "D) K",
      "E) M"
    ],
    "raw_logic_programs": [
      "# Declarations\nmedications = EnumSort([F, G, H, I, K, L, M])\nranks = Function([medications] -> [int])\nForAll([m:medications], And(1 <= ranks(m), ranks(m) <= 5))\n\n# Constraints\nDistinct([m:medications], ranks(m)) ::: There are no ties\nranks(L) == 2 ::: L ranks second\nOr(ranks(F) == 1, ranks(G) == 1) ::: Either F or G ranks first\nranks(I) == 1 ::: I is tested\nImplies(ranks(H) == 1, ranks(G) == 2) ::: H ranks better than G if both are tested\nImplies(ranks(K) == 1, ranks(F) == 2) ::: K ranks better than F if both are tested\nImplies(ranks(M) == 1, And(ranks(F) == 1, ranks(H) == 1)) ::: If M is tested, both F and H are also tested\n\n# Options\nQuestion ::: Which one of the following cold medications must be among those tested in the study?\nis_exception(is_sat(ranks(F) == 1)) ::: A) F\nis_exception(is_sat(ranks(G) == 1)) ::: B) G\nis_exception(is_sat(ranks(H) == 1)) ::: C) H\nis_exception(is_sat(ranks(K) == 1)) ::: D) K\nis_exception(is_sat(ranks(M) == 1)) ::: E) M\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to work on exactly three projects—L, M, and N. Each employee is assigned to work on exactly one project, and no two employees are assigned to the same project. The following conditions apply: F and G are assigned to the same project. H"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_2_9",
    "context": "A study sponsored by a consumer group tests exactly five of seven cold medications—F, G, H, I, K, L, and M—and ranks the medications tested from first (best) to fifth (worst). There are no ties. The following conditions must apply: L ranks second. Either F or G ranks first. I is tested. H ranks better than G if both are tested. K ranks better than F if both are tested. If M is tested, both F and H are also tested.",
    "question": "Which one of the following is a complete and accurate list of the cold medications any one of which could be the cold medication ranked fifth?",
    "answer": "E",
    "options": [
      "A) F, G, H, M",
      "B) G, H, I, M",
      "C) G, H, L, M",
      "D) F, G, H, I, K",
      "E) F, G, H, I, M"
    ],
    "raw_logic_programs": [
      "# Declarations\nmedications = EnumSort([F, G, H, I, K, L, M])\nranks = Function([medications] -> [int])\nForAll([m:medications], And(1 <= ranks(m), ranks(m) <= 5))\n\n# Constraints\nDistinct([m:medications], ranks(m)) ::: There are no ties\nranks(L) == 2 ::: L ranks second\nOr(ranks(F) == 1, ranks(G) == 1) ::: Either F or G ranks first\nranks(I) == 1 ::: I is tested\nImplies(ranks(H) == 1, ranks(G) == 5) ::: H ranks better than G if both are tested\nImplies(ranks(K) == 1, ranks(F) == 5) ::: K ranks better than F if both are tested\nImplies(ranks(M) == 1, And(ranks(F) == 1, ranks(H) == 1)) ::: If M is tested, both F and H are also tested\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the cold medications any one of which could be the cold medication ranked fifth?\nis_valid(Exists([m:medications], And(ranks(m) == 5, Or(m == F, m == G, m == H, m == M)))) ::: A) F, G, H, M\nis_valid(Exists([m:medications], And(ranks(m) == 5, Or(m == G, m == H, m == I, m == M)))) ::: B) G, H, I, M\nis_valid(Exists([m:medications], And(ranks(m) == 5, Or(m == G, m == H, m == L, m == M)))) ::: C) G, H, L, M\nis_valid(Exists([m:medications], And(ranks(m) == 5, Or(m == F,"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_2_10",
    "context": "A study sponsored by a consumer group tests exactly five of seven cold medications—F, G, H, I, K, L, and M—and ranks the medications tested from first (best) to fifth (worst). There are no ties. The following conditions must apply: L ranks second. Either F or G ranks first. I is tested. H ranks better than G if both are tested. K ranks better than F if both are tested. If M is tested, both F and H are also tested.",
    "question": "If I ranks third, each of the following could also be true of the study EXCEPT:",
    "answer": "B",
    "options": [
      "A) M ranks better than H.",
      "B) K ranks better than G.",
      "C) I ranks better than F.",
      "D) H ranks better than M.",
      "E) G ranks better than K."
    ],
    "raw_logic_programs": [
      "# Declarations\nmedications = EnumSort([F, G, H, I, K, L, M])\nranks = Function([medications] -> [int])\nForAll([m:medications], And(1 <= ranks(m), ranks(m) <= 5))\n\n# Constraints\nDistinct([m:medications], ranks(m)) ::: There are no ties\nranks(L) == 2 ::: L ranks second\nOr(ranks(F) == 1, ranks(G) == 1) ::: Either F or G ranks first\nranks(I) == 3 ::: I is tested\nImplies(ranks(H) == 1, ranks(G) == 2) ::: H ranks better than G if both are tested\nImplies(ranks(K) == 1, ranks(F) == 2) ::: K ranks better than F if both are tested\nImplies(ranks(M) == 1, And(ranks(F) == 1, ranks(H) == 1)) ::: If M is tested, both F and H are also tested\n\n# Options\nQuestion ::: If I ranks third, each of the following could also be true of the study EXCEPT:\nis_exception(is_sat(ranks(M) > ranks(H))) ::: A) M ranks better than H.\nis_exception(is_sat(ranks(K) > ranks(G))) ::: B) K ranks better than G.\nis_exception(is_sat(ranks(I) > ranks(F))) ::: C) I ranks better than F.\nis_exception(is_sat(ranks(H) > ranks(M))) ::: D) H ranks better than M.\nis_exception(is_sat(ranks(G) > ranks(K))) ::: E) G ranks better than K.\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to work on exactly three projects—L, M, and N. Each employee is assigned to"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_3_11",
    "context": "Each nonstop flight offered by Zephyr Airlines departs from one and arrives at another of five cities: Honolulu, Montreal, Philadelphia, Toronto, and Vancouver. Any two cities are said to be connected with each other if Zephyr offers nonstop flights between them. Each city is connected with at least one other city. The following conditions govern Zephyr's nonstop flights: Montreal is connected with exactly one other city. Honolulu is not connected with Toronto. Any city that is connected with Honolulu is also connected with Toronto. If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver.",
    "question": "Which one of the following could be a complete and accurate list of Zephyr Airlines' connected cities?",
    "answer": "A",
    "options": [
      "A) Honolulu and Vancouver; Montreal and Toronto; Philadelphia and Vancouver; Toronto and Vancouver",
      "B) Honolulu and Vancouver; Montreal and Philadelphia; Montreal and Toronto; Philadelphia and Toronto; Toronto and Vancouver",
      "C) Honolulu and Philadelphia; Honolulu and Montreal; Philadelphia and Toronto; Toronto and Vancouver",
      "D) Honolulu and Philadelphia; Montreal and Toronto; Philadelphia and Toronto; Philadelphia and Vancouver; Toronto and Vancouver",
      "E) Honolulu and Philadelphia; Honolulu and Toronto; Montreal and Philadelphia; Philadelphia and Vancouver"
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([Honolulu, Montreal, Philadelphia, Toronto, Vancouver])\nconnected = Function([cities, cities] -> [bool])\n\n# Constraints\nForAll([c:cities], Count([c2:cities], connected(c, c2)) >= 1) ::: Each city is connected with at least one other city\nCount([c2:cities], connected(Montreal, c2)) == 1 ::: Montreal is connected with exactly one other city\nNot(connected(Honolulu, Toronto)) ::: Honolulu is not connected with Toronto\nForAll([c2:cities], Implies(connected(Honolulu, c2), connected(Toronto, c2))) ::: Any city that is connected with Honolulu is also connected with Toronto\nForAll([c2:cities], Implies(connected(Philadelphia, Toronto), Not(connected(Philadelphia, Vancouver)))) ::: If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of Zephyr Airlines' connected cities?\nis_sat(And(connected(Honolulu, Vancouver), connected(Montreal, Toronto), connected(Philadelphia, Vancouver), connected(Toronto, Vancouver))) ::: A)\nis_sat(And(connected(Honolulu, Vancouver), connected(Montreal, Philadelphia), connected(Montreal, Toronto), connected(Philadelphia, Toronto), connected(Toronto, Vancouver))) ::: B)\nis_sat(And(connected(Honolulu, Philadelphia), connected(Honolulu, Montreal), connected(Philadelphia, Toronto), connected(Toronto, Vancouver))) ::: C)\nis_sat(And(connected(Honolulu, Philadelphia), connected(Montreal, Toronto), connected(Philadelphia, Toronto), connected(Philadelphia, Vancouver), connected(Toronto, Vancouver))) ::: D)\nis_sat(And(connected(Honolulu"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_3_12",
    "context": "Each nonstop flight offered by Zephyr Airlines departs from one and arrives at another of five cities: Honolulu, Montreal, Philadelphia, Toronto, and Vancouver. Any two cities are said to be connected with each other if Zephyr offers nonstop flights between them. Each city is connected with at least one other city. The following conditions govern Zephyr's nonstop flights: Montreal is connected with exactly one other city. Honolulu is not connected with Toronto. Any city that is connected with Honolulu is also connected with Toronto. If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver.",
    "question": "If exactly three cities are each connected with Philadelphia, then which one of the following could be a pair of connected cities?",
    "answer": "B",
    "options": [
      "A) Honolulu and Montreal",
      "B) Honolulu and Vancouver",
      "C) Montreal and Toronto",
      "D) Montreal and Vancouver",
      "E) Philadelphia and Vancouver"
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([Honolulu, Montreal, Philadelphia, Toronto, Vancouver])\nconnected = Function([cities, cities] -> [bool])\nForAll([c:cities], Count([c2:cities], connected(c, c2)) >= 1) ::: Any two cities are said to be connected with each other if Zephyr offers nonstop flights between them\n\n# Constraints\nAnd(connected(Montreal, c), c!= Montreal) ::: Montreal is connected with exactly one other city\nNot(connected(Honolulu, Toronto)) ::: Honolulu is not connected with Toronto\nAnd(connected(Honolulu, c), connected(Toronto, c)) ::: Any city that is connected with Honolulu is also connected with Toronto\nAnd(connected(Philadelphia, Toronto), Not(connected(Philadelphia, Vancouver))) ::: If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver\n\n# Options\nQuestion ::: If exactly three cities are each connected with Philadelphia, then which one of the following could be a pair of connected cities?\nis_exception(is_sat(connected(Honolulu, Montreal))) ::: (A)\nis_exception(is_sat(connected(Honolulu, Vancouver))) ::: (B)\nis_exception(is_sat(connected(Montreal, Toronto))) ::: (C)\nis_exception(is_sat(connected(Montreal, Vancouver))) ::: (D)\nis_exception(is_sat(connected(Philadelphia, Vancouver))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments: accounting, marketing, or sales. The following conditions apply: The number of employees in the accounting department is 20 more than the number of employees in the marketing department. The number of employees in the sales department is 10 more than the number of employees in the marketing department. The number of employees in the accounting department is 10 more than the number of employees in"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_3_13",
    "context": "Each nonstop flight offered by Zephyr Airlines departs from one and arrives at another of five cities: Honolulu, Montreal, Philadelphia, Toronto, and Vancouver. Any two cities are said to be connected with each other if Zephyr offers nonstop flights between them. Each city is connected with at least one other city. The following conditions govern Zephyr's nonstop flights: Montreal is connected with exactly one other city. Honolulu is not connected with Toronto. Any city that is connected with Honolulu is also connected with Toronto. If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver.",
    "question": "Which one of the following is a pair of cities that CANNOT be connected?",
    "answer": "A",
    "options": [
      "A) Honolulu and Montreal",
      "B) Honolulu and Philadelphia",
      "C) Montreal and Philadelphia",
      "D) Montreal and Vancouver",
      "E) Philadelphia and Toronto"
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([Honolulu, Montreal, Philadelphia, Toronto, Vancouver])\nflights = Function([cities, cities] -> [bool])\n\n# Constraints\nForAll([c:cities], Count([c2:cities], flights(c, c2)) >= 1) ::: Any two cities are said to be connected with each other if Zephyr offers nonstop flights between them\nAnd(flights(Montreal, c), c!= Montreal) ::: Montreal is connected with exactly one other city\nNot(flights(Honolulu, Toronto)) ::: Honolulu is not connected with Toronto\nAnd(flights(Honolulu, c), flights(Toronto, c)) ::: Any city that is connected with Honolulu is also connected with Toronto\nAnd(flights(Philadelphia, Toronto), Not(flights(Philadelphia, Vancouver))) ::: If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver\n\n# Options\nQuestion ::: Which one of the following is a pair of cities that CANNOT be connected?\nis_exception(is_sat(flights(Honolulu, Montreal))) ::: (A)\nis_exception(is_sat(flights(Honolulu, Philadelphia))) ::: (B)\nis_exception(is_sat(flights(Montreal, Philadelphia))) ::: (C)\nis_exception(is_sat(flights(Montreal, Vancouver))) ::: (D)\nis_exception(is_sat(flights(Philadelphia, Toronto))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments: accounting, marketing, or sales. The following conditions apply: The number of employees in the accounting department is 20 more than the number of employees in the marketing department. The number of employees in the sales department is 10 more than the number of employees in the marketing department. The number of employees in the accounting department is 10 more than the"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_3_14",
    "context": "Each nonstop flight offered by Zephyr Airlines departs from one and arrives at another of five cities: Honolulu, Montreal, Philadelphia, Toronto, and Vancouver. Any two cities are said to be connected with each other if Zephyr offers nonstop flights between them. Each city is connected with at least one other city. The following conditions govern Zephyr's nonstop flights: Montreal is connected with exactly one other city. Honolulu is not connected with Toronto. Any city that is connected with Honolulu is also connected with Toronto. If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Montreal and Philadelphia are connected with each other, but neither is connected with any other city.",
      "B) Montreal and Toronto are connected with each other, but neither is connected with any other city.",
      "C) Philadelphia and Toronto are connected with each other, but neither is connected with any other city.",
      "D) Philadelphia and Vancouver are connected with each other, but neither is connected with any other city.",
      "E) Toronto and Vancouver are connected with each other, but neither is connected with any other city."
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([Honolulu, Montreal, Philadelphia, Toronto, Vancouver])\nconnected = Function([cities, cities] -> [bool])\nForAll([c:cities], Count([c2:cities], connected(c, c2)) >= 1)\n\n# Constraints\nCount([c:cities], connected(Montreal, c)) == 1 ::: Montreal is connected with exactly one other city\nNot(connected(Honolulu, Toronto)) ::: Honolulu is not connected with Toronto\nAnd(connected(Honolulu, c), connected(Toronto, c)) ::: Any city that is connected with Honolulu is also connected with Toronto\nImplies(connected(Philadelphia, Toronto), Not(connected(Philadelphia, Vancouver))) ::: If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(And(connected(Montreal, Philadelphia), connected(Montreal, Philadelphia), Not(connected(Montreal, c) for c in cities), Not(connected(Philadelphia, c) for c in cities))) ::: (A)\nis_sat(And(connected(Montreal, Toronto), connected(Montreal, Toronto), Not(connected(Montreal, c) for c in cities), Not(connected(Toronto, c) for c in cities))) ::: (B)\nis_sat(And(connected(Philadelphia, Toronto), connected(Philadelphia, Toronto), Not(connected(Philadelphia, c) for c in cities), Not(connected(Toronto, c) for c in cities))) ::: (C)\nis_sat(And(connected(Philadelphia, Vancouver), connected(Philadelphia, Vancouver), Not(connected(Philadelphia, c) for c in cities), Not(connected(Vancouver, c) for c in cities))) ::: (D)\nis_sat(And(connected(Toronto, Vancouver), connected(Toronto, Vancouver), Not(connected(Toronto, c) for c in cities), Not(connected(Vancouver, c) for c in cities))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_3_15",
    "context": "Each nonstop flight offered by Zephyr Airlines departs from one and arrives at another of five cities: Honolulu, Montreal, Philadelphia, Toronto, and Vancouver. Any two cities are said to be connected with each other if Zephyr offers nonstop flights between them. Each city is connected with at least one other city. The following conditions govern Zephyr's nonstop flights: Montreal is connected with exactly one other city. Honolulu is not connected with Toronto. Any city that is connected with Honolulu is also connected with Toronto. If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver.",
    "question": "If Toronto is the only city that is connected with Philadelphia, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Exactly one city is connected with Toronto.",
      "B) Exactly one city is connected with Vancouver.",
      "C) Exactly two cities are each connected with Honolulu.",
      "D) Exactly two cities are each connected with Toronto.",
      "E) Exactly four cities are each connected with Toronto."
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([Honolulu, Montreal, Philadelphia, Toronto, Vancouver])\nconnected = Function([cities, cities] -> [bool])\nForAll([c:cities], Count([c2:cities], connected(c, c2)) >= 1) ::: Any two cities are said to be connected with each other if Zephyr offers nonstop flights between them\nForAll([c:cities], Count([c2:cities], connected(c, c2)) == 1) ::: Montreal is connected with exactly one other city\nNot(connected(Honolulu, Toronto)) ::: Honolulu is not connected with Toronto\nAnd(connected(Honolulu, c), connected(Toronto, c)) ::: Any city that is connected with Honolulu is also connected with Toronto\nAnd(connected(Philadelphia, Toronto), Not(connected(Philadelphia, Vancouver))) ::: If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver\n\n# Constraints\nQuestion ::: If Toronto is the only city that is connected with Philadelphia, then which one of the following could be true?\nis_exception(is_sat(Count([c:cities], connected(Toronto, c)) == 1))) ::: (A)\nis_exception(is_sat(Count([c:cities], connected(Vancouver, c)) == 1))) ::: (B)\nis_exception(is_sat(Count([c:cities], connected(Honolulu, c)) == 2))) ::: (C)\nis_exception(is_sat(Count([c:cities], connected(Toronto, c)) == 2))) ::: (D)\nis_exception(is_sat(Count([c:cities], connected(Toronto, c)) == 4))) ::: (E)\n------\nProblem:\nThe following is a list of the six members of the board of directors of a company:\nA, B, C, D, E, F\nThe board members are to be divided into two committees, committee 1 and committee 2. For each of the following pairs of board members, one member will be on committee 1 and the other will be on committee 2."
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_3_16",
    "context": "Each nonstop flight offered by Zephyr Airlines departs from one and arrives at another of five cities: Honolulu, Montreal, Philadelphia, Toronto, and Vancouver. Any two cities are said to be connected with each other if Zephyr offers nonstop flights between them. Each city is connected with at least one other city. The following conditions govern Zephyr's nonstop flights: Montreal is connected with exactly one other city. Honolulu is not connected with Toronto. Any city that is connected with Honolulu is also connected with Toronto. If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver.",
    "question": "At most how many pairs of cities could be connected?",
    "answer": "B",
    "options": [
      "A) four",
      "B) five",
      "C) six",
      "D) seven",
      "E) eight"
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([Honolulu, Montreal, Philadelphia, Toronto, Vancouver])\nconnected = Function([cities, cities] -> [bool])\nForAll([c:cities], Count([c2:cities], connected(c, c2)) >= 1)\n\n# Constraints\nAnd(connected(Montreal, c2) == true, Count([c2:cities], connected(Montreal, c2)) == 1) ::: Montreal is connected with exactly one other city\nNot(connected(Honolulu, Toronto)) ::: Honolulu is not connected with Toronto\nAnd(connected(Honolulu, c2), connected(Toronto, c2)) ::: Any city that is connected with Honolulu is also connected with Toronto\nAnd(connected(Philadelphia, Toronto), Not(connected(Philadelphia, Vancouver))) ::: If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver\n\n# Options\nQuestion ::: At most how many pairs of cities could be connected?\nis_sat(Count([c1:cities, c2:cities], connected(c1, c2)) == 4) ::: (A)\nis_sat(Count([c1:cities, c2:cities], connected(c1, c2)) == 5) ::: (B)\nis_sat(Count([c1:cities, c2:cities], connected(c1, c2)) == 6) ::: (C)\nis_sat(Count([c1:cities, c2:cities], connected(c1, c2)) == 7) ::: (D)\nis_sat(Count([c1:cities, c2:cities], connected(c1, c2)) == 8) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments: accounting, marketing, or sales. The following conditions apply: The number of employees in the accounting department is 20 more than the number of employees in the marketing department. The number of employees in the sales department is 10 more than the number of employees in the marketing department. The number"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_3_17",
    "context": "Each nonstop flight offered by Zephyr Airlines departs from one and arrives at another of five cities: Honolulu, Montreal, Philadelphia, Toronto, and Vancouver. Any two cities are said to be connected with each other if Zephyr offers nonstop flights between them. Each city is connected with at least one other city. The following conditions govern Zephyr's nonstop flights: Montreal is connected with exactly one other city. Honolulu is not connected with Toronto. Any city that is connected with Honolulu is also connected with Toronto. If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver.",
    "question": "If four of the cities are each connected with the remaining city, then the cities in which one of the following pairs must be connected with each other?",
    "answer": "C",
    "options": [
      "A) Honolulu and Montreal",
      "B) Honolulu and Philadelphia",
      "C) Honolulu and Vancouver",
      "D) Montreal and Philadelphia",
      "E) Montreal and Toronto"
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([Honolulu, Montreal, Philadelphia, Toronto, Vancouver])\nconnected = Function([cities, cities] -> [bool])\nForAll([c:cities], Count([c2:cities], connected(c, c2)) >= 1) ::: Any two cities are said to be connected with each other if Zephyr offers nonstop flights between them\n\n# Constraints\nAnd(connected(Montreal, c), c!= Montreal) ::: Montreal is connected with exactly one other city\nNot(connected(Honolulu, Toronto)) ::: Honolulu is not connected with Toronto\nImplies(connected(Honolulu, c), connected(Toronto, c)) ::: Any city that is connected with Honolulu is also connected with Toronto\nImplies(connected(Philadelphia, Toronto), Not(connected(Philadelphia, Vancouver))) ::: If Philadelphia is connected with Toronto, then Philadelphia is not connected with Vancouver\n\n# Options\nQuestion ::: If four of the cities are each connected with the remaining city, then the cities in which one of the following pairs must be connected with each other?\nis_sat(connected(Honolulu, Montreal)) ::: (A)\nis_sat(connected(Honolulu, Philadelphia)) ::: (B)\nis_sat(connected(Honolulu, Vancouver)) ::: (C)\nis_sat(connected(Montreal, Philadelphia)) ::: (D)\nis_sat(connected(Montreal, Toronto)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments: accounting, marketing, or sales. The following conditions apply: The number of employees in the accounting department is 20 more than the number of employees in the marketing department. The number of employees in the sales department is 10 more than the number of employees in the marketing department. The number of employees in the accounting department is 10 more than the number of employees in the sales department.\nQuestion:\nIf the number of employees in the marketing department is 10, then the number of employees in the sales department is:\nChoices:\n(A) 10\n("
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_4_18",
    "context": "For a behavioral study, a researcher will select exactly six individual animals from among three monkeys—F, G, and H—three pandas—K, L, and N—and three raccoons—T, V, and Z. The selection of animals for the study must meet the following conditions: F and H are not both selected. N and T are not both selected. If H is selected, K is also selected. If K is selected, N is also selected.",
    "question": "Which one of the following is an acceptable selection of animals for the study?",
    "answer": "D",
    "options": [
      "A) F, G, K, N, T, V",
      "B) F, H, K, N, V, Z",
      "C) G, H, K, L, V, Z",
      "D) G, H, K, N, V, Z",
      "E) G, H, L, N, V, Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nanimals = EnumSort([F, G, H, K, L, N, T, V, Z])\nselected = Function([animals] -> [bool])\nForAll([a:animals], And(selected(a) == true, selected(a) == false))\n\n# Constraints\nNot(And(selected(F), selected(H))) ::: F and H are not both selected\nNot(And(selected(N), selected(T))) ::: N and T are not both selected\nImplies(selected(H), selected(K)) ::: If H is selected, K is also selected\nImplies(selected(K), selected(N)) ::: If K is selected, N is also selected\n\n# Options\nQuestion ::: Which one of the following is an acceptable selection of animals for the study?\nis_sat(And(selected(F), selected(G), selected(K), selected(N), selected(T), selected(V))) ::: A) F, G, K, N, T, V\nis_sat(And(selected(F), selected(H), selected(K), selected(N), selected(V), selected(Z))) ::: B) F, H, K, N, V, Z\nis_sat(And(selected(G), selected(H), selected(K), selected(L), selected(V), selected(Z))) ::: C) G, H, K, L, V, Z\nis_sat(And(selected(G), selected(H), selected(K), selected(N), selected(V), selected(Z))) ::: D) G, H, K, N, V, Z\nis_sat(And(selected(G), selected(H), selected(L), selected(N), selected(V), selected(Z))) ::: E) G, H, L, N, V, Z\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to work on exactly three projects—L, M, and N. The following conditions apply: F and G are assigned to work on project L. H and I are assigned to work on project M. J and K are assigned to work on project N. F and H are assigned to work on exactly one project together. G and J are"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_4_19",
    "context": "For a behavioral study, a researcher will select exactly six individual animals from among three monkeys—F, G, and H—three pandas—K, L, and N—and three raccoons—T, V, and Z. The selection of animals for the study must meet the following conditions: F and H are not both selected. N and T are not both selected. If H is selected, K is also selected. If K is selected, N is also selected.",
    "question": "If H and L are among the animals selected, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) F is selected.",
      "B) T is selected.",
      "C) Z is selected.",
      "D) Exactly one panda is selected.",
      "E) Exactly two pandas are selected."
    ],
    "raw_logic_programs": [
      "# Declarations\nanimals = EnumSort([F, G, H, K, L, N, T, V, Z])\nselected = Function([animals] -> [bool])\nForAll([a:animals], And(selected(a) == true, selected(a) == false))\n\n# Constraints\nForAll([a:animals], And(1 <= Count([a:animals], selected(a)), Count([a:animals], selected(a)) <= 6)) ::: exactly six individual animals\nImplies(selected(F), Not(selected(H))) ::: F and H are not both selected\nImplies(selected(N), Not(selected(T))) ::: N and T are not both selected\nImplies(selected(H), selected(K)) ::: If H is selected, K is also selected\nImplies(selected(K), selected(N)) ::: If K is selected, N is also selected\n\n# Options\nQuestion ::: If H and L are among the animals selected, which one of the following could be true?\nis_sat(And(selected(F), selected(H), selected(L))) ::: (A)\nis_sat(And(selected(T), selected(H), selected(L))) ::: (B)\nis_sat(And(selected(Z), selected(H), selected(L))) ::: (C)\nis_sat(And(selected(H), selected(L), Count([a:animals], selected(a)) == 1)) ::: (D)\nis_sat(And(selected(H), selected(L), Count([a:animals], selected(a)) == 2)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10 more than the number of employees in department B. The number of employees in department A is 10 more than the number of employees in department C.\nQuestion:\nIf the number of employees in department B is 20, how many employees are in department A?\nChoices:"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_4_20",
    "context": "For a behavioral study, a researcher will select exactly six individual animals from among three monkeys—F, G, and H—three pandas—K, L, and N—and three raccoons—T, V, and Z. The selection of animals for the study must meet the following conditions: F and H are not both selected. N and T are not both selected. If H is selected, K is also selected. If K is selected, N is also selected.",
    "question": "Each of the following is a pair of animals that could be selected together EXCEPT",
    "answer": "C",
    "options": [
      "A) F and G",
      "B) H and K",
      "C) K and T",
      "D) L and N",
      "E) T and V"
    ],
    "raw_logic_programs": [
      "# Declarations\nanimals = EnumSort([F, G, H, K, L, N, T, V, Z])\nselected = Function([animals] -> [bool])\nForAll([a:animals], And(selected(a) == true, selected(a) == false))\n\n# Constraints\nNot(And(selected(F), selected(H))) ::: F and H are not both selected\nNot(And(selected(N), selected(T))) ::: N and T are not both selected\nImplies(selected(H), selected(K)) ::: If H is selected, K is also selected\nImplies(selected(K), selected(N)) ::: If K is selected, N is also selected\n\n# Options\nQuestion ::: Each of the following is a pair of animals that could be selected together EXCEPT\nis_exception(is_sat(And(selected(F), selected(G)))) ::: (A)\nis_exception(is_sat(And(selected(H), selected(K)))) ::: (B)\nis_exception(is_sat(And(selected(K), selected(T)))) ::: (C)\nis_exception(is_sat(And(selected(L), selected(N)))) ::: (D)\nis_exception(is_sat(And(selected(T), selected(V)))) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to work on exactly three projects—L, M, and N. The following conditions apply: F and G are assigned to the same project. H and I are assigned to the same project. J and K are assigned to the same project. F and J are assigned to different projects. G and K are assigned to different projects.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) F and H are assigned to the same project.\n(B) F and I are assigned to the same project.\n(C) G and H are assigned to the same project.\n(D) G and I are assigned to the same project.\n(E) H and J are assigned to the same project.\n###\n# Declarations\nemployees = EnumSort([F, G, H"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_4_21",
    "context": "For a behavioral study, a researcher will select exactly six individual animals from among three monkeys—F, G, and H—three pandas—K, L, and N—and three raccoons—T, V, and Z. The selection of animals for the study must meet the following conditions: F and H are not both selected. N and T are not both selected. If H is selected, K is also selected. If K is selected, N is also selected.",
    "question": "If all three of the raccoons are selected, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) K is selected.",
      "B) L is selected.",
      "C) Exactly one monkey is selected.",
      "D) Exactly two pandas are selected.",
      "E) All three of the monkeys are selected."
    ],
    "raw_logic_programs": [
      "# Declarations\nanimals = EnumSort([F, G, H, K, L, N, T, V, Z])\nselected = Function([animals] -> [bool])\nForAll([a:animals], And(selected(a) == true, selected(a) == false))\n\n# Constraints\nNot(And(selected(F), selected(H))) ::: F and H are not both selected\nNot(And(selected(N), selected(T))) ::: N and T are not both selected\nImplies(selected(H), selected(K)) ::: If H is selected, K is also selected\nImplies(selected(K), selected(N)) ::: If K is selected, N is also selected\n\n# Options\nQuestion ::: If all three of the raccoons are selected, which one of the following must be true?\nis_sat(And(selected(K), Not(selected(F)))) ::: A) K is selected.\nis_sat(And(selected(L), Not(selected(F)))) ::: B) L is selected.\nis_sat(And(Count([a:animals], selected(a)) == 1, Not(selected(F)))) ::: C) Exactly one monkey is selected.\nis_sat(And(Count([a:animals], selected(a)) == 2, Not(selected(F)))) ::: D) Exactly two pandas are selected.\nis_sat(And(Count([a:animals], selected(a)) == 3, Not(selected(F)))) ::: E) All three of the monkeys are selected.\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10 more than the number of employees in department B. The number of employees in department A is 10 more than the number of employees in department C.\nQuestion:\nIf the number of employees in department B is 20, how many employees are in department A?\nChoices:\n(A) 30\n(B) 40\n(C)"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_4_22",
    "context": "For a behavioral study, a researcher will select exactly six individual animals from among three monkeys—F, G, and H—three pandas—K, L, and N—and three raccoons—T, V, and Z. The selection of animals for the study must meet the following conditions: F and H are not both selected. N and T are not both selected. If H is selected, K is also selected. If K is selected, N is also selected.",
    "question": "If T is selected, which one of the following is a pair of animals that must be among the animals selected?",
    "answer": "A",
    "options": [
      "A) F and G",
      "B) G and H",
      "C) K and L",
      "D) K and Z",
      "E) L and N"
    ],
    "raw_logic_programs": [
      "# Declarations\nanimals = EnumSort([F, G, H, K, L, N, T, V, Z])\nselected = Function([animals] -> [bool])\nForAll([a:animals], And(selected(a) == true, selected(a) == false))\n\n# Constraints\nNot(And(selected(F), selected(H))) ::: F and H are not both selected\nNot(And(selected(N), selected(T))) ::: N and T are not both selected\nImplies(selected(H), selected(K)) ::: If H is selected, K is also selected\nImplies(selected(K), selected(N)) ::: If K is selected, N is also selected\n\n# Options\nQuestion ::: If T is selected, which one of the following is a pair of animals that must be among the animals selected?\nis_sat(And(selected(F), selected(G))) ::: (A)\nis_sat(And(selected(G), selected(H))) ::: (B)\nis_sat(And(selected(K), selected(L))) ::: (C)\nis_sat(And(selected(K), selected(Z))) ::: (D)\nis_sat(And(selected(L), selected(N))) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to work on exactly three projects—L, M, and N. The assignment of employees to projects must meet the following conditions: F and H are assigned to the same project. G and I are assigned to the same project. J and K are assigned to the same project. F and J are not assigned to the same project.\nQuestion:\nIf H is assigned to project L, which one of the following must be true?\nChoices:\n(A) F is assigned to project M\n(B) G is assigned to project M\n(C) I is assigned to project M\n(D) J is assigned to project M\n(E) K is assigned to project M\n###\n# Declarations\nemployees = EnumSort([F, G, H, I, J, K])\nprojects = EnumSort([L, M, N])\nassigned = Function([emp"
    ]
  },
  {
    "id": "ar_lsat_200306_2-G_4_23",
    "context": "For a behavioral study, a researcher will select exactly six individual animals from among three monkeys—F, G, and H—three pandas—K, L, and N—and three raccoons—T, V, and Z. The selection of animals for the study must meet the following conditions: F and H are not both selected. N and T are not both selected. If H is selected, K is also selected. If K is selected, N is also selected.",
    "question": "The selection of animals must include",
    "answer": "B",
    "options": [
      "A) at most two of each kind of animal",
      "B) at least one of each kind of animal",
      "C) at least two pandas",
      "D) exactly two monkeys",
      "E) exactly two raccoons"
    ],
    "raw_logic_programs": [
      "# Declarations\nanimals = EnumSort([F, G, H, K, L, N, T, V, Z])\nselected = Function([animals] -> [bool])\nForAll([a:animals], And(selected(a) == true, selected(a) == false))\n\n# Constraints\nNot(And(selected(F), selected(H))) ::: F and H are not both selected\nNot(And(selected(N), selected(T))) ::: N and T are not both selected\nImplies(selected(H), selected(K)) ::: If H is selected, K is also selected\nImplies(selected(K), selected(N)) ::: If K is selected, N is also selected\n\n# Options\nQuestion ::: The selection of animals must include\nis_sat(ForAll([a:animals], Count([a:animals], selected(a)) <= 2)) ::: (A)\nis_sat(ForAll([a:animals], Count([a:animals], selected(a)) >= 1)) ::: (B)\nis_sat(Count([a:animals], selected(a)) >= 2) ::: (C)\nis_sat(Count([a:animals], selected(a) == 2)) ::: (D)\nis_sat(Count([a:animals], selected(a) == 2)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of three departments—A, B, or C. The following conditions apply: The number of employees in department A is 20 more than the number of employees in department B. The number of employees in department C is 10 more than the number of employees in department B. The number of employees in department A is 10 more than the number of employees in department C.\nQuestion:\nIf the number of employees in department B is 20, the number of employees in department A is\nChoices:\n(A) 30\n(B) 40\n(C) 50\n(D) 60\n(E) 70\n###\n# Declarations\ndepartments = EnumSort([A, B, C])\nemploy"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_1_1",
    "context": "There are exactly six groups in this year's Civic Parade: firefighters, gymnasts, jugglers, musicians, puppeteers, and veterans. Each group marches as a unit; the groups are ordered from first, at the front of the parade, to sixth, at the back. The following conditions apply: At least two groups march behind the puppeteers but ahead of the musicians. Exactly one group marches behind the firefighters but ahead of the veterans. The gymnasts are the first, third, or fifth group.",
    "question": "Which one of the following could be an accurate list of the groups in the Civic Parade in order from first to last?",
    "answer": "D",
    "options": [
      "A) firefighters, puppeteers, veterans, musicians, gymnasts, jugglers",
      "B) gymnasts, puppeteers, jugglers, musicians, firefighters, veterans",
      "C) veterans, puppeteers, firefighters, gymnasts, jugglers, musicians",
      "D) jugglers, puppeteers, gymnasts, firefighters, musicians, veterans",
      "E) musicians, veterans, jugglers, firefighters, gymnasts, puppeteers"
    ],
    "raw_logic_programs": [
      "# Declarations\ngroups = EnumSort([firefighters, gymnasts, jugglers, musicians, puppeteers, veterans])\npositions = EnumSort([1, 2, 3, 4, 5, 6])\nmarches = Function([groups, positions] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([p:positions], marches(g, p)) == 1) ::: Each group marches as a unit\nAnd(marches(puppeteers, p), Count([g:groups], And(g!= puppeteers, marches(g, p))) >= 2) ::: At least two groups march behind the puppeteers but ahead of the musicians\nAnd(marches(firefighters, p), marches(veterans, q), p < q) ::: Exactly one group marches behind the firefighters but ahead of the veterans\nOr(marches(gymnasts, 1), marches(gymnasts, 3), marches(gymnasts, 5)) ::: The gymnasts are the first, third, or fifth group\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the groups in the Civic Parade in order from first to last?\nis_sat(ForAll([g:groups], marches(g, g))) ::: A) firefighters, puppeteers, veterans, musicians, gymnasts, jugglers\nis_sat(ForAll([g:groups], marches(g, g))) ::: B) gymnasts, puppeteers, jugglers, musicians, firefighters, veterans\nis_sat(ForAll([g:groups], marches(g, g))) ::: C) veterans, puppeteers, firefighters, gymnasts, jugglers, musicians\nis_sat(ForAll([g:groups], marches(g, g))) ::: D) jugglers, puppeteers, gymnasts, firefighters, musicians, veterans\nis_sat(ForAll([g:groups], marches(g, g))) ::: E) musicians, veterans, jugglers, firefighters, gymnasts, puppeteers\n------"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_1_2",
    "context": "There are exactly six groups in this year's Civic Parade: firefighters, gymnasts, jugglers, musicians, puppeteers, and veterans. Each group marches as a unit; the groups are ordered from first, at the front of the parade, to sixth, at the back. The following conditions apply: At least two groups march behind the puppeteers but ahead of the musicians. Exactly one group marches behind the firefighters but ahead of the veterans. The gymnasts are the first, third, or fifth group.",
    "question": "If the gymnasts march immediately ahead of the veterans, then which one of the following could be the fourth group?",
    "answer": "E",
    "options": [
      "A) gymnasts",
      "B) jugglers",
      "C) musicians",
      "D) puppeteers",
      "E) veterans"
    ],
    "raw_logic_programs": [
      "# Declarations\ngroups = EnumSort([firefighters, gymnasts, jugglers, musicians, puppeteers, veterans])\npositions = EnumSort([1, 2, 3, 4, 5, 6])\nmarches = Function([groups, positions] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([p:positions], marches(g, p)) == 1) ::: Each group marches as a unit\nAnd(marches(puppeteers, p), Count([g:groups], And(g!= puppeteers, marches(g, p))) >= 2) ::: At least two groups march behind the puppeteers but ahead of the musicians\nAnd(marches(firefighters, p), marches(veterans, q), p < q) ::: Exactly one group marches behind the firefighters but ahead of the veterans\nOr(marches(gymnasts, 1), marches(gymnasts, 3), marches(gymnasts, 5)) ::: The gymnasts are the first, third, or fifth group\n\n# Options\nQuestion ::: If the gymnasts march immediately ahead of the veterans, then which one of the following could be the fourth group?\nis_exception(is_sat(marches(gymnasts, 4))) ::: A) gymnasts\nis_exception(is_sat(marches(jugglers, 4))) ::: B) jugglers\nis_exception(is_sat(marches(musicians, 4))) ::: C) musicians\nis_exception(is_sat(marches(puppeteers, 4))) ::: D) puppeteers\nis_exception(is_sat(marches(veterans, 4))) ::: E) veterans\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The following conditions apply: The manager of department A is the only manager who has no assistant. The manager of department B has exactly two assistants. The manager of department C has exactly one assistant. The manager of department D has exactly three assistants. The manager of department E has exactly two assistants."
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_1_3",
    "context": "There are exactly six groups in this year's Civic Parade: firefighters, gymnasts, jugglers, musicians, puppeteers, and veterans. Each group marches as a unit; the groups are ordered from first, at the front of the parade, to sixth, at the back. The following conditions apply: At least two groups march behind the puppeteers but ahead of the musicians. Exactly one group marches behind the firefighters but ahead of the veterans. The gymnasts are the first, third, or fifth group.",
    "question": "If the veterans march immediately behind the puppeteers, then which one of the following could be the second group?",
    "answer": "A",
    "options": [
      "A) firefighters",
      "B) gymnasts",
      "C) jugglers",
      "D) musicians",
      "E) veterans"
    ],
    "raw_logic_programs": [
      "# Declarations\ngroups = EnumSort([firefighters, gymnasts, jugglers, musicians, puppeteers, veterans])\npositions = EnumSort([1, 2, 3, 4, 5, 6])\nmarches = Function([groups, positions] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([p:positions], marches(g, p)) == 1) ::: Each group marches as a unit\nAnd(marches(puppeteers, p), Count([g:groups], And(g!= puppeteers, marches(g, p))) >= 2) ::: At least two groups march behind the puppeteers but ahead of the musicians\nAnd(marches(firefighters, p), marches(veterans, q), p < q) ::: Exactly one group marches behind the firefighters but ahead of the veterans\nOr(marches(gymnasts, 1), marches(gymnasts, 3), marches(gymnasts, 5)) ::: The gymnasts are the first, third, or fifth group\n\n# Options\nQuestion ::: If the veterans march immediately behind the puppeteers, then which one of the following could be the second group?\nis_sat(ForAll([g:groups], marches(g, 2))) ::: A) firefighters\nis_sat(ForAll([g:groups], marches(g, 2))) ::: B) gymnasts\nis_sat(ForAll([g:groups], marches(g, 2))) ::: C) jugglers\nis_sat(ForAll([g:groups], marches(g, 2))) ::: D) musicians\nis_sat(ForAll([g:groups], marches(g, 2))) ::: E) veterans\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The following conditions apply: The manager of department A is the only manager who has no assistant. The manager of department B has exactly one assistant. The manager of department C has exactly two assistants. The manager of department D has exactly three assistants. The manager of department E has exactly four assistants. The"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_1_4",
    "context": "There are exactly six groups in this year's Civic Parade: firefighters, gymnasts, jugglers, musicians, puppeteers, and veterans. Each group marches as a unit; the groups are ordered from first, at the front of the parade, to sixth, at the back. The following conditions apply: At least two groups march behind the puppeteers but ahead of the musicians. Exactly one group marches behind the firefighters but ahead of the veterans. The gymnasts are the first, third, or fifth group.",
    "question": "If the jugglers are the fifth group, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The puppeteers are the first group.",
      "B) The firefighters are the first group.",
      "C) The veterans are the second group.",
      "D) The gymnasts are the third group.",
      "E) The musicians are the sixth group."
    ],
    "raw_logic_programs": [
      "# Declarations\ngroups = EnumSort([firefighters, gymnasts, jugglers, musicians, puppeteers, veterans])\npositions = EnumSort([1, 2, 3, 4, 5, 6])\nmarches = Function([groups, positions] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([p:positions], marches(g, p)) == 1) ::: Each group marches as a unit\nAnd(marches(puppeteers, p), Count([g:groups], And(g!= puppeteers, marches(g, p))) >= 2) ::: At least two groups march behind the puppeteers but ahead of the musicians\nAnd(marches(firefighters, p), marches(veterans, q), p < q) ::: Exactly one group marches behind the firefighters but ahead of the veterans\nOr(marches(gymnasts, 1), marches(gymnasts, 3), marches(gymnasts, 5)) ::: The gymnasts are the first, third, or fifth group\n\n# Options\nQuestion ::: If the jugglers are the fifth group, then which one of the following must be true?\nis_sat(And(marches(puppeteers, 1), marches(firefighters, 2), marches(gymnasts, 3), marches(jugglers, 5), marches(musicians, 6), marches(veterans, 4))) ::: (A)\nis_sat(And(marches(firefighters, 1), marches(gymnasts, 2), marches(jugglers, 5), marches(musicians, 6), marches(puppeteers, 3), marches(veterans, 4))) ::: (B)\nis_sat(And(marches(firefighters, 1), marches(gymnasts, 2), marches(jugglers, 5), marches(musicians, 6), marches(puppeteers, 3), marches(veterans, 2))) ::: (C)\nis_sat(And(marches(firefighters"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_1_5",
    "context": "There are exactly six groups in this year's Civic Parade: firefighters, gymnasts, jugglers, musicians, puppeteers, and veterans. Each group marches as a unit; the groups are ordered from first, at the front of the parade, to sixth, at the back. The following conditions apply: At least two groups march behind the puppeteers but ahead of the musicians. Exactly one group marches behind the firefighters but ahead of the veterans. The gymnasts are the first, third, or fifth group.",
    "question": "Which one of the following groups CANNOT march immediately behind the gymnasts?",
    "answer": "B",
    "options": [
      "A) firefighters",
      "B) jugglers",
      "C) musicians",
      "D) puppeteers",
      "E) veterans"
    ],
    "raw_logic_programs": [
      "# Declarations\ngroups = EnumSort([firefighters, gymnasts, jugglers, musicians, puppeteers, veterans])\npositions = EnumSort([1, 2, 3, 4, 5, 6])\nmarches = Function([groups, positions] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([p:positions], marches(g, p)) == 1) ::: Each group marches as a unit\nAnd(marches(puppeteers, p), Count([g:groups], And(g!= puppeteers, marches(g, p))) >= 2) ::: At least two groups march behind the puppeteers but ahead of the musicians\nAnd(marches(firefighters, p), marches(veterans, q), p < q) ::: Exactly one group marches behind the firefighters but ahead of the veterans\nOr(marches(gymnasts, 1), marches(gymnasts, 3), marches(gymnasts, 5)) ::: The gymnasts are the first, third, or fifth group\n\n# Options\nQuestion ::: Which one of the following groups CANNOT march immediately behind the gymnasts?\nis_exception(is_sat(marches(firefighters, 2))) ::: A) firefighters\nis_exception(is_sat(marches(jugglers, 2))) ::: B) jugglers\nis_exception(is_sat(marches(musicians, 2))) ::: C) musicians\nis_exception(is_sat(marches(puppeteers, 2))) ::: D) puppeteers\nis_exception(is_sat(marches(veterans, 2))) ::: E) veterans\n------\nProblem:\nIn a certain city, there are exactly six types of taxis: A, B, C, D, E, and F. Each taxi is of exactly one of these types. The following conditions apply: At least two taxis are of type A. At least two taxis are of type B. At least two taxis are of type C. At least two taxis are of type D. At least two taxis are of type E. At least two taxis are"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_2_6",
    "context": "A rowing team uses a boat with exactly six seats arranged in single file and numbered sequentially 1 through 6, from the front of the boat to the back. Six athletes—Lee, Miller, Ovitz, Singh, Valerio, and Zita—each row at exactly one of the seats. The following restrictions must apply: Miller rows closer to the front than Singh. Singh rows closer to the front than both Lee and Valerio. Valerio and Zita each row closer to the front than Ovitz.",
    "question": "Which one of the following could be an accurate matching of athletes to seats?",
    "answer": "C",
    "options": [
      "A) Miller: seat 1; Valerio: seat 5; Lee: seat 6",
      "B) Singh: seat 3; Valerio: seat 4; Zita: seat 5",
      "C) Miller: seat 1; Valerio: seat 3; Lee: seat 6",
      "D) Lee: seat 3; Valerio: seat 4; Ovitz: seat 5",
      "E) Zita: seat 2; Valerio: seat 3; Ovitz: seat 6"
    ],
    "raw_logic_programs": [
      "# Declarations\nseats = EnumSort([1, 2, 3, 4, 5, 6])\nathletes = EnumSort([Lee, Miller, Ovitz, Singh, Valerio, Zita])\nrows = Function([athletes, seats] -> [bool])\n\n# Constraints\nForAll([a:athletes], Count([s:seats], rows(a, s)) == 1) ::: each athlete rows at exactly one of the seats\nAnd(rows(Miller, s1), rows(Singh, s2), s1 < s2) ::: Miller rows closer to the front than Singh\nAnd(rows(Singh, s1), rows(Lee, s2), rows(Valerio, s3), s1 < s2, s1 < s3) ::: Singh rows closer to the front than both Lee and Valerio\nAnd(rows(Valerio, s1), rows(Zita, s2), rows(Ovitz, s3), s1 < s2, s1 < s3) ::: Valerio and Zita each row closer to the front than Ovitz\n\n# Options\nQuestion ::: Which one of the following could be an accurate matching of athletes to seats?\nis_sat(And(rows(Miller, 1), rows(Valerio, 5), rows(Lee, 6))) ::: A) Miller: seat 1; Valerio: seat 5; Lee: seat 6\nis_sat(And(rows(Singh, 3), rows(Valerio, 4), rows(Zita, 5))) ::: B) Singh: seat 3; Valerio: seat 4; Zita: seat 5\nis_sat(And(rows(Miller, 1), rows(Valerio, 3), rows(Lee, 6))) ::: C) Miller: seat 1; Valerio: seat 3; Lee: seat 6\nis_sat(And(rows(Lee, 3), rows(Valerio, 4), rows(Ovitz, 5))) ::: D) Lee: seat 3; Valerio: seat 4; Ovitz: seat 5\nis_sat(And(rows(Zita, 2), rows(Valerio, 3), rows"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_2_7",
    "context": "A rowing team uses a boat with exactly six seats arranged in single file and numbered sequentially 1 through 6, from the front of the boat to the back. Six athletes—Lee, Miller, Ovitz, Singh, Valerio, and Zita—each row at exactly one of the seats. The following restrictions must apply: Miller rows closer to the front than Singh. Singh rows closer to the front than both Lee and Valerio. Valerio and Zita each row closer to the front than Ovitz.",
    "question": "If Valerio rows at seat 5, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Miller rows at seat 1.",
      "B) Singh rows at seat 2.",
      "C) Zita rows at seat 3.",
      "D) Lee rows at seat 4.",
      "E) Ovitz rows at seat 6."
    ],
    "raw_logic_programs": [
      "# Declarations\nseats = EnumSort([1, 2, 3, 4, 5, 6])\nrowers = EnumSort([Lee, Miller, Ovitz, Singh, Valerio, Zita])\nrows = Function([rowers, seats] -> [bool])\n\n# Constraints\nForAll([r:rowers], Count([s:seats], rows(r, s)) == 1) ::: each rower rows at exactly one of the seats\nAnd(rows(Miller, s1), rows(Singh, s2), s1 < s2) ::: Miller rows closer to the front than Singh\nAnd(rows(Singh, s1), rows(Lee, s2), rows(Valerio, s3), s1 < s2, s1 < s3) ::: Singh rows closer to the front than both Lee and Valerio\nAnd(rows(Valerio, s1), rows(Zita, s2), rows(Ovitz, s3), s1 < s2, s1 < s3) ::: Valerio and Zita each row closer to the front than Ovitz\nrows(Valerio, 5) ::: Valerio rows at seat 5\n\n# Options\nQuestion ::: If Valerio rows at seat 5, then which one of the following must be true?\nis_sat(And(rows(Miller, 1), rows(Singh, 2), rows(Lee, 3), rows(Valerio, 5), rows(Zita, 6), rows(Ovitz, 4))) ::: A) Miller rows at seat 1.\nis_sat(And(rows(Miller, 1), rows(Singh, 2), rows(Lee, 3), rows(Valerio, 5), rows(Zita, 6), rows(Ovitz, 4))) ::: B) Singh rows at seat 2.\nis_sat(And(rows(Miller, 1), rows(Singh, 2), rows(Lee, 3), rows(Valerio, 5), rows(Zita, 6), rows(Ovitz, 4))) ::: C) Zita rows at seat 3.\nis_sat(And(rows(Miller, 1), rows(Singh, 2), rows"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_2_8",
    "context": "A rowing team uses a boat with exactly six seats arranged in single file and numbered sequentially 1 through 6, from the front of the boat to the back. Six athletes—Lee, Miller, Ovitz, Singh, Valerio, and Zita—each row at exactly one of the seats. The following restrictions must apply: Miller rows closer to the front than Singh. Singh rows closer to the front than both Lee and Valerio. Valerio and Zita each row closer to the front than Ovitz.",
    "question": "If Lee rows at seat 3, then each of the following could be true EXCEPT:",
    "answer": "E",
    "options": [
      "A) Zita rows immediately behind Valerio.",
      "B) Ovitz rows immediately behind Valerio.",
      "C) Ovitz rows immediately behind Zita.",
      "D) Valerio rows immediately behind Lee.",
      "E) Singh rows immediately behind Zita."
    ],
    "raw_logic_programs": [
      "# Declarations\nseats = EnumSort([1, 2, 3, 4, 5, 6])\nrowers = EnumSort([Lee, Miller, Ovitz, Singh, Valerio, Zita])\nrows = Function([rowers, seats] -> [bool])\n\n# Constraints\nForAll([r:rowers], Count([s:seats], rows(r, s)) == 1) ::: each rower rows at exactly one of the seats\nAnd(rows(Miller, s), s < rows(Singh, s)) ::: Miller rows closer to the front than Singh\nAnd(rows(Singh, s), s < rows(Lee, s), s < rows(Valerio, s)) ::: Singh rows closer to the front than both Lee and Valerio\nAnd(rows(Valerio, s), s < rows(Ovitz, s), s < rows(Zita, s)) ::: Valerio and Zita each row closer to the front than Ovitz\nrows(Lee, 3) ::: Lee rows at seat 3\n\n# Options\nQuestion ::: If Lee rows at seat 3, then each of the following could be true EXCEPT:\nis_exception(is_sat(rows(Zita, s), rows(Valerio, s + 1))) ::: A) Zita rows immediately behind Valerio.\nis_exception(is_sat(rows(Ovitz, s), rows(Valerio, s + 1))) ::: B) Ovitz rows immediately behind Valerio.\nis_exception(is_sat(rows(Ovitz, s), rows(Zita, s + 1))) ::: C) Ovitz rows immediately behind Zita.\nis_exception(is_sat(rows(Valerio, s), rows(Lee, s + 1))) ::: D) Valerio rows immediately behind Lee.\nis_exception(is_sat(rows(Singh, s), rows(Zita, s + 1))) ::: E) Singh rows immediately behind Zita.\n------\nProblem:\nA company has exactly six employees—F, G, H, I, J, and K—who are assigned to work on exactly six projects—L, M, N, O, P, and Q. Each employee is assigned to work on exactly one project, and"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_2_9",
    "context": "A rowing team uses a boat with exactly six seats arranged in single file and numbered sequentially 1 through 6, from the front of the boat to the back. Six athletes—Lee, Miller, Ovitz, Singh, Valerio, and Zita—each row at exactly one of the seats. The following restrictions must apply: Miller rows closer to the front than Singh. Singh rows closer to the front than both Lee and Valerio. Valerio and Zita each row closer to the front than Ovitz.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "A",
    "options": [
      "A) Ovitz rows closer to the front than Singh.",
      "B) Zita rows closer to the front than Miller.",
      "C) Lee rows closer to the front than Valerio.",
      "D) Singh rows closer to the front than Zita.",
      "E) Valerio rows closer to the front than Lee."
    ],
    "raw_logic_programs": [
      "# Declarations\nseats = EnumSort([1, 2, 3, 4, 5, 6])\nrowers = EnumSort([Lee, Miller, Ovitz, Singh, Valerio, Zita])\nrows = Function([rowers, seats] -> [bool])\n\n# Constraints\nForAll([r:rowers], Count([s:seats], rows(r, s)) == 1) ::: each rower rows at exactly one of the seats\nAnd(rows(Miller, s), rows(Singh, s)) ::: Miller rows closer to the front than Singh\nAnd(rows(Singh, s), rows(Lee, s), rows(Valerio, s)) ::: Singh rows closer to the front than both Lee and Valerio\nAnd(rows(Valerio, s), rows(Zita, s), rows(Ovitz, s)) ::: Valerio and Zita each row closer to the front than Ovitz\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(And(rows(Ovitz, s), rows(Singh, s)))) ::: A) Ovitz rows closer to the front than Singh.\nis_exception(is_sat(And(rows(Zita, s), rows(Miller, s)))) ::: B) Zita rows closer to the front than Miller.\nis_exception(is_sat(And(rows(Lee, s), rows(Valerio, s)))) ::: C) Lee rows closer to the front than Valerio.\nis_exception(is_sat(And(rows(Singh, s), rows(Zita, s)))) ::: D) Singh rows closer to the front than Zita.\nis_exception(is_sat(And(rows(Valerio, s), rows(Lee, s)))) ::: E) Valerio rows closer to the front than Lee.\n------\nProblem:\nA company has exactly six employees—Fred, Gina, Hank, Iris, Jill, and Kim—who are assigned to work on exactly six projects—M, N, O, P, Q, and R. Each employee is assigned to work on exactly one project, and each project is assigned to exactly one employee. The following conditions apply: Fred is assigned to project N. Gina is assigned to project P"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_2_10",
    "context": "A rowing team uses a boat with exactly six seats arranged in single file and numbered sequentially 1 through 6, from the front of the boat to the back. Six athletes—Lee, Miller, Ovitz, Singh, Valerio, and Zita—each row at exactly one of the seats. The following restrictions must apply: Miller rows closer to the front than Singh. Singh rows closer to the front than both Lee and Valerio. Valerio and Zita each row closer to the front than Ovitz.",
    "question": "Exactly how many different seats could be the seat occupied by Zita?",
    "answer": "D",
    "options": [
      "A) two",
      "B) three",
      "C) four",
      "D) five",
      "E) six"
    ],
    "raw_logic_programs": [
      "# Declarations\nseats = EnumSort([1, 2, 3, 4, 5, 6])\nathletes = EnumSort([Lee, Miller, Ovitz, Singh, Valerio, Zita])\nrows = Function([athletes, seats] -> [bool])\n\n# Constraints\nForAll([a:athletes], Count([s:seats], rows(a, s)) == 1) ::: each athlete rows at exactly one of the seats\nAnd(rows(Miller, s), rows(Singh, s)) ::: Miller rows closer to the front than Singh\nAnd(rows(Singh, s), rows(Lee, s), rows(Valerio, s)) ::: Singh rows closer to the front than both Lee and Valerio\nAnd(rows(Valerio, s), rows(Zita, s), rows(Ovitz, s)) ::: Valerio and Zita each row closer to the front than Ovitz\n\n# Options\nQuestion ::: Exactly how many different seats could be the seat occupied by Zita?\nCount([s:seats], rows(Zita, s)) == 2 ::: A) two\nCount([s:seats], rows(Zita, s)) == 3 ::: B) three\nCount([s:seats], rows(Zita, s)) == 4 ::: C) four\nCount([s:seats], rows(Zita, s)) == 5 ::: D) five\nCount([s:seats], rows(Zita, s)) == 6 ::: E) six\n------\nProblem:\nA company has exactly six employees—Fred, Gina, Hank, Iris, Jill, and Kim—who are assigned to work on exactly six projects—M, N, O, P, Q, and R. Each employee is assigned to work on exactly one project, and each project is assigned to exactly one employee. The following restrictions apply: Fred is assigned to project N. Gina is assigned to project P. Hank is assigned to project R. Iris is assigned to project Q. Jill is assigned to project O. Kim is assigned to project M.\nQuestion:\nWhich one of the following could be a complete and accurate list of the employees assigned to projects N, O, and P?\nChoices:\n(A) Fred, Jill, and Kim\n(B) Fred, J"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_2_11",
    "context": "A rowing team uses a boat with exactly six seats arranged in single file and numbered sequentially 1 through 6, from the front of the boat to the back. Six athletes—Lee, Miller, Ovitz, Singh, Valerio, and Zita—each row at exactly one of the seats. The following restrictions must apply: Miller rows closer to the front than Singh. Singh rows closer to the front than both Lee and Valerio. Valerio and Zita each row closer to the front than Ovitz.",
    "question": "If Valerio rows closer to the front than Zita, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Miller rows immediately in front of Singh.",
      "B) Lee rows immediately in front of Valerio.",
      "C) Zita rows immediately in front of Ovitz.",
      "D) Singh rows immediately in front of Lee.",
      "E) Singh rows immediately in front of Valerio."
    ],
    "raw_logic_programs": [
      "# Declarations\nseats = EnumSort([1, 2, 3, 4, 5, 6])\nrowers = EnumSort([Lee, Miller, Ovitz, Singh, Valerio, Zita])\nrows = Function([rowers, seats] -> [bool])\n\n# Constraints\nForAll([r:rowers], Count([s:seats], rows(r, s)) == 1) ::: each rower rows at exactly one of the seats\nAnd(rows(Miller, s), s < rows(Singh, s)) ::: Miller rows closer to the front than Singh\nAnd(rows(Singh, s), s < rows(Lee, s), s < rows(Valerio, s)) ::: Singh rows closer to the front than both Lee and Valerio\nAnd(rows(Valerio, s), s < rows(Ovitz, s), rows(Zita, s), s < rows(Ovitz, s)) ::: Valerio and Zita each row closer to the front than Ovitz\n\n# Options\nQuestion ::: If Valerio rows closer to the front than Zita, then which one of the following must be true?\nis_sat(And(rows(Miller, s), s < rows(Singh, s))) ::: A) Miller rows immediately in front of Singh.\nis_sat(And(rows(Lee, s), s < rows(Valerio, s))) ::: B) Lee rows immediately in front of Valerio.\nis_sat(And(rows(Zita, s), s < rows(Ovitz, s))) ::: C) Zita rows immediately in front of Ovitz.\nis_sat(And(rows(Singh, s), s < rows(Lee, s))) ::: D) Singh rows immediately in front of Lee.\nis_sat(And(rows(Singh, s), s < rows(Valerio, s))) ::: E) Singh rows immediately in front of Valerio.\n------"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_2_12",
    "context": "A rowing team uses a boat with exactly six seats arranged in single file and numbered sequentially 1 through 6, from the front of the boat to the back. Six athletes—Lee, Miller, Ovitz, Singh, Valerio, and Zita—each row at exactly one of the seats. The following restrictions must apply: Miller rows closer to the front than Singh. Singh rows closer to the front than both Lee and Valerio. Valerio and Zita each row closer to the front than Ovitz.",
    "question": "Suppose the restriction that Miller rows closer to the front than Singh is replaced by the restriction that Singh rows closer to the front than Miller. If the other two restrictions remain in effect, then each of the following could be an accurate matching of athletes to seats EXCEPT:",
    "answer": "C",
    "options": [
      "A) Singh: seat 1; Zita: seat 2; Miller: seat 6",
      "B) Singh: seat 1; Valerio: seat 3; Ovitz: seat 5",
      "C) Singh: seat 3; Lee: seat 4; Valerio: seat 5",
      "D) Valerio: seat 3; Miller: seat 4; Lee: seat 5",
      "E) Valerio: seat 4; Miller: seat 5; Ovitz: seat 6"
    ],
    "raw_logic_programs": [
      "# Declarations\nseats = EnumSort([1, 2, 3, 4, 5, 6])\nathletes = EnumSort([Lee, Miller, Ovitz, Singh, Valerio, Zita])\nrows = Function([athletes, seats] -> [bool])\n\n# Constraints\nForAll([a:athletes], Count([s:seats], rows(a, s)) == 1) ::: each athlete rows at exactly one of the seats\nAnd(rows(Miller, s1), rows(Singh, s2), s1 < s2) ::: Miller rows closer to the front than Singh\nAnd(rows(Singh, s1), rows(Lee, s2), rows(Valerio, s3), s1 < s2, s1 < s3) ::: Singh rows closer to the front than both Lee and Valerio\nAnd(rows(Valerio, s1), rows(Zita, s2), rows(Ovitz, s3), s1 < s2, s1 < s3) ::: Valerio and Zita each row closer to the front than Ovitz\n\n# Options\nQuestion ::: Suppose the restriction that Miller rows closer to the front than Singh is replaced by the restriction that Singh rows closer to the front than Miller. If the other two restrictions remain in effect, then each of the following could be an accurate matching of athletes to seats EXCEPT:\nis_exception(is_sat(rows(Singh, 1), rows(Zita, 2), rows(Miller, 6))) ::: A) Singh: seat 1; Zita: seat 2; Miller: seat 6\nis_exception(is_sat(rows(Singh, 1), rows(Valerio, 3), rows(Ovitz, 5))) ::: B) Singh: seat 1; Valerio: seat 3; Ovitz: seat 5\nis_exception(is_sat(rows(Singh, 3), rows("
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_3_13",
    "context": "Exactly six of an artist's paintings, entitled Quarterion, Redemption, Sipapu, Tesseract, Vale, and Zelkova, are sold at auction. Three of the paintings are sold to a museum, and three are sold to a private collector. Two of the paintings are from the artist's first (earliest) period, two are from her second period, and two are from her third (most recent) period. The private collector and the museum each buy one painting from each period. The following conditions hold: Sipapu, which is sold to the private collector, is from an earlier period than Zelkova, which is sold to the museum. Quarterion is not from an earlier period than Tesseract. Vale is from the artist's second period.",
    "question": "Which one of the following could be an accurate list of the paintings bought by the museum and the private collector, listed in order of the paintings' periods, from first to third?",
    "answer": "B",
    "options": [
      "A) museum: Quarterion, Vale, Zelkova private collector: Redemption, Sipapu, Tesseract",
      "B) museum: Redemption, Zelkova, Quarterion private collector: Sipapu, Vale, Tesseract",
      "C) museum: Sipapu, Zelkova, Quarterion private collector: Tesseract, Vale, Redemption",
      "D) museum: Tesseract, Quarterion, Zelkova private collector: Sipapu, Redemption, Vale",
      "E) museum: Zelkova, Tesseract, Redemption private collector: Sipapu, Vale, Quarterion"
    ],
    "raw_logic_programs": [
      "# Declarations\npaintings = EnumSort([Quarterion, Redemption, Sipapu, Tesseract, Vale, Zelkova])\nperiods = EnumSort([first, second, third])\nsold_to = EnumSort([museum, private_collector])\nsold = Function([paintings, sold_to] -> [bool])\n\n# Constraints\nForAll([p:paintings], Count([s:sold_to], sold(p, s)) == 1) ::: Exactly six of an artist's paintings, entitled Quarterion, Redemption, Sipapu, Tesseract, Vale, and Zelkova, are sold at auction\nAnd(sold(Sipapu, private_collector), sold(Zelkova, museum)) ::: Sipapu, which is sold to the private collector, is from an earlier period than Zelkova, which is sold to the museum\nNot(And(sold(Quarterion, museum), sold(Tesseract, private_collector))) ::: Quarterion is not from an earlier period than Tesseract\nsold(Vale, museum) ::: Vale is from the artist's second period\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the paintings bought by the museum and the private collector, listed in order of the paintings' periods, from first to third?\nis_sat(And(sold(Quarterion, museum), sold(Vale, museum), sold(Zelkova, museum), sold(Redemption, private_collector), sold(Sipapu, private_collector), sold(Tesseract, private_collector))) ::: A) museum: Quarterion, Vale, Zelkova private collector: Redemption, Sipapu, Tesseract\nis_sat(And(sold(Redemption, museum), sold(Zelkova, museum), sold(Quarterion, museum), sold("
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_3_14",
    "context": "Exactly six of an artist's paintings, entitled Quarterion, Redemption, Sipapu, Tesseract, Vale, and Zelkova, are sold at auction. Three of the paintings are sold to a museum, and three are sold to a private collector. Two of the paintings are from the artist's first (earliest) period, two are from her second period, and two are from her third (most recent) period. The private collector and the museum each buy one painting from each period. The following conditions hold: Sipapu, which is sold to the private collector, is from an earlier period than Zelkova, which is sold to the museum. Quarterion is not from an earlier period than Tesseract. Vale is from the artist's second period.",
    "question": "If Sipapu is from the artist's second period, which one of the following could be two of the three paintings bought by the private collector?",
    "answer": "B",
    "options": [
      "A) Quarterion and Zelkova",
      "B) Redemption and Tesseract",
      "C) Redemption and Vale",
      "D) Redemption and Zelkova",
      "E) Tesseract and Zelkova"
    ],
    "raw_logic_programs": [
      "# Declarations\npaintings = EnumSort([Quarterion, Redemption, Sipapu, Tesseract, Vale, Zelkova])\nperiods = EnumSort([first, second, third])\nsold_to = EnumSort([museum, private_collector])\nsold = Function([paintings, sold_to] -> [bool])\n\n# Constraints\nForAll([p:paintings], Count([s:sold_to], sold(p, s)) == 1) ::: Three of the paintings are sold to a museum, and three are sold to a private collector\nForAll([p:paintings], Count([p:periods], sold(p, p)) == 2) ::: Two of the paintings are from the artist's first (earliest) period, two are from her second period, and two are from her third (most recent) period\nAnd(sold(Sipapu, private_collector), sold(Zelkova, museum)) ::: Sipapu, which is sold to the private collector, is from an earlier period than Zelkova, which is sold to the museum\nNot(And(sold(Quarterion, museum), sold(Tesseract, private_collector))) ::: Quarterion is not from an earlier period than Tesseract\nsold(Vale, museum) ::: Vale is from the artist's second period\n\n# Options\nQuestion ::: If Sipapu is from the artist's second period, which one of the following could be two of the three paintings bought by the private collector?\nis_exception(is_sat(And(sold(Quarterion, private_collector), sold(Zelkova, private_collector)))) ::: (A)\nis_exception(is_sat(And(sold(Redeption, private_collector), sold(Tesseract, private_collector)))) ::: (B)\nis_exception(is_sat(And(sold(R"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_3_15",
    "context": "Exactly six of an artist's paintings, entitled Quarterion, Redemption, Sipapu, Tesseract, Vale, and Zelkova, are sold at auction. Three of the paintings are sold to a museum, and three are sold to a private collector. Two of the paintings are from the artist's first (earliest) period, two are from her second period, and two are from her third (most recent) period. The private collector and the museum each buy one painting from each period. The following conditions hold: Sipapu, which is sold to the private collector, is from an earlier period than Zelkova, which is sold to the museum. Quarterion is not from an earlier period than Tesseract. Vale is from the artist's second period.",
    "question": "Which one of the following is a complete and accurate list of the paintings, any one of which could be the painting from the artist's first period that is sold to the private collector?",
    "answer": "D",
    "options": [
      "A) Quarterion, Redemption",
      "B) Redemption, Sipapu",
      "C) Quarterion, Sipapu, Tesseract",
      "D) Quarterion, Redemption, Sipapu, Tesseract",
      "E) Redemption, Sipapu, Tesseract, Zelkova"
    ],
    "raw_logic_programs": [
      "# Declarations\npaintings = EnumSort([Quarterion, Redemption, Sipapu, Tesseract, Vale, Zelkova])\nperiods = EnumSort([first, second, third])\nsold_to = EnumSort([museum, private_collector])\nsold = Function([paintings, sold_to] -> [bool])\n\n# Constraints\nForAll([p:paintings], Count([p:paintings], sold(p, museum)) + Count([p:paintings], sold(p, private_collector)) == 3) ::: Three of the paintings are sold to a museum, and three are sold to a private collector\nForAll([p:paintings], Count([p:periods], sold(p, museum) == sold(p, private_collector)) == 1) ::: Two of the paintings are from the artist's first (earliest) period, two are from her second period, and two are from her third (most recent) period\nAnd(sold(Sipapu, private_collector), sold(Zelkova, museum)) ::: Sipapu, which is sold to the private collector, is from an earlier period than Zelkova, which is sold to the museum\nNot(And(sold(Quarterion, museum), sold(Tesseract, private_collector))) ::: Quarterion is not from an earlier period than Tesseract\nsold(Vale, museum) ::: Vale is from the artist's second period\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the paintings, any one of which could be the painting from the artist's first period that is sold to the private collector?\nis_exception(is_sat(ForAll([p:paintings], And(sold(p, private_collector), sold(p, first)) == sold(Quarterion, private_collector))), [Quarterion, Redemption]) ::: A) Qu"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_3_16",
    "context": "Exactly six of an artist's paintings, entitled Quarterion, Redemption, Sipapu, Tesseract, Vale, and Zelkova, are sold at auction. Three of the paintings are sold to a museum, and three are sold to a private collector. Two of the paintings are from the artist's first (earliest) period, two are from her second period, and two are from her third (most recent) period. The private collector and the museum each buy one painting from each period. The following conditions hold: Sipapu, which is sold to the private collector, is from an earlier period than Zelkova, which is sold to the museum. Quarterion is not from an earlier period than Tesseract. Vale is from the artist's second period.",
    "question": "If Sipapu is from the artist's second period, then which one of the following paintings could be from the period immediately preceding Quarterion's period and be sold to the same buyer as Quarterion?",
    "answer": "B",
    "options": [
      "A) Redemption",
      "B) Sipapu",
      "C) Tesseract",
      "D) Vale",
      "E) Zelkova"
    ],
    "raw_logic_programs": [
      "# Declarations\npaintings = EnumSort([Quarterion, Redemption, Sipapu, Tesseract, Vale, Zelkova])\nperiods = EnumSort([first, second, third])\nsold_to = EnumSort([museum, private_collector])\nsold = Function([paintings, sold_to] -> [bool])\nForAll([p:paintings], And(1 <= sold(p, museum), sold(p, museum) <= 3))\nForAll([p:paintings], And(1 <= sold(p, private_collector), sold(p, private_collector) <= 3))\n\n# Constraints\nForAll([p:paintings], Count([p:paintings], sold(p, museum)) == 3) ::: Three of the paintings are sold to a museum\nForAll([p:paintings], Count([p:paintings], sold(p, private_collector)) == 3) ::: Three of the paintings are sold to a private collector\nForAll([p:paintings], Count([p:periods], sold(p, museum) == sold(p, private_collector)) == 1) ::: Each painting is sold to exactly one buyer\nForAll([p:paintings], Count([p:periods], sold(p, museum) == sold(p, private_collector)) == 1) ::: Each painting is sold to exactly one buyer\nForAll([p:paintings], Count([p:periods], sold(p, museum)) == 1) ::: Each painting is sold to exactly one buyer\nForAll([p:paintings], Count([p:periods], sold(p, private_collector)) == 1) ::: Each painting is sold to exactly one buyer\nForAll([p:paintings], Count([p:periods], sold(p, museum)) == 1) ::: Each painting is sold to exactly one buyer\nForAll([p:paintings"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_3_17",
    "context": "Exactly six of an artist's paintings, entitled Quarterion, Redemption, Sipapu, Tesseract, Vale, and Zelkova, are sold at auction. Three of the paintings are sold to a museum, and three are sold to a private collector. Two of the paintings are from the artist's first (earliest) period, two are from her second period, and two are from her third (most recent) period. The private collector and the museum each buy one painting from each period. The following conditions hold: Sipapu, which is sold to the private collector, is from an earlier period than Zelkova, which is sold to the museum. Quarterion is not from an earlier period than Tesseract. Vale is from the artist's second period.",
    "question": "If Zelkova is sold to the same buyer as Tesseract and is from the period immediately preceding Tesseract's period, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Quarterion is sold to the museum.",
      "B) Quarterion is from the artist's third period.",
      "C) Redemption is sold to the private collector.",
      "D) Redemption is from the artist's third period.",
      "E) Redemption is sold to the same buyer as Vale."
    ],
    "raw_logic_programs": [
      "# Declarations\npaintings = EnumSort([Quarterion, Redemption, Sipapu, Tesseract, Vale, Zelkova])\nperiods = EnumSort([first, second, third])\nbuyers = EnumSort([museum, private_collector])\nsold = Function([paintings, buyers] -> [bool])\nperiod = Function([paintings] -> [periods])\n\n# Constraints\nForAll([p:paintings], Count([b:buyers], sold(p, b)) == 1) ::: Exactly six of an artist's paintings, entitled Quarterion, Redemption, Sipapu, Tesseract, Vale, and Zelkova, are sold at auction\nForAll([p:paintings], Count([b:buyers], sold(p, b)) == 1) ::: Three of the paintings are sold to a museum, and three are sold to a private collector\nForAll([p:paintings], Count([p:periods], period(p) == p) == 1) ::: Two of the paintings are from the artist's first (earliest) period, two are from her second period, and two are from her third (most recent) period\nForAll([p:paintings], Count([b:buyers], sold(p, b)) == 1) ::: The private collector and the museum each buy one painting from each period\nAnd(sold(Sipapu, private_collector), period(Sipapu) < period(Zelkova)) ::: Sipapu, which is sold to the private collector, is from an earlier period than Zelkova, which is sold to the museum\nNot(And(period(Quarterion) < period(Tesseract), sold(Quarterion, museum))) ::: Quarterion is not from an earlier period than Tesseract\nperiod(Vale) == second ::: Vale is from the artist's second period\n\n# Options"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_4_18",
    "context": "Each of exactly six lunch trucks sells a different one of six kinds of food: falafel, hot dogs, ice cream, pitas, salad, or tacos. Each truck serves one or more of exactly three office buildings: X, Y, or Z. The following conditions apply: The falafel truck, the hot dog truck, and exactly one other truck each serve Y. The falafel truck serves exactly two of the office buildings. The ice cream truck serves more of the office buildings than the salad truck. The taco truck does not serve Y. The falafel truck does not serve any office building that the pita truck serves. The taco truck serves two office buildings that are also served by the ice cream truck.",
    "question": "Which one of the following could be a complete and accurate list of each of the office buildings that the falafel truck serves?",
    "answer": "D",
    "options": [
      "A) X",
      "B) X, Z",
      "C) X, Y, Z",
      "D) Y, Z",
      "E) Z"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrucks = EnumSort([falafel_truck, hot_dog_truck, ice_cream_truck, pita_truck, salad_truck, taco_truck])\nfoods = EnumSort([falafel, hot_dogs, ice_cream, pitas, salad, tacos])\nbuildings = EnumSort([X, Y, Z])\nserves = Function([trucks, buildings] -> [bool])\n\n# Constraints\nForAll([t:trucks], Count([b:buildings], serves(t, b)) >= 1) ::: Each of exactly six lunch trucks sells a different one of six kinds of food: falafel, hot dogs, ice cream, pitas, salad, or tacos. Each truck serves one or more of exactly three office buildings: X, Y, or Z.\nAnd(serves(falafel_truck, Y), serves(hot_dog_truck, Y), serves(taco_truck, Y), serves(pita_truck, Y)) ::: The falafel truck, the hot dog truck, and exactly one other truck each serve Y.\nCount([b:buildings], serves(falafel_truck, b)) == 2 ::: The falafel truck serves exactly two of the office buildings.\nCount([b:buildings], serves(ice_cream_truck, b)) > Count([b:buildings], serves(salad_truck, b)) ::: The ice cream truck serves more of the office buildings than the salad truck.\nNot(serves(taco_truck, Y)) ::: The taco truck does not serve Y.\nForAll([b:buildings], Implies(serves(falafel_truck, b), Not(serves(pita_truck, b)))) ::: The falafel truck does not serve any office building that the pita truck serves."
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_4_19",
    "context": "Each of exactly six lunch trucks sells a different one of six kinds of food: falafel, hot dogs, ice cream, pitas, salad, or tacos. Each truck serves one or more of exactly three office buildings: X, Y, or Z. The following conditions apply: The falafel truck, the hot dog truck, and exactly one other truck each serve Y. The falafel truck serves exactly two of the office buildings. The ice cream truck serves more of the office buildings than the salad truck. The taco truck does not serve Y. The falafel truck does not serve any office building that the pita truck serves. The taco truck serves two office buildings that are also served by the ice cream truck.",
    "question": "For which one of the following pairs of trucks must it be the case that at least one of the office buildings is served by both of the trucks?",
    "answer": "C",
    "options": [
      "A) the hot dog truck and the pita truck",
      "B) the hot dog truck and the taco truck",
      "C) the ice cream truck and the pita truck",
      "D) the ice cream truck and the salad truck",
      "E) the salad truck and the taco truck"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrucks = EnumSort([falafel, hot_dogs, ice_cream, pitas, salad, tacos])\nbuildings = EnumSort([X, Y, Z])\nserves = Function([trucks, buildings] -> [bool])\n\n# Constraints\nForAll([t:trucks], Count([b:buildings], serves(t, b)) >= 1) ::: Each of exactly six lunch trucks sells a different one of six kinds of food\nAnd(serves(falafel, Y), serves(hot_dogs, Y), serves(ice_cream, Y), Count([t:trucks], And(t!= falafel, t!= hot_dogs, t!= ice_cream, serves(t, Y))) == 1) ::: The falafel truck, the hot dog truck, and exactly one other truck each serve Y\nCount([b:buildings], serves(falafel, b)) == 2 ::: The falafel truck serves exactly two of the office buildings\nCount([b:buildings], serves(ice_cream, b)) > Count([b:buildings], serves(salad, b)) ::: The ice cream truck serves more of the office buildings than the salad truck\nNot(serves(tacos, Y)) ::: The taco truck does not serve Y\nForAll([b:buildings], Implies(serves(falafel, b), Not(serves(pitas, b)))) ::: The falafel truck does not serve any office building that the pita truck serves\nAnd(serves(tacos, X), serves(ice_cream, X), serves(tacos, Z), serves(ice_cream, Z)) ::: The taco truck serves two office buildings that are also served by the ice cream truck\n\n# Options\nQuestion ::: For which one of the following pairs of trucks must it be the case that at least one of the office buildings"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_4_20",
    "context": "Each of exactly six lunch trucks sells a different one of six kinds of food: falafel, hot dogs, ice cream, pitas, salad, or tacos. Each truck serves one or more of exactly three office buildings: X, Y, or Z. The following conditions apply: The falafel truck, the hot dog truck, and exactly one other truck each serve Y. The falafel truck serves exactly two of the office buildings. The ice cream truck serves more of the office buildings than the salad truck. The taco truck does not serve Y. The falafel truck does not serve any office building that the pita truck serves. The taco truck serves two office buildings that are also served by the ice cream truck.",
    "question": "If the ice cream truck serves fewer of the office buildings than the hot dog truck, then which one of the following is a pair of lunch trucks that must serve exactly the same buildings as each other?",
    "answer": "E",
    "options": [
      "A) the falafel truck and the hot dog truck",
      "B) the falafel truck and the salad truck",
      "C) the ice cream truck and the pita truck",
      "D) the ice cream truck and the salad truck",
      "E) the ice cream truck and the taco truck"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrucks = EnumSort([falafel, hot_dogs, ice_cream, pitas, salad, tacos])\nbuildings = EnumSort([X, Y, Z])\nserves = Function([trucks, buildings] -> [bool])\n\n# Constraints\nForAll([t:trucks], Count([b:buildings], serves(t, b)) >= 1) ::: Each of exactly six lunch trucks sells a different one of six kinds of food\nAnd(serves(falafel, Y), serves(hot_dogs, Y), serves(ice_cream, Y), Count([t:trucks], And(t!= falafel, t!= hot_dogs, t!= ice_cream, serves(t, Y))) == 1) ::: The falafel truck, the hot dog truck, and exactly one other truck each serve Y\nCount([b:buildings], serves(falafel, b)) == 2 ::: The falafel truck serves exactly two of the office buildings\nCount([b:buildings], serves(ice_cream, b)) > Count([b:buildings], serves(salad, b)) ::: The ice cream truck serves more of the office buildings than the salad truck\nNot(serves(tacos, Y)) ::: The taco truck does not serve Y\nForAll([b:buildings], Implies(serves(falafel, b), Not(serves(pitas, b)))) ::: The falafel truck does not serve any office building that the pita truck serves\nAnd(serves(ice_cream, X), serves(ice_cream, Z), serves(tacos, X), serves(tacos, Z)) ::: The taco truck serves two office buildings that are also served by the ice cream truck\n\n# Options\nQuestion ::: If the ice cream truck serves fewer of the office buildings than the hot dog truck, then which one of"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_4_21",
    "context": "Each of exactly six lunch trucks sells a different one of six kinds of food: falafel, hot dogs, ice cream, pitas, salad, or tacos. Each truck serves one or more of exactly three office buildings: X, Y, or Z. The following conditions apply: The falafel truck, the hot dog truck, and exactly one other truck each serve Y. The falafel truck serves exactly two of the office buildings. The ice cream truck serves more of the office buildings than the salad truck. The taco truck does not serve Y. The falafel truck does not serve any office building that the pita truck serves. The taco truck serves two office buildings that are also served by the ice cream truck.",
    "question": "Which one of the following could be a complete and accurate list of the lunch trucks, each of which serves all three of the office buildings?",
    "answer": "A",
    "options": [
      "A) the hot dog truck, the ice cream truck",
      "B) the hot dog truck, the salad truck",
      "C) the ice cream truck, the taco truck",
      "D) the hot dog truck, the ice cream truck, the pita truck",
      "E) the ice cream truck, the pita truck, the salad truck"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200406_4-G_4_22",
    "context": "Each of exactly six lunch trucks sells a different one of six kinds of food: falafel, hot dogs, ice cream, pitas, salad, or tacos. Each truck serves one or more of exactly three office buildings: X, Y, or Z. The following conditions apply: The falafel truck, the hot dog truck, and exactly one other truck each serve Y. The falafel truck serves exactly two of the office buildings. The ice cream truck serves more of the office buildings than the salad truck. The taco truck does not serve Y. The falafel truck does not serve any office building that the pita truck serves. The taco truck serves two office buildings that are also served by the ice cream truck.",
    "question": "Which one of the following lunch trucks CANNOT serve both X and Z?",
    "answer": "C",
    "options": [
      "A) the hot dog truck",
      "B) the ice cream truck",
      "C) the pita truck",
      "D) the salad truck",
      "E) the taco truck"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_1_1",
    "context": "In the course of one month Garibaldi has exactly seven different meetings. Each of her meetings is with exactly one of five foreign dignitaries: Fuentes, Matsuba, Rhee, Soleimani, or Tbahi. The following constraints govern Garibaldi's meetings: She has exactly three meetings with Fuentes, and exactly one with each of the other dignitaries. She does not have any meetings in a row with Fuentes. Her meeting with Soleimani is the very next one after her meeting with Tbahi. Neither the first nor last of her meetings is with Matsuba.",
    "question": "Which one of the following could be the sequence of the meetings Garibaldi has with the dignitaries?",
    "answer": "C",
    "options": [
      "A) Fuentes, Rhee, Tbahi, Soleimani, Fuentes, Matsuba, Rhee",
      "B) Fuentes, Tbahi, Soleimani, Matsuba, Fuentes, Fuentes, Rhee",
      "C) Fuentes, Rhee, Fuentes, Matsuba, Fuentes, Tbahi, Soleimani",
      "D) Fuentes, Tbahi, Matsuba, Fuentes, Soleimani, Rhee, Fuentes",
      "E) Fuentes, Tbahi, Soleimani, Fuentes, Rhee, Fuentes, Matsuba"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_1_2",
    "context": "In the course of one month Garibaldi has exactly seven different meetings. Each of her meetings is with exactly one of five foreign dignitaries: Fuentes, Matsuba, Rhee, Soleimani, or Tbahi. The following constraints govern Garibaldi's meetings: She has exactly three meetings with Fuentes, and exactly one with each of the other dignitaries. She does not have any meetings in a row with Fuentes. Her meeting with Soleimani is the very next one after her meeting with Tbahi. Neither the first nor last of her meetings is with Matsuba.",
    "question": "If Garibaldi's last meeting is with Rhee, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Garibaldi's second meeting is with Soleimani.",
      "B) Garibaldi's third meeting is with Matsuba.",
      "C) Garibaldi's fourth meeting is with Soleimani.",
      "D) Garibaldi's fifth meeting is with Matsuba.",
      "E) Garibaldi's sixth meeting is with Soleimani."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_1_3",
    "context": "In the course of one month Garibaldi has exactly seven different meetings. Each of her meetings is with exactly one of five foreign dignitaries: Fuentes, Matsuba, Rhee, Soleimani, or Tbahi. The following constraints govern Garibaldi's meetings: She has exactly three meetings with Fuentes, and exactly one with each of the other dignitaries. She does not have any meetings in a row with Fuentes. Her meeting with Soleimani is the very next one after her meeting with Tbahi. Neither the first nor last of her meetings is with Matsuba.",
    "question": "If Garibaldi's second meeting is with Fuentes, then which one of the following is a complete and accurate list of the dignitaries with any one of whom Garibaldi's fourth meeting could be?",
    "answer": "E",
    "options": [
      "A) Fuentes, Soleimani, Rhee",
      "B) Matsuba, Rhee, Tbahi",
      "C) Matsuba, Soleimani",
      "D) Rhee, Tbahi",
      "E) Fuentes, Soleimani"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_1_4",
    "context": "In the course of one month Garibaldi has exactly seven different meetings. Each of her meetings is with exactly one of five foreign dignitaries: Fuentes, Matsuba, Rhee, Soleimani, or Tbahi. The following constraints govern Garibaldi's meetings: She has exactly three meetings with Fuentes, and exactly one with each of the other dignitaries. She does not have any meetings in a row with Fuentes. Her meeting with Soleimani is the very next one after her meeting with Tbahi. Neither the first nor last of her meetings is with Matsuba.",
    "question": "If Garibaldi's meeting with Rhee is the very next one after Garibaldi's meeting with Soleimani, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Garibaldi's third meeting is with Fuentes.",
      "B) Garibaldi's fourth meeting is with Rhee.",
      "C) Garibaldi's fifth meeting is with Fuentes.",
      "D) Garibaldi's sixth meeting is with Rhee.",
      "E) Garibaldi's seventh meeting is with Fuentes."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_1_5",
    "context": "In the course of one month Garibaldi has exactly seven different meetings. Each of her meetings is with exactly one of five foreign dignitaries: Fuentes, Matsuba, Rhee, Soleimani, or Tbahi. The following constraints govern Garibaldi's meetings: She has exactly three meetings with Fuentes, and exactly one with each of the other dignitaries. She does not have any meetings in a row with Fuentes. Her meeting with Soleimani is the very next one after her meeting with Tbahi. Neither the first nor last of her meetings is with Matsuba.",
    "question": "If Garibaldi's first meeting is with Tbahi, then Garibaldi's meeting with Rhee could be the",
    "answer": "D",
    "options": [
      "A) second meeting",
      "B) third meeting",
      "C) fifth meeting",
      "D) sixth meeting",
      "E) seventh meeting"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_1_6",
    "context": "In the course of one month Garibaldi has exactly seven different meetings. Each of her meetings is with exactly one of five foreign dignitaries: Fuentes, Matsuba, Rhee, Soleimani, or Tbahi. The following constraints govern Garibaldi's meetings: She has exactly three meetings with Fuentes, and exactly one with each of the other dignitaries. She does not have any meetings in a row with Fuentes. Her meeting with Soleimani is the very next one after her meeting with Tbahi. Neither the first nor last of her meetings is with Matsuba.",
    "question": "If Garibaldi's meeting with Matsuba is the very next meeting after Garibaldi's meeting with Rhee, then with which one of the following dignitaries must Garibaldi's fourth meeting be?",
    "answer": "A",
    "options": [
      "A) Fuentes",
      "B) Matsuba",
      "C) Rhee",
      "D) Soleimani",
      "E) Tbahi"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_2_7",
    "context": "During a certain week, an animal shelter places exactly six dogs—a greyhound, a husky, a keeshond, a Labrador retriever, a poodle, and a schnauzer—with new owners. Two are placed on Monday, two on Tuesday, and the remaining two on Wednesday, consistent with the following conditions: The Labrador retriever is placed on the same day as the poodle. The greyhound is not placed on the same day as the husky. If the keeshond is placed on Monday, the greyhound is placed on Tuesday. If the schnauzer is placed on Wednesday, the husky is placed on Tuesday.",
    "question": "Which one of the following could be a complete and accurate matching of dogs to the days on which they are placed?",
    "answer": "E",
    "options": [
      "A) Monday: greyhound, Labrador retriever Tuesday: husky, poodle Wednesday: keeshond, schnauzer",
      "B) Monday: greyhound, keeshond Tuesday: Labrador retriever, poodle Wednesday: husky, schnauzer",
      "C) Monday: keeshond, schnauzer Tuesday: greyhound, husky Wednesday: Labrador retriever, poodle",
      "D) Monday: Labrador retriever, poodle Tuesday: greyhound, keeshond Wednesday: husky, schnauzer",
      "E) Monday: Labrador retriever, poodle Tuesday: husky, keeshond Wednesday: greyhound, schnauzer"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_2_8",
    "context": "During a certain week, an animal shelter places exactly six dogs—a greyhound, a husky, a keeshond, a Labrador retriever, a poodle, and a schnauzer—with new owners. Two are placed on Monday, two on Tuesday, and the remaining two on Wednesday, consistent with the following conditions: The Labrador retriever is placed on the same day as the poodle. The greyhound is not placed on the same day as the husky. If the keeshond is placed on Monday, the greyhound is placed on Tuesday. If the schnauzer is placed on Wednesday, the husky is placed on Tuesday.",
    "question": "Which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) The keeshond is not placed on the same day as the greyhound.",
      "B) The keeshond is not placed on the same day as the schnauzer.",
      "C) The schnauzer is not placed on the same day as the husky.",
      "D) The greyhound is placed on the same day as the schnauzer.",
      "E) The husky is placed on the same day as the keeshond."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_2_9",
    "context": "During a certain week, an animal shelter places exactly six dogs—a greyhound, a husky, a keeshond, a Labrador retriever, a poodle, and a schnauzer—with new owners. Two are placed on Monday, two on Tuesday, and the remaining two on Wednesday, consistent with the following conditions: The Labrador retriever is placed on the same day as the poodle. The greyhound is not placed on the same day as the husky. If the keeshond is placed on Monday, the greyhound is placed on Tuesday. If the schnauzer is placed on Wednesday, the husky is placed on Tuesday.",
    "question": "If the poodle is placed on Tuesday, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) The greyhound is placed on Monday.",
      "B) The keeshond is placed on Monday.",
      "C) The Labrador retriever is placed on Monday.",
      "D) The husky is placed on Tuesday.",
      "E) The schnauzer is placed on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\ndogs = EnumSort([greyhound, husky, keeshond, Labrador_retriever, poodle, schnauzer])\ndays = EnumSort([Monday, Tuesday, Wednesday])\nplaced = Function([dogs, days] -> [bool])\n\n# Constraints\nForAll([d:dogs], Count([d:days], placed(d, d)) == 1) ::: each dog is placed on exactly one day\nAnd(placed(Labrador_retriever, d), placed(poodle, d)) ::: The Labrador retriever is placed on the same day as the poodle\nNot(And(placed(greyhound, d), placed(husky, d))) ::: The greyhound is not placed on the same day as the husky\nAnd(placed(keeshond, Monday), placed(greyhound, Tuesday)) ::: If the keeshond is placed on Monday, the greyhound is placed on Tuesday\nAnd(placed(schnauzer, Wednesday), placed(husky, Tuesday)) ::: If the schnauzer is placed on Wednesday, the husky is placed on Tuesday\n\n# Options\nQuestion ::: If the poodle is placed on Tuesday, then which one of the following could be true?\nis_valid(And(placed(poodle, Tuesday), placed(greyhound, Monday))) ::: (A)\nis_valid(And(placed(poodle, Tuesday), placed(keeshond, Monday))) ::: (B)\nis_valid(And(placed(poodle, Tuesday), placed(Labrador_retriever, Monday))) ::: (C)\nis_valid(And(placed(poodle, Tuesday), placed(husky, Tuesday))) ::: (D)\nis_valid(And(placed(poodle, Tuesday), placed(schnauzer, Wednesday))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_2_10",
    "context": "During a certain week, an animal shelter places exactly six dogs—a greyhound, a husky, a keeshond, a Labrador retriever, a poodle, and a schnauzer—with new owners. Two are placed on Monday, two on Tuesday, and the remaining two on Wednesday, consistent with the following conditions: The Labrador retriever is placed on the same day as the poodle. The greyhound is not placed on the same day as the husky. If the keeshond is placed on Monday, the greyhound is placed on Tuesday. If the schnauzer is placed on Wednesday, the husky is placed on Tuesday.",
    "question": "If the greyhound is placed on the same day as the keeshond, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The husky is placed on Monday.",
      "B) The Labrador retriever is placed on Monday.",
      "C) The keeshond is placed on Tuesday.",
      "D) The poodle is not placed on Wednesday.",
      "E) The schnauzer is not placed on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\ndogs = EnumSort([greyhound, husky, keeshond, Labrador_retriever, poodle, schnauzer])\ndays = EnumSort([Monday, Tuesday, Wednesday])\nplaced = Function([dogs, days] -> [bool])\n\n# Constraints\nForAll([d:dogs], Count([d:dogs], placed(d, d)) == 0) ::: no dog is placed on the same day as itself\nAnd(placed(Labrador_retriever, d), placed(poodle, d)) ::: The Labrador retriever is placed on the same day as the poodle\nImplies(placed(greyhound, d), Not(placed(husky, d))) ::: The greyhound is not placed on the same day as the husky\nImplies(placed(keeshond, Monday), placed(greyhound, Tuesday)) ::: If the keeshond is placed on Monday, the greyhound is placed on Tuesday\nImplies(placed(schnauzer, Wednesday), placed(husky, Tuesday)) ::: If the schnauzer is placed on Wednesday, the husky is placed on Tuesday\n\n# Options\nQuestion ::: If the greyhound is placed on the same day as the keeshond, then which one of the following must be true?\nis_valid(ForAll([d:dogs], placed(d, Monday))) ::: (A)\nis_valid(ForAll([d:dogs], placed(d, Monday))) ::: (B)\nis_valid(ForAll([d:dogs], placed(d, Tuesday))) ::: (C)\nis_valid(ForAll([d:dogs], Not(placed(d, Wednesday)))) ::: (D)\nis_valid(ForAll([d:dogs], Not(placed(d, Wednesday)))) ::: (E)\n------\nProblem:\nA certain company has six departments—A, B, C, D, E"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_2_11",
    "context": "During a certain week, an animal shelter places exactly six dogs—a greyhound, a husky, a keeshond, a Labrador retriever, a poodle, and a schnauzer—with new owners. Two are placed on Monday, two on Tuesday, and the remaining two on Wednesday, consistent with the following conditions: The Labrador retriever is placed on the same day as the poodle. The greyhound is not placed on the same day as the husky. If the keeshond is placed on Monday, the greyhound is placed on Tuesday. If the schnauzer is placed on Wednesday, the husky is placed on Tuesday.",
    "question": "If the husky is placed the day before the schnauzer, then which one of the following CANNOT be true?",
    "answer": "D",
    "options": [
      "A) The husky is placed on Monday.",
      "B) The keeshond is placed on Monday.",
      "C) The greyhound is placed on Tuesday.",
      "D) The poodle is placed on Tuesday.",
      "E) The poodle is placed on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\ndogs = EnumSort([greyhound, husky, keeshond, Labrador_retriever, poodle, schnauzer])\ndays = EnumSort([Monday, Tuesday, Wednesday])\nplaced = Function([dogs, days] -> [bool])\n\n# Constraints\nForAll([d:dogs], Count([d:days], placed(d, d)) == 1) ::: each dog is placed on exactly one day\nAnd(placed(Labrador_retriever, d), placed(poodle, d)) ::: The Labrador retriever is placed on the same day as the poodle\nImplies(placed(greyhound, d), Not(placed(husky, d))) ::: The greyhound is not placed on the same day as the husky\nAnd(placed(keeshond, Monday), placed(greyhound, Tuesday)) ::: If the keeshond is placed on Monday, the greyhound is placed on Tuesday\nAnd(placed(schnauzer, Wednesday), placed(husky, Tuesday)) ::: If the schnauzer is placed on Wednesday, the husky is placed on Tuesday\n\n# Options\nQuestion ::: If the husky is placed the day before the schnauzer, then which one of the following CANNOT be true?\nis_exception(is_sat(placed(husky, Monday))) ::: (A)\nis_exception(is_sat(placed(keeshond, Monday))) ::: (B)\nis_exception(is_sat(placed(greyhound, Tuesday))) ::: (C)\nis_exception(is_sat(placed(poodle, Tuesday))) ::: (D)\nis_exception(is_sat(placed(poodle, Wednesday))) ::: (E)\n------\nProblem:\nA certain company has six employees—A, B, C, D, E, and F—who work in either the accounting,"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_2_12",
    "context": "During a certain week, an animal shelter places exactly six dogs—a greyhound, a husky, a keeshond, a Labrador retriever, a poodle, and a schnauzer—with new owners. Two are placed on Monday, two on Tuesday, and the remaining two on Wednesday, consistent with the following conditions: The Labrador retriever is placed on the same day as the poodle. The greyhound is not placed on the same day as the husky. If the keeshond is placed on Monday, the greyhound is placed on Tuesday. If the schnauzer is placed on Wednesday, the husky is placed on Tuesday.",
    "question": "If the greyhound is placed the day before the poodle, then which one of the following CANNOT be placed on Tuesday?",
    "answer": "A",
    "options": [
      "A) the husky",
      "B) the keeshond",
      "C) the Labrador retriever",
      "D) the poodle",
      "E) the schnauzer"
    ],
    "raw_logic_programs": [
      "# Declarations\ndogs = EnumSort([greyhound, husky, keeshond, Labrador_retriever, poodle, schnauzer])\ndays = EnumSort([Monday, Tuesday, Wednesday])\nplaced = Function([dogs, days] -> [bool])\n\n# Constraints\nForAll([d:dogs], Count([d:days], placed(d, d)) == 1) ::: each dog is placed on exactly one day\nAnd(placed(Labrador_retriever, d), placed(poodle, d)) ::: The Labrador retriever is placed on the same day as the poodle\nImplies(placed(greyhound, d), Not(placed(husky, d))) ::: The greyhound is not placed on the same day as the husky\nAnd(placed(keeshond, Monday), placed(greyhound, Tuesday)) ::: If the keeshond is placed on Monday, the greyhound is placed on Tuesday\nAnd(placed(schnauzer, Wednesday), placed(husky, Tuesday)) ::: If the schnauzer is placed on Wednesday, the husky is placed on Tuesday\n\n# Options\nQuestion ::: If the greyhound is placed the day before the poodle, then which one of the following CANNOT be placed on Tuesday?\nis_exception(is_sat(placed(husky, Tuesday))) ::: (A)\nis_exception(is_sat(placed(keeshond, Tuesday))) ::: (B)\nis_exception(is_sat(placed(Labrador_retriever, Tuesday))) ::: (C)\nis_exception(is_sat(placed(poodle, Tuesday))) ::: (D)\nis_exception(is_sat(placed(schnauzer, Tuesday))) ::: (E)\n------\nProblem:\nA certain company has six employees—A, B, C, D,"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_3_13",
    "context": "A tour group plans to visit exactly five archaeological sites. Each site was discovered by exactly one of the following archaeologists—Ferrara, Gallagher, Oliphant—and each dates from the eighth, ninth, or tenth century (A.D.). The tour must satisfy the following conditions: The site visited second dates from the ninth century. Neither the site visited fourth nor the site visited fifth was discovered by Oliphant. Exactly one of the sites was discovered by Gallagher, and it dates from the tenth century. If a site dates from the eighth century, it was discovered by Oliphant. The site visited third dates from a more recent century than does either the site visited first or that visited fourth.",
    "question": "Which one of the following could be an accurate list of the discoverers of the five sites, listed in the order in which the sites are visited?",
    "answer": "E",
    "options": [
      "A) Oliphant, Oliphant, Gallagher, Oliphant, Ferrara",
      "B) Gallagher, Oliphant, Ferrara, Ferrara, Ferrara",
      "C) Oliphant, Gallagher, Oliphant, Ferrara, Ferrara",
      "D) Oliphant, Oliphant, Gallagher, Ferrara, Gallagher",
      "E) Ferrara, Oliphant, Gallagher, Ferrara, Ferrara"
    ],
    "raw_logic_programs": [
      "# Declarations\nsites = EnumSort([A, B, C, D, E])\ncenturies = EnumSort([eighth, ninth, tenth])\ndiscoverers = EnumSort([Ferrara, Gallagher, Oliphant])\ndates = Function([sites] -> [centuries])\ndiscovered = Function([sites, discoverers] -> [bool])\n\n# Constraints\nForAll([s:sites], Count([c:centuries], dates(s) == c) == 1) ::: Each site was discovered by exactly one of the following archaeologists\nAnd(dates(A) == ninth, dates(B)!= ninth) ::: The site visited second dates from the ninth century\nAnd(dates(D)!= ninth, dates(E)!= ninth) ::: Neither the site visited fourth nor the site visited fifth was discovered by Oliphant\nAnd(Count([s:sites], discovered(s, Gallagher)) == 1, dates(s) == tenth) ::: Exactly one of the sites was discovered by Gallagher, and it dates from the tenth century\nAnd(dates(s) == eighth, discovered(s, Oliphant)) ::: If a site dates from the eighth century, it was discovered by Oliphant\nAnd(dates(C) > dates(A), dates(C) > dates(D)) ::: The site visited third dates from a more recent century than does either the site visited first or that visited fourth\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the discoverers of the five sites, listed in the order in which the sites are visited?\nis_sat(ForAll([s:sites], discovered(s, Ferrara) == (s == A))) ::: A) Oliphant, Oliphant, Gallagher, Oliphant, Ferrara\nis_sat(ForAll([s:sites], discovered(s, Ferrara) == (s == B))) ::: B) Gallagher, Oliphant, Ferrara, Ferrara, Ferrara\nis_sat(ForAll([s:sites],"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_3_14",
    "context": "A tour group plans to visit exactly five archaeological sites. Each site was discovered by exactly one of the following archaeologists—Ferrara, Gallagher, Oliphant—and each dates from the eighth, ninth, or tenth century (A.D.). The tour must satisfy the following conditions: The site visited second dates from the ninth century. Neither the site visited fourth nor the site visited fifth was discovered by Oliphant. Exactly one of the sites was discovered by Gallagher, and it dates from the tenth century. If a site dates from the eighth century, it was discovered by Oliphant. The site visited third dates from a more recent century than does either the site visited first or that visited fourth.",
    "question": "If exactly one of the five sites the tour group visits dates from the tenth century, then which one of the following CANNOT be a site that was discovered by Ferrara?",
    "answer": "C",
    "options": [
      "A) the site visited first",
      "B) the site visited second",
      "C) the site visited third",
      "D) the site visited fourth",
      "E) the site visited fifth"
    ],
    "raw_logic_programs": [
      "# Declarations\nsites = EnumSort([A, B, C, D, E])\ncenturies = EnumSort([eighth, ninth, tenth])\ndiscovered_by = Function([sites] -> [archaeologists])\ndates_from = Function([sites] -> [centuries])\narchaeologists = EnumSort([Ferrara, Gallagher, Oliphant])\n\n# Constraints\nForAll([s:sites], Count([c:centuries], dates_from(s) == c) == 1) ::: Each site dates from exactly one of the following centuries\nForAll([s:sites], Count([a:archaeologists], discovered_by(s) == a) == 1) ::: Each site was discovered by exactly one of the following archaeologists\nAnd(dates_from(B) == ninth, dates_from(A)!= ninth, dates_from(E)!= ninth) ::: The site visited second dates from the ninth century\nAnd(discovered_by(D)!= Oliphant, discovered_by(E)!= Oliphant) ::: Neither the site visited fourth nor the site visited fifth was discovered by Oliphant\nAnd(Count([s:sites], discovered_by(s) == Gallagher) == 1, dates_from(s) == tenth) ::: Exactly one of the sites was discovered by Gallagher, and it dates from the tenth century\nAnd(dates_from(s) == eighth, discovered_by(s) == Oliphant) ::: If a site dates from the eighth century, it was discovered by Oliphant\nAnd(dates_from(C) > dates_from(A), dates_from(C) > dates_from(D)) ::: The site visited third dates from a more recent century than does either the site visited first or that visited fourth\n\n# Options\nQuestion ::: If exactly one of the five sites the tour group visits dates from the tenth century, then which one of the following CANNOT be a site that was discovered by Ferrara?\nis_exception(is_sat(discover"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_3_15",
    "context": "A tour group plans to visit exactly five archaeological sites. Each site was discovered by exactly one of the following archaeologists—Ferrara, Gallagher, Oliphant—and each dates from the eighth, ninth, or tenth century (A.D.). The tour must satisfy the following conditions: The site visited second dates from the ninth century. Neither the site visited fourth nor the site visited fifth was discovered by Oliphant. Exactly one of the sites was discovered by Gallagher, and it dates from the tenth century. If a site dates from the eighth century, it was discovered by Oliphant. The site visited third dates from a more recent century than does either the site visited first or that visited fourth.",
    "question": "Which one of the following could be a site that dates from the eighth century?",
    "answer": "A",
    "options": [
      "A) the site visited first",
      "B) the site visited second",
      "C) the site visited third",
      "D) the site visited fourth",
      "E) the site visited fifth"
    ],
    "raw_logic_programs": [
      "# Declarations\nsites = EnumSort([A, B, C, D, E])\narchaeologists = EnumSort([Ferrara, Gallagher, Oliphant])\ncenturies = EnumSort([eighth, ninth, tenth])\ndiscovered = Function([sites, archaeologists] -> [bool])\ndates = Function([sites, centuries] -> [bool])\n\n# Constraints\nForAll([s:sites], Count([a:archaeologists], discovered(s, a)) == 1) ::: Each site was discovered by exactly one of the following archaeologists\nForAll([s:sites], Count([c:centuries], dates(s, c)) == 1) ::: Each site dates from the eighth, ninth, or tenth century\nAnd(dates(B, ninth), Not(dates(A, ninth))) ::: The site visited second dates from the ninth century\nAnd(Not(discovered(D, Oliphant)), Not(discovered(E, Oliphant))) ::: Neither the site visited fourth nor the site visited fifth was discovered by Oliphant\nAnd(Count([a:archaeologists], discovered(A, a)) == 1, dates(A, tenth)) ::: Exactly one of the sites was discovered by Gallagher, and it dates from the tenth century\nAnd(dates(A, eighth), discovered(A, Oliphant)) ::: If a site dates from the eighth century, it was discovered by Oliphant\nAnd(dates(C, tenth), And(dates(A, ninth), dates(D, ninth))) ::: The site visited third dates from a more recent century than does either the site visited first or that visited fourth\n\n# Options\nQuestion ::: Which one of the following could be a site that dates from the eighth century?\nis_valid(dates(A, eighth)) ::: A) the site visited first\nis_valid(dates(B, eighth)) ::: B) the site visited second\nis_valid(dates(C, eighth)) ::: C) the site visited third\nis_"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_3_16",
    "context": "A tour group plans to visit exactly five archaeological sites. Each site was discovered by exactly one of the following archaeologists—Ferrara, Gallagher, Oliphant—and each dates from the eighth, ninth, or tenth century (A.D.). The tour must satisfy the following conditions: The site visited second dates from the ninth century. Neither the site visited fourth nor the site visited fifth was discovered by Oliphant. Exactly one of the sites was discovered by Gallagher, and it dates from the tenth century. If a site dates from the eighth century, it was discovered by Oliphant. The site visited third dates from a more recent century than does either the site visited first or that visited fourth.",
    "question": "Which one of the following is a complete and accurate list of the sites each of which CANNOT be the site discovered by Gallagher?",
    "answer": "E",
    "options": [
      "A) third, fourth, fifth",
      "B) second, third, fourth",
      "C) first, fourth, fifth",
      "D) first, second, fifth",
      "E) first, second, fourth"
    ],
    "raw_logic_programs": [
      "# Declarations\nsites = EnumSort([first, second, third, fourth, fifth])\ncenturies = EnumSort([eighth, ninth, tenth])\ndiscovered_by = Function([sites, centuries] -> [archaeologists])\narchaeologists = EnumSort([Ferrara, Gallagher, Oliphant])\ndates_from = Function([sites, centuries] -> [bool])\n\n# Constraints\nForAll([s:sites], Count([c:centuries], dates_from(s, c)) == 1) ::: Each site dates from exactly one of the following centuries\nForAll([s:sites], Count([a:archaeologists], discovered_by(s, c) == a) == 1) ::: Each site was discovered by exactly one of the following archaeologists\nAnd(dates_from(second, ninth), dates_from(second, eighth)) ::: The site visited second dates from the ninth century\nAnd(Not(discovered_by(fourth, Oliphant)), Not(discovered_by(fifth, Oliphant))) ::: Neither the site visited fourth nor the site visited fifth was discovered by Oliphant\nAnd(Count([s:sites], discovered_by(s, Gallagher)) == 1, dates_from(s, tenth)) ::: Exactly one of the sites was discovered by Gallagher, and it dates from the tenth century\nAnd(dates_from(s, eighth), discovered_by(s, Oliphant)) ::: If a site dates from the eighth century, it was discovered by Oliphant\nAnd(dates_from(third, c), dates_from(first, c)) ::: The site visited third dates from a more recent century than does either the site visited first or that visited fourth\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the sites each of which CANNOT be the site discovered by Gallagher?\nis_exception(is_sat(ForAll([s:sites], Implies(discovered_by(s, Gallagher), s == third)))) :"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_3_17",
    "context": "A tour group plans to visit exactly five archaeological sites. Each site was discovered by exactly one of the following archaeologists—Ferrara, Gallagher, Oliphant—and each dates from the eighth, ninth, or tenth century (A.D.). The tour must satisfy the following conditions: The site visited second dates from the ninth century. Neither the site visited fourth nor the site visited fifth was discovered by Oliphant. Exactly one of the sites was discovered by Gallagher, and it dates from the tenth century. If a site dates from the eighth century, it was discovered by Oliphant. The site visited third dates from a more recent century than does either the site visited first or that visited fourth.",
    "question": "The tour group could visit at most how many sites that were discovered by Ferrara?",
    "answer": "D",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nsites = EnumSort([A, B, C, D, E])\narchaeologists = EnumSort([Ferrara, Gallagher, Oliphant])\ncenturies = EnumSort([eighth, ninth, tenth])\ndiscovered = Function([sites, archaeologists] -> [bool])\ndates = Function([sites, centuries] -> [bool])\n\n# Constraints\nForAll([s:sites], Count([a:archaeologists], discovered(s, a)) == 1) ::: Each site was discovered by exactly one of the following archaeologists\nForAll([s:sites], Count([c:centuries], dates(s, c)) == 1) ::: Each site dates from the eighth, ninth, or tenth century\nAnd(dates(B, ninth), Not(discovered(B, Oliphant))) ::: The site visited second dates from the ninth century\nAnd(Not(discovered(D, Oliphant)), Not(discovered(E, Oliphant))) ::: Neither the site visited fourth nor the site visited fifth was discovered by Oliphant\nAnd(Count([a:archaeologists], discovered(A, a)) == 1, dates(A, tenth)) ::: Exactly one of the sites was discovered by Gallagher, and it dates from the tenth century\nAnd(dates(C, eighth), discovered(C, Oliphant)) ::: If a site dates from the eighth century, it was discovered by Oliphant\nAnd(dates(C, ninth), dates(D, tenth)) ::: The site visited third dates from a more recent century than does either the site visited first or that visited fourth\n\n# Options\nQuestion ::: The tour group could visit at most how many sites that were discovered by Ferrara?\nis_valid(Count([s:sites], discovered(s, Ferrara)) <= 1) ::: A) one\nis_valid(Count([s:sites], discovered(s, Ferrara)) <= 2) ::: B) two\nis_valid(Count([s:sites], discovered(s"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_4_18",
    "context": "Each day of a five-day workweek (Monday through Friday), Anastasia parks for the entire day in exactly one of three downtown parking lots—X, Y, and Z. One of the lots costs $10 for the day, another costs $12, and the other costs $15. Anastasia parks in each of the three lots at least once during her workweek. The following conditions must apply: On Thursday, Anastasia parks in the $15 lot. Lot X costs more than lot Z. The lot Anastasia parks in on Wednesday costs more than the one she parks in on Friday. Anastasia parks in lot Z on more days of the workweek than she parks in lot X.",
    "question": "Which one of the following could be a complete and accurate list of which lot Anastasia parks in each day, listed in order from Monday through Friday?",
    "answer": "A",
    "options": [
      "A) Y, Z, X, Y, Z",
      "B) Y, Z, Z, Y, X",
      "C) Z, Z, X, X, Y",
      "D) Z, Z, X, X, Z",
      "E) Z, Z, X, Z, Y"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nlots = EnumSort([X, Y, Z])\ncosts = EnumSort([$10, $12, $15])\nparked = Function([days, lots] -> [costs])\n\n# Constraints\nForAll([d:days], parked(d, X) == parked(d, Y) == parked(d, Z)) ::: Anastasia parks in each of the three lots at least once during her workweek\nparked(Thursday, Z) == $15 ::: On Thursday, Anastasia parks in the $15 lot\nparked(X) > parked(Z) ::: Lot X costs more than lot Z\nparked(Wednesday) > parked(Friday) ::: The lot Anastasia parks in on Wednesday costs more than the one she parks in on Friday\nCount([d:days], parked(d, Z)) > Count([d:days], parked(d, X)) ::: Anastasia parks in lot Z on more days of the workweek than she parks in lot X\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of which lot Anastasia parks in each day, listed in order from Monday through Friday?\nis_sat(ForAll([d:days], parked(d, Y) == $10)) ::: A) Y, Z, X, Y, Z\nis_sat(ForAll([d:days], parked(d, Z) == $12)) ::: B) Y, Z, Z, Y, X\nis_sat(ForAll([d:days], parked(d, X) == $12)) ::: C) Z, Z, X, X, Y\nis_sat(ForAll([d:days], parked(d, Z) == $15)) ::: D) Z, Z, X, X, Z\nis_sat(ForAll([d:days], parked(d"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_4_19",
    "context": "Each day of a five-day workweek (Monday through Friday), Anastasia parks for the entire day in exactly one of three downtown parking lots—X, Y, and Z. One of the lots costs $10 for the day, another costs $12, and the other costs $15. Anastasia parks in each of the three lots at least once during her workweek. The following conditions must apply: On Thursday, Anastasia parks in the $15 lot. Lot X costs more than lot Z. The lot Anastasia parks in on Wednesday costs more than the one she parks in on Friday. Anastasia parks in lot Z on more days of the workweek than she parks in lot X.",
    "question": "Anastasia CANNOT park in the $15 lot on which one of the following days?",
    "answer": "E",
    "options": [
      "A) Monday",
      "B) Tuesday",
      "C) Wednesday",
      "D) Thursday",
      "E) Friday"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_4_20",
    "context": "Each day of a five-day workweek (Monday through Friday), Anastasia parks for the entire day in exactly one of three downtown parking lots—X, Y, and Z. One of the lots costs $10 for the day, another costs $12, and the other costs $15. Anastasia parks in each of the three lots at least once during her workweek. The following conditions must apply: On Thursday, Anastasia parks in the $15 lot. Lot X costs more than lot Z. The lot Anastasia parks in on Wednesday costs more than the one she parks in on Friday. Anastasia parks in lot Z on more days of the workweek than she parks in lot X.",
    "question": "If lot Z is the $12 lot, then on which one of the following days must Anastasia park in lot Y?",
    "answer": "E",
    "options": [
      "A) Monday",
      "B) Tuesday",
      "C) Wednesday",
      "D) Thursday",
      "E) Friday"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_4_21",
    "context": "Each day of a five-day workweek (Monday through Friday), Anastasia parks for the entire day in exactly one of three downtown parking lots—X, Y, and Z. One of the lots costs $10 for the day, another costs $12, and the other costs $15. Anastasia parks in each of the three lots at least once during her workweek. The following conditions must apply: On Thursday, Anastasia parks in the $15 lot. Lot X costs more than lot Z. The lot Anastasia parks in on Wednesday costs more than the one she parks in on Friday. Anastasia parks in lot Z on more days of the workweek than she parks in lot X.",
    "question": "Anastasia CANNOT park in lot Z on which one of the following days?",
    "answer": "D",
    "options": [
      "A) Monday",
      "B) Tuesday",
      "C) Wednesday",
      "D) Thursday",
      "E) Friday"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200410_3-G_4_22",
    "context": "Each day of a five-day workweek (Monday through Friday), Anastasia parks for the entire day in exactly one of three downtown parking lots—X, Y, and Z. One of the lots costs $10 for the day, another costs $12, and the other costs $15. Anastasia parks in each of the three lots at least once during her workweek. The following conditions must apply: On Thursday, Anastasia parks in the $15 lot. Lot X costs more than lot Z. The lot Anastasia parks in on Wednesday costs more than the one she parks in on Friday. Anastasia parks in lot Z on more days of the workweek than she parks in lot X.",
    "question": "Which one of the following could be a complete and accurate list of the days on which Anastasia parks in the $10 lot?",
    "answer": "C",
    "options": [
      "A) Monday",
      "B) Tuesday",
      "C) Monday, Tuesday",
      "D) Monday, Wednesday",
      "E) Monday, Thursday"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_1_1",
    "context": "On one afternoon, Patterson meets individually with each of exactly five clients—Reilly, Sanchez, Tang, Upton, and Yansky—and also goes to the gym by herself for a workout. Patterson's workout and her five meetings each start at either 1:00, 2:00, 3:00, 4:00, 5:00, or 6:00. The following conditions must apply: Patterson meets with Sanchez at some time before her workout. Patterson meets with Tang at some time after her workout. Patterson meets with Yansky either immediately before or immediately after her workout. Patterson meets with Upton at some time before she meets with Reilly.",
    "question": "Which one of the following could be an acceptable schedule of Patterson's workout and meetings, in order from 1:00 to 6:00?",
    "answer": "E",
    "options": [
      "A) Yansky, workout, Upton, Reilly, Sanchez, Tang",
      "B) Upton, Tang, Sanchez, Yansky, workout, Reilly",
      "C) Upton, Reilly, Sanchez, workout, Tang, Yansky",
      "D) Sanchez, Yansky, workout, Reilly, Tang, Upton",
      "E) Sanchez, Upton, workout, Yansky, Tang, Reilly"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_1_2",
    "context": "On one afternoon, Patterson meets individually with each of exactly five clients—Reilly, Sanchez, Tang, Upton, and Yansky—and also goes to the gym by herself for a workout. Patterson's workout and her five meetings each start at either 1:00, 2:00, 3:00, 4:00, 5:00, or 6:00. The following conditions must apply: Patterson meets with Sanchez at some time before her workout. Patterson meets with Tang at some time after her workout. Patterson meets with Yansky either immediately before or immediately after her workout. Patterson meets with Upton at some time before she meets with Reilly.",
    "question": "How many of the clients are there, any one of whom could meet with Patterson at 1:00?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_1_3",
    "context": "On one afternoon, Patterson meets individually with each of exactly five clients—Reilly, Sanchez, Tang, Upton, and Yansky—and also goes to the gym by herself for a workout. Patterson's workout and her five meetings each start at either 1:00, 2:00, 3:00, 4:00, 5:00, or 6:00. The following conditions must apply: Patterson meets with Sanchez at some time before her workout. Patterson meets with Tang at some time after her workout. Patterson meets with Yansky either immediately before or immediately after her workout. Patterson meets with Upton at some time before she meets with Reilly.",
    "question": "Patterson CANNOT meet with Upton at which one of the following times?",
    "answer": "C",
    "options": [
      "A) 1:00",
      "B) 2:00",
      "C) 3:00",
      "D) 4:00",
      "E) 5:00"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_1_4",
    "context": "On one afternoon, Patterson meets individually with each of exactly five clients—Reilly, Sanchez, Tang, Upton, and Yansky—and also goes to the gym by herself for a workout. Patterson's workout and her five meetings each start at either 1:00, 2:00, 3:00, 4:00, 5:00, or 6:00. The following conditions must apply: Patterson meets with Sanchez at some time before her workout. Patterson meets with Tang at some time after her workout. Patterson meets with Yansky either immediately before or immediately after her workout. Patterson meets with Upton at some time before she meets with Reilly.",
    "question": "If Patterson meets with Sanchez the hour before she meets with Yansky, then each of the following could be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) Patterson meets with Reilly at 2:00.",
      "B) Patterson meets with Yansky at 3:00.",
      "C) Patterson meets with Tang at 4:00.",
      "D) Patterson meets with Yansky at 5:00.",
      "E) Patterson meets with Tang at 6:00."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_1_5",
    "context": "On one afternoon, Patterson meets individually with each of exactly five clients—Reilly, Sanchez, Tang, Upton, and Yansky—and also goes to the gym by herself for a workout. Patterson's workout and her five meetings each start at either 1:00, 2:00, 3:00, 4:00, 5:00, or 6:00. The following conditions must apply: Patterson meets with Sanchez at some time before her workout. Patterson meets with Tang at some time after her workout. Patterson meets with Yansky either immediately before or immediately after her workout. Patterson meets with Upton at some time before she meets with Reilly.",
    "question": "If Patterson meets with Tang at 4:00, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Patterson meets with Reilly at 5:00.",
      "B) Patterson meets with Upton at 5:00.",
      "C) Patterson meets with Yansky at 2:00.",
      "D) Patterson meets with Yansky at 3:00.",
      "E) Patterson's workout is at 2:00."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_1_6",
    "context": "On one afternoon, Patterson meets individually with each of exactly five clients—Reilly, Sanchez, Tang, Upton, and Yansky—and also goes to the gym by herself for a workout. Patterson's workout and her five meetings each start at either 1:00, 2:00, 3:00, 4:00, 5:00, or 6:00. The following conditions must apply: Patterson meets with Sanchez at some time before her workout. Patterson meets with Tang at some time after her workout. Patterson meets with Yansky either immediately before or immediately after her workout. Patterson meets with Upton at some time before she meets with Reilly.",
    "question": "Which one of the following could be the order of Patterson's meetings, from earliest to latest?",
    "answer": "E",
    "options": [
      "A) Upton, Yansky, Sanchez, Reilly, Tang",
      "B) Upton, Reilly, Sanchez, Tang, Yansky",
      "C) Sanchez, Yansky, Reilly, Tang, Upton",
      "D) Sanchez, Upton, Tang, Yansky, Reilly",
      "E) Sanchez, Upton, Reilly, Yansky, Tang"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_2_7",
    "context": "Exactly six people—Lulu, Nam, Ofelia, Pachai, Santiago, and Tyrone—are the only contestants in a chess tournament. The tournament consists of four games, played one after the other. Exactly two people play in each game, and each person plays in at least one game. The following conditions must apply: Tyrone does not play in the first or third game. Lulu plays in the last game. Nam plays in only one game and it is not against Pachai. Santiago plays in exactly two games, one just before and one just after the only game that Ofelia plays in.",
    "question": "Which one of the following could be an accurate list of the contestants who play in each of the four games?",
    "answer": "A",
    "options": [
      "A) first game: Pachai, Santiago; second game: Ofelia, Tyrone; third game: Pachai, Santiago; fourth game: Lulu, Nam",
      "B) first game: Lulu, Nam; second game: Pachai, Santiago; third game: Ofelia, Tyrone; fourth game: Lulu, Santiago",
      "C) first game: Pachai, Santiago; second game: Lulu, Tyrone; third game: Nam, Ofelia; fourth game: Lulu, Nam",
      "D) first game: Nam, Santiago; second game: Nam, Ofelia; third game: Pachai, Santiago; fourth game: Lulu, Tyrone",
      "E) first game: Lulu, Nam; second game: Santiago, Tyrone; third game: Lulu, Ofelia; fourth game: Pachai, Santiago"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_2_8",
    "context": "Exactly six people—Lulu, Nam, Ofelia, Pachai, Santiago, and Tyrone—are the only contestants in a chess tournament. The tournament consists of four games, played one after the other. Exactly two people play in each game, and each person plays in at least one game. The following conditions must apply: Tyrone does not play in the first or third game. Lulu plays in the last game. Nam plays in only one game and it is not against Pachai. Santiago plays in exactly two games, one just before and one just after the only game that Ofelia plays in.",
    "question": "Which one of the following contestants could play in two consecutive games?",
    "answer": "A",
    "options": [
      "A) Lulu",
      "B) Nam",
      "C) Ofelia",
      "D) Santiago",
      "E) Tyrone"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_2_9",
    "context": "Exactly six people—Lulu, Nam, Ofelia, Pachai, Santiago, and Tyrone—are the only contestants in a chess tournament. The tournament consists of four games, played one after the other. Exactly two people play in each game, and each person plays in at least one game. The following conditions must apply: Tyrone does not play in the first or third game. Lulu plays in the last game. Nam plays in only one game and it is not against Pachai. Santiago plays in exactly two games, one just before and one just after the only game that Ofelia plays in.",
    "question": "If Tyrone plays in the fourth game, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Nam plays in the second game.",
      "B) Ofelia plays in the third game.",
      "C) Santiago plays in the second game.",
      "D) Nam plays a game against Lulu.",
      "E) Pachai plays a game against Lulu."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_2_10",
    "context": "Exactly six people—Lulu, Nam, Ofelia, Pachai, Santiago, and Tyrone—are the only contestants in a chess tournament. The tournament consists of four games, played one after the other. Exactly two people play in each game, and each person plays in at least one game. The following conditions must apply: Tyrone does not play in the first or third game. Lulu plays in the last game. Nam plays in only one game and it is not against Pachai. Santiago plays in exactly two games, one just before and one just after the only game that Ofelia plays in.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Pachai plays against Lulu in the first game.",
      "B) Pachai plays against Nam in the second game.",
      "C) Santiago plays against Ofelia in the second game.",
      "D) Pachai plays against Lulu in the third game.",
      "E) Nam plays against Santiago in the fourth game."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_2_11",
    "context": "Exactly six people—Lulu, Nam, Ofelia, Pachai, Santiago, and Tyrone—are the only contestants in a chess tournament. The tournament consists of four games, played one after the other. Exactly two people play in each game, and each person plays in at least one game. The following conditions must apply: Tyrone does not play in the first or third game. Lulu plays in the last game. Nam plays in only one game and it is not against Pachai. Santiago plays in exactly two games, one just before and one just after the only game that Ofelia plays in.",
    "question": "Which one of the following is a complete and accurate list of the contestants who CANNOT play against Tyrone in any game?",
    "answer": "C",
    "options": [
      "A) Lulu, Pachai",
      "B) Nam, Ofelia",
      "C) Nam, Pachai",
      "D) Nam, Santiago",
      "E) Ofelia, Pachai"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_2_12",
    "context": "Exactly six people—Lulu, Nam, Ofelia, Pachai, Santiago, and Tyrone—are the only contestants in a chess tournament. The tournament consists of four games, played one after the other. Exactly two people play in each game, and each person plays in at least one game. The following conditions must apply: Tyrone does not play in the first or third game. Lulu plays in the last game. Nam plays in only one game and it is not against Pachai. Santiago plays in exactly two games, one just before and one just after the only game that Ofelia plays in.",
    "question": "If Ofelia plays in the third game, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Lulu plays in the third game.",
      "B) Nam plays in the third game.",
      "C) Pachai plays in the first game.",
      "D) Pachai plays in the third game.",
      "E) Tyrone plays in the second game."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_3_13",
    "context": "An album contains photographs picturing seven friends: Raimundo, Selma, Ty, Umiko, Wendy, Yakira, Zack. The friends appear either alone or in groups with one another, in accordance with the following: Wendy appears in every photograph that Selma appears in. Selma appears in every photograph that Umiko appears in. Raimundo appears in every photograph that Yakira does not appear in. Neither Ty nor Raimundo appears in any photograph that Wendy appears in.",
    "question": "Which one of the following could be a complete and accurate list of the friends who appear together in a photograph?",
    "answer": "B",
    "options": [
      "A) Raimundo, Selma, Ty, Wendy",
      "B) Raimundo, Ty, Yakira, Zack",
      "C) Raimundo, Wendy, Yakira, Zack",
      "D) Selma, Ty, Umiko, Yakira",
      "E) Selma, Ty, Umiko, Zack"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_3_14",
    "context": "An album contains photographs picturing seven friends: Raimundo, Selma, Ty, Umiko, Wendy, Yakira, Zack. The friends appear either alone or in groups with one another, in accordance with the following: Wendy appears in every photograph that Selma appears in. Selma appears in every photograph that Umiko appears in. Raimundo appears in every photograph that Yakira does not appear in. Neither Ty nor Raimundo appears in any photograph that Wendy appears in.",
    "question": "If Ty and Zack appear together in a photograph, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Selma also appears in the photograph.",
      "B) Yakira also appears in the photograph.",
      "C) Wendy also appears in the photograph.",
      "D) Raimundo does not appear in the photograph.",
      "E) Umiko does not appear in the photograph."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_3_15",
    "context": "An album contains photographs picturing seven friends: Raimundo, Selma, Ty, Umiko, Wendy, Yakira, Zack. The friends appear either alone or in groups with one another, in accordance with the following: Wendy appears in every photograph that Selma appears in. Selma appears in every photograph that Umiko appears in. Raimundo appears in every photograph that Yakira does not appear in. Neither Ty nor Raimundo appears in any photograph that Wendy appears in.",
    "question": "What is the maximum number of friends who could appear in a photograph that Yakira does not appear in?",
    "answer": "D",
    "options": [
      "A) six",
      "B) five",
      "C) four",
      "D) three",
      "E) two"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_3_16",
    "context": "An album contains photographs picturing seven friends: Raimundo, Selma, Ty, Umiko, Wendy, Yakira, Zack. The friends appear either alone or in groups with one another, in accordance with the following: Wendy appears in every photograph that Selma appears in. Selma appears in every photograph that Umiko appears in. Raimundo appears in every photograph that Yakira does not appear in. Neither Ty nor Raimundo appears in any photograph that Wendy appears in.",
    "question": "If Umiko and Zack appear together in a photograph, then exactly how many of the other friends must also appear in that photograph?",
    "answer": "B",
    "options": [
      "A) four",
      "B) three",
      "C) two",
      "D) one",
      "E) zero"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_3_17",
    "context": "An album contains photographs picturing seven friends: Raimundo, Selma, Ty, Umiko, Wendy, Yakira, Zack. The friends appear either alone or in groups with one another, in accordance with the following: Wendy appears in every photograph that Selma appears in. Selma appears in every photograph that Umiko appears in. Raimundo appears in every photograph that Yakira does not appear in. Neither Ty nor Raimundo appears in any photograph that Wendy appears in.",
    "question": "If exactly three friends appear together in a photograph, then each of the following could be true EXCEPT:",
    "answer": "A",
    "options": [
      "A) Selma and Zack both appear in the photograph.",
      "B) Ty and Yakira both appear in the photograph.",
      "C) Wendy and Selma both appear in the photograph.",
      "D) Yakira and Zack both appear in the photograph.",
      "E) Zack and Raimundo both appear in the photograph."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Raimundo, Selma, Ty, Umiko, Wendy, Yakira, Zack])\nphotos = EnumSort([photograph_1, photograph_2, photograph_3, photograph_4, photograph_5, photograph_6, photograph_7])\nappears = Function([people, photos] -> [bool])\n\n# Constraints\nForAll([p:photos], Count([p:photos], appears(Wendy, p)) == 1) ::: Wendy appears in every photograph that Selma appears in\nForAll([p:photos], Count([p:photos], appears(Selma, p)) == 1) ::: Selma appears in every photograph that Umiko appears in\nForAll([p:photos], Count([p:photos], appears(Raimundo, p)) == 1) ::: Raimundo appears in every photograph that Yakira does not appear in\nForAll([p:photos], Count([p:photos], appears(Ty, p)) == 1) ::: Neither Ty nor Raimundo appears in any photograph that Wendy appears in\n\n# Options\nQuestion ::: If exactly three friends appear together in a photograph, then each of the following could be true EXCEPT:\nis_exception(is_sat(And(appears(Selma, photograph_1), appears(Zack, photograph_1)))) ::: (A)\nis_exception(is_sat(And(appears(Ty, photograph_1), appears(Yakira, photograph_1)))) ::: (B)\nis_exception(is_sat(And(appears(Wendy, photograph_1), appears(Selma, photograph_1)))) ::: (C)\nis_exception(is_sat(And(appears(Yakira, photograph_1), appears(Zack, photograph_1)))) ::: (D)\nis_exception(is_sat(And(appears(Zack, photograph_1), appears(Raimundo, photograph_1)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_4_18",
    "context": "The Export Alliance consists of exactly three nations: Nation X, Nation Y, and Nation Z. Each nation in the Alliance exports exactly two of the following five crops: oranges, rice, soybeans, tea, and wheat. Each of these crops is exported by at least one of the nations in the Alliance. The following conditions hold: None of the nations exports both wheat and oranges. Nation X exports soybeans if, but only if, Nation Y does also. If Nation Y exports rice, then Nations X and Z both export tea. Nation Y does not export any crop that Nation Z exports.",
    "question": "Which one of the following could be an accurate list, for each of the nations, of the crops it exports?",
    "answer": "A",
    "options": [
      "A) Nation X: oranges, rice; Nation Y: oranges, tea; Nation Z: soybeans, wheat",
      "B) Nation X: oranges, tea; Nation Y: oranges, rice; Nation Z: soybeans, wheat",
      "C) Nation X: oranges, wheat; Nation Y: oranges, tea; Nation Z: rice, soybeans",
      "D) Nation X: rice, wheat; Nation Y: oranges, tea; Nation Z: oranges, soybeans",
      "E) Nation X: soybeans, rice; Nation Y: oranges, tea; Nation Z: soybeans, wheat"
    ],
    "raw_logic_programs": [
      "# Declarations\nnations = EnumSort([NationX, NationY, NationZ])\ncrops = EnumSort([oranges, rice, soybeans, tea, wheat])\nexports = Function([nations, crops] -> [bool])\n\n# Constraints\nForAll([n:nations], Count([c:crops], exports(n, c)) == 2) ::: Each nation in the Alliance exports exactly two of the following five crops\nForAll([c:crops], Count([n:nations], exports(n, c)) >= 1) ::: Each of these crops is exported by at least one of the nations in the Alliance\nNot(exports(NationX, oranges) && exports(NationX, wheat)) ::: None of the nations exports both wheat and oranges\nexports(NationX, soybeans) <=> exports(NationY, soybeans) ::: Nation X exports soybeans if, but only if, Nation Y does also\nAnd(exports(NationY, rice), exports(NationX, tea) && exports(NationZ, tea)) ::: If Nation Y exports rice, then Nations X and Z both export tea\nNot(ForAll([c:crops], exports(NationY, c) && exports(NationZ, c))) ::: Nation Y does not export any crop that Nation Z exports\n\n# Options\nQuestion ::: Which one of the following could be an accurate list, for each of the nations, of the crops it exports?\nis_sat(And(exports(NationX, oranges), exports(NationY, oranges), exports(NationZ, wheat))) ::: A) Nation X: oranges, rice; Nation Y: oranges, tea; Nation Z: soybeans, wheat\nis_sat(And(exports(NationX, oranges), exports(NationY, oranges), exports(NationZ, soybeans))) ::: B) Nation X: oranges, tea; Nation Y: oranges, rice; Nation Z: soybeans, wheat\nis_sat("
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_4_19",
    "context": "The Export Alliance consists of exactly three nations: Nation X, Nation Y, and Nation Z. Each nation in the Alliance exports exactly two of the following five crops: oranges, rice, soybeans, tea, and wheat. Each of these crops is exported by at least one of the nations in the Alliance. The following conditions hold: None of the nations exports both wheat and oranges. Nation X exports soybeans if, but only if, Nation Y does also. If Nation Y exports rice, then Nations X and Z both export tea. Nation Y does not export any crop that Nation Z exports.",
    "question": "If Nation X exports soybeans and tea, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Nation Y exports oranges.",
      "B) Nation Y exports rice.",
      "C) Nation Y exports tea.",
      "D) Nation Z exports soybeans.",
      "E) Nation Z exports tea."
    ],
    "raw_logic_programs": [
      "# Declarations\nnations = EnumSort([NationX, NationY, NationZ])\ncrops = EnumSort([oranges, rice, soybeans, tea, wheat])\nexports = Function([nations, crops] -> [bool])\n\n# Constraints\nForAll([n:nations], Count([c:crops], exports(n, c)) == 2) ::: Each nation in the Alliance exports exactly two of the following five crops\nForAll([c:crops], Count([n:nations], exports(n, c)) >= 1) ::: Each of these crops is exported by at least one of the nations in the Alliance\nNot(exports(NationX, oranges) && exports(NationX, wheat)) ::: None of the nations exports both wheat and oranges\nexports(NationX, soybeans) <=> exports(NationY, soybeans) ::: Nation X exports soybeans if, but only if, Nation Y does also\nAnd(exports(NationY, rice), exports(NationX, tea) && exports(NationZ, tea)) ::: If Nation Y exports rice, then Nations X and Z both export tea\nNot(ForAll([c:crops], exports(NationY, c) && exports(NationZ, c))) ::: Nation Y does not export any crop that Nation Z exports\n\n# Options\nQuestion ::: If Nation X exports soybeans and tea, then which one of the following could be true?\nis_valid(exports(NationY, oranges)) ::: (A)\nis_valid(exports(NationY, rice)) ::: (B)\nis_valid(exports(NationY, tea)) ::: (C)\nis_valid(exports(NationZ, soybeans)) ::: (D)\nis_valid(exports(NationZ, tea)) ::: (E)\n------\nProblem:\nThe following is a list of the six members of the board of directors of a company:\nA, B, C, D, E, F\nThe board members are to be divided into"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_4_20",
    "context": "The Export Alliance consists of exactly three nations: Nation X, Nation Y, and Nation Z. Each nation in the Alliance exports exactly two of the following five crops: oranges, rice, soybeans, tea, and wheat. Each of these crops is exported by at least one of the nations in the Alliance. The following conditions hold: None of the nations exports both wheat and oranges. Nation X exports soybeans if, but only if, Nation Y does also. If Nation Y exports rice, then Nations X and Z both export tea. Nation Y does not export any crop that Nation Z exports.",
    "question": "If Nation Z exports tea and wheat, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Nation X exports oranges.",
      "B) Nation X exports tea.",
      "C) Nation X exports wheat.",
      "D) Nation Y exports rice.",
      "E) Nation Y exports soybeans."
    ],
    "raw_logic_programs": [
      "# Declarations\nnations = EnumSort([NationX, NationY, NationZ])\ncrops = EnumSort([oranges, rice, soybeans, tea, wheat])\nexports = Function([nations, crops] -> [bool])\n\n# Constraints\nForAll([n:nations], Count([c:crops], exports(n, c)) == 2) ::: Each nation in the Alliance exports exactly two of the following five crops\nForAll([c:crops], Count([n:nations], exports(n, c)) >= 1) ::: Each of these crops is exported by at least one of the nations in the Alliance\nNot(exports(NationX, oranges) && exports(NationX, wheat)) ::: None of the nations exports both wheat and oranges\nexports(NationX, soybeans) <=> exports(NationY, soybeans) ::: Nation X exports soybeans if, but only if, Nation Y does also\nAnd(exports(NationY, rice), exports(NationX, tea) && exports(NationZ, tea)) ::: If Nation Y exports rice, then Nations X and Z both export tea\nNot(ForAll([c:crops], exports(NationY, c) && exports(NationZ, c))) ::: Nation Y does not export any crop that Nation Z exports\n\n# Options\nQuestion ::: If Nation Z exports tea and wheat, then which one of the following must be true?\nis_sat(exports(NationX, oranges)) ::: (A)\nis_sat(exports(NationX, tea)) ::: (B)\nis_sat(exports(NationX, wheat)) ::: (C)\nis_sat(exports(NationY, rice)) ::: (D)\nis_sat(exports(NationY, soybeans)) ::: (E)\n------\nProblem:\nThe following is a list of the six members of the board of directors of a company:\nA, B, C, D, E, F\nThe board members"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_4_21",
    "context": "The Export Alliance consists of exactly three nations: Nation X, Nation Y, and Nation Z. Each nation in the Alliance exports exactly two of the following five crops: oranges, rice, soybeans, tea, and wheat. Each of these crops is exported by at least one of the nations in the Alliance. The following conditions hold: None of the nations exports both wheat and oranges. Nation X exports soybeans if, but only if, Nation Y does also. If Nation Y exports rice, then Nations X and Z both export tea. Nation Y does not export any crop that Nation Z exports.",
    "question": "It CANNOT be the case that both Nation X and Nation Z export which one of the following crops?",
    "answer": "C",
    "options": [
      "A) oranges",
      "B) rice",
      "C) soybeans",
      "D) tea",
      "E) wheat"
    ],
    "raw_logic_programs": [
      "# Declarations\nnations = EnumSort([NationX, NationY, NationZ])\ncrops = EnumSort([oranges, rice, soybeans, tea, wheat])\nexports = Function([nations, crops] -> [bool])\n\n# Constraints\nForAll([n:nations], Count([c:crops], exports(n, c)) == 2) ::: Each nation in the Alliance exports exactly two of the following five crops\nForAll([c:crops], Count([n:nations], exports(n, c)) >= 1) ::: Each of these crops is exported by at least one of the nations in the Alliance\nForAll([n:nations], Implies(exports(n, wheat), Not(exports(n, oranges)))) ::: None of the nations exports both wheat and oranges\nImplies(exports(NationX, soybeans), exports(NationY, soybeans)) ::: Nation X exports soybeans if, but only if, Nation Y does also\nImplies(exports(NationY, rice), exports(NationX, tea) && exports(NationZ, tea)) ::: If Nation Y exports rice, then Nations X and Z both export tea\nImplies(exports(NationY, c), Not(exports(NationZ, c))) ::: Nation Y does not export any crop that Nation Z exports\n\n# Options\nQuestion ::: It CANNOT be the case that both Nation X and Nation Z export which one of the following crops?\nis_exception(is_sat(exports(NationX, oranges) && exports(NationZ, oranges))) ::: (A)\nis_exception(is_sat(exports(NationX, rice) && exports(NationZ, rice))) ::: (B)\nis_exception(is_sat(exports(NationX, soybeans) && exports(NationZ, soybeans))) ::: (C)\nis_exception(is_sat(exports(NationX, tea) && exports(NationZ, tea))) ::: (D)"
    ]
  },
  {
    "id": "ar_lsat_200412_3-G_4_22",
    "context": "The Export Alliance consists of exactly three nations: Nation X, Nation Y, and Nation Z. Each nation in the Alliance exports exactly two of the following five crops: oranges, rice, soybeans, tea, and wheat. Each of these crops is exported by at least one of the nations in the Alliance. The following conditions hold: None of the nations exports both wheat and oranges. Nation X exports soybeans if, but only if, Nation Y does also. If Nation Y exports rice, then Nations X and Z both export tea. Nation Y does not export any crop that Nation Z exports.",
    "question": "Which one of the following pairs CANNOT be the two crops that Nation Y exports?",
    "answer": "C",
    "options": [
      "A) oranges and rice",
      "B) oranges and soybeans",
      "C) rice and tea",
      "D) rice and wheat",
      "E) soybeans and wheat"
    ],
    "raw_logic_programs": [
      "# Declarations\nnations = EnumSort([NationX, NationY, NationZ])\ncrops = EnumSort([oranges, rice, soybeans, tea, wheat])\nexports = Function([nations, crops] -> [bool])\n\n# Constraints\nForAll([n:nations], Count([c:crops], exports(n, c)) == 2) ::: Each nation in the Alliance exports exactly two of the following five crops\nForAll([c:crops], Count([n:nations], exports(n, c)) >= 1) ::: Each of these crops is exported by at least one of the nations in the Alliance\nForAll([n:nations], Implies(exports(n, wheat), Not(exports(n, oranges)))) ::: None of the nations exports both wheat and oranges\nImplies(exports(NationX, soybeans), exports(NationY, soybeans)) ::: Nation X exports soybeans if, but only if, Nation Y does also\nImplies(exports(NationY, rice), And(exports(NationX, tea), exports(NationZ, tea))) ::: If Nation Y exports rice, then Nations X and Z both export tea\nForAll([c:crops], Implies(exports(NationY, c), Not(exports(NationZ, c)))) ::: Nation Y does not export any crop that Nation Z exports\n\n# Options\nQuestion ::: Which one of the following pairs CANNOT be the two crops that Nation Y exports?\nis_exception(is_sat(And(exports(NationY, oranges), exports(NationY, rice)))) ::: A) oranges and rice\nis_exception(is_sat(And(exports(NationY, oranges), exports(NationY, soybeans)))) ::: B) oranges and soybeans\nis_exception(is_sat(And(exports(NationY, rice), exports(NationY, tea)))) ::: C) rice and tea\nis_exception(is_sat(And(exports(Nation"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_1_1",
    "context": "Exactly six guideposts, numbered 1 through 6, mark a mountain trail. Each guidepost pictures a different one of six animals—fox, grizzly, hare, lynx, moose, or porcupine. The following conditions must apply: The grizzly is pictured on either guidepost 3 or guidepost 4. The moose guidepost is numbered lower than the hare guidepost. The lynx guidepost is numbered lower than the moose guidepost but higher than the fox guidepost.",
    "question": "Which one of the following could be an accurate list of the animals pictured on the guideposts, listed in order from guidepost 1 through guidepost 6?",
    "answer": "A",
    "options": [
      "A) fox, lynx, grizzly, porcupine, moose, hare",
      "B) fox, lynx, moose, hare, grizzly, porcupine",
      "C) fox, moose, grizzly, lynx, hare, porcupine",
      "D) lynx, fox, moose, grizzly, hare, porcupine",
      "E) porcupine, fox, hare, grizzly, lynx, moose"
    ],
    "raw_logic_programs": [
      "# Declarations\nguideposts = EnumSort([1, 2, 3, 4, 5, 6])\nanimals = EnumSort([fox, grizzly, hare, lynx, moose, porcupine])\npictures = Function([guideposts, animals] -> [bool])\n\n# Constraints\nForAll([g:guideposts], Count([a:animals], pictures(g, a)) == 1) ::: Each guidepost pictures a different one of six animals\nAnd(pictures(3, grizzly), pictures(4, grizzly)) ::: The grizzly is pictured on either guidepost 3 or guidepost 4\npictures(m:moose, m) < pictures(h:hare, h) ::: The moose guidepost is numbered lower than the hare guidepost\npictures(l:lynx, l) < pictures(m:moose, m) ::: The lynx guidepost is numbered lower than the moose guidepost\npictures(l:lynx, l) > pictures(f:fox, f) ::: The lynx guidepost is numbered lower than the moose guidepost but higher than the fox guidepost\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the animals pictured on the guideposts, listed in order from guidepost 1 through guidepost 6?\nis_sat(ForAll([g:guideposts], pictures(g, [a:animals], [fox, lynx, grizzly, porcupine, moose, hare]))) ::: A) fox, lynx, grizzly, porcupine, moose, hare\nis_sat(ForAll([g:guideposts], pictures(g, [a:animals], [fox, lynx, moose, hare, grizzly, porcupine]))) ::: B) fox, lynx, moose, hare, grizzly, porcupine\nis_sat(ForAll([g:"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_1_2",
    "context": "Exactly six guideposts, numbered 1 through 6, mark a mountain trail. Each guidepost pictures a different one of six animals—fox, grizzly, hare, lynx, moose, or porcupine. The following conditions must apply: The grizzly is pictured on either guidepost 3 or guidepost 4. The moose guidepost is numbered lower than the hare guidepost. The lynx guidepost is numbered lower than the moose guidepost but higher than the fox guidepost.",
    "question": "Which one of the following animals CANNOT be the one pictured on guidepost 3?",
    "answer": "A",
    "options": [
      "A) fox",
      "B) grizzly",
      "C) lynx",
      "D) moose",
      "E) porcupine"
    ],
    "raw_logic_programs": [
      "# Declarations\nguideposts = EnumSort([1, 2, 3, 4, 5, 6])\nanimals = EnumSort([fox, grizzly, hare, lynx, moose, porcupine])\npictures = Function([guideposts, animals] -> [bool])\n\n# Constraints\nForAll([g:guideposts], Count([a:animals], pictures(g, a)) == 1) ::: Each guidepost pictures a different one of six animals\nOr(pictures(3, grizzly), pictures(4, grizzly)) ::: The grizzly is pictured on either guidepost 3 or guidepost 4\npictures(m:moose, g) > pictures(h:hare, g) ::: The moose guidepost is numbered lower than the hare guidepost\npictures(l:lynx, g) > pictures(m:moose, g) ::: The lynx guidepost is numbered lower than the moose guidepost\npictures(l:lynx, g) < pictures(f:fox, g) ::: The lynx guidepost is numbered lower than the moose guidepost but higher than the fox guidepost\n\n# Options\nQuestion ::: Which one of the following animals CANNOT be the one pictured on guidepost 3?\nis_exception(is_sat(pictures(3, fox))) ::: A) fox\nis_exception(is_sat(pictures(3, grizzly))) ::: B) grizzly\nis_exception(is_sat(pictures(3, lynx))) ::: C) lynx\nis_exception(is_sat(pictures(3, moose))) ::: D) moose\nis_exception(is_sat(pictures(3, porcupine))) ::: E) porcupine\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The following conditions apply"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_1_3",
    "context": "Exactly six guideposts, numbered 1 through 6, mark a mountain trail. Each guidepost pictures a different one of six animals—fox, grizzly, hare, lynx, moose, or porcupine. The following conditions must apply: The grizzly is pictured on either guidepost 3 or guidepost 4. The moose guidepost is numbered lower than the hare guidepost. The lynx guidepost is numbered lower than the moose guidepost but higher than the fox guidepost.",
    "question": "If the moose is pictured on guidepost 3, then which one of the following is the lowest numbered guidepost that could picture the porcupine?",
    "answer": "D",
    "options": [
      "A) guidepost 1",
      "B) guidepost 2",
      "C) guidepost 4",
      "D) guidepost 5",
      "E) guidepost 6"
    ],
    "raw_logic_programs": [
      "# Declarations\nguideposts = EnumSort([1, 2, 3, 4, 5, 6])\nanimals = EnumSort([fox, grizzly, hare, lynx, moose, porcupine])\npictures = Function([guideposts, animals] -> [bool])\n\n# Constraints\nForAll([g:guideposts], Count([a:animals], pictures(g, a)) == 1) ::: Each guidepost pictures a different one of six animals\nAnd(pictures(3, grizzly), pictures(4, grizzly)) ::: The grizzly is pictured on either guidepost 3 or guidepost 4\npictures(3, moose) < pictures(4, hare) ::: The moose guidepost is numbered lower than the hare guidepost\npictures(3, lynx) < pictures(3, moose) ::: The lynx guidepost is numbered lower than the moose guidepost\npictures(3, lynx) > pictures(3, fox) ::: The lynx guidepost is numbered lower than the moose guidepost but higher than the fox guidepost\n\n# Options\nQuestion ::: If the moose is pictured on guidepost 3, then which one of the following is the lowest numbered guidepost that could picture the porcupine?\nis_sat(ForAll([g:guideposts], pictures(g, porcupine) == 1)) ::: A) guidepost 1\nis_sat(ForAll([g:guideposts], pictures(g, porcupine) == 2)) ::: B) guidepost 2\nis_sat(ForAll([g:guideposts], pictures(g, porcupine) == 4)) ::: C) guidepost 4\nis_sat(ForAll([g:guideposts], pictures(g, porcupine) == 5)) ::: D) guidepost 5\nis_sat(ForAll([g:guideposts], pictures(g, porcupine) == 6)) :::"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_1_4",
    "context": "Exactly six guideposts, numbered 1 through 6, mark a mountain trail. Each guidepost pictures a different one of six animals—fox, grizzly, hare, lynx, moose, or porcupine. The following conditions must apply: The grizzly is pictured on either guidepost 3 or guidepost 4. The moose guidepost is numbered lower than the hare guidepost. The lynx guidepost is numbered lower than the moose guidepost but higher than the fox guidepost.",
    "question": "If guidepost 5 does not picture the moose, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) The lynx is pictured on guidepost 2.",
      "B) The moose is pictured on guidepost 3.",
      "C) The grizzly is pictured on guidepost 4.",
      "D) The porcupine is pictured on guidepost 5.",
      "E) The hare is pictured on guidepost 6."
    ],
    "raw_logic_programs": [
      "# Declarations\nguideposts = EnumSort([1, 2, 3, 4, 5, 6])\nanimals = EnumSort([fox, grizzly, hare, lynx, moose, porcupine])\npictures = Function([guideposts, animals] -> [bool])\n\n# Constraints\nForAll([g:guideposts], Count([a:animals], pictures(g, a)) == 1) ::: Each guidepost pictures a different one of six animals\nOr(pictures(3, grizzly), pictures(4, grizzly)) ::: The grizzly is pictured on either guidepost 3 or guidepost 4\npictures(m:moose, g) > pictures(h:hare, g) ::: The moose guidepost is numbered lower than the hare guidepost\npictures(l:lynx, g) > pictures(m:moose, g) ::: The lynx guidepost is numbered lower than the moose guidepost\npictures(l:lynx, g) < pictures(f:fox, g) ::: The lynx guidepost is numbered lower than the moose guidepost but higher than the fox guidepost\n\n# Options\nQuestion ::: If guidepost 5 does not picture the moose, then which one of the following must be true?\nis_valid(Exists([g:guideposts], pictures(g, lynx) == 2)) ::: (A)\nis_valid(Exists([g:guideposts], pictures(g, moose) == 3)) ::: (B)\nis_valid(Exists([g:guideposts], pictures(g, grizzly) == 4)) ::: (C)\nis_valid(Exists([g:guideposts], pictures(g, porcupine) == 5)) ::: (D)\nis_valid(Exists([g:guideposts], pictures(g, hare) == 6)) ::: (E)\n------\nProblem:\nA certain company has six departments—A, B, C, D, E,"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_1_5",
    "context": "Exactly six guideposts, numbered 1 through 6, mark a mountain trail. Each guidepost pictures a different one of six animals—fox, grizzly, hare, lynx, moose, or porcupine. The following conditions must apply: The grizzly is pictured on either guidepost 3 or guidepost 4. The moose guidepost is numbered lower than the hare guidepost. The lynx guidepost is numbered lower than the moose guidepost but higher than the fox guidepost.",
    "question": "Which one of the following animals could be pictured on any one of the six guideposts?",
    "answer": "E",
    "options": [
      "A) fox",
      "B) hare",
      "C) lynx",
      "D) moose",
      "E) porcupine"
    ],
    "raw_logic_programs": [
      "# Declarations\nguideposts = EnumSort([1, 2, 3, 4, 5, 6])\nanimals = EnumSort([fox, grizzly, hare, lynx, moose, porcupine])\npictures = Function([guideposts, animals] -> [bool])\n\n# Constraints\nForAll([g:guideposts], Count([a:animals], pictures(g, a)) == 1) ::: Each guidepost pictures a different one of six animals\nOr(pictures(3, grizzly), pictures(4, grizzly)) ::: The grizzly is pictured on either guidepost 3 or guidepost 4\npictures(m:moose, g) < pictures(h:hare, g) ::: The moose guidepost is numbered lower than the hare guidepost\npictures(l:lynx, g) < pictures(m:moose, g) ::: The lynx guidepost is numbered lower than the moose guidepost\npictures(l:lynx, g) > pictures(f:fox, g) ::: The lynx guidepost is numbered lower than the moose guidepost but higher than the fox guidepost\n\n# Options\nQuestion ::: Which one of the following animals could be pictured on any one of the six guideposts?\nis_valid(Exists([g:guideposts], pictures(g, fox))) ::: A) fox\nis_valid(Exists([g:guideposts], pictures(g, hare))) ::: B) hare\nis_valid(Exists([g:guideposts], pictures(g, lynx))) ::: C) lynx\nis_valid(Exists([g:guideposts], pictures(g, moose))) ::: D) moose\nis_valid(Exists([g:guideposts], pictures(g, porcupine))) ::: E) porcupine\n------"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_1_6",
    "context": "Exactly six guideposts, numbered 1 through 6, mark a mountain trail. Each guidepost pictures a different one of six animals—fox, grizzly, hare, lynx, moose, or porcupine. The following conditions must apply: The grizzly is pictured on either guidepost 3 or guidepost 4. The moose guidepost is numbered lower than the hare guidepost. The lynx guidepost is numbered lower than the moose guidepost but higher than the fox guidepost.",
    "question": "If the moose guidepost is numbered exactly one higher than the lynx guidepost, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Guidepost 5 pictures the hare.",
      "B) Guidepost 4 pictures the moose.",
      "C) Guidepost 4 pictures the porcupine.",
      "D) Guidepost 3 pictures the lynx.",
      "E) Guidepost 3 pictures the porcupine."
    ],
    "raw_logic_programs": [
      "# Declarations\nguideposts = EnumSort([1, 2, 3, 4, 5, 6])\nanimals = EnumSort([fox, grizzly, hare, lynx, moose, porcupine])\npictures = Function([guideposts, animals] -> [bool])\n\n# Constraints\nForAll([g:guideposts], Count([a:animals], pictures(g, a)) == 1) ::: Each guidepost pictures a different one of six animals\nAnd(pictures(3, grizzly), pictures(4, grizzly)) ::: The grizzly is pictured on either guidepost 3 or guidepost 4\npictures(m, moose) < pictures(h, hare) ::: The moose guidepost is numbered lower than the hare guidepost\npictures(l, lynx) < pictures(m, moose) ::: The lynx guidepost is numbered lower than the moose guidepost\npictures(l, lynx) > pictures(f, fox) ::: The lynx guidepost is numbered lower than the moose guidepost but higher than the fox guidepost\n\n# Options\nQuestion ::: If the moose guidepost is numbered exactly one higher than the lynx guidepost, then which one of the following could be true?\nis_sat(ForAll([g:guideposts], pictures(g, hare) == pictures(5, hare))) ::: (A)\nis_sat(ForAll([g:guideposts], pictures(g, moose) == pictures(4, moose))) ::: (B)\nis_sat(ForAll([g:guideposts], pictures(g, porcupine) == pictures(4, porcupine))) ::: (C)\nis_sat(ForAll([g:guideposts], pictures(g, lynx) == pictures(3"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_2_7",
    "context": "Each side of four cassette tapes—Tapes 1 through 4—contains exactly one of the following four genres: folk, hip-hop, jazz, and rock. The following conditions must apply: Each genre is found on exactly two of the eight sides. Tape 1 has jazz on at least one side, but neither hip-hop nor rock. Tape 2 has no jazz. Folk is not on any tape numbered exactly one higher than a tape that has any rock on it.",
    "question": "Which one of the following could be an accurate matching of tapes with the musical genres found on them?",
    "answer": "B",
    "options": [
      "A) Tape 1: folk and jazz; Tape 2: folk and jazz; Tape 3: hip-hop and rock; Tape 4: hip-hop and rock",
      "B) Tape 1: folk and jazz; Tape 2: folk and rock; Tape 3: hip-hop and jazz; Tape 4: hip-hop and rock",
      "C) Tape 1: folk and jazz; Tape 2: folk and rock; Tape 3: two sides of jazz; Tape 4: two sides of hip-hop",
      "D) Tape 1: hip-hop and jazz; Tape 2: folk and hip-hop; Tape 3: folk and jazz; Tape 4: two sides of rock",
      "E) Tape 1: two sides of jazz; Tape 2: folk and rock; Tape 3: hip-hop and rock; Tape 4: folk and hip-hop"
    ],
    "raw_logic_programs": [
      "# Declarations\ntapes = EnumSort([Tape1, Tape2, Tape3, Tape4])\ngenres = EnumSort([folk, hip_hop, jazz, rock])\nsides = Function([tapes] -> [genres])\n\n# Constraints\nForAll([t:tapes], Count([g:genres], sides(t) == g) == 2) ::: Each genre is found on exactly two of the eight sides\nAnd(sides(Tape1) == jazz, Not(sides(Tape1) == hip_hop), Not(sides(Tape1) == rock)) ::: Tape 1 has jazz on at least one side, but neither hip-hop nor rock\nForAll([t:tapes], Implies(sides(t) == rock, Not(sides(t + 1) == folk))) ::: Folk is not on any tape numbered exactly one higher than a tape that has any rock on it\n\n# Options\nQuestion ::: Which one of the following could be an accurate matching of tapes with the musical genres found on them?\nis_sat(And(sides(Tape1) == folk, sides(Tape1) == jazz, sides(Tape2) == folk, sides(Tape2) == jazz, sides(Tape3) == hip_hop, sides(Tape3) == rock, sides(Tape4) == hip_hop, sides(Tape4) == rock)) ::: A) Tape 1: folk and jazz; Tape 2: folk and jazz; Tape 3: hip-hop and rock; Tape 4: hip-hop and rock\nis_sat(And(sides(Tape1) == folk, sides(Tape1) == jazz, sides(Tape2) == folk, sides(Tape2) == rock, sides(Tape3) == hip_"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_2_8",
    "context": "Each side of four cassette tapes—Tapes 1 through 4—contains exactly one of the following four genres: folk, hip-hop, jazz, and rock. The following conditions must apply: Each genre is found on exactly two of the eight sides. Tape 1 has jazz on at least one side, but neither hip-hop nor rock. Tape 2 has no jazz. Folk is not on any tape numbered exactly one higher than a tape that has any rock on it.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) If Tape 1 has two sides of jazz, Tape 4 has at least one side of rock.",
      "B) If Tape 2 has two sides of folk, Tape 3 has at least one side of hip-hop.",
      "C) If Tape 2 has two sides of rock, Tape 4 has at least one side of folk.",
      "D) If Tape 3 has two sides of folk, Tape 2 has at least one side of jazz.",
      "E) If Tape 4 has two sides of hip-hop, Tape 3 has at least one side of folk."
    ],
    "raw_logic_programs": [
      "# Declarations\ntapes = EnumSort([Tape1, Tape2, Tape3, Tape4])\nsides = EnumSort([Side1, Side2])\ngenres = EnumSort([folk, hip_hop, jazz, rock])\nhas = Function([tapes, sides, genres] -> [bool])\n\n# Constraints\nForAll([t:tapes], Count([s:sides], has(t, s, folk)) == 2) ::: Each genre is found on exactly two of the eight sides\nForAll([t:tapes], And(has(t, Side1, jazz), has(t, Side2, jazz))) ::: Tape 1 has jazz on at least one side\nForAll([t:tapes], Not(has(t, Side1, hip_hop))) ::: Tape 2 has no jazz\nForAll([t:tapes], Implies(has(t, Side1, rock), Not(has(t, Side2, folk)))) ::: Folk is not on any tape numbered exactly one higher than a tape that has any rock on it\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([t:tapes], And(has(t, Side1, jazz), has(t, Side2, jazz), has(Tape4, Side1, rock)))) ::: (A)\nis_valid(Exists([t:tapes], And(has(t, Side1, folk), has(t, Side2, folk), has(Tape3, Side1, hip_hop)))) ::: (B)\nis_valid(Exists([t:tapes], And(has(t, Side1, rock), has(t, Side2, rock), has(Tape4, Side1, folk)))) ::: (C)\nis_valid(Exists([t:tapes], And(has(t, Side1, folk),"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_2_9",
    "context": "Each side of four cassette tapes—Tapes 1 through 4—contains exactly one of the following four genres: folk, hip-hop, jazz, and rock. The following conditions must apply: Each genre is found on exactly two of the eight sides. Tape 1 has jazz on at least one side, but neither hip-hop nor rock. Tape 2 has no jazz. Folk is not on any tape numbered exactly one higher than a tape that has any rock on it.",
    "question": "Which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Tape 1 has jazz on both sides while Tape 4 has folk and hip-hop.",
      "B) Tape 2 has hip-hop on one side while Tape 3 has hip-hop and jazz.",
      "C) Tape 3 has folk on both sides while Tape 4 has jazz and rock.",
      "D) Tape 3 has jazz on one side while Tape 4 has folk on both sides.",
      "E) Tapes 2 and 3 each have jazz on one side."
    ],
    "raw_logic_programs": [
      "# Declarations\ntapes = EnumSort([Tape1, Tape2, Tape3, Tape4])\nsides = EnumSort([Side1, Side2])\ngenres = EnumSort([folk, hip_hop, jazz, rock])\nhas = Function([tapes, sides, genres] -> [bool])\n\n# Constraints\nForAll([t:tapes], Count([g:genres], has(t, Side1, g)) == 1) ::: Each side of four cassette tapes—Tapes 1 through 4—contains exactly one of the following four genres\nForAll([g:genres], Count([t:tapes], has(t, Side1, g)) == 2) ::: Each genre is found on exactly two of the eight sides\nForAll([t:tapes], Implies(has(t, Side1, jazz), Not(has(t, Side1, hip_hop)))) ::: Tape 1 has jazz on at least one side, but neither hip-hop nor rock\nForAll([t:tapes], Implies(has(t, Side1, jazz), Not(has(t, Side1, rock)))) ::: Tape 1 has jazz on at least one side, but neither hip-hop nor rock\nForAll([t:tapes], Implies(has(t, Side1, hip_hop), Not(has(t, Side1, rock)))) ::: Tape 1 has jazz on at least one side, but neither hip-hop nor rock\nForAll([t:tapes], Implies(has(t, Side1, rock), Not(has(t, Side1, hip_hop)))) ::: Tape 1 has jazz on at least one side, but neither hip-hop nor rock\nForAll([t:tapes], Implies(has(t, Side1, rock), Not(has(t, Side1, jazz)))) :::"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_2_10",
    "context": "Each side of four cassette tapes—Tapes 1 through 4—contains exactly one of the following four genres: folk, hip-hop, jazz, and rock. The following conditions must apply: Each genre is found on exactly two of the eight sides. Tape 1 has jazz on at least one side, but neither hip-hop nor rock. Tape 2 has no jazz. Folk is not on any tape numbered exactly one higher than a tape that has any rock on it.",
    "question": "Which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Tape 1 has two sides of folk.",
      "B) Tape 2 has both hip-hop and jazz.",
      "C) Tape 4 has both folk and rock.",
      "D) Tapes 1 and 4 each have a side of hip-hop.",
      "E) Tapes 3 and 4 each have a side of folk."
    ],
    "raw_logic_programs": [
      "# Declarations\ntapes = EnumSort([Tape1, Tape2, Tape3, Tape4])\nsides = EnumSort([Side1, Side2])\ngenres = EnumSort([folk, hip_hop, jazz, rock])\nhas = Function([tapes, sides, genres] -> [bool])\n\n# Constraints\nForAll([g:genres], Count([t:tapes], Count([s:sides], has(t, s, g))) == 2) ::: Each genre is found on exactly two of the eight sides\nAnd(has(Tape1, Side1, jazz), has(Tape1, Side2, jazz)) ::: Tape 1 has jazz on at least one side\nNot(has(Tape2, Side1, jazz)) ::: Tape 2 has no jazz\nForAll([t:tapes], Implies(has(t, Side1, rock), Not(has(t + 1, Side1, folk)))) ::: Folk is not on any tape numbered exactly one higher than a tape that has any rock on it\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(ForAll([t:tapes], has(t, Side1, folk))) ::: A) Tape 1 has two sides of folk.\nis_valid(ForAll([t:tapes], has(t, Side1, hip_hop))) ::: B) Tape 2 has both hip-hop and jazz.\nis_valid(ForAll([t:tapes], has(t, Side1, rock))) ::: C) Tape 4 has both folk and rock.\nis_valid(ForAll([t:tapes], has(t, Side1, hip_hop))) ::: D) Tapes 1 and 4 each have a side of hip-hop.\nis_valid(ForAll([t:tapes],"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_2_11",
    "context": "Each side of four cassette tapes—Tapes 1 through 4—contains exactly one of the following four genres: folk, hip-hop, jazz, and rock. The following conditions must apply: Each genre is found on exactly two of the eight sides. Tape 1 has jazz on at least one side, but neither hip-hop nor rock. Tape 2 has no jazz. Folk is not on any tape numbered exactly one higher than a tape that has any rock on it.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "B",
    "options": [
      "A) Tape 2 has rock on both sides while Tape 3 has hip-hop on both sides.",
      "B) Tape 3 has rock on both sides while Tape 2 has hip-hop on both sides.",
      "C) Tape 3 has rock on both sides while Tape 4 has hip-hop on both sides.",
      "D) Tape 4 has rock on both sides while Tape 2 has hip-hop on both sides.",
      "E) Tape 4 has rock on both sides while Tape 3 has hip-hop on both sides."
    ],
    "raw_logic_programs": [
      "# Declarations\ntapes = EnumSort([Tape1, Tape2, Tape3, Tape4])\nsides = EnumSort([Side1, Side2])\ngenres = EnumSort([folk, hip_hop, jazz, rock])\ngenre = Function([tapes, sides] -> [genres])\n\n# Constraints\nForAll([t:tapes], Count([s:sides], genre(t, s)) == 2) ::: Each genre is found on exactly two of the eight sides\nForAll([g:genres], Count([t:tapes], Count([s:sides], genre(t, s) == g)) == 2) ::: each genre is found on exactly two of the eight sides\nForAll([t:tapes], Or(genre(t, Side1) == jazz, genre(t, Side2) == jazz)) ::: Tape 1 has jazz on at least one side, but neither hip-hop nor rock\nForAll([t:tapes], Not(genre(t, Side1) == jazz, genre(t, Side2) == jazz)) ::: Tape 2 has no jazz\nForAll([t:tapes], Implies(genre(t, Side1) == rock, Not(genre(t + 1, Side1) == folk))) ::: Folk is not on any tape numbered exactly one higher than a tape that has any rock on it\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(And(genre(Tape2, Side1) == rock, genre(Tape2, Side2) == rock, genre(Tape3, Side1) == hip_hop, genre(Tape3, Side2) == hip_hop)))) ::: A) Tape 2 has rock on both sides while Tape 3 has hip-hop on both sides."
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_3_12",
    "context": "One afternoon, a single thunderstorm passes over exactly five towns—Jackson, Lofton, Nordique, Oceana, and Plattesville—dropping some form of precipitation on each. The storm is the only source of precipitation in the towns that afternoon. On some towns, it drops both hail and rain; on the remaining towns, it drops only rain. It passes over each town exactly once and does not pass over any two towns at the same time. The following must obtain: The third town the storm passes over is Plattesville. The storm drops hail and rain on the second town it passes over. The storm drops only rain on both Lofton and Oceana. The storm passes over Jackson at some time after it passes over Lofton and at some time after it passes over Nordique.",
    "question": "Which one of the following could be the order, from first to fifth, in which the storm passes over the towns?",
    "answer": "A",
    "options": [
      "A) Lofton, Nordique, Plattesville, Oceana, Jackson",
      "B) Lofton, Oceana, Plattesville, Nordique, Jackson",
      "C) Nordique, Jackson, Plattesville, Oceana, Lofton",
      "D) Nordique, Lofton, Plattesville, Jackson, Oceana",
      "E) Nordique, Plattesville, Lofton, Oceana, Jackson"
    ],
    "raw_logic_programs": [
      "# Declarations\ntowns = EnumSort([Jackson, Lofton, Nordique, Oceana, Plattesville])\nprecipitation = EnumSort([hail, rain])\ndrops = Function([towns, precipitation] -> [bool])\n\n# Constraints\nForAll([t:towns], Count([p:precipitation], drops(t, p)) >= 1) ::: The storm is the only source of precipitation in the towns that afternoon\nForAll([t:towns], And(drops(t, hail), drops(t, rain))) ::: On some towns, it drops both hail and rain; on the remaining towns, it drops only rain\nForAll([t:towns], And(1 <= drops(t, hail), drops(t, hail) <= 1)) ::: The storm passes over each town exactly once\nForAll([t:towns], And(1 <= drops(t, rain), drops(t, rain) <= 1)) ::: The storm passes over each town exactly once\nForAll([t:towns], And(1 <= drops(t, hail), drops(t, hail) <= 1)) ::: The storm passes over each town exactly once\nForAll([t:towns], And(1 <= drops(t, rain), drops(t, rain) <= 1)) ::: The storm passes over each town exactly once\nForAll([t:towns], And(1 <= drops(t, hail), drops(t, hail) <= 1)) ::: The storm passes over each town exactly once\nForAll([t:towns], And(1 <= drops(t, rain), drops(t, rain) <= 1)) ::: The storm passes over each town exactly once\nForAll([t:towns], And(1 <= drops(t, hail), drops(t, hail)"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_3_13",
    "context": "One afternoon, a single thunderstorm passes over exactly five towns—Jackson, Lofton, Nordique, Oceana, and Plattesville—dropping some form of precipitation on each. The storm is the only source of precipitation in the towns that afternoon. On some towns, it drops both hail and rain; on the remaining towns, it drops only rain. It passes over each town exactly once and does not pass over any two towns at the same time. The following must obtain: The third town the storm passes over is Plattesville. The storm drops hail and rain on the second town it passes over. The storm drops only rain on both Lofton and Oceana. The storm passes over Jackson at some time after it passes over Lofton and at some time after it passes over Nordique.",
    "question": "If the storm passes over Oceana at some time before it passes over Jackson, then each of the following could be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) The first town the storm passes over is Oceana.",
      "B) The fourth town the storm passes over is Lofton.",
      "C) The fourth town the storm passes over receives hail and rain.",
      "D) The fifth town the storm passes over is Jackson.",
      "E) The fifth town the storm passes over receives only rain."
    ],
    "raw_logic_programs": [
      "# Declarations\ntowns = EnumSort([Jackson, Lofton, Nordique, Oceana, Plattesville])\nprecipitation = EnumSort([hail, rain])\ndrops = Function([towns, precipitation] -> [bool])\n\n# Constraints\nForAll([t:towns], Count([p:precipitation], drops(t, p)) >= 1) ::: The storm is the only source of precipitation in the towns that afternoon\nForAll([t:towns], And(1 <= drops(t, hail), drops(t, hail) <= 1)) ::: On some towns, it drops both hail and rain; on the remaining towns, it drops only rain\nForAll([t:towns], And(1 <= drops(t, rain), drops(t, rain) <= 1)) ::: On some towns, it drops both hail and rain; on the remaining towns, it drops only rain\nForAll([t:towns], And(1 <= drops(t, hail) + drops(t, rain), drops(t, hail) + drops(t, rain) <= 2)) ::: On some towns, it drops both hail and rain; on the remaining towns, it drops only rain\nForAll([t:towns], And(1 <= drops(t, hail) + drops(t, rain), drops(t, hail) + drops(t, rain) <= 2)) ::: On some towns, it drops both hail and rain; on the remaining towns, it drops only rain\nForAll([t:towns], And(1 <= drops(t, hail) + drops(t, rain), drops(t, hail) + drops(t, rain) <= 2)) ::: On some towns, it drops both hail and rain; on the remaining towns, it"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_3_14",
    "context": "One afternoon, a single thunderstorm passes over exactly five towns—Jackson, Lofton, Nordique, Oceana, and Plattesville—dropping some form of precipitation on each. The storm is the only source of precipitation in the towns that afternoon. On some towns, it drops both hail and rain; on the remaining towns, it drops only rain. It passes over each town exactly once and does not pass over any two towns at the same time. The following must obtain: The third town the storm passes over is Plattesville. The storm drops hail and rain on the second town it passes over. The storm drops only rain on both Lofton and Oceana. The storm passes over Jackson at some time after it passes over Lofton and at some time after it passes over Nordique.",
    "question": "If the storm drops only rain on each town it passes over after passing over Lofton, then which one of the following could be false?",
    "answer": "E",
    "options": [
      "A) The first town the storm passes over is Oceana.",
      "B) The fourth town the storm passes over receives only rain.",
      "C) The fifth town the storm passes over is Jackson.",
      "D) Jackson receives only rain.",
      "E) Plattesville receives only rain."
    ],
    "raw_logic_programs": [
      "# Declarations\ntowns = EnumSort([Jackson, Lofton, Nordique, Oceana, Plattesville])\nprecipitation = EnumSort([hail, rain])\ndrops = Function([towns, precipitation] -> [bool])\n\n# Constraints\nForAll([t:towns], Count([p:precipitation], drops(t, p)) >= 1) ::: The storm is the only source of precipitation in the towns that afternoon\nDistinct([t:towns], t) ::: The storm passes over each town exactly once\nDistinct([t:towns], drops(t, hail)) ::: The storm drops both hail and rain on the second town it passes over\nDistinct([t:towns], drops(t, rain)) ::: The storm drops only rain on both Lofton and Oceana\ndrops(Plattesville, rain) ::: The third town the storm passes over is Plattesville\ndrops(Jackson, rain) ::: The storm passes over Jackson at some time after it passes over Lofton and at some time after it passes over Nordique\n\n# Options\nQuestion ::: If the storm drops only rain on each town it passes over after passing over Lofton, then which one of the following could be false?\nis_exception(is_sat(drops(Oceana, rain) && drops(Oceana, hail))) ::: (A)\nis_exception(is_sat(drops(Plattesville, rain))) ::: (B)\nis_exception(is_sat(drops(Jackson, rain))) ::: (C)\nis_exception(is_sat(drops(Jackson, hail))) ::: (D)\nis_exception(is_sat(drops(Plattesville, hail))) ::: (E)\n------\nProblem:\nA certain company has exactly"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_3_15",
    "context": "One afternoon, a single thunderstorm passes over exactly five towns—Jackson, Lofton, Nordique, Oceana, and Plattesville—dropping some form of precipitation on each. The storm is the only source of precipitation in the towns that afternoon. On some towns, it drops both hail and rain; on the remaining towns, it drops only rain. It passes over each town exactly once and does not pass over any two towns at the same time. The following must obtain: The third town the storm passes over is Plattesville. The storm drops hail and rain on the second town it passes over. The storm drops only rain on both Lofton and Oceana. The storm passes over Jackson at some time after it passes over Lofton and at some time after it passes over Nordique.",
    "question": "If the storm passes over Jackson at some time before it passes over Oceana, then which one of the following could be false?",
    "answer": "D",
    "options": [
      "A) The storm passes over Lofton at some time before it passes over Jackson.",
      "B) The storm passes over Lofton at some time before it passes over Oceana.",
      "C) The storm passes over Nordique at some time before it passes over Oceana.",
      "D) The fourth town the storm passes over receives only rain.",
      "E) The fifth town the storm passes over receives only rain."
    ],
    "raw_logic_programs": [
      "# Declarations\ntowns = EnumSort([Jackson, Lofton, Nordique, Oceana, Plattesville])\nprecipitation = EnumSort([hail, rain])\ndrops = Function([towns, precipitation] -> [bool])\n\n# Constraints\nForAll([t:towns], Count([p:precipitation], drops(t, p)) >= 1) ::: The storm is the only source of precipitation in the towns that afternoon\nAnd(drops(Plattesville, rain), drops(Plattesville, hail)) ::: The storm drops hail and rain on the second town it passes over\ndrops(Lofton, rain) ::: The storm drops only rain on both Lofton and Oceana\ndrops(Oceana, rain) ::: The storm drops only rain on both Lofton and Oceana\nAnd(drops(Jackson, rain), drops(Jackson, hail)) ::: The storm passes over Jackson at some time after it passes over Lofton and at some time after it passes over Nordique\nAnd(drops(Oceana, rain), Not(drops(Oceana, hail))) ::: The storm passes over Jackson at some time after it passes over Lofton and at some time after it passes over Nordique\n\n# Options\nQuestion ::: If the storm passes over Jackson at some time before it passes over Oceana, then which one of the following could be false?\nis_exception(is_sat(drops(Lofton, rain) && drops(Lofton, hail) && drops(Jackson, rain) && drops(Jackson, hail) && drops(Oceana, rain) && drops(Oceana, hail))) ::: (A)\nis_exception(is_sat(drops(Lofton, rain) && drops(Lofton, hail) && drops(Jackson, rain) && drops(Jackson, hail) && drops(Oceana, rain) && drops(Oceana, hail))) ::: (B)\nis_exception(is_sat(drops(Nordique, rain) && drops(Nordique, hail) && drops(Oceana, rain) && drops(Oceana, hail))) ::: (C)\nis_exception(is_sat(drops(Jackson, rain) && drops(Jackson, hail) && drops(Oceana, rain) && drops(Oceana, hail))) ::: (D)\nis_exception(is_sat(drops(Jackson, rain) && drops(Jackson, hail) && drops(Oceana, rain) && drops(Oceana, hail))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_3_16",
    "context": "One afternoon, a single thunderstorm passes over exactly five towns—Jackson, Lofton, Nordique, Oceana, and Plattesville—dropping some form of precipitation on each. The storm is the only source of precipitation in the towns that afternoon. On some towns, it drops both hail and rain; on the remaining towns, it drops only rain. It passes over each town exactly once and does not pass over any two towns at the same time. The following must obtain: The third town the storm passes over is Plattesville. The storm drops hail and rain on the second town it passes over. The storm drops only rain on both Lofton and Oceana. The storm passes over Jackson at some time after it passes over Lofton and at some time after it passes over Nordique.",
    "question": "If the storm passes over Oceana at some time before it passes over Lofton, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) The third town the storm passes over receives only rain.",
      "B) The fourth town the storm passes over receives only rain.",
      "C) The fourth town the storm passes over receives hail and rain.",
      "D) The fifth town the storm passes over receives only rain.",
      "E) The fifth town the storm passes over receives hail and rain."
    ],
    "raw_logic_programs": [
      "# Declarations\ntowns = EnumSort([Jackson, Lofton, Nordique, Oceana, Plattesville])\nprecipitation = EnumSort([hail, rain])\ndrops = Function([towns, precipitation] -> [bool])\n\n# Constraints\nForAll([t:towns], Count([p:precipitation], drops(t, p)) == 1) ::: On some towns, it drops both hail and rain; on the remaining towns, it drops only rain\nDistinct([t:towns], t) ::: The storm passes over each town exactly once\nDistinct([t:towns], t) ::: The storm does not pass over any two towns at the same time\ndrops(Plattesville, rain) ::: The third town the storm passes over is Plattesville\nAnd(drops(t:towns, hail), drops(t, rain)) ::: The storm drops hail and rain on the second town it passes over\nAnd(drops(Lofton, rain), drops(Oceana, rain)) ::: The storm drops only rain on both Lofton and Oceana\nAnd(drops(Jackson, rain), drops(Nordique, rain)) ::: The storm passes over Jackson at some time after it passes over Lofton and at some time after it passes over Nordique\n\n# Options\nQuestion ::: If the storm passes over Oceana at some time before it passes over Lofton, then which one of the following must be true?\nis_valid(Exists([t:towns], And(t!= Plattesville, drops(t, rain)))) ::: (A)\nis_valid(Exists([t:towns], And(t!= Plattesville, drops(t, rain)))) ::: (B)\nis_valid(Exists([t:towns], And(t!= Plattesville, And(drops(t, hail), drops(t, rain))))) ::: (C)\nis_valid(Exists([t:towns], And(t!= Plattesville, drops(t, rain)))) ::: (D)\nis_valid(Exists([t:towns], And(t!= Plattesville, And(drops(t, hail), drops(t, rain))))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_4_17",
    "context": "A reporter is trying to uncover the workings of a secret committee. The committee has six members—French, Ghauri, Hsia, Irving, Magnus, and Pinsky—each of whom serves on at least one subcommittee. There are three subcommittees, each having three members, about which the following is known: One of the committee members serves on all three subcommittees. French does not serve on any subcommittee with Ghauri. Hsia does not serve on any subcommittee with Irving.",
    "question": "If French does not serve on any subcommittee with Magnus, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) French serves on a subcommittee with Hsia.",
      "B) French serves on a subcommittee with Irving.",
      "C) Irving serves on a subcommittee with Pinsky.",
      "D) Magnus serves on a subcommittee with Ghauri.",
      "E) Magnus serves on a subcommittee with Irving."
    ],
    "raw_logic_programs": [
      "# Declarations\ncommittee = EnumSort([French, Ghauri, Hsia, Irving, Magnus, Pinsky])\nsubcommittees = EnumSort([A, B, C])\nserves = Function([committee, subcommittees] -> [bool])\n\n# Constraints\nForAll([c:committee], Count([s:subcommittees], serves(c, s)) >= 1) ::: each committee member serves on at least one subcommittee\nForAll([s:subcommittees], Count([c:committee], serves(c, s)) == 3) ::: each subcommittee has three members\nImplies(serves(French, s), Not(serves(Ghauri, s))) ::: French does not serve on any subcommittee with Ghauri\nImplies(serves(Hsia, s), Not(serves(Irving, s))) ::: Hsia does not serve on any subcommittee with Irving\n\n# Options\nQuestion ::: If French does not serve on any subcommittee with Magnus, which one of the following must be true?\nis_valid(Exists([s:subcommittees], serves(French, s) && serves(Hsia, s))) ::: A) French serves on a subcommittee with Hsia.\nis_valid(Exists([s:subcommittees], serves(French, s) && serves(Irving, s))) ::: B) French serves on a subcommittee with Irving.\nis_valid(Exists([s:subcommittees], serves(Irving, s) && serves(Pinsky, s))) ::: C) Irving serves on a subcommittee with Pinsky.\nis_valid(Exists([s:subcommittees], serves(Magnus, s) && serves(Ghauri, s))) ::: D) Magnus serves on a subcommittee with Ghauri.\nis_valid(Exists([s:subcommittees], serves(Magnus, s) && serves(Irving, s))) ::: E) Magnus serves on a subcommittee with Irving.\n------\nProblem:\nA company has six employees—Fred, Gail, Hank, Iris, Jill, and Kim—who work in either the accounting, human resources, or public relations department. The following conditions apply: Fred and Gail work in the same department. Hank and Iris work in different departments. Jill and Kim work in different departments. Fred and Jill work in different departments.\nQuestion:\nIf Hank works in the accounting department, which one of the following must be true?\nChoices:\n(A) Gail works in the human resources department.\n(B) Iris works in the public relations department.\n(C) Jill works in the human resources department.\n(D) Kim"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_4_18",
    "context": "A reporter is trying to uncover the workings of a secret committee. The committee has six members—French, Ghauri, Hsia, Irving, Magnus, and Pinsky—each of whom serves on at least one subcommittee. There are three subcommittees, each having three members, about which the following is known: One of the committee members serves on all three subcommittees. French does not serve on any subcommittee with Ghauri. Hsia does not serve on any subcommittee with Irving.",
    "question": "If Pinsky serves on every subcommittee on which French serves and every subcommittee on which Ghauri serves, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Magnus serves on every subcommittee on which French serves and every subcommittee on which Ghauri serves.",
      "B) Magnus serves on every subcommittee on which Hsia serves and every subcommittee on which Irving serves.",
      "C) Hsia serves on every subcommittee on which French serves and every subcommittee on which Ghauri serves.",
      "D) French serves on every subcommittee on which Pinsky serves.",
      "E) Hsia serves on every subcommittee on which Pinsky serves."
    ],
    "raw_logic_programs": [
      "# Declarations\ncommittee = EnumSort([French, Ghauri, Hsia, Irving, Magnus, Pinsky])\nsubcommittees = EnumSort([A, B, C])\nserves = Function([committee, subcommittees] -> [bool])\n\n# Constraints\nForAll([c:committee], Count([s:subcommittees], serves(c, s)) >= 1) ::: each committee member serves on at least one subcommittee\nAnd(serves(French, A), serves(French, B), serves(French, C)) ::: One of the committee members serves on all three subcommittees\nImplies(serves(French, s), Not(serves(Ghauri, s))) ::: French does not serve on any subcommittee with Ghauri\nImplies(serves(Hsia, s), Not(serves(Irving, s))) ::: Hsia does not serve on any subcommittee with Irving\nForAll([s:subcommittees], Implies(serves(French, s), serves(Pinsky, s))) ::: Pinsky serves on every subcommittee on which French serves\n\n# Options\nQuestion ::: If Pinsky serves on every subcommittee on which French serves and every subcommittee on which Ghauri serves, then which one of the following could be true?\nis_valid(ForAll([s:subcommittees], Implies(serves(French, s), serves(Magnus, s)))) ::: A) Magnus serves on every subcommittee on which French serves and every subcommittee on which Ghauri serves.\nis_valid(ForAll([s:subcommittees], Implies(serves(Hsia, s), serves(Magnus, s)))) ::: B) Magnus serves on every subcommittee on which Hsia serves and every subcommittee on which Irving serves.\nis_valid(ForAll([s:subcommittees], Implies(serves(French, s), serves(Hsia, s)))) ::: C) Hsia serves on every subcommittee on which French serves and every subcommittee on which Ghauri serves.\nis_valid(ForAll([s:subcommittees], Implies(serves(Pinsky, s), serves(French, s)))) ::: D) French serves on every subcommittee on which Pinsky serves.\nis_valid(ForAll([s:subcommittees], Implies(serves(Pinsky, s), serves(Hsia, s)))) ::: E) Hsia serves on every subcommittee on which Pinsky serves.\n------\nProblem:\nA company has six employees—Fred, Gail, Hank, Iris, Jill, and Kim—who work in pairs to complete specific projects. The following conditions apply"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_4_19",
    "context": "A reporter is trying to uncover the workings of a secret committee. The committee has six members—French, Ghauri, Hsia, Irving, Magnus, and Pinsky—each of whom serves on at least one subcommittee. There are three subcommittees, each having three members, about which the following is known: One of the committee members serves on all three subcommittees. French does not serve on any subcommittee with Ghauri. Hsia does not serve on any subcommittee with Irving.",
    "question": "If Irving serves on every subcommittee on which Magnus serves, which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Magnus serves on all of the subcommittees.",
      "B) Irving serves on more than one subcommittee.",
      "C) Irving serves on every subcommittee on which Pinsky serves.",
      "D) French serves on a subcommittee with Magnus.",
      "E) Ghauri serves on a subcommittee with Magnus."
    ],
    "raw_logic_programs": [
      "# Declarations\ncommittee = EnumSort([French, Ghauri, Hsia, Irving, Magnus, Pinsky])\nsubcommittees = EnumSort([A, B, C])\nserves = Function([committee, subcommittees] -> [bool])\n\n# Constraints\nForAll([c:committee], Count([s:subcommittees], serves(c, s)) >= 1) ::: each committee member serves on at least one subcommittee\nForAll([s:subcommittees], Count([c:committee], serves(c, s)) == 3) ::: each subcommittee has three members\nNot(serves(French, s) && serves(Ghauri, s)) ::: French does not serve on any subcommittee with Ghauri\nNot(serves(Hsia, s) && serves(Irving, s)) ::: Hsia does not serve on any subcommittee with Irving\n\n# Options\nQuestion ::: If Irving serves on every subcommittee on which Magnus serves, which one of the following could be true?\nis_sat(ForAll([s:subcommittees], serves(Magnus, s))) ::: A) Magnus serves on all of the subcommittees.\nis_sat(Count([s:subcommittees], serves(Irving, s)) > 1) ::: B) Irving serves on more than one subcommittee.\nis_sat(ForAll([s:subcommittees], serves(Irving, s) == serves(Pinsky, s))) ::: C) Irving serves on every subcommittee on which Pinsky serves.\nis_sat(serves(French, s) && serves(Magnus, s)) ::: D) French serves on a subcommittee with Magnus.\nis_sat(serves(Ghauri, s) && serves(Magnus, s)) ::: E) Ghauri serves on a subcommittee with Magnus.\n------\nProblem:\nA company has six employees—Fred, Gail, Hank, Iris, Jill, and Kim—who work in pairs to complete specific projects. Each employee works on exactly one project, and each project is completed by exactly one pair of employees. The following conditions apply: Fred and Gail work together on one project. Hank and Iris work together on one project. Jill does not work with Kim on any project.\nQuestion:\nIf Kim does not work with Hank on any project, which one of the following must be true?\nChoices:\n(A) Fred and Jill work together on one project.\n(B) Gail and Iris work together on one project.\n(C) Gail and Jill work together on one project.\n(D) Hank and Jill work together on one project.\n(E) I"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_4_20",
    "context": "A reporter is trying to uncover the workings of a secret committee. The committee has six members—French, Ghauri, Hsia, Irving, Magnus, and Pinsky—each of whom serves on at least one subcommittee. There are three subcommittees, each having three members, about which the following is known: One of the committee members serves on all three subcommittees. French does not serve on any subcommittee with Ghauri. Hsia does not serve on any subcommittee with Irving.",
    "question": "Which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) French serves on all three subcommittees.",
      "B) Hsia serves on all three subcommittees.",
      "C) Ghauri serves on every subcommittee on which Magnus serves and every subcommittee on which Pinsky serves.",
      "D) Pinsky serves on every subcommittee on which Irving serves and every subcommittee on which Magnus serves.",
      "E) Magnus serves on every subcommittee on which Pinsky serves, and Pinsky serves on every subcommittee on which Magnus serves."
    ],
    "raw_logic_programs": [
      "# Declarations\ncommittee = EnumSort([French, Ghauri, Hsia, Irving, Magnus, Pinsky])\nsubcommittees = EnumSort([A, B, C])\nserves = Function([committee, subcommittees] -> [bool])\n\n# Constraints\nForAll([c:committee], Count([s:subcommittees], serves(c, s)) >= 1) ::: each committee member serves on at least one subcommittee\nNot(serves(French, s) && serves(Ghauri, s)) ::: French does not serve on any subcommittee with Ghauri\nNot(serves(Hsia, s) && serves(Irving, s)) ::: Hsia does not serve on any subcommittee with Irving\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(ForAll([s:subcommittees], serves(French, s))) ::: A) French serves on all three subcommittees.\nis_sat(ForAll([s:subcommittees], serves(Hsia, s))) ::: B) Hsia serves on all three subcommittees.\nis_sat(ForAll([s:subcommittees], And(serves(Ghauri, s), serves(Magnus, s)))) ::: C) Ghauri serves on every subcommittee on which Magnus serves and every subcommittee on which Pinsky serves.\nis_sat(ForAll([s:subcommittees], And(serves(Pinsky, s), serves(Irving, s), serves(Magnus, s)))) ::: D) Pinsky serves on every subcommittee on which Irving serves and every subcommittee on which Magnus serves.\nis_sat(ForAll([s:subcommittees], And(serves(Magnus, s), serves(Pinsky, s)))) ::: E) Magnus serves on every subcommittee on which Pinsky serves, and Pinsky serves on every subcommittee on which Magnus serves.\n------\nProblem:\nA company has six employees—Fred, Gail, Hank, Iris, Jill, and Kim—who work in pairs to complete specific projects. The following conditions apply: Fred and Gail work together on exactly one project. Hank and Iris work together on exactly one project. Jill and Kim work together on exactly one project. Fred and Hank work together on exactly one project. Gail and Iris work together on exactly one project. Jill and Kim work together on exactly one project.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) Fred and Gail work together on two projects.\n(B) Hank and Iris work together on two projects.\n(C) Jill and Kim work together on two projects."
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_4_21",
    "context": "A reporter is trying to uncover the workings of a secret committee. The committee has six members—French, Ghauri, Hsia, Irving, Magnus, and Pinsky—each of whom serves on at least one subcommittee. There are three subcommittees, each having three members, about which the following is known: One of the committee members serves on all three subcommittees. French does not serve on any subcommittee with Ghauri. Hsia does not serve on any subcommittee with Irving.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Ghauri serves on at least two subcommittees.",
      "B) Irving serves on only one subcommittee.",
      "C) French serves on a subcommittee with Hsia.",
      "D) Ghauri serves on a subcommittee with Irving.",
      "E) Magnus serves on a subcommittee with Pinsky."
    ],
    "raw_logic_programs": [
      "# Declarations\nmembers = EnumSort([French, Ghauri, Hsia, Irving, Magnus, Pinsky])\nsubcommittees = EnumSort([A, B, C])\nserves = Function([members, subcommittees] -> [bool])\n\n# Constraints\nForAll([m:members], Count([s:subcommittees], serves(m, s)) >= 1) ::: each member serves on at least one subcommittee\nNot(serves(French, s)) ::: French does not serve on any subcommittee with Ghauri\nNot(serves(Hsia, s)) ::: Hsia does not serve on any subcommittee with Irving\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([s:subcommittees], Count([m:members], serves(m, s)) == 2)) ::: (A)\nis_valid(Exists([s:subcommittees], Count([m:members], serves(m, s)) == 1)) ::: (B)\nis_valid(Exists([s:subcommittees], serves(French, s) && serves(Hsia, s))) ::: (C)\nis_valid(Exists([s:subcommittees], serves(Ghauri, s) && serves(Irving, s))) ::: (D)\nis_valid(Exists([s:subcommittees], serves(Magnus, s) && serves(Pinsky, s))) ::: (E)\n------\nProblem:\nA company has six employees—Fred, Gail, Hank, Iris, Jill, and Kim—who work in either the accounting, human resources, or public relations department. The following conditions apply: Fred works in the accounting department. Gail works in the human resources department. Hank works in the same department as Iris. Jill works in the same department as Kim.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) Fred and Gail work in different departments.\n(B) Hank and Jill work in different departments.\n(C) Iris and Kim work in different departments.\n(D) Fred and Jill work in the same department.\n(E) Gail and Kim work in the same department.\n###\n# Declarations\nemployees = EnumSort([Fred, Gail, Hank, Iris, Jill, Kim])\ndepartments = EnumSort([accounting, human_resources, public_relations])\nworks = Function([employees, departments] -> [bool])\n\n# Constraints\nworks(Fred, accounting) ::: Fred works in the accounting department\nworks(Gail, human_resources) ::: Gail works in the human resources department\nworks(Hank"
    ]
  },
  {
    "id": "ar_lsat_200506_4-G_4_22",
    "context": "A reporter is trying to uncover the workings of a secret committee. The committee has six members—French, Ghauri, Hsia, Irving, Magnus, and Pinsky—each of whom serves on at least one subcommittee. There are three subcommittees, each having three members, about which the following is known: One of the committee members serves on all three subcommittees. French does not serve on any subcommittee with Ghauri. Hsia does not serve on any subcommittee with Irving.",
    "question": "Which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Every subcommittee has either French or Ghauri as a member.",
      "B) Every subcommittee has either Hsia or Irving as a member.",
      "C) No subcommittee consists of French, Magnus, and Pinsky.",
      "D) Some committee member serves on exactly two subcommittees.",
      "E) Either Magnus or Pinsky serves on only one subcommittee."
    ],
    "raw_logic_programs": [
      "# Declarations\ncommittee = EnumSort([French, Ghauri, Hsia, Irving, Magnus, Pinsky])\nsubcommittees = EnumSort([A, B, C])\nserves = Function([committee, subcommittees] -> [bool])\n\n# Constraints\nForAll([c:committee], Count([s:subcommittees], serves(c, s)) >= 1) ::: each committee member serves on at least one subcommittee\nForAll([s:subcommittees], Count([c:committee], serves(c, s)) == 3) ::: each subcommittee has three members\nImplies(serves(French, s), Not(serves(Ghauri, s))) ::: French does not serve on any subcommittee with Ghauri\nImplies(serves(Hsia, s), Not(serves(Irving, s))) ::: Hsia does not serve on any subcommittee with Irving\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(ForAll([s:subcommittees], Or(serves(French, s), serves(Ghauri, s)))) ::: (A)\nis_valid(ForAll([s:subcommittees], Or(serves(Hsia, s), serves(Irving, s)))) ::: (B)\nis_valid(ForAll([s:subcommittees], Not(Or(serves(French, s), serves(Magnus, s), serves(Pinsky, s))))) ::: (C)\nis_valid(Exists([c:committee], Count([s:subcommittees], serves(c, s)) == 2)) ::: (D)\nis_valid(Exists([c:committee], Or(serves(c, A), serves(c, B), serves(c, C)))) ::: (E)\n------\nProblem:\nA company has six employees—Fred, Gail, Hank, Iris, Jill, and Kim—who work in either the accounting, human resources, or public relations department. The following conditions apply: Fred and Gail work in the same department. Hank and Iris work in different departments. Jill and Kim work in different departments. The human resources department has more employees than the public relations department.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) Fred and Gail work in the accounting department.\n(B) Hank and Iris work in the accounting department.\n(C) Jill and Kim work in the accounting department.\n(D) Jill and Kim work in the human resources department.\n(E) Jill and Kim work in the public relations department.\n###\n# Declarations\nemployees = EnumSort([Fred, G"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_1_1",
    "context": "Exactly seven products—P, Q, R, S, T, W, and X—are each to be advertised exactly once in a section of a catalog. The order in which they will be displayed is governed by the following conditions: Q must be displayed in some position before W. R must be displayed immediately before X. T cannot be displayed immediately before or immediately after W. S must be displayed either first or seventh. Either Q or T must be displayed fourth.",
    "question": "Which one of the following CANNOT be the product that is displayed first?",
    "answer": "E",
    "options": [
      "A) P",
      "B) Q",
      "C) R",
      "D) T",
      "E) X"
    ],
    "raw_logic_programs": [
      "# Declarations\nproducts = EnumSort([P, Q, R, S, T, W, X])\ndisplayed = Function([products] -> [int])\nForAll([p:products], And(1 <= displayed(p), displayed(p) <= 7))\n\n# Constraints\nDistinct([p:products], displayed(p)) ::: each product is displayed exactly once\nAnd(displayed(Q) < displayed(W), displayed(W) < displayed(Q)) ::: Q must be displayed in some position before W\nAnd(displayed(R) < displayed(X), displayed(X) < displayed(R)) ::: R must be displayed immediately before X\nAnd(displayed(T)!= displayed(W) - 1, displayed(T)!= displayed(W) + 1) ::: T cannot be displayed immediately before or immediately after W\nAnd(displayed(S) == 1, displayed(S) == 7) ::: S must be displayed either first or seventh\nOr(displayed(Q) == 4, displayed(T) == 4) ::: Either Q or T must be displayed fourth\n\n# Options\nQuestion ::: Which one of the following CANNOT be the product that is displayed first?\nis_exception(is_sat(displayed(P) == 1)) ::: (A)\nis_exception(is_sat(displayed(Q) == 1)) ::: (B)\nis_exception(is_sat(displayed(R) == 1)) ::: (C)\nis_exception(is_sat(displayed(T) == 1)) ::: (D)\nis_exception(is_sat(displayed(X) == 1)) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who are to be assigned to exactly six different projects—M, N, O, P, Q, and R. The assignments are to be made in accordance with the following conditions: F is assigned to project M. G is assigned to project N. H is assigned to project O. J is assigned to project P. K is assigned to project Q. L is assigned to project R.\nQuestion:\nWhich one of the following could be a complete and accurate list of the employees assigned to project P?\nChoices:\n(A) F, G, H, J, K, L\n(B) F, G, H, J, K, L\n(C) F, G, H, J, K, L\n(D) F, G, H, J, K, L\n(E) F, G, H, J, K, L\n###\n# Declarations\nemployees = EnumSort([F, G, H, J, K, L])\nprojects = EnumSort([M, N, O, P, Q,"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_1_2",
    "context": "Exactly seven products—P, Q, R, S, T, W, and X—are each to be advertised exactly once in a section of a catalog. The order in which they will be displayed is governed by the following conditions: Q must be displayed in some position before W. R must be displayed immediately before X. T cannot be displayed immediately before or immediately after W. S must be displayed either first or seventh. Either Q or T must be displayed fourth.",
    "question": "If X is displayed immediately before Q, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) T is displayed first.",
      "B) R is displayed fifth.",
      "C) Q is displayed last.",
      "D) Q is displayed second.",
      "E) P is displayed second."
    ],
    "raw_logic_programs": [
      "# Declarations\nproducts = EnumSort([P, Q, R, S, T, W, X])\npositions = EnumSort([1, 2, 3, 4, 5, 6, 7])\ndisplayed = Function([products, positions] -> [bool])\n\n# Constraints\nForAll([p:products], Count([p:products], displayed(p, _)) == 1) ::: each product is displayed exactly once\nAnd(displayed(Q, _), Not(displayed(W, _))) ::: Q must be displayed in some position before W\nAnd(displayed(R, _), displayed(X, _)) ::: R must be displayed immediately before X\nForAll([p:products], Implies(displayed(W, _), Not(displayed(p, _)))) ::: T cannot be displayed immediately before or immediately after W\nAnd(displayed(S, 1), displayed(S, 7)) ::: S must be displayed either first or seventh\nOr(displayed(Q, 4), displayed(T, 4)) ::: Either Q or T must be displayed fourth\n\n# Options\nQuestion ::: If X is displayed immediately before Q, then which one of the following could be true?\nis_sat(ForAll([p:products], displayed(p, 1))) ::: A) T is displayed first.\nis_sat(ForAll([p:products], displayed(p, 5))) ::: B) R is displayed fifth.\nis_sat(ForAll([p:products], displayed(p, 7))) ::: C) Q is displayed last.\nis_sat(ForAll([p:products], displayed(p, 2))) ::: D) Q is displayed second.\nis_sat(ForAll([p:products], displayed(p, 2))) ::: E) P is displayed second.\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who are to be assigned to exactly six different projects—M, N, O, P, Q, and R. The assignments are to be made in accordance with the following conditions: F is assigned to project M. H is assigned to project N. J is assigned to project O. K is assigned to project P. L is assigned to project Q. G is assigned to project R.\nQuestion:\nIf F is assigned to project P, then which one of the following must be true?\nChoices:\n(A) H is assigned to project M.\n(B) J is assigned to project N.\n(C) K is assigned to project O.\n(D) L is assigned to project P.\n(E) G is assigned to project Q.\n###\n# Declarations\nemployees = EnumSort([F, G, H, J, K, L])\nprojects = EnumSort([M, N"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_1_3",
    "context": "Exactly seven products—P, Q, R, S, T, W, and X—are each to be advertised exactly once in a section of a catalog. The order in which they will be displayed is governed by the following conditions: Q must be displayed in some position before W. R must be displayed immediately before X. T cannot be displayed immediately before or immediately after W. S must be displayed either first or seventh. Either Q or T must be displayed fourth.",
    "question": "If P is displayed second, then which one of the following could be displayed third?",
    "answer": "C",
    "options": [
      "A) R",
      "B) S",
      "C) T",
      "D) W",
      "E) X"
    ],
    "raw_logic_programs": [
      "# Declarations\nproducts = EnumSort([P, Q, R, S, T, W, X])\npositions = EnumSort([1, 2, 3, 4, 5, 6, 7])\ndisplayed = Function([products, positions] -> [bool])\n\n# Constraints\nForAll([p:products], Count([p:products], displayed(p, p)) == 1) ::: each product is displayed exactly once\nAnd(displayed(Q, p), displayed(W, q), p < q) ::: Q must be displayed in some position before W\nAnd(displayed(R, p), displayed(X, q), p < q) ::: R must be displayed immediately before X\nAnd(displayed(T, p), displayed(W, q), Not(p == q)) ::: T cannot be displayed immediately before or immediately after W\nAnd(displayed(S, 1), displayed(S, 7)) ::: S must be displayed either first or seventh\nOr(displayed(Q, 4), displayed(T, 4)) ::: Either Q or T must be displayed fourth\n\n# Options\nQuestion ::: If P is displayed second, then which one of the following could be displayed third?\nis_sat(ForAll([p:products], displayed(p, p) == 2)) ::: (A)\nis_sat(ForAll([p:products], displayed(p, p) == 3)) ::: (B)\nis_sat(ForAll([p:products], displayed(p, p) == 4)) ::: (C)\nis_sat(ForAll([p:products], displayed(p, p) == 5)) ::: (D)\nis_sat(ForAll([p:products], displayed(p, p) == 6)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_1_4",
    "context": "Exactly seven products—P, Q, R, S, T, W, and X—are each to be advertised exactly once in a section of a catalog. The order in which they will be displayed is governed by the following conditions: Q must be displayed in some position before W. R must be displayed immediately before X. T cannot be displayed immediately before or immediately after W. S must be displayed either first or seventh. Either Q or T must be displayed fourth.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Q is displayed fifth.",
      "B) Q is displayed seventh.",
      "C) R is displayed third.",
      "D) W is displayed third.",
      "E) X is displayed fifth."
    ],
    "raw_logic_programs": [
      "# Declarations\nproducts = EnumSort([P, Q, R, S, T, W, X])\npositions = EnumSort([1, 2, 3, 4, 5, 6, 7])\ndisplayed = Function([products, positions] -> [bool])\n\n# Constraints\nForAll([p:products], Count([p:products], displayed(p, _)) == 1) ::: each product is displayed exactly once\nAnd(displayed(Q, _), Not(displayed(W, _))) ::: Q must be displayed in some position before W\nAnd(displayed(R, _), displayed(X, _)) ::: R must be displayed immediately before X\nForAll([p:products], Implies(displayed(p, 1), p!= W)) ::: T cannot be displayed immediately before or immediately after W\nAnd(displayed(S, 1), displayed(S, 7)) ::: S must be displayed either first or seventh\nOr(displayed(Q, 4), displayed(T, 4)) ::: Either Q or T must be displayed fourth\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(ForAll([p:products], displayed(p, 5))) ::: (A)\nis_sat(ForAll([p:products], displayed(p, 7))) ::: (B)\nis_sat(ForAll([p:products], displayed(R, 3))) ::: (C)\nis_sat(ForAll([p:products], displayed(W, 3))) ::: (D)\nis_sat(ForAll([p:products], displayed(X, 5))) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who are to"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_1_5",
    "context": "Exactly seven products—P, Q, R, S, T, W, and X—are each to be advertised exactly once in a section of a catalog. The order in which they will be displayed is governed by the following conditions: Q must be displayed in some position before W. R must be displayed immediately before X. T cannot be displayed immediately before or immediately after W. S must be displayed either first or seventh. Either Q or T must be displayed fourth.",
    "question": "If R is displayed sixth, then which one of the following must be displayed fifth?",
    "answer": "D",
    "options": [
      "A) P",
      "B) Q",
      "C) T",
      "D) W",
      "E) X"
    ],
    "raw_logic_programs": [
      "# Declarations\nproducts = EnumSort([P, Q, R, S, T, W, X])\npositions = EnumSort([1, 2, 3, 4, 5, 6, 7])\ndisplayed = Function([products, positions] -> [bool])\n\n# Constraints\nForAll([p:products], Count([p:products], displayed(p, p)) == 1) ::: each product is displayed exactly once\nAnd(displayed(Q, p), Not(displayed(W, p))) ::: Q must be displayed in some position before W\nAnd(displayed(R, p), displayed(X, p)) ::: R must be displayed immediately before X\nAnd(displayed(T, p), Not(displayed(W, p))) ::: T cannot be displayed immediately before or immediately after W\nAnd(displayed(S, 1), displayed(S, 7)) ::: S must be displayed either first or seventh\nOr(displayed(Q, 4), displayed(T, 4)) ::: Either Q or T must be displayed fourth\ndisplayed(R, 6) ::: R is displayed sixth\n\n# Options\nQuestion ::: If R is displayed sixth, then which one of the following must be displayed fifth?\nis_sat(displayed(P, 5)) ::: A) P\nis_sat(displayed(Q, 5)) ::: B) Q\nis_sat(displayed(T, 5)) ::: C) T\nis_sat(displayed(W, 5)) ::: D) W\nis_sat(displayed(X, 5)) ::: E) X\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who are to be assigned to exactly six different projects—M,"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_2_6",
    "context": "A lighting control panel has exactly seven switches, numbered from 1 to 7. Each switch is either in the on position or in the off position. The circuit load of the panel is the total number of its switches that are on. The control panel must be configured in accordance with the following conditions: If switch 1 is on, then switch 3 and switch 5 are off. If switch 4 is on, then switch 2 and switch 5 are off. The switch whose number corresponds to the circuit load of the panel is itself on.",
    "question": "Which one of the following could be a complete and accurate list of the switches that are on?",
    "answer": "B",
    "options": [
      "A) switch 2, switch 3, switch 4, switch 7",
      "B) switch 3, switch 6, switch 7",
      "C) switch 2, switch 5, switch 6",
      "D) switch 1, switch 3, switch 4",
      "E) switch 1, switch 5"
    ],
    "raw_logic_programs": [
      "# Declarations\nswitches = EnumSort([1, 2, 3, 4, 5, 6, 7])\non = Function([switches] -> [bool])\nForAll([s:switches], And(on(s) == true, on(s) == false))\n\n# Constraints\nAnd(on(1), Not(on(3)), Not(on(5))) ::: If switch 1 is on, then switch 3 and switch 5 are off\nAnd(on(4), Not(on(2)), Not(on(5))) ::: If switch 4 is on, then switch 2 and switch 5 are off\non(switches) == on(switches) ::: The switch whose number corresponds to the circuit load of the panel is itself on\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the switches that are on?\nis_sat(And(on(2), on(3), on(4), on(7))) ::: A) switch 2, switch 3, switch 4, switch 7\nis_sat(And(on(3), on(6), on(7))) ::: B) switch 3, switch 6, switch 7\nis_sat(And(on(2), on(5), on(6))) ::: C) switch 2, switch 5, switch 6\nis_sat(And(on(1), on(3), on(4))) ::: D) switch 1, switch 3, switch 4\nis_sat(And(on(1), on(5))) ::: E) switch 1, switch 5\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_2_7",
    "context": "A lighting control panel has exactly seven switches, numbered from 1 to 7. Each switch is either in the on position or in the off position. The circuit load of the panel is the total number of its switches that are on. The control panel must be configured in accordance with the following conditions: If switch 1 is on, then switch 3 and switch 5 are off. If switch 4 is on, then switch 2 and switch 5 are off. The switch whose number corresponds to the circuit load of the panel is itself on.",
    "question": "If switch 1 and switch 3 are both off, then which one of the following could be two switches that are both on?",
    "answer": "A",
    "options": [
      "A) switch 2 and switch 7",
      "B) switch 4 and switch 6",
      "C) switch 4 and switch 7",
      "D) switch 5 and switch 6",
      "E) switch 6 and switch 7"
    ],
    "raw_logic_programs": [
      "# Declarations\nswitches = EnumSort([1, 2, 3, 4, 5, 6, 7])\non = Function([switches] -> [bool])\nForAll([s:switches], And(on(s) == true, on(s) == false))\n\n# Constraints\nAnd(on(1), Not(on(3)), Not(on(5))) ::: If switch 1 is on, then switch 3 and switch 5 are off\nAnd(on(4), Not(on(2)), Not(on(5))) ::: If switch 4 is on, then switch 2 and switch 5 are off\non(switches) == Count([s:switches], on(s)) ::: The switch whose number corresponds to the circuit load of the panel is itself on\n\n# Options\nQuestion ::: If switch 1 and switch 3 are both off, then which one of the following could be two switches that are both on?\nis_exception(is_sat(And(on(2), on(7)))) ::: A) switch 2 and switch 7\nis_exception(is_sat(And(on(4), on(6)))) ::: B) switch 4 and switch 6\nis_exception(is_sat(And(on(4), on(7)))) ::: C) switch 4 and switch 7\nis_exception(is_sat(And(on(5), on(6)))) ::: D) switch 5 and switch 6\nis_exception(is_sat(And(on(6), on(7)))) ::: E) switch 6 and switch 7\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting,"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_2_8",
    "context": "A lighting control panel has exactly seven switches, numbered from 1 to 7. Each switch is either in the on position or in the off position. The circuit load of the panel is the total number of its switches that are on. The control panel must be configured in accordance with the following conditions: If switch 1 is on, then switch 3 and switch 5 are off. If switch 4 is on, then switch 2 and switch 5 are off. The switch whose number corresponds to the circuit load of the panel is itself on.",
    "question": "If exactly two of the switches are on, then which one of the following switches must be off?",
    "answer": "B",
    "options": [
      "A) switch 3",
      "B) switch 4",
      "C) switch 5",
      "D) switch 6",
      "E) switch 7"
    ],
    "raw_logic_programs": [
      "# Declarations\nswitches = EnumSort([1, 2, 3, 4, 5, 6, 7])\non = Function([switches] -> [bool])\nForAll([s:switches], And(on(s) == true, on(s) == false))\n\n# Constraints\nAnd(on(1), Not(on(3)), Not(on(5))) ::: If switch 1 is on, then switch 3 and switch 5 are off\nAnd(on(4), Not(on(2)), Not(on(5))) ::: If switch 4 is on, then switch 2 and switch 5 are off\non(s) == on(s) ::: The switch whose number corresponds to the circuit load of the panel is itself on\n\n# Options\nQuestion ::: If exactly two of the switches are on, then which one of the following switches must be off?\nis_exception(is_sat(Not(on(3)))) ::: A) switch 3\nis_exception(is_sat(Not(on(4)))) ::: B) switch 4\nis_exception(is_sat(Not(on(5)))) ::: C) switch 5\nis_exception(is_sat(Not(on(6)))) ::: D) switch 6\nis_exception(is_sat(Not(on(7)))) ::: E) switch 7\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting, marketing, and sales. The following conditions apply: A and B are assigned to the same department. C is assigned to a different department from A. D is assigned to the same department as E. F is assigned to a different department from D.\nQuestion:"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_2_9",
    "context": "A lighting control panel has exactly seven switches, numbered from 1 to 7. Each switch is either in the on position or in the off position. The circuit load of the panel is the total number of its switches that are on. The control panel must be configured in accordance with the following conditions: If switch 1 is on, then switch 3 and switch 5 are off. If switch 4 is on, then switch 2 and switch 5 are off. The switch whose number corresponds to the circuit load of the panel is itself on.",
    "question": "If switch 6 and switch 7 are both off, then what is the maximum circuit load of the panel?",
    "answer": "C",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nswitches = EnumSort([1, 2, 3, 4, 5, 6, 7])\non = Function([switches] -> [bool])\nForAll([s:switches], And(on(s) == true, on(s) == false))\n\n# Constraints\nAnd(on(1), Not(on(3)), Not(on(5))) ::: If switch 1 is on, then switch 3 and switch 5 are off\nAnd(on(4), Not(on(2)), Not(on(5))) ::: If switch 4 is on, then switch 2 and switch 5 are off\non(switches) == on(switches) ::: The switch whose number corresponds to the circuit load of the panel is itself on\n\n# Options\nQuestion ::: If switch 6 and switch 7 are both off, then what is the maximum circuit load of the panel?\nis_sat(ForAll([s:switches], Not(on(s)))) ::: A) one\nis_sat(ForAll([s:switches], Not(on(s))) & on(2)) ::: B) two\nis_sat(ForAll([s:switches], Not(on(s))) & on(2) & on(3)) ::: C) three\nis_sat(ForAll([s:switches], Not(on(s))) & on(2) & on(3) & on(4)) ::: D) four\nis_sat(ForAll([s:switches], Not(on(s))) & on(2) & on(3) & on(4) & on(5)) ::: E) five\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_2_10",
    "context": "A lighting control panel has exactly seven switches, numbered from 1 to 7. Each switch is either in the on position or in the off position. The circuit load of the panel is the total number of its switches that are on. The control panel must be configured in accordance with the following conditions: If switch 1 is on, then switch 3 and switch 5 are off. If switch 4 is on, then switch 2 and switch 5 are off. The switch whose number corresponds to the circuit load of the panel is itself on.",
    "question": "If switch 5 and switch 6 are both on, then which one of the following switches must be on?",
    "answer": "C",
    "options": [
      "A) switch 1",
      "B) switch 2",
      "C) switch 3",
      "D) switch 4",
      "E) switch 7"
    ],
    "raw_logic_programs": [
      "# Declarations\nswitches = EnumSort([1, 2, 3, 4, 5, 6, 7])\non = Function([switches] -> [bool])\nForAll([s:switches], And(on(s) == true, on(s) == false))\n\n# Constraints\nAnd(on(1), Not(on(3)), Not(on(5))) ::: If switch 1 is on, then switch 3 and switch 5 are off\nAnd(on(4), Not(on(2)), Not(on(5))) ::: If switch 4 is on, then switch 2 and switch 5 are off\non(switches) == on(switches) ::: The switch whose number corresponds to the circuit load of the panel is itself on\n\n# Options\nQuestion ::: If switch 5 and switch 6 are both on, then which one of the following switches must be on?\nis_sat(And(on(5), on(6), on(1))) ::: A) switch 1\nis_sat(And(on(5), on(6), on(2))) ::: B) switch 2\nis_sat(And(on(5), on(6), on(3))) ::: C) switch 3\nis_sat(And(on(5), on(6), on(4))) ::: D) switch 4\nis_sat(And(on(5), on(6), on(7))) ::: E) switch 7\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting, marketing, and sales. The following conditions apply: A and B are assigned to the same department. C is assigned to a different department from A"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_2_11",
    "context": "A lighting control panel has exactly seven switches, numbered from 1 to 7. Each switch is either in the on position or in the off position. The circuit load of the panel is the total number of its switches that are on. The control panel must be configured in accordance with the following conditions: If switch 1 is on, then switch 3 and switch 5 are off. If switch 4 is on, then switch 2 and switch 5 are off. The switch whose number corresponds to the circuit load of the panel is itself on.",
    "question": "What is the maximum circuit load of the panel?",
    "answer": "C",
    "options": [
      "A) three",
      "B) four",
      "C) five",
      "D) six",
      "E) seven"
    ],
    "raw_logic_programs": [
      "# Declarations\nswitches = EnumSort([1, 2, 3, 4, 5, 6, 7])\non = Function([switches] -> [bool])\nForAll([s:switches], And(on(s) == true, on(s) == false))\n\n# Constraints\nAnd(on(1), Not(on(3)), Not(on(5))) ::: If switch 1 is on, then switch 3 and switch 5 are off\nAnd(on(4), Not(on(2)), Not(on(5))) ::: If switch 4 is on, then switch 2 and switch 5 are off\non(Count([s:switches], on(s))) ::: The switch whose number corresponds to the circuit load of the panel is itself on\n\n# Options\nQuestion ::: What is the maximum circuit load of the panel?\nis_sat(Count([s:switches], on(s)) == 3) ::: A) three\nis_sat(Count([s:switches], on(s)) == 4) ::: B) four\nis_sat(Count([s:switches], on(s)) == 5) ::: C) five\nis_sat(Count([s:switches], on(s)) == 6) ::: D) six\nis_sat(Count([s:switches], on(s)) == 7) ::: E) seven\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting, marketing, and sales. The following conditions apply: A and B are assigned to the same department. C is assigned to a different department from A. D is assigned to a different department from E. E is assigned to a different"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_3_12",
    "context": "In Crescentville there are exactly five record stores, whose names are abbreviated S, T, V, X, and Z. Each of the five stores carries at least one of four distinct types of music: folk, jazz, opera, and rock. None of the stores carries any other type of music. The following conditions must hold: Exactly two of the five stores carry jazz. T carries rock and opera but no other type of music. S carries more types of music than T carries. X carries more types of music than any other store in Crescentville carries. Jazz is among the types of music S carries. V does not carry any type of music that Z carries.",
    "question": "Which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) S carries folk and rock but neither jazz nor opera.",
      "B) T carries jazz but neither opera nor rock.",
      "C) V carries folk, rock, and opera, but not jazz.",
      "D) X carries folk, rock, and jazz, but not opera.",
      "E) Z carries folk and opera but neither rock nor jazz."
    ],
    "raw_logic_programs": [
      "# Declarations\nstores = EnumSort([S, T, V, X, Z])\nmusic = EnumSort([folk, jazz, opera, rock])\ncarries = Function([stores, music] -> [bool])\n\n# Constraints\nForAll([s:stores], Count([m:music], carries(s, m)) >= 1) ::: Each of the five stores carries at least one of four distinct types of music\nAnd(carries(T, rock), carries(T, opera), Not(Count([m:music], carries(T, m)) > 2)) ::: T carries rock and opera but no other type of music\nAnd(carries(S, jazz), carries(S, rock), Count([m:music], carries(S, m)) > Count([m:music], carries(T, m))) ::: S carries more types of music than T carries\nAnd(carries(X, jazz), carries(X, rock), carries(X, opera), carries(X, folk), Count([m:music], carries(X, m)) > Count([m:music], carries(s, m))) ::: X carries more types of music than any other store in Crescentville carries\nAnd(carries(S, jazz), carries(S, rock), carries(S, opera), carries(S, folk), Count([m:music], carries(S, m)) == 4) ::: Jazz is among the types of music S carries\nForAll([m:music], Implies(carries(V, m), Not(carries(Z, m)))) ::: V does not carry any type of music that Z carries\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(And(carries(S, folk), carries(S"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_3_13",
    "context": "In Crescentville there are exactly five record stores, whose names are abbreviated S, T, V, X, and Z. Each of the five stores carries at least one of four distinct types of music: folk, jazz, opera, and rock. None of the stores carries any other type of music. The following conditions must hold: Exactly two of the five stores carry jazz. T carries rock and opera but no other type of music. S carries more types of music than T carries. X carries more types of music than any other store in Crescentville carries. Jazz is among the types of music S carries. V does not carry any type of music that Z carries.",
    "question": "Which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) S, V, and Z all carry folk.",
      "B) S, X, and Z all carry jazz.",
      "C) Of the five stores, only S and V carry jazz.",
      "D) Of the five stores, only T and X carry rock.",
      "E) Of the five stores, only S, T, and V carry opera."
    ],
    "raw_logic_programs": [
      "# Declarations\nstores = EnumSort([S, T, V, X, Z])\nmusic = EnumSort([folk, jazz, opera, rock])\ncarries = Function([stores, music] -> [bool])\n\n# Constraints\nForAll([s:stores], Count([m:music], carries(s, m)) >= 1) ::: Each of the five stores carries at least one of four distinct types of music\nCount([s:stores], carries(s, jazz)) == 2 ::: Exactly two of the five stores carry jazz\nAnd(carries(T, rock), carries(T, opera), ForAll([m:music], Implies(m!= rock, m!= opera, Not(carries(T, m))))) ::: T carries rock and opera but no other type of music\nCount([m:music], carries(S, m)) > Count([m:music], carries(T, m)) ::: S carries more types of music than T carries\nCount([m:music], carries(X, m)) > Count([m:music], carries(s, m)) ::: X carries more types of music than any other store in Crescentville carries\ncarries(S, jazz) ::: Jazz is among the types of music S carries\nForAll([m:music], Implies(carries(V, m), Not(carries(Z, m)))) ::: V does not carry any type of music that Z carries\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(And(carries(S, folk), carries(V, folk), carries(Z, folk))) ::: (A)\nis_valid(And(carries(S, jazz), carries(X, jazz), carries(Z, jazz))) ::: (B)\nis_valid(And(carries(S, jazz), carries(V, jazz))) ::: (C)\nis_valid(And(carries(T, rock), carries(X, rock))) ::: (D)\nis_valid(And(carries(S, opera), carries(T, opera), carries(V, opera))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_3_14",
    "context": "In Crescentville there are exactly five record stores, whose names are abbreviated S, T, V, X, and Z. Each of the five stores carries at least one of four distinct types of music: folk, jazz, opera, and rock. None of the stores carries any other type of music. The following conditions must hold: Exactly two of the five stores carry jazz. T carries rock and opera but no other type of music. S carries more types of music than T carries. X carries more types of music than any other store in Crescentville carries. Jazz is among the types of music S carries. V does not carry any type of music that Z carries.",
    "question": "If exactly one of the stores carries folk, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) S and V carry exactly two types of music in common.",
      "B) T and S carry exactly two types of music in common.",
      "C) T and V carry exactly two types of music in common.",
      "D) V and X carry exactly two types of music in common.",
      "E) X and Z carry exactly two types of music in common."
    ],
    "raw_logic_programs": [
      "# Declarations\nstores = EnumSort([S, T, V, X, Z])\nmusic = EnumSort([folk, jazz, opera, rock])\ncarries = Function([stores, music] -> [bool])\n\n# Constraints\nForAll([s:stores], Count([m:music], carries(s, m)) >= 1) ::: Each of the five stores carries at least one of four distinct types of music\nAnd(carries(T, rock), carries(T, opera), Not(Count([m:music], carries(T, m)) > 2)) ::: T carries rock and opera but no other type of music\nCount([m:music], carries(S, m)) > Count([m:music], carries(T, m)) ::: S carries more types of music than T carries\nCount([m:music], carries(X, m)) > Count([m:music], carries(s, m)) ::: X carries more types of music than any other store in Crescentville carries\ncarries(S, jazz) ::: Jazz is among the types of music S carries\nForAll([m:music], Implies(carries(V, m), Not(carries(Z, m)))) ::: V does not carry any type of music that Z carries\n\n# Options\nQuestion ::: If exactly one of the stores carries folk, then which one of the following could be true?\nis_exception(is_sat(And(carries(S, folk), carries(V, folk)))) ::: A) S and V carry exactly two types of music in common.\nis_exception(is_sat(And(carries(T, folk), carries(S, folk)))) ::: B) T and S carry exactly two types of music in common.\nis_exception(is_sat(And(carries(T, folk), carries(V, folk)))) ::: C) T and V carry exactly two types of music in common.\nis_exception(is_sat(And(carries(V, folk), carries(X, folk)))) ::: D) V and X carry exactly two types of music in common.\nis_exception(is_sat(And("
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_3_15",
    "context": "In Crescentville there are exactly five record stores, whose names are abbreviated S, T, V, X, and Z. Each of the five stores carries at least one of four distinct types of music: folk, jazz, opera, and rock. None of the stores carries any other type of music. The following conditions must hold: Exactly two of the five stores carry jazz. T carries rock and opera but no other type of music. S carries more types of music than T carries. X carries more types of music than any other store in Crescentville carries. Jazz is among the types of music S carries. V does not carry any type of music that Z carries.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) T carries exactly the same number of types of music as V carries.",
      "B) V carries exactly the same number of types of music as Z carries.",
      "C) S carries at least one more type of music than Z carries.",
      "D) Z carries at least one more type of music than T carries.",
      "E) X carries exactly two more types of music than S carries."
    ],
    "raw_logic_programs": [
      "# Declarations\nstores = EnumSort([S, T, V, X, Z])\nmusic = EnumSort([folk, jazz, opera, rock])\ncarries = Function([stores, music] -> [bool])\n\n# Constraints\nForAll([s:stores], Count([m:music], carries(s, m)) >= 1) ::: Each of the five stores carries at least one of four distinct types of music\nAnd(carries(T, rock), carries(T, opera), Count([m:music], carries(T, m)) == 2) ::: T carries rock and opera but no other type of music\nCount([m:music], carries(S, m)) > Count([m:music], carries(T, m)) ::: S carries more types of music than T carries\nCount([m:music], carries(X, m)) > Count([m:music], carries(s, m)) ::: X carries more types of music than any other store in Crescentville carries\ncarries(S, jazz) ::: Jazz is among the types of music S carries\nForAll([m:music], Implies(carries(V, m), Not(carries(Z, m)))) ::: V does not carry any type of music that Z carries\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(ForAll([m:music], carries(T, m) == carries(V, m))) ::: (A)\nis_valid(ForAll([m:music], carries(V, m) == carries(Z, m))) ::: (B)\nis_valid(Count([m:music], carries(S, m)) > Count([m:music], carries(Z, m))) ::: (C)\nis_valid(Count([m:music], carries(Z, m)) > Count([m:music], carries(T, m))) ::: (D)\nis_valid(Count([m:music], carries(X, m)) == Count([m:music], carries(S, m)) + 2) ::: (E)\n------\nProblem:\nIn a certain city, there are exactly"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_3_16",
    "context": "In Crescentville there are exactly five record stores, whose names are abbreviated S, T, V, X, and Z. Each of the five stores carries at least one of four distinct types of music: folk, jazz, opera, and rock. None of the stores carries any other type of music. The following conditions must hold: Exactly two of the five stores carry jazz. T carries rock and opera but no other type of music. S carries more types of music than T carries. X carries more types of music than any other store in Crescentville carries. Jazz is among the types of music S carries. V does not carry any type of music that Z carries.",
    "question": "If V is one of exactly three stores that carry rock, then which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) S and Z carry no types of music in common.",
      "B) S and V carry at least one type of music in common.",
      "C) S and Z carry at least one type of music in common.",
      "D) T and Z carry at least one type of music in common.",
      "E) T and V carry at least two types of music in common."
    ],
    "raw_logic_programs": [
      "# Declarations\nstores = EnumSort([S, T, V, X, Z])\nmusic = EnumSort([folk, jazz, opera, rock])\ncarries = Function([stores, music] -> [bool])\n\n# Constraints\nForAll([s:stores], Count([m:music], carries(s, m)) >= 1) ::: Each of the five stores carries at least one of four distinct types of music\nAnd(carries(T, rock), carries(T, opera), Not(Count([m:music], carries(T, m)) > 2)) ::: T carries rock and opera but no other type of music\nCount([s:stores], Count([m:music], carries(s, m)) > Count([m:music], carries(T, m))) == 1 ::: S carries more types of music than T carries\nCount([s:stores], Count([m:music], carries(s, m)) > Count([m:music], carries(X, m))) == 0 ::: X carries more types of music than any other store in Crescentville carries\ncarries(S, jazz) ::: Jazz is among the types of music S carries\nForAll([m:music], Implies(carries(V, m), Not(carries(Z, m)))) ::: V does not carry any type of music that Z carries\n\n# Options\nQuestion ::: If V is one of exactly three stores that carry rock, then which one of the following must be true?\nis_sat(And(carries(S, m), carries(Z, m))) ::: A) S and Z carry no types of music in common.\nis_sat(And(carries(S, m), carries(V, m))) ::: B) S and V carry at least one type of music in common.\nis_sat(And(carries(S, m), carries(Z, m))) ::: C) S and Z carry at least one type of music in common.\nis_sat(And(carries(T, m), carries(Z, m))) ::: D) T and Z carry at least one type of music in common.\nis_s"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_3_17",
    "context": "In Crescentville there are exactly five record stores, whose names are abbreviated S, T, V, X, and Z. Each of the five stores carries at least one of four distinct types of music: folk, jazz, opera, and rock. None of the stores carries any other type of music. The following conditions must hold: Exactly two of the five stores carry jazz. T carries rock and opera but no other type of music. S carries more types of music than T carries. X carries more types of music than any other store in Crescentville carries. Jazz is among the types of music S carries. V does not carry any type of music that Z carries.",
    "question": "If S and V both carry folk, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) S and T carry no types of music in common.",
      "B) S and Z carry no types of music in common.",
      "C) T and Z carry no types of music in common.",
      "D) S and Z carry two types of music in common.",
      "E) T and V carry two types of music in common."
    ],
    "raw_logic_programs": [
      "# Declarations\nstores = EnumSort([S, T, V, X, Z])\nmusic = EnumSort([folk, jazz, opera, rock])\ncarries = Function([stores, music] -> [bool])\n\n# Constraints\nForAll([s:stores], Count([m:music], carries(s, m)) >= 1) ::: Each of the five stores carries at least one of four distinct types of music\nAnd(carries(T, rock), carries(T, opera), Not(Count([m:music], carries(T, m)) > 2)) ::: T carries rock and opera but no other type of music\nCount([m:music], carries(S, m)) > Count([m:music], carries(T, m)) ::: S carries more types of music than T carries\nCount([m:music], carries(X, m)) > Count([m:music], carries(s, m)) ::: X carries more types of music than any other store in Crescentville carries\ncarries(S, jazz) ::: Jazz is among the types of music S carries\nForAll([m:music], Implies(carries(V, m), Not(carries(Z, m)))) ::: V does not carry any type of music that Z carries\n\n# Options\nQuestion ::: If S and V both carry folk, then which one of the following could be true?\nis_valid(ForAll([m:music], Implies(carries(S, m), carries(V, m)))) ::: A) S and T carry no types of music in common.\nis_valid(ForAll([m:music], Implies(carries(S, m), Not(carries(Z, m))))) ::: B) S and Z carry no types of music in common.\nis_valid(ForAll([m:music], Implies(carries(T, m), Not(carries(Z, m))))) ::: C) T and Z carry no types of music in common.\nis_valid(Count([m:music], Implies(carries(S, m), carries(Z, m))) == 2) ::: D) S and Z carry two types of music"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_4_18",
    "context": "Maggie's Deli is open exactly five days every week: Monday through Friday. Its staff, each of whom works on at least one day each week, consists of exactly six people—Janice, Kevin, Nan, Ophelia, Paul, and Seymour. Exactly three of them—Janice, Nan, and Paul—are supervisors. The deli's staffing is consistent with the following: Each day's staff consists of exactly two people, at least one of whom is a supervisor. Tuesday's and Wednesday's staffs both include Ophelia. Of the days Nan works each week, at least two are consecutive. Seymour does not work on any day before the first day Paul works that week. Any day on which Kevin works is the first day during the week that some other staff member works.",
    "question": "Which one of the following could be an accurate staffing schedule?",
    "answer": "C",
    "options": [
      "A) Monday: Janice, Kevin Tuesday: Nan, Ophelia Wednesday: Nan, Paul Thursday: Kevin, Paul Friday: Janice, Seymour",
      "B) Monday: Paul, Seymour Tuesday: Ophelia, Paul Wednesday: Nan, Ophelia Thursday: Kevin, Nan Friday: Janice, Seymour",
      "C) Monday: Janice, Kevin Tuesday: Nan, Ophelia Wednesday: Nan, Ophelia Thursday: Kevin, Paul Friday: Paul, Seymour",
      "D) Monday: Janice, Kevin Tuesday: Janice, Ophelia Wednesday: Nan, Ophelia Thursday: Nan, Seymour Friday: Kevin, Paul",
      "E) Monday: Paul, Seymour Tuesday: Ophelia, Paul Wednesday: Nan, Ophelia Thursday: Janice, Kevin Friday: Nan, Paul"
    ],
    "raw_logic_programs": [
      "# Declares\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nstaff = EnumSort([Janice, Kevin, Nan, Ophelia, Paul, Seymour])\nworks = Function([days, staff] -> [bool])\n\n# Constraints\nForAll([d:days], Count([s:staff], works(d, s)) == 2) ::: Each day's staff consists of exactly two people\nAnd(works(Tuesday, Ophelia), works(Wednesday, Ophelia)) ::: Tuesday's and Wednesday's staffs both include Ophelia\nAnd(works(Nan, d1), works(Nan, d2), d1!= d2, d1 < d2) ::: Of the days Nan works each week, at least two are consecutive\nAnd(works(Seymour, d1), works(Paul, d2), d1 < d2) ::: Seymour does not work on any day before the first day Paul works that week\nAnd(works(Kevin, d1), works(s:staff, d2), d1 < d2) ::: Any day on which Kevin works is the first day during the week that some other staff member works\n\n# Options\nQuestion ::: Which one of the following could be an accurate staffing schedule?\nis_sat(And(works(Monday, Janice), works(Monday, Kevin), works(Tuesday, Nan), works(Tuesday, Ophelia), works(Wednesday, Nan), works(Wednesday, Paul), works(Thursday, Kevin), works(Thursday, Paul), works(Friday, Janice), works(Friday, Seymour))) ::: A) Monday: Janice, Kevin Tuesday: Nan, Ophelia Wednesday: Nan, Paul Thursday: Kevin, Paul Friday: Janice, Seymour\nis_sat(And(works(Monday, Paul), works(Monday, Seymour), works(Tuesday, Ophelia), works(Tuesday, Paul), works(Wednesday, Nan), works(Wednesday,"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_4_19",
    "context": "Maggie's Deli is open exactly five days every week: Monday through Friday. Its staff, each of whom works on at least one day each week, consists of exactly six people—Janice, Kevin, Nan, Ophelia, Paul, and Seymour. Exactly three of them—Janice, Nan, and Paul—are supervisors. The deli's staffing is consistent with the following: Each day's staff consists of exactly two people, at least one of whom is a supervisor. Tuesday's and Wednesday's staffs both include Ophelia. Of the days Nan works each week, at least two are consecutive. Seymour does not work on any day before the first day Paul works that week. Any day on which Kevin works is the first day during the week that some other staff member works.",
    "question": "If Kevin and Paul work Thursday, who must work Friday?",
    "answer": "E",
    "options": [
      "A) Janice",
      "B) Kevin",
      "C) Nan",
      "D) Paul",
      "E) Seymour"
    ],
    "raw_logic_programs": [
      "# Declares\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nstaff = EnumSort([Janice, Kevin, Nan, Ophelia, Paul, Seymour])\nworks = Function([days, staff] -> [bool])\n\n# Constraints\nForAll([d:days], Count([s:staff], works(d, s)) == 2) ::: Each day's staff consists of exactly two people\nAnd(works(Tuesday, Ophelia), works(Wednesday, Ophelia)) ::: Tuesday's and Wednesday's staffs both include Ophelia\nAnd(works(Nan, d1), works(Nan, d2), d1!= d2, d1 < d2) ::: Of the days Nan works each week, at least two are consecutive\nAnd(works(Seymour, d), Not(works(Paul, d1))) ::: Seymour does not work on any day before the first day Paul works that week\nAnd(works(Kevin, d), works(s, d), s!= Kevin) ::: Any day on which Kevin works is the first day during the week that some other staff member works\n\n# Options\nQuestion ::: If Kevin and Paul work Thursday, who must work Friday?\nis_valid(works(Friday, Janice)) ::: (A)\nis_valid(works(Friday, Kevin)) ::: (B)\nis_valid(works(Friday, Nan)) ::: (C)\nis_valid(works(Friday, Paul)) ::: (D)\nis_valid(works(Friday, Seymour)) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—Fred, Gail, Hank, Iris, Jan, and Karen—who work in pairs to complete specific projects. The following conditions apply: Fred and Gail work together on exactly one project. Hank and Iris work together on exactly two projects. Jan and Karen work together on exactly three projects. Fred and Jan work together on exactly four projects. Gail and Karen work together on exactly five projects.\nQuestion:\nIf Hank and Karen work together on"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_4_20",
    "context": "Maggie's Deli is open exactly five days every week: Monday through Friday. Its staff, each of whom works on at least one day each week, consists of exactly six people—Janice, Kevin, Nan, Ophelia, Paul, and Seymour. Exactly three of them—Janice, Nan, and Paul—are supervisors. The deli's staffing is consistent with the following: Each day's staff consists of exactly two people, at least one of whom is a supervisor. Tuesday's and Wednesday's staffs both include Ophelia. Of the days Nan works each week, at least two are consecutive. Seymour does not work on any day before the first day Paul works that week. Any day on which Kevin works is the first day during the week that some other staff member works.",
    "question": "Each of the following could be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) Janice works Monday and Tuesday.",
      "B) Kevin and Paul work Friday.",
      "C) Seymour works Monday and Friday.",
      "D) Janice and Kevin work Thursday.",
      "E) Paul works Monday and Friday."
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nstaff = EnumSort([Janice, Kevin, Nan, Ophelia, Paul, Seymour])\nsupervisors = EnumSort([Janice, Nan, Paul])\nworks = Function([days, staff] -> [bool])\n\n# Constraints\nForAll([d:days], Count([s:staff], works(d, s)) == 2) ::: Each day's staff consists of exactly two people\nAnd(works(Tuesday, Ophelia), works(Wednesday, Ophelia)) ::: Tuesday's and Wednesday's staffs both include Ophelia\nAnd(works(Nan, d1), works(Nan, d2), d1!= d2, d1 < d2) ::: Of the days Nan works each week, at least two are consecutive\nAnd(works(Seymour, d1), works(Paul, d2), d1 > d2) ::: Seymour does not work on any day before the first day Paul works that week\nAnd(works(Kevin, d1), works(s:staff, d2), d1 > d2, s!= Kevin) ::: Any day on which Kevin works is the first day during the week that some other staff member works\n\n# Options\nQuestion ::: Each of the following could be true EXCEPT:\nis_exception(is_sat(And(works(Janice, Monday), works(Janice, Tuesday)))) ::: (A)\nis_exception(is_sat(And(works(Kevin, Friday), works(Paul, Friday)))) ::: (B)\nis_exception(is_sat(And(works(Seymour, Monday), works(Seymour, Friday)))) ::: (C)\nis_exception(is_sat(And(works(Janice, Thursday), works(Kevin, Thursday)))) ::: (D)\nis_exception(is_sat(And(works(Paul, Monday), works(Paul, Friday)))) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—Fred, Gail"
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_4_21",
    "context": "Maggie's Deli is open exactly five days every week: Monday through Friday. Its staff, each of whom works on at least one day each week, consists of exactly six people—Janice, Kevin, Nan, Ophelia, Paul, and Seymour. Exactly three of them—Janice, Nan, and Paul—are supervisors. The deli's staffing is consistent with the following: Each day's staff consists of exactly two people, at least one of whom is a supervisor. Tuesday's and Wednesday's staffs both include Ophelia. Of the days Nan works each week, at least two are consecutive. Seymour does not work on any day before the first day Paul works that week. Any day on which Kevin works is the first day during the week that some other staff member works.",
    "question": "Which one of the following CANNOT be the pair of staff that works Monday?",
    "answer": "A",
    "options": [
      "A) Janice and Seymour",
      "B) Kevin and Paul",
      "C) Paul and Seymour",
      "D) Nan and Ophelia",
      "E) Janice and Nan"
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nstaff = EnumSort([Janice, Kevin, Nan, Ophelia, Paul, Seymour])\nsupervisors = EnumSort([Janice, Nan, Paul])\nworks = Function([days, staff] -> [bool])\n\n# Constraints\nForAll([d:days], Count([s:staff], works(d, s)) == 2) ::: Each day's staff consists of exactly two people\nForAll([s:staff], Count([d:days], works(d, s)) >= 1) ::: each staff works on at least one day each week\nAnd(works(Tuesday, Ophelia), works(Wednesday, Ophelia)) ::: Tuesday's and Wednesday's staffs both include Ophelia\nAnd(works(Nan, d1), works(Nan, d2), d1!= d2, d1 < d2) ::: Of the days Nan works each week, at least two are consecutive\nAnd(works(Seymour, d1), works(Paul, d2), d1 > d2) ::: Seymour does not work on any day before the first day Paul works that week\nAnd(works(Kevin, d1), works(s:staff, d2), d1 < d2) ::: Any day on which Kevin works is the first day during the week that some other staff member works\n\n# Options\nQuestion ::: Which one of the following CANNOT be the pair of staff that works Monday?\nis_exception(is_sat(works(Monday, Janice) && works(Monday, Seymour))) ::: (A)\nis_exception(is_sat(works(Monday, Kevin) && works(Monday, Paul))) ::: (B)\nis_exception(is_sat(works(Monday, Paul) && works(Monday, Seymour))) ::: (C)\nis_exception(is_sat(works(Monday, Nan) && works(Monday, Ophelia))) ::: (D)\nis_exception("
    ]
  },
  {
    "id": "ar_lsat_200510_4-G_4_22",
    "context": "Maggie's Deli is open exactly five days every week: Monday through Friday. Its staff, each of whom works on at least one day each week, consists of exactly six people—Janice, Kevin, Nan, Ophelia, Paul, and Seymour. Exactly three of them—Janice, Nan, and Paul—are supervisors. The deli's staffing is consistent with the following: Each day's staff consists of exactly two people, at least one of whom is a supervisor. Tuesday's and Wednesday's staffs both include Ophelia. Of the days Nan works each week, at least two are consecutive. Seymour does not work on any day before the first day Paul works that week. Any day on which Kevin works is the first day during the week that some other staff member works.",
    "question": "Which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Nan works Wednesday and Friday only.",
      "B) Seymour works Monday and Paul works Tuesday.",
      "C) Kevin works Monday, Wednesday, and Friday.",
      "D) Nan works Wednesday with Ophelia and Thursday with Kevin.",
      "E) Ophelia and Kevin work Tuesday."
    ],
    "raw_logic_programs": [
      "# Declarations\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nstaff = EnumSort([Janice, Kevin, Nan, Ophelia, Paul, Seymour])\nworks = Function([days, staff] -> [bool])\n\n# Constraints\nForAll([d:days], Count([s:staff], works(d, s)) == 2) ::: Each day's staff consists of exactly two people\nAnd(works(Tuesday, Ophelia), works(Wednesday, Ophelia)) ::: Tuesday's and Wednesday's staffs both include Ophelia\nAnd(works(Nan, d1), works(Nan, d2), d1!= d2, d1 < d2) ::: Of the days Nan works each week, at least two are consecutive\nAnd(works(Seymour, d), works(Paul, d1), d > d1) ::: Seymour does not work on any day before the first day Paul works that week\nAnd(works(Kevin, d), works(s:staff, d1), d1 < d, s!= Kevin) ::: Any day on which Kevin works is the first day during the week that some other staff member works\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(And(works(Nan, Wednesday), works(Nan, Friday))) ::: (A)\nis_valid(And(works(Seymour, Monday), works(Paul, Tuesday))) ::: (B)\nis_valid(And(works(Kevin, Monday), works(Kevin, Wednesday), works(Kevin, Friday))) ::: (C)\nis_valid(And(works(Nan, Wednesday), works(Nan, Thursday), works(Ophelia, Wednesday), works(Kevin, Thursday))) ::: (D)\nis_valid(And(works(Ophelia, Tuesday), works(Kevin, Tuesday))) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—Fred, Gail, Hank, Iris, Jan, and Kar"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_1_1",
    "context": "Henri has exactly five electrical appliances in his dormitory room: a hairdryer, a microwave oven, a razor, a television, and a vacuum. As a consequence of fire department regulations, Henri can use these appliances only in accordance with the following conditions: Henri cannot use both the hairdryer and the razor simultaneously. Henri cannot use both the hairdryer and the television simultaneously. When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television.",
    "question": "Which one of the following is a pair of appliances Henri could be using simultaneously?",
    "answer": "C",
    "options": [
      "A) the hairdryer and the razor",
      "B) the hairdryer and the television",
      "C) the razor and the television",
      "D) the razor and the vacuum",
      "E) the television and the vacuum"
    ],
    "raw_logic_programs": [
      "# Declarations\nappliances = EnumSort([hairdryer, microwave_oven, razor, television, vacuum])\nuses = Function([appliances] -> [bool])\n\n# Constraints\nForAll([a:appliances], Count([b:appliances], And(a!= b, uses(a), uses(b))) == 0) ::: Henri cannot use both the hairdryer and the razor simultaneously\nForAll([a:appliances], Count([b:appliances], And(a!= b, uses(a), uses(b))) == 0) ::: Henri cannot use both the hairdryer and the television simultaneously\nForAll([a:appliances], Count([b:appliances], And(a!= b, uses(a), uses(b))) == 0) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television\n\n# Options\nQuestion ::: Which one of the following is a pair of appliances Henri could be using simultaneously?\nis_valid(And(uses(hairdryer), uses(razor))) ::: A) the hairdryer and the razor\nis_valid(And(uses(hairdryer), uses(television))) ::: B) the hairdryer and the television\nis_valid(And(uses(razor), uses(television))) ::: C) the razor and the television\nis_valid(And(uses(razor), uses(vacuum))) ::: D) the razor and the vacuum\nis_valid(And(uses(television), uses(vacuum))) ::: E) the television and the vacuum\n------"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_1_2",
    "context": "Henri has exactly five electrical appliances in his dormitory room: a hairdryer, a microwave oven, a razor, a television, and a vacuum. As a consequence of fire department regulations, Henri can use these appliances only in accordance with the following conditions: Henri cannot use both the hairdryer and the razor simultaneously. Henri cannot use both the hairdryer and the television simultaneously. When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television.",
    "question": "Assume that Henri is using exactly two appliances and is not using the microwave oven. Which one of the following is a list of all the appliances, other than the microwave oven, that Henri CANNOT be using?",
    "answer": "E",
    "options": [
      "A) hairdryer",
      "B) razor",
      "C) vacuum",
      "D) hairdryer, razor",
      "E) hairdryer, vacuum"
    ],
    "raw_logic_programs": [
      "# Declarations\nappliances = EnumSort([hairdryer, microwave_oven, razor, television, vacuum])\nuses = Function([appliances] -> [bool])\n\n# Constraints\nForAll([a:appliances], Count([a:appliances], uses(a)) >= 2) ::: Henri is using exactly two appliances\nForAll([a:appliances], Implies(uses(a), Not(uses(microwave_oven)))) ::: and is not using the microwave oven\nForAll([a:appliances], Implies(uses(hairdryer), Not(uses(razor)))) ::: Henri cannot use both the hairdryer and the razor simultaneously\nForAll([a:appliances], Implies(uses(hairdryer), Not(uses(television)))) ::: Henri cannot use both the hairdryer and the television simultaneously\nForAll([a:appliances], Implies(uses(vacuum), Not(uses(hairdryer)))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television\nForAll([a:appliances], Implies(uses(vacuum), Not(uses(razor)))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television\nForAll([a:appliances], Implies(uses(vacuum), Not(uses(television)))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television\n\n# Options"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_1_3",
    "context": "Henri has exactly five electrical appliances in his dormitory room: a hairdryer, a microwave oven, a razor, a television, and a vacuum. As a consequence of fire department regulations, Henri can use these appliances only in accordance with the following conditions: Henri cannot use both the hairdryer and the razor simultaneously. Henri cannot use both the hairdryer and the television simultaneously. When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "E",
    "options": [
      "A) Henri uses the hairdryer while using the microwave oven.",
      "B) Henri uses the microwave oven while using the razor.",
      "C) Henri uses the microwave oven while using two other appliances.",
      "D) Henri uses the television while using two other appliances.",
      "E) Henri uses the vacuum while using two other appliances."
    ],
    "raw_logic_programs": [
      "# Declarations\nappliances = EnumSort([hairdryer, microwave_oven, razor, television, vacuum])\nuses = Function([appliances] -> [bool])\n\n# Constraints\nForAll([a:appliances], Count([a:appliances], uses(a)) >= 1) ::: Henri has exactly five electrical appliances\nAnd(uses(hairdryer), Not(uses(razor))) ::: Henri cannot use both the hairdryer and the razor simultaneously\nAnd(uses(hairdryer), Not(uses(television))) ::: Henri cannot use both the hairdryer and the television simultaneously\nAnd(uses(vacuum), Not(uses(hairdryer))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer\nAnd(uses(vacuum), Not(uses(razor))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the razor\nAnd(uses(vacuum), Not(uses(television))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the television\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(uses(hairdryer) && uses(microwave_oven))) ::: (A)\nis_exception(is_sat(uses(microwave_oven) && uses(razor))) ::: (B)\nis_exception(is_sat(uses(microwave_oven) && uses(vacuum) && uses(television))) ::: (C)\nis_exception(is"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_1_4",
    "context": "Henri has exactly five electrical appliances in his dormitory room: a hairdryer, a microwave oven, a razor, a television, and a vacuum. As a consequence of fire department regulations, Henri can use these appliances only in accordance with the following conditions: Henri cannot use both the hairdryer and the razor simultaneously. Henri cannot use both the hairdryer and the television simultaneously. When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television.",
    "question": "If Henri were to use exactly three appliances, then what is the total number of different groups of three appliances any one of which could be the group of appliances he is using?",
    "answer": "A",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nappliances = EnumSort([hairdryer, microwave_oven, razor, television, vacuum])\nuses = Function([appliances] -> [bool])\n\n# Constraints\nForAll([a:appliances], Count([a:appliances], uses(a)) >= 3) ::: Henri were to use exactly three appliances\nAnd(uses(hairdryer), Not(uses(razor))) ::: Henri cannot use both the hairdryer and the razor simultaneously\nAnd(uses(hairdryer), Not(uses(television))) ::: Henri cannot use both the hairdryer and the television simultaneously\nAnd(uses(vacuum), Not(uses(hairdryer)), Not(uses(razor)), Not(uses(television))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television\n\n# Options\nQuestion ::: If Henri were to use exactly three appliances, then what is the total number of different groups of three appliances any one of which could be the group of appliances he is using?\nis_sat(Count([a:appliances], And(uses(a), Count([a:appliances], uses(a)) == 3)) == 1)) ::: A) one\nis_sat(Count([a:appliances], And(uses(a), Count([a:appliances], uses(a)) == 3)) == 2)) ::: B) two\nis_sat(Count([a:appliances], And(uses(a), Count([a:appliances], uses(a)) == 3)) == 3)) :::"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_1_5",
    "context": "Henri has exactly five electrical appliances in his dormitory room: a hairdryer, a microwave oven, a razor, a television, and a vacuum. As a consequence of fire department regulations, Henri can use these appliances only in accordance with the following conditions: Henri cannot use both the hairdryer and the razor simultaneously. Henri cannot use both the hairdryer and the television simultaneously. When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television.",
    "question": "Which one of the following statements, if true, guarantees that Henri is using no more than one of the following: the hairdryer, the razor, the television?",
    "answer": "A",
    "options": [
      "A) Henri is using the hairdryer.",
      "B) Henri is using the television.",
      "C) Henri is not using the hairdryer.",
      "D) Henri is not using the microwave oven.",
      "E) Henri is not using the vacuum."
    ],
    "raw_logic_programs": [
      "# Declarations\nappliances = EnumSort([hairdryer, microwave_oven, razor, television, vacuum])\nuses = Function([appliances] -> [bool])\n\n# Constraints\nForAll([a:appliances], Count([a:appliances], uses(a)) <= 1) ::: Henri can use these appliances only in accordance with the following conditions\nAnd(uses(hairdryer), Not(uses(razor))) ::: Henri cannot use both the hairdryer and the razor simultaneously\nAnd(uses(hairdryer), Not(uses(television))) ::: Henri cannot use both the hairdryer and the television simultaneously\nAnd(uses(vacuum), Not(uses(hairdryer))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television\nAnd(uses(vacuum), Not(uses(razor))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television\nAnd(uses(vacuum), Not(uses(television))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television\n\n# Options\nQuestion ::: Which one of the following statements, if true, guarantees that Henri is using no more than one of the following: the hairdryer, the razor, the television?\nis_valid(Exists([a:appliances], uses(a) == true)) ::: A) Henri is using the hairdryer.\nis_valid(Exists([a:"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_1_6",
    "context": "Henri has exactly five electrical appliances in his dormitory room: a hairdryer, a microwave oven, a razor, a television, and a vacuum. As a consequence of fire department regulations, Henri can use these appliances only in accordance with the following conditions: Henri cannot use both the hairdryer and the razor simultaneously. Henri cannot use both the hairdryer and the television simultaneously. When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Henri uses at most three appliances simultaneously.",
      "B) Henri uses at most four appliances simultaneously.",
      "C) Henri uses at most one other appliance while using the microwave oven.",
      "D) Henri uses at most one other appliance while using the razor.",
      "E) Henri uses at least two other appliances while using the hairdryer."
    ],
    "raw_logic_programs": [
      "# Declarations\nappliances = EnumSort([hairdryer, microwave_oven, razor, television, vacuum])\nuses = Function([appliances] -> [bool])\n\n# Constraints\nForAll([a:appliances], Count([a:appliances], uses(a)) >= 1) ::: Henri has exactly five electrical appliances\nAnd(uses(hairdryer), Not(uses(razor))) ::: Henri cannot use both the hairdryer and the razor simultaneously\nAnd(uses(hairdryer), Not(uses(television))) ::: Henri cannot use both the hairdryer and the television simultaneously\nAnd(uses(vacuum), Not(uses(hairdryer))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television\nAnd(uses(vacuum), Not(uses(razor))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television\nAnd(uses(vacuum), Not(uses(television))) ::: When Henri uses the vacuum, he cannot at the same time use any of the following: the hairdryer, the razor, and the television\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(ForAll([a:appliances], Count([a:appliances], uses(a)) <= 3)) ::: (A)\nis_valid(ForAll([a:appliances], Count([a:appliances], uses(a)) <= 4)) ::: (B)\nis_valid(For"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_2_7",
    "context": "A farmer harvests eight separate fields—G, H, J, K, L, M, P, and T. Each field is harvested exactly once, and no two fields are harvested simultaneously. Once the harvesting of a field begins, no other fields are harvested until the harvesting of that field is complete. The farmer harvests the fields in an order consistent with the following conditions: Both P and G are harvested at some time before K. Both H and L are harvested at some time before J. K is harvested at some time before M but after L. T is harvested at some time before M.",
    "question": "Which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) J is the first field harvested.",
      "B) K is the second field harvested.",
      "C) M is the sixth field harvested.",
      "D) G is the seventh field harvested.",
      "E) T is the eighth field harvested."
    ],
    "raw_logic_programs": [
      "# Declarations\nfields = EnumSort([G, H, J, K, L, M, P, T])\nharvested = Function([fields] -> [int])\nForAll([f:fields], And(1 <= harvested(f), harvested(f) <= 8))\n\n# Constraints\nDistinct([f:fields], harvested(f)) ::: no two fields are harvested simultaneously\nAnd(harvested(P) < harvested(K), harvested(G) < harvested(K)) ::: Both P and G are harvested at some time before K\nAnd(harvested(H) < harvested(J), harvested(L) < harvested(J)) ::: Both H and L are harvested at some time before J\nAnd(harvested(K) < harvested(M), harvested(L) < harvested(K)) ::: K is harvested at some time before M but after L\nharvested(T) < harvested(M) ::: T is harvested at some time before M\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(harvested(J) == 1) ::: (A)\nis_valid(harvested(K) == 2) ::: (B)\nis_valid(harvested(M) == 6) ::: (C)\nis_valid(harvested(G) == 7) ::: (D)\nis_valid(harvested(T) == 8) ::: (E)\n------\nProblem:\nA company has eight employees—G, H, I, J, K, L, M, and N—who are to be"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_2_8",
    "context": "A farmer harvests eight separate fields—G, H, J, K, L, M, P, and T. Each field is harvested exactly once, and no two fields are harvested simultaneously. Once the harvesting of a field begins, no other fields are harvested until the harvesting of that field is complete. The farmer harvests the fields in an order consistent with the following conditions: Both P and G are harvested at some time before K. Both H and L are harvested at some time before J. K is harvested at some time before M but after L. T is harvested at some time before M.",
    "question": "If M is the seventh field harvested, then any one of the following could be the fifth field harvested EXCEPT:",
    "answer": "B",
    "options": [
      "A) H",
      "B) J",
      "C) K",
      "D) L",
      "E) P"
    ],
    "raw_logic_programs": [
      "# Declarations\nfields = EnumSort([G, H, J, K, L, M, P, T])\nharvested = Function([fields] -> [int])\nForAll([f:fields], And(1 <= harvested(f), harvested(f) <= 8))\n\n# Constraints\nDistinct([f:fields], harvested(f)) ::: no two fields are harvested simultaneously\nAnd(harvested(P) < harvested(K), harvested(G) < harvested(K)) ::: Both P and G are harvested at some time before K\nAnd(harvested(H) < harvested(J), harvested(L) < harvested(J)) ::: Both H and L are harvested at some time before J\nAnd(harvested(K) < harvested(M), harvested(K) > harvested(L)) ::: K is harvested at some time before M but after L\nharvested(T) < harvested(M) ::: T is harvested at some time before M\n\n# Options\nQuestion ::: If M is the seventh field harvested, then any one of the following could be the fifth field harvested EXCEPT:\nis_exception(is_sat(harvested(H) == 5)) ::: A) H\nis_exception(is_sat(harvested(J) == 5)) ::: B) J\nis_exception(is_sat(harvested(K) == 5)) ::: C) K\nis_exception(is_sat(harvested(L) == 5)) ::: D) L\nis_exception(is_sat(harvested"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_2_9",
    "context": "A farmer harvests eight separate fields—G, H, J, K, L, M, P, and T. Each field is harvested exactly once, and no two fields are harvested simultaneously. Once the harvesting of a field begins, no other fields are harvested until the harvesting of that field is complete. The farmer harvests the fields in an order consistent with the following conditions: Both P and G are harvested at some time before K. Both H and L are harvested at some time before J. K is harvested at some time before M but after L. T is harvested at some time before M.",
    "question": "Which one of the following CANNOT be the field that is harvested fifth?",
    "answer": "C",
    "options": [
      "A) G",
      "B) J",
      "C) M",
      "D) P",
      "E) T"
    ],
    "raw_logic_programs": [
      "# Declarations\nfields = EnumSort([G, H, J, K, L, M, P, T])\nharvests = Function([fields] -> [int])\nForAll([f:fields], And(1 <= harvests(f), harvests(f) <= 8))\n\n# Constraints\nDistinct([f:fields], harvests(f)) ::: no two fields are harvested simultaneously\nAnd(harvests(P) < harvests(K), harvests(G) < harvests(K)) ::: Both P and G are harvested at some time before K\nAnd(harvests(H) < harvests(J), harvests(L) < harvests(J)) ::: Both H and L are harvested at some time before J\nAnd(harvests(K) < harvests(M), harvests(L) < harvests(K)) ::: K is harvested at some time before M but after L\nharvests(T) < harvests(M) ::: T is harvested at some time before M\n\n# Options\nQuestion ::: Which one of the following CANNOT be the field that is harvested fifth?\nis_exception(is_sat(harvests(G) == 5)) ::: A) G\nis_exception(is_sat(harvests(J) == 5)) ::: B) J\nis_exception(is_sat(harvests(M) == 5)) ::: C) M\nis_exception(is_sat(harvests(P) == 5)) ::: D) P\nis_exception(is_sat(harvests(T) == 5)) ::: E)"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_2_10",
    "context": "A farmer harvests eight separate fields—G, H, J, K, L, M, P, and T. Each field is harvested exactly once, and no two fields are harvested simultaneously. Once the harvesting of a field begins, no other fields are harvested until the harvesting of that field is complete. The farmer harvests the fields in an order consistent with the following conditions: Both P and G are harvested at some time before K. Both H and L are harvested at some time before J. K is harvested at some time before M but after L. T is harvested at some time before M.",
    "question": "If J is the third field harvested, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) L is the first field harvested.",
      "B) H is the second field harvested.",
      "C) T is the fourth field harvested.",
      "D) K is the seventh field harvested.",
      "E) M is the eighth field harvested."
    ],
    "raw_logic_programs": [
      "# Declarations\nfields = EnumSort([G, H, J, K, L, M, P, T])\nharvested = Function([fields] -> [int])\nForAll([f:fields], And(1 <= harvested(f), harvested(f) <= 8))\n\n# Constraints\nDistinct([f:fields], harvested(f)) ::: no two fields are harvested simultaneously\nAnd(harvested(P) < harvested(K), harvested(G) < harvested(K)) ::: Both P and G are harvested at some time before K\nAnd(harvested(H) < harvested(J), harvested(L) < harvested(J)) ::: Both H and L are harvested at some time before J\nAnd(harvested(K) > harvested(L), harvested(K) < harvested(M)) ::: K is harvested at some time before M but after L\nharvested(T) < harvested(M) ::: T is harvested at some time before M\n\n# Options\nQuestion ::: If J is the third field harvested, then which one of the following must be true?\nis_valid(harvested(L) == 1) ::: A) L is the first field harvested.\nis_valid(harvested(H) == 2) ::: B) H is the second field harvested.\nis_valid(harvested(T) == 4) ::: C) T is the fourth field harvested.\nis_valid(harvested(K) == 7) ::: D) K is the seventh field harvested.\nis_valid(harvested("
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_2_11",
    "context": "A farmer harvests eight separate fields—G, H, J, K, L, M, P, and T. Each field is harvested exactly once, and no two fields are harvested simultaneously. Once the harvesting of a field begins, no other fields are harvested until the harvesting of that field is complete. The farmer harvests the fields in an order consistent with the following conditions: Both P and G are harvested at some time before K. Both H and L are harvested at some time before J. K is harvested at some time before M but after L. T is harvested at some time before M.",
    "question": "If H is the sixth field harvested, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) G is harvested at some time before T.",
      "B) H is harvested at some time before K.",
      "C) J is harvested at some time before M.",
      "D) K is harvested at some time before J.",
      "E) T is harvested at some time before K."
    ],
    "raw_logic_programs": [
      "# Declarations\nfields = EnumSort([G, H, J, K, L, M, P, T])\nharvested = Function([fields] -> [int])\nForAll([f:fields], And(1 <= harvested(f), harvested(f) <= 8))\n\n# Constraints\nDistinct([f:fields], harvested(f)) ::: no two fields are harvested simultaneously\nAnd(harvested(P) < harvested(K), harvested(G) < harvested(K)) ::: Both P and G are harvested at some time before K\nAnd(harvested(H) < harvested(J), harvested(L) < harvested(J)) ::: Both H and L are harvested at some time before J\nAnd(harvested(K) > harvested(L), harvested(K) < harvested(M)) ::: K is harvested at some time before M but after L\nharvested(T) < harvested(M) ::: T is harvested at some time before M\n\n# Options\nQuestion ::: If H is the sixth field harvested, then which one of the following must be true?\nis_valid(Exists([f:fields], And(harvested(G) < harvested(T), harvested(f) == 6))) ::: A) G is harvested at some time before T.\nis_valid(Exists([f:fields], And(harvested(H) < harvested(K), harvested(f) == 6))) ::: B) H is harvested at some time before K.\nis_valid(Exists([f:fields], And(harvested(J) < harvested(M), harvested(f) == 6))) ::: C) J is harvested at some time before M.\nis_valid(Exists([f:fields], And(harvested(K) < harvested(J), harvested(f) == 6))) ::: D) K is harvested at some time before J.\nis_valid(Exists([f:fields], And(harvested(T) < harvested(K), harvested(f) == 6))) ::: E) T is harvested at some time before K.\n------"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_2_12",
    "context": "A farmer harvests eight separate fields—G, H, J, K, L, M, P, and T. Each field is harvested exactly once, and no two fields are harvested simultaneously. Once the harvesting of a field begins, no other fields are harvested until the harvesting of that field is complete. The farmer harvests the fields in an order consistent with the following conditions: Both P and G are harvested at some time before K. Both H and L are harvested at some time before J. K is harvested at some time before M but after L. T is harvested at some time before M.",
    "question": "If L is the fifth field harvested, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) J is harvested at some time before G.",
      "B) J is harvested at some time before T.",
      "C) K is harvested at some time before T.",
      "D) M is harvested at some time before H.",
      "E) M is harvested at some time before J."
    ],
    "raw_logic_programs": [
      "# Declarations\nfields = EnumSort([G, H, J, K, L, M, P, T])\nharvested = Function([fields] -> [int])\nForAll([f:fields], And(1 <= harvested(f), harvested(f) <= 8))\n\n# Constraints\nDistinct([f:fields], harvested(f)) ::: no two fields are harvested simultaneously\nAnd(harvested(P) < harvested(K), harvested(G) < harvested(K)) ::: Both P and G are harvested at some time before K\nAnd(harvested(H) < harvested(J), harvested(L) < harvested(J)) ::: Both H and L are harvested at some time before J\nharvested(K) > harvested(L) ::: K is harvested at some time before M but after L\nharvested(T) > harvested(M) ::: T is harvested at some time before M\n\n# Options\nQuestion ::: If L is the fifth field harvested, then which one of the following could be true?\nis_exception(is_sat(harvested(J) < harvested(G))) ::: A) J is harvested at some time before G.\nis_exception(is_sat(harvested(J) < harvested(T))) ::: B) J is harvested at some time before T.\nis_exception(is_sat(harvested(K) < harvested(T))) ::: C) K is harvested at some time before T.\nis_exception(is_sat(harvested(M) < harvested(H))) ::: D) M is harvested at some time before H.\nis_exception(is_sat(harvested(M) < harvested(J))) ::: E) M is harvested at some time before J.\n------\nProblem:\nA company has eight employees—G, H, J, K, L, M, P, and T—who are to be assigned to four different projects—A, B, C, and D. Each employee is assigned to exactly one project, and no two employees are assigned to the same project. The assignments are made in accordance with the following conditions: Both"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_3_13",
    "context": "In a repair facility there are exactly six technicians: Stacy, Urma, Wim, Xena, Yolanda, and Zane. Each technician repairs machines of at least one of the following three types—radios, televisions, and VCRs—and no other types. The following conditions apply: Xena and exactly three other technicians repair radios. Yolanda repairs both televisions and VCRs. Stacy does not repair any type of machine that Yolanda repairs. Zane repairs more types of machines than Yolanda repairs. Wim does not repair any type of machine that Stacy repairs. Urma repairs exactly two types of machines.",
    "question": "For exactly how many of the six technicians is it possible to determine exactly which of the three types of machines each repairs?",
    "answer": "C",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\ntechnicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])\nmachines = EnumSort([radios, televisions, VCRs])\nrepairs = Function([technicians, machines] -> [bool])\n\n# Constraints\nForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1) ::: each technician repairs machines of at least one of the following three types\nAnd(repairs(Xena, radios), Count([t:technicians], And(t!= Xena, repairs(t, radios))) == 3) ::: Xena and exactly three other technicians repair radios\nAnd(repairs(Yolanda, televisions), repairs(Yolanda, VCRs)) ::: Yolanda repairs both televisions and VCRs\nForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m)))) ::: Stacy does not repair any type of machine that Yolanda repairs\nCount([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m)) ::: Zane repairs more types of machines than Yolanda repairs\nForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m)))) ::: Wim does not repair any type of machine that Stacy repairs\nCount([m:machines], repairs(Urma, m)) == 2 ::: Urma repairs exactly two types of machines\n\n# Options\nQuestion ::: For exactly how many of the six technicians is it possible to determine exactly which of the three types of machines each repairs?\nis_sat(ForAll([t:technicians], Count([m:machines], repairs(t, m)) == 1)) ::: A) one\nis_sat(ForAll([t:technicians], Count([m:machines], repairs(t, m)) == 2)) ::: B) two\nis_sat(ForAll([t:technicians], Count([m:machines], repairs(t, m)) == 3)) ::: C) three\nis_sat(ForAll(["
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_3_14",
    "context": "In a repair facility there are exactly six technicians: Stacy, Urma, Wim, Xena, Yolanda, and Zane. Each technician repairs machines of at least one of the following three types—radios, televisions, and VCRs—and no other types. The following conditions apply: Xena and exactly three other technicians repair radios. Yolanda repairs both televisions and VCRs. Stacy does not repair any type of machine that Yolanda repairs. Zane repairs more types of machines than Yolanda repairs. Wim does not repair any type of machine that Stacy repairs. Urma repairs exactly two types of machines.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Of the types of machines repaired by Stacy there is exactly one type that Urma also repairs.",
      "B) Of the types of machines repaired by Yolanda there is exactly one type that Xena also repairs.",
      "C) Of the types of machines repaired by Wim there is exactly one type that Xena also repairs.",
      "D) There is more than one type of machine that both Wim and Yolanda repair.",
      "E) There is more than one type of machine that both Urma and Wim repair."
    ],
    "raw_logic_programs": [
      "# Declarations\ntechnicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])\nmachines = EnumSort([radios, televisions, VCRs])\nrepairs = Function([technicians, machines] -> [bool])\n\n# Constraints\nForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1) ::: each technician repairs machines of at least one of the following three types\nAnd(repairs(Xena, radios), Count([t:technicians], And(t!= Xena, repairs(t, radios))) == 3) ::: Xena and exactly three other technicians repair radios\nAnd(repairs(Yolanda, televisions), repairs(Yolanda, VCRs)) ::: Yolanda repairs both televisions and VCRs\nForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m)))) ::: Stacy does not repair any type of machine that Yolanda repairs\nCount([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m)) ::: Zane repairs more types of machines than Yolanda repairs\nForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m)))) ::: Wim does not repair any type of machine that Stacy repairs\nCount([m:machines], repairs(Urma, m)) == 2 ::: Urma repairs exactly two types of machines\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([m:machines], repairs(Stacy, m) && repairs(Urma, m))) ::: A) Of the types of machines repaired by Stacy there is exactly one type that Urma also repairs.\nis_valid(Exists([m:machines], repairs(Yolanda, m) && repairs(Xena, m))) ::: B) Of the types of machines repaired by Yolanda there is exactly one type that Xena also repairs.\nis_valid(Exists([m:machines], repairs(Wim, m) && rep"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_3_15",
    "context": "In a repair facility there are exactly six technicians: Stacy, Urma, Wim, Xena, Yolanda, and Zane. Each technician repairs machines of at least one of the following three types—radios, televisions, and VCRs—and no other types. The following conditions apply: Xena and exactly three other technicians repair radios. Yolanda repairs both televisions and VCRs. Stacy does not repair any type of machine that Yolanda repairs. Zane repairs more types of machines than Yolanda repairs. Wim does not repair any type of machine that Stacy repairs. Urma repairs exactly two types of machines.",
    "question": "Which one of the following must be false?",
    "answer": "D",
    "options": [
      "A) Exactly one of the six technicians repairs exactly one type of machine.",
      "B) Exactly two of the six technicians repair exactly one type of machine each.",
      "C) Exactly three of the six technicians repair exactly one type of machine each.",
      "D) Exactly one of the six technicians repairs exactly two types of machines.",
      "E) Exactly three of the six technicians repair exactly two types of machines each."
    ],
    "raw_logic_programs": [
      "# Declarations\ntechnicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])\nmachines = EnumSort([radios, televisions, VCRs])\nrepairs = Function([technicians, machines] -> [bool])\n\n# Constraints\nForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1) ::: each technician repairs machines of at least one of the following three types\nAnd(repairs(Xena, radios), Count([t:technicians], And(t!= Xena, repairs(t, radios))) == 3) ::: Xena and exactly three other technicians repair radios\nAnd(repairs(Yolanda, televisions), repairs(Yolanda, VCRs)) ::: Yolanda repairs both televisions and VCRs\nForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m)))) ::: Stacy does not repair any type of machine that Yolanda repairs\nCount([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m)) ::: Zane repairs more types of machines than Yolanda repairs\nForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m)))) ::: Wim does not repair any type of machine that Stacy repairs\nCount([m:machines], repairs(Urma, m)) == 2 ::: Urma repairs exactly two types of machines\n\n# Options\nQuestion ::: Which one of the following must be false?\nis_valid(ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1)) ::: A) Exactly one of the six technicians repairs exactly one type of machine.\nis_valid(ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 2)) ::: B) Exactly two of the six technicians repair exactly one type of machine each.\nis_valid(ForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 3)) ::: C)"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_3_16",
    "context": "In a repair facility there are exactly six technicians: Stacy, Urma, Wim, Xena, Yolanda, and Zane. Each technician repairs machines of at least one of the following three types—radios, televisions, and VCRs—and no other types. The following conditions apply: Xena and exactly three other technicians repair radios. Yolanda repairs both televisions and VCRs. Stacy does not repair any type of machine that Yolanda repairs. Zane repairs more types of machines than Yolanda repairs. Wim does not repair any type of machine that Stacy repairs. Urma repairs exactly two types of machines.",
    "question": "Which one of the following pairs of technicians could repair all and only the same types of machines as each other?",
    "answer": "C",
    "options": [
      "A) Stacy and Urma",
      "B) Urma and Yolanda",
      "C) Urma and Xena",
      "D) Wim and Xena",
      "E) Xena and Yolanda"
    ],
    "raw_logic_programs": [
      "# Declarations\ntechnicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])\nmachines = EnumSort([radios, televisions, VCRs])\nrepairs = Function([technicians, machines] -> [bool])\n\n# Constraints\nForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1) ::: each technician repairs machines of at least one of the following three types\nAnd(repairs(Xena, radios), Count([t:technicians], And(t!= Xena, repairs(t, radios))) == 3) ::: Xena and exactly three other technicians repair radios\nAnd(repairs(Yolanda, televisions), repairs(Yolanda, VCRs)) ::: Yolanda repairs both televisions and VCRs\nForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m)))) ::: Stacy does not repair any type of machine that Yolanda repairs\nCount([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m)) ::: Zane repairs more types of machines than Yolanda repairs\nForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m)))) ::: Wim does not repair any type of machine that Stacy repairs\nCount([m:machines], repairs(Urma, m)) == 2 ::: Urma repairs exactly two types of machines\n\n# Options\nQuestion ::: ::: Which one of the following pairs of technicians could repair all and only the same types of machines as each other?\nis_sat(ForAll([m:machines], repairs(Stacy, m) == repairs(Urma, m))) ::: (A)\nis_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Yolanda, m))) ::: (B)\nis_sat(ForAll([m:machines], repairs(Urma, m) == repairs(Xena, m))) ::: (C)\nis_sat(ForAll(["
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_3_17",
    "context": "In a repair facility there are exactly six technicians: Stacy, Urma, Wim, Xena, Yolanda, and Zane. Each technician repairs machines of at least one of the following three types—radios, televisions, and VCRs—and no other types. The following conditions apply: Xena and exactly three other technicians repair radios. Yolanda repairs both televisions and VCRs. Stacy does not repair any type of machine that Yolanda repairs. Zane repairs more types of machines than Yolanda repairs. Wim does not repair any type of machine that Stacy repairs. Urma repairs exactly two types of machines.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) There is exactly one type of machine that both Urma and Wim repair.",
      "B) There is exactly one type of machine that both Urma and Xena repair.",
      "C) There is exactly one type of machine that both Urma and Yolanda repair.",
      "D) There is exactly one type of machine that both Wim and Yolanda repair.",
      "E) There is exactly one type of machine that both Xena and Yolanda repair."
    ],
    "raw_logic_programs": [
      "# Declarations\ntechnicians = EnumSort([Stacy, Urma, Wim, Xena, Yolanda, Zane])\nmachines = EnumSort([radios, televisions, VCRs])\nrepairs = Function([technicians, machines] -> [bool])\n\n# Constraints\nForAll([t:technicians], Count([m:machines], repairs(t, m)) >= 1) ::: each technician repairs machines of at least one of the following three types\nAnd(repairs(Xena, radios), Count([t:technicians], And(t!= Xena, repairs(t, radios))) == 3) ::: Xena and exactly three other technicians repair radios\nAnd(repairs(Yolanda, televisions), repairs(Yolanda, VCRs)) ::: Yolanda repairs both televisions and VCRs\nForAll([m:machines], Implies(repairs(Yolanda, m), Not(repairs(Stacy, m)))) ::: Stacy does not repair any type of machine that Yolanda repairs\nCount([m:machines], repairs(Zane, m)) > Count([m:machines], repairs(Yolanda, m)) ::: Zane repairs more types of machines than Yolanda repairs\nForAll([m:machines], Implies(repairs(Stacy, m), Not(repairs(Wim, m)))) ::: Wim does not repair any type of machine that Stacy repairs\nCount([m:machines], repairs(Urma, m)) == 2 ::: Urma repairs exactly two types of machines\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(ForAll([m:machines], Implies(repairs(Urma, m), repairs(Wim, m)) == repairs(Urma, m))) ::: A) There is exactly one type of machine that both Urma and Wim repair.\nis_valid(ForAll([m:machines], Implies(repairs(Urma, m), repairs(Xena, m)) == repairs(Urma, m))) ::: B) There is exactly one type of machine that both Urma and Xena repair.\nis_valid(ForAll([m:mach"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_4_18",
    "context": "Three folk groups—Glenside, Hilltopper, Levon—and three rock groups—Peasant, Query, Tinhead—each perform on one of two stages, north or south. Each stage has three two-hour performances: north at 6, 8, and 10; south at 8, 10, and 12. Each group performs individually and exactly once, consistent with the following conditions: Peasant performs at 6 or 12. Glenside performs at some time before Hilltopper. If any rock group performs at 10, no folk group does. Levon and Tinhead perform on different stages. Query performs immediately after a folk group, though not necessarily on the same stage.",
    "question": "Which one of the following could be a complete and accurate ordering of performances on the north stage, from first to last?",
    "answer": "A",
    "options": [
      "A) Glenside, Levon, Query",
      "B) Glenside, Query, Hilltopper",
      "C) Hilltopper, Query, Peasant",
      "D) Peasant, Levon, Tinhead",
      "E) Peasant, Query, Levon"
    ],
    "raw_logic_programs": [
      "# Declarations\ngroups = EnumSort([Glenside, Hilltopper, Levon, Peasant, Query, Tinhead])\nstages = EnumSort([north, south])\ntimes = EnumSort([6, 8, 10, 12])\nperforms = Function([groups, stages, times] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([t:times], performs(g, north, t)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([t:times], performs(g, south, t)) == 1) ::: Each group performs individually and exactly once\nForAll([t:times], Count([g:groups], performs(g, north, t)) == 1) ::: Each stage has three two-hour performances\nForAll([t:times], Count([g:groups], performs(g, south, t)) == 1) ::: Each stage has three two-hour performances\nForAll([g:groups], performs(g, north, 6) == performs(g, south, 8)) ::: north at 6, 8, and 10; south at 8, 10, and 12\nForAll([g:groups], performs(g, north, 8) == performs(g, south, 10)) ::: north at 6, 8, and 10; south at 8, 10, and 12\nForAll([g:groups], performs(g, north, 10) == performs(g, south, 12)) ::: north at 6, 8, and 10; south at 8, 10, and 12\nAnd(performs(Peasant, north, 6), performs(Peasant, south, 12)) ::: Peasant performs at 6 or 12\nAnd(performs(Glenside, north, t1), performs(Hilltopper, north, t2)) ::: Glenside performs at some time before Hilltopper\nAnd(performs(Glenside, south, t1), performs(Hilltopper, south, t2)) ::: Glenside performs at some time before Hilltopper\nAnd(performs(Glenside, north, t1), performs(Hilltopper, south,"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_4_19",
    "context": "Three folk groups—Glenside, Hilltopper, Levon—and three rock groups—Peasant, Query, Tinhead—each perform on one of two stages, north or south. Each stage has three two-hour performances: north at 6, 8, and 10; south at 8, 10, and 12. Each group performs individually and exactly once, consistent with the following conditions: Peasant performs at 6 or 12. Glenside performs at some time before Hilltopper. If any rock group performs at 10, no folk group does. Levon and Tinhead perform on different stages. Query performs immediately after a folk group, though not necessarily on the same stage.",
    "question": "Which one of the following groups must perform earlier than 10?",
    "answer": "A",
    "options": [
      "A) Glenside",
      "B) Hilltopper",
      "C) Levon",
      "D) Peasant",
      "E) Tinhead"
    ],
    "raw_logic_programs": [
      "# Declarations\ngroups = EnumSort([Glenside, Hilltopper, Levon, Peasant, Query, Tinhead])\nstages = EnumSort([north, south])\ntimes = EnumSort([6, 8, 10, 12])\nperforms = Function([groups, stages, times] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([t:times], performs(g, _, t)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([s:stages], performs(g, s, _)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([t:times], performs(g, _, t)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([s:stages], performs(g, s, _)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([t:times], performs(g, _, t)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([s:stages], performs(g, s, _)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([t:times], performs(g, _, t)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([s:stages], performs(g, s, _)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([t:times], performs(g, _, t)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([s:stages], performs(g, s, _)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([t:times], performs(g, _, t)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([s:stages], performs(g, s, _)) == 1) ::: Each group performs individually and exactly once\nForAll([g:groups], Count([t:times], performs(g, _, t)) == 1) ::: Each group performs individually and exactly once"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_4_20",
    "context": "Three folk groups—Glenside, Hilltopper, Levon—and three rock groups—Peasant, Query, Tinhead—each perform on one of two stages, north or south. Each stage has three two-hour performances: north at 6, 8, and 10; south at 8, 10, and 12. Each group performs individually and exactly once, consistent with the following conditions: Peasant performs at 6 or 12. Glenside performs at some time before Hilltopper. If any rock group performs at 10, no folk group does. Levon and Tinhead perform on different stages. Query performs immediately after a folk group, though not necessarily on the same stage.",
    "question": "Which one of the following groups could perform at 6?",
    "answer": "A",
    "options": [
      "A) Glenside",
      "B) Hilltopper",
      "C) Levon",
      "D) Query",
      "E) Tinhead"
    ],
    "raw_logic_programs": [
      "# Declarations\ngroups = EnumSort([Glenside, Hilltopper, Levon, Peasant, Query, Tinhead])\nstages = EnumSort([north, south])\ntimes = EnumSort([6, 8, 10, 12])\nperforms = Function([groups, stages, times] -> [bool])\n\n# Constraints\nForAll([g:groups], Count([t:times], performs(g, _, t)) == 1) ::: Each group performs individually and exactly once\nForAll([t:times], Count([g:groups], performs(g, _, t)) == 1) ::: Each time has exactly one performance\nForAll([g:groups], Count([s:stages], performs(g, s, _)) == 1) ::: Each group performs on exactly one stage\nForAll([s:stages], Count([g:groups], performs(g, s, _)) == 1) ::: Each stage has exactly one performance\nAnd(performs(Peasant, _, 6), performs(Peasant, _, 12)) ::: Peasant performs at 6 or 12\nAnd(performs(Glenside, _, t), performs(Hilltopper, _, t)) ::: Glenside performs at some time before Hilltopper\nAnd(performs(g:groups, _, 10), Not(performs(g:groups, _, 10))) ::: If any rock group performs at 10, no folk group does\nAnd(performs(Levon, s1, _), performs(Tinhead, s2, _)) ::: Levon and Tinhead perform on different stages\nAnd(performs(Query, _, t), performs(g:groups, _, t)) ::: Query performs immediately after a folk group, though not necessarily on the same stage\n\n# Options\nQuestion ::: Which one of the following groups could perform at 6?\nis_valid(Exists([g:groups], performs(g, _, 6))) ::: (A)\nis_valid(Exists([g:groups], performs(g, _, 6))) ::: (B)\nis_valid(Exists([g:groups], performs(g, _, 6))) ::: (C)\nis_valid(Exists([g:groups], performs(g, _, 6))) ::: (D)\nis_valid(Exists([g:"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_4_21",
    "context": "Three folk groups—Glenside, Hilltopper, Levon—and three rock groups—Peasant, Query, Tinhead—each perform on one of two stages, north or south. Each stage has three two-hour performances: north at 6, 8, and 10; south at 8, 10, and 12. Each group performs individually and exactly once, consistent with the following conditions: Peasant performs at 6 or 12. Glenside performs at some time before Hilltopper. If any rock group performs at 10, no folk group does. Levon and Tinhead perform on different stages. Query performs immediately after a folk group, though not necessarily on the same stage.",
    "question": "If Query performs at 12, then which one of the following could be an accurate ordering of the performances on the north stage, from first to last?",
    "answer": "D",
    "options": [
      "A) Glenside, Levon, Query",
      "B) Peasant, Hilltopper, Tinhead",
      "C) Peasant, Tinhead, Glenside",
      "D) Peasant, Tinhead, Hilltopper",
      "E) Peasant, Tinhead, Levon"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200512_2-G_4_22",
    "context": "Three folk groups—Glenside, Hilltopper, Levon—and three rock groups—Peasant, Query, Tinhead—each perform on one of two stages, north or south. Each stage has three two-hour performances: north at 6, 8, and 10; south at 8, 10, and 12. Each group performs individually and exactly once, consistent with the following conditions: Peasant performs at 6 or 12. Glenside performs at some time before Hilltopper. If any rock group performs at 10, no folk group does. Levon and Tinhead perform on different stages. Query performs immediately after a folk group, though not necessarily on the same stage.",
    "question": "If a rock group performs at 10, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) A folk group performs at 6.",
      "B) A folk group performs at 8.",
      "C) A folk group performs at 12.",
      "D) A rock group performs at 8.",
      "E) A rock group performs at 12."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_1_1",
    "context": "During an international film retrospective lasting six consecutive days—day 1 through day 6—exactly six different films will be shown, one each day. Twelve films will be available for presentation, two each in French, Greek, Hungarian, Italian, Norwegian, and Turkish. The presentation of the films must conform to the following conditions: Neither day 2 nor day 4 is a day on which a film in Norwegian is shown. A film in Italian is not shown unless a film in Norwegian is going to be shown the next day. A film in Greek is not shown unless a film in Italian is going to be shown the next day.",
    "question": "Which one of the following is an acceptable order of films for the retrospective, listed by their language, from day 1 through day 6?",
    "answer": "E",
    "options": [
      "A) French, Greek, Italian, Turkish, Norwegian, Hungarian",
      "B) French, Hungarian, Italian, Norwegian, French, Hungarian",
      "C) Hungarian, French, Norwegian, Greek, Norwegian, Italian",
      "D) Norwegian, Turkish, Hungarian, Italian, French, Turkish",
      "E) Turkish, French, Norwegian, Hungarian, French, Turkish"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_1_2",
    "context": "During an international film retrospective lasting six consecutive days—day 1 through day 6—exactly six different films will be shown, one each day. Twelve films will be available for presentation, two each in French, Greek, Hungarian, Italian, Norwegian, and Turkish. The presentation of the films must conform to the following conditions: Neither day 2 nor day 4 is a day on which a film in Norwegian is shown. A film in Italian is not shown unless a film in Norwegian is going to be shown the next day. A film in Greek is not shown unless a film in Italian is going to be shown the next day.",
    "question": "If two films in Italian are going to be shown, one on day 2 and one on day 5, then the film shown on day 1 could be in any one of the following languages EXCEPT:",
    "answer": "D",
    "options": [
      "A) French",
      "B) Greek",
      "C) Hungarian",
      "D) Norwegian",
      "E) Turkish"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_1_3",
    "context": "During an international film retrospective lasting six consecutive days—day 1 through day 6—exactly six different films will be shown, one each day. Twelve films will be available for presentation, two each in French, Greek, Hungarian, Italian, Norwegian, and Turkish. The presentation of the films must conform to the following conditions: Neither day 2 nor day 4 is a day on which a film in Norwegian is shown. A film in Italian is not shown unless a film in Norwegian is going to be shown the next day. A film in Greek is not shown unless a film in Italian is going to be shown the next day.",
    "question": "If two films in Italian are shown during the retrospective, which one of the following must be false?",
    "answer": "A",
    "options": [
      "A) A film in French is shown on day 3.",
      "B) A film in Greek is shown on day 1.",
      "C) A film in Hungarian is shown on day 6.",
      "D) A film in Norwegian is shown on day 5.",
      "E) A film in Turkish is shown on day 4."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_1_4",
    "context": "During an international film retrospective lasting six consecutive days—day 1 through day 6—exactly six different films will be shown, one each day. Twelve films will be available for presentation, two each in French, Greek, Hungarian, Italian, Norwegian, and Turkish. The presentation of the films must conform to the following conditions: Neither day 2 nor day 4 is a day on which a film in Norwegian is shown. A film in Italian is not shown unless a film in Norwegian is going to be shown the next day. A film in Greek is not shown unless a film in Italian is going to be shown the next day.",
    "question": "Which one of the following is a complete and accurate list of the days, any one of which is a day on which a film in Italian could be shown?",
    "answer": "B",
    "options": [
      "A) day 1, day 3, day 5",
      "B) day 2, day 4, day 5",
      "C) day 2, day 5, day 6",
      "D) day 1, day 3",
      "E) day 2, day 4"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_1_5",
    "context": "During an international film retrospective lasting six consecutive days—day 1 through day 6—exactly six different films will be shown, one each day. Twelve films will be available for presentation, two each in French, Greek, Hungarian, Italian, Norwegian, and Turkish. The presentation of the films must conform to the following conditions: Neither day 2 nor day 4 is a day on which a film in Norwegian is shown. A film in Italian is not shown unless a film in Norwegian is going to be shown the next day. A film in Greek is not shown unless a film in Italian is going to be shown the next day.",
    "question": "If two films in French are going to be shown, one on day 3 and one on day 5, which one of the following is a pair of films that could be shown on day 1 and day 6, respectively?",
    "answer": "D",
    "options": [
      "A) a film in French, a film in Turkish",
      "B) a film in Greek, a film in Hungarian",
      "C) a film in Italian, a film in Norwegian",
      "D) a film in Norwegian, a film in Turkish",
      "E) a film in Turkish, a film in Greek"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_1_6",
    "context": "During an international film retrospective lasting six consecutive days—day 1 through day 6—exactly six different films will be shown, one each day. Twelve films will be available for presentation, two each in French, Greek, Hungarian, Italian, Norwegian, and Turkish. The presentation of the films must conform to the following conditions: Neither day 2 nor day 4 is a day on which a film in Norwegian is shown. A film in Italian is not shown unless a film in Norwegian is going to be shown the next day. A film in Greek is not shown unless a film in Italian is going to be shown the next day.",
    "question": "If neither a film in French nor a film in Italian is shown during the retrospective, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) A film in Norwegian is shown on day 1.",
      "B) A film in Norwegian is shown on day 5.",
      "C) A film in Turkish is shown on day 4.",
      "D) A film in Hungarian or else a film in Norwegian is shown on day 3.",
      "E) A film in Hungarian or else a film in Turkish is shown on day 2."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_1_7",
    "context": "During an international film retrospective lasting six consecutive days—day 1 through day 6—exactly six different films will be shown, one each day. Twelve films will be available for presentation, two each in French, Greek, Hungarian, Italian, Norwegian, and Turkish. The presentation of the films must conform to the following conditions: Neither day 2 nor day 4 is a day on which a film in Norwegian is shown. A film in Italian is not shown unless a film in Norwegian is going to be shown the next day. A film in Greek is not shown unless a film in Italian is going to be shown the next day.",
    "question": "If a film in Greek is going to be shown at some time after a film in Norwegian, then a film in Norwegian must be shown on",
    "answer": "D",
    "options": [
      "A) day 1",
      "B) day 3",
      "C) day 5",
      "D) day 1 or else day 3",
      "E) day 3 or else day 5"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_2_8",
    "context": "There are exactly five pieces of mail in a mailbox: a flyer, a letter, a magazine, a postcard, and a survey. Each piece of mail is addressed to exactly one of three housemates: Georgette, Jana, or Rini. Each housemate has at least one of the pieces of mail addressed to her. The following conditions must apply: Neither the letter nor the magazine is addressed to Georgette. If the letter is addressed to Rini, then the postcard is addressed to Jana. The housemate to whom the flyer is addressed has at least one of the other pieces of mail addressed to her as well.",
    "question": "Which one of the following could be a complete and accurate matching of the pieces of mail to the housemates to whom they are addressed?",
    "answer": "B",
    "options": [
      "A) Georgette: the flyer, the survey Jana: the letter Rini: the magazine",
      "B) Georgette: the flyer, the postcard Jana: the letter, the magazine Rini: the survey",
      "C) Georgette: the magazine, the survey Jana: the flyer, the letter Rini: the postcard",
      "D) Georgette: the survey Jana: the flyer, the magazine Rini: the letter, the postcard",
      "E) Georgette: the survey Jana: the letter, the magazine, the postcard Rini: the flyer"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_2_9",
    "context": "There are exactly five pieces of mail in a mailbox: a flyer, a letter, a magazine, a postcard, and a survey. Each piece of mail is addressed to exactly one of three housemates: Georgette, Jana, or Rini. Each housemate has at least one of the pieces of mail addressed to her. The following conditions must apply: Neither the letter nor the magazine is addressed to Georgette. If the letter is addressed to Rini, then the postcard is addressed to Jana. The housemate to whom the flyer is addressed has at least one of the other pieces of mail addressed to her as well.",
    "question": "Which one of the following is a complete and accurate list of the pieces of mail, any one of which could be the only piece of mail addressed to Jana?",
    "answer": "B",
    "options": [
      "A) the postcard",
      "B) the letter, the postcard",
      "C) the letter, the survey",
      "D) the magazine, the survey",
      "E) the letter, the magazine, the postcard"
    ],
    "raw_logic_programs": [
      "# Declarations\nhousemates = EnumSort([Georgette, Jana, Rini])\nmails = EnumSort([flyer, letter, magazine, postcard, survey])\naddressed = Function([housemates, mails] -> [bool])\n\n# Constraints\nForAll([h:housemates], Count([m:mails], addressed(h, m)) >= 1) ::: Each housemate has at least one of the pieces of mail addressed to her\nNot(And(addressed(Georgette, letter), addressed(Georgette, magazine))) ::: Neither the letter nor the magazine is addressed to Georgette\nImplies(And(addressed(Rini, letter), addressed(Rini, magazine)), addressed(Jana, postcard)) ::: If the letter is addressed to Rini, then the postcard is addressed to Jana\nForAll([m:mails], Implies(addressed(h:housemates, flyer), addressed(h, m))) ::: The housemate to whom the flyer is addressed has at least one of the other pieces of mail addressed to her as well\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the pieces of mail, any one of which could be the only piece of mail addressed to Jana?\nis_sat(ForAll([m:mails], addressed(Jana, m) == addressed(Jana, postcard))) ::: (A)\nis_sat(ForAll([m:mails], addressed(Jana, m) == addressed(Jana, letter))) ::: (B)\nis_sat(ForAll([m:mails], addressed(Jana, m) == addressed(Jana, survey))) ::: (C)\nis_sat(ForAll([m:mails], addressed(Jana, m) == addressed(Jana, magazine))) ::: (D)\nis_sat(ForAll([m:mails], addressed(Jana, m) == addressed(Jana, letter))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_2_10",
    "context": "There are exactly five pieces of mail in a mailbox: a flyer, a letter, a magazine, a postcard, and a survey. Each piece of mail is addressed to exactly one of three housemates: Georgette, Jana, or Rini. Each housemate has at least one of the pieces of mail addressed to her. The following conditions must apply: Neither the letter nor the magazine is addressed to Georgette. If the letter is addressed to Rini, then the postcard is addressed to Jana. The housemate to whom the flyer is addressed has at least one of the other pieces of mail addressed to her as well.",
    "question": "Which one of the following CANNOT be a complete and accurate list of the pieces of mail addressed to Jana?",
    "answer": "E",
    "options": [
      "A) the flyer, the letter, the magazine",
      "B) the flyer, the letter, the postcard",
      "C) the flyer, the letter, the survey",
      "D) the flyer, the magazine, the postcard",
      "E) the flyer, the magazine, the survey"
    ],
    "raw_logic_programs": [
      "# Declarations\nhousemates = EnumSort([Georgette, Jana, Rini])\nmails = EnumSort([flyer, letter, magazine, postcard, survey])\naddressed = Function([housemates, mails] -> [bool])\n\n# Constraints\nForAll([h:housemates], Count([m:mails], addressed(h, m)) >= 1) ::: Each housemate has at least one of the pieces of mail addressed to her\nNot(addressed(Georgette, letter)) ::: Neither the letter nor the magazine is addressed to Georgette\nNot(addressed(Georgette, magazine)) ::: Neither the letter nor the magazine is addressed to Georgette\nImplies(addressed(Rini, letter), addressed(Jana, postcard)) ::: If the letter is addressed to Rini, then the postcard is addressed to Jana\nForAll([m:mails], Implies(addressed(h:housemates, flyer), addressed(h, m))) ::: The housemate to whom the flyer is addressed has at least one of the other pieces of mail addressed to her as well\n\n# Options\nQuestion ::: Which one of the following CANNOT be a complete and accurate list of the pieces of mail addressed to Jana?\nis_exception(is_sat(addressed(Jana, flyer) & addressed(Jana, letter) & addressed(Jana, magazine))) ::: (A)\nis_exception(is_sat(addressed(Jana, flyer) & addressed(Jana, letter) & addressed(Jana, postcard))) ::: (B)\nis_exception(is_sat(addressed(Jana, flyer) & addressed(Jana, letter) & addressed(Jana, survey))) ::: (C)\nis_exception(is_sat(addressed(Jana, flyer) & addressed(Jana, magazine) & addressed(Jana, postcard))) ::: (D)\nis_exception(is_sat(address"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_2_11",
    "context": "There are exactly five pieces of mail in a mailbox: a flyer, a letter, a magazine, a postcard, and a survey. Each piece of mail is addressed to exactly one of three housemates: Georgette, Jana, or Rini. Each housemate has at least one of the pieces of mail addressed to her. The following conditions must apply: Neither the letter nor the magazine is addressed to Georgette. If the letter is addressed to Rini, then the postcard is addressed to Jana. The housemate to whom the flyer is addressed has at least one of the other pieces of mail addressed to her as well.",
    "question": "Which one of the following CANNOT be a complete and accurate list of the pieces of mail addressed to Rini?",
    "answer": "B",
    "options": [
      "A) the magazine, the postcard",
      "B) the letter, the survey",
      "C) the letter, the magazine",
      "D) the flyer, the magazine",
      "E) the flyer, the letter"
    ],
    "raw_logic_programs": [
      "# Declarations\nhousemates = EnumSort([Georgette, Jana, Rini])\nmails = EnumSort([flyer, letter, magazine, postcard, survey])\naddressed = Function([housemates, mails] -> [bool])\n\n# Constraints\nForAll([h:housemates], Count([m:mails], addressed(h, m)) >= 1) ::: Each housemate has at least one of the pieces of mail addressed to her\nNot(And(addressed(Georgette, letter), addressed(Georgette, magazine))) ::: Neither the letter nor the magazine is addressed to Georgette\nImplies(And(addressed(Rini, letter), addressed(Rini, magazine)), addressed(Jana, postcard)) ::: If the letter is addressed to Rini, then the postcard is addressed to Jana\nForAll([m:mails], Implies(addressed(Rini, m), Count([m2:mails], addressed(Rini, m2)) > 1)) ::: The housemate to whom the flyer is addressed has at least one of the other pieces of mail addressed to her as well\n\n# Options\nQuestion ::: Which one of the following CANNOT be a complete and accurate list of the pieces of mail addressed to Rini?\nis_exception(is_sat(And(addressed(Rini, magazine), addressed(Rini, postcard)))) ::: A) the magazine, the postcard\nis_exception(is_sat(And(addressed(Rini, letter), addressed(Rini, survey)))) ::: B) the letter, the survey\nis_exception(is_sat(And(addressed(Rini, letter), addressed(Rini, magazine)))) ::: C) the letter, the magazine\nis_exception(is_sat(And(addressed(Rini, flyer), addressed(Rini, magazine)))) ::: D) the flyer, the magazine\nis_exception(is_sat(And(addressed(Rini, flyer), addressed(Rini"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_2_12",
    "context": "There are exactly five pieces of mail in a mailbox: a flyer, a letter, a magazine, a postcard, and a survey. Each piece of mail is addressed to exactly one of three housemates: Georgette, Jana, or Rini. Each housemate has at least one of the pieces of mail addressed to her. The following conditions must apply: Neither the letter nor the magazine is addressed to Georgette. If the letter is addressed to Rini, then the postcard is addressed to Jana. The housemate to whom the flyer is addressed has at least one of the other pieces of mail addressed to her as well.",
    "question": "If the magazine and the survey are both addressed to the same housemate, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) The survey is addressed to Georgette.",
      "B) The postcard is addressed to Rini.",
      "C) The magazine is addressed to Jana.",
      "D) The letter is addressed to Rini.",
      "E) The flyer is addressed to Jana."
    ],
    "raw_logic_programs": [
      "# Declarations\nhousemates = EnumSort([Georgette, Jana, Rini])\nmails = EnumSort([flyer, letter, magazine, postcard, survey])\naddressed = Function([housemates, mails] -> [bool])\n\n# Constraints\nForAll([h:housemates], Count([m:mails], addressed(h, m)) >= 1) ::: Each housemate has at least one of the pieces of mail addressed to her\nNot(And(addressed(Georgette, letter), addressed(Georgette, magazine))) ::: Neither the letter nor the magazine is addressed to Georgette\nImplies(And(addressed(Rini, letter), addressed(Rini, magazine)), addressed(Jana, postcard)) ::: If the letter is addressed to Rini, then the postcard is addressed to Jana\nForAll([m:mails], Implies(addressed(h:housemates, m), Count([m2:mails], addressed(h, m2)) > 1)) ::: The housemate to whom the flyer is addressed has at least one of the other pieces of mail addressed to her as well\n\n# Options\nQuestion ::: If the magazine and the survey are both addressed to the same housemate, then which one of the following could be true?\nis_valid(And(addressed(Georgette, survey), addressed(Georgette, magazine))) ::: (A)\nis_valid(And(addressed(Rini, postcard), addressed(Rini, magazine))) ::: (B)\nis_valid(And(addressed(Jana, magazine), addressed(Jana, survey))) ::: (C)\nis_valid(And(addressed(Rini, letter), addressed(Rini, magazine))) ::: (D)\nis_valid(And(addressed(Jana, flyer), addressed(Jana, magazine))) ::: (E)\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—is to"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_3_13",
    "context": "A summer program offers at least one of the following seven courses: geography, history, literature, mathematics, psychology, sociology, zoology. The following restrictions on the program must apply: If mathematics is offered, then either literature or sociology (but not both) is offered. If literature is offered, then geography is also offered but psychology is not. If sociology is offered, then psychology is also offered but zoology is not. If geography is offered, then both history and zoology are also offered.",
    "question": "Which one of the following could be a complete and accurate list of the courses offered by the summer program?",
    "answer": "A",
    "options": [
      "A) history, psychology",
      "B) geography, history, literature",
      "C) history, mathematics, psychology",
      "D) literature, mathematics, psychology",
      "E) history, literature, mathematics, sociology"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([geography, history, literature, mathematics, psychology, sociology, zoology])\noffered = Function([courses] -> [bool])\n\n# Constraints\nForAll([c:courses], Count([c:courses], offered(c)) >= 1) ::: A summer program offers at least one of the following seven courses\nAnd(offered(mathematics), Or(offered(literature), offered(sociology))) ::: If mathematics is offered, then either literature or sociology (but not both) is offered\nAnd(offered(literature), And(offered(geography), Not(offered(psychology)))) ::: If literature is offered, then geography is also offered but psychology is not\nAnd(offered(sociology), And(offered(psychology), Not(offered(zoology)))) ::: If sociology is offered, then psychology is also offered but zoology is not\nAnd(offered(geography), And(offered(history), offered(zoology))) ::: If geography is offered, then both history and zoology are also offered\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the courses offered by the summer program?\nis_sat(ForAll([c:courses], offered(c) == (c in [history, psychology]))) ::: A) history, psychology\nis_sat(ForAll([c:courses], offered(c) == (c in [geography, history, literature]))) ::: B) geography, history, literature\nis_sat(ForAll([c:courses], offered(c) == (c in [history, mathematics, psychology]))) ::: C) history, mathematics, psychology\nis_sat(ForAll([c:courses], offered(c) == (c in [literature, mathematics, psychology]))) ::: D) literature, mathematics, psychology\nis_sat(ForAll([c:courses], offered(c) =="
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_3_14",
    "context": "A summer program offers at least one of the following seven courses: geography, history, literature, mathematics, psychology, sociology, zoology. The following restrictions on the program must apply: If mathematics is offered, then either literature or sociology (but not both) is offered. If literature is offered, then geography is also offered but psychology is not. If sociology is offered, then psychology is also offered but zoology is not. If geography is offered, then both history and zoology are also offered.",
    "question": "If the summer program offers literature, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Sociology is offered.",
      "B) History is not offered.",
      "C) Mathematics is not offered.",
      "D) A total of two courses are offered.",
      "E) Zoology is not offered."
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([geography, history, literature, mathematics, psychology, sociology, zoology])\noffers = Function([courses] -> [bool])\n\n# Constraints\nForAll([c:courses], Count([c:courses], offers(c)) >= 1) ::: A summer program offers at least one of the following seven courses\nAnd(offers(mathematics), Or(offers(literature), offers(sociology))) ::: If mathematics is offered, then either literature or sociology (but not both) is offered\nAnd(offers(literature), And(offers(geography), Not(offers(psychology)))) ::: If literature is offered, then geography is also offered but psychology is not\nAnd(offers(sociology), And(offers(psychology), Not(offers(zoology)))) ::: If sociology is offered, then psychology is also offered but zoology is not\nAnd(offers(geography), And(offers(history), Not(offers(zoology)))) ::: If geography is offered, then both history and zoology are also offered\n\n# Options\nQuestion ::: If the summer program offers literature, then which one of the following could be true?\nis_valid(And(offers(sociology), offers(literature))) ::: A) Sociology is offered.\nis_valid(And(Not(offers(history)), offers(literature))) ::: B) History is not offered.\nis_valid(And(Not(offers(mathematics)), offers(literature))) ::: C) Mathematics is not offered.\nis_valid(And(Count([c:courses], offers(c)) == 2, offers(literature))) ::: D) A total of two courses are offered.\nis_valid(And(Not(offers(zoology)), offers(literature))) ::: E) Zoology is not offered.\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_3_15",
    "context": "A summer program offers at least one of the following seven courses: geography, history, literature, mathematics, psychology, sociology, zoology. The following restrictions on the program must apply: If mathematics is offered, then either literature or sociology (but not both) is offered. If literature is offered, then geography is also offered but psychology is not. If sociology is offered, then psychology is also offered but zoology is not. If geography is offered, then both history and zoology are also offered.",
    "question": "If history is not offered by the summer program, then which one of the following is another course that CANNOT be offered?",
    "answer": "A",
    "options": [
      "A) literature",
      "B) mathematics",
      "C) psychology",
      "D) sociology",
      "E) zoology"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([geography, history, literature, mathematics, psychology, sociology, zoology])\noffered = Function([courses] -> [bool])\n\n# Constraints\nForAll([c:courses], Count([c:courses], offered(c)) >= 1) ::: A summer program offers at least one of the following seven courses\nAnd(offered(mathematics), Or(offered(literature), offered(sociology))) ::: If mathematics is offered, then either literature or sociology (but not both) is offered\nAnd(offered(literature), And(offered(geography), Not(offered(psychology)))) ::: If literature is offered, then geography is also offered but psychology is not\nAnd(offered(sociology), And(offered(psychology), Not(offered(zoology)))) ::: If sociology is offered, then psychology is also offered but zoology is not\nAnd(offered(geography), And(offered(history), offered(zoology))) ::: If geography is offered, then both history and zoology are also offered\n\n# Options\nQuestion ::: If history is not offered by the summer program, then which one of the following is another course that CANNOT be offered?\nis_exception(is_sat(And(Not(offered(history)), offered(literature)))) ::: A)\nis_exception(is_sat(And(Not(offered(history)), offered(mathematics)))) ::: B)\nis_exception(is_sat(And(Not(offered(history)), offered(psychology)))) ::: C)\nis_exception(is_sat(And(Not(offered(history)), offered(sociology)))) ::: D)\nis_exception(is_sat(And(Not(offered(history)), offered(zoology)))) ::: E)\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_3_16",
    "context": "A summer program offers at least one of the following seven courses: geography, history, literature, mathematics, psychology, sociology, zoology. The following restrictions on the program must apply: If mathematics is offered, then either literature or sociology (but not both) is offered. If literature is offered, then geography is also offered but psychology is not. If sociology is offered, then psychology is also offered but zoology is not. If geography is offered, then both history and zoology are also offered.",
    "question": "If the summer program offers mathematics, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Literature is offered.",
      "B) Psychology is offered.",
      "C) Sociology is offered.",
      "D) At least three courses are offered.",
      "E) At most four courses are offered."
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([geography, history, literature, mathematics, psychology, sociology, zoology])\noffered = Function([courses] -> [bool])\n\n# Constraints\nForAll([c:courses], Count([c:courses], offered(c)) >= 1) ::: A summer program offers at least one of the following seven courses\nAnd(offered(mathematics), Or(offered(literature), offered(sociology))) ::: If mathematics is offered, then either literature or sociology (but not both) is offered\nAnd(offered(literature), And(offered(geography), Not(offered(psychology)))) ::: If literature is offered, then geography is also offered but psychology is not\nAnd(offered(sociology), And(offered(psychology), Not(offered(zoology)))) ::: If sociology is offered, then psychology is also offered but zoology is not\nAnd(offered(geography), And(offered(history), offered(zoology))) ::: If geography is offered, then both history and zoology are also offered\n\n# Options\nQuestion ::: If the summer program offers mathematics, then which one of the following must be true?\nis_valid(ForAll([c:courses], offered(c) == true)) ::: A) Literature is offered.\nis_valid(ForAll([c:courses], offered(c) == true)) ::: B) Psychology is offered.\nis_valid(ForAll([c:courses], offered(c) == true)) ::: C) Sociology is offered.\nis_valid(Count([c:courses], offered(c)) >= 3) ::: D) At least three courses are offered.\nis_valid(Count([c:courses], offered(c)) <= 4) ::: E) At most four courses are offered.\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The following conditions apply"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_3_17",
    "context": "A summer program offers at least one of the following seven courses: geography, history, literature, mathematics, psychology, sociology, zoology. The following restrictions on the program must apply: If mathematics is offered, then either literature or sociology (but not both) is offered. If literature is offered, then geography is also offered but psychology is not. If sociology is offered, then psychology is also offered but zoology is not. If geography is offered, then both history and zoology are also offered.",
    "question": "Which one of the following must be false of the summer program?",
    "answer": "E",
    "options": [
      "A) Both geography and psychology are offered.",
      "B) Both geography and mathematics are offered.",
      "C) Both psychology and mathematics are offered.",
      "D) Both history and mathematics are offered.",
      "E) Both geography and sociology are offered."
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([geography, history, literature, mathematics, psychology, sociology, zoology])\noffered = Function([courses] -> [bool])\n\n# Constraints\nForAll([c:courses], Count([c:courses], offered(c)) >= 1) ::: A summer program offers at least one of the following seven courses\nAnd(offered(mathematics), Or(offered(literature), offered(sociology))) ::: If mathematics is offered, then either literature or sociology (but not both) is offered\nAnd(offered(literature), And(offered(geography), Not(offered(psychology)))) ::: If literature is offered, then geography is also offered but psychology is not\nAnd(offered(sociology), And(offered(psychology), Not(offered(zoology)))) ::: If sociology is offered, then psychology is also offered but zoology is not\nAnd(offered(geography), And(offered(history), offered(zoology))) ::: If geography is offered, then both history and zoology are also offered\n\n# Options\nQuestion ::: Which one of the following must be false of the summer program?\nis_exception(is_sat(And(offered(geography), offered(psychology)))) ::: A)\nis_exception(is_sat(And(offered(geography), offered(mathematics)))) ::: B)\nis_exception(is_sat(And(offered(psychology), offered(mathematics)))) ::: C)\nis_exception(is_sat(And(offered(history), offered(mathematics)))) ::: D)\nis_exception(is_sat(And(offered(geography), offered(sociology)))) ::: E)\n------\nProblem:\nA company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_4_18",
    "context": "Exactly eight computer processor chips—F, G, H, J, K, L, M, and O—are ranked according to their speed from first (fastest) to eighth (slowest). The ranking must be consistent with the following: There are no ties. Either F or G is ranked first. M is not the slowest. H is faster than J, with exactly one chip intermediate in speed between them. K is faster than L, with exactly two chips intermediate in speed between them. O is slower than both J and L.",
    "question": "Which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) F is ranked first and M is ranked eighth.",
      "B) G is ranked fifth and O is ranked eighth.",
      "C) J is ranked third and L is ranked seventh.",
      "D) K is ranked second and H is ranked third.",
      "E) M is ranked seventh and L is ranked eighth."
    ],
    "raw_logic_programs": [
      "# Declarations\nchips = EnumSort([F, G, H, J, K, L, M, O])\nranks = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nranks_chips = Function([chips] -> [ranks])\n\n# Constraints\nForAll([c:chips], And(1 <= ranks_chips(c), ranks_chips(c) <= 8)) ::: There are no ties\nOr(ranks_chips(F) == 1, ranks_chips(G) == 1) ::: Either F or G is ranked first\nranks_chips(M)!= 8 ::: M is not the slowest\nranks_chips(H) > ranks_chips(J) ::: H is faster than J\nCount([c:chips], ranks_chips(c) > ranks_chips(J) && ranks_chips(c) < ranks_chips(H)) == 1 ::: with exactly one chip intermediate in speed between them\nranks_chips(K) > ranks_chips(L) ::: K is faster than L\nCount([c:chips], ranks_chips(c) > ranks_chips(L) && ranks_chips(c) < ranks_chips(K)) == 2 ::: with exactly two chips intermediate in speed between them\nranks_chips(O) < ranks_chips(J) ::: O is slower than both J and L\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(And(ranks_chips(F) == 1, ranks_chips(M) == 8)) ::: (A)\nis_valid(And(ranks_chips(G) == 5, ranks_chips(O) == 8)) ::: (B)\nis_valid(And(ranks_chips(J) == 3, ranks_chips(L) == 7)) ::: ("
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_4_19",
    "context": "Exactly eight computer processor chips—F, G, H, J, K, L, M, and O—are ranked according to their speed from first (fastest) to eighth (slowest). The ranking must be consistent with the following: There are no ties. Either F or G is ranked first. M is not the slowest. H is faster than J, with exactly one chip intermediate in speed between them. K is faster than L, with exactly two chips intermediate in speed between them. O is slower than both J and L.",
    "question": "H CANNOT be ranked",
    "answer": "E",
    "options": [
      "A) second",
      "B) third",
      "C) fourth",
      "D) fifth",
      "E) sixth"
    ],
    "raw_logic_programs": [
      "# Declarations\nchips = EnumSort([F, G, H, J, K, L, M, O])\nranks = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nranks_chips = Function([chips] -> [ranks])\n\n# Constraints\nForAll([c:chips], And(1 <= ranks_chips(c), ranks_chips(c) <= 8)) ::: There are no ties\nOr(ranks_chips(F) == 1, ranks_chips(G) == 1) ::: Either F or G is ranked first\nranks_chips(M)!= 8 ::: M is not the slowest\nAnd(ranks_chips(H) > ranks_chips(J), Count([c:chips], ranks_chips(c) == ranks_chips(H) - 1) == 1) ::: H is faster than J, with exactly one chip intermediate in speed between them\nAnd(ranks_chips(K) > ranks_chips(L), Count([c:chips], ranks_chips(c) == ranks_chips(K) - 2) == 2) ::: K is faster than L, with exactly two chips intermediate in speed between them\nAnd(ranks_chips(O) < ranks_chips(J), ranks_chips(O) < ranks_chips(L)) ::: O is slower than both J and L\n\n# Options\nQuestion ::: H CANNOT be ranked\nis_exception(is_sat(ranks_chips(H) == 2)) ::: A) second\nis_exception(is_sat(ranks_chips(H) == 3)) ::: B) third\nis_exception(is_sat(ranks_chips(H) == 4)) ::: C) fourth\nis_exception(is_sat(ranks_chips(H) == 5)) ::: D) fifth\nis_exception(is_sat(ranks_chips(H) == 6)) ::: E) sixth\n------"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_4_20",
    "context": "Exactly eight computer processor chips—F, G, H, J, K, L, M, and O—are ranked according to their speed from first (fastest) to eighth (slowest). The ranking must be consistent with the following: There are no ties. Either F or G is ranked first. M is not the slowest. H is faster than J, with exactly one chip intermediate in speed between them. K is faster than L, with exactly two chips intermediate in speed between them. O is slower than both J and L.",
    "question": "If O is faster than F, then which one of the following chips could be ranked second?",
    "answer": "B",
    "options": [
      "A) G",
      "B) H",
      "C) M",
      "D) J",
      "E) L"
    ],
    "raw_logic_programs": [
      "# Declarations\nchips = EnumSort([F, G, H, J, K, L, M, O])\nranks = Function([chips] -> [int])\nForAll([c:chips], And(1 <= ranks(c), ranks(c) <= 8))\n\n# Constraints\nDistinct([c:chips], ranks(c)) ::: There are no ties\nOr(ranks(F) == 1, ranks(G) == 1) ::: Either F or G is ranked first\nranks(M)!= 8 ::: M is not the slowest\nAnd(ranks(H) > ranks(J), Count([c:chips], ranks(c) > ranks(H) && ranks(c) < ranks(J)) == 1) ::: H is faster than J, with exactly one chip intermediate in speed between them\nAnd(ranks(K) > ranks(L), Count([c:chips], ranks(c) > ranks(K) && ranks(c) < ranks(L)) == 2) ::: K is faster than L, with exactly two chips intermediate in speed between them\nranks(O) < ranks(J) ::: O is slower than both J and L\n\n# Options\nQuestion ::: If O is faster than F, then which one of the following chips could be ranked second?\nis_exception(is_sat(ranks(O) < ranks(F))) ::: (A)\nis_exception(is_sat(ranks(G) == 2)) ::: (B)\nis_exception(is_sat(ranks(M) == 2)) ::: (C)\nis_exception(is_sat(ranks(J) == 2)) ::: (D)\nis_exception(is_sat(ranks(L) == 2)) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who are assigned to work on exactly six projects—P, Q, R, S, T, and U. Each employee is assigned to work on exactly one project, and each project is assigned to exactly one employee. The assignments"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_4_21",
    "context": "Exactly eight computer processor chips—F, G, H, J, K, L, M, and O—are ranked according to their speed from first (fastest) to eighth (slowest). The ranking must be consistent with the following: There are no ties. Either F or G is ranked first. M is not the slowest. H is faster than J, with exactly one chip intermediate in speed between them. K is faster than L, with exactly two chips intermediate in speed between them. O is slower than both J and L.",
    "question": "If M is faster than J, then the fastest ranking J could have is",
    "answer": "D",
    "options": [
      "A) second",
      "B) third",
      "C) fourth",
      "D) fifth",
      "E) sixth"
    ],
    "raw_logic_programs": [
      "# Declarations\nchips = EnumSort([F, G, H, J, K, L, M, O])\nranks = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nranks_chips = Function([chips] -> [ranks])\n\n# Constraints\nForAll([c:chips], And(1 <= ranks_chips(c), ranks_chips(c) <= 8)) ::: There are no ties\nOr(ranks_chips(F) == 1, ranks_chips(G) == 1) ::: Either F or G is ranked first\nranks_chips(M)!= 8 ::: M is not the slowest\nAnd(ranks_chips(H) > ranks_chips(J), Count([c:chips], ranks_chips(c) == ranks_chips(H) - 1) == 1) ::: H is faster than J, with exactly one chip intermediate in speed between them\nAnd(ranks_chips(K) > ranks_chips(L), Count([c:chips], ranks_chips(c) == ranks_chips(K) - 2) == 2) ::: K is faster than L, with exactly two chips intermediate in speed between them\nranks_chips(O) < ranks_chips(J) ::: O is slower than both J and L\n\n# Options\nQuestion ::: If M is faster than J, then the fastest ranking J could have is\nis_sat(ranks_chips(J) == 2) ::: (A)\nis_sat(ranks_chips(J) == 3) ::: (B)\nis_sat(ranks_chips(J) == 4) ::: (C)\nis_sat(ranks_chips(J) == 5) ::: (D)\nis_sat(ranks_chips(J) == 6) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who are"
    ]
  },
  {
    "id": "ar_lsat_200606_1-G_4_22",
    "context": "Exactly eight computer processor chips—F, G, H, J, K, L, M, and O—are ranked according to their speed from first (fastest) to eighth (slowest). The ranking must be consistent with the following: There are no ties. Either F or G is ranked first. M is not the slowest. H is faster than J, with exactly one chip intermediate in speed between them. K is faster than L, with exactly two chips intermediate in speed between them. O is slower than both J and L.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) J is ranked no faster than fifth.",
      "B) K is ranked no faster than third.",
      "C) L is ranked no faster than fifth.",
      "D) M is ranked no faster than third.",
      "E) O is ranked no faster than eighth."
    ],
    "raw_logic_programs": [
      "# Declarations\nchips = EnumSort([F, G, H, J, K, L, M, O])\nranks = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nranks_chips = Function([chips] -> [ranks])\n\n# Constraints\nForAll([c:chips], And(1 <= ranks_chips(c), ranks_chips(c) <= 8)) ::: There are no ties\nOr(ranks_chips(F) == 1, ranks_chips(G) == 1) ::: Either F or G is ranked first\nranks_chips(M)!= 8 ::: M is not the slowest\nranks_chips(H) > ranks_chips(J) ::: H is faster than J, with exactly one chip intermediate in speed between them\nranks_chips(K) > ranks_chips(L) ::: K is faster than L, with exactly two chips intermediate in speed between them\nranks_chips(O) < ranks_chips(J) ::: O is slower than both J and L\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(ForAll([c:chips], Implies(ranks_chips(c) == 5, ranks_chips(J) <= ranks_chips(c)))) ::: (A)\nis_valid(ForAll([c:chips], Implies(ranks_chips(c) == 3, ranks_chips(K) <= ranks_chips(c)))) ::: (B)\nis_valid(ForAll([c:chips], Implies(ranks_chips(c) == 5, ranks_chips(L) <= ranks_chips(c)))) ::: (C)\nis_valid(ForAll([c:chips], Implies(ranks_chips(c) == 3, ranks_chips(M) <= ranks_chips(c)))) ::: (D)\nis_valid(ForAll([c:chips], Implies(ranks_chips(c"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_1_1",
    "context": "At each of six consecutive stops—1, 2, 3, 4, 5, and 6—that a traveler must make in that order as part of a trip, she can choose one from among exactly four airlines—L, M, N, and O—on which to continue. Her choices must conform to the following constraints: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop. She chooses the same airline at stop 1 as she does at stop 6. She chooses the same airline at stop 2 as she does at stop 4. Whenever she chooses either L or M at a stop, she does not choose N at the next stop. At stop 5, she chooses N or O.",
    "question": "Which one of the following could be an accurate list of the airlines the traveler chooses at each stop, in order from 1 through 6?",
    "answer": "D",
    "options": [
      "A) L, M, M, L, O, L",
      "B) M, L, O, M, O, M",
      "C) M, N, O, N, O, M",
      "D) M, O, N, O, N, M",
      "E) O, M, L, M, O, N"
    ],
    "raw_logic_programs": [
      "# Declarations\nstops = EnumSort([1, 2, 3, 4, 5, 6])\nairlines = EnumSort([L, M, N, O])\nchooses = Function([stops, airlines] -> [bool])\n\n# Constraints\nForAll([s:stops], Count([a:airlines], chooses(s, a)) == 1) ::: she can choose one from among exactly four airlines\nForAll([s:stops], Implies(chooses(s, L), chooses(s + 1, M))) ::: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop\nchooses(1, L) == chooses(6, L) ::: She chooses the same airline at stop 1 as she does at stop 6\nchooses(2, L) == chooses(4, L) ::: She chooses the same airline at stop 2 as she does at stop 4\nForAll([s:stops], Implies(And(chooses(s, L), chooses(s, M)), Not(chooses(s + 1, N)))) ::: Whenever she chooses either L or M at a stop, she does not choose N at the next stop\nchooses(5, N) ::: At stop 5, she chooses N or O\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the airlines the traveler chooses at each stop, in order from 1 through 6?\nis_sat(And(chooses(1, L), chooses(2, M), chooses(3, M), chooses(4, L), chooses(5, O), chooses(6, L))) ::: A) L, M, M, L, O, L\nis_sat(And(chooses(1, M), chooses(2, L), chooses(3, O), chooses(4, M), chooses(5, O), chooses(6, M))) ::: B) M, L, O, M, O, M\nis_sat(And(chooses(1, M"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_1_2",
    "context": "At each of six consecutive stops—1, 2, 3, 4, 5, and 6—that a traveler must make in that order as part of a trip, she can choose one from among exactly four airlines—L, M, N, and O—on which to continue. Her choices must conform to the following constraints: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop. She chooses the same airline at stop 1 as she does at stop 6. She chooses the same airline at stop 2 as she does at stop 4. Whenever she chooses either L or M at a stop, she does not choose N at the next stop. At stop 5, she chooses N or O.",
    "question": "If the traveler chooses N at stop 5, which one of the following could be an accurate list of the airlines she chooses at stops 1, 2, and 3, respectively?",
    "answer": "B",
    "options": [
      "A) L, M, N",
      "B) L, O, N",
      "C) M, L, N",
      "D) M, L, O",
      "E) N, O, N"
    ],
    "raw_logic_programs": [
      "# Declarations\nstops = EnumSort([1, 2, 3, 4, 5, 6])\nairlines = EnumSort([L, M, N, O])\nchooses = Function([stops, airlines] -> [bool])\n\n# Constraints\nForAll([s:stops], Count([a:airlines], chooses(s, a)) == 1) ::: she can choose one from among exactly four airlines\nForAll([s:stops], Implies(s!= 6, And(chooses(s, a), chooses(s + 1, b)) => a!= b)) ::: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop\nchooses(1, a) == chooses(6, a) ::: She chooses the same airline at stop 1 as she does at stop 6\nchooses(2, a) == chooses(4, a) ::: She chooses the same airline at stop 2 as she does at stop 4\nForAll([s:stops], Implies(And(chooses(s, L), chooses(s, M)), Not(chooses(s + 1, N)))) ::: Whenever she chooses either L or M at a stop, she does not choose N at the next stop\nchooses(5, N) || chooses(5, O) ::: At stop 5, she chooses N or O\n\n# Options\nQuestion ::: If the traveler chooses N at stop 5, which one of the following could be an accurate list of the airlines she chooses at stops 1, 2, and 3, respectively?\nis_exception(is_sat(And(chooses(1, L), chooses(2, M), chooses(3, N)))) ::: A) L, M, N\nis_exception(is_sat(And(chooses(1, L), chooses(2, O), chooses(3, N)))) ::: B) L, O, N\nis_exception(is_sat(And(chooses(1, M), chooses(2, L), chooses("
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_1_3",
    "context": "At each of six consecutive stops—1, 2, 3, 4, 5, and 6—that a traveler must make in that order as part of a trip, she can choose one from among exactly four airlines—L, M, N, and O—on which to continue. Her choices must conform to the following constraints: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop. She chooses the same airline at stop 1 as she does at stop 6. She chooses the same airline at stop 2 as she does at stop 4. Whenever she chooses either L or M at a stop, she does not choose N at the next stop. At stop 5, she chooses N or O.",
    "question": "If the only airlines the traveler chooses for the trip are M, N, and O, and she chooses O at stop 5, then the airlines she chooses at stops 1, 2, and 3, must be, respectively,",
    "answer": "C",
    "options": [
      "A) M, O, and N",
      "B) M, N, and O",
      "C) N, M, and O",
      "D) N, O, and M",
      "E) O, M, and N"
    ],
    "raw_logic_programs": [
      "# Declarations\nstops = EnumSort([1, 2, 3, 4, 5, 6])\nairlines = EnumSort([L, M, N, O])\nchooses = Function([stops, airlines] -> [bool])\n\n# Constraints\nForAll([s:stops], Count([a:airlines], chooses(s, a)) == 1) ::: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop\nAnd(chooses(1, L), chooses(6, L)) ::: She chooses the same airline at stop 1 as she does at stop 6\nAnd(chooses(2, M), chooses(4, M)) ::: She chooses the same airline at stop 2 as she does at stop 4\nAnd(chooses(s, L), chooses(s, M), Not(chooses(s + 1, N))) ::: Whenever she chooses either L or M at a stop, she does not choose N at the next stop\nchooses(5, N) ::: At stop 5, she chooses N or O\n\n# Options\nQuestion ::: If the only airlines the traveler chooses for the trip are M, N, and O, and she chooses O at stop 5, then the airlines she chooses at stops 1, 2, and 3, must be, respectively,\nis_sat(And(chooses(1, M), chooses(2, O), chooses(3, N))) ::: (A)\nis_sat(And(chooses(1, M), chooses(2, N), chooses(3, O))) ::: (B)\nis_sat(And(chooses(1, N), chooses(2, M), chooses(3, O))) ::: (C)\nis_sat(And(chooses(1, N), chooses(2, O), chooses(3, M))) ::: (D)\nis_sat(And(chooses(1, O), chooses(2, M), chooses(3, N))) ::: (E)"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_1_4",
    "context": "At each of six consecutive stops—1, 2, 3, 4, 5, and 6—that a traveler must make in that order as part of a trip, she can choose one from among exactly four airlines—L, M, N, and O—on which to continue. Her choices must conform to the following constraints: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop. She chooses the same airline at stop 1 as she does at stop 6. She chooses the same airline at stop 2 as she does at stop 4. Whenever she chooses either L or M at a stop, she does not choose N at the next stop. At stop 5, she chooses N or O.",
    "question": "Which one of the following CANNOT be an accurate list of the airlines the traveler chooses at stops 1 and 2, respectively?",
    "answer": "E",
    "options": [
      "A) L, M",
      "B) L, O",
      "C) M, L",
      "D) M, O",
      "E) O, N"
    ],
    "raw_logic_programs": [
      "# Declarations\nstops = EnumSort([1, 2, 3, 4, 5, 6])\nairlines = EnumSort([L, M, N, O])\nchooses = Function([stops, airlines] -> [bool])\n\n# Constraints\nForAll([s:stops], Count([a:airlines], chooses(s, a)) == 1) ::: she can choose one from among exactly four airlines\nForAll([s:stops], Implies(s!= 6, And(chooses(s, a), chooses(s + 1, b)) => a!= b)) ::: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop\nchooses(1, a) == chooses(6, a) ::: She chooses the same airline at stop 1 as she does at stop 6\nchooses(2, a) == chooses(4, a) ::: She chooses the same airline at stop 2 as she does at stop 4\nForAll([s:stops], Implies(And(chooses(s, L), chooses(s, M)), Not(chooses(s + 1, N)))) ::: Whenever she chooses either L or M at a stop, she does not choose N at the next stop\nchooses(5, N) || chooses(5, O) ::: At stop 5, she chooses N or O\n\n# Options\nQuestion ::: Which one of the following CANNOT be an accurate list of the airlines the traveler chooses at stops 1 and 2, respectively?\nis_exception(is_sat(chooses(1, L) && chooses(2, M))) ::: A) L, M\nis_exception(is_sat(chooses(1, L) && chooses(2, O))) ::: B) L, O\nis_exception(is_sat(chooses(1, M) && chooses(2, L))) ::: C) M, L\nis_exception(is_sat(chooses(1, M) && chooses(2, O))) ::: D)"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_1_5",
    "context": "At each of six consecutive stops—1, 2, 3, 4, 5, and 6—that a traveler must make in that order as part of a trip, she can choose one from among exactly four airlines—L, M, N, and O—on which to continue. Her choices must conform to the following constraints: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop. She chooses the same airline at stop 1 as she does at stop 6. She chooses the same airline at stop 2 as she does at stop 4. Whenever she chooses either L or M at a stop, she does not choose N at the next stop. At stop 5, she chooses N or O.",
    "question": "If the traveler chooses O at stop 2, which one of the following could be an accurate list of the airlines she chooses at stops 5 and 6, respectively?",
    "answer": "B",
    "options": [
      "A) M, N",
      "B) N, L",
      "C) N, O",
      "D) O, L",
      "E) O, N"
    ],
    "raw_logic_programs": [
      "# Declarations\nstops = EnumSort([1, 2, 3, 4, 5, 6])\nairlines = EnumSort([L, M, N, O])\nchooses = Function([stops, airlines] -> [bool])\n\n# Constraints\nForAll([s:stops], Count([a:airlines], chooses(s, a)) == 1) ::: she can choose one from among exactly four airlines\nForAll([s:stops], Implies(chooses(s, L), Not(chooses(s + 1, N)))) ::: Whenever she chooses either L or M at a stop, she does not choose N at the next stop\nForAll([s:stops], Implies(chooses(s, M), Not(chooses(s + 1, N)))) ::: Whenever she chooses either L or M at a stop, she does not choose N at the next stop\nForAll([s:stops], Implies(chooses(s, L), Not(chooses(s + 1, M)))) ::: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop\nForAll([s:stops], Implies(chooses(s, M), Not(chooses(s + 1, L)))) ::: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop\nForAll([s:stops], Implies(chooses(s, N), Not(chooses(s + 1, L)))) ::: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop\nForAll([s:stops], Implies(chooses(s, N), Not(chooses(s + 1, M)))) ::: Whichever airline she chooses at a stop, she chooses one of the other airlines at the next stop\nForAll([s:stops], Implies(chooses(s, O), Not(chooses(s + 1, L)))) ::: Whichever airline she chooses at a stop, she chooses one of the other airlines at"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_2_6",
    "context": "The members of a five-person committee will be selected from among three parents—F, G, and H—three students—K, L, and M—and four teachers—U, W, X, and Z. The selection of committee members will meet the following conditions: The committee must include exactly one student. F and H cannot both be selected. M and Z cannot both be selected. U and W cannot both be selected. F cannot be selected unless Z is also selected. W cannot be selected unless H is also selected.",
    "question": "Which one of the following is an acceptable selection of committee members?",
    "answer": "E",
    "options": [
      "A) F, G, K, L, Z",
      "B) F, G, K, U, X",
      "C) G, K, W, X, Z",
      "D) H, K, U, W, X",
      "E) H, L, W, X, Z"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([F, G, H, K, L, M, U, W, X, Z])\ncommittee = Function([people] -> [people])\nForAll([p:people], And(1 <= committee(p), committee(p) <= 5))\n\n# Constraints\nCount([p:people], committee(p) == p) == 5 ::: The committee must include exactly one student\nAnd(committee(F), committee(H)) == false ::: F and H cannot both be selected\nAnd(committee(M), committee(Z)) == false ::: M and Z cannot both be selected\nAnd(committee(U), committee(W)) == false ::: U and W cannot both be selected\nImplies(committee(F), committee(Z)) ::: F cannot be selected unless Z is also selected\nImplies(committee(W), committee(H)) ::: W cannot be selected unless H is also selected\n\n# Options\nQuestion ::: Which one of the following is an acceptable selection of committee members?\nis_sat(committee(F) && committee(G) && committee(K) && committee(L) && committee(Z)) ::: A) F, G, K, L, Z\nis_sat(committee(F) && committee(G) && committee(K) && committee(U) && committee(X)) ::: B) F, G, K, U, X\nis_sat(committee(G) && committee(K) && committee(W) && committee(X) && committee(Z)) ::: C) G, K, W, X, Z\nis_sat(committee(H) && committee(K) && committee(U) && committee(W) && committee(X)) ::: D) H, K, U, W, X\nis_sat(committee(H) && committee(L) && committee(W) && committee(X) && committee(Z)) ::: E) H, L, W, X, Z\n------\nProblem:\nA group of six people—F, G, H, I, J, and K—will be divided into two teams of three people each. Each team will consist of exactly one person from each"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_2_7",
    "context": "The members of a five-person committee will be selected from among three parents—F, G, and H—three students—K, L, and M—and four teachers—U, W, X, and Z. The selection of committee members will meet the following conditions: The committee must include exactly one student. F and H cannot both be selected. M and Z cannot both be selected. U and W cannot both be selected. F cannot be selected unless Z is also selected. W cannot be selected unless H is also selected.",
    "question": "If W and Z are selected, which one of the following is a pair of people who could also be selected?",
    "answer": "D",
    "options": [
      "A) U and X",
      "B) K and L",
      "C) G and M",
      "D) G and K",
      "E) F and G"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([F, G, H, K, L, M, U, W, X, Z])\ncommittee = Function([people] -> [bool])\n\n# Constraints\nForAll([p:people], Count([c:committee], committee(c) == p) <= 1) ::: The committee must include exactly one student\nAnd(committee(F), Not(committee(H))) ::: F and H cannot both be selected\nAnd(committee(M), Not(committee(Z))) ::: M and Z cannot both be selected\nAnd(committee(U), Not(committee(W))) ::: U and W cannot both be selected\nAnd(committee(F), committee(Z)) ::: F cannot be selected unless Z is also selected\nAnd(committee(W), committee(H)) ::: W cannot be selected unless H is also selected\n\n# Options\nQuestion ::: If W and Z are selected, which one of the following is a pair of people who could also be selected?\nis_sat(And(committee(U), committee(X))) ::: (A)\nis_sat(And(committee(K), committee(L))) ::: (B)\nis_sat(And(committee(G), committee(M))) ::: (C)\nis_sat(And(committee(G), committee(K))) ::: (D)\nis_sat(And(committee(F), committee(G))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_2_8",
    "context": "The members of a five-person committee will be selected from among three parents—F, G, and H—three students—K, L, and M—and four teachers—U, W, X, and Z. The selection of committee members will meet the following conditions: The committee must include exactly one student. F and H cannot both be selected. M and Z cannot both be selected. U and W cannot both be selected. F cannot be selected unless Z is also selected. W cannot be selected unless H is also selected.",
    "question": "Which one of the following is a pair of people who CANNOT both be selected?",
    "answer": "B",
    "options": [
      "A) F and G",
      "B) F and M",
      "C) G and K",
      "D) H and L",
      "E) M and U"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([F, G, H, K, L, M, U, W, X, Z])\ncommittee = Function([people] -> [bool])\nForAll([p:people], And(0 <= committee(p), committee(p) <= 1))\n\n# Constraints\nCount([p:people], committee(p)) == 5 ::: The committee must include exactly one student\nCount([p:people], committee(p)) == 1 ::: The committee must include exactly one student\nForAll([p:people], Implies(committee(F), Not(committee(H)))) ::: F and H cannot both be selected\nForAll([p:people], Implies(committee(M), Not(committee(Z)))) ::: M and Z cannot both be selected\nForAll([p:people], Implies(committee(U), Not(committee(W)))) ::: U and W cannot both be selected\nForAll([p:people], Implies(committee(F), committee(Z))) ::: F cannot be selected unless Z is also selected\nForAll([p:people], Implies(committee(W), committee(H))) ::: W cannot be selected unless H is also selected\n\n# Options\nQuestion ::: Which one of the following is a pair of people who CANNOT both be selected?\nis_exception(is_sat(committee(F) && committee(G))) ::: (A)\nis_exception(is_sat(committee(F) && committee"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_2_9",
    "context": "The members of a five-person committee will be selected from among three parents—F, G, and H—three students—K, L, and M—and four teachers—U, W, X, and Z. The selection of committee members will meet the following conditions: The committee must include exactly one student. F and H cannot both be selected. M and Z cannot both be selected. U and W cannot both be selected. F cannot be selected unless Z is also selected. W cannot be selected unless H is also selected.",
    "question": "If W is selected, then any one of the following could also be selected EXCEPT:",
    "answer": "A",
    "options": [
      "A) F",
      "B) G",
      "C) L",
      "D) M",
      "E) Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nmembers = EnumSort([F, G, H, K, L, M, U, W, X, Z])\ncommittee = Function([members] -> [bool])\nForAll([m:members], And(0 <= committee(m), committee(m) <= 1))\n\n# Constraints\nCount([m:members], committee(m)) == 5 ::: The members of a five-person committee will be selected from among three parents—F, G, and H—three students—K, L, and M—and four teachers—U, W, X, and Z\nCount([m:members], committee(m) == 1) == 1 ::: The committee must include exactly one student\nAnd(committee(F), committee(H)) == 0 ::: F and H cannot both be selected\nAnd(committee(M), committee(Z)) == 0 ::: M and Z cannot both be selected\nAnd(committee(U), committee(W)) == 0 ::: U and W cannot both be selected\nImplies(committee(F), committee(Z)) ::: F cannot be selected unless Z is also selected\nImplies(committee(W), committee(H)) ::: W cannot be selected unless H is also selected\n\n# Options\nQuestion ::: If W is selected, then any one of the following could also be selected EXCEPT:\nis_exception(is_sat(committee(F))) ::: (A)\nis_exception(is_sat(committee(G))) :::"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_2_10",
    "context": "The members of a five-person committee will be selected from among three parents—F, G, and H—three students—K, L, and M—and four teachers—U, W, X, and Z. The selection of committee members will meet the following conditions: The committee must include exactly one student. F and H cannot both be selected. M and Z cannot both be selected. U and W cannot both be selected. F cannot be selected unless Z is also selected. W cannot be selected unless H is also selected.",
    "question": "If the committee is to include exactly one parent, which one of the following is a person who must also be selected?",
    "answer": "E",
    "options": [
      "A) K",
      "B) L",
      "C) M",
      "D) U",
      "E) X"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([F, G, H, K, L, M, U, W, X, Z])\ncommittee = Function([people] -> [bool])\n\n# Constraints\nForAll([p:people], Count([c:committee], committee(c) == p) <= 1) ::: The committee must include exactly one student\nAnd(committee(F), Not(committee(H))) ::: F and H cannot both be selected\nAnd(committee(M), Not(committee(Z))) ::: M and Z cannot both be selected\nAnd(committee(U), Not(committee(W))) ::: U and W cannot both be selected\nAnd(committee(F), committee(Z)) ::: F cannot be selected unless Z is also selected\nAnd(committee(W), committee(H)) ::: W cannot be selected unless H is also selected\n\n# Options\nQuestion ::: If the committee is to include exactly one parent, which one of the following is a person who must also be selected?\nis_sat(ForAll([c:committee], committee(c) == K)) ::: (A)\nis_sat(ForAll([c:committee], committee(c) == L)) ::: (B)\nis_sat(ForAll([c:committee], committee(c) == M)) ::: (C)\nis_sat(ForAll([c:committee], committee(c) == U)) ::: (D)\nis_sat(For"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_2_11",
    "context": "The members of a five-person committee will be selected from among three parents—F, G, and H—three students—K, L, and M—and four teachers—U, W, X, and Z. The selection of committee members will meet the following conditions: The committee must include exactly one student. F and H cannot both be selected. M and Z cannot both be selected. U and W cannot both be selected. F cannot be selected unless Z is also selected. W cannot be selected unless H is also selected.",
    "question": "If M is selected, then the committee must also include both",
    "answer": "B",
    "options": [
      "A) F and G",
      "B) G and H",
      "C) H and K",
      "D) K and U",
      "E) U and X"
    ],
    "raw_logic_programs": [
      "# Declarations\nmembers = EnumSort([F, G, H, K, L, M, U, W, X, Z])\ncommittee = Function([members] -> [bool])\nForAll([m:members], And(0 <= committee(m), committee(m) <= 1))\n\n# Constraints\nCount([m:members], committee(m)) == 5 ::: The committee must include exactly one student\nAnd(committee(F), committee(H)) == 0 ::: F and H cannot both be selected\nAnd(committee(M), committee(Z)) == 0 ::: M and Z cannot both be selected\nAnd(committee(U), committee(W)) == 0 ::: U and W cannot both be selected\nImplies(committee(F), committee(Z)) ::: F cannot be selected unless Z is also selected\nImplies(committee(W), committee(H)) ::: W cannot be selected unless H is also selected\n\n# Options\nQuestion ::: If M is selected, then the committee must also include both\nis_sat(And(committee(F), committee(G))) ::: (A)\nis_sat(And(committee(G), committee(H))) ::: (B)\nis_sat(And(committee(H), committee(K))) ::: (C)\nis_sat(And(committee(K), committee(U))) ::: (D)\nis_sat(And(committee(U), committee(X))) ::: (E"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_3_12",
    "context": "Within a five-year period from 1991 to 1995, each of three friends—Ramon, Sue, and Taylor—graduated. In that period, each bought his or her first car. The graduations and car purchases must be consistent with the following: Ramon graduated in some year before the year in which Taylor graduated. Taylor graduated in some year before the year in which he bought his first car. Sue bought her first car in some year before the year in which she graduated. Ramon and Sue graduated in the same year as each other. At least one of the friends graduated in 1993.",
    "question": "Which one of the following could be an accurate matching of each friend and the year in which she or he graduated?",
    "answer": "B",
    "options": [
      "A) Ramon: 1991; Sue: 1991; Taylor: 1993",
      "B) Ramon: 1992; Sue: 1992; Taylor: 1993",
      "C) Ramon: 1992; Sue: 1993; Taylor: 1994",
      "D) Ramon: 1993; Sue: 1993; Taylor: 1992",
      "E) Ramon: 1993; Sue: 1993; Taylor: 1995"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Ramon, Sue, Taylor])\nyears = EnumSort([1991, 1992, 1993, 1994, 1995])\ngraduated = Function([people, years] -> [bool])\nbought = Function([people, years] -> [bool])\n\n# Constraints\nForAll([p:people], Count([y:years], graduated(p, y)) == 1) ::: each graduated in some year\nForAll([p:people], Count([y:years], bought(p, y)) == 1) ::: each bought his or her first car in some year\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated("
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_3_13",
    "context": "Within a five-year period from 1991 to 1995, each of three friends—Ramon, Sue, and Taylor—graduated. In that period, each bought his or her first car. The graduations and car purchases must be consistent with the following: Ramon graduated in some year before the year in which Taylor graduated. Taylor graduated in some year before the year in which he bought his first car. Sue bought her first car in some year before the year in which she graduated. Ramon and Sue graduated in the same year as each other. At least one of the friends graduated in 1993.",
    "question": "Which one of the following could have taken place in 1995?",
    "answer": "B",
    "options": [
      "A) Ramon graduated.",
      "B) Ramon bought his first car.",
      "C) Sue graduated.",
      "D) Sue bought her first car.",
      "E) Taylor graduated."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Ramon, Sue, Taylor])\nyears = EnumSort([1991, 1992, 1993, 1994, 1995])\ngraduated = Function([people, years] -> [bool])\nbought_car = Function([people, years] -> [bool])\n\n# Constraints\nForAll([p:people], Count([y:years], graduated(p, y)) == 1) ::: each graduated in some year\nForAll([p:people], Count([y:years], bought_car(p, y)) == 1) ::: each bought his or her first car in some year\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon,"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_3_14",
    "context": "Within a five-year period from 1991 to 1995, each of three friends—Ramon, Sue, and Taylor—graduated. In that period, each bought his or her first car. The graduations and car purchases must be consistent with the following: Ramon graduated in some year before the year in which Taylor graduated. Taylor graduated in some year before the year in which he bought his first car. Sue bought her first car in some year before the year in which she graduated. Ramon and Sue graduated in the same year as each other. At least one of the friends graduated in 1993.",
    "question": "Which one of the following must be false?",
    "answer": "C",
    "options": [
      "A) Two of the friends each bought his or her first car in 1991.",
      "B) Two of the friends each bought his or her first car in 1992.",
      "C) Two of the friends each bought his or her first car in 1993.",
      "D) Two of the friends each bought his or her first car in 1994.",
      "E) Two of the friends each bought his or her first car in 1995."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Ramon, Sue, Taylor])\nyears = EnumSort([1991, 1992, 1993, 1994, 1995])\ngraduated = Function([people, years] -> [bool])\nbought = Function([people, years] -> [bool])\n\n# Constraints\nForAll([p:people], Count([y:years], graduated(p, y)) == 1) ::: each graduated in some year\nForAll([p:people], Count([y:years], bought(p, y)) == 1) ::: each bought his or her first car in some year\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated("
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_3_15",
    "context": "Within a five-year period from 1991 to 1995, each of three friends—Ramon, Sue, and Taylor—graduated. In that period, each bought his or her first car. The graduations and car purchases must be consistent with the following: Ramon graduated in some year before the year in which Taylor graduated. Taylor graduated in some year before the year in which he bought his first car. Sue bought her first car in some year before the year in which she graduated. Ramon and Sue graduated in the same year as each other. At least one of the friends graduated in 1993.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) None of the three friends graduated in 1991.",
      "B) None of the three friends graduated in 1992.",
      "C) None of the three friends bought his or her first car in 1993.",
      "D) None of the three friends graduated in 1994.",
      "E) None of the three friends bought his or her first car in 1995."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Ramon, Sue, Taylor])\nyears = EnumSort([1991, 1992, 1993, 1994, 1995])\ngraduated = Function([people, years] -> [bool])\nbought = Function([people, years] -> [bool])\n\n# Constraints\nForAll([p:people], Count([y:years], graduated(p, y)) == 1) ::: each graduated in some year\nForAll([p:people], Count([y:years], bought(p, y)) == 1) ::: each bought his or her first car in some year\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon graduated in some year before the year in which Taylor graduated\nAnd(graduated(Taylor, y), bought(Taylor, y)) ::: Taylor graduated in some year before the year in which he bought his first car\nAnd(bought(Sue, y), graduated(Sue, y)) ::: Sue bought her first car in some year before the year in which she graduated\nAnd(graduated(Ramon, y), graduated(Sue, y)) ::: Ramon and Sue graduated in the same year as each other\nExists([y:years], graduated(y)) ::: At least one of the friends graduated in 1993\n\n# Options\nQuestion ::: Which one of the following must be true?"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_3_16",
    "context": "Within a five-year period from 1991 to 1995, each of three friends—Ramon, Sue, and Taylor—graduated. In that period, each bought his or her first car. The graduations and car purchases must be consistent with the following: Ramon graduated in some year before the year in which Taylor graduated. Taylor graduated in some year before the year in which he bought his first car. Sue bought her first car in some year before the year in which she graduated. Ramon and Sue graduated in the same year as each other. At least one of the friends graduated in 1993.",
    "question": "If Taylor graduated in the same year that Ramon bought his first car, then each of the following could be true EXCEPT:",
    "answer": "E",
    "options": [
      "A) Sue bought her first car in 1991.",
      "B) Ramon graduated in 1992.",
      "C) Taylor graduated in 1993.",
      "D) Taylor bought his first car in 1994.",
      "E) Ramon bought his first car in 1995."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Ramon, Sue, Taylor])\nyears = EnumSort([1991, 1992, 1993, 1994, 1995])\ngraduated = Function([people, years] -> [bool])\nbought = Function([people, years] -> [bool])\n\n# Constraints\nForAll([p:people], Count([y:years], graduated(p, y)) == 1) ::: each graduated in some year\nForAll([p:people], Count([y:years], bought(p, y)) == 1) ::: each bought his or her first car in some year\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated(Taylor, y)) ::: Ramon and Sue graduated in the same year as each other\nAnd(graduated(Ramon, y), graduated("
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_3_17",
    "context": "Within a five-year period from 1991 to 1995, each of three friends—Ramon, Sue, and Taylor—graduated. In that period, each bought his or her first car. The graduations and car purchases must be consistent with the following: Ramon graduated in some year before the year in which Taylor graduated. Taylor graduated in some year before the year in which he bought his first car. Sue bought her first car in some year before the year in which she graduated. Ramon and Sue graduated in the same year as each other. At least one of the friends graduated in 1993.",
    "question": "If Sue graduated in 1993, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Sue bought her first car in 1991.",
      "B) Ramon bought his first car in 1992.",
      "C) Ramon bought his first car in 1993.",
      "D) Taylor bought his first car in 1994.",
      "E) Taylor bought his first car in 1995."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_4_18",
    "context": "A child eating alphabet soup notices that the only letters left in her bowl are one each of these six letters: T, U, W, X, Y, and Z. She plays a game with the remaining letters, eating them in the next three spoonfuls in accord with certain rules. Each of the six letters must be in exactly one of the next three spoonfuls, and each of the spoonfuls must have at least one and at most three of the letters. In addition, she obeys the following restrictions: The U is in a later spoonful than the T. The U is not in a later spoonful than the X. The Y is in a later spoonful than the W. The U is in the same spoonful as either the Y or the Z, but not both.",
    "question": "Which one of the following could be an accurate list of the spoonfuls and the letters in each of them?",
    "answer": "B",
    "options": [
      "A) first: Y second: T, W third: U, X, Z",
      "B) first: T, W second: U, X, Y third: Z",
      "C) first: T second: U, Z third: W, X, Y",
      "D) first: T, U, Z second: W third: X, Y",
      "E) first: W second: T, X, Z third: U, Y"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_4_19",
    "context": "A child eating alphabet soup notices that the only letters left in her bowl are one each of these six letters: T, U, W, X, Y, and Z. She plays a game with the remaining letters, eating them in the next three spoonfuls in accord with certain rules. Each of the six letters must be in exactly one of the next three spoonfuls, and each of the spoonfuls must have at least one and at most three of the letters. In addition, she obeys the following restrictions: The U is in a later spoonful than the T. The U is not in a later spoonful than the X. The Y is in a later spoonful than the W. The U is in the same spoonful as either the Y or the Z, but not both.",
    "question": "If the Y is the only letter in one of the spoonfuls, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) The Y is in the first spoonful.",
      "B) The Z is in the first spoonful.",
      "C) The T is in the second spoonful.",
      "D) The X is in the second spoonful.",
      "E) The W is in the third spoonful."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_4_20",
    "context": "A child eating alphabet soup notices that the only letters left in her bowl are one each of these six letters: T, U, W, X, Y, and Z. She plays a game with the remaining letters, eating them in the next three spoonfuls in accord with certain rules. Each of the six letters must be in exactly one of the next three spoonfuls, and each of the spoonfuls must have at least one and at most three of the letters. In addition, she obeys the following restrictions: The U is in a later spoonful than the T. The U is not in a later spoonful than the X. The Y is in a later spoonful than the W. The U is in the same spoonful as either the Y or the Z, but not both.",
    "question": "If the Z is in the first spoonful, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The T is in the second spoonful.",
      "B) The U is in the third spoonful.",
      "C) The W is in the first spoonful.",
      "D) The W is in the second spoonful.",
      "E) The X is in the third spoonful."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_4_21",
    "context": "A child eating alphabet soup notices that the only letters left in her bowl are one each of these six letters: T, U, W, X, Y, and Z. She plays a game with the remaining letters, eating them in the next three spoonfuls in accord with certain rules. Each of the six letters must be in exactly one of the next three spoonfuls, and each of the spoonfuls must have at least one and at most three of the letters. In addition, she obeys the following restrictions: The U is in a later spoonful than the T. The U is not in a later spoonful than the X. The Y is in a later spoonful than the W. The U is in the same spoonful as either the Y or the Z, but not both.",
    "question": "Which one of the following is a complete list of letters, any one of which could be the only letter in the first spoonful?",
    "answer": "D",
    "options": [
      "A) T",
      "B) T, W",
      "C) T, X",
      "D) T, W, Z",
      "E) T, X, W, Z"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200609_3-G_4_22",
    "context": "A child eating alphabet soup notices that the only letters left in her bowl are one each of these six letters: T, U, W, X, Y, and Z. She plays a game with the remaining letters, eating them in the next three spoonfuls in accord with certain rules. Each of the six letters must be in exactly one of the next three spoonfuls, and each of the spoonfuls must have at least one and at most three of the letters. In addition, she obeys the following restrictions: The U is in a later spoonful than the T. The U is not in a later spoonful than the X. The Y is in a later spoonful than the W. The U is in the same spoonful as either the Y or the Z, but not both.",
    "question": "If the T is in the second spoonful, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Exactly two letters are in the first spoonful.",
      "B) Exactly three letters are in the first spoonful.",
      "C) Exactly three letters are in the second spoonful.",
      "D) Exactly one letter is in the third spoonful.",
      "E) Exactly two letters are in the third spoonful."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_1_1",
    "context": "A clown will select a costume consisting of two pieces and no others: a jacket and overalls. One piece of the costume will be entirely one color, and the other piece will be plaid. Selection is subject to the following restrictions: If the jacket is plaid, then there must be exactly three colors in it. If the overalls are plaid, then there must be exactly two colors in them. The jacket and overalls must have exactly one color in common. Green, red, and violet are the only colors that can be in the jacket. Red, violet, and yellow are the only colors that can be in the overalls.",
    "question": "Which one of the following could be a complete and accurate list of the colors in the costume? Jacket Overalls",
    "answer": "D",
    "options": [
      "A) red red",
      "B) red violet, yellow",
      "C) violet green, violet",
      "D) violet red, violet",
      "E) violet red, violet, yellow"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_1_2",
    "context": "A clown will select a costume consisting of two pieces and no others: a jacket and overalls. One piece of the costume will be entirely one color, and the other piece will be plaid. Selection is subject to the following restrictions: If the jacket is plaid, then there must be exactly three colors in it. If the overalls are plaid, then there must be exactly two colors in them. The jacket and overalls must have exactly one color in common. Green, red, and violet are the only colors that can be in the jacket. Red, violet, and yellow are the only colors that can be in the overalls.",
    "question": "If there are exactly two colors in the costume, then which one of the following must be false?",
    "answer": "A",
    "options": [
      "A) At least part of the jacket is green.",
      "B) At least part of the jacket is red.",
      "C) The overalls are red and violet.",
      "D) The overalls are red and yellow.",
      "E) The overalls are violet and yellow."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_1_3",
    "context": "A clown will select a costume consisting of two pieces and no others: a jacket and overalls. One piece of the costume will be entirely one color, and the other piece will be plaid. Selection is subject to the following restrictions: If the jacket is plaid, then there must be exactly three colors in it. If the overalls are plaid, then there must be exactly two colors in them. The jacket and overalls must have exactly one color in common. Green, red, and violet are the only colors that can be in the jacket. Red, violet, and yellow are the only colors that can be in the overalls.",
    "question": "If at least part of the jacket is green, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) The overalls are plaid.",
      "B) No part of the jacket is red.",
      "C) No part of the jacket is violet.",
      "D) At least part of the overalls are yellow.",
      "E) At least part of the overalls are violet."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_1_4",
    "context": "A clown will select a costume consisting of two pieces and no others: a jacket and overalls. One piece of the costume will be entirely one color, and the other piece will be plaid. Selection is subject to the following restrictions: If the jacket is plaid, then there must be exactly three colors in it. If the overalls are plaid, then there must be exactly two colors in them. The jacket and overalls must have exactly one color in common. Green, red, and violet are the only colors that can be in the jacket. Red, violet, and yellow are the only colors that can be in the overalls.",
    "question": "Which one of the following must be false?",
    "answer": "C",
    "options": [
      "A) Both green and red are colors used in the costume.",
      "B) Both green and violet are colors used in the costume.",
      "C) Both green and yellow are colors used in the costume.",
      "D) Both red and violet are colors used in the costume.",
      "E) Both violet and yellow are colors used in the costume."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_1_5",
    "context": "A clown will select a costume consisting of two pieces and no others: a jacket and overalls. One piece of the costume will be entirely one color, and the other piece will be plaid. Selection is subject to the following restrictions: If the jacket is plaid, then there must be exactly three colors in it. If the overalls are plaid, then there must be exactly two colors in them. The jacket and overalls must have exactly one color in common. Green, red, and violet are the only colors that can be in the jacket. Red, violet, and yellow are the only colors that can be in the overalls.",
    "question": "If there are exactly three colors in the costume, the overalls must be",
    "answer": "E",
    "options": [
      "A) entirely red or else red and violet plaid",
      "B) entirely yellow or else violet and yellow plaid",
      "C) entirely violet or else red and violet plaid",
      "D) entirely red or else entirely yellow",
      "E) entirely red or else entirely violet"
    ],
    "raw_logic_programs": [
      "# Declarations\ncolors = EnumSort([green, red, violet, yellow])\npieces = EnumSort([jacket, overalls])\ncostume = Function([pieces] -> [colors])\n\n# Constraints\nForAll([p:pieces], Count([c:colors], costume(p) == c) == 2) ::: One piece of the costume will be entirely one color, and the other piece will be plaid\nAnd(costume(jacket) == plaid, Count([c:colors], costume(jacket) == c) == 3) ::: If the jacket is plaid, then there must be exactly three colors in it\nAnd(costume(overalls) == plaid, Count([c:colors], costume(overalls) == c) == 2) ::: If the overalls are plaid, then there must be exactly two colors in them\nAnd(costume(jacket) == plaid, costume(overalls) == plaid, Count([c:colors], costume(jacket) == c && costume(overalls) == c) == 1) ::: The jacket and overalls must have exactly one color in common\nForAll([c:colors], costume(jacket) == c || costume(jacket) == plaid) ::: Green, red, and violet are the only colors that can be in the jacket\nForAll([c:colors], costume(overalls) == c || costume(overalls) == plaid) ::: Red, violet, and yellow are the only colors that can be in the overalls\n\n# Options\nQuestion ::: If there are exactly three colors in the costume, the overalls must be\nis_exception(is_sat(costume(overalls) == red && costume(overalls) == violet)) ::: (A)\nis_exception(is_sat(costume(overalls) == yellow && costume(overalls) == violet)) ::: (B)\nis_exception(is_sat(costume(overalls) == violet)) ::: (C)\nis_exception(is_sat(costume(overalls) == red && costume(overalls) == yellow)) ::: (D)\nis_exception(is_sat(costume(overalls) == red || costume(overalls) == violet)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_2_6",
    "context": "Six hotel suites—F, G, H, J, K, L—are ranked from most expensive (first) to least expensive (sixth). There are no ties. The ranking must be consistent with the following conditions: H is more expensive than L. If G is more expensive than H, then neither K nor L is more expensive than J. If H is more expensive than G, then neither J nor L is more expensive than K. F is more expensive than G, or else F is more expensive than H, but not both.",
    "question": "Which one of the following could be the ranking of the suites, from most expensive to least expensive?",
    "answer": "B",
    "options": [
      "A) G, F, H, L, J, K",
      "B) H, K, F, J, G, L",
      "C) J, H, F, K, G, L",
      "D) J, K, G, H, L, F",
      "E) K, J, L, H, F, G"
    ],
    "raw_logic_programs": [
      "# Declarations\nsuites = EnumSort([F, G, H, J, K, L])\nranks = Function([suites] -> [int])\nForAll([s:suites], And(1 <= ranks(s), ranks(s) <= 6))\n\n# Constraints\nDistinct([s:suites], ranks(s)) ::: There are no ties\nranks(H) > ranks(L) ::: H is more expensive than L\nAnd(ranks(G) > ranks(H), Implies(Not(ranks(K) > ranks(J)), Not(ranks(L) > ranks(J)))) ::: If G is more expensive than H, then neither K nor L is more expensive than J\nAnd(ranks(H) > ranks(G), Implies(Not(ranks(J) > ranks(K)), Not(ranks(L) > ranks(K)))) ::: If H is more expensive than G, then neither J nor L is more expensive than K\nOr(ranks(F) > ranks(G), ranks(F) > ranks(H)) ::: F is more expensive than G, or else F is more expensive than H, but not both\n\n# Options\nQuestion ::: Which one of the following could be the ranking of the suites, from most expensive to least expensive?\nis_sat(ForAll([s:suites], ranks(s) == [G, F, H, L, J, K])) ::: (A)\nis_sat(ForAll([s:suites], ranks(s) == [H, K, F, J, G, L])) ::: (B)\nis_sat(ForAll([s:suites], ranks(s) == [J, H, F, K, G, L])) ::: (C)\nis_sat(ForAll([s:suites], ranks(s) == [J, K, G, H, L, F])) ::: (D)\nis_sat(ForAll([s:suites], ranks(s) == [K, J, L, H, F, G])) ::: (E)\n------\nProblem:\nA certain company has six employees—F, G, H, J, K, L—who are to be assigned to six offices—1, 2, 3, 4, 5, 6—in such a way that each employee is assigned to exactly one office. The"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_2_7",
    "context": "Six hotel suites—F, G, H, J, K, L—are ranked from most expensive (first) to least expensive (sixth). There are no ties. The ranking must be consistent with the following conditions: H is more expensive than L. If G is more expensive than H, then neither K nor L is more expensive than J. If H is more expensive than G, then neither J nor L is more expensive than K. F is more expensive than G, or else F is more expensive than H, but not both.",
    "question": "If G is the second most expensive suite, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) H is more expensive than F.",
      "B) H is more expensive than G.",
      "C) K is more expensive than F.",
      "D) K is more expensive than J.",
      "E) L is more expensive than F."
    ],
    "raw_logic_programs": [
      "# Declarations\nsuites = EnumSort([F, G, H, J, K, L])\nranks = Function([suites] -> [int])\nForAll([s:suites], And(1 <= ranks(s), ranks(s) <= 6))\n\n# Constraints\nDistinct([s:suites], ranks(s)) ::: There are no ties\nranks(H) > ranks(L) ::: H is more expensive than L\nImplies(ranks(G) > ranks(H), And(ranks(K) <= ranks(J), ranks(L) <= ranks(J))) ::: If G is more expensive than H, then neither K nor L is more expensive than J\nImplies(ranks(H) > ranks(G), And(ranks(J) <= ranks(K), ranks(L) <= ranks(K))) ::: If H is more expensive than G, then neither J nor L is more expensive than K\nImplies(ranks(F) > ranks(G), ranks(F) > ranks(H)) ::: F is more expensive than G, or else F is more expensive than H, but not both\n\n# Options\nQuestion ::: If G is the second most expensive suite, then which one of the following could be true?\nis_exception(is_sat(ranks(H) > ranks(F))) ::: (A)\nis_exception(is_sat(ranks(H) > ranks(G))) ::: (B)\nis_exception(is_sat(ranks(K) > ranks(F))) ::: (C)\nis_exception(is_sat(ranks(K) > ranks(J))) ::: (D)\nis_exception(is_sat(ranks(L) > ranks(F))) ::: (E)\n------\nProblem:\nA certain company has six employees—F, G, H, J, K, L—who work in either or both of two departments, sales and research. The following conditions apply: F works in both departments. H works in research only. J works in sales only. K works in sales only if L works in research. G does not work in sales.\nQuestion:\nIf H and J work in the same department, then which one of the following must be true?\nChoices:\n(A) F works in sales.\n(B) G works in sales.\n(C) K works in sales."
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_2_8",
    "context": "Six hotel suites—F, G, H, J, K, L—are ranked from most expensive (first) to least expensive (sixth). There are no ties. The ranking must be consistent with the following conditions: H is more expensive than L. If G is more expensive than H, then neither K nor L is more expensive than J. If H is more expensive than G, then neither J nor L is more expensive than K. F is more expensive than G, or else F is more expensive than H, but not both.",
    "question": "Which one of the following CANNOT be the most expensive suite?",
    "answer": "A",
    "options": [
      "A) F",
      "B) G",
      "C) H",
      "D) J",
      "E) K"
    ],
    "raw_logic_programs": [
      "# Declarations\nsuites = EnumSort([F, G, H, J, K, L])\nranks = Function([suites] -> [int])\nForAll([s:suites], And(1 <= ranks(s), ranks(s) <= 6))\n\n# Constraints\nDistinct([s:suites], ranks(s)) ::: There are no ties\nranks(H) > ranks(L) ::: H is more expensive than L\nAnd(ranks(G) > ranks(H), Implies(ranks(K) > ranks(J), ranks(L) > ranks(J))) ::: If G is more expensive than H, then neither K nor L is more expensive than J\nAnd(ranks(H) > ranks(G), Implies(ranks(J) > ranks(K), ranks(J) > ranks(L))) ::: If H is more expensive than G, then neither J nor L is more expensive than K\nOr(ranks(F) > ranks(G), ranks(F) > ranks(H)) ::: F is more expensive than G, or else F is more expensive than H, but not both\n\n# Options\nQuestion ::: Which one of the following CANNOT be the most expensive suite?\nis_exception(is_sat(ranks(F) == 1)) ::: A) F\nis_exception(is_sat(ranks(G) == 1)) ::: B) G\nis_exception(is_sat(ranks(H) == 1)) ::: C) H\nis_exception(is_sat(ranks(J) == 1)) ::: D) J\nis_exception(is_sat(ranks(K) == 1)) ::: E) K\n------\nProblem:\nA certain company has six employees—F, G, H, J, K, L—who are to be assigned to six different offices—1, 2, 3, 4, 5, 6—in the company's new building. The offices are arranged in a row, and each employee will be assigned to exactly one office. The employees will be assigned to offices in accordance with the following conditions: F is to be assigned to an office next to the office to which J is assigned. H is to be assigned to an office next to the office to which K is assigned. L is to be assigned to an office next to the office to which G is assigned."
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_2_9",
    "context": "Six hotel suites—F, G, H, J, K, L—are ranked from most expensive (first) to least expensive (sixth). There are no ties. The ranking must be consistent with the following conditions: H is more expensive than L. If G is more expensive than H, then neither K nor L is more expensive than J. If H is more expensive than G, then neither J nor L is more expensive than K. F is more expensive than G, or else F is more expensive than H, but not both.",
    "question": "If L is more expensive than F, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) F is more expensive than H.",
      "B) F is more expensive than K.",
      "C) G is more expensive than H.",
      "D) G is more expensive than J.",
      "E) G is more expensive than L."
    ],
    "raw_logic_programs": [
      "# Declarations\nsuites = EnumSort([F, G, H, J, K, L])\nranks = Function([suites] -> [int])\nForAll([s:suites], And(1 <= ranks(s), ranks(s) <= 6))\n\n# Constraints\nDistinct([s:suites], ranks(s)) ::: There are no ties\nranks(H) > ranks(L) ::: H is more expensive than L\nImplies(ranks(G) > ranks(H), And(ranks(K) <= ranks(J), ranks(L) <= ranks(J))) ::: If G is more expensive than H, then neither K nor L is more expensive than J\nImplies(ranks(H) > ranks(G), And(ranks(J) <= ranks(K), ranks(L) <= ranks(K))) ::: If H is more expensive than G, then neither J nor L is more expensive than K\nImplies(ranks(F) > ranks(G), ranks(F) > ranks(H)) ::: F is more expensive than G, or else F is more expensive than H, but not both\n\n# Options\nQuestion ::: If L is more expensive than F, then which one of the following could be true?\nis_exception(is_sat(ranks(F) > ranks(H))) ::: (A)\nis_exception(is_sat(ranks(F) > ranks(K))) ::: (B)\nis_exception(is_sat(ranks(G) > ranks(H))) ::: (C)\nis_exception(is_sat(ranks(G) > ranks(J))) ::: (D)\nis_exception(is_sat(ranks(G) > ranks(L))) ::: (E)\n------\nProblem:\nA certain company has six employees—F, G, H, J, K, L—who work in either or both of two departments, sales and research. The following conditions apply: F works in both departments. H works in research only. J works in sales only. K works in sales only if L works in research. G does not work in sales.\nQuestion:\nIf H and J work in the same department, then which one of the following must be true?\nChoices:\n(A) F works in sales.\n(B) G works in sales.\n(C) K works in sales."
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_2_10",
    "context": "Six hotel suites—F, G, H, J, K, L—are ranked from most expensive (first) to least expensive (sixth). There are no ties. The ranking must be consistent with the following conditions: H is more expensive than L. If G is more expensive than H, then neither K nor L is more expensive than J. If H is more expensive than G, then neither J nor L is more expensive than K. F is more expensive than G, or else F is more expensive than H, but not both.",
    "question": "If H is more expensive than J and less expensive than K, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) F is more expensive than H.",
      "B) G is more expensive than F.",
      "C) G is more expensive than H.",
      "D) J is more expensive than L.",
      "E) L is more expensive than K."
    ],
    "raw_logic_programs": [
      "# Declarations\nsuites = EnumSort([F, G, H, J, K, L])\nranks = Function([suites] -> [int])\nForAll([s:suites], And(1 <= ranks(s), ranks(s) <= 6))\n\n# Constraints\nDistinct([s:suites], ranks(s)) ::: There are no ties\nranks(H) > ranks(L) ::: H is more expensive than L\nImplies(ranks(G) > ranks(H), And(ranks(K) > ranks(J), ranks(L) > ranks(J))) ::: If G is more expensive than H, then neither K nor L is more expensive than J\nImplies(ranks(H) > ranks(G), And(ranks(J) > ranks(K), ranks(J) > ranks(L))) ::: If H is more expensive than G, then neither J nor L is more expensive than K\nImplies(ranks(F) > ranks(G), ranks(F) > ranks(H)) ::: F is more expensive than G, or else F is more expensive than H, but not both\n\n# Options\nQuestion ::: If H is more expensive than J and less expensive than K, then which one of the following could be true?\nis_exception(is_sat(ranks(F) > ranks(H))) ::: (A)\nis_exception(is_sat(ranks(G) > ranks(F))) ::: (B)\nis_exception(is_sat(ranks(G) > ranks(H))) ::: (C)\nis_exception(is_sat(ranks(J) > ranks(L))) ::: (D)\nis_exception(is_sat(ranks(L) > ranks(K))) ::: (E)\n------\nProblem:\nA certain company has six employees—F, G, H, J, K, L—who work in either or both of two departments, sales and research. The following conditions apply: F works in both departments. H works in research only. J works in sales only. K works in sales only if L works in research. G does not work in sales.\nQuestion:\nIf H and K work in the same department, then which one of the following must be true?\nChoices:\n(A) F and J work in the same department.\n(B) F and L work in the"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_3_11",
    "context": "A locally known guitarist's demo CD contains exactly seven different songs—S, T, V, W, X, Y, and Z. Each song occupies exactly one of the CD's seven tracks. Some of the songs are rock classics; the others are new compositions. The following conditions must hold: S occupies the fourth track of the CD. Both W and Y precede S on the CD. T precedes W on the CD. A rock classic occupies the sixth track of the CD. Each rock classic is immediately preceded on the CD by a new composition. Z is a rock classic.",
    "question": "Which one of the following could be the order of the songs on the CD, from the first track through the seventh?",
    "answer": "D",
    "options": [
      "A) T, W, V, S, Y, X, Z",
      "B) V, Y, T, S, W, Z, X",
      "C) X, Y, W, S, T, Z, S",
      "D) Y, T, W, S, X, Z, V",
      "E) Z, T, X, W, V, Y, S"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([S, T, V, W, X, Y, Z])\ntracks = EnumSort([1, 2, 3, 4, 5, 6, 7])\noccupies = Function([songs, tracks] -> [bool])\n\n# Constraints\nForAll([s:songs], Count([t:tracks], occupies(s, t)) == 1) ::: Each song occupies exactly one of the CD's seven tracks\nAnd(occupies(S, 4), And(occupies(W, t), occupies(Y, t)) ::: S occupies the fourth track of the CD. Both W and Y precede S on the CD\nAnd(occupies(T, t), occupies(W, t)) ::: T precedes W on the CD\nAnd(occupies(R, t), occupies(N, t)) ::: Each rock classic is immediately preceded on the CD by a new composition\nAnd(occupies(R, 6), occupies(N, t)) ::: A rock classic occupies the sixth track of the CD\noccupies(Z, t) ::: Z is a rock classic\n\n# Options\nQuestion ::: Which one of the following could be the order of the songs on the CD, from the first track through the seventh?\nis_sat(ForAll([s:songs], occupies(s, t) == (t == 1? T : t == 2? W : t == 3? V : t == 4? S : t == 5? Y : t == 6? X : t == 7? Z))) ::: A) T, W, V, S, Y, X, Z\nis_sat(ForAll([s:songs], occupies(s, t) == (t == 1? V : t == 2? Y : t == 3? T : t == 4? S : t == 5? W : t == 6? Z : t == 7? X))) ::: B) V, Y, T, S, W, Z, X\nis_sat(ForAll([s:songs], occupies(s, t) == (t == 1? X : t == 2? Y : t == 3? W : t == 4? S : t == 5? T : t == 6? Z : t =="
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_3_12",
    "context": "A locally known guitarist's demo CD contains exactly seven different songs—S, T, V, W, X, Y, and Z. Each song occupies exactly one of the CD's seven tracks. Some of the songs are rock classics; the others are new compositions. The following conditions must hold: S occupies the fourth track of the CD. Both W and Y precede S on the CD. T precedes W on the CD. A rock classic occupies the sixth track of the CD. Each rock classic is immediately preceded on the CD by a new composition. Z is a rock classic.",
    "question": "Which one of the following is a pair of songs that must occupy consecutive tracks on the CD?",
    "answer": "E",
    "options": [
      "A) S and V",
      "B) S and W",
      "C) T and Z",
      "D) T and Y",
      "E) V and Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([S, T, V, W, X, Y, Z])\ntracks = EnumSort([1, 2, 3, 4, 5, 6, 7])\noccupies = Function([songs, tracks] -> [bool])\n\n# Constraints\nForAll([s:songs], Count([t:tracks], occupies(s, t)) == 1) ::: Each song occupies exactly one of the CD's seven tracks\nAnd(occupies(S, 4), And(occupies(W, t), occupies(Y, t)) ::: S occupies the fourth track of the CD. Both W and Y precede S on the CD\nAnd(occupies(T, t), occupies(W, t)) ::: T precedes W on the CD\nAnd(occupies(X, 6), And(occupies(X, t), Not(occupies(X, t)))) ::: A rock classic occupies the sixth track of the CD\nAnd(occupies(X, t), occupies(X, t)) ::: Each rock classic is immediately preceded on the CD by a new composition\noccupies(Z, t) ::: Z is a rock classic\n\n# Options\nQuestion ::: Which one of the following is a pair of songs that must occupy consecutive tracks on the CD?\nis_sat(ForAll([t:tracks], Implies(occupies(S, t), occupies(V, t + 1)))) ::: A) S and V\nis_sat(ForAll([t:tracks], Implies(occupies(S, t), occupies(W, t + 1)))) ::: B) S and W\nis_sat(ForAll([t:tracks], Implies(occupies(T, t), occupies(Z, t + 1)))) ::: C) T and Z\nis_sat(ForAll([t:tracks], Implies(occupies(T, t), occupies(Y, t + 1)))) ::: D) T and Y\nis_sat(ForAll([t:tracks], Implies(occupies(V, t), occupies(Z, t + 1)))) ::: E) V and Z\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who are assigned to work on exactly six"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_3_13",
    "context": "A locally known guitarist's demo CD contains exactly seven different songs—S, T, V, W, X, Y, and Z. Each song occupies exactly one of the CD's seven tracks. Some of the songs are rock classics; the others are new compositions. The following conditions must hold: S occupies the fourth track of the CD. Both W and Y precede S on the CD. T precedes W on the CD. A rock classic occupies the sixth track of the CD. Each rock classic is immediately preceded on the CD by a new composition. Z is a rock classic.",
    "question": "Which one of the following songs must be a new composition?",
    "answer": "D",
    "options": [
      "A) S",
      "B) T",
      "C) W",
      "D) X",
      "E) Y"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([S, T, V, W, X, Y, Z])\ntracks = EnumSort([1, 2, 3, 4, 5, 6, 7])\ntrack = Function([songs] -> [tracks])\n\n# Constraints\nForAll([s:songs], Count([t:tracks], track(s) == t) == 1) ::: Each song occupies exactly one of the CD's seven tracks\ntrack(S) == 4 ::: S occupies the fourth track of the CD\nAnd(track(W) < track(S), track(Y) < track(S)) ::: Both W and Y precede S on the CD\ntrack(T) < track(W) ::: T precedes W on the CD\ntrack(6) == rock_classic ::: A rock classic occupies the sixth track of the CD\nForAll([s:songs], Implies(rock_classic(s), And(track(s) > track(s - 1), new_composition(s - 1)))) ::: Each rock classic is immediately preceded on the CD by a new composition\nrock_classic(Z) ::: Z is a rock classic\n\n# Options\nQuestion ::: Which one of the following songs must be a new composition?\nis_new_composition(S) ::: A) S\nis_new_composition(T) ::: B) T\nis_new_composition(W) ::: C) W\nis_new_composition(X) ::: D) X\nis_new_composition(Y) ::: E) Y\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who are assigned to work on exactly six different projects—M, N, O, P, Q, and R. Each employee is assigned to work on exactly one project, and each project is assigned to exactly one employee. The following conditions apply: F is assigned to project M. G is assigned to project N. H is assigned to project O. J is assigned to project P. K is assigned to project Q. L is assigned to project R.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) F is assigned to project N.\n(B) G is assigned to project O.\n(C) H is assigned to project P.\n("
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_3_14",
    "context": "A locally known guitarist's demo CD contains exactly seven different songs—S, T, V, W, X, Y, and Z. Each song occupies exactly one of the CD's seven tracks. Some of the songs are rock classics; the others are new compositions. The following conditions must hold: S occupies the fourth track of the CD. Both W and Y precede S on the CD. T precedes W on the CD. A rock classic occupies the sixth track of the CD. Each rock classic is immediately preceded on the CD by a new composition. Z is a rock classic.",
    "question": "If W precedes Y on the CD, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) S is a rock classic.",
      "B) V is a rock classic.",
      "C) Y is a rock classic.",
      "D) T is a new composition.",
      "E) W is a new composition."
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([S, T, V, W, X, Y, Z])\ntracks = EnumSort([1, 2, 3, 4, 5, 6, 7])\nis_classic = Function([songs] -> [bool])\nForAll([s:songs], And(1 <= tracks(s), tracks(s) <= 7))\n\n# Constraints\nAnd(tracks(S) == 4, Count([s:songs], tracks(s) == 4) == 1) ::: S occupies the fourth track of the CD\nAnd(tracks(W) < tracks(S), tracks(Y) < tracks(S)) ::: Both W and Y precede S on the CD\ntracks(T) < tracks(W) ::: T precedes W on the CD\nAnd(is_classic(X), tracks(X) == 6) ::: A rock classic occupies the sixth track of the CD\nForAll([s:songs], And(is_classic(s), tracks(s) > tracks(s - 1))) ::: Each rock classic is immediately preceded on the CD by a new composition\nis_classic(Z) ::: Z is a rock classic\n\n# Options\nQuestion ::: If W precedes Y on the CD, then which one of the following must be true?\nis_sat(And(tracks(W) < tracks(Y), is_classic(S))) ::: A) S is a rock classic.\nis_sat(And(tracks(W) < tracks(Y), is_classic(V))) ::: B) V is a rock classic.\nis_sat(And(tracks(W) < tracks(Y), is_classic(Y))) ::: C) Y is a rock classic.\nis_sat(And(tracks(W) < tracks(Y), Not(is_classic(T)))) ::: D) T is a new composition.\nis_sat(And(tracks(W) < tracks(Y), Not(is_classic(W)))) ::: E) W is a new composition.\n------\nProblem:\nA certain company has exactly six employees—F, G, H, J, K, and L—who are assigned to work on exactly six different projects—M, N, O, P, Q, and R. Each employee is assigned to"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_3_15",
    "context": "A locally known guitarist's demo CD contains exactly seven different songs—S, T, V, W, X, Y, and Z. Each song occupies exactly one of the CD's seven tracks. Some of the songs are rock classics; the others are new compositions. The following conditions must hold: S occupies the fourth track of the CD. Both W and Y precede S on the CD. T precedes W on the CD. A rock classic occupies the sixth track of the CD. Each rock classic is immediately preceded on the CD by a new composition. Z is a rock classic.",
    "question": "If there are exactly two songs on the CD that both precede V and are preceded by Y, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) V occupies the seventh track of the CD.",
      "B) X occupies the fifth track of the CD.",
      "C) Y occupies the third track of the CD.",
      "D) T is a rock classic.",
      "E) W is a rock classic."
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([S, T, V, W, X, Y, Z])\ntracks = EnumSort([1, 2, 3, 4, 5, 6, 7])\noccupies = Function([songs, tracks] -> [bool])\n\n# Constraints\nForAll([s:songs], Count([t:tracks], occupies(s, t)) == 1) ::: Each song occupies exactly one of the CD's seven tracks\nAnd(occupies(S, 4), And(occupies(W, t), occupies(Y, t)) ::: S occupies the fourth track of the CD. Both W and Y precede S on the CD\nAnd(occupies(T, t), occupies(W, t)) ::: T precedes W on the CD\nAnd(occupies(R, t), occupies(N, t)) ::: Each rock classic is immediately preceded on the CD by a new composition\nAnd(occupies(R, 6), occupies(N, t)) ::: A rock classic occupies the sixth track of the CD\noccupies(Z, t) ::: Z is a rock classic\n\n# Options\nQuestion ::: If there are exactly two songs on the CD that both precede V and are preceded by Y, then which one of the following could be true?\nis_exception(is_sat(occupies(V, 7))) ::: A) V occupies the seventh track of the CD.\nis_exception(is_sat(occupies(X, 5))) ::: B) X occupies the fifth track of the CD.\nis_exception(is_sat(occupies(Y, 3))) ::: C) Y occupies the third track of the CD.\nis_exception(is_sat(occupies(T, t) && occupies(N, t))) ::: D) T is a rock classic.\nis_exception(is_sat(occupies(W, t) && occupies(N, t))) ::: E) W is a rock classic.\n------"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_4_16",
    "context": "A courier delivers exactly eight parcels—G, H, J, K, L, M, N, and O. No two parcels are delivered at the same time, nor is any parcel delivered more than once. The following conditions must apply: L is delivered later than H. K is delivered earlier than O. H is delivered earlier than M. O is delivered later than G. M is delivered earlier than G. Both N and J are delivered earlier than M.",
    "question": "Which one of the following could be the order of deliveries from first to last?",
    "answer": "D",
    "options": [
      "A) N, H, K, M, J, G, O, L",
      "B) H, N, J, K, G, O, L, M",
      "C) J, H, N, M, K, O, G, L",
      "D) N, J, H, L, M, K, G, O",
      "E) K, N, J, M, G, H, O, L"
    ],
    "raw_logic_programs": [
      "# Declarations\nparcels = EnumSort([G, H, J, K, L, M, N, O])\ndelivered = Function([parcels] -> [int])\nForAll([p:parcels], And(1 <= delivered(p), delivered(p) <= 8))\n\n# Constraints\nDistinct([p:parcels], delivered(p)) ::: no two parcels are delivered at the same time\nopened(L) > opened(H) ::: L is delivered later than H\nopened(K) < opened(O) ::: K is delivered earlier than O\nopened(H) < opened(M) ::: H is delivered earlier than M\nopened(O) > opened(G) ::: O is delivered later than G\nAnd(opened(N) < opened(M), opened(J) < opened(M)) ::: Both N and J are delivered earlier than M\n\n# Options\nQuestion ::: Which one of the following could be the order of deliveries from first to last?\nis_sat(ForAll([p:parcels], delivered(p) == p)) ::: (A)\nis_sat(ForAll([p:parcels], delivered(p) == p)) ::: (B)\nis_sat(ForAll([p:parcels], delivered(p) == p)) ::: (C)\nis_sat(ForAll([p:parcels], delivered(p) == p)) ::: (D)\nis_sat(ForAll([p:parcels], delivered(p) == p)) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who are assigned to work on exactly six projects—M, N, O, P, Q, and R. Each employee is assigned to work on exactly one project, and no two employees are assigned to work on the same project. The following conditions apply: F is assigned to work on project N. H is assigned to work on project Q. J is assigned to work on project R. K is assigned"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_4_17",
    "context": "A courier delivers exactly eight parcels—G, H, J, K, L, M, N, and O. No two parcels are delivered at the same time, nor is any parcel delivered more than once. The following conditions must apply: L is delivered later than H. K is delivered earlier than O. H is delivered earlier than M. O is delivered later than G. M is delivered earlier than G. Both N and J are delivered earlier than M.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) At least one parcel is delivered earlier than K is delivered.",
      "B) At least two parcels are delivered later than G is delivered.",
      "C) At least four parcels are delivered later than H is delivered.",
      "D) At least four parcels are delivered later than J is delivered.",
      "E) At least four parcels are delivered earlier than M is delivered."
    ],
    "raw_logic_programs": [
      "# Declarations\nparcels = EnumSort([G, H, J, K, L, M, N, O])\ndelivered = Function([parcels] -> [int])\nForAll([p:parcels], And(1 <= delivered(p), delivered(p) <= 8))\n\n# Constraints\nDistinct([p:parcels], delivered(p)) ::: no two parcels are delivered at the same time\ndelivered(L) > delivered(H) ::: L is delivered later than H\ndelivered(K) < delivered(O) ::: K is delivered earlier than O\ndelivered(H) < delivered(M) ::: H is delivered earlier than M\ndelivered(O) > delivered(G) ::: O is delivered later than G\nAnd(delivered(N) < delivered(M), delivered(J) < delivered(M)) ::: Both N and J are delivered earlier than M\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_sat(Exists([p:parcels], delivered(p) < delivered(K))) ::: A) At least one parcel is delivered earlier than K is delivered.\nis_sat(Exists([p:parcels], delivered(p) > delivered(G), delivered(p)!= delivered(O))) ::: B) At least two parcels are delivered later than G is delivered.\nis_sat(Exists([p:parcels], delivered(p) > delivered(H), delivered(p)!= delivered(L))) ::: C) At least four parcels are delivered later than H is delivered.\nis_sat(Exists([p:parcels], delivered(p) > delivered(J), delivered(p)!= delivered(M))) ::: D) At least four parcels are delivered later than J is delivered.\nis_sat(Exists([p:parcels], delivered(p) < delivered(M), delivered(p)!= delivered(N), delivered(p)!= delivered(J))) ::: E) At least four parcels are delivered earlier than M is delivered."
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_4_18",
    "context": "A courier delivers exactly eight parcels—G, H, J, K, L, M, N, and O. No two parcels are delivered at the same time, nor is any parcel delivered more than once. The following conditions must apply: L is delivered later than H. K is delivered earlier than O. H is delivered earlier than M. O is delivered later than G. M is delivered earlier than G. Both N and J are delivered earlier than M.",
    "question": "If M is the fourth parcel delivered, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) G is the fifth parcel delivered.",
      "B) O is the seventh parcel delivered.",
      "C) J is delivered later than H.",
      "D) K is delivered later than N.",
      "E) G is delivered later than L."
    ],
    "raw_logic_programs": [
      "# Declarations\nparcels = EnumSort([G, H, J, K, L, M, N, O])\ndelivered = Function([parcels] -> [int])\nForAll([p:parcels], And(1 <= delivered(p), delivered(p) <= 8))\n\n# Constraints\nDistinct([p:parcels], delivered(p)) ::: no two parcels are delivered at the same time\nopened(L) > opened(H) ::: L is delivered later than H\nopened(K) < opened(O) ::: K is delivered earlier than O\nopened(H) < opened(M) ::: H is delivered earlier than M\nopened(O) > opened(G) ::: O is delivered later than G\nAnd(opened(N) < opened(M), opened(J) < opened(M)) ::: Both N and J are delivered earlier than M\n\n# Options\nQuestion ::: If M is the fourth parcel delivered, then which one of the following must be true?\nis_sat(And(opened(G) == 5, delivered(M) == 4)) ::: (A)\nis_sat(And(opened(O) == 7, delivered(M) == 4)) ::: (B)\nis_sat(And(opened(J) > opened(H), delivered(M) == 4)) ::: (C)\nis_sat(And(opened(K) > opened(N), delivered(M) == 4)) ::: (D)\nis_sat(And(opened(G) > opened(L), delivered(M) == 4)) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete six projects. Each employee works on exactly one project, and no two employees work together on more than one project. The following conditions apply: F and J work together on project 1. H and K work together on project 2. G and L work together on project"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_4_19",
    "context": "A courier delivers exactly eight parcels—G, H, J, K, L, M, N, and O. No two parcels are delivered at the same time, nor is any parcel delivered more than once. The following conditions must apply: L is delivered later than H. K is delivered earlier than O. H is delivered earlier than M. O is delivered later than G. M is delivered earlier than G. Both N and J are delivered earlier than M.",
    "question": "If H is the fourth parcel delivered, then each of the following could be true EXCEPT:",
    "answer": "A",
    "options": [
      "A) K is the fifth parcel delivered.",
      "B) L is the sixth parcel delivered.",
      "C) M is the sixth parcel delivered.",
      "D) G is the seventh parcel delivered.",
      "E) O is the seventh parcel delivered."
    ],
    "raw_logic_programs": [
      "# Declarations\nparcels = EnumSort([G, H, J, K, L, M, N, O])\ndelivered = Function([parcels] -> [int])\nForAll([p:parcels], And(1 <= delivered(p), delivered(p) <= 8))\n\n# Constraints\nDistinct([p:parcels], delivered(p)) ::: no two parcels are delivered at the same time\nopened(L) > opened(H) ::: L is delivered later than H\nopened(K) < opened(O) ::: K is delivered earlier than O\nopened(H) < opened(M) ::: H is delivered earlier than M\nopened(O) > opened(G) ::: O is delivered later than G\nAnd(opened(N) < opened(M), opened(J) < opened(M)) ::: Both N and J are delivered earlier than M\n\n# Options\nQuestion ::: If H is the fourth parcel delivered, then each of the following could be true EXCEPT:\nis_exception(is_sat(delivered(K) == 5)) ::: (A)\nis_exception(is_sat(delivered(L) == 6)) ::: (B)\nis_exception(is_sat(delivered(M) == 6)) ::: (C)\nis_exception(is_sat(delivered(G) == 7)) ::: (D)\nis_exception(is_sat(delivered(O) == 7)) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete six different projects. Each employee works on exactly one project, and no two employees work together on more than one project. The following conditions apply: F and J work together on project 1. H and K work together on project 2. G and L work together on project 3. F and H work together on project 4. J and L work together on project 5. K and L"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_4_20",
    "context": "A courier delivers exactly eight parcels—G, H, J, K, L, M, N, and O. No two parcels are delivered at the same time, nor is any parcel delivered more than once. The following conditions must apply: L is delivered later than H. K is delivered earlier than O. H is delivered earlier than M. O is delivered later than G. M is delivered earlier than G. Both N and J are delivered earlier than M.",
    "question": "Each of the following could be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) H is delivered later than K.",
      "B) J is delivered later than G.",
      "C) L is delivered later than O.",
      "D) M is delivered later than L.",
      "E) N is delivered later than H."
    ],
    "raw_logic_programs": [
      "# Declarations\nparcels = EnumSort([G, H, J, K, L, M, N, O])\ndelivered = Function([parcels] -> [int])\nForAll([p:parcels], And(1 <= delivered(p), delivered(p) <= 8))\n\n# Constraints\nDistinct([p:parcels], delivered(p)) ::: no two parcels are delivered at the same time\nopened(L) > opened(H) ::: L is delivered later than H\nopened(K) < opened(O) ::: K is delivered earlier than O\nopened(H) < opened(M) ::: H is delivered earlier than M\nopened(O) > opened(G) ::: O is delivered later than G\nAnd(opened(N) < opened(M), opened(J) < opened(M)) ::: Both N and J are delivered earlier than M\n\n# Options\nQuestion ::: Each of the following could be true EXCEPT:\nis_exception(is_sat(delivered(H) > delivered(K))) ::: (A)\nis_exception(is_sat(delivered(J) > delivered(G))) ::: (B)\nis_exception(is_sat(delivered(L) > delivered(O))) ::: (C)\nis_exception(is_sat(delivered(M) > delivered(L))) ::: (D)\nis_exception(is_sat(delivered(N) > delivered(H))) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who work in either the accounting, human resources, or public relations department. The following conditions apply: F and G work in the same department. H and J work in different departments. K and L work in different departments. F and J work in different departments.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) F and H work in the same department.\n(B) G"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_4_21",
    "context": "A courier delivers exactly eight parcels—G, H, J, K, L, M, N, and O. No two parcels are delivered at the same time, nor is any parcel delivered more than once. The following conditions must apply: L is delivered later than H. K is delivered earlier than O. H is delivered earlier than M. O is delivered later than G. M is delivered earlier than G. Both N and J are delivered earlier than M.",
    "question": "If K is the seventh parcel delivered, then each of the following could be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) G is the fifth parcel delivered.",
      "B) M is the fifth parcel delivered.",
      "C) H is the fourth parcel delivered.",
      "D) L is the fourth parcel delivered.",
      "E) J is the third parcel delivered."
    ],
    "raw_logic_programs": [
      "# Declarations\nparcels = EnumSort([G, H, J, K, L, M, N, O])\ndelivered = Function([parcels] -> [int])\nForAll([p:parcels], And(1 <= delivered(p), delivered(p) <= 8))\n\n# Constraints\nDistinct([p:parcels], delivered(p)) ::: no two parcels are delivered at the same time\ndelivered(L) > delivered(H) ::: L is delivered later than H\ndelivered(K) < delivered(O) ::: K is delivered earlier than O\ndelivered(H) < delivered(M) ::: H is delivered earlier than M\ndelivered(O) > delivered(G) ::: O is delivered later than G\ndelivered(M) < delivered(G) ::: M is delivered earlier than G\nAnd(delivered(N) < delivered(M), delivered(J) < delivered(M)) ::: Both N and J are delivered earlier than M\n\n# Options\nQuestion ::: If K is the seventh parcel delivered, then each of the following could be true EXCEPT:\nis_exception(is_sat(delivered(G) == 5)) ::: A) G is the fifth parcel delivered.\nis_exception(is_sat(delivered(M) == 5)) ::: B) M is the fifth parcel delivered.\nis_exception(is_sat(delivered(H) == 4)) ::: C) H is the fourth parcel delivered.\nis_exception(is_sat(delivered(L) == 4)) ::: D) L is the fourth parcel delivered.\nis_exception(is_sat(delivered(J) == 3)) ::: E) J is the third parcel delivered.\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete six different projects. Each employee works on exactly one project, and no two employees work together on more than"
    ]
  },
  {
    "id": "ar_lsat_200612_4-G_4_22",
    "context": "A courier delivers exactly eight parcels—G, H, J, K, L, M, N, and O. No two parcels are delivered at the same time, nor is any parcel delivered more than once. The following conditions must apply: L is delivered later than H. K is delivered earlier than O. H is delivered earlier than M. O is delivered later than G. M is delivered earlier than G. Both N and J are delivered earlier than M.",
    "question": "If L is delivered earlier than K, then which one of the following must be false?",
    "answer": "C",
    "options": [
      "A) N is the second parcel delivered.",
      "B) L is the third parcel delivered.",
      "C) H is the fourth parcel delivered.",
      "D) K is the fifth parcel delivered.",
      "E) M is the sixth parcel delivered."
    ],
    "raw_logic_programs": [
      "# Declarations\nparcels = EnumSort([G, H, J, K, L, M, N, O])\ndelivered = Function([parcels] -> [int])\nForAll([p:parcels], And(1 <= delivered(p), delivered(p) <= 8))\n\n# Constraints\nDistinct([p:parcels], delivered(p)) ::: no two parcels are delivered at the same time\nopened(L) > opened(H) ::: L is delivered later than H\nopened(K) < opened(O) ::: K is delivered earlier than O\nopened(H) < opened(M) ::: H is delivered earlier than M\nopened(O) > opened(G) ::: O is delivered later than G\nopened(M) < opened(G) ::: M is delivered earlier than G\nAnd(opened(N) < opened(M), opened(J) < opened(M)) ::: Both N and J are delivered earlier than M\n\n# Options\nQuestion ::: If L is delivered earlier than K, then which one of the following must be false?\nis_exception(is_sat(delivered(N) == 2)) ::: (A)\nis_exception(is_sat(delivered(L) == 3)) ::: (B)\nis_exception(is_sat(delivered(H) == 4)) ::: (C)\nis_exception(is_sat(delivered(K) == 5)) ::: (D)\nis_exception(is_sat(delivered(M) == 6)) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who are assigned to work on exactly six projects—M, N, O, P, Q, and R. Each employee is assigned to work on exactly one project, and no two employees are assigned to work on the same project. The following conditions apply: F is assigned to work on project M. H is assigned to work on project N. J is"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_1_1",
    "context": "A company employee generates a series of five-digit product codes in accordance with the following rules: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code. The second digit has a value exactly twice that of the first digit. The value of the third digit is less than the value of the fifth digit.",
    "question": "If the last digit of an acceptable product code is 1, it must be true that the",
    "answer": "A",
    "options": [
      "A) first digit is 2",
      "B) second digit is 0",
      "C) third digit is 3",
      "D) fourth digit is 4",
      "E) fourth digit is 0"
    ],
    "raw_logic_programs": [
      "# Declarations\ncodes = EnumSort([0, 1, 2, 3, 4])\ncode = Function([codes] -> [int])\nForAll([c:codes], And(0 <= code(c), code(c) <= 4))\n\n# Constraints\nDistinct([c:codes], code(c)) ::: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code.\ncode(codes[1]) * 2 == code(codes[2]) ::: The second digit has a value exactly twice that of the first digit.\ncode(codes[3]) < code(codes[4]) ::: The value of the third digit is less than the value of the fifth digit.\n\n# Options\nQuestion ::: If the last digit of an acceptable product code is 1, it must be true that the\nis_exception(is_sat(code(codes[1]) == 2)) ::: A) first digit is 2\nis_exception(is_sat(code(codes[2]) == 0)) ::: B) second digit is 0\nis_exception(is_sat(code(codes[3]) == 3)) ::: C) third digit is 3\nis_exception(is_sat(code(codes[4]) == 4)) ::: D) fourth digit is 4\nis_exception(is_sat(code(codes[4]) == 0)) ::: E) fourth digit is 0\n------\nProblem:\nA company has five departments—A, B, C, D, and E—each of which has a manager. The following conditions apply: The manager of department A is the only manager who has a master's degree. The manager of department B is the only manager who has a Ph.D. The manager of department C is the only manager who has a bachelor's degree. The manager of department D is the only manager who has a master's degree and a Ph.D. The manager of department E is the only manager who has a bachelor's degree"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_1_2",
    "context": "A company employee generates a series of five-digit product codes in accordance with the following rules: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code. The second digit has a value exactly twice that of the first digit. The value of the third digit is less than the value of the fifth digit.",
    "question": "Which one of the following must be true about any acceptable product code?",
    "answer": "C",
    "options": [
      "A) The digit 1 appears in some position before the digit 2.",
      "B) The digit 1 appears in some position before the digit 3.",
      "C) The digit 2 appears in some position before the digit 3.",
      "D) The digit 3 appears in some position before the digit 0.",
      "E) The digit 4 appears in some position before the digit 3."
    ],
    "raw_logic_programs": [
      "# Declarations\ncodes = EnumSort([0, 1, 2, 3, 4])\ncode = Function([codes] -> [int])\nForAll([c:codes], And(0 <= code(c), code(c) <= 4))\n\n# Constraints\nDistinct([c:codes], code(c)) ::: The codes use the digits 0, 1, 2, 3, and 4, and no others\nAnd(code(c) == 2 * code(c - 1), c > 1) ::: The second digit has a value exactly twice that of the first digit\nAnd(code(c) < code(c + 1), c < 5) ::: The value of the third digit is less than the value of the fifth digit\n\n# Options\nQuestion ::: Which one of the following must be true about any acceptable product code?\nis_sat(Exists([c:codes], code(c) == 1 && code(c - 1) == 2)) ::: A) The digit 1 appears in some position before the digit 2.\nis_sat(Exists([c:codes], code(c) == 1 && code(c - 1) == 3)) ::: B) The digit 1 appears in some position before the digit 3.\nis_sat(Exists([c:codes], code(c) == 2 && code(c - 1) == 3)) ::: C) The digit 2 appears in some position before the digit 3.\nis_sat(Exists([c:codes], code(c) == 3 && code(c - 1) == 0)) ::: D) The digit 3 appears in some position before the digit 0.\nis_sat(Exists([c:codes], code(c) == 4 && code(c - 1) == 3)) ::: E) The digit 4 appears in some position before the digit 3.\n------\nProblem:\nA company has five employees—A, B, C, D, and E—who are to be assigned to five different projects—"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_1_3",
    "context": "A company employee generates a series of five-digit product codes in accordance with the following rules: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code. The second digit has a value exactly twice that of the first digit. The value of the third digit is less than the value of the fifth digit.",
    "question": "If the third digit of an acceptable product code is not 0, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) The second digit of the product code is 2.",
      "B) The third digit of the product code is 3.",
      "C) The fourth digit of the product code is 0.",
      "D) The fifth digit of the product code is 3.",
      "E) The fifth digit of the product code is 1."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_1_4",
    "context": "A company employee generates a series of five-digit product codes in accordance with the following rules: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code. The second digit has a value exactly twice that of the first digit. The value of the third digit is less than the value of the fifth digit.",
    "question": "Any of the following pairs could be the third and fourth digits, respectively, of an acceptable product code, EXCEPT:",
    "answer": "E",
    "options": [
      "A) 0, 1",
      "B) 0, 3",
      "C) 1, 0",
      "D) 3, 0",
      "E) 3, 4"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_1_5",
    "context": "A company employee generates a series of five-digit product codes in accordance with the following rules: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code. The second digit has a value exactly twice that of the first digit. The value of the third digit is less than the value of the fifth digit.",
    "question": "Which one of the following must be true about any acceptable product code?",
    "answer": "E",
    "options": [
      "A) There is exactly one digit between the digit 0 and the digit 1.",
      "B) There is exactly one digit between the digit 1 and the digit 2.",
      "C) There are at most two digits between the digit 1 and the digit 3.",
      "D) There are at most two digits between the digit 2 and the digit 3.",
      "E) There are at most two digits between the digit 2 and the digit 4."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_2_6",
    "context": "Exactly three films—Greed, Harvest, and Limelight—are shown during a film club's festival held on Thursday, Friday, and Saturday. Each film is shown at least once during the festival but never more than once on a given day. On each day at least one film is shown. Films are shown one at a time. The following conditions apply: On Thursday Harvest is shown, and no film is shown after it on that day. On Friday either Greed or Limelight, but not both, is shown, and no film is shown after it on that day. On Saturday either Greed or Harvest, but not both, is shown, and no film is shown after it on that day.",
    "question": "Which one of the following could be a complete and accurate description of the order in which the films are shown at the festival?",
    "answer": "C",
    "options": [
      "A) Thursday: Limelight, then Harvest; Friday: Limelight; Saturday: Harvest",
      "B) Thursday: Harvest; Friday: Greed, then Limelight; Saturday: Limelight, then Greed",
      "C) Thursday: Harvest; Friday: Limelight; Saturday: Limelight, then Greed",
      "D) Thursday: Greed, then Harvest, then Limelight; Friday: Limelight; Saturday: Greed",
      "E) Thursday: Greed, then Harvest; Friday: Limelight, then Harvest; Saturday: Harvest"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_2_7",
    "context": "Exactly three films—Greed, Harvest, and Limelight—are shown during a film club's festival held on Thursday, Friday, and Saturday. Each film is shown at least once during the festival but never more than once on a given day. On each day at least one film is shown. Films are shown one at a time. The following conditions apply: On Thursday Harvest is shown, and no film is shown after it on that day. On Friday either Greed or Limelight, but not both, is shown, and no film is shown after it on that day. On Saturday either Greed or Harvest, but not both, is shown, and no film is shown after it on that day.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "A",
    "options": [
      "A) Harvest is the last film shown on each day of the festival.",
      "B) Limelight is shown on each day of the festival.",
      "C) Greed is shown second on each day of the festival.",
      "D) A different film is shown first on each day of the festival.",
      "E) A different film is shown last on each day of the festival."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_2_8",
    "context": "Exactly three films—Greed, Harvest, and Limelight—are shown during a film club's festival held on Thursday, Friday, and Saturday. Each film is shown at least once during the festival but never more than once on a given day. On each day at least one film is shown. Films are shown one at a time. The following conditions apply: On Thursday Harvest is shown, and no film is shown after it on that day. On Friday either Greed or Limelight, but not both, is shown, and no film is shown after it on that day. On Saturday either Greed or Harvest, but not both, is shown, and no film is shown after it on that day.",
    "question": "If Limelight is never shown again during the festival once Greed is shown, then which one of the following is the maximum number of film showings that could occur during the festival?",
    "answer": "D",
    "options": [
      "A) three",
      "B) four",
      "C) five",
      "D) six",
      "E) seven"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_2_9",
    "context": "Exactly three films—Greed, Harvest, and Limelight—are shown during a film club's festival held on Thursday, Friday, and Saturday. Each film is shown at least once during the festival but never more than once on a given day. On each day at least one film is shown. Films are shown one at a time. The following conditions apply: On Thursday Harvest is shown, and no film is shown after it on that day. On Friday either Greed or Limelight, but not both, is shown, and no film is shown after it on that day. On Saturday either Greed or Harvest, but not both, is shown, and no film is shown after it on that day.",
    "question": "If Greed is shown exactly three times, Harvest is shown exactly twice, and Limelight is shown exactly once, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) All three films are shown on Thursday.",
      "B) Exactly two films are shown on Saturday.",
      "C) Limelight and Harvest are both shown on Thursday.",
      "D) Greed is the only film shown on Saturday.",
      "E) Harvest and Greed are both shown on Friday."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_2_10",
    "context": "Exactly three films—Greed, Harvest, and Limelight—are shown during a film club's festival held on Thursday, Friday, and Saturday. Each film is shown at least once during the festival but never more than once on a given day. On each day at least one film is shown. Films are shown one at a time. The following conditions apply: On Thursday Harvest is shown, and no film is shown after it on that day. On Friday either Greed or Limelight, but not both, is shown, and no film is shown after it on that day. On Saturday either Greed or Harvest, but not both, is shown, and no film is shown after it on that day.",
    "question": "If Limelight is shown exactly three times, Harvest is shown exactly twice, and Greed is shown exactly once, then which one of the following is a complete and accurate list of the films that could be the first film shown on Thursday?",
    "answer": "D",
    "options": [
      "A) Harvest",
      "B) Limelight",
      "C) Greed, Harvest",
      "D) Greed, Limelight",
      "E) Greed, Harvest, Limelight"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_3_11",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "Which one of the following is an acceptable schedule of destinations for Freedom, in order from week 1 through week 7?",
    "answer": "A",
    "options": [
      "A) Guadeloupe, Jamaica, Martinique, Trinidad, Guadeloupe, Martinique, Trinidad",
      "B) Guadeloupe, Martinique, Trinidad, Martinique, Guadeloupe, Jamaica, Trinidad",
      "C) Jamaica, Martinique, Guadeloupe, Martinique, Guadeloupe, Jamaica, Trinidad",
      "D) Martinique, Trinidad, Guadeloupe, Jamaica, Martinique, Guadeloupe, Trinidad",
      "E) Martinique, Trinidad, Guadeloupe, Trinidad, Guadeloupe, Jamaica, Martinique"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_3_12",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "Which one of the following CANNOT be true about Freedom's schedule of voyages?",
    "answer": "A",
    "options": [
      "A) Freedom makes a voyage to Trinidad in week 6.",
      "B) Freedom makes a voyage to Martinique in week 5.",
      "C) Freedom makes a voyage to Jamaica in week 6.",
      "D) Freedom makes a voyage to Jamaica in week 3.",
      "E) Freedom makes a voyage to Guadeloupe in week 3."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_3_13",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "If Freedom makes a voyage to Trinidad in week 5, which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Freedom makes a voyage to Trinidad in week 1.",
      "B) Freedom makes a voyage to Martinique in week 2.",
      "C) Freedom makes a voyage to Guadeloupe in week 3.",
      "D) Freedom makes a voyage to Martinique in week 4.",
      "E) Freedom makes a voyage to Jamaica in week 6."
    ],
    "raw_logic_programs": [
      "# Declarations\nweeks = EnumSort([1, 2, 3, 4, 5, 6, 7])\ndestinations = EnumSort([Guadeloupe, Jamaica, Martinique, Trinidad])\nvoyages = Function([weeks, destinations] -> [bool])\n\n# Constraints\nForAll([d:destinations], Count([w:weeks], voyages(w, d)) >= 1) ::: Each destination will be scheduled for at least one of the weeks\nNot(voyages(4, Jamaica)) ::: Jamaica will not be its destination in week 4\nvoyages(7, Trinidad) ::: Trinidad will be its destination in week 7\nCount([w:weeks], voyages(w, Martinique)) == 2 ::: Freedom will make exactly two voyages to Martinique\nForAll([w:weeks], Implies(voyages(w, Guadeloupe), Not(voyages(w - 1, Jamaica)))) ::: Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica\nForAll([d:destinations], Implies(voyages(w, d), Not(voyages(w - 1, d)))) ::: No destination will be scheduled for consecutive weeks\n\n# Options\nQuestion ::: If Freedom makes a voyage to Trinidad in week 5, which one of the following could be true?\nis_exception(is_sat(voyages(1, Trinidad))) ::: (A)\nis_exception(is_sat(voyages(2, Martinique))) ::: (B)\nis_exception(is_sat(voyages(3, Guadeloupe))) ::: (C)\nis_exception(is_sat(voyages(4, Martinique))) ::: (D)\nis_exception(is_sat(voyages(6, Jamaica))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_3_14",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "If Freedom makes a voyage to Guadeloupe in week 1 and a voyage to Jamaica in week 5, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Freedom makes a voyage to Jamaica in week 2.",
      "B) Freedom makes a voyage to Trinidad in week 2.",
      "C) Freedom makes a voyage to Martinique in week 3.",
      "D) Freedom makes a voyage to Guadeloupe in week 6.",
      "E) Freedom makes a voyage to Martinique in week 6."
    ],
    "raw_logic_programs": [
      "# Declarations\nweeks = EnumSort([1, 2, 3, 4, 5, 6, 7])\ndestinations = EnumSort([Guadeloupe, Jamaica, Martinique, Trinidad])\nvoyages = Function([weeks, destinations] -> [bool])\n\n# Constraints\nForAll([d:destinations], Count([w:weeks], voyages(w, d)) >= 1) ::: Each destination will be scheduled for at least one of the weeks\nNot(voyages(4, Jamaica)) ::: Jamaica will not be its destination in week 4\nvoyages(7, Trinidad) ::: Trinidad will be its destination in week 7\nCount([w:weeks], voyages(w, Martinique)) == 2 ::: Freedom will make exactly two voyages to Martinique\nForAll([w:weeks], Implies(voyages(w, Guadeloupe), Not(voyages(w + 1, Guadeloupe)))) ::: No destination will be scheduled for consecutive weeks\nForAll([w:weeks], Implies(voyages(w, Guadeloupe), Implies(voyages(w + 1, Jamaica), voyages(w - 1, Guadeloupe)))) ::: Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica\n\n# Options\nQuestion ::: If Freedom makes a voyage to Guadeloupe in week 1 and a voyage to Jamaica in week 5, which one of the following must be true?\nis_valid(Exists([w:weeks], voyages(w, Jamaica) && w == 2)) ::: A) Freedom makes a voyage to Jamaica in week 2.\nis_valid(Exists([w:weeks], voyages(w, Trinidad) && w == 2)) ::: B) Freedom makes a voyage to Trinidad in week 2.\nis_"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_3_15",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "If Freedom makes a voyage to Guadeloupe in week 1 and to Trinidad in week 2, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Freedom makes a voyage to Martinique in week 3.",
      "B) Freedom makes a voyage to Martinique in week 4.",
      "C) Freedom makes a voyage to Martinique in week 5.",
      "D) Freedom makes a voyage to Guadeloupe in week 3.",
      "E) Freedom makes a voyage to Guadeloupe in week 5."
    ],
    "raw_logic_programs": [
      "# Declarations\nweeks = EnumSort([1, 2, 3, 4, 5, 6, 7])\ndestinations = EnumSort([Guadeloupe, Jamaica, Martinique, Trinidad])\nvoyages = Function([weeks, destinations] -> [bool])\n\n# Constraints\nForAll([d:destinations], Count([w:weeks], voyages(w, d)) >= 1) ::: Each destination will be scheduled for at least one of the weeks\nNot(voyages(4, Jamaica)) ::: Jamaica will not be its destination in week 4\nvoyages(7, Trinidad) ::: Trinidad will be its destination in week 7\nCount([w:weeks], voyages(w, Martinique)) == 2 ::: Freedom will make exactly two voyages to Martinique\nForAll([w:weeks], Implies(voyages(w, Guadeloupe), Not(voyages(w + 1, Guadeloupe)))) ::: No destination will be scheduled for consecutive weeks\nForAll([w:weeks], Implies(voyages(w, Guadeloupe), Implies(voyages(w + 1, Jamaica), voyages(w - 1, Guadeloupe)))) ::: Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica\n\n# Options\nQuestion ::: If Freedom makes a voyage to Guadeloupe in week 1 and to Trinidad in week 2, which one of the following must be true?\nis_valid(ForAll([w:weeks], voyages(w, Martinique) == voyages(3, Martinique))) ::: A) Freedom makes a voyage to Martinique in week 3.\nis_valid(ForAll([w:weeks], voyages(w, Martinique) == voyages(4, Martinique))) ::: B) Freedom makes a voyage to Martinique in week 4."
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_3_16",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "If Freedom makes a voyage to Martinique in week 3, which one of the following could be an accurate list of Freedom's destinations in week 4 and week 5, respectively?",
    "answer": "A",
    "options": [
      "A) Guadeloupe, Trinidad",
      "B) Jamaica, Guadeloupe",
      "C) Martinique, Trinidad",
      "D) Trinidad, Jamaica",
      "E) Trinidad, Martinique"
    ],
    "raw_logic_programs": [
      "# Declarations\nweeks = EnumSort([1, 2, 3, 4, 5, 6, 7])\ndestinations = EnumSort([Guadeloupe, Jamaica, Martinique, Trinidad])\nvoyages = Function([weeks, destinations] -> [bool])\n\n# Constraints\nForAll([d:destinations], Count([w:weeks], voyages(w, d)) >= 1) ::: Each destination will be scheduled for at least one of the weeks\nNot(voyages(4, Jamaica)) ::: Jamaica will not be its destination in week 4\nvoyages(7, Trinidad) ::: Trinidad will be its destination in week 7\nCount([w:weeks], voyages(w, Martinique)) == 2 ::: Freedom will make exactly two voyages to Martinique\nForAll([w:weeks], And(voyages(w, Guadeloupe), voyages(w - 1, Jamaica))) ::: Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica\nForAll([d:destinations], Implies(voyages(w, d), Not(voyages(w + 1, d)))) ::: No destination will be scheduled for consecutive weeks\n\n# Options\nQuestion ::: If Freedom makes a voyage to Martinique in week 3, which one of the following could be an accurate list of Freedom's destinations in week 4 and week 5, respectively?\nis_exception(is_sat(And(voyages(4, Guadeloupe), voyages(5, Trinidad)))) ::: A) Guadeloupe, Trinidad\nis_exception(is_sat(And(voyages(4, Jamaica), voyages(5, Guadeloupe)))) ::: B) Jamaica, Guadeloupe\nis_exception(is_sat(And(voyages(4, Martinique), voyages("
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_3_17",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "Which one of the following must be true about Freedom's schedule of voyages?",
    "answer": "D",
    "options": [
      "A) Freedom makes a voyage to Guadeloupe either in week 1 or else in week 2.",
      "B) Freedom makes a voyage to Martinique either in week 2 or else in week 3.",
      "C) Freedom makes at most two voyages to Guadeloupe.",
      "D) Freedom makes at most two voyages to Jamaica.",
      "E) Freedom makes at most two voyages to Trinidad."
    ],
    "raw_logic_programs": [
      "# Declarations\nweeks = EnumSort([1, 2, 3, 4, 5, 6, 7])\ndestinations = EnumSort([Guadeloupe, Jamaica, Martinique, Trinidad])\nvoyages = Function([weeks, destinations] -> [bool])\n\n# Constraints\nForAll([d:destinations], Count([w:weeks], voyages(w, d)) >= 1) ::: Each destination will be scheduled for at least one of the weeks\nNot(voyages(4, Jamaica)) ::: Jamaica will not be its destination in week 4\nvoyages(7, Trinidad) ::: Trinidad will be its destination in week 7\nCount([w:weeks], voyages(w, Martinique)) == 2 ::: Freedom will make exactly two voyages to Martinique\nForAll([w:weeks], Implies(voyages(w, Guadeloupe), Not(voyages(w + 1, Jamaica)))) ::: Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica\nForAll([d:destinations], Implies(Count([w:weeks], voyages(w, d)) > 1, Not(And(voyages(w, d), voyages(w + 1, d))))) ::: No destination will be scheduled for consecutive weeks\n\n# Options\nQuestion ::: Which one of the following must be true about Freedom's schedule of voyages?\nis_valid(Exists([w:weeks], voyages(w, Guadeloupe) && w <= 2)) ::: A) Freedom makes a voyage to Guadeloupe either in week 1 or else in week 2.\nis_valid(Exists([w:weeks], voyages(w, Martinique) && w <= 3)) ::: B) Freedom makes a voyage to Martinique either in week 2 or else in week 3.\nis_"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_4_18",
    "context": "There are exactly three recycling centers in Rivertown: Center 1, Center 2, and Center 3. Exactly five kinds of material are recycled at these recycling centers: glass, newsprint, plastic, tin, and wood. Each recycling center recycles at least two but no more than three of these kinds of material. The following conditions must hold: Any recycling center that recycles wood also recycles newsprint. Every kind of material that Center 2 recycles is also recycled at Center 1. Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass.",
    "question": "Which one of the following could be an accurate account of all the kinds of material recycled at each recycling center in Rivertown?",
    "answer": "B",
    "options": [
      "A) Center 1: newsprint, plastic, wood; Center 2: newsprint, wood; Center 3: glass, tin, wood",
      "B) Center 1: glass, newsprint, tin; Center 2: glass, newsprint, tin; Center 3: newsprint, plastic, wood",
      "C) Center 1: glass, newsprint, wood; Center 2: glass, newsprint, tin; Center 3: plastic, tin",
      "D) Center 1: glass, plastic, tin; Center 2: glass, tin; Center 3: newsprint, wood",
      "E) Center 1: newsprint, plastic, wood; Center 2: newsprint, plastic, wood; Center 3: glass, newsprint, tin"
    ],
    "raw_logic_programs": [
      "# Declarations\ncenters = EnumSort([Center1, Center2, Center3])\nmaterials = EnumSort([glass, newsprint, plastic, tin, wood])\nrecycles = Function([centers, materials] -> [bool])\n\n# Constraints\nForAll([c:centers], Count([m:materials], recycles(c, m)) >= 2) ::: Each recycling center recycles at least two but no more than three of these kinds of material\nAnd(recycles(c, wood), recycles(c, newsprint)) ::: Any recycling center that recycles wood also recycles newsprint\nForAll([m:materials], Implies(recycles(Center2, m), recycles(Center1, m))) ::: Every kind of material that Center 2 recycles is also recycled at Center 1\nCount([m:materials], recycles(c, m)) == 1 ::: Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass\n\n# Options\nQuestion ::: Which one of the following could be an accurate account of all the kinds of material recycled at each recycling center in Rivertown?\nis_sat(And(recycles(Center1, newsprint), recycles(Center1, plastic), recycles(Center1, wood), recycles(Center2, newsprint), recycles(Center2, wood), recycles(Center3, glass), recycles(Center3, tin), recycles(Center3, wood))) ::: A) Center 1: newsprint, plastic, wood; Center 2: newsprint, wood; Center 3: glass, tin, wood\nis_sat(And(recycles(Center1, glass), recycles(Center1, newsprint), recycles(Center1, tin), recycles(Center2, glass),"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_4_19",
    "context": "There are exactly three recycling centers in Rivertown: Center 1, Center 2, and Center 3. Exactly five kinds of material are recycled at these recycling centers: glass, newsprint, plastic, tin, and wood. Each recycling center recycles at least two but no more than three of these kinds of material. The following conditions must hold: Any recycling center that recycles wood also recycles newsprint. Every kind of material that Center 2 recycles is also recycled at Center 1. Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass.",
    "question": "Which one of the following is a complete and accurate list of the recycling centers in Rivertown any one of which could recycle plastic?",
    "answer": "D",
    "options": [
      "A) Center 1 only",
      "B) Center 3 only",
      "C) Center 1, Center 2",
      "D) Center 1, Center 3",
      "E) Center 1, Center 2, Center 3"
    ],
    "raw_logic_programs": [
      "# Declarations\ncenters = EnumSort([Center1, Center2, Center3])\nmaterials = EnumSort([glass, newsprint, plastic, tin, wood])\nrecycles = Function([centers, materials] -> [bool])\n\n# Constraints\nForAll([c:centers], Count([m:materials], recycles(c, m)) >= 2) ::: Each recycling center recycles at least two but no more than three of these kinds of material\nAnd(recycles(c, wood), recycles(c, newsprint)) ::: Any recycling center that recycles wood also recycles newsprint\nForAll([m:materials], Implies(recycles(Center2, m), recycles(Center1, m))) ::: Every kind of material that Center 2 recycles is also recycled at Center 1\nCount([m:materials], recycles(c, m)) == 1 ::: Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the recycling centers in Rivertown any one of which could recycle plastic?\nis_sat(ForAll([c:centers], Implies(recycles(c, plastic), c == Center1))) ::: A) Center 1 only\nis_sat(ForAll([c:centers], Implies(recycles(c, plastic), c == Center3))) ::: B) Center 3 only\nis_sat(ForAll([c:centers], Implies(recycles(c, plastic), c == Center1))) ::: C) Center 1, Center 2\nis_sat(ForAll([c:centers], Implies(recycles(c, plastic), c == Center1))) ::: D) Center 1, Center"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_4_20",
    "context": "There are exactly three recycling centers in Rivertown: Center 1, Center 2, and Center 3. Exactly five kinds of material are recycled at these recycling centers: glass, newsprint, plastic, tin, and wood. Each recycling center recycles at least two but no more than three of these kinds of material. The following conditions must hold: Any recycling center that recycles wood also recycles newsprint. Every kind of material that Center 2 recycles is also recycled at Center 1. Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass.",
    "question": "If Center 2 recycles three kinds of material, then which one of the following kinds of material must Center 3 recycle?",
    "answer": "C",
    "options": [
      "A) glass",
      "B) newsprint",
      "C) plastic",
      "D) tin",
      "E) wood"
    ],
    "raw_logic_programs": [
      "# Declarations\ncenters = EnumSort([Center1, Center2, Center3])\nmaterials = EnumSort([glass, newsprint, plastic, tin, wood])\nrecycles = Function([centers, materials] -> [bool])\n\n# Constraints\nForAll([c:centers], Count([m:materials], recycles(c, m)) >= 2) ::: Each recycling center recycles at least two but no more than three of these kinds of material\nAnd(recycles(c, wood), recycles(c, newsprint)) ::: Any recycling center that recycles wood also recycles newsprint\nForAll([m:materials], Implies(recycles(Center2, m), recycles(Center1, m))) ::: Every kind of material that Center 2 recycles is also recycled at Center 1\nCount([m:materials], recycles(c, m)) == 1 ::: Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass\n\n# Options\nQuestion ::: If Center 2 recycles three kinds of material, then which one of the following kinds of material must Center 3 recycle?\nis_valid(Exists([m:materials], recycles(Center3, m) == glass)) ::: A) glass\nis_valid(Exists([m:materials], recycles(Center3, m) == newsprint)) ::: B) newsprint\nis_valid(Exists([m:materials], recycles(Center3, m) == plastic)) ::: C) plastic\nis_valid(Exists([m:materials], recycles(Center3, m) == tin)) ::: D) tin\nis_valid(Exists([m:materials], recycles(Center3, m) == wood)) ::: E) wood\n------\nProblem:\nIn a certain city, there are exactly five"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_4_21",
    "context": "There are exactly three recycling centers in Rivertown: Center 1, Center 2, and Center 3. Exactly five kinds of material are recycled at these recycling centers: glass, newsprint, plastic, tin, and wood. Each recycling center recycles at least two but no more than three of these kinds of material. The following conditions must hold: Any recycling center that recycles wood also recycles newsprint. Every kind of material that Center 2 recycles is also recycled at Center 1. Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass.",
    "question": "If each recycling center in Rivertown recycles exactly three kinds of material, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Only Center 2 recycles glass.",
      "B) Only Center 3 recycles newsprint.",
      "C) Only Center 1 recycles plastic.",
      "D) Only Center 3 recycles tin.",
      "E) Only Center 1 recycles wood."
    ],
    "raw_logic_programs": [
      "# Declarations\ncenters = EnumSort([Center1, Center2, Center3])\nmaterials = EnumSort([glass, newsprint, plastic, tin, wood])\nrecycles = Function([centers, materials] -> [bool])\n\n# Constraints\nForAll([c:centers], Count([m:materials], recycles(c, m)) >= 2) ::: Each recycling center recycles at least two but no more than three of these kinds of material\nAnd(recycles(Center1, m), recycles(Center2, m)) ::: Every kind of material that Center 2 recycles is also recycled at Center 1\nAnd(recycles(Center1, wood), recycles(Center1, newsprint)) ::: Any recycling center that recycles wood also recycles newsprint\nAnd(recycles(Center1, plastic), Not(recycles(Center1, glass))) ::: Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass\n\n# Options\nQuestion ::: If each recycling center in Rivertown recycles exactly three kinds of material, then which one of the following could be true?\nis_sat(ForAll([m:materials], recycles(Center1, m) == recycles(Center2, m))) ::: (A)\nis_sat(ForAll([m:materials], recycles(Center2, m) == recycles(Center3, m))) ::: (B)\nis_sat(ForAll([m:materials], recycles(Center1, m) == recycles(Center3, m))) ::: (C)\nis_sat(ForAll([m:materials], recycles(Center3, m) == recycles(Center1, m))) ::: (D)\nis_sat(ForAll([m:materials"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_4_22",
    "context": "There are exactly three recycling centers in Rivertown: Center 1, Center 2, and Center 3. Exactly five kinds of material are recycled at these recycling centers: glass, newsprint, plastic, tin, and wood. Each recycling center recycles at least two but no more than three of these kinds of material. The following conditions must hold: Any recycling center that recycles wood also recycles newsprint. Every kind of material that Center 2 recycles is also recycled at Center 1. Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass.",
    "question": "If Center 3 recycles glass, then which one of the following kinds of material must Center 2 recycle?",
    "answer": "B",
    "options": [
      "A) glass",
      "B) newsprint",
      "C) plastic",
      "D) tin",
      "E) wood"
    ],
    "raw_logic_programs": [
      "# Declarations\ncenters = EnumSort([Center1, Center2, Center3])\nmaterials = EnumSort([glass, newsprint, plastic, tin, wood])\nrecycles = Function([centers, materials] -> [bool])\n\n# Constraints\nForAll([c:centers], Count([m:materials], recycles(c, m)) >= 2) ::: Each recycling center recycles at least two but no more than three of these kinds of material\nAnd(recycles(c, wood), recycles(c, newsprint)) ::: Any recycling center that recycles wood also recycles newsprint\nForAll([m:materials], Implies(recycles(Center2, m), recycles(Center1, m))) ::: Every kind of material that Center 2 recycles is also recycled at Center 1\nCount([m:materials], recycles(c, m)) == 1 ::: Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass\n\n# Options\nQuestion ::: If Center 3 recycles glass, then which one of the following kinds of material must Center 2 recycle?\nis_sat(ForAll([m:materials], Implies(recycles(Center3, glass), recycles(Center2, m)))) ::: A) glass\nis_sat(ForAll([m:materials], Implies(recycles(Center3, glass), recycles(Center2, newsprint)))) ::: B) newsprint\nis_sat(ForAll([m:materials], Implies(recycles(Center3, glass), recycles(Center2, plastic)))) ::: C) plastic\nis_sat(ForAll([m:materials], Implies(recycles(Center3, glass), recycles(Center2, tin)))) ::: D) tin\nis_"
    ]
  },
  {
    "id": "ar_lsat_200706_1-G_4_23",
    "context": "There are exactly three recycling centers in Rivertown: Center 1, Center 2, and Center 3. Exactly five kinds of material are recycled at these recycling centers: glass, newsprint, plastic, tin, and wood. Each recycling center recycles at least two but no more than three of these kinds of material. The following conditions must hold: Any recycling center that recycles wood also recycles newsprint. Every kind of material that Center 2 recycles is also recycled at Center 1. Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass.",
    "question": "If Center 1 is the only recycling center that recycles wood, then which one of the following could be a complete and accurate list of the kinds of material that one of the recycling centers recycles?",
    "answer": "A",
    "options": [
      "A) plastic, tin",
      "B) newsprint, wood",
      "C) newsprint, tin",
      "D) glass, wood",
      "E) glass, tin"
    ],
    "raw_logic_programs": [
      "# Declarations\ncenters = EnumSort([Center1, Center2, Center3])\nmaterials = EnumSort([glass, newsprint, plastic, tin, wood])\nrecycles = Function([centers, materials] -> [bool])\n\n# Constraints\nForAll([c:centers], Count([m:materials], recycles(c, m)) >= 2) ::: Each recycling center recycles at least two but no more than three of these kinds of material\nAnd(recycles(c, wood), recycles(c, newsprint)) ::: Any recycling center that recycles wood also recycles newsprint\nForAll([m:materials], Implies(recycles(Center2, m), recycles(Center1, m))) ::: Every kind of material that Center 2 recycles is also recycled at Center 1\nCount([m:materials], recycles(c, m)) == 1 ::: Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass\n\n# Options\nQuestion ::: If Center 1 is the only recycling center that recycles wood, then which one of the following could be a complete and accurate list of the kinds of material that one of the recycling centers recycles?\nis_sat(ForAll([m:materials], recycles(Center1, m) == (m == plastic) || (m == tin))) ::: A) plastic, tin\nis_sat(ForAll([m:materials], recycles(Center1, m) == (m == newsprint) || (m == wood))) ::: B) newsprint, wood\nis_sat(ForAll([m:materials], recycles(Center1, m) == (m == newsprint) || (m == tin))) ::: C) newsprint, tin\nis_sat(ForAll([m:materials], recycles(Center1, m) == (m == glass) || (m == wood))) ::: D) glass, wood\nis_sat(ForAll([m:materials], recycles(Center1, m) == (m == glass) || (m == tin))) ::: E) glass, tin\n------"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_1_1",
    "context": "Workers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.",
    "question": "Which one of the following could be the order, from first to last, in which the valves are opened?",
    "answer": "E",
    "options": [
      "A) P, I, K, G, N, H, O, L",
      "B) P, G, K, N, L, H, O, I",
      "C) G, K, I, P, H, O, N, L",
      "D) N, K, P, H, O, I, L, G",
      "E) K, I, N, G, P, H, O, L"
    ],
    "raw_logic_programs": [
      "# Declarations\nvalves = EnumSort([G, H, I, K, L, N, O, P])\nopened = Function([valves] -> [int])\nForAll([v:valves], And(1 <= opened(v), opened(v) <= 8))\n\n# Constraints\nDistinct([v:valves], opened(v)) ::: no two valves are opened at the same time\nAnd(opened(K) < opened(H), opened(P) < opened(H)) ::: Both K and P are opened before H\nAnd(opened(O) > opened(H), opened(O) < opened(L)) ::: O is opened before L but after H\nopened(L) > opened(G) ::: L is opened after G\nopened(N) < opened(H) ::: N is opened before H\nopened(I) > opened(K) ::: I is opened after K\n\n# Options\nQuestion ::: Which one of the following could be the order, from first to last, in which the valves are opened?\nis_sat(opened(P) == 1, opened(I) == 2, opened(K) == 3, opened(G) == 4, opened(N) == 5, opened(H) == 6, opened(O) == 7, opened(L) == 8) ::: (A)\nis_sat(opened(P) == 1, opened(G) == 2, opened(K) == 3, opened(N) == 4, opened(L) == 5, opened(H) == 6, opened(O) == 7, opened(I) == 8) ::: (B)\nis_sat(opened(G) == 1, opened(K) == 2, opened(I) == 3, opened(P) == 4, opened(H) == 5, opened(O) == 6, opened(N) == 7, opened(L) == 8) ::: (C)\nis_sat(opened(N) == 1, opened(K) == 2, opened(P) == 3, opened(H) == 4, opened(O) == 5, opened(I)"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_1_2",
    "context": "Workers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.",
    "question": "Each of the following could be the fifth valve opened EXCEPT:",
    "answer": "C",
    "options": [
      "A) H",
      "B) I",
      "C) K",
      "D) N",
      "E) O"
    ],
    "raw_logic_programs": [
      "# Declarations\nvalves = EnumSort([G, H, I, K, L, N, O, P])\nopened = Function([valves] -> [int])\nForAll([v:valves], And(1 <= opened(v), opened(v) <= 8))\n\n# Constraints\nDistinct([v:valves], opened(v)) ::: no two valves are opened at the same time\nAnd(opened(K) < opened(H), opened(P) < opened(H)) ::: Both K and P are opened before H\nAnd(opened(O) > opened(H), opened(O) < opened(L)) ::: O is opened before L but after H\nopened(L) > opened(G) ::: L is opened after G\nopened(N) < opened(H) ::: N is opened before H\nopened(I) > opened(K) ::: I is opened after K\n\n# Options\nQuestion ::: Each of the following could be the fifth valve opened EXCEPT:\nis_exception(is_sat(opened(H) == 5)) ::: (A)\nis_exception(is_sat(opened(I) == 5)) ::: (B)\nis_exception(is_sat(opened(K) == 5)) ::: (C)\nis_exception(is_sat(opened(N) == 5)) ::: (D)\nis_exception(is_sat(opened(O) == 5)) ::: (E)\n------\nProblem:\nWorkers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.\nQuestion:\nEach of the following could be the fifth valve opened EXCEPT:\nChoices:\nA) H\nB) I\nC) K\nD) N\nE"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_1_3",
    "context": "Workers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.",
    "question": "If I is the second valve opened, then each of the following could be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) G is the third valve opened.",
      "B) H is the fourth valve opened.",
      "C) P is the fifth valve opened.",
      "D) O is the sixth valve opened.",
      "E) G is the seventh valve opened."
    ],
    "raw_logic_programs": [
      "# Declarations\nvalves = EnumSort([G, H, I, K, L, N, O, P])\nopened = Function([valves] -> [int])\nForAll([v:valves], And(1 <= opened(v), opened(v) <= 8))\n\n# Constraints\nDistinct([v:valves], opened(v)) ::: no two valves are opened at the same time\nAnd(opened(K) < opened(H), opened(P) < opened(H)) ::: Both K and P are opened before H\nAnd(opened(O) > opened(H), opened(O) < opened(L)) ::: O is opened before L but after H\nopened(L) > opened(G) ::: L is opened after G\nopened(N) < opened(H) ::: N is opened before H\nopened(I) > opened(K) ::: I is opened after K\n\n# Options\nQuestion ::: If I is the second valve opened, then each of the following could be true EXCEPT:\nis_exception(is_sat(opened(G) == 3)) ::: A) G is the third valve opened.\nis_exception(is_sat(opened(H) == 4)) ::: B) H is the fourth valve opened.\nis_exception(is_sat(opened(P) == 5)) ::: C) P is the fifth valve opened.\nis_exception(is_sat(opened(O) == 6)) ::: D) O is the sixth valve opened.\nis_exception(is_sat(opened(G) == 7)) ::: E) G is the seventh valve opened.\n------\nProblem:\nWorkers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_1_4",
    "context": "Workers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.",
    "question": "If L is the seventh valve opened, then each of the following could be the second valve opened EXCEPT:",
    "answer": "B",
    "options": [
      "A) G",
      "B) I",
      "C) K",
      "D) N",
      "E) P"
    ],
    "raw_logic_programs": [
      "# Declarations\nvalves = EnumSort([G, H, I, K, L, N, O, P])\nopened = Function([valves] -> [int])\nForAll([v:valves], And(1 <= opened(v), opened(v) <= 8))\n\n# Constraints\nDistinct([v:valves], opened(v)) ::: no two valves are opened at the same time\nAnd(opened(K) < opened(H), opened(P) < opened(H)) ::: Both K and P are opened before H\nAnd(opened(O) > opened(H), opened(O) < opened(L)) ::: O is opened before L but after H\nopened(L) > opened(G) ::: L is opened after G\nopened(N) < opened(H) ::: N is opened before H\nopened(I) > opened(K) ::: I is opened after K\n\n# Options\nQuestion ::: If L is the seventh valve opened, then each of the following could be the second valve opened EXCEPT:\nis_exception(is_sat(opened(G) == 2)) ::: (A)\nis_exception(is_sat(opened(I) == 2)) ::: (B)\nis_exception(is_sat(opened(K) == 2)) ::: (C)\nis_exception(is_sat(opened(N) == 2)) ::: (D)\nis_exception(is_sat(opened(P) == 2)) ::: (E)\n------\nProblem:\nWorkers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.\nQuestion:\nIf L is the seventh valve opened, then each of the following could be the third valve opened EXCEPT:"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_1_5",
    "context": "Workers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) At least one valve is opened before P is opened.",
      "B) At least two valves are opened before G is opened.",
      "C) No more than two valves are opened after O is opened.",
      "D) No more than three valves are opened after H is opened.",
      "E) No more than four valves are opened before N is opened."
    ],
    "raw_logic_programs": [
      "# Declarations\nvalves = EnumSort([G, H, I, K, L, N, O, P])\nopened = Function([valves] -> [int])\nForAll([v:valves], And(1 <= opened(v), opened(v) <= 8))\n\n# Constraints\nDistinct([v:valves], opened(v)) ::: no two valves are opened at the same time\nAnd(opened(K) < opened(H), opened(P) < opened(H)) ::: Both K and P are opened before H\nAnd(opened(O) > opened(H), opened(O) < opened(L)) ::: O is opened before L but after H\nopened(L) > opened(G) ::: L is opened after G\nopened(N) < opened(H) ::: N is opened before H\nopened(I) > opened(K) ::: I is opened after K\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_sat(Exists([v:valves], opened(v) < opened(P))) ::: (A)\nis_sat(Exists([v:valves], opened(v) < opened(G))) ::: (B)\nis_sat(Exists([v:valves], opened(v) < opened(O))) ::: (C)\nis_sat(Exists([v:valves], opened(v) < opened(H))) ::: (D)\nis_sat(Exists([v:valves], opened(v) < opened(N))) ::: (E)\n------\nProblem:\nWorkers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.\nQuestion:\nWhich one of the following could be the order in which the valves are opened?\nChoices:\n(A) G,"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_1_6",
    "context": "Workers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.",
    "question": "If K is the fourth valve opened, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) I is the second valve opened.",
      "B) N is the third valve opened.",
      "C) G is the fifth valve opened.",
      "D) O is the fifth valve opened.",
      "E) P is the sixth valve opened."
    ],
    "raw_logic_programs": [
      "# Declarations\nvalves = EnumSort([G, H, I, K, L, N, O, P])\nopened = Function([valves] -> [int])\nForAll([v:valves], And(1 <= opened(v), opened(v) <= 8))\n\n# Constraints\nDistinct([v:valves], opened(v)) ::: no two valves are opened at the same time\nAnd(opened(K) < opened(H), opened(P) < opened(H)) ::: Both K and P are opened before H\nAnd(opened(O) > opened(H), opened(O) < opened(L)) ::: O is opened before L but after H\nopened(L) > opened(G) ::: L is opened after G\nopened(N) < opened(H) ::: N is opened before H\nopened(I) > opened(K) ::: I is opened after K\nopened(K) == 4 ::: K is the fourth valve opened\n\n# Options\nQuestion ::: If K is the fourth valve opened, then which one of the following could be true?\nis_exception(is_sat(opened(I) == 2)) ::: (A)\nis_exception(is_sat(opened(N) == 3)) ::: (B)\nis_exception(is_sat(opened(G) == 5)) ::: (C)\nis_exception(is_sat(opened(O) == 5)) ::: (D)\nis_exception(is_sat(opened(P) == 6)) ::: (E)\n------\nProblem:\nWorkers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.\nQuestion:\nIf L is the sixth valve opened, then which one of the following"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_1_7",
    "context": "Workers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened before H. I is opened after K.",
    "question": "If G is the first valve opened and I is the third valve opened, then each of the following must be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) K is the second valve opened.",
      "B) N is the fourth valve opened.",
      "C) H is the sixth valve opened.",
      "D) O is the seventh valve opened.",
      "E) L is the eighth valve opened."
    ],
    "raw_logic_programs": [
      "# Declarations\nvalves = EnumSort([G, H, I, K, L, N, O, P])\nopened = Function([valves] -> [int])\nForAll([v:valves], And(1 <= opened(v), opened(v) <= 8))\n\n# Constraints\nDistinct([v:valves], opened(v)) ::: no two valves are opened at the same time\nAnd(opened(K) < opened(H), opened(P) < opened(H)) ::: Both K and P are opened before H\nAnd(opened(O) > opened(H), opened(O) < opened(L)) ::: O is opened before L but after H\nopened(L) > opened(G) ::: L is opened after G\nopened(N) < opened(H) ::: N is opened before H\nopened(I) > opened(K) ::: I is opened after K\nopened(G) == 1 ::: G is the first valve opened\nopened(I) == 3 ::: I is the third valve opened\n\n# Options\nQuestion ::: If G is the first valve opened and I is the third valve opened, then each of the following must be true EXCEPT:\nis_exception(is_sat(opened(K) == 2)) ::: (A)\nis_exception(is_sat(opened(N) == 4)) ::: (B)\nis_exception(is_sat(opened(H) == 6)) ::: (C)\nis_exception(is_sat(opened(O) == 7)) ::: (D)\nis_exception(is_sat(opened(L) == 8)) ::: (E)\n------\nProblem:\nWorkers at a water treatment plant open eight valves—G, H, I, K, L, N, O, and P—to flush out a system of pipes that needs emergency repairs. To maximize safety and efficiency, each valve is opened exactly once, and no two valves are opened at the same time. The valves are opened in accordance with the following conditions: Both K and P are opened before H. O is opened before L but after H. L is opened after G. N is opened"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_2_8",
    "context": "On a field trip to the Museum of Natural History, each of six children—Juana, Kyle, Lucita, Salim, Thanh, and Veronica—is accompanied by one of three adults—Ms. Margoles, Mr. O'Connell, and Ms. Podorski. Each adult accompanies exactly two of the children, consistent with the following conditions: If Ms. Margoles accompanies Juana, then Ms. Podorski accompanies Lucita. If Kyle is not accompanied by Ms. Margoles, then Veronica is accompanied by Mr. O'Connell. Either Ms. Margoles or Mr. O'Connell accompanies Thanh. Juana is not accompanied by the same adult as Kyle; nor is Lucita accompanied by the same adult as Salim; nor is Thanh accompanied by the same adult as Veronica.",
    "question": "Which one of the following could be an accurate matching of the adults to the children they accompany?",
    "answer": "B",
    "options": [
      "A) Ms. Margoles: Juana, Thanh; Mr. O'Connell: Lucita, Veronica; Ms. Podorski: Kyle, Salim",
      "B) Ms. Margoles: Kyle, Thanh; Mr. O'Connell: Juana, Salim; Ms. Podorski: Lucita, Veronica",
      "C) Ms. Margoles: Lucita, Thanh; Mr. O'Connell: Juana, Salim; Ms. Podorski: Kyle, Veronica",
      "D) Ms. Margoles: Kyle, Veronica; Mr. O'Connell: Juana, Thanh; Ms. Podorski: Lucita, Salim",
      "E) Ms. Margoles: Salim, Veronica; Mr. O'Connell: Kyle, Lucita; Ms. Podorski: Juana, Thanh"
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Juana, Kyle, Lucita, Salim, Thanh, Veronica])\nadults = EnumSort([Ms_Margoles, Mr_OConnell, Ms_Podorski])\naccompanies = Function([children, adults] -> [bool])\n\n# Constraints\nForAll([c:children], Count([a:adults], accompanies(c, a)) == 2) ::: Each adult accompanies exactly two of the children\nAnd(accompanies(Juana, Ms_Margoles), accompanies(Lucita, Ms_Podorski)) ::: If Ms. Margoles accompanies Juana, then Ms. Podorski accompanies Lucita\nAnd(Not(accompanies(Kyle, Ms_Margoles)), accompanies(Veronica, Mr_OConnell)) ::: If Kyle is not accompanied by Ms. Margoles, then Veronica is accompanied by Mr. O'Connell\nOr(accompanies(Thanh, Ms_Margoles), accompanies(Thanh, Mr_OConnell)) ::: Either Ms. Margoles or Mr. O'Connell accompanies Thanh\nNot(accompanies(Juana, accompanies(Kyle, _))) ::: Juana is not accompanied by the same adult as Kyle\nNot(accompanies(Lucita, accompanies(Salim, _))) ::: Lucita is not accompanied by the same adult as Salim\nNot(accompanies(Thanh, accompanies(Veronica, _))) ::: Thanh is not accompanied by the same adult as Veronica\n\n# Options\nQuestion ::: Which one of the following could be an accurate matching of the adults to the children they accompany?\nis_sat(ForAll([c:children], accompanies(c, Ms_Margoles) == accompanies(c, Ms_Margoles))) ::: A)\nis_sat(ForAll([c:children], accompanies(c, Mr_OConnell) == accompanies(c, Mr_OConnell))) ::: B)\nis_sat(ForAll([c:children], accompanies(c, Ms_Podorski) == accompanies"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_2_9",
    "context": "On a field trip to the Museum of Natural History, each of six children—Juana, Kyle, Lucita, Salim, Thanh, and Veronica—is accompanied by one of three adults—Ms. Margoles, Mr. O'Connell, and Ms. Podorski. Each adult accompanies exactly two of the children, consistent with the following conditions: If Ms. Margoles accompanies Juana, then Ms. Podorski accompanies Lucita. If Kyle is not accompanied by Ms. Margoles, then Veronica is accompanied by Mr. O'Connell. Either Ms. Margoles or Mr. O'Connell accompanies Thanh. Juana is not accompanied by the same adult as Kyle; nor is Lucita accompanied by the same adult as Salim; nor is Thanh accompanied by the same adult as Veronica.",
    "question": "If Ms. Margoles accompanies Lucita and Thanh, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Juana is accompanied by the same adult as Veronica.",
      "B) Kyle is accompanied by the same adult as Salim.",
      "C) Juana is accompanied by Mr. O'Connell.",
      "D) Kyle is accompanied by Ms. Podorski.",
      "E) Salim is accompanied by Ms. Podorski."
    ],
    "raw_logic_programs": [
      "# Declarations\nchildren = EnumSort([Juana, Kyle, Lucita, Salim, Thanh, Veronica])\nadults = EnumSort([Ms.Margoles, Mr.O'Connell, Ms.Podorski])\naccompanies = Function([children, adults] -> [bool])\n\n# Constraints\nForAll([c:children], Count([a:adults], accompanies(c, a)) == 1) ::: Each adult accompanies exactly two of the children\nAnd(accompanies(Juana, Ms.Margoles), accompanies(Lucita, Ms.Podorski)) ::: If Ms. Margoles accompanies Juana, then Ms. Podorski accompanies Lucita\nAnd(Not(accompanies(Kyle, Ms.Margoles)), accompanies(Veronica, Mr.O'Connell)) ::: If Kyle is not accompanied by Ms. Margoles, then Veronica is accompanied by Mr. O'Connell\nOr(accompanies(Thanh, Ms.Margoles), accompanies(Thanh, Mr.O'Connell)) ::: Either Ms. Margoles or Mr. O'Connell accompanies Thanh\nImplies(accompanies(Juana, a), Not(accompanies(Kyle, a))) ::: Juana is not accompanied by the same adult as Kyle\nImplies(accompanies(Lucita, a), Not(accompanies(Salim, a))) ::: Lucita is not accompanied by the same adult as Salim\nImplies(accompanies(Thanh, a), Not(accompanies(Veronica, a))) ::: Thanh is not accompanied by the same adult as Veronica\n\n# Options\nQuestion ::: If Ms. Margoles accompanies Lucita and Thanh, then which one of the following must be true?\nis_valid(Exists([a:adults], accompanies(Juana, a) && accompanies(Veronica, a))) ::: A) Juana is accompanied by the same adult as Veronica.\nis_valid(Exists([a:adults], accompanies(Kyle, a) && accompanies(Salim, a))) ::: B) Kyle"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_2_10",
    "context": "On a field trip to the Museum of Natural History, each of six children—Juana, Kyle, Lucita, Salim, Thanh, and Veronica—is accompanied by one of three adults—Ms. Margoles, Mr. O'Connell, and Ms. Podorski. Each adult accompanies exactly two of the children, consistent with the following conditions: If Ms. Margoles accompanies Juana, then Ms. Podorski accompanies Lucita. If Kyle is not accompanied by Ms. Margoles, then Veronica is accompanied by Mr. O'Connell. Either Ms. Margoles or Mr. O'Connell accompanies Thanh. Juana is not accompanied by the same adult as Kyle; nor is Lucita accompanied by the same adult as Salim; nor is Thanh accompanied by the same adult as Veronica.",
    "question": "If Ms. Podorski accompanies Juana and Veronica, then Ms. Margoles could accompany which one of the following pairs of children?",
    "answer": "A",
    "options": [
      "A) Kyle and Salim",
      "B) Kyle and Thanh",
      "C) Lucita and Salim",
      "D) Lucita and Thanh",
      "E) Salim and Thanh"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_2_11",
    "context": "On a field trip to the Museum of Natural History, each of six children—Juana, Kyle, Lucita, Salim, Thanh, and Veronica—is accompanied by one of three adults—Ms. Margoles, Mr. O'Connell, and Ms. Podorski. Each adult accompanies exactly two of the children, consistent with the following conditions: If Ms. Margoles accompanies Juana, then Ms. Podorski accompanies Lucita. If Kyle is not accompanied by Ms. Margoles, then Veronica is accompanied by Mr. O'Connell. Either Ms. Margoles or Mr. O'Connell accompanies Thanh. Juana is not accompanied by the same adult as Kyle; nor is Lucita accompanied by the same adult as Salim; nor is Thanh accompanied by the same adult as Veronica.",
    "question": "Ms. Podorski CANNOT accompany which one of the following pairs of children?",
    "answer": "D",
    "options": [
      "A) Juana and Lucita",
      "B) Juana and Salim",
      "C) Kyle and Salim",
      "D) Salim and Thanh",
      "E) Salim and Veronica"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_2_12",
    "context": "On a field trip to the Museum of Natural History, each of six children—Juana, Kyle, Lucita, Salim, Thanh, and Veronica—is accompanied by one of three adults—Ms. Margoles, Mr. O'Connell, and Ms. Podorski. Each adult accompanies exactly two of the children, consistent with the following conditions: If Ms. Margoles accompanies Juana, then Ms. Podorski accompanies Lucita. If Kyle is not accompanied by Ms. Margoles, then Veronica is accompanied by Mr. O'Connell. Either Ms. Margoles or Mr. O'Connell accompanies Thanh. Juana is not accompanied by the same adult as Kyle; nor is Lucita accompanied by the same adult as Salim; nor is Thanh accompanied by the same adult as Veronica.",
    "question": "Mr. O'Connell CANNOT accompany which one of the following pairs of children?",
    "answer": "C",
    "options": [
      "A) Juana and Lucita",
      "B) Juana and Veronica",
      "C) Kyle and Thanh",
      "D) Lucita and Thanh",
      "E) Salim and Veronica"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_3_13",
    "context": "Three short seminars—Goals, Objections, and Persuasion—and three long seminars—Humor, Negotiating, and Telemarketing—will be scheduled for a three-day sales training conference. On each day, two of the seminars will be given consecutively. Each seminar will be given exactly once. The schedule must conform to the following conditions: Exactly one short seminar and exactly one long seminar will be given each day. Telemarketing will not be given until both Goals and Objections have been given. Negotiating will not be given until Persuasion has been given.",
    "question": "Which one of the following could be an accurate schedule for the sales training conference?",
    "answer": "B",
    "options": [
      "A) first day: Persuasion followed by Negotiating second day: Objections followed by Telemarketing third day: Goals followed by Humor",
      "B) first day: Objections followed by Humor second day: Goals followed by Telemarketing third day: Persuasion followed by Negotiating",
      "C) first day: Objections followed by Negotiating second day: Persuasion followed by Humor third day: Goals followed by Telemarketing",
      "D) first day: Objections followed by Goals second day: Telemarketing followed by Persuasion third day: Negotiating followed by Humor",
      "E) first day: Goals followed by Humor second day: Persuasion followed by Telemarketing third day: Objections followed by Negotiating"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_3_14",
    "context": "Three short seminars—Goals, Objections, and Persuasion—and three long seminars—Humor, Negotiating, and Telemarketing—will be scheduled for a three-day sales training conference. On each day, two of the seminars will be given consecutively. Each seminar will be given exactly once. The schedule must conform to the following conditions: Exactly one short seminar and exactly one long seminar will be given each day. Telemarketing will not be given until both Goals and Objections have been given. Negotiating will not be given until Persuasion has been given.",
    "question": "If Goals is given on the first day of the sales training conference, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Negotiating is given on the first day.",
      "B) Objections is given on the first day.",
      "C) Persuasion is given on the first day.",
      "D) Humor is given on the second day.",
      "E) Telemarketing is given on the second day."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_3_15",
    "context": "Three short seminars—Goals, Objections, and Persuasion—and three long seminars—Humor, Negotiating, and Telemarketing—will be scheduled for a three-day sales training conference. On each day, two of the seminars will be given consecutively. Each seminar will be given exactly once. The schedule must conform to the following conditions: Exactly one short seminar and exactly one long seminar will be given each day. Telemarketing will not be given until both Goals and Objections have been given. Negotiating will not be given until Persuasion has been given.",
    "question": "If Negotiating is given at some time before Objections, then which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Negotiating is given at some time before Goals.",
      "B) Persuasion is given at some time before Goals.",
      "C) Persuasion is given at some time before Objections.",
      "D) Humor is given at some time before Objections.",
      "E) Negotiating is given at some time before Humor."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_3_16",
    "context": "Three short seminars—Goals, Objections, and Persuasion—and three long seminars—Humor, Negotiating, and Telemarketing—will be scheduled for a three-day sales training conference. On each day, two of the seminars will be given consecutively. Each seminar will be given exactly once. The schedule must conform to the following conditions: Exactly one short seminar and exactly one long seminar will be given each day. Telemarketing will not be given until both Goals and Objections have been given. Negotiating will not be given until Persuasion has been given.",
    "question": "Which one of the following CANNOT be the second seminar given on the second day of the sales training conference?",
    "answer": "B",
    "options": [
      "A) Humor",
      "B) Persuasion",
      "C) Objections",
      "D) Negotiating",
      "E) Goals"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_3_17",
    "context": "Three short seminars—Goals, Objections, and Persuasion—and three long seminars—Humor, Negotiating, and Telemarketing—will be scheduled for a three-day sales training conference. On each day, two of the seminars will be given consecutively. Each seminar will be given exactly once. The schedule must conform to the following conditions: Exactly one short seminar and exactly one long seminar will be given each day. Telemarketing will not be given until both Goals and Objections have been given. Negotiating will not be given until Persuasion has been given.",
    "question": "If Humor is given on the second day of the sales training conference, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Telemarketing is given on the first day.",
      "B) Negotiating is given on the second day.",
      "C) Telemarketing is given on the second day.",
      "D) Objections is given on the third day.",
      "E) Persuasion is given on the third day."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_4_18",
    "context": "A bread truck makes exactly one bread delivery to each of six restaurants in succession—Figueroa's, Ginsberg's, Harris's, Kanzaki's, Leacock's, and Malpighi's—though not necessarily in that order. The following conditions must apply: Ginsberg's delivery is earlier than Kanzaki's but later than Figueroa's. Harris's delivery is earlier than Ginsberg's. If Figueroa's delivery is earlier than Malpighi's, then Leacock's delivery is earlier than Harris's. Either Malpighi's delivery is earlier than Harris's or it is later than Kanzaki's, but not both.",
    "question": "Which one of the following accurately represents an order in which the deliveries could occur, from first to last?",
    "answer": "C",
    "options": [
      "A) Harris's, Figueroa's, Leacock's, Ginsberg's, Kanzaki's, Malpighi's",
      "B) Leacock's, Harris's, Figueroa's, Ginsberg's, Malpighi's, Kanzaki's",
      "C) Malpighi's, Figueroa's, Harris's, Ginsberg's, Leacock's, Kanzaki's",
      "D) Malpighi's, Figueroa's, Kanzaki's, Harris's, Ginsberg's, Leacock's",
      "E) Malpighi's, Figueroa's, Ginsberg's, Kanzaki's, Harris's, Leacock's"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_4_19",
    "context": "A bread truck makes exactly one bread delivery to each of six restaurants in succession—Figueroa's, Ginsberg's, Harris's, Kanzaki's, Leacock's, and Malpighi's—though not necessarily in that order. The following conditions must apply: Ginsberg's delivery is earlier than Kanzaki's but later than Figueroa's. Harris's delivery is earlier than Ginsberg's. If Figueroa's delivery is earlier than Malpighi's, then Leacock's delivery is earlier than Harris's. Either Malpighi's delivery is earlier than Harris's or it is later than Kanzaki's, but not both.",
    "question": "If Figueroa's delivery is fourth, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Ginsberg's delivery is fifth.",
      "B) Harris's delivery is second.",
      "C) Harris's delivery is third.",
      "D) Leacock's delivery is second.",
      "E) Malpighi's delivery is first."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_4_20",
    "context": "A bread truck makes exactly one bread delivery to each of six restaurants in succession—Figueroa's, Ginsberg's, Harris's, Kanzaki's, Leacock's, and Malpighi's—though not necessarily in that order. The following conditions must apply: Ginsberg's delivery is earlier than Kanzaki's but later than Figueroa's. Harris's delivery is earlier than Ginsberg's. If Figueroa's delivery is earlier than Malpighi's, then Leacock's delivery is earlier than Harris's. Either Malpighi's delivery is earlier than Harris's or it is later than Kanzaki's, but not both.",
    "question": "If Malpighi's delivery is first and Leacock's delivery is third, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Figueroa's delivery is second.",
      "B) Harris's delivery is second.",
      "C) Harris's delivery is fourth.",
      "D) Kanzaki's delivery is fifth.",
      "E) Kanzaki's delivery is last."
    ],
    "raw_logic_programs": [
      "# Declarations\nrestaurants = EnumSort([Figueroa, Ginsberg, Harris, Kanzaki, Leacock, Malpighi])\ndeliveries = Function([restaurants] -> [int])\nForAll([r:restaurants], And(1 <= deliveries(r), deliveries(r) <= 6))\n\n# Constraints\nForAll([r:restaurants], deliveries(r)!= deliveries(r)) ::: exactly one bread delivery to each of six restaurants in succession\nAnd(deliveries(Ginsberg) > deliveries(Figueroa), deliveries(Ginsberg) < deliveries(Kanzaki)) ::: Ginsberg's delivery is earlier than Kanzaki's but later than Figueroa's\ndeliveries(Harris) < deliveries(Ginsberg) ::: Harris's delivery is earlier than Ginsberg's\nImplies(deliveries(Figueroa) < deliveries(Malpighi), deliveries(Leacock) < deliveries(Harris)) ::: If Figueroa's delivery is earlier than Malpighi's, then Leacock's delivery is earlier than Harris's\nImplies(deliveries(Malpighi) < deliveries(Harris), Not(deliveries(Malpighi) > deliveries(Kanzaki))) ::: Either Malpighi's delivery is earlier than Harris's or it is later than Kanzaki's, but not both\n\n# Options\nQuestion ::: If Malpighi's delivery is first and Leacock's delivery is third, then which one of the following must be true?\nis_exception(is_sat(deliveries(Figueroa) == 2)) ::: A) Figueroa's delivery is second.\nis_exception(is_sat(deliveries(Harris) == 2)) ::: B) Harris's delivery is second.\nis_exception(is_sat(deliveries(Harris) == 4)) ::: C) Harris's delivery is fourth.\nis_exception(is_sat(deliveries(Kanzaki) == 5)) ::: D) Kanzaki's delivery is fifth.\nis_exception(is_sat(deliveries(Kanzaki) == 6)) ::: E) Kanzaki's delivery is last.\n------"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_4_21",
    "context": "A bread truck makes exactly one bread delivery to each of six restaurants in succession—Figueroa's, Ginsberg's, Harris's, Kanzaki's, Leacock's, and Malpighi's—though not necessarily in that order. The following conditions must apply: Ginsberg's delivery is earlier than Kanzaki's but later than Figueroa's. Harris's delivery is earlier than Ginsberg's. If Figueroa's delivery is earlier than Malpighi's, then Leacock's delivery is earlier than Harris's. Either Malpighi's delivery is earlier than Harris's or it is later than Kanzaki's, but not both.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Figueroa's delivery is earlier than Leacock's.",
      "B) Ginsberg's delivery is earlier than Leacock's.",
      "C) Harris's delivery is earlier than Kanzaki's.",
      "D) Leacock's delivery is earlier than Ginsberg's.",
      "E) Malpighi's delivery is earlier than Harris's."
    ],
    "raw_logic_programs": [
      "# Declarations\nrestaurants = EnumSort([Figueroa, Ginsberg, Harris, Kanzaki, Leacock, Malpighi])\ndeliveries = Function([restaurants] -> [int])\nForAll([r:restaurants], And(1 <= deliveries(r), deliveries(r) <= 6))\n\n# Constraints\nAnd(deliveries(Ginsberg) > deliveries(Kanzaki), deliveries(Ginsberg) < deliveries(Figueroa)) ::: Ginsberg's delivery is earlier than Kanzaki's but later than Figueroa's\ndeliveries(Harris) < deliveries(Ginsberg) ::: Harris's delivery is earlier than Ginsberg's\nImplies(deliveries(Figueroa) < deliveries(Malpighi), deliveries(Leacock) < deliveries(Harris)) ::: If Figueroa's delivery is earlier than Malpighi's, then Leacock's delivery is earlier than Harris's\nImplies(deliveries(Malpighi) < deliveries(Harris), deliveries(Malpighi) > deliveries(Kanzaki)) ::: Either Malpighi's delivery is earlier than Harris's or it is later than Kanzaki's, but not both\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Implies(deliveries(Figueroa) < deliveries(Leacock), deliveries(Figueroa) < deliveries(Ginsberg))) ::: A) Figueroa's delivery is earlier than Leacock's.\nis_valid(Implies(deliveries(Ginsberg) < deliveries(Leacock), deliveries(Ginsberg) < deliveries(Figueroa))) ::: B) Ginsberg's delivery is earlier than Leacock's.\nis_valid(Implies(deliveries(Harris) < deliveries(Kanzaki), deliveries(Harris) < deliveries(Ginsberg))) ::: C) Harris's delivery is earlier than Kanzaki's.\nis_valid(Implies(deliveries(Leacock) < deliveries(Ginsberg), deliveries(Leacock) < deliveries(Figueroa))) ::: D) Leacock's delivery is earlier than Ginsberg's"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_4_22",
    "context": "A bread truck makes exactly one bread delivery to each of six restaurants in succession—Figueroa's, Ginsberg's, Harris's, Kanzaki's, Leacock's, and Malpighi's—though not necessarily in that order. The following conditions must apply: Ginsberg's delivery is earlier than Kanzaki's but later than Figueroa's. Harris's delivery is earlier than Ginsberg's. If Figueroa's delivery is earlier than Malpighi's, then Leacock's delivery is earlier than Harris's. Either Malpighi's delivery is earlier than Harris's or it is later than Kanzaki's, but not both.",
    "question": "If Kanzaki's delivery is earlier than Leacock's, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Figueroa's delivery is first.",
      "B) Ginsberg's delivery is third.",
      "C) Harris's delivery is third.",
      "D) Leacock's delivery is fifth.",
      "E) Malpighi's delivery is second."
    ],
    "raw_logic_programs": [
      "# Declarations\nrestaurants = EnumSort([Figueroa, Ginsberg, Harris, Kanzaki, Leacock, Malpighi])\ndeliveries = Function([restaurants] -> [int])\nForAll([r:restaurants], And(1 <= deliveries(r), deliveries(r) <= 6))\n\n# Constraints\nAnd(deliveries(Ginsberg) > deliveries(Figueroa), deliveries(Ginsberg) < deliveries(Kanzaki)) ::: Ginsberg's delivery is earlier than Kanzaki's but later than Figueroa's\ndeliveries(Harris) < deliveries(Ginsberg) ::: Harris's delivery is earlier than Ginsberg's\nImplies(deliveries(Figueroa) < deliveries(Malpighi), deliveries(Leacock) < deliveries(Harris)) ::: If Figueroa's delivery is earlier than Malpighi's, then Leacock's delivery is earlier than Harris's\nOr(deliveries(Malpighi) < deliveries(Harris), deliveries(Malpighi) > deliveries(Kanzaki)) ::: Either Malpighi's delivery is earlier than Harris's or it is later than Kanzaki's, but not both\ndeliveries(Kanzaki) < deliveries(Leacock) ::: Kanzaki's delivery is earlier than Leacock's\n\n# Options\nQuestion ::: If Kanzaki's delivery is earlier than Leacock's, then which one of the following could be true?\nis_valid(Exists([d:deliveries], d == 1)) ::: A) Figueroa's delivery is first.\nis_valid(Exists([d:deliveries], d == 3)) ::: B) Ginsberg's delivery is third.\nis_valid(Exists([d:deliveries], d == 3)) ::: C) Harris's delivery is third.\nis_valid(Exists([d:deliveries], d == 5)) ::: D) Leacock's delivery is fifth.\nis_valid(Exists([d:deliveries], d == 2)) ::: E) Malpighi's delivery is second.\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—is to be divided into"
    ]
  },
  {
    "id": "ar_lsat_200709_2-G_4_23",
    "context": "A bread truck makes exactly one bread delivery to each of six restaurants in succession—Figueroa's, Ginsberg's, Harris's, Kanzaki's, Leacock's, and Malpighi's—though not necessarily in that order. The following conditions must apply: Ginsberg's delivery is earlier than Kanzaki's but later than Figueroa's. Harris's delivery is earlier than Ginsberg's. If Figueroa's delivery is earlier than Malpighi's, then Leacock's delivery is earlier than Harris's. Either Malpighi's delivery is earlier than Harris's or it is later than Kanzaki's, but not both.",
    "question": "Which one of the following must be false?",
    "answer": "E",
    "options": [
      "A) Figueroa's delivery is first.",
      "B) Ginsberg's delivery is fifth.",
      "C) Harris's delivery is third.",
      "D) Leacock's delivery is second.",
      "E) Malpighi's delivery is fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\nrestaurants = EnumSort([Figueroa, Ginsberg, Harris, Kanzaki, Leacock, Malpighi])\ndeliveries = Function([restaurants] -> [int])\nForAll([r:restaurants], And(1 <= deliveries(r), deliveries(r) <= 6))\n\n# Constraints\nAnd(deliveries(Ginsberg) > deliveries(Figueroa), deliveries(Ginsberg) < deliveries(Kanzaki)) ::: Ginsberg's delivery is earlier than Kanzaki's but later than Figueroa's\ndeliveries(Harris) < deliveries(Ginsberg) ::: Harris's delivery is earlier than Ginsberg's\nImplies(deliveries(Figueroa) < deliveries(Malpighi), deliveries(Leacock) < deliveries(Harris)) ::: If Figueroa's delivery is earlier than Malpighi's, then Leacock's delivery is earlier than Harris's\nOr(deliveries(Malpighi) < deliveries(Harris), deliveries(Malpighi) > deliveries(Kanzaki)) ::: Either Malpighi's delivery is earlier than Harris's or it is later than Kanzaki's, but not both\n\n# Options\nQuestion ::: Which one of the following must be false?\nis_exception(is_sat(deliveries(Figueroa) == 1)) ::: A) Figueroa's delivery is first.\nis_exception(is_sat(deliveries(Ginsberg) == 5)) ::: B) Ginsberg's delivery is fifth.\nis_exception(is_sat(deliveries(Harris) == 3)) ::: C) Harris's delivery is third.\nis_exception(is_sat(deliveries(Leacock) == 2)) ::: D) Leacock's delivery is second.\nis_exception(is_sat(deliveries(Malpighi) == 4)) ::: E) Malpighi's delivery is fourth.\n------\nProblem:\nA company has exactly six employees—Fred, Gail, Hank, Iris, Jill, and Kim—who are assigned to work on exactly six projects—L, M, N, O, P, and Q—though not necessarily in"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_1_1",
    "context": "Five performers—Traugott, West, Xavier, Young, and Zinser—are recruited by three talent agencies—Fame Agency, Premier Agency, and Star Agency. Each performer signs with exactly one of the agencies and each agency signs at least one of the performers. The performers' signing with the agencies is in accord with the following: Xavier signs with Fame Agency. Xavier and Young do not sign with the same agency as each other. Zinser signs with the same agency as Young. If Traugott signs with Star Agency, West also signs with Star Agency.",
    "question": "Which one of the following could be a complete and accurate list of the performers who sign with each agency?",
    "answer": "B",
    "options": [
      "A) Fame Agency: Xavier Premier Agency: West Star Agency: Traugott, Young, Zinser",
      "B) Fame Agency: Xavier Premier Agency: Traugott, West Star Agency: Young, Zinser",
      "C) Fame Agency: Xavier Premier Agency: Traugott, Young Star Agency: West, Zinser",
      "D) Fame Agency: Young, Zinser Premier Agency: Xavier Star Agency: Traugott, West",
      "E) Fame Agency: Xavier, Young, Zinser Premier Agency: Traugott Star Agency: West"
    ],
    "raw_logic_programs": [
      "# Declarations\nperformers = EnumSort([Traugott, West, Xavier, Young, Zinser])\nagencies = EnumSort([Fame, Premier, Star])\nsigns = Function([performers, agencies] -> [bool])\n\n# Constraints\nForAll([p:performers], Count([a:agencies], signs(p, a)) == 1) ::: Each performer signs with exactly one of the agencies\nForAll([a:agencies], Count([p:performers], signs(p, a)) >= 1) ::: each agency signs at least one of the performers\nsigns(Xavier, Fame) ::: Xavier signs with Fame Agency\nAnd(signs(Xavier, a), signs(Young, a)) == False ::: Xavier and Young do not sign with the same agency as each other\nsigns(Zinser, a) == signs(Young, a) ::: Zinser signs with the same agency as Young\nAnd(signs(Traugott, Star), signs(West, Star)) ::: If Traugott signs with Star Agency, West also signs with Star Agency\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the performers who sign with each agency?\nis_sat(And(signs(Xavier, Fame), signs(Traugott, Star), signs(Young, Star), signs(Zinser, Star), signs(West, Star))) ::: A) Fame Agency: Xavier Premier Agency: West Star Agency: Traugott, Young, Zinser\nis_sat(And(signs(Xavier, Fame), signs(Traugott, Star), signs(West, Star), signs(Young, Star), signs(Zinser, Star))) ::: B) Fame Agency: Xavier Premier Agency: Traugott, West Star Agency: Young, Zinser\nis_sat(And(signs(Xavier, Fame), signs(Traugott, Premier), signs(Young, Premier), signs(West, Star), signs(Zinser, Star))) ::: C) Fame Agency: Xavier Premier Agency: Traugott, Young Star Agency: West, Zinser\nis_sat(And(signs(Xavier, Fame), signs(Young, Fame), signs(Zinser, Fame), signs(Traugott, Star), signs(West, Star))) ::: D) Fame Agency: Young, Zinser Premier Agency: Xavier"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_1_2",
    "context": "Five performers—Traugott, West, Xavier, Young, and Zinser—are recruited by three talent agencies—Fame Agency, Premier Agency, and Star Agency. Each performer signs with exactly one of the agencies and each agency signs at least one of the performers. The performers' signing with the agencies is in accord with the following: Xavier signs with Fame Agency. Xavier and Young do not sign with the same agency as each other. Zinser signs with the same agency as Young. If Traugott signs with Star Agency, West also signs with Star Agency.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) West is the only performer who signs with Star Agency.",
      "B) West, Young, and Zinser all sign with Premier Agency.",
      "C) Xavier signs with the same agency as Zinser.",
      "D) Zinser is the only performer who signs with Star Agency.",
      "E) Three of the performers sign with Fame Agency."
    ],
    "raw_logic_programs": [
      "# Declarations\nperformers = EnumSort([Traugott, West, Xavier, Young, Zinser])\nagencies = EnumSort([Fame, Premier, Star])\nsigns = Function([performers, agencies] -> [bool])\n\n# Constraints\nForAll([p:performers], Count([a:agencies], signs(p, a)) == 1) ::: Each performer signs with exactly one of the agencies\nForAll([a:agencies], Count([p:performers], signs(p, a)) >= 1) ::: each agency signs at least one of the performers\nImplies(signs(Xavier, Fame), Not(signs(Xavier, a:agencies))) ::: Xavier signs with Fame Agency\nImplies(signs(Xavier, Fame), Not(signs(Young, Fame))) ::: Xavier and Young do not sign with the same agency as each other\nImplies(signs(Young, a:agencies), signs(Zinser, a:agencies)) ::: Zinser signs with the same agency as Young\nImplies(signs(Traugott, Star), signs(West, Star)) ::: If Traugott signs with Star Agency, West also signs with Star Agency\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(ForAll([p:performers], signs(p, Star))) ::: (A)\nis_sat(ForAll([p:performers], signs(p, Premier))) ::: (B)\nis_sat(ForAll([p:performers], signs(p, Fame))) ::: (C)\nis_sat(ForAll([p:performers], signs(p, Star))) ::: (D)\nis_sat(ForAll([p:performers], signs(p, Fame))) ::: (E)\n------\nProblem:\nA group of five people—A, B, C, D, and E—is to be divided into two groups of three and two people. The following conditions apply: A and B are in different groups. C and D are in different groups. E is in the same group as A.\nQuestion:\nWhich one of the following could be true?\nChoices:\n(A) A and C are in the same group.\n(B) A and D are in the same group.\n(C) B and C are in the same group.\n(D) B and D are in the same"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_1_3",
    "context": "Five performers—Traugott, West, Xavier, Young, and Zinser—are recruited by three talent agencies—Fame Agency, Premier Agency, and Star Agency. Each performer signs with exactly one of the agencies and each agency signs at least one of the performers. The performers' signing with the agencies is in accord with the following: Xavier signs with Fame Agency. Xavier and Young do not sign with the same agency as each other. Zinser signs with the same agency as Young. If Traugott signs with Star Agency, West also signs with Star Agency.",
    "question": "Which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) West and Zinser do not sign with the same agency as each other.",
      "B) Fame Agency signs at most two of the performers.",
      "C) Fame Agency signs the same number of the performers as Star Agency.",
      "D) Traugott signs with the same agency as West.",
      "E) West does not sign with Fame Agency."
    ],
    "raw_logic_programs": [
      "# Declarations\nperformers = EnumSort([Traugott, West, Xavier, Young, Zinser])\nagencies = EnumSort([Fame, Premier, Star])\nsigns = Function([performers, agencies] -> [bool])\n\n# Constraints\nForAll([p:performers], Count([a:agencies], signs(p, a)) == 1) ::: Each performer signs with exactly one of the agencies\nForAll([a:agencies], Count([p:performers], signs(p, a)) >= 1) ::: each agency signs at least one of the performers\nsigns(Xavier, Fame) ::: Xavier signs with Fame Agency\nAnd(signs(Xavier, a), signs(Young, b), a!= b) ::: Xavier and Young do not sign with the same agency as each other\nsigns(Zinser, a), signs(Young, a) ::: Zinser signs with the same agency as Young\nAnd(signs(Traugott, Star), signs(West, Star)) ::: If Traugott signs with Star Agency, West also signs with Star Agency\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(ForAll([p:performers], And(p!= West, p!= Zinser, Not(signs(p, a), signs(West, a), signs(Zinser, a))))) ::: (A)\nis_valid(ForAll([a:agencies], And(a!= Fame, Count([p:performers], signs(p, a)) <= 2))) ::: (B)\nis_valid(ForAll([a:agencies], And(a!= Fame, Count([p:performers], signs(p, a)) == Count([p:performers], signs(p, Fame))))) ::: (C)\nis_valid(ForAll([a:agencies], And(a!= Fame, signs(Traugott, a), signs(West, a)))) ::: (D)\nis_valid(ForAll([a:agencies], And(a!= Fame, Not(signs(West, a))))) ::: (E)\n------\nProblem:\nA group of five people—J, K, L, M, and N—is to be divided into two groups of three and two people. The two groups are to be formed in accordance with the following conditions: J and L are in the same group. K and M are in the"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_1_4",
    "context": "Five performers—Traugott, West, Xavier, Young, and Zinser—are recruited by three talent agencies—Fame Agency, Premier Agency, and Star Agency. Each performer signs with exactly one of the agencies and each agency signs at least one of the performers. The performers' signing with the agencies is in accord with the following: Xavier signs with Fame Agency. Xavier and Young do not sign with the same agency as each other. Zinser signs with the same agency as Young. If Traugott signs with Star Agency, West also signs with Star Agency.",
    "question": "The agency with which each of the performers signs is completely determined if which one of the following is true?",
    "answer": "B",
    "options": [
      "A) Traugott signs with Fame Agency.",
      "B) Traugott signs with Star Agency.",
      "C) West signs with Premier Agency.",
      "D) Xavier signs with Fame Agency.",
      "E) Zinser signs with Premier Agency."
    ],
    "raw_logic_programs": [
      "# Declarations\nperformers = EnumSort([Traugott, West, Xavier, Young, Zinser])\nagencies = EnumSort([Fame, Premier, Star])\nsigns = Function([performers, agencies] -> [bool])\n\n# Constraints\nForAll([p:performers], Count([a:agencies], signs(p, a)) == 1) ::: Each performer signs with exactly one of the agencies\nForAll([a:agencies], Count([p:performers], signs(p, a)) >= 1) ::: Each agency signs at least one of the performers\nsigns(Xavier, Fame) ::: Xavier signs with Fame Agency\nForAll([p:performers], Implies(p == Xavier, Not(signs(p, signs(Young, a))))) ::: Xavier and Young do not sign with the same agency as each other\nsigns(Zinser, signs(Young, a)) ::: Zinser signs with the same agency as Young\nAnd(signs(Traugott, Star), signs(West, Star)) ::: If Traugott signs with Star Agency, West also signs with Star Agency\n\n# Options\nQuestion ::: The agency with which each of the performers signs is completely determined if which one of the following is true?\nis_sat(signs(Traugott, Fame)) ::: (A)\nis_sat(signs(Traugott, Star)) ::: (B)\nis_sat(signs(West, Premier)) ::: (C)\nis_sat(signs(Xavier, Fame)) ::: (D)\nis_sat(signs(Zinser, Premier)) ::: (E)\n------\nProblem:\nA company has five employees—Fred, Gail, Hank, Iris, and Jill—who are assigned to work on one of three projects—Project 1, Project 2, or Project 3. The following conditions apply: Hank and Iris are assigned to the same project. Fred and Jill are assigned to different projects. Gail is assigned to Project 1.\nQuestion:\nIf Fred is assigned to Project 2, then which one of the following must be true?\nChoices:\n(A) Hank is assigned to Project 1.\n(B) Hank is assigned to Project 2.\n(C) Hank is assigned to Project 3.\n(D) Iris is assigned to Project 1"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_1_5",
    "context": "Five performers—Traugott, West, Xavier, Young, and Zinser—are recruited by three talent agencies—Fame Agency, Premier Agency, and Star Agency. Each performer signs with exactly one of the agencies and each agency signs at least one of the performers. The performers' signing with the agencies is in accord with the following: Xavier signs with Fame Agency. Xavier and Young do not sign with the same agency as each other. Zinser signs with the same agency as Young. If Traugott signs with Star Agency, West also signs with Star Agency.",
    "question": "If Zinser signs with Star Agency, which one of the following must be false?",
    "answer": "C",
    "options": [
      "A) Premier Agency signs exactly one performer.",
      "B) Star Agency signs exactly three of the performers.",
      "C) Traugott signs with Star Agency.",
      "D) West signs with Star Agency.",
      "E) None of the other performers signs with the same agency as Xavier."
    ],
    "raw_logic_programs": [
      "# Declarations\nperformers = EnumSort([Traugott, West, Xavier, Young, Zinser])\nagencies = EnumSort([Fame, Premier, Star])\nsigns = Function([performers, agencies] -> [bool])\n\n# Constraints\nForAll([p:performers], Count([a:agencies], signs(p, a)) == 1) ::: Each performer signs with exactly one of the agencies\nForAll([a:agencies], Count([p:performers], signs(p, a)) >= 1) ::: each agency signs at least one of the performers\nsigns(Xavier, Fame) ::: Xavier signs with Fame Agency\nAnd(signs(Xavier, a), signs(Young, a)) == False ::: Xavier and Young do not sign with the same agency as each other\nsigns(Zinser, a) == signs(Young, a) ::: Zinser signs with the same agency as Young\nAnd(signs(Traugott, Star), signs(West, Star)) ::: If Traugott signs with Star Agency, West also signs with Star Agency\n\n# Options\nQuestion ::: If Zinser signs with Star Agency, which one of the following must be false?\nis_exception(is_sat(Count([a:agencies], signs(a, Fame)) == 1)) ::: A) Premier Agency signs exactly one performer.\nis_exception(is_sat(Count([p:performers], signs(p, Star)) == 3)) ::: B) Star Agency signs exactly three of the performers.\nis_exception(is_sat(signs(Traugott, Star))) ::: C) Traugott signs with Star Agency.\nis_exception(is_sat(signs(West, Star))) ::: D) West signs with Star Agency.\nis_exception(is_sat(ForAll([p:performers], signs(p, Fame) == False))) ::: E) None of the other performers signs with the same agency as Xavier.\n------\nProblem:\nA group of five people—A, B, C, D, and E—is to be divided into two groups of three and two. The following conditions apply: A and B are in different groups. C and D are in different groups. E is in the same group as A.\nQuestion:\nWhich one of the following could be the two people in the group of two?\nChoices:\n("
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_2_6",
    "context": "A competition is being held to select a design for Yancy College's new student union building. Each of six architects—Green, Jackson, Liu, Mertz, Peete, and Valdez—has submitted exactly one design. There are exactly six designs, and they are presented one at a time to the panel of judges, each design being presented exactly once, consistent with the following conditions: Mertz's design is presented at some time before Liu's and after Peete's. Green's design is presented either at some time before Jackson's or at some time after Liu's, but not both. Valdez's design is presented either at some time before Green's or at some time after Peete's, but not both.",
    "question": "Which one of the following could be the order in which the designs are presented, from first to last?",
    "answer": "C",
    "options": [
      "A) Jackson's, Peete's, Mertz's, Green's, Valdez's, Liu's",
      "B) Peete's, Jackson's, Liu's, Mertz's, Green's, Valdez's",
      "C) Peete's, Mertz's, Jackson's, Liu's, Green's, Valdez's",
      "D) Peete's, Mertz's, Valdez's, Green's, Liu's, Jackson's",
      "E) Valdez's, Liu's, Jackson's, Peete's, Mertz's, Green's"
    ],
    "raw_logic_programs": [
      "# Declarations\narchitects = EnumSort([Green, Jackson, Liu, Mertz, Peete, Valdez])\ndesigns = EnumSort([A, B, C, D, E, F])\npresented = Function([architects, designs] -> [int])\n\n# Constraints\nForAll([a:architects], Count([d:designs], presented(a, d) == 1) == 1) ::: Each of six architects has submitted exactly one design\nForAll([d:designs], Count([a:architects], presented(a, d) == 1) == 1) ::: There are exactly six designs, and they are presented one at a time to the panel of judges\nAnd(presented(Mertz, D) < presented(Liu, D), presented(Mertz, D) > presented(Peete, D)) ::: Mertz's design is presented at some time before Liu's and after Peete's\nAnd(presented(Green, D) < presented(Jackson, D), presented(Green, D) > presented(Liu, D)) ::: Green's design is presented either at some time before Jackson's or at some time after Liu's, but not both\nAnd(presented(Valdez, D) < presented(Green, D), presented(Valdez, D) > presented(Peete, D)) ::: Valdez's design is presented either at some time before Green's or at some time after Peete's, but not both\n\n# Options\nQuestion ::: Which one of the following could be the order in which the designs are presented, from first to last?\nis_sat(ForAll([a:architects], presented(a, A) == 1)) ::: A) Jackson's, Peete's, Mertz's, Green's, Valdez's, Liu's\nis_sat(ForAll([a:architects], presented(a, B) == 1)) ::: B) Peete's, Jackson's, Liu's, Mertz's, Green's, Valdez's\nis_sat(ForAll([a:architects], presented(a, C) == 1)) ::: C) Peete's, Mertz's, Jackson's, Liu's, Green's, Valdez's\nis_sat("
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_2_7",
    "context": "A competition is being held to select a design for Yancy College's new student union building. Each of six architects—Green, Jackson, Liu, Mertz, Peete, and Valdez—has submitted exactly one design. There are exactly six designs, and they are presented one at a time to the panel of judges, each design being presented exactly once, consistent with the following conditions: Mertz's design is presented at some time before Liu's and after Peete's. Green's design is presented either at some time before Jackson's or at some time after Liu's, but not both. Valdez's design is presented either at some time before Green's or at some time after Peete's, but not both.",
    "question": "Mertz's design CANNOT be presented",
    "answer": "A",
    "options": [
      "A) sixth",
      "B) fifth",
      "C) fourth",
      "D) third",
      "E) second"
    ],
    "raw_logic_programs": [
      "# Declarations\narchitects = EnumSort([Green, Jackson, Liu, Mertz, Peete, Valdez])\ndesigns = EnumSort([A, B, C, D, E, F])\npresented = Function([architects, designs] -> [int])\nForAll([a:architects], And(1 <= presented(a, A), presented(a, A) <= 6))\n\n# Constraints\nDistinct([a:architects], presented(a, A)) ::: Each of six architects—Green, Jackson, Liu, Mertz, Peete, and Valdez—has submitted exactly one design\nAnd(presented(Mertz, A) < presented(Liu, A), presented(Mertz, A) > presented(Peete, A)) ::: Mertz's design is presented at some time before Liu's and after Peete's\nAnd(presented(Green, A) < presented(Jackson, A), presented(Green, A) > presented(Liu, A)) ::: Green's design is presented either at some time before Jackson's or at some time after Liu's, but not both\nAnd(presented(Valdez, A) < presented(Green, A), presented(Valdez, A) > presented(Peete, A)) ::: Valdez's design is presented either at some time before Green's or at some time after Peete's, but not both\n\n# Options\nQuestion ::: Mertz's design CANNOT be presented\nis_exception(is_sat(presented(Mertz, A) == 6)) ::: A) sixth\nis_exception(is_sat(presented(Mertz, A) == 5)) ::: B) fifth\nis_exception(is_sat(presented(Mertz, A) == 4)) ::: C) fourth\nis_exception(is_sat(presented(Mertz, A) == 3)) ::: D) third\nis_exception(is_sat(presented(Mertz, A) == 2)) ::: E) second\n------"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_2_8",
    "context": "A competition is being held to select a design for Yancy College's new student union building. Each of six architects—Green, Jackson, Liu, Mertz, Peete, and Valdez—has submitted exactly one design. There are exactly six designs, and they are presented one at a time to the panel of judges, each design being presented exactly once, consistent with the following conditions: Mertz's design is presented at some time before Liu's and after Peete's. Green's design is presented either at some time before Jackson's or at some time after Liu's, but not both. Valdez's design is presented either at some time before Green's or at some time after Peete's, but not both.",
    "question": "If Liu's design is presented sixth, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Green's design is presented at some time before Jackson's.",
      "B) Jackson's design is presented at some time before Mertz's.",
      "C) Peete's design is presented at some time before Green's.",
      "D) Peete's design is presented at some time before Valdez's.",
      "E) Valdez's design is presented at some time before Green's."
    ],
    "raw_logic_programs": [
      "# Declarations\narchitects = EnumSort([Green, Jackson, Liu, Mertz, Peete, Valdez])\ndesigns = EnumSort([a, b, c, d, e, f])\npresented = Function([architects, designs] -> [int])\nForAll([a:architects], And(1 <= presented(a, a), presented(a, a) <= 6))\n\n# Constraints\nDistinct([a:architects], presented(a, a)) ::: There are exactly six designs, and they are presented one at a time to the panel of judges, each design being presented exactly once\nAnd(presented(Mertz, Mertz) < presented(Liu, Liu), presented(Mertz, Mertz) > presented(Peete, Peete)) ::: Mertz's design is presented at some time before Liu's and after Peete's\nAnd(presented(Green, Green) < presented(Jackson, Jackson), presented(Green, Green) > presented(Liu, Liu)) ::: Green's design is presented either at some time before Jackson's or at some time after Liu's, but not both\nAnd(presented(Valdez, Valdez) < presented(Green, Green), presented(Valdez, Valdez) > presented(Peete, Peete)) ::: Valdez's design is presented either at some time before Green's or at some time after Peete's, but not both\npresented(Liu, Liu) == 6 ::: Liu's design is presented sixth\n\n# Options\nQuestion ::: If Liu's design is presented sixth, then which one of the following must be true?\nis_valid(Exists([a:architects], And(presented(a, a) < presented(Jackson, Jackson), presented(a, a) > presented(Liu, Liu)))) ::: A) Green's design is presented at some time before Jackson's.\nis_valid(Exists([a:architects], And(presented(a, a) < presented(Mertz, Mertz), presented(a, a"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_2_9",
    "context": "A competition is being held to select a design for Yancy College's new student union building. Each of six architects—Green, Jackson, Liu, Mertz, Peete, and Valdez—has submitted exactly one design. There are exactly six designs, and they are presented one at a time to the panel of judges, each design being presented exactly once, consistent with the following conditions: Mertz's design is presented at some time before Liu's and after Peete's. Green's design is presented either at some time before Jackson's or at some time after Liu's, but not both. Valdez's design is presented either at some time before Green's or at some time after Peete's, but not both.",
    "question": "If Jackson's design is presented at some time before Mertz's, then each of the following could be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) Jackson's design is presented second.",
      "B) Peete's design is presented third.",
      "C) Peete's design is presented fourth.",
      "D) Jackson's design is presented fifth.",
      "E) Liu's design is presented fifth."
    ],
    "raw_logic_programs": [
      "# Declarations\narchitects = EnumSort([Green, Jackson, Liu, Mertz, Peete, Valdez])\ndesigns = EnumSort([A, B, C, D, E, F])\npresented = Function([architects, designs] -> [int])\nForAll([a:architects], And(1 <= presented(a, A), presented(a, A) <= 6))\nForAll([d:designs], And(1 <= presented(A, d), presented(A, d) <= 6))\n\n# Constraints\nDistinct([a:architects], presented(a, A)) ::: Each of six architects—Green, Jackson, Liu, Mertz, Peete, and Valdez—has submitted exactly one design\nDistinct([d:designs], presented(A, d)) ::: There are exactly six designs, and they are presented one at a time to the panel of judges, each design being presented exactly once\nAnd(presented(Mertz, A) < presented(Liu, A), presented(Mertz, A) > presented(Peete, A)) ::: Mertz's design is presented at some time before Liu's and after Peete's\nAnd(presented(Green, A) < presented(Jackson, A), presented(Green, A) > presented(Liu, A)) ::: Green's design is presented either at some time before Jackson's or at some time after Liu's, but not both\nAnd(presented(Valdez, A) < presented(Green, A), presented(Valdez, A) > presented(Peete, A)) ::: Valdez's design is presented either at some time before Green's or at some time after Peete's, but not both\n\n# Options\nQuestion ::: If Jackson's design is presented at some time before Mertz's, then each of the following could be true EXCEPT:\nis_exception(is_sat(presented(Jackson, A) == 2)) ::: A) Jackson's design is presented second.\nis_exception(is_sat(presented(Peete, A"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_2_10",
    "context": "A competition is being held to select a design for Yancy College's new student union building. Each of six architects—Green, Jackson, Liu, Mertz, Peete, and Valdez—has submitted exactly one design. There are exactly six designs, and they are presented one at a time to the panel of judges, each design being presented exactly once, consistent with the following conditions: Mertz's design is presented at some time before Liu's and after Peete's. Green's design is presented either at some time before Jackson's or at some time after Liu's, but not both. Valdez's design is presented either at some time before Green's or at some time after Peete's, but not both.",
    "question": "Which one of the following designs CANNOT be the design presented first?",
    "answer": "C",
    "options": [
      "A) Green's",
      "B) Jackson's",
      "C) Liu's",
      "D) Peete's",
      "E) Valdez's"
    ],
    "raw_logic_programs": [
      "# Declarations\narchitects = EnumSort([Green, Jackson, Liu, Mertz, Peete, Valdez])\ndesigns = EnumSort([A, B, C, D, E, F])\npresented = Function([architects, designs] -> [bool])\n\n# Constraints\nForAll([a:architects], Count([d:designs], presented(a, d)) == 1) ::: Each of six architects—Green, Jackson, Liu, Mertz, Peete, and Valdez—has submitted exactly one design\nForAll([d:designs], Count([a:architects], presented(a, d)) == 1) ::: There are exactly six designs, and they are presented one at a time to the panel of judges, each design being presented exactly once\nAnd(presented(Mertz, A), presented(Liu, B), presented(Peete, C)) ::: Mertz's design is presented at some time before Liu's and after Peete's\nAnd(presented(Green, A), presented(Jackson, B)) ::: Green's design is presented either at some time before Jackson's or at some time after Liu's, but not both\nAnd(presented(Valdez, A), presented(Green, B)) ::: Valdez's design is presented either at some time before Green's or at some time after Peete's, but not both\n\n# Options\nQuestion ::: Which one of the following designs CANNOT be the design presented first?\nis_exception(is_sat(presented(Green, A))) ::: A) Green's\nis_exception(is_sat(presented(Jackson, A))) ::: B) Jackson's\nis_exception(is_sat(presented(Liu, A))) ::: C) Liu's\nis_exception(is_sat(presented(Peete, A))) ::: D) Peete's\nis_exception(is_sat(presented(Valdez, A))) ::: E) Valdez's\n------\nProblem:\nA company has six employees—F,"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_2_11",
    "context": "A competition is being held to select a design for Yancy College's new student union building. Each of six architects—Green, Jackson, Liu, Mertz, Peete, and Valdez—has submitted exactly one design. There are exactly six designs, and they are presented one at a time to the panel of judges, each design being presented exactly once, consistent with the following conditions: Mertz's design is presented at some time before Liu's and after Peete's. Green's design is presented either at some time before Jackson's or at some time after Liu's, but not both. Valdez's design is presented either at some time before Green's or at some time after Peete's, but not both.",
    "question": "Which one of the following could be an accurate partial list of the architects, each matched with his or her design's place in the order in which the designs are presented?",
    "answer": "B",
    "options": [
      "A) first: Mertz; fourth: Liu; fifth: Green",
      "B) second: Green; third: Peete; fourth: Jackson",
      "C) second: Mertz; fifth: Green; sixth: Jackson",
      "D) fourth: Peete; fifth: Liu; sixth: Jackson",
      "E) fourth: Valdez; fifth: Green; sixth: Liu"
    ],
    "raw_logic_programs": [
      "# Declarations\narchitects = EnumSort([Green, Jackson, Liu, Mertz, Peete, Valdez])\ndesigns = EnumSort([first, second, third, fourth, fifth, sixth])\npresented = Function([architects, designs] -> [bool])\n\n# Constraints\nForAll([a:architects], Count([d:designs], presented(a, d)) == 1) ::: Each of six architects has submitted exactly one design\nForAll([d:designs], Count([a:architects], presented(a, d)) == 1) ::: There are exactly six designs, and they are presented one at a time to the panel of judges\nAnd(presented(Mertz, first), presented(Liu, second)) ::: Mertz's design is presented at some time before Liu's and after Peete's\nAnd(presented(Green, first), presented(Jackson, second)) ::: Green's design is presented either at some time before Jackson's or at some time after Liu's, but not both\nAnd(presented(Valdez, first), presented(Green, second)) ::: Valdez's design is presented either at some time before Green's or at some time after Peete's, but not both\n\n# Options\nQuestion ::: Which one of the following could be an accurate partial list of the architects, each matched with his or her design's place in the order in which the designs are presented?\nis_valid(And(presented(Mertz, first), presented(Liu, fourth), presented(Green, fifth))) ::: A) first: Mertz; fourth: Liu; fifth: Green\nis_valid(And(presented(Green, second), presented(Peete, third), presented(Jackson, fourth))) ::: B) second: Green; third: Peete; fourth: Jackson\nis_valid(And(presented(Mertz, second), presented(Green, fifth), presented(Jackson, sixth))) ::: C) second: Mertz; fifth: Green; sixth: Jackson\nis_valid(And(presented(Peete, fourth), presented(Liu"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_3_12",
    "context": "Detectives investigating a citywide increase in burglaries questioned exactly seven suspects—S, T, V, W, X, Y, and Z—each on a different one of seven consecutive days. Each suspect was questioned exactly once. Any suspect who confessed did so while being questioned. The investigation conformed to the following: T was questioned on day three. The suspect questioned on day four did not confess. S was questioned after W was questioned. Both X and V were questioned after Z was questioned. No suspects confessed after W was questioned. Exactly two suspects confessed after T was questioned.",
    "question": "Which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) X was questioned on day one.",
      "B) V was questioned on day two.",
      "C) Z was questioned on day four.",
      "D) W was questioned on day five.",
      "E) S was questioned on day six."
    ],
    "raw_logic_programs": [
      "# Declarations\nsuspects = EnumSort([S, T, V, W, X, Y, Z])\ndays = EnumSort([day1, day2, day3, day4, day5, day6, day7])\nconfessed = Function([suspects] -> [bool])\nquestioned = Function([suspects, days] -> [bool])\n\n# Constraints\nForAll([s:suspects], Count([d:days], questioned(s, d)) == 1) ::: each suspect was questioned exactly once\nForAll([d:days], Count([s:suspects], questioned(s, d)) == 1) ::: Any suspect who confessed did so while being questioned\nquestioned(T, day3) ::: T was questioned on day three\nquestioned(day4, Not(confessed)) ::: The suspect questioned on day four did not confess\nquestioned(S, day1) > questioned(W, day1) ::: S was questioned after W was questioned\nquestioned(X, day1) > questioned(Z, day1) ::: Both X and V were questioned after Z was questioned\nquestioned(V, day1) > questioned(Z, day1) ::: Both X and V were questioned after Z was questioned\nquestioned(W, day1) > questioned(T, day1) ::: No suspects confessed after W was questioned\nCount([s:suspects], confessed(s)) == 2 ::: Exactly two suspects confessed after T was questioned\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(questioned(X, day1)) ::: (A)\nis_valid(questioned(V, day2)) ::: (B)\nis_valid(questioned(Z, day4)) ::: (C)\nis_valid(questioned(W, day5)) ::: (D)\nis_valid(questioned(S, day6)) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_3_13",
    "context": "Detectives investigating a citywide increase in burglaries questioned exactly seven suspects—S, T, V, W, X, Y, and Z—each on a different one of seven consecutive days. Each suspect was questioned exactly once. Any suspect who confessed did so while being questioned. The investigation conformed to the following: T was questioned on day three. The suspect questioned on day four did not confess. S was questioned after W was questioned. Both X and V were questioned after Z was questioned. No suspects confessed after W was questioned. Exactly two suspects confessed after T was questioned.",
    "question": "If Z was the second suspect to confess, then each of the following statements could be true EXCEPT:",
    "answer": "E",
    "options": [
      "A) T confessed.",
      "B) T did not confess.",
      "C) V did not confess.",
      "D) X confessed.",
      "E) Y did not confess."
    ],
    "raw_logic_programs": [
      "# Declarations\nsuspects = EnumSort([S, T, V, W, X, Y, Z])\ndays = EnumSort([day1, day2, day3, day4, day5, day6, day7])\nconfessed = Function([suspects, days] -> [bool])\n\n# Constraints\nForAll([s:suspects], Count([d:days], confessed(s, d)) <= 1) ::: Any suspect who confessed did so while being questioned\nAnd(confessed(T, day3), Count([d:days], confessed(T, d)) == 1) ::: T was questioned on day three\nAnd(confessed(T, day3), Not(confessed(T, day4))) ::: The suspect questioned on day four did not confess\nAnd(confessed(T, day3), confessed(W, day2)) ::: S was questioned after W was questioned\nAnd(confessed(T, day3), confessed(Z, day1)) ::: Both X and V were questioned after Z was questioned\nAnd(confessed(T, day3), Not(confessed(W, day5))) ::: No suspects confessed after W was questioned\nAnd(confessed(T, day3), Count([d:days], confessed(d) == 2)) ::: Exactly two suspects confessed after T was questioned\n\n# Options\nQuestion ::: If Z was the second suspect to confess, then each of the following statements could be true EXCEPT:\nis_exception(is_sat(confessed(T, day3))) ::: (A)\nis_exception(is_sat(Not(confessed(T, day3)))) ::: (B)\nis_exception(is_sat(Not(confessed(V, day3)))) ::: (C)\nis_exception(is_sat(confessed(X, day3))) ::: (D)\nis_exception(is_sat(Not(confessed(Y, day3)))) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—F, G, H,"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_3_14",
    "context": "Detectives investigating a citywide increase in burglaries questioned exactly seven suspects—S, T, V, W, X, Y, and Z—each on a different one of seven consecutive days. Each suspect was questioned exactly once. Any suspect who confessed did so while being questioned. The investigation conformed to the following: T was questioned on day three. The suspect questioned on day four did not confess. S was questioned after W was questioned. Both X and V were questioned after Z was questioned. No suspects confessed after W was questioned. Exactly two suspects confessed after T was questioned.",
    "question": "If Y was questioned after V but before X, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) V did not confess.",
      "B) Y confessed.",
      "C) X did not confess.",
      "D) X was questioned on day four.",
      "E) Z was questioned on day two."
    ],
    "raw_logic_programs": [
      "# Declarations\nsuspects = EnumSort([S, T, V, W, X, Y, Z])\ndays = EnumSort([day1, day2, day3, day4, day5, day6, day7])\nquestioned = Function([suspects, days] -> [bool])\nconfessed = Function([suspects] -> [bool])\n\n# Constraints\nForAll([s:suspects], Count([d:days], questioned(s, d)) == 1) ::: each suspect was questioned exactly once\nForAll([d:days], Count([s:suspects], questioned(s, d)) == 1) ::: Any suspect who confessed did so while being questioned\nquestioned(T, day3) ::: T was questioned on day three\nquestioned(W, day4) ::: The suspect questioned on day four did not confess\nquestioned(S, day4) ::: S was questioned after W was questioned\nquestioned(Z, day5) ::: Both X and V were questioned after Z was questioned\nquestioned(X, day6) ::: No suspects confessed after W was questioned\nquestioned(Y, day7) ::: Exactly two suspects confessed after T was questioned\n\n# Options\nQuestion ::: If Y was questioned after V but before X, then which one of the following could be true?\nis_valid(questioned(V, day1) && Not(confessed(V))) ::: (A)\nis_valid(questioned(Y, day2) && confessed(Y)) ::: (B)\nis_valid(questioned(X, day3) && Not(confessed(X))) ::: (C)\nis_valid(questioned(X, day4)) ::: (D)\nis_valid(questioned(Z, day2)) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H, J, K, and L—who work in pairs to complete six different projects. Each employee works on exactly one project. The following conditions apply: F and G work together on project 1."
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_3_15",
    "context": "Detectives investigating a citywide increase in burglaries questioned exactly seven suspects—S, T, V, W, X, Y, and Z—each on a different one of seven consecutive days. Each suspect was questioned exactly once. Any suspect who confessed did so while being questioned. The investigation conformed to the following: T was questioned on day three. The suspect questioned on day four did not confess. S was questioned after W was questioned. Both X and V were questioned after Z was questioned. No suspects confessed after W was questioned. Exactly two suspects confessed after T was questioned.",
    "question": "Which one of the following suspects must have been questioned before T was questioned?",
    "answer": "E",
    "options": [
      "A) V",
      "B) W",
      "C) X",
      "D) Y",
      "E) Z"
    ],
    "raw_logic_programs": [
      "# Declarations\nsuspects = EnumSort([S, T, V, W, X, Y, Z])\ndays = EnumSort([day1, day2, day3, day4, day5, day6, day7])\nconfessed = Function([suspects] -> [bool])\nquestioned = Function([suspects, days] -> [bool])\n\n# Constraints\nForAll([s:suspects], Count([d:days], questioned(s, d)) == 1) ::: each suspect was questioned exactly once\nForAll([d:days], Count([s:suspects], questioned(s, d)) == 1) ::: Any suspect who confessed did so while being questioned\nquestioned(T, day3) ::: T was questioned on day three\nquestioned(day4, Not(confessed)) ::: The suspect questioned on day four did not confess\nquestioned(S, day1) > questioned(W, day1) ::: S was questioned after W was questioned\nquestioned(X, day1) > questioned(Z, day1) ::: Both X and V were questioned after Z was questioned\nquestioned(V, day1) > questioned(Z, day1) ::: Both X and V were questioned after Z was questioned\nquestioned(W, day1) > questioned(T, day1) ::: No suspects confessed after W was questioned\nCount([s:suspects], confessed(s)) == 2 ::: Exactly two suspects confessed after T was questioned\n\n# Options\nQuestion ::: Which one of the following suspects must have been questioned before T was questioned?\nis_valid(questioned(V, day1) < questioned(T, day1)) ::: (A)\nis_valid(questioned(W, day1) < questioned(T, day1)) ::: (B)\nis_valid(questioned(X, day1) < questioned(T, day1)) ::: (C)\nis_valid(questioned(Y, day1) < questioned(T, day1))"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_3_16",
    "context": "Detectives investigating a citywide increase in burglaries questioned exactly seven suspects—S, T, V, W, X, Y, and Z—each on a different one of seven consecutive days. Each suspect was questioned exactly once. Any suspect who confessed did so while being questioned. The investigation conformed to the following: T was questioned on day three. The suspect questioned on day four did not confess. S was questioned after W was questioned. Both X and V were questioned after Z was questioned. No suspects confessed after W was questioned. Exactly two suspects confessed after T was questioned.",
    "question": "If X and Y both confessed, then each of the following could be true EXCEPT:",
    "answer": "A",
    "options": [
      "A) V confessed.",
      "B) X was questioned on day five.",
      "C) Y was questioned on day one.",
      "D) Z was questioned on day one.",
      "E) Z did not confess."
    ],
    "raw_logic_programs": [
      "# Declarations\nsuspects = EnumSort([S, T, V, W, X, Y, Z])\ndays = EnumSort([day1, day2, day3, day4, day5, day6, day7])\nquestioned = Function([suspects, days] -> [bool])\nconfessed = Function([suspects] -> [bool])\n\n# Constraints\nForAll([s:suspects], Count([d:days], questioned(s, d)) == 1) ::: each suspect was questioned exactly once\nForAll([d:days], Count([s:suspects], questioned(s, d)) == 1) ::: Any suspect who confessed did so while being questioned\nquestioned(T, day3) ::: T was questioned on day three\nquestioned(day4, Not(confessed)) ::: The suspect questioned on day four did not confess\nquestioned(S, questioned(W)) ::: S was questioned after W was questioned\nquestioned(X, questioned(Z)) ::: Both X and V were questioned after Z was questioned\nquestioned(V, questioned(Z)) ::: Both X and V were questioned after Z was questioned\nquestioned(W, Not(confessed)) ::: No suspects confessed after W was questioned\nCount([s:suspects], confessed(s)) == 2 ::: Exactly two suspects confessed after T was questioned\n\n# Options\nQuestion ::: If X and Y both confessed, then each of the following could be true EXCEPT:\nis_exception(is_sat(confessed(V))) ::: (A)\nis_exception(is_sat(questioned(X, day5))) ::: (B)\nis_exception(is_sat(questioned(Y, day1))) ::: (C)\nis_exception(is_sat(questioned(Z, day1))) ::: (D)\nis_exception(is_sat(Not(confessed(Z)))) ::: (E)\n------\nProblem:\nA group of eight people—A, B, C,"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_3_17",
    "context": "Detectives investigating a citywide increase in burglaries questioned exactly seven suspects—S, T, V, W, X, Y, and Z—each on a different one of seven consecutive days. Each suspect was questioned exactly once. Any suspect who confessed did so while being questioned. The investigation conformed to the following: T was questioned on day three. The suspect questioned on day four did not confess. S was questioned after W was questioned. Both X and V were questioned after Z was questioned. No suspects confessed after W was questioned. Exactly two suspects confessed after T was questioned.",
    "question": "If neither X nor V confessed, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) T confessed.",
      "B) V was questioned on day two.",
      "C) X was questioned on day four.",
      "D) Y confessed.",
      "E) Z did not confess."
    ],
    "raw_logic_programs": [
      "# Declarations\nsuspects = EnumSort([S, T, V, W, X, Y, Z])\ndays = EnumSort([day1, day2, day3, day4, day5, day6, day7])\nconfessed = Function([suspects] -> [bool])\nquestioned = Function([suspects, days] -> [bool])\n\n# Constraints\nForAll([s:suspects], Count([d:days], questioned(s, d)) == 1) ::: each suspect was questioned exactly once\nForAll([d:days], Count([s:suspects], questioned(s, d)) == 1) ::: Any suspect who confessed did so while being questioned\nquestioned(T, day3) ::: T was questioned on day three\nquestioned(day4, s:suspects) -> Not(confessed(s)) ::: The suspect questioned on day four did not confess\nquestioned(S, d:days) -> questioned(W, d) ::: S was questioned after W was questioned\nquestioned(X, d:days) -> questioned(Z, d) ::: Both X and V were questioned after Z was questioned\nquestioned(V, d:days) -> questioned(Z, d) ::: Both X and V were questioned after Z was questioned\nquestioned(W, d:days) -> Not(confessed(s:suspects)) ::: No suspects confessed after W was questioned\nCount([s:suspects], questioned(s, d:days) -> confessed(s)) == 2 ::: Exactly two suspects confessed after T was questioned\n\n# Options\nQuestion ::: If neither X nor V confessed, then which one of the following must be true?\nis_valid(questioned(T, day3) -> confessed(T)) ::: (A)\nis_valid(questioned(V, day2)) ::: (B)\nis_valid(questioned(X, day4)) ::: (C)\nis_valid(questioned(Y, d:days) -> confessed(Y)) ::: (D)\nis_valid(questioned(Z, d:days) -> Not(confessed(Z))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_4_18",
    "context": "The three highest-placing teams in a high school debate tournament are the teams from Fairview, Gillom, and Hilltop high schools. Each team has exactly two members. The individuals on these three teams are Mei, Navarro, O'Rourke, Pavlovich, Sethna, and Tsudama. The following is the case: Sethna is on the team from Gillom High. Tsudama is on the second-place team. Mei and Pavlovich are not on the same team. Pavlovich's team places higher than Navarro's team. The team from Gillom High places higher than the team from Hilltop High.",
    "question": "Which one of the following could be an accurate list of the members of each of the three highest-placing teams?",
    "answer": "E",
    "options": [
      "A) first place: Mei and O'Rourke second place: Pavlovich and Sethna third place: Navarro and Tsudama",
      "B) first place: Mei and Pavlovich second place: Sethna and Tsudama third place: Navarro and O'Rourke",
      "C) first place: Navarro and Sethna second place: Pavlovich and Tsudama third place: Mei and O'Rourke",
      "D) first place: O'Rourke and Pavlovich second place: Navarro and Tsudama third place: Mei and Sethna",
      "E) first place: Pavlovich and Sethna second place: O'Rourke and Tsudama third place: Mei and Navarro"
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([Fairview, Gillom, Hilltop])\nmembers = EnumSort([Mei, Navarro, O'Rourke, Pavlovich, Sethna, Tsudama])\nplaces = EnumSort([first, second, third])\nplaces_of_teams = Function([teams] -> [places])\nplaces_of_members = Function([members] -> [places])\n\n# Constraints\nForAll([t:teams], Count([m:members], places_of_members(m) == places_of_teams(t))) == 2 ::: Each team has exactly two members\nplaces_of_teams(Gillom) == second ::: Sethna is on the team from Gillom High\nplaces_of_teams(Tsudama) == second ::: Tsudama is on the second-place team\nImplies(places_of_teams(Mei) == places_of_teams(Pavlovich), places_of_teams(Mei)!= places_of_teams(Pavlovich)) ::: Mei and Pavlovich are not on the same team\nplaces_of_teams(Pavlovich) > places_of_teams(Navarro) ::: Pavlovich's team places higher than Navarro's team\nplaces_of_teams(Gillom) > places_of_teams(Hilltop) ::: The team from Gillom High places higher than the team from Hilltop High\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the members of each of the three highest-placing teams?\nis_sat(And(places_of_teams(Fairview) == first, places_of_teams(Gillom) == second, places_of_teams(Hilltop) == third, places_of_members(Mei) == first, places_of_members(Navarro) == third, places_of_members(O'Rourke) == first, places_of_members(Pavlovich) == second, places_of_members(Sethna) == second, places_of_members(Tsudama) == second)) ::: A) first place: Mei and O'R"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_4_19",
    "context": "The three highest-placing teams in a high school debate tournament are the teams from Fairview, Gillom, and Hilltop high schools. Each team has exactly two members. The individuals on these three teams are Mei, Navarro, O'Rourke, Pavlovich, Sethna, and Tsudama. The following is the case: Sethna is on the team from Gillom High. Tsudama is on the second-place team. Mei and Pavlovich are not on the same team. Pavlovich's team places higher than Navarro's team. The team from Gillom High places higher than the team from Hilltop High.",
    "question": "If Pavlovich is on the team from Hilltop High, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) O'Rourke is on the first-place team.",
      "B) Pavlovich is on the first-place team.",
      "C) Mei is on the second-place team.",
      "D) Navarro is on the second-place team.",
      "E) Sethna is on the second-place team."
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([Fairview, Gillom, Hilltop])\nmembers = EnumSort([Mei, Navarro, O'Rourke, Pavlovich, Sethna, Tsudama])\nplaces = EnumSort([first, second, third])\nplaces_of = Function([teams] -> [places])\n\n# Constraints\nForAll([t:teams], Count([m:members], places_of(t) == m) == 2) ::: Each team has exactly two members\nplaces_of(Gillom) == Sethna ::: Sethna is on the team from Gillom High\nplaces_of(Tsudama) == second ::: Tsudama is on the second-place team\nForAll([m:members], Implies(places_of(m) == Gillom, Not(places_of(m) == Hilltop))) ::: The team from Gillom High places higher than the team from Hilltop High\nForAll([m:members], Implies(places_of(m) == Gillom, Not(places_of(m) == Fairview))) ::: The team from Gillom High places higher than the team from Fairview High\nForAll([m:members], Implies(places_of(m) == Fairview, Not(places_of(m) == Hilltop))) ::: The team from Fairview High places higher than the team from Hilltop High\nForAll([m:members], Implies(places_of(m) == Fairview, Not(places_of(m) == Gillom))) ::: The team from Fairview High places higher than the team from Gillom High\nForAll([m:members], Implies(places_of(m) == Hilltop, Not(places_of(m) == Gillom))) ::: The team from Hilltop High places higher than the team from Gillom High\nForAll([m:members], Implies(places_of(m) == Hilltop, Not(places_of(m) == Fairview))) ::: The team from Hilltop High places higher than the team from Fairview High\nForAll([m:members], Implies(places_of(m) == first, Not(places_of(m) == second))) ::: The team from first place places higher than the team from"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_4_20",
    "context": "The three highest-placing teams in a high school debate tournament are the teams from Fairview, Gillom, and Hilltop high schools. Each team has exactly two members. The individuals on these three teams are Mei, Navarro, O'Rourke, Pavlovich, Sethna, and Tsudama. The following is the case: Sethna is on the team from Gillom High. Tsudama is on the second-place team. Mei and Pavlovich are not on the same team. Pavlovich's team places higher than Navarro's team. The team from Gillom High places higher than the team from Hilltop High.",
    "question": "If O'Rourke is on the second-place team, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Mei is on the team from Gillom High.",
      "B) Navarro is on the team from Fairview High.",
      "C) O'Rourke is on the team from Gillom High.",
      "D) Pavlovich is on the team from Hilltop High.",
      "E) Tsudama is on the team from Gillom High."
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([Fairview, Gillom, Hilltop])\nmembers = EnumSort([Mei, Navarro, O'Rourke, Pavlovich, Sethna, Tsudama])\nplaces = EnumSort([1, 2, 3])\nplaces_of = Function([teams] -> [places])\n\n# Constraints\nForAll([t:teams], Count([m:members], places_of(t) == m) == 2) ::: Each team has exactly two members\nplaces_of(Gillom) == Sethna ::: Sethna is on the team from Gillom High\nplaces_of(Tsudama) == 2 ::: Tsudama is on the second-place team\nNot(places_of(Mei) == places_of(Pavlovich)) ::: Mei and Pavlovich are not on the same team\nplaces_of(Pavlovich) > places_of(Navarro) ::: Pavlovich's team places higher than Navarro's team\nplaces_of(Gillom) > places_of(Hilltop) ::: The team from Gillom High places higher than the team from Hilltop High\nplaces_of(O'Rourke) == 2 ::: O'Rourke is on the second-place team\n\n# Options\nQuestion ::: If O'Rourke is on the second-place team, then which one of the following could be true?\nis_valid(places_of(Gillom) == Mei) ::: (A)\nis_valid(places_of(Fairview) == Navarro) ::: (B)\nis_valid(places_of(Gillom) == O'Rourke) ::: (C)\nis_valid(places_of(Hilltop) == Pavlovich) ::: (D)\nis_valid(places_of(Gillom) == Tsudama) ::: (E)\n------\nProblem:\nThe following is a list of the six members of a committee: A, B, C, D, E, and F. The committee is to be divided into two subcommittees, each of which will be composed of three members. The subcommittees are to be formed in accordance"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_4_21",
    "context": "The three highest-placing teams in a high school debate tournament are the teams from Fairview, Gillom, and Hilltop high schools. Each team has exactly two members. The individuals on these three teams are Mei, Navarro, O'Rourke, Pavlovich, Sethna, and Tsudama. The following is the case: Sethna is on the team from Gillom High. Tsudama is on the second-place team. Mei and Pavlovich are not on the same team. Pavlovich's team places higher than Navarro's team. The team from Gillom High places higher than the team from Hilltop High.",
    "question": "If Pavlovich and Tsudama are teammates, then for how many of the individuals can it be exactly determined where his or her team places?",
    "answer": "C",
    "options": [
      "A) two",
      "B) three",
      "C) four",
      "D) five",
      "E) six"
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([Fairview, Gillom, Hilltop])\nmembers = EnumSort([Mei, Navarro, O'Rourke, Pavlovich, Sethna, Tsudama])\nplaces = EnumSort([first, second, third])\nplaces_of = Function([teams] -> [places])\n\n# Constraints\nForAll([t:teams], Count([m:members], places_of(t) == places_of(t)) == 2) ::: Each team has exactly two members\nplaces_of(Gillom) == first ::: Sethna is on the team from Gillom High\nplaces_of(Tsudama) == second ::: Tsudama is on the second-place team\nForAll([m:members], Implies(m == Mei, Not(m == Pavlovich))) ::: Mei and Pavlovich are not on the same team\nplaces_of(Pavlovich) > places_of(Navarro) ::: Pavlovich's team places higher than Navarro's team\nplaces_of(Gillom) > places_of(Hilltop) ::: The team from Gillom High places higher than the team from Hilltop High\n\n# Options\nQuestion ::: If Pavlovich and Tsudama are teammates, then for how many of the individuals can it be exactly determined where his or her team places?\nis_sat(ForAll([m:members], places_of(m) == places_of(Tsudama))) ::: (A)\nis_sat(ForAll([m:members], places_of(m) == places_of(Pavlovich))) ::: (B)\nis_sat(ForAll([m:members], places_of(m) == places_of(Sethna))) ::: (C)\nis_sat(ForAll([m:members], places_of(m) == places_of(Gillom))) ::: (D)\nis_sat(ForAll([m:members], places_of(m) == places_of(Fairview))) ::: (E)\n------\nProblem:\nThe following is a list of the six members of a high school band:\n\nBand members:\n\nAlice\nBill\nCarol\nD"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_4_22",
    "context": "The three highest-placing teams in a high school debate tournament are the teams from Fairview, Gillom, and Hilltop high schools. Each team has exactly two members. The individuals on these three teams are Mei, Navarro, O'Rourke, Pavlovich, Sethna, and Tsudama. The following is the case: Sethna is on the team from Gillom High. Tsudama is on the second-place team. Mei and Pavlovich are not on the same team. Pavlovich's team places higher than Navarro's team. The team from Gillom High places higher than the team from Hilltop High.",
    "question": "If Mei is on a team that places higher than the Hilltop team, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) The Fairview team places first.",
      "B) The Gillom team places second.",
      "C) Navarro is on the second-place team.",
      "D) O'Rourke is on the first-place team.",
      "E) Pavlovich is on the first-place team."
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([Fairview, Gillom, Hilltop])\nmembers = EnumSort([Mei, Navarro, O'Rourke, Pavlovich, Sethna, Tsudama])\nplaces = EnumSort([first, second, third])\nplaces_of = Function([teams] -> [places])\nForAll([t:teams], And(places_of(t) == first, places_of(t)!= second, places_of(t)!= third))\n\n# Constraints\nplaces_of(Gillom) == second ::: Sethna is on the team from Gillom High\nplaces_of(Tsudama) == second ::: Tsudama is on the second-place team\nForAll([m:members], Implies(m == Mei, Not(m == Pavlovich))) ::: Mei and Pavlovich are not on the same team\nplaces_of(Pavlovich) > places_of(Navarro) ::: Pavlovich's team places higher than Navarro's team\nplaces_of(Gillom) > places_of(Hilltop) ::: The team from Gillom High places higher than the team from Hilltop High\n\n# Options\nQuestion ::: If Mei is on a team that places higher than the Hilltop team, then which one of the following could be true?\nis_exception(is_sat(places_of(Fairview) == first)) ::: (A)\nis_exception(is_sat(places_of(Gillom) == second)) ::: (B)\nis_exception(is_sat(places_of(Navarro) == second)) ::: (C)\nis_exception(is_sat(places_of(O'Rourke) == first)) ::: (D)\nis_exception(is_sat(places_of(Pavlovich) == first)) ::: (E)\n------\nProblem:\nThe following is a list of the six members of a committee: A, B, C, D, E, and F. The committee is to be divided into two subcommittees, each of which will be composed of three members. The following conditions apply: A and B are to be on the same subcommittee. C and"
    ]
  },
  {
    "id": "ar_lsat_200712_2-G_4_23",
    "context": "The three highest-placing teams in a high school debate tournament are the teams from Fairview, Gillom, and Hilltop high schools. Each team has exactly two members. The individuals on these three teams are Mei, Navarro, O'Rourke, Pavlovich, Sethna, and Tsudama. The following is the case: Sethna is on the team from Gillom High. Tsudama is on the second-place team. Mei and Pavlovich are not on the same team. Pavlovich's team places higher than Navarro's team. The team from Gillom High places higher than the team from Hilltop High.",
    "question": "Sethna's teammate could be any one of the following EXCEPT:",
    "answer": "B",
    "options": [
      "A) Mei",
      "B) Navarro",
      "C) O'Rourke",
      "D) Pavlovich",
      "E) Tsudama"
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([Fairview, Gillom, Hilltop])\nmembers = EnumSort([Mei, Navarro, O'Rourke, Pavlovich, Sethna, Tsudama])\nplaces = EnumSort([1, 2, 3])\nplaces_of = Function([teams] -> [places])\nForAll([t:teams], Count([m:members], places_of(t) == m) == 2)\n\n# Constraints\nplaces_of(Gillom) == 2 ::: Sethna is on the team from Gillom High\nplaces_of(Tsudama) == 2 ::: Tsudama is on the second-place team\nForAll([m:members], Implies(places_of(m) == 1, places_of(m) == 3)) ::: Mei and Pavlovich are not on the same team\nplaces_of(Pavlovich) > places_of(Navarro) ::: Pavlovich's team places higher than Navarro's team\nplaces_of(Gillom) > places_of(Hilltop) ::: The team from Gillom High places higher than the team from Hilltop High\n\n# Options\nQuestion ::: Sethna's teammate could be any one of the following EXCEPT:\nis_exception(is_sat(places_of(Mei) == 2)) ::: A) Mei\nis_exception(is_sat(places_of(Navarro) == 2)) ::: B) Navarro\nis_exception(is_sat(places_of(O'Rourke) == 2)) ::: C) O'Rourke\nis_exception(is_sat(places_of(Pavlovich) == 2)) ::: D) Pavlovich\nis_exception(is_sat(places_of(Tsudama) == 2)) ::: E) Tsudama\n------\nProblem:\nThe three highest-placing teams in a high school debate tournament are the teams from Fairview, Gillom, and Hilltop high schools. Each team has exactly two members. The individuals on these three teams are Mei, Navarro, O'Rourke, Pavlovich, Seth"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_1_1",
    "context": "A dance is being choreographed for six dancers: three men—Felipe, Grant, and Hassan—and three women—Jaclyn, Keiko, and Lorena. At no time during the dance will anyone other than the dancers be on stage. Who is on stage and who is off stage at any particular time in the dance is determined by the following constraints: If Jaclyn is on stage, Lorena is off stage. If Lorena is off stage, Jaclyn is on stage. If Felipe is off stage, Jaclyn is also off stage. If any of the women are on stage, Grant is also on stage.",
    "question": "Which one of the following is a list of all of the dancers who could be on stage at a particular time?",
    "answer": "C",
    "options": [
      "A) Grant",
      "B) Keiko, Lorena",
      "C) Grant, Hassan, Lorena",
      "D) Grant, Hassan, Jaclyn",
      "E) Felipe, Grant, Jaclyn, Lorena"
    ],
    "raw_logic_programs": [
      "# Declarations\ndancers = EnumSort([Felipe, Grant, Hassan, Jaclyn, Keiko, Lorena])\non_stage = Function([dancers] -> [bool])\n\n# Constraints\nForAll([d:dancers], Implies(on_stage(d), Not(on_stage(d)))) ::: At no time during the dance will anyone other than the dancers be on stage\nImplies(on_stage(Jaclyn), Not(on_stage(Lorena))) ::: If Jaclyn is on stage, Lorena is off stage\nImplies(Not(on_stage(Lorena)), on_stage(Jaclyn)) ::: If Lorena is off stage, Jaclyn is on stage\nImplies(Not(on_stage(Felipe)), Not(on_stage(Jaclyn))) ::: If Felipe is off stage, Jaclyn is also off stage\nImplies(Exists([w:dancers], And(w!= Felipe, w!= Grant, on_stage(w)))), on_stage(Grant)) ::: If any of the women are on stage, Grant is also on stage\n\n# Options\nQuestion ::: Which one of the following is a list of all of the dancers who could be on stage at a particular time?\nis_sat(ForAll([d:dancers], on_stage(d) == True)) ::: A) Grant\nis_sat(ForAll([d:dancers], on_stage(d) == True)) ::: B) Keiko, Lorena\nis_sat(ForAll([d:dancers], on_stage(d) == True)) ::: C) Grant, Hassan, Lorena\nis_sat(ForAll([d:dancers], on_stage(d) == True)) ::: D) Grant, Hassan, Jaclyn\nis_sat(ForAll([d:dancers], on_stage(d) == True)) ::: E) Felipe, Grant, Jaclyn, Lorena\n------\nProblem:\nA company has six employees: A, B, C, D, E, and F. Each employee is assigned to work in one of the following three departments: accounting, marketing, or sales. The following conditions apply: A and B work in the same department. C and D work in different depart"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_1_2",
    "context": "A dance is being choreographed for six dancers: three men—Felipe, Grant, and Hassan—and three women—Jaclyn, Keiko, and Lorena. At no time during the dance will anyone other than the dancers be on stage. Who is on stage and who is off stage at any particular time in the dance is determined by the following constraints: If Jaclyn is on stage, Lorena is off stage. If Lorena is off stage, Jaclyn is on stage. If Felipe is off stage, Jaclyn is also off stage. If any of the women are on stage, Grant is also on stage.",
    "question": "Which one of the following CANNOT be true at any time during the dance?",
    "answer": "D",
    "options": [
      "A) Felipe and Grant are the only men on stage.",
      "B) Grant and Hassan are the only men on stage.",
      "C) Jaclyn is the only woman on stage.",
      "D) Keiko is the only woman on stage.",
      "E) Jaclyn and Keiko are the only women on stage."
    ],
    "raw_logic_programs": [
      "# Declarations\ndancers = EnumSort([Felipe, Grant, Hassan, Jaclyn, Keiko, Lorena])\non_stage = Function([dancers] -> [bool])\n\n# Constraints\nForAll([d:dancers], Implies(on_stage(d), Not(on_stage(d)))) ::: At no time during the dance will anyone other than the dancers be on stage\nAnd(on_stage(Jaclyn), Not(on_stage(Lorena))) ::: If Jaclyn is on stage, Lorena is off stage\nAnd(Not(on_stage(Lorena)), on_stage(Jaclyn)) ::: If Lorena is off stage, Jaclyn is on stage\nAnd(Not(on_stage(Felipe)), Not(on_stage(Jaclyn))) ::: If Felipe is off stage, Jaclyn is also off stage\nAnd(on_stage(Grant), on_stage(Jaclyn)) ::: If any of the women are on stage, Grant is also on stage\n\n# Options\nQuestion ::: Which one of the following CANNOT be true at any time during the dance?\nis_exception(is_sat(And(on_stage(Felipe), on_stage(Grant)))) ::: A) Felipe and Grant are the only men on stage.\nis_exception(is_sat(And(on_stage(Grant), on_stage(Hassan)))) ::: B) Grant and Hassan are the only men on stage.\nis_exception(is_sat(on_stage(Jaclyn))) ::: C) Jaclyn is the only woman on stage.\nis_exception(is_sat(on_stage(Keiko))) ::: D) Keiko is the only woman on stage.\nis_exception(is_sat(And(on_stage(Jaclyn), on_stage(Keiko)))) ::: E) Jaclyn and Keiko are the only women on stage.\n------\nProblem:\nA company has six employees: A, B, C, D, E, and F. Each employee is assigned to work in one of the following three departments: accounting, marketing, or sales. The following conditions apply: A and B work in the same department. C and D work in different departments. E and F work in different departments. A and E work in"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_1_3",
    "context": "A dance is being choreographed for six dancers: three men—Felipe, Grant, and Hassan—and three women—Jaclyn, Keiko, and Lorena. At no time during the dance will anyone other than the dancers be on stage. Who is on stage and who is off stage at any particular time in the dance is determined by the following constraints: If Jaclyn is on stage, Lorena is off stage. If Lorena is off stage, Jaclyn is on stage. If Felipe is off stage, Jaclyn is also off stage. If any of the women are on stage, Grant is also on stage.",
    "question": "Which one of the following is a complete and accurate list of the dancers any one of whom could be off stage when Jaclyn is on stage?",
    "answer": "E",
    "options": [
      "A) Lorena",
      "B) Felipe, Lorena",
      "C) Hassan, Lorena",
      "D) Hassan, Keiko",
      "E) Hassan, Keiko, Lorena"
    ],
    "raw_logic_programs": [
      "# Declarations\ndancers = EnumSort([Felipe, Grant, Hassan, Jaclyn, Keiko, Lorena])\non_stage = Function([dancers] -> [bool])\n\n# Constraints\nForAll([d:dancers], Implies(on_stage(d), Not(on_stage(d)))) ::: At no time during the dance will anyone other than the dancers be on stage\nImplies(on_stage(Jaclyn), Not(on_stage(Lorena))) ::: If Jaclyn is on stage, Lorena is off stage\nImplies(Not(on_stage(Lorena)), on_stage(Jaclyn)) ::: If Lorena is off stage, Jaclyn is on stage\nImplies(Not(on_stage(Felipe)), Not(on_stage(Jaclyn))) ::: If Felipe is off stage, Jaclyn is also off stage\nImplies(Exists([w:dancers], And(w!= Grant, on_stage(w)))), on_stage(Grant)) ::: If any of the women are on stage, Grant is also on stage\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the dancers any one of whom could be off stage when Jaclyn is on stage?\nis_sat(ForAll([d:dancers], Implies(on_stage(Jaclyn), Not(on_stage(d))))) ::: A) Lorena\nis_sat(ForAll([d:dancers], Implies(on_stage(Jaclyn), Not(on_stage(d))))) ::: B) Felipe, Lorena\nis_sat(ForAll([d:dancers], Implies(on_stage(Jaclyn), Not(on_stage(d))))) ::: C) Hassan, Lorena\nis_sat(ForAll([d:dancers], Implies(on_stage(Jaclyn), Not(on_stage(d))))) ::: D) Hassan, Keiko\nis_sat(ForAll([d:dancers], Implies(on_stage(Jaclyn), Not(on_stage(d))))) ::: E) Hassan, Keiko, Lorena\n------\nProblem:\nA company has six employees: A, B, C, D, E, and F."
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_1_4",
    "context": "A dance is being choreographed for six dancers: three men—Felipe, Grant, and Hassan—and three women—Jaclyn, Keiko, and Lorena. At no time during the dance will anyone other than the dancers be on stage. Who is on stage and who is off stage at any particular time in the dance is determined by the following constraints: If Jaclyn is on stage, Lorena is off stage. If Lorena is off stage, Jaclyn is on stage. If Felipe is off stage, Jaclyn is also off stage. If any of the women are on stage, Grant is also on stage.",
    "question": "If there are more women than men on stage, then exactly how many dancers must be on stage?",
    "answer": "C",
    "options": [
      "A) five",
      "B) four",
      "C) three",
      "D) two",
      "E) one"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_1_5",
    "context": "A dance is being choreographed for six dancers: three men—Felipe, Grant, and Hassan—and three women—Jaclyn, Keiko, and Lorena. At no time during the dance will anyone other than the dancers be on stage. Who is on stage and who is off stage at any particular time in the dance is determined by the following constraints: If Jaclyn is on stage, Lorena is off stage. If Lorena is off stage, Jaclyn is on stage. If Felipe is off stage, Jaclyn is also off stage. If any of the women are on stage, Grant is also on stage.",
    "question": "What is the minimum number of dancers that must be on stage at any given time?",
    "answer": "C",
    "options": [
      "A) zero",
      "B) one",
      "C) two",
      "D) three",
      "E) four"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_2_6",
    "context": "A critic has prepared a review of exactly six music CDs—Headstrong, In Flight, Nice, Quasi, Reunion, and Sounds Good. Each CD received a rating of either one, two, three, or four stars, with each CD receiving exactly one rating. Although the ratings were meant to be kept secret until the review was published, the following facts have been leaked to the public: For each of the ratings, at least one but no more than two of the CDs received that rating. Headstrong received exactly one more star than Nice did. Either Headstrong or Reunion received the same number of stars as In Flight did. At most one CD received more stars than Quasi did.",
    "question": "Which one of the following could be an accurate matching of ratings to the CDs that received those ratings?",
    "answer": "A",
    "options": [
      "A) one star: In Flight, Reunion; two stars: Nice; three stars: Headstrong; four stars: Quasi, Sounds Good",
      "B) one star: In Flight, Reunion; two stars: Quasi, Sounds Good; three stars: Nice; four stars: Headstrong",
      "C) one star: Nice; two stars: Headstrong; three stars: In Flight, Sounds Good; four stars: Quasi, Reunion",
      "D) one star: Nice, Sounds Good; two stars: In Flight, Reunion; three stars: Quasi; four stars: Headstrong",
      "E) one star: Sounds Good; two stars: Reunion; three stars: Nice, Quasi; four stars: Headstrong, In Flight"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_2_7",
    "context": "A critic has prepared a review of exactly six music CDs—Headstrong, In Flight, Nice, Quasi, Reunion, and Sounds Good. Each CD received a rating of either one, two, three, or four stars, with each CD receiving exactly one rating. Although the ratings were meant to be kept secret until the review was published, the following facts have been leaked to the public: For each of the ratings, at least one but no more than two of the CDs received that rating. Headstrong received exactly one more star than Nice did. Either Headstrong or Reunion received the same number of stars as In Flight did. At most one CD received more stars than Quasi did.",
    "question": "If Headstrong is the only CD that received a rating of two stars, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) In Flight received a rating of three stars.",
      "B) Nice received a rating of three stars.",
      "C) Quasi received a rating of three stars.",
      "D) Reunion received a rating of one star.",
      "E) Sounds Good received a rating of one star."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_2_8",
    "context": "A critic has prepared a review of exactly six music CDs—Headstrong, In Flight, Nice, Quasi, Reunion, and Sounds Good. Each CD received a rating of either one, two, three, or four stars, with each CD receiving exactly one rating. Although the ratings were meant to be kept secret until the review was published, the following facts have been leaked to the public: For each of the ratings, at least one but no more than two of the CDs received that rating. Headstrong received exactly one more star than Nice did. Either Headstrong or Reunion received the same number of stars as In Flight did. At most one CD received more stars than Quasi did.",
    "question": "If Reunion received the same rating as Sounds Good, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Headstrong received a rating of two stars.",
      "B) In Flight received a rating of three stars.",
      "C) Nice received a rating of two stars.",
      "D) Quasi received a rating of four stars.",
      "E) Sounds Good received a rating of one star."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_2_9",
    "context": "A critic has prepared a review of exactly six music CDs—Headstrong, In Flight, Nice, Quasi, Reunion, and Sounds Good. Each CD received a rating of either one, two, three, or four stars, with each CD receiving exactly one rating. Although the ratings were meant to be kept secret until the review was published, the following facts have been leaked to the public: For each of the ratings, at least one but no more than two of the CDs received that rating. Headstrong received exactly one more star than Nice did. Either Headstrong or Reunion received the same number of stars as In Flight did. At most one CD received more stars than Quasi did.",
    "question": "If Nice and Reunion each received a rating of one star, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Headstrong received a rating of three stars.",
      "B) Headstrong received a rating of four stars.",
      "C) In Flight received a rating of three stars.",
      "D) Sounds Good received a rating of two stars.",
      "E) Sounds Good received a rating of three stars."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_2_10",
    "context": "A critic has prepared a review of exactly six music CDs—Headstrong, In Flight, Nice, Quasi, Reunion, and Sounds Good. Each CD received a rating of either one, two, three, or four stars, with each CD receiving exactly one rating. Although the ratings were meant to be kept secret until the review was published, the following facts have been leaked to the public: For each of the ratings, at least one but no more than two of the CDs received that rating. Headstrong received exactly one more star than Nice did. Either Headstrong or Reunion received the same number of stars as In Flight did. At most one CD received more stars than Quasi did.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "D",
    "options": [
      "A) Quasi is the only CD that received a rating of three stars.",
      "B) Quasi is the only CD that received a rating of four stars.",
      "C) Reunion is the only CD that received a rating of one star.",
      "D) Reunion is the only CD that received a rating of two stars.",
      "E) Reunion is the only CD that received a rating of three stars."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_2_11",
    "context": "A critic has prepared a review of exactly six music CDs—Headstrong, In Flight, Nice, Quasi, Reunion, and Sounds Good. Each CD received a rating of either one, two, three, or four stars, with each CD receiving exactly one rating. Although the ratings were meant to be kept secret until the review was published, the following facts have been leaked to the public: For each of the ratings, at least one but no more than two of the CDs received that rating. Headstrong received exactly one more star than Nice did. Either Headstrong or Reunion received the same number of stars as In Flight did. At most one CD received more stars than Quasi did.",
    "question": "If Reunion is the only CD that received a rating of one star, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Headstrong received a rating of four stars.",
      "B) In Flight received a rating of two stars.",
      "C) Nice received a rating of three stars.",
      "D) Quasi received a rating of three stars.",
      "E) Sounds Good received a rating of two stars."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_2_12",
    "context": "A critic has prepared a review of exactly six music CDs—Headstrong, In Flight, Nice, Quasi, Reunion, and Sounds Good. Each CD received a rating of either one, two, three, or four stars, with each CD receiving exactly one rating. Although the ratings were meant to be kept secret until the review was published, the following facts have been leaked to the public: For each of the ratings, at least one but no more than two of the CDs received that rating. Headstrong received exactly one more star than Nice did. Either Headstrong or Reunion received the same number of stars as In Flight did. At most one CD received more stars than Quasi did.",
    "question": "Which one of the following CANNOT have received a rating of four stars?",
    "answer": "B",
    "options": [
      "A) Headstrong",
      "B) In Flight",
      "C) Quasi",
      "D) Reunion",
      "E) Sounds Good"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_3_13",
    "context": "A cake has exactly six layers—lemon, marzipan, orange, raspberry, strawberry, and vanilla. There is exactly one bottom layer (the first layer), and each succeeding layer (from second through sixth) completely covers the layer beneath it. The following conditions must apply: The raspberry layer is neither immediately above nor immediately below the strawberry layer. The marzipan layer is immediately above the lemon layer. The orange layer is above the marzipan layer but below the strawberry layer.",
    "question": "Which one of the following could be an accurate list of the layers of the cake, from bottom to top?",
    "answer": "A",
    "options": [
      "A) lemon, marzipan, orange, strawberry, vanilla, raspberry",
      "B) lemon, marzipan, orange, strawberry, raspberry, vanilla",
      "C) marzipan, lemon, raspberry, vanilla, orange, strawberry",
      "D) raspberry, lemon, marzipan, vanilla, strawberry, orange",
      "E) raspberry, orange, lemon, marzipan, strawberry, vanilla"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_3_14",
    "context": "A cake has exactly six layers—lemon, marzipan, orange, raspberry, strawberry, and vanilla. There is exactly one bottom layer (the first layer), and each succeeding layer (from second through sixth) completely covers the layer beneath it. The following conditions must apply: The raspberry layer is neither immediately above nor immediately below the strawberry layer. The marzipan layer is immediately above the lemon layer. The orange layer is above the marzipan layer but below the strawberry layer.",
    "question": "If the strawberry layer is not immediately above the orange layer, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) The raspberry layer is immediately above the vanilla layer.",
      "B) The raspberry layer is immediately above the orange layer.",
      "C) The raspberry layer is immediately below the marzipan layer.",
      "D) The raspberry layer is the second layer.",
      "E) The raspberry layer is the top layer."
    ],
    "raw_logic_programs": [
      "# Declarations\nlayers = EnumSort([lemon, marzipan, orange, raspberry, strawberry, vanilla])\nabove = Function([layers, layers] -> [bool])\nForAll([l:layers], And(1 <= above(l, l), above(l, l) <= 6))\n\n# Constraints\nForAll([l:layers], And(1 <= above(l, l), above(l, l) <= 6)) ::: each succeeding layer (from second through sixth) completely covers the layer beneath it\nNot(above(raspberry, strawberry)) ::: The raspberry layer is neither immediately above nor immediately below the strawberry layer\nabove(marzipan, lemon) ::: The marzipan layer is immediately above the lemon layer\nabove(orange, marzipan) ::: The orange layer is above the marzipan layer\nabove(orange, strawberry) ::: The orange layer is below the strawberry layer\n\n# Options\nQuestion ::: If the strawberry layer is not immediately above the orange layer, then which one of the following could be true?\nis_exception(is_sat(above(raspberry, vanilla))) ::: A)\nis_exception(is_sat(above(raspberry, orange))) ::: B)\nis_exception(is_sat(above(raspberry, marzipan))) ::: C)\nis_exception(is_sat(above(raspberry, raspberry))) ::: D)\nis_exception(is_sat(above(raspberry, raspberry))) ::: E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_3_15",
    "context": "A cake has exactly six layers—lemon, marzipan, orange, raspberry, strawberry, and vanilla. There is exactly one bottom layer (the first layer), and each succeeding layer (from second through sixth) completely covers the layer beneath it. The following conditions must apply: The raspberry layer is neither immediately above nor immediately below the strawberry layer. The marzipan layer is immediately above the lemon layer. The orange layer is above the marzipan layer but below the strawberry layer.",
    "question": "If the strawberry layer is not the top layer, then which one of the following is a complete and accurate list of the layers that could be the vanilla layer?",
    "answer": "E",
    "options": [
      "A) the first, the second, the third, the fourth, the fifth, the sixth",
      "B) the second, the third, the fourth, the fifth, the sixth",
      "C) the third, the fourth, the fifth, the sixth",
      "D) the fourth, the fifth, the sixth",
      "E) the fifth, the sixth"
    ],
    "raw_logic_programs": [
      "# Declarations\nlayers = EnumSort([lemon, marzipan, orange, raspberry, strawberry, vanilla])\nabove = Function([layers, layers] -> [bool])\nForAll([l:layers], And(1 <= above(l, l), above(l, l) <= 6))\n\n# Constraints\nForAll([l:layers], And(1 <= above(l, l), above(l, l) <= 6)) ::: each succeeding layer (from second through sixth) completely covers the layer beneath it\nNot(above(raspberry, strawberry)) ::: The raspberry layer is neither immediately above nor immediately below the strawberry layer\nabove(marzipan, lemon) ::: The marzipan layer is immediately above the lemon layer\nabove(orange, marzipan) ::: The orange layer is above the marzipan layer\nabove(orange, strawberry) ::: The orange layer is above the marzipan layer but below the strawberry layer\n\n# Options\nQuestion ::: If the strawberry layer is not the top layer, then which one of the following is a complete and accurate list of the layers that could be the vanilla layer?\nis_exception(is_sat(above(vanilla, lemon))) ::: A) the first, the second, the third, the fourth, the fifth, the sixth\nis_exception(is_sat(above(vanilla, marzipan))) ::: B) the second, the third, the fourth, the fifth, the sixth\nis_exception(is_sat(above(vanilla, orange))) ::: C) the third, the"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_3_16",
    "context": "A cake has exactly six layers—lemon, marzipan, orange, raspberry, strawberry, and vanilla. There is exactly one bottom layer (the first layer), and each succeeding layer (from second through sixth) completely covers the layer beneath it. The following conditions must apply: The raspberry layer is neither immediately above nor immediately below the strawberry layer. The marzipan layer is immediately above the lemon layer. The orange layer is above the marzipan layer but below the strawberry layer.",
    "question": "If the lemon layer is third, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) The vanilla layer is fifth.",
      "B) The vanilla layer is immediately above the raspberry layer.",
      "C) The orange layer is not immediately above the marzipan layer.",
      "D) The raspberry layer is above the marzipan layer.",
      "E) The strawberry layer is not the top layer."
    ],
    "raw_logic_programs": [
      "# Declarations\nlayers = EnumSort([lemon, marzipan, orange, raspberry, strawberry, vanilla])\nlayer_order = Function([layers] -> [int])\nForAll([l:layers], And(1 <= layer_order(l), layer_order(l) <= 6))\n\n# Constraints\nDistinct([l:layers], layer_order(l)) ::: There is exactly one bottom layer (the first layer), and each succeeding layer (from second through sixth) completely covers the layer beneath it\nNot(And(layer_order(raspberry) == layer_order(strawberry) - 1, layer_order(raspberry) == layer_order(strawberry) + 1)) ::: The raspberry layer is neither immediately above nor immediately below the strawberry layer\nlayer_order(marzipan) == layer_order(lemon) + 1 ::: The marzipan layer is immediately above the lemon layer\nlayer_order(orange) > layer_order(marzipan) ::: The orange layer is above the marzipan layer\nlayer_order(orange) < layer_order(strawberry) ::: The orange layer is below the strawberry layer\n\n# Options\nQuestion ::: If the lemon layer is third, then which one of the following could be true?\nis_exception(is_sat(layer_order(vanilla) == 5)) ::: A) The vanilla layer is fifth.\nis_exception(is_sat(layer_order(vanilla) == layer_order(raspberry) + 1)) ::: B) The vanilla"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_3_17",
    "context": "A cake has exactly six layers—lemon, marzipan, orange, raspberry, strawberry, and vanilla. There is exactly one bottom layer (the first layer), and each succeeding layer (from second through sixth) completely covers the layer beneath it. The following conditions must apply: The raspberry layer is neither immediately above nor immediately below the strawberry layer. The marzipan layer is immediately above the lemon layer. The orange layer is above the marzipan layer but below the strawberry layer.",
    "question": "Which one of the following could be an accurate list of the two lowest layers of the cake, listed in order from the bottom up?",
    "answer": "B",
    "options": [
      "A) lemon, raspberry",
      "B) vanilla, raspberry",
      "C) marzipan, raspberry",
      "D) raspberry, marzipan",
      "E) raspberry, strawberry"
    ],
    "raw_logic_programs": [
      "# Declarations\nlayers = EnumSort([lemon, marzipan, orange, raspberry, strawberry, vanilla])\nlayer_order = Function([layers] -> [layers])\nForAll([l:layers], And(1 <= layer_order(l), layer_order(l) <= 6))\n\n# Constraints\nForAll([l:layers], layer_order(l) == layer_order(l)) ::: each layer is in exactly one layer\nAnd(layer_order(raspberry)!= layer_order(strawberry), layer_order(raspberry)!= layer_order(strawberry) + 1) ::: The raspberry layer is neither immediately above nor immediately below the strawberry layer\nlayer_order(marzipan) == layer_order(lemon) + 1 ::: The marzipan layer is immediately above the lemon layer\nAnd(layer_order(orange) > layer_order(marzipan), layer_order(orange) < layer_order(strawberry)) ::: The orange layer is above the marzipan layer but below the strawberry layer\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the two lowest layers of the cake, listed in order from the bottom up?\nis_exception(is_sat(layer_order(lemon) == 1, layer_order(raspberry) == 2)) ::: A) lemon, raspberry\nis_exception(is_sat(layer_order(vanilla) == 1, layer_order(raspberry) == 2)) ::: B) vanilla,"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_4_18",
    "context": "A panel reviews six contract bids—H, J, K, R, S, and T. No two bids have the same cost. Exactly one of the bids is accepted. The following conditions must hold: The accepted bid is either K or R and is either the second or the third lowest in cost. H is lower in cost than each of J and K. If J is the fourth lowest in cost, then J is lower in cost than each of S and T. If J is not the fourth lowest in cost, then J is higher in cost than each of S and T. Either R or S is the fifth lowest in cost.",
    "question": "Which one of the following could be an accurate list of the bids in order from lowest to highest in cost?",
    "answer": "B",
    "options": [
      "A) T, K, H, S, J, R",
      "B) H, T, K, S, R, J",
      "C) H, S, T, K, R, J",
      "D) H, K, S, J, R, T",
      "E) H, J, K, R, S, T"
    ],
    "raw_logic_programs": [
      "# Declarations\nbids = EnumSort([H, J, K, R, S, T])\ncosts = EnumSort([int])\ncost = Function([bids] -> [costs])\nForAll([b:bids], And(1 <= cost(b), cost(b) <= 6))\n\n# Constraints\nDistinct([b:bids], cost(b)) ::: No two bids have the same cost\nAnd(cost(K) <= cost(R), cost(K) >= cost(R)) ::: The accepted bid is either K or R and is either the second or the third lowest in cost\nAnd(cost(H) < cost(J), cost(H) < cost(K)) ::: H is lower in cost than each of J and K\nAnd(cost(J) == 4, cost(J) < cost(S), cost(J) < cost(T)) ::: If J is the fourth lowest in cost, then J is lower in cost than each of S and T\nAnd(cost(J)!= 4, cost(J) > cost(S), cost(J) > cost(T)) ::: If J is not the fourth lowest in cost, then J is higher in cost than each of S and T\nAnd(cost(R) == 5, cost(S) == 5) ::: Either R or S is the fifth lowest in cost\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the bids in order from lowest to highest in cost?\nis_exception(is_sat(cost(T) == 1, cost(K) == 2, cost(H) =="
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_4_19",
    "context": "A panel reviews six contract bids—H, J, K, R, S, and T. No two bids have the same cost. Exactly one of the bids is accepted. The following conditions must hold: The accepted bid is either K or R and is either the second or the third lowest in cost. H is lower in cost than each of J and K. If J is the fourth lowest in cost, then J is lower in cost than each of S and T. If J is not the fourth lowest in cost, then J is higher in cost than each of S and T. Either R or S is the fifth lowest in cost.",
    "question": "Which one of the following bids CANNOT be the fourth lowest in cost?",
    "answer": "A",
    "options": [
      "A) H",
      "B) J",
      "C) K",
      "D) R",
      "E) T"
    ],
    "raw_logic_programs": [
      "# Declarations\nbids = EnumSort([H, J, K, R, S, T])\ncosts = Function([bids] -> [int])\nForAll([b:bids], And(1 <= costs(b), costs(b) <= 6))\n\n# Constraints\nDistinct([b:bids], costs(b)) ::: No two bids have the same cost\nAnd(costs(K) <= costs(R), costs(K) >= costs(R)) ::: The accepted bid is either K or R and is either the second or the third lowest in cost\ncosts(H) < costs(J) ::: H is lower in cost than each of J and K\nAnd(costs(J) == 4, costs(J) < costs(S), costs(J) < costs(T)) ::: If J is the fourth lowest in cost, then J is lower in cost than each of S and T\nAnd(costs(J)!= 4, costs(J) > costs(S), costs(J) > costs(T)) ::: If J is not the fourth lowest in cost, then J is higher in cost than each of S and T\nAnd(costs(R) == 5, costs(S) == 5) ::: Either R or S is the fifth lowest in cost\n\n# Options\nQuestion ::: Which one of the following bids CANNOT be the fourth lowest in cost?\nis_exception(is_sat(costs(H) == 4)) ::: A) H\nis_exception(is_sat(costs(J) == 4)) ::: B) J\nis_exception("
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_4_20",
    "context": "A panel reviews six contract bids—H, J, K, R, S, and T. No two bids have the same cost. Exactly one of the bids is accepted. The following conditions must hold: The accepted bid is either K or R and is either the second or the third lowest in cost. H is lower in cost than each of J and K. If J is the fourth lowest in cost, then J is lower in cost than each of S and T. If J is not the fourth lowest in cost, then J is higher in cost than each of S and T. Either R or S is the fifth lowest in cost.",
    "question": "Which one of the following bids CANNOT be the second lowest in cost?",
    "answer": "B",
    "options": [
      "A) H",
      "B) J",
      "C) K",
      "D) R",
      "E) T"
    ],
    "raw_logic_programs": [
      "# Declarations\nbids = EnumSort([H, J, K, R, S, T])\ncosts = Function([bids] -> [int])\nForAll([b:bids], And(1 <= costs(b), costs(b) <= 6))\n\n# Constraints\nDistinct([b:bids], costs(b)) ::: No two bids have the same cost\nAnd(costs(K) <= costs(R), costs(K) >= costs(R)) ::: The accepted bid is either K or R and is either the second or the third lowest in cost\ncosts(H) < costs(J) ::: H is lower in cost than each of J and K\nAnd(costs(J) == 4, costs(J) < costs(S), costs(J) < costs(T)) ::: If J is the fourth lowest in cost, then J is lower in cost than each of S and T\nAnd(costs(J)!= 4, costs(J) > costs(S), costs(J) > costs(T)) ::: If J is not the fourth lowest in cost, then J is higher in cost than each of S and T\nAnd(costs(R) == 5, costs(S) == 5) ::: Either R or S is the fifth lowest in cost\n\n# Options\nQuestion ::: Which one of the following bids CANNOT be the second lowest in cost?\nis_exception(is_sat(costs(H) == 2)) ::: A) H\nis_exception(is_sat(costs(J) == 2)) ::: B) J\nis_exception("
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_4_21",
    "context": "A panel reviews six contract bids—H, J, K, R, S, and T. No two bids have the same cost. Exactly one of the bids is accepted. The following conditions must hold: The accepted bid is either K or R and is either the second or the third lowest in cost. H is lower in cost than each of J and K. If J is the fourth lowest in cost, then J is lower in cost than each of S and T. If J is not the fourth lowest in cost, then J is higher in cost than each of S and T. Either R or S is the fifth lowest in cost.",
    "question": "If R is the accepted bid, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) T is the lowest in cost.",
      "B) K is the second lowest in cost.",
      "C) R is the third lowest in cost.",
      "D) S is the fifth lowest in cost.",
      "E) J is the highest in cost."
    ],
    "raw_logic_programs": [
      "# Declarations\nbids = EnumSort([H, J, K, R, S, T])\ncosts = Function([bids] -> [int])\nForAll([b:bids], And(1 <= costs(b), costs(b) <= 6))\n\n# Constraints\nDistinct([b:bids], costs(b)) ::: No two bids have the same cost\nAnd(costs(K) <= costs(R), costs(K) >= costs(R)) ::: The accepted bid is either K or R and is either the second or the third lowest in cost\ncosts(H) < costs(J) ::: H is lower in cost than each of J and K\nAnd(costs(J) == 4, costs(J) < costs(S), costs(J) < costs(T)) ::: If J is the fourth lowest in cost, then J is lower in cost than each of S and T\nAnd(costs(J)!= 4, costs(J) > costs(S), costs(J) > costs(T)) ::: If J is not the fourth lowest in cost, then J is higher in cost than each of S and T\nAnd(costs(R) == 5, costs(S) == 5) ::: Either R or S is the fifth lowest in cost\n\n# Options\nQuestion ::: If R is the accepted bid, then which one of the following must be true?\nis_sat(costs(T) == 1) ::: A) T is the lowest in cost.\nis_sat(costs(K) == 2) ::: B) K is the second lowest in cost."
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_4_22",
    "context": "A panel reviews six contract bids—H, J, K, R, S, and T. No two bids have the same cost. Exactly one of the bids is accepted. The following conditions must hold: The accepted bid is either K or R and is either the second or the third lowest in cost. H is lower in cost than each of J and K. If J is the fourth lowest in cost, then J is lower in cost than each of S and T. If J is not the fourth lowest in cost, then J is higher in cost than each of S and T. Either R or S is the fifth lowest in cost.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) H is lower in cost than S.",
      "B) H is lower in cost than T.",
      "C) K is lower in cost than J.",
      "D) S is lower in cost than J.",
      "E) S is lower in cost than K."
    ],
    "raw_logic_programs": [
      "# Declarations\nbids = EnumSort([H, J, K, R, S, T])\ncosts = Function([bids] -> [int])\nForAll([b:bids], And(1 <= costs(b), costs(b) <= 6))\n\n# Constraints\nDistinct([b:bids], costs(b)) ::: No two bids have the same cost\nAnd(costs(K) <= costs(R), costs(K) >= costs(R)) ::: The accepted bid is either K or R and is either the second or the third lowest in cost\ncosts(H) < costs(J) ::: H is lower in cost than each of J and K\nAnd(costs(J) == 4, costs(J) < costs(S), costs(J) < costs(T)) ::: If J is the fourth lowest in cost, then J is lower in cost than each of S and T\nAnd(costs(J)!= 4, costs(J) > costs(S), costs(J) > costs(T)) ::: If J is not the fourth lowest in cost, then J is higher in cost than each of S and T\nAnd(costs(R) == 5, costs(S) == 5) ::: Either R or S is the fifth lowest in cost\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(costs(H) < costs(S)) ::: (A)\nis_valid(costs(H) < costs(T)) ::: (B)\nis_valid(costs(K) < costs(J)) ::: (C)"
    ]
  },
  {
    "id": "ar_lsat_200806_3-G_4_23",
    "context": "A panel reviews six contract bids—H, J, K, R, S, and T. No two bids have the same cost. Exactly one of the bids is accepted. The following conditions must hold: The accepted bid is either K or R and is either the second or the third lowest in cost. H is lower in cost than each of J and K. If J is the fourth lowest in cost, then J is lower in cost than each of S and T. If J is not the fourth lowest in cost, then J is higher in cost than each of S and T. Either R or S is the fifth lowest in cost.",
    "question": "If R is the lowest in cost, then which one of the following could be false?",
    "answer": "A",
    "options": [
      "A) J is the highest in cost.",
      "B) S is the fifth lowest in cost.",
      "C) K is the third lowest in cost.",
      "D) H is the second lowest in cost.",
      "E) K is the accepted bid."
    ],
    "raw_logic_programs": [
      "# Declarations\nbids = EnumSort([H, J, K, R, S, T])\ncosts = EnumSort([int])\naccepted = Function([bids] -> [bool])\nForAll([b:bids], And(1 <= costs(b), costs(b) <= 6))\n\n# Constraints\nDistinct([b:bids], costs(b)) ::: No two bids have the same cost\nAnd(accepted(K), accepted(R)) ::: The accepted bid is either K or R\nAnd(accepted(K), costs(K) <= costs(R)) ::: and is either the second or the third lowest in cost\nAnd(costs(H) < costs(J), costs(H) < costs(K)) ::: H is lower in cost than each of J and K\nAnd(costs(J) == 4, costs(J) < costs(S), costs(J) < costs(T)) ::: If J is the fourth lowest in cost, then J is lower in cost than each of S and T\nAnd(costs(J)!= 4, costs(J) > costs(S), costs(J) > costs(T)) ::: If J is not the fourth lowest in cost, then J is higher in cost than each of S and T\nAnd(costs(R) == 5, costs(S) == 5) ::: Either R or S is the fifth lowest in cost\n\n# Options\nQuestion ::: If R is the lowest in cost, then which one of the following could be false?\nis_exception(is_sat(costs(J) == 6)) ::: A"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_1_1",
    "context": "There are exactly six law students—Gambini, Little, Mitchum, Richardson, Saito, and Veracruz—in a trial advocacy class. The class is divided into three trial teams—team 1, team 2, and team 3—of exactly two students each. Each student is on exactly one of the teams. Each student prepares exactly one of either the opening argument or the final argument for his or her team. The teams must be formed according to the following specifications: Mitchum is on the same team as either Gambini or Veracruz. Little prepares an opening argument. Either Gambini or Richardson, but not both, prepares a final argument.",
    "question": "Which one of the following could be the composition of each team and the argument each student prepares?",
    "answer": "D",
    "options": [
      "A) team 1: Little, opening; Gambini, final team 2: Veracruz, opening; Mitchum, final team 3: Saito, opening; Richardson, final",
      "B) team 1: Mitchum, opening; Gambini, final team 2: Veracruz, opening; Little, final team 3: Richardson, opening; Saito, final",
      "C) team 1: Richardson, opening; Gambini, final team 2: Mitchum, opening; Saito, final team 3: Little, opening; Veracruz, final",
      "D) team 1: Gambini, opening; Mitchum, final team 2: Little, opening; Richardson, final team 3: Veracruz, opening; Saito, final",
      "E) team 1: Gambini, opening; Mitchum, final team 2: Richardson, opening; Saito, final team 3: Little, opening; Veracruz, final"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_1_2",
    "context": "There are exactly six law students—Gambini, Little, Mitchum, Richardson, Saito, and Veracruz—in a trial advocacy class. The class is divided into three trial teams—team 1, team 2, and team 3—of exactly two students each. Each student is on exactly one of the teams. Each student prepares exactly one of either the opening argument or the final argument for his or her team. The teams must be formed according to the following specifications: Mitchum is on the same team as either Gambini or Veracruz. Little prepares an opening argument. Either Gambini or Richardson, but not both, prepares a final argument.",
    "question": "If Gambini is on the same team as Mitchum, and if Gambini prepares the final argument for that team, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Little is on the same team as Veracruz, who prepares the opening argument for the team.",
      "B) Richardson is on the same team as Saito, who prepares the opening argument for the team.",
      "C) Richardson is on the same team as Saito, who prepares the final argument for the team.",
      "D) Saito is on the same team as Veracruz, who prepares the opening argument for the team.",
      "E) Saito is on the same team as Veracruz, who prepares the final argument for the team."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_1_3",
    "context": "There are exactly six law students—Gambini, Little, Mitchum, Richardson, Saito, and Veracruz—in a trial advocacy class. The class is divided into three trial teams—team 1, team 2, and team 3—of exactly two students each. Each student is on exactly one of the teams. Each student prepares exactly one of either the opening argument or the final argument for his or her team. The teams must be formed according to the following specifications: Mitchum is on the same team as either Gambini or Veracruz. Little prepares an opening argument. Either Gambini or Richardson, but not both, prepares a final argument.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Gambini, who prepares a final argument, is on the same team as Richardson.",
      "B) Gambini, who prepares a final argument, is on the same team as Veracruz.",
      "C) Gambini, who prepares an opening argument, is on the same team as Little.",
      "D) Little, who prepares an opening argument, is on the same team as Mitchum.",
      "E) Mitchum, who prepares an opening argument, is on the same team as Saito."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_1_4",
    "context": "There are exactly six law students—Gambini, Little, Mitchum, Richardson, Saito, and Veracruz—in a trial advocacy class. The class is divided into three trial teams—team 1, team 2, and team 3—of exactly two students each. Each student is on exactly one of the teams. Each student prepares exactly one of either the opening argument or the final argument for his or her team. The teams must be formed according to the following specifications: Mitchum is on the same team as either Gambini or Veracruz. Little prepares an opening argument. Either Gambini or Richardson, but not both, prepares a final argument.",
    "question": "If Richardson is on the same team as Veracruz, then for exactly how many of the students can it be determined which of the arguments he or she prepares?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_1_5",
    "context": "There are exactly six law students—Gambini, Little, Mitchum, Richardson, Saito, and Veracruz—in a trial advocacy class. The class is divided into three trial teams—team 1, team 2, and team 3—of exactly two students each. Each student is on exactly one of the teams. Each student prepares exactly one of either the opening argument or the final argument for his or her team. The teams must be formed according to the following specifications: Mitchum is on the same team as either Gambini or Veracruz. Little prepares an opening argument. Either Gambini or Richardson, but not both, prepares a final argument.",
    "question": "If Little is on the same team as Richardson, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Saito is on the same team as Veracruz.",
      "B) Gambini is on the same team as Mitchum.",
      "C) Mitchum prepares a final argument.",
      "D) Veracruz prepares a final argument.",
      "E) Gambini prepares an opening argument."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_1_6",
    "context": "There are exactly six law students—Gambini, Little, Mitchum, Richardson, Saito, and Veracruz—in a trial advocacy class. The class is divided into three trial teams—team 1, team 2, and team 3—of exactly two students each. Each student is on exactly one of the teams. Each student prepares exactly one of either the opening argument or the final argument for his or her team. The teams must be formed according to the following specifications: Mitchum is on the same team as either Gambini or Veracruz. Little prepares an opening argument. Either Gambini or Richardson, but not both, prepares a final argument.",
    "question": "If Saito prepares an opening argument, then which one of the following pairs of students could be on the same team as each other?",
    "answer": "C",
    "options": [
      "A) Gambini and Little",
      "B) Gambini and Saito",
      "C) Little and Veracruz",
      "D) Mitchum and Veracruz",
      "E) Richardson and Veracruz"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_2_7",
    "context": "While on vacation, Sukanya receives several e-mail messages from work, each message from one of three associates: Hilary, Jerome, and Lula. Sukanya receives at least one and no more than two messages from each of them. Sukanya receives each message on the day it is sent. No more than one message is sent each day. The messages are received in a manner consistent with the following: The first message is not from Lula. Both the first and last messages are from the same person. Exactly once Sukanya receives a message from Jerome on the day after receiving one from Hilary. Of the first three messages, exactly one is from Jerome.",
    "question": "Which one of the following could be an accurate list of the e-mail messages Sukanya receives, identified by the person each message is from and listed in the order she receives them?",
    "answer": "D",
    "options": [
      "A) Lula, Hilary, Jerome, Hilary, Jerome, Lula",
      "B) Jerome, Lula, Hilary, Lula, Jerome",
      "C) Jerome, Lula, Hilary, Jerome, Hilary",
      "D) Jerome, Lula, Hilary, Hilary, Jerome",
      "E) Hilary, Lula, Lula, Jerome, Jerome, Hilary"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_2_8",
    "context": "While on vacation, Sukanya receives several e-mail messages from work, each message from one of three associates: Hilary, Jerome, and Lula. Sukanya receives at least one and no more than two messages from each of them. Sukanya receives each message on the day it is sent. No more than one message is sent each day. The messages are received in a manner consistent with the following: The first message is not from Lula. Both the first and last messages are from the same person. Exactly once Sukanya receives a message from Jerome on the day after receiving one from Hilary. Of the first three messages, exactly one is from Jerome.",
    "question": "What is the maximum possible number of e-mail messages Sukanya receives after Jerome's first message but before Hilary's first message?",
    "answer": "C",
    "options": [
      "A) zero",
      "B) one",
      "C) two",
      "D) three",
      "E) four"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_2_9",
    "context": "While on vacation, Sukanya receives several e-mail messages from work, each message from one of three associates: Hilary, Jerome, and Lula. Sukanya receives at least one and no more than two messages from each of them. Sukanya receives each message on the day it is sent. No more than one message is sent each day. The messages are received in a manner consistent with the following: The first message is not from Lula. Both the first and last messages are from the same person. Exactly once Sukanya receives a message from Jerome on the day after receiving one from Hilary. Of the first three messages, exactly one is from Jerome.",
    "question": "If Sukanya receives exactly four e-mail messages, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Exactly one of the messages is from Lula.",
      "B) Exactly two of the messages are from Jerome.",
      "C) The second message is from Lula.",
      "D) The third message is from Hilary.",
      "E) The fourth message is from Jerome."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_2_10",
    "context": "While on vacation, Sukanya receives several e-mail messages from work, each message from one of three associates: Hilary, Jerome, and Lula. Sukanya receives at least one and no more than two messages from each of them. Sukanya receives each message on the day it is sent. No more than one message is sent each day. The messages are received in a manner consistent with the following: The first message is not from Lula. Both the first and last messages are from the same person. Exactly once Sukanya receives a message from Jerome on the day after receiving one from Hilary. Of the first three messages, exactly one is from Jerome.",
    "question": "Which one of the following e-mail messages CANNOT be from Lula?",
    "answer": "E",
    "options": [
      "A) the second message",
      "B) the third message",
      "C) the fourth message",
      "D) the fifth message (if there is a fifth one)",
      "E) the sixth message (if there is a sixth one)"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_2_11",
    "context": "While on vacation, Sukanya receives several e-mail messages from work, each message from one of three associates: Hilary, Jerome, and Lula. Sukanya receives at least one and no more than two messages from each of them. Sukanya receives each message on the day it is sent. No more than one message is sent each day. The messages are received in a manner consistent with the following: The first message is not from Lula. Both the first and last messages are from the same person. Exactly once Sukanya receives a message from Jerome on the day after receiving one from Hilary. Of the first three messages, exactly one is from Jerome.",
    "question": "If Sukanya receives six e-mail messages, the fifth of which is from Lula, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) The first message is from Jerome.",
      "B) The second message is from Lula.",
      "C) The third message is from Hilary.",
      "D) The fourth message is from Jerome.",
      "E) The sixth message is from Lula."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Hilary, Jerome, Lula])\nmessages = EnumSort([1, 2, 3, 4, 5, 6])\nreceives = Function([people, messages] -> [bool])\n\n# Constraints\nForAll([p:people], Count([m:messages], receives(p, m)) >= 1) ::: Sukanya receives at least one and no more than two messages from each of them\nForAll([m:messages], Count([p:people], receives(p, m)) == 1) ::: No more than one message is sent each day\nAnd(receives(Lula, 1), Not(receives(Lula, m))) ::: The first message is not from Lula\nAnd(receives(p, 1), receives(p, 6)) ::: Both the first and last messages are from the same person\nAnd(receives(Jerome, m), receives(Hilary, m - 1)) ::: Exactly once Sukanya receives a message from Jerome on the day after receiving one from Hilary\nCount([m:messages], receives(Jerome, m)) == 1 ::: Of the first three messages, exactly one is from Jerome\n\n# Options\nQuestion ::: If Sukanya receives six e-mail messages, the fifth of which is from Lula, which one of the following must be true?\nis_valid(And(receives(Jerome, 1), Not(receives(Jerome, m)))) ::: (A)\nis_valid(And(receives(Lula, 2), Not(receives(Lula, m)))) ::: (B)\nis_valid(And(receives(Hilary, 3), Not(receives(Hilary, m)))) ::: (C)\nis_valid(And(receives(Jerome, 4), Not(receives(Jerome, m)))) ::: (D)\nis_valid(And(receives(Lula, 6), Not(receives(Lula, m)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_2_12",
    "context": "While on vacation, Sukanya receives several e-mail messages from work, each message from one of three associates: Hilary, Jerome, and Lula. Sukanya receives at least one and no more than two messages from each of them. Sukanya receives each message on the day it is sent. No more than one message is sent each day. The messages are received in a manner consistent with the following: The first message is not from Lula. Both the first and last messages are from the same person. Exactly once Sukanya receives a message from Jerome on the day after receiving one from Hilary. Of the first three messages, exactly one is from Jerome.",
    "question": "If Sukanya receives two e-mail messages from Lula, what is the maximum possible number of e-mail messages Sukanya receives after Lula's first message but before Lula's last message?",
    "answer": "B",
    "options": [
      "A) zero",
      "B) one",
      "C) two",
      "D) three",
      "E) four"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Hilary, Jerome, Lula])\ndays = EnumSort([day1, day2, day3, day4, day5])\nmessages = Function([people, days] -> [bool])\n\n# Constraints\nForAll([p:people], Count([d:days], messages(p, d)) >= 1) ::: Sukanya receives at least one and no more than two messages from each of them\nForAll([d:days], Count([p:people], messages(p, d)) <= 1) ::: No more than one message is sent each day\nForAll([d:days], Count([p:people], messages(p, d)) >= 1) ::: Sukanya receives each message on the day it is sent\nmessages(Lula, day1) ::: The first message is not from Lula\nAnd(messages(p, day1), messages(p, day5)) ::: Both the first and last messages are from the same person\nAnd(messages(Jerome, day2), messages(Hilary, day1)) ::: Exactly once Sukanya receives a message from Jerome on the day after receiving one from Hilary\nCount([d:days], messages(Jerome, d)) == 1 ::: Of the first three messages, exactly one is from Jerome\n\n# Options\nQuestion ::: If Sukanya receives two e-mail messages from Lula, what is the maximum possible number of e-mail messages Sukanya receives after Lula's first message but before Lula's last message?\nis_valid(Exists([d:days], messages(Lula, d) && messages(Lula, d + 1))) ::: A) zero\nis_valid(Exists([d:days], messages(Lula, d) && messages(Lula, d + 1) && messages(Lula, d + 2))) ::: B) one\nis_valid(Exists([d:days], messages(Lula, d) && messages(Lula, d + 1) && messages(Lula, d + 2) && messages(Lula, d +"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_3_13",
    "context": "Mercotek carried out a study to compare the productivity of its night shift with that of its day shift. Every week the company's six crews—F, G, H, R, S, and T—were ranked from first (most productive) to sixth (least productive). There were no ties. For any given week, either G and T were the two night-shift crews or else S and H were—the four other crews were the day-shift crews for that week. The following relationships held for every week of the study: F is more productive than G. R is more productive than S. R is more productive than T. S is more productive than H. G is more productive than T.",
    "question": "Which one of the following could be an accurate ranking of all the crews, in order from first to sixth, for a given week of the study?",
    "answer": "D",
    "options": [
      "A) F, G, T, R, S, H",
      "B) F, R, G, T, H, S",
      "C) G, R, T, S, H, F",
      "D) R, F, G, S, H, T",
      "E) R, S, H, T, F, G"
    ],
    "raw_logic_programs": [
      "# Declarations\ncrews = EnumSort([F, G, H, R, S, T])\nproductivity = Function([crews] -> [int])\nForAll([c:crews], And(1 <= productivity(c), productivity(c) <= 6))\n\n# Constraints\nForAll([c:crews], Implies(productivity(c) == 1, productivity(c) == 6)) ::: no ties\nAnd(productivity(F) > productivity(G), productivity(R) > productivity(S), productivity(R) > productivity(T), productivity(S) > productivity(H), productivity(G) > productivity(T)) ::: F is more productive than G. R is more productive than S. R is more productive than T. S is more productive than H. G is more productive than T.\n\n# Options\nQuestion ::: Which one of the following could be an accurate ranking of all the crews, in order from first to sixth, for a given week of the study?\nis_exception(is_sat(productivity(F) == 1, productivity(G) == 2, productivity(T) == 3, productivity(R) == 4, productivity(S) == 5, productivity(H) == 6)) ::: (A)\nis_exception(is_sat(productivity(F) == 1, productivity(R) == 2, productivity(G) == 3, productivity(T) == 4, productivity(H) == 5, productivity(S) == 6)) ::: (B)\nis_exception(is_sat(productivity(G) == 1, productivity(R) == 2, productivity(T) == 3, productivity(S) == 4, productivity(H) == 5, productivity(F) == 6)) ::: (C)\nis_exception(is_sat(productivity(R) == 1, productivity(F) == 2, productivity(G)"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_3_14",
    "context": "Mercotek carried out a study to compare the productivity of its night shift with that of its day shift. Every week the company's six crews—F, G, H, R, S, and T—were ranked from first (most productive) to sixth (least productive). There were no ties. For any given week, either G and T were the two night-shift crews or else S and H were—the four other crews were the day-shift crews for that week. The following relationships held for every week of the study: F is more productive than G. R is more productive than S. R is more productive than T. S is more productive than H. G is more productive than T.",
    "question": "If F is ranked third for a given week of the study, then which one of the following could also be true of that week?",
    "answer": "B",
    "options": [
      "A) G ranks second.",
      "B) H ranks fourth.",
      "C) R ranks second.",
      "D) S ranks fourth.",
      "E) T ranks fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\ncrews = EnumSort([F, G, H, R, S, T])\nranks = Function([crews] -> [int])\nForAll([c:crews], And(1 <= ranks(c), ranks(c) <= 6))\n\n# Constraints\nForAll([w:int], And(w >= 1, w <= 6), Distinct([c:crews], ranks(c, w))) ::: There were no ties\nForAll([w:int], And(w >= 1, w <= 6), Or(And(ranks(G, w) == 1, ranks(T, w) == 2), And(ranks(S, w) == 1, ranks(H, w) == 2))) ::: For any given week, either G and T were the two night-shift crews or else S and H were\nForAll([w:int], And(w >= 1, w <= 6), And(ranks(F, w) < ranks(G, w), ranks(R, w) < ranks(S, w), ranks(R, w) < ranks(T, w), ranks(S, w) < ranks(H, w), ranks(G, w) < ranks(T, w))) ::: The following relationships held for every week of the study\n\n# Options\nQuestion ::: If F is ranked third for a given week of the study, then which one of the following could also be true of that week?\nis_exception(is_sat(ranks(G, 1) == 2)) ::: (A)\nis_exception(is_sat(ranks(H, 1) == 4)) ::: (B)\nis_exception(is_sat(ranks(R, 1) == 2)) ::: (C)\nis_exception(is_sat(ranks(S, 1) == 4)) ::: (D)\nis_exception(is_sat(ranks(T, 1) == 4)) ::: (E)\n------\nProblem:\nA certain company has six depart"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_3_15",
    "context": "Mercotek carried out a study to compare the productivity of its night shift with that of its day shift. Every week the company's six crews—F, G, H, R, S, and T—were ranked from first (most productive) to sixth (least productive). There were no ties. For any given week, either G and T were the two night-shift crews or else S and H were—the four other crews were the day-shift crews for that week. The following relationships held for every week of the study: F is more productive than G. R is more productive than S. R is more productive than T. S is more productive than H. G is more productive than T.",
    "question": "Which one of the following CANNOT be the crew ranked fifth for any given week of the study?",
    "answer": "C",
    "options": [
      "A) G",
      "B) H",
      "C) R",
      "D) S",
      "E) T"
    ],
    "raw_logic_programs": [
      "# Declarations\ncrews = EnumSort([F, G, H, R, S, T])\nproductivity = Function([crews] -> [int])\nForAll([c:crews], And(1 <= productivity(c), productivity(c) <= 6))\n\n# Constraints\nForAll([c:crews], Implies(productivity(c) == 1, productivity(c) == 6)) ::: Every week the company's six crews were ranked from first (most productive) to sixth (least productive). There were no ties.\nForAll([c:crews], Implies(productivity(c) == 1, productivity(c) == 6)) ::: Every week the company's six crews were ranked from first (most productive) to sixth (least productive). There were no ties.\nForAll([c:crews], Implies(productivity(c) == 1, productivity(c) == 6)) ::: Every week the company's six crews were ranked from first (most productive) to sixth (least productive). There were no ties.\nForAll([c:crews], Implies(productivity(c) == 1, productivity(c) == 6)) ::: Every week the company's six crews were ranked from first (most productive) to sixth (least productive). There were no ties.\nForAll([c:crews], Implies(productivity(c) == 1, productivity(c) == 6)) ::: Every week the company's six crews were ranked from first (most productive) to sixth (least productive). There were no ties.\nForAll([c:crews], Implies(productivity(c) == 1, productivity(c) == 6)) ::: Every week the company's six crews were ranked from first (most productive) to sixth (least productive). There were no ties.\nForAll([c:crews], Implies(productivity(c) == 1, productivity(c) == 6))"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_3_16",
    "context": "Mercotek carried out a study to compare the productivity of its night shift with that of its day shift. Every week the company's six crews—F, G, H, R, S, and T—were ranked from first (most productive) to sixth (least productive). There were no ties. For any given week, either G and T were the two night-shift crews or else S and H were—the four other crews were the day-shift crews for that week. The following relationships held for every week of the study: F is more productive than G. R is more productive than S. R is more productive than T. S is more productive than H. G is more productive than T.",
    "question": "For any given week of the study, the ranking of all the crews is completely determined if which one of the following is true?",
    "answer": "C",
    "options": [
      "A) F ranks second that week.",
      "B) G ranks fifth that week.",
      "C) H ranks third that week.",
      "D) R ranks third that week.",
      "E) S ranks third that week."
    ],
    "raw_logic_programs": [
      "# Declarations\ncrews = EnumSort([F, G, H, R, S, T])\nranks = Function([crews] -> [int])\nForAll([c:crews], And(1 <= ranks(c), ranks(c) <= 6))\n\n# Constraints\nForAll([w:weeks], Distinct([c:crews], ranks(c, w))) ::: There were no ties\nForAll([w:weeks], Or(And(ranks(G, w) == 1, ranks(T, w) == 6), And(ranks(S, w) == 1, ranks(H, w) == 6))) ::: For any given week, either G and T were the two night-shift crews or else S and H were\nAnd(ranks(F, w) < ranks(G, w), ranks(R, w) < ranks(S, w), ranks(R, w) < ranks(T, w), ranks(S, w) < ranks(H, w), ranks(G, w) < ranks(T, w)) ::: The following relationships held for every week of the study\n\n# Options\nQuestion ::: For any given week of the study, the ranking of all the crews is completely determined if which one of the following is true?\nis_sat(ForAll([w:weeks], ranks(F, w) == 2)) ::: (A)\nis_sat(ForAll([w:weeks], ranks(G, w) == 5)) ::: (B)\nis_sat(ForAll([w:weeks], ranks(H, w) == 3)) ::: (C)\nis_sat(ForAll([w:weeks], ranks(R, w) == 3)) ::: (D)\nis_sat(ForAll([w:weeks], ranks(S, w) == 3)) ::: (E)\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which has a manager. The following conditions apply: The manager of department"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_3_17",
    "context": "Mercotek carried out a study to compare the productivity of its night shift with that of its day shift. Every week the company's six crews—F, G, H, R, S, and T—were ranked from first (most productive) to sixth (least productive). There were no ties. For any given week, either G and T were the two night-shift crews or else S and H were—the four other crews were the day-shift crews for that week. The following relationships held for every week of the study: F is more productive than G. R is more productive than S. R is more productive than T. S is more productive than H. G is more productive than T.",
    "question": "If the night-shift crews rank fifth and sixth for a given week of the study, then which one of the following could also be true of that week?",
    "answer": "C",
    "options": [
      "A) G ranks fourth.",
      "B) H ranks fifth.",
      "C) R ranks third.",
      "D) S ranks fourth.",
      "E) T ranks fifth."
    ],
    "raw_logic_programs": [
      "# Declarations\ncrews = EnumSort([F, G, H, R, S, T])\nshifts = EnumSort([day, night])\nranks = Function([crews, shifts] -> [int])\nForAll([c:crews], And(1 <= ranks(c, day), ranks(c, day) <= 6))\nForAll([c:crews], And(1 <= ranks(c, night), ranks(c, night) <= 6))\n\n# Constraints\nForAll([w:int], And(w >= 1, w <= 6),\n  ForAll([c:crews], And(1 <= ranks(c, day), ranks(c, day) <= 6))\n)\nForAll([w:int], And(w >= 1, w <= 6),\n  ForAll([c:crews], And(1 <= ranks(c, night), ranks(c, night) <= 6))\n)\nForAll([w:int], And(w >= 1, w <= 6),\n  And(ranks(G, night) < ranks(T, night), ranks(S, night) < ranks(H, night))\n)\nForAll([w:int], And(w >= 1, w <= 6),\n  And(ranks(F, day) > ranks(G, day), ranks(R, day) > ranks(S, day), ranks(R, day) > ranks(T, day), ranks(S, day) > ranks(H, day), ranks(G, day) > ranks(T, day))\n)\n\n# Options\nQuestion ::: If the night-shift crews rank fifth and sixth for a given week of the study, then which one of the following could also be true of that week?\nis_exception(is_sat(ranks(G, night) == 4)) ::: (A)\nis_exception(is_sat(ranks(H, night) == 5)) ::: (B)\nis_exception(is_sat(ranks(R, day) == 3)) ::: (C)"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_3_18",
    "context": "Mercotek carried out a study to compare the productivity of its night shift with that of its day shift. Every week the company's six crews—F, G, H, R, S, and T—were ranked from first (most productive) to sixth (least productive). There were no ties. For any given week, either G and T were the two night-shift crews or else S and H were—the four other crews were the day-shift crews for that week. The following relationships held for every week of the study: F is more productive than G. R is more productive than S. R is more productive than T. S is more productive than H. G is more productive than T.",
    "question": "Which one of the following is a complete and accurate list of the crews that CANNOT be ranked third for any given week of the study?",
    "answer": "E",
    "options": [
      "A) G, H, S",
      "B) R, T",
      "C) F, T",
      "D) G, T",
      "E) T"
    ],
    "raw_logic_programs": [
      "# Declarations\ncrews = EnumSort([F, G, H, R, S, T])\nproductivity = Function([crews] -> [int])\nForAll([c:crews], And(1 <= productivity(c), productivity(c) <= 6))\n\n# Constraints\nForAll([w:int], And(productivity(G, w) < productivity(T, w), productivity(S, w) < productivity(H, w))) ::: For any given week, either G and T were the two night-shift crews or else S and H were\nForAll([w:int], And(productivity(F, w) > productivity(G, w), productivity(R, w) > productivity(S, w), productivity(R, w) > productivity(T, w), productivity(S, w) > productivity(H, w), productivity(G, w) > productivity(T, w))) ::: The following relationships held for every week of the study\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the crews that CANNOT be ranked third for any given week of the study?\nis_exception(is_sat(productivity(G, 1) == 3)) ::: (A)\nis_exception(is_sat(productivity(R, 1) == 3)) ::: (B)\nis_exception(is_sat(productivity(F, 1) == 3)) ::: (C)\nis_exception(is_sat(productivity(G, 1) == 3)) ::: (D)\nis_exception(is_sat(productivity(T, 1) == 3)) ::: (E)\n------\nProblem:\nA company has six employees—A, B, C, D, E, and F—who are to be assigned to three departments—I, II, and III—according to the following conditions: A and B are to work in the same department. C and D are to work in the same department. E and F are to work in the"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_4_19",
    "context": "A shuttle van stops exactly four times—once at Fundy, once at Los Altos, once at Mineola, and once at Simcoe—not necessarily in that order. The van starts with exactly four passengers on board—Greg, Jasmine, Rosa, and Vijay—each of whom gets off at a different stop. The following conditions hold: Los Altos is the first or second stop. Rosa is still on board when the van reaches Mineola. Jasmine is on board longer than Vijay. If Jasmine is still on board when the van reaches Fundy, then Greg is still on board when the van reaches Simcoe; otherwise, Greg is not still on board when the van reaches Simcoe.",
    "question": "Which one of the following could be a complete and accurate matching of stops, listed in the order in which the van stops at them, to the passengers who get off at them?",
    "answer": "E",
    "options": [
      "A) Los Altos: Greg Mineola: Vijay Fundy: Jasmine Simcoe: Rosa",
      "B) Simcoe: Vijay Mineola: Greg Fundy: Rosa Los Altos: Jasmine",
      "C) Los Altos: Jasmine Mineola: Vijay Fundy: Greg Simcoe: Rosa",
      "D) Los Altos: Rosa Mineola: Vijay Fundy: Jasmine Simcoe: Greg",
      "E) Los Altos: Vijay Fundy: Jasmine Mineola: Rosa Simcoe: Greg"
    ],
    "raw_logic_programs": [
      "# Declarations\nstops = EnumSort([Fundy, Los_Altos, Mineola, Simcoe])\npassengers = EnumSort([Greg, Jasmine, Rosa, Vijay])\nstops_at = Function([stops, passengers] -> [bool])\n\n# Constraints\nForAll([s:stops], Count([p:passengers], stops_at(s, p)) == 1) ::: each passenger gets off at a different stop\nAnd(stops_at(Los_Altos, p) < stops_at(Mineola, p), stops_at(Los_Altos, p) < stops_at(Simcoe, p)) ::: Los Altos is the first or second stop\nstops_at(Mineola, Rosa) > stops_at(Mineola, Jasmine) ::: Rosa is still on board when the van reaches Mineola\nstops_at(Mineola, Jasmine) > stops_at(Mineola, Vijay) ::: Jasmine is on board longer than Vijay\nAnd(stops_at(Fundy, Jasmine) > stops_at(Fundy, Greg), stops_at(Simcoe, Greg) > stops_at(Simcoe, Rosa)) ::: If Jasmine is still on board when the van reaches Fundy, then Greg is still on board when the van reaches Simcoe; otherwise, Greg is not still on board when the van reaches Simcoe\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate matching of stops, listed in the order in which the van stops at them, to the passengers who get off at them?\nis_sat(And(stops_at(Los_Altos, Greg), stops_at(Mineola, Vijay), stops_at(Fundy, Jasmine), stops_at(Simcoe, Rosa))) ::: A) Los Altos: Greg Mineola: Vijay Fundy: Jasmine Simcoe: Rosa\nis_sat(And(stops_at(Simcoe, Vij"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_4_20",
    "context": "A shuttle van stops exactly four times—once at Fundy, once at Los Altos, once at Mineola, and once at Simcoe—not necessarily in that order. The van starts with exactly four passengers on board—Greg, Jasmine, Rosa, and Vijay—each of whom gets off at a different stop. The following conditions hold: Los Altos is the first or second stop. Rosa is still on board when the van reaches Mineola. Jasmine is on board longer than Vijay. If Jasmine is still on board when the van reaches Fundy, then Greg is still on board when the van reaches Simcoe; otherwise, Greg is not still on board when the van reaches Simcoe.",
    "question": "If Mineola is the first stop, which one of the following is a complete and accurate list of the passengers who could possibly get off there?",
    "answer": "D",
    "options": [
      "A) Rosa",
      "B) Greg, Rosa",
      "C) Greg, Vijay",
      "D) Greg, Rosa, Vijay",
      "E) Jasmine, Rosa, Vijay"
    ],
    "raw_logic_programs": [
      "# Declarations\nstops = EnumSort([Fundy, Los_Altos, Mineola, Simcoe])\npassengers = EnumSort([Greg, Jasmine, Rosa, Vijay])\non_board = Function([stops, passengers] -> [bool])\n\n# Constraints\nForAll([s:stops], Count([p:passengers], on_board(s, p)) == 1) ::: each passenger gets off at a different stop\nAnd(on_board(Los_Altos, p) < on_board(Mineola, p), on_board(Los_Altos, p) > on_board(Fundy, p)) ::: Los Altos is the first or second stop\non_board(Mineola, Rosa) ::: Rosa is still on board when the van reaches Mineola\non_board(Jasmine, s) > on_board(Vijay, s) ::: Jasmine is on board longer than Vijay\nAnd(on_board(Fundy, Jasmine), on_board(Simcoe, Greg)) ::: If Jasmine is still on board when the van reaches Fundy, then Greg is still on board when the van reaches Simcoe\nAnd(Not(on_board(Fundy, Jasmine)), Not(on_board(Simcoe, Greg))) ::: otherwise, Greg is not still on board when the van reaches Simcoe\n\n# Options\nQuestion ::: If Mineola is the first stop, which one of the following is a complete and accurate list of the passengers who could possibly get off there?\nis_valid(Exists([p:passengers], on_board(Mineola, p) == true)) ::: A) Rosa\nis_valid(Exists([p:passengers], And(on_board(Mineola, p) == true, p == Greg))) ::: B) Greg, Rosa\nis_valid(Exists([p:passengers], And(on_board(Mineola, p) == true, p == Vijay))) ::: C) Greg, Vijay\nis_valid(Exists([p:pass"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_4_21",
    "context": "A shuttle van stops exactly four times—once at Fundy, once at Los Altos, once at Mineola, and once at Simcoe—not necessarily in that order. The van starts with exactly four passengers on board—Greg, Jasmine, Rosa, and Vijay—each of whom gets off at a different stop. The following conditions hold: Los Altos is the first or second stop. Rosa is still on board when the van reaches Mineola. Jasmine is on board longer than Vijay. If Jasmine is still on board when the van reaches Fundy, then Greg is still on board when the van reaches Simcoe; otherwise, Greg is not still on board when the van reaches Simcoe.",
    "question": "If Fundy is the first stop, then which one of the following could accurately list the passengers in order from first to last off?",
    "answer": "D",
    "options": [
      "A) Greg, Vijay, Jasmine, Rosa",
      "B) Rosa, Vijay, Greg, Jasmine",
      "C) Vijay, Greg, Rosa, Jasmine",
      "D) Vijay, Jasmine, Greg, Rosa",
      "E) Vijay, Rosa, Jasmine, Greg"
    ],
    "raw_logic_programs": [
      "# Declarations\nstops = EnumSort([Fundy, Los_Altos, Mineola, Simcoe])\npassengers = EnumSort([Greg, Jasmine, Rosa, Vijay])\non_board = Function([stops, passengers] -> [bool])\n\n# Constraints\nForAll([s:stops], Count([p:passengers], on_board(s, p)) == 1) ::: each passenger gets off at a different stop\nAnd(on_board(Los_Altos, p) < on_board(Mineola, p), on_board(Los_Altos, p) > on_board(Fundy, p)) ::: Los Altos is the first or second stop\non_board(Mineola, Rosa) ::: Rosa is still on board when the van reaches Mineola\non_board(Jasmine, s) > on_board(Vijay, s) ::: Jasmine is on board longer than Vijay\nAnd(on_board(Fundy, Jasmine), on_board(Simcoe, Greg)) ::: If Jasmine is still on board when the van reaches Fundy, then Greg is still on board when the van reaches Simcoe\nAnd(Not(on_board(Fundy, Jasmine)), Not(on_board(Simcoe, Greg))) ::: otherwise, Greg is not still on board when the van reaches Simcoe\n\n# Options\nQuestion ::: If Fundy is the first stop, then which one of the following could accurately list the passengers in order from first to last off?\nis_exception(is_sat(ForAll([p:passengers], on_board(Fundy, p) == p) == [Greg, Vijay, Jasmine, Rosa])) ::: A) Greg, Vijay, Jasmine, Rosa\nis_exception(is_sat(ForAll([p:passengers], on_board(Fundy, p) == p) == [Rosa, Vijay, Greg, Jasmine])) ::: B) Rosa, Vijay, Greg, Jasmine\nis_exception(is_sat(ForAll([p:passengers], on_board(Fundy, p) == p) == [Vijay, Greg, Rosa, Jasmine])) ::: C) Vijay, Greg, Rosa, Jasmine\nis_exception(is_sat(ForAll([p:passengers], on_board(Fundy, p) == p) == [Vijay, Jasmine, Greg, Rosa])) ::: D) Vijay, Jasmine, Greg, Rosa\nis_exception(is_sat(ForAll([p:passengers], on_board(Fundy, p) == p) == [Vijay, Rosa, Jasmine, Greg])) ::: E) Vijay, Rosa, Jasmine, Greg\n------"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_4_22",
    "context": "A shuttle van stops exactly four times—once at Fundy, once at Los Altos, once at Mineola, and once at Simcoe—not necessarily in that order. The van starts with exactly four passengers on board—Greg, Jasmine, Rosa, and Vijay—each of whom gets off at a different stop. The following conditions hold: Los Altos is the first or second stop. Rosa is still on board when the van reaches Mineola. Jasmine is on board longer than Vijay. If Jasmine is still on board when the van reaches Fundy, then Greg is still on board when the van reaches Simcoe; otherwise, Greg is not still on board when the van reaches Simcoe.",
    "question": "Which one of the following must be true if Greg is still on board both when the van reaches Los Altos and when it reaches Simcoe, not necessarily in that order, assuming he is the second one off the van?",
    "answer": "C",
    "options": [
      "A) Vijay is on board when the van reaches Simcoe.",
      "B) Vijay is on board when the van reaches Los Altos.",
      "C) Rosa is on board when the van reaches Simcoe.",
      "D) Rosa is on board when the van reaches Fundy.",
      "E) Jasmine is on board when the van reaches Mineola."
    ],
    "raw_logic_programs": [
      "# Declarations\nstops = EnumSort([Fundy, Los_Altos, Mineola, Simcoe])\npassengers = EnumSort([Greg, Jasmine, Rosa, Vijay])\non_board = Function([stops, passengers] -> [bool])\n\n# Constraints\nForAll([s:stops], Count([p:passengers], on_board(s, p)) == 1) ::: each passenger gets off at a different stop\nAnd(on_board(Los_Altos, p), on_board(s, p)) ::: Los Altos is the first or second stop\non_board(Mineola, Rosa) ::: Rosa is still on board when the van reaches Mineola\non_board(s, Jasmine) > on_board(s, Vijay) ::: Jasmine is on board longer than Vijay\nAnd(on_board(Fundy, Jasmine), on_board(Simcoe, Greg)) ::: If Jasmine is still on board when the van reaches Fundy, then Greg is still on board when the van reaches Simcoe\n\n# Options\nQuestion ::: Which one of the following must be true if Greg is still on board both when the van reaches Los Altos and when it reaches Simcoe, not necessarily in that order, assuming he is the second one off the van?\nis_valid(Exists([s:stops], And(on_board(s, Vijay), on_board(Simcoe, Greg)))) ::: (A)\nis_valid(Exists([s:stops], And(on_board(Los_Altos, Vijay), on_board(Simcoe, Greg)))) ::: (B)\nis_valid(Exists([s:stops], And(on_board(Simcoe, Rosa), on_board(Simcoe, Greg)))) ::: (C)\nis_valid(Exists([s:stops], And(on_board(Fundy, Rosa), on_board(Simcoe, Greg)))) ::: (D)\nis_valid(Exists([s:stops], And(on_board(Mineola, Jasmine), on_board(Simcoe, Greg)))) ::: (E)\n------\nProblem:\nA company has exactly six employees—Greg, Hank, Iris, Jill, Kim, and Linda—who work in the accounting, human resources, information technology, legal, marketing, and public relations departments, respectively. The following conditions apply: Greg and Hank work in different departments. Iris and Jill work in different departments. Kim and Linda work in different departments. Greg and Kim work in different departments. Hank and Linda work in different departments.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) Greg and Jill work in different departments.\n(B) Greg and Jill work in the same"
    ]
  },
  {
    "id": "ar_lsat_200810_4-G_4_23",
    "context": "A shuttle van stops exactly four times—once at Fundy, once at Los Altos, once at Mineola, and once at Simcoe—not necessarily in that order. The van starts with exactly four passengers on board—Greg, Jasmine, Rosa, and Vijay—each of whom gets off at a different stop. The following conditions hold: Los Altos is the first or second stop. Rosa is still on board when the van reaches Mineola. Jasmine is on board longer than Vijay. If Jasmine is still on board when the van reaches Fundy, then Greg is still on board when the van reaches Simcoe; otherwise, Greg is not still on board when the van reaches Simcoe.",
    "question": "If Greg is not on board when the van reaches Simcoe, then which one of the following must be false?",
    "answer": "D",
    "options": [
      "A) Greg is on board when the van reaches Fundy.",
      "B) Jasmine is on board when the van reaches Mineola.",
      "C) Rosa is on board when the van reaches Fundy.",
      "D) Vijay is on board when the van reaches Fundy.",
      "E) Vijay is on board when the van reaches Mineola."
    ],
    "raw_logic_programs": [
      "# Declarations\nstops = EnumSort([Fundy, Los_Altos, Mineola, Simcoe])\npassengers = EnumSort([Greg, Jasmine, Rosa, Vijay])\non_board = Function([stops, passengers] -> [bool])\n\n# Constraints\nForAll([s:stops], Count([p:passengers], on_board(s, p)) == 1) ::: each passenger gets off at a different stop\nAnd(on_board(Los_Altos, p) < on_board(Mineola, p), on_board(Los_Altos, p) > on_board(Fundy, p)) ::: Los Altos is the first or second stop\non_board(Mineola, Rosa) ::: Rosa is still on board when the van reaches Mineola\non_board(Jasmine, s) > on_board(Vijay, s) ::: Jasmine is on board longer than Vijay\nImplies(on_board(Fundy, Jasmine), Not(on_board(Simcoe, Greg))) ::: If Jasmine is still on board when the van reaches Fundy, then Greg is still on board when the van reaches Simcoe; otherwise, Greg is not still on board when the van reaches Simcoe\n\n# Options\nQuestion ::: If Greg is not on board when the van reaches Simcoe, then which one of the following must be false?\nis_exception(is_sat(on_board(Fundy, Greg))) ::: (A)\nis_exception(is_sat(on_board(Mineola, Jasmine))) ::: (B)\nis_exception(is_sat(on_board(Fundy, Rosa))) ::: (C)\nis_exception(is_sat(on_board(Fundy, Vijay))) ::: (D)\nis_exception(is_sat(on_board(Mineola, Vijay))) ::: (E)\n------\nProblem:\nA company has exactly six employees—Greg, Hank, Iris, Jill, Kim, and Linda—who work in the accounting, human resources, and public relations departments. The following conditions apply: Greg and Hank work in the same department. Iris and Jill work in different departments. Kim and Linda work in different departments. Exactly two employees work in the accounting department. Exactly two employees work in the human resources department.\nQuestion:\nIf Greg works in the public relations department, then which one of the following must be true?\nChoices:\n(A) Hank works in the public relations department.\n(B) Iris works in the public relations department.\n(C) Jill works in the public relations department.\n(D) Kim works in the public relations department.\n(E) Linda works in the public relations department.\n###\n# Declarations"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_1_1",
    "context": "Individual hour-long auditions will be scheduled for each of six saxophonists—Fujimura, Gabrieli, Herman, Jackson, King, and Lauder. The auditions will all take place on the same day. Each audition will begin on the hour, with the first beginning at 1 P.M. and the last at 6 P.M. The schedule of auditions must conform to the following conditions: Jackson auditions earlier than Herman does. Gabrieli auditions earlier than King does. Gabrieli auditions either immediately before or immediately after Lauder does. Exactly one audition separates the auditions of Jackson and Lauder.",
    "question": "Which one of the following is an acceptable schedule for the auditions, listed in order from 1 P.M. through 6 P.M.?",
    "answer": "E",
    "options": [
      "A) Fujimura, Gabrieli, King, Jackson, Herman, Lauder",
      "B) Fujimura, King, Lauder, Gabrieli, Jackson, Herman",
      "C) Fujimura, Lauder, Gabrieli, King, Jackson, Herman",
      "D) Herman, Jackson, Gabrieli, Lauder, King, Fujimura",
      "E) Jackson, Gabrieli, Lauder, Herman, King, Fujimura"
    ],
    "raw_logic_programs": [
      "# Declarations\nsaxophonists = EnumSort([Fujimura, Gabrieli, Herman, Jackson, King, Lauder])\nauditions = Function([saxophonists] -> [int])\n\n# Constraints\nForAll([s:saxophonists], And(1 <= auditions(s), auditions(s) <= 6)) ::: The auditions will all take place on the same day\nAnd(auditions(Jackson) < auditions(Herman), auditions(Gabrieli) < auditions(King)) ::: Jackson auditions earlier than Herman does. Gabrieli auditions earlier than King does\nAnd(auditions(Gabrieli) == auditions(Lauder) - 1, auditions(Gabrieli) == auditions(Lauder) + 1) ::: Gabrieli auditions either immediately before or immediately after Lauder does\nauditions(Jackson) + 1 == auditions(Lauder) ::: Exactly one audition separates the auditions of Jackson and Lauder\n\n# Options\nQuestion ::: Which one of the following is an acceptable schedule for the auditions, listed in order from 1 P.M. through 6 P.M.?\nis_sat(And(auditions(Fujimura) == 1, auditions(Gabrieli) == 2, auditions(King) == 3, auditions(Jackson) == 4, auditions(Herman) == 5, auditions(Lauder) == 6)) ::: A) Fujimura, Gabrieli, King, Jackson, Herman, Lauder\nis_sat(And(auditions(Fujimura) == 1, auditions(King) == 2, auditions(Lauder) == 3, auditions(Gabrieli) == 4, auditions(Jackson) == 5, auditions(Herman) == 6)) ::: B) Fujimura, King, Lauder, Gabrieli, Jackson, Herman\nis_sat(And(auditions(Fujimura) == 1, auditions(Lauder) == 2, auditions(Gabrieli) == 3, auditions(King) == 4, auditions(Jackson) == 5, auditions(Herman) == 6)) ::: C) Fujimura, Lauder, Gabrieli, King, Jackson, Herman\nis_sat(And(auditions(Herman) == 1, auditions(Jackson) == 2, auditions(Gabrieli) == 3, auditions(Lauder) == 4, auditions(King) == 5, auditions(Fujimura) == 6)) ::: D) Herman, Jackson, Gabrieli, Lauder, King, Fujimura\nis_sat(And(auditions"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_1_2",
    "context": "Individual hour-long auditions will be scheduled for each of six saxophonists—Fujimura, Gabrieli, Herman, Jackson, King, and Lauder. The auditions will all take place on the same day. Each audition will begin on the hour, with the first beginning at 1 P.M. and the last at 6 P.M. The schedule of auditions must conform to the following conditions: Jackson auditions earlier than Herman does. Gabrieli auditions earlier than King does. Gabrieli auditions either immediately before or immediately after Lauder does. Exactly one audition separates the auditions of Jackson and Lauder.",
    "question": "Which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Lauder is scheduled to audition earlier than Herman.",
      "B) Lauder is scheduled to audition earlier than King.",
      "C) Jackson's audition is scheduled to begin at either 1 P.M. or 5 P.M.",
      "D) Fujimura and Jackson are not scheduled to audition in consecutive hours.",
      "E) Gabrieli and King are not scheduled to audition in consecutive hours."
    ],
    "raw_logic_programs": [
      "# Declarations\nsaxophonists = EnumSort([Fujimura, Gabrieli, Herman, Jackson, King, Lauder])\nauditions = Function([saxophonists] -> [int])\n\n# Constraints\nForAll([s:saxophonists], And(1 <= auditions(s), auditions(s) <= 6)) ::: Each audition will begin on the hour, with the first beginning at 1 P.M. and the last at 6 P.M.\nAnd(auditions(Jackson) < auditions(Herman), auditions(Gabrieli) < auditions(King)) ::: Jackson auditions earlier than Herman does. Gabrieli auditions earlier than King does.\nAnd(auditions(Gabrieli) == auditions(Lauder) - 1, auditions(Gabrieli) == auditions(Lauder) + 1) ::: Gabrieli auditions either immediately before or immediately after Lauder does.\nauditions(Jackson) + 1 == auditions(Lauder) ::: Exactly one audition separates the auditions of Jackson and Lauder.\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([s:saxophonists], s == Herman, auditions(Lauder) < auditions(s))) ::: (A)\nis_valid(Exists([s:saxophonists], s == King, auditions(Lauder) < auditions(s))) ::: (B)\nis_valid(Exists([s:saxophonists], s == Jackson, auditions(s) == 1, auditions(s) == 5)) ::: (C)\nis_valid(Exists([s:saxophonists], s == Fujimura, auditions(Jackson) == auditions(s) + 1)) ::: (D)\nis_valid(Exists([s:saxophonists], s == King, auditions(Gabrieli) == auditions(s) + 1)) ::: (E)\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The managers are to be assigned to offices on the top floor of a building. The offices are numbered 1 through 6, and each office is to be assigned to exactly one manager. The assignment of offices must conform to the following conditions: The office assigned to the manager of department A must be an even-numbered office. The office assigned to the manager of department B must be an odd-numbered office. The office assigned to the manager of department C must be an even-numbered office. The office assigned to the manager of department D must be an odd-numbered office. The office assigned to the manager of department E must be an even-numbered office. The office assigned to the manager of department F"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_1_3",
    "context": "Individual hour-long auditions will be scheduled for each of six saxophonists—Fujimura, Gabrieli, Herman, Jackson, King, and Lauder. The auditions will all take place on the same day. Each audition will begin on the hour, with the first beginning at 1 P.M. and the last at 6 P.M. The schedule of auditions must conform to the following conditions: Jackson auditions earlier than Herman does. Gabrieli auditions earlier than King does. Gabrieli auditions either immediately before or immediately after Lauder does. Exactly one audition separates the auditions of Jackson and Lauder.",
    "question": "The earliest King's audition could be scheduled to begin is",
    "answer": "C",
    "options": [
      "A) 5 P.M.",
      "B) 4 P.M.",
      "C) 3 P.M.",
      "D) 2 P.M.",
      "E) 1 P.M."
    ],
    "raw_logic_programs": [
      "# Declarations\nsaxophonists = EnumSort([Fujimura, Gabrieli, Herman, Jackson, King, Lauder])\nauditions = Function([saxophonists] -> [int])\nForAll([s:saxophonists], And(1 <= auditions(s), auditions(s) <= 6))\n\n# Constraints\nAnd(auditions(Jackson) < auditions(Herman), auditions(Gabrieli) < auditions(King)) ::: Jackson auditions earlier than Herman does. Gabrieli auditions earlier than King does.\nAnd(auditions(Gabrieli) == auditions(Lauder) - 1, auditions(Gabrieli) == auditions(Lauder) + 1) ::: Gabrieli auditions either immediately before or immediately after Lauder does.\nauditions(Jackson) + 1 == auditions(Lauder) ::: Exactly one audition separates the auditions of Jackson and Lauder.\n\n# Options\nQuestion ::: The earliest King's audition could be scheduled to begin is\nis_exception(is_sat(auditions(King) == 5)) ::: A) 5 P.M.\nis_exception(is_sat(auditions(King) == 4)) ::: B) 4 P.M.\nis_exception(is_sat(auditions(King) == 3)) ::: C) 3 P.M.\nis_exception(is_sat(auditions(King) == 2)) ::: D) 2 P.M.\nis_exception(is_sat(auditions(King) == 1)) ::: E) 1 P.M.\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which has a manager. The managers are to be assigned to six offices, one in each of the six floors of the company's building. The offices are numbered 1 through 6, with 1 being the top floor and 6 being the bottom floor. The assignment of managers to offices must conform to the following conditions: The manager of department A is assigned to office 1. The manager of department B is assigned to office 2. The manager of department C is assigned to office 3. The manager of department D is assigned to office 4. The manager of department E is assigned to office 5. The manager of department F is assigned to office 6.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) The manager of department A is assigned to the top floor.\n(B) The manager of department B is assigned to the top floor.\n(C) The manager of department C is assigned to the top floor.\n(D) The manager of department D is assigned to the top floor.\n(E) The manager of department E is assigned"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_1_4",
    "context": "Individual hour-long auditions will be scheduled for each of six saxophonists—Fujimura, Gabrieli, Herman, Jackson, King, and Lauder. The auditions will all take place on the same day. Each audition will begin on the hour, with the first beginning at 1 P.M. and the last at 6 P.M. The schedule of auditions must conform to the following conditions: Jackson auditions earlier than Herman does. Gabrieli auditions earlier than King does. Gabrieli auditions either immediately before or immediately after Lauder does. Exactly one audition separates the auditions of Jackson and Lauder.",
    "question": "The order in which the saxophonists are scheduled to audition is completely determined if which one of the following is true?",
    "answer": "C",
    "options": [
      "A) Herman's audition is scheduled to begin at 4 P.M.",
      "B) Jackson's audition is scheduled to begin at 1 P.M.",
      "C) Jackson's audition is scheduled to begin at 5 P.M.",
      "D) Lauder's audition is scheduled to begin at 1 P.M.",
      "E) Lauder's audition is scheduled to begin at 2 P.M."
    ],
    "raw_logic_programs": [
      "# Declarations\nsaxophonists = EnumSort([Fujimura, Gabrieli, Herman, Jackson, King, Lauder])\nauditions = Function([saxophonists] -> [int])\n\n# Constraints\nForAll([s:saxophonists], And(1 <= auditions(s), auditions(s) <= 6)) ::: The auditions will all take place on the same day\nAnd(auditions(Jackson) < auditions(Herman), auditions(Gabrieli) < auditions(King)) ::: Jackson auditions earlier than Herman does. Gabrieli auditions earlier than King does.\nAnd(auditions(Gabrieli) == auditions(Lauder) - 1, auditions(Gabrieli) == auditions(Lauder) + 1) ::: Gabrieli auditions either immediately before or immediately after Lauder does.\nauditions(Jackson) + 1 == auditions(Lauder) ::: Exactly one audition separates the auditions of Jackson and Lauder.\n\n# Options\nQuestion ::: The order in which the saxophonists are scheduled to audition is completely determined if which one of the following is true?\nis_exception(is_sat(auditions(Herman) == 4)) ::: (A)\nis_exception(is_sat(auditions(Jackson) == 1)) ::: (B)\nis_exception(is_sat(auditions(Jackson) == 5)) ::: (C)\nis_exception(is_sat(auditions(Lauder) == 1)) ::: (D)\nis_exception(is_sat(auditions(Lauder) == 2)) ::: (E)\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The managers are to be assigned to offices on the top floor of a building. The offices are numbered 1 through 6, and each office is to be assigned to exactly one manager. The assignment of offices must conform to the following conditions: The office assigned to the manager of department A must be an even-numbered office. The office assigned to the manager of department B must be an odd-numbered office. The office assigned to the manager of department C must be an even-numbered office. The office assigned to the manager of department D must be an odd-numbered office. The office assigned to the manager of department E must be an even-numbered office. The office assigned to the manager of department F must be an odd-numbered office.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) The manager of department A is assigned to office 1.\n(B) The manager of department B is assigned to office 2.\n(C) The manager of department C is assigned to office 3."
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_1_5",
    "context": "Individual hour-long auditions will be scheduled for each of six saxophonists—Fujimura, Gabrieli, Herman, Jackson, King, and Lauder. The auditions will all take place on the same day. Each audition will begin on the hour, with the first beginning at 1 P.M. and the last at 6 P.M. The schedule of auditions must conform to the following conditions: Jackson auditions earlier than Herman does. Gabrieli auditions earlier than King does. Gabrieli auditions either immediately before or immediately after Lauder does. Exactly one audition separates the auditions of Jackson and Lauder.",
    "question": "If Fujimura's audition is not scheduled to begin at 1 P.M., which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Herman's audition is scheduled to begin at 6 P.M.",
      "B) Gabrieli's audition is scheduled to begin at 5 P.M.",
      "C) Herman's audition is scheduled to begin at 3 P.M.",
      "D) Jackson's audition is scheduled to begin at 2 P.M.",
      "E) Jackson's audition is scheduled to begin at 5 P.M."
    ],
    "raw_logic_programs": [
      "# Declarations\nsaxophonists = EnumSort([Fujimura, Gabrieli, Herman, Jackson, King, Lauder])\nauditions = Function([saxophonists] -> [int])\n\n# Constraints\nForAll([s:saxophonists], And(1 <= auditions(s), auditions(s) <= 6)) ::: Each audition will begin on the hour, with the first beginning at 1 P.M. and the last at 6 P.M.\nAnd(auditions(Jackson) < auditions(Herman), auditions(Gabrieli) < auditions(King)) ::: Jackson auditions earlier than Herman does. Gabrieli auditions earlier than King does.\nAnd(auditions(Gabrieli) == auditions(Lauder) - 1, auditions(Gabrieli) == auditions(Lauder) + 1) ::: Gabrieli auditions either immediately before or immediately after Lauder does.\nauditions(Jackson) + 1 == auditions(Lauder) ::: Exactly one audition separates the auditions of Jackson and Lauder.\n\n# Options\nQuestion ::: If Fujimura's audition is not scheduled to begin at 1 P.M., which one of the following could be true?\nis_exception(is_sat(auditions(Herman) == 6)) ::: (A)\nis_exception(is_sat(auditions(Gabrieli) == 5)) ::: (B)\nis_exception(is_sat(auditions(Herman) == 3)) ::: (C)\nis_exception(is_sat(auditions(Jackson) == 2)) ::: (D)\nis_exception(is_sat(auditions(Jackson) == 5)) ::: (E)\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The managers are to be assigned to offices on the top floor of a building. The offices are numbered 1 through 6, and each office is to be assigned to exactly one manager. The assignment of offices must conform to the following conditions: The office assigned to the manager of department A must be adjacent to the office assigned to the manager of department B. The office assigned to the manager of department C must be adjacent to the office assigned to the manager of department D. The office assigned to the manager of department E must be adjacent to the office assigned to the manager of department F. The office assigned to the manager of department A must be adjacent to the office assigned to the manager of department E.\nQuestion:\nIf the manager of department B is assigned to office 1, which one of the following must be true?\nChoices:\n(A) The manager of department A is assigned to office 2.\n(B) The manager of department C is assigned to office"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_1_6",
    "context": "Individual hour-long auditions will be scheduled for each of six saxophonists—Fujimura, Gabrieli, Herman, Jackson, King, and Lauder. The auditions will all take place on the same day. Each audition will begin on the hour, with the first beginning at 1 P.M. and the last at 6 P.M. The schedule of auditions must conform to the following conditions: Jackson auditions earlier than Herman does. Gabrieli auditions earlier than King does. Gabrieli auditions either immediately before or immediately after Lauder does. Exactly one audition separates the auditions of Jackson and Lauder.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Gabrieli's audition is scheduled to begin before 5 P.M.",
      "B) Herman's audition is scheduled to begin after 2 P.M.",
      "C) Herman's audition is scheduled to begin before 6 P.M.",
      "D) King's audition is scheduled to begin before 6 P.M.",
      "E) Lauder's audition is scheduled to begin before 5 P.M."
    ],
    "raw_logic_programs": [
      "# Declarations\nsaxophonists = EnumSort([Fujimura, Gabrieli, Herman, Jackson, King, Lauder])\nauditions = Function([saxophonists] -> [int])\n\n# Constraints\nForAll([s:saxophonists], And(1 <= auditions(s), auditions(s) <= 6)) ::: Each audition will begin on the hour, with the first beginning at 1 P.M. and the last at 6 P.M.\nAnd(auditions(Jackson) < auditions(Herman), auditions(Gabrieli) < auditions(King)) ::: Jackson auditions earlier than Herman does. Gabrieli auditions earlier than King does.\nAnd(auditions(Gabrieli) == auditions(Lauder) - 1, auditions(Gabrieli) == auditions(Lauder) + 1) ::: Gabrieli auditions either immediately before or immediately after Lauder does.\nauditions(Jackson) + 1 == auditions(Lauder) ::: Exactly one audition separates the auditions of Jackson and Lauder.\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([s:saxophonists], auditions(s) < 5)) ::: A) Gabrieli's audition is scheduled to begin before 5 P.M.\nis_valid(Exists([s:saxophonists], auditions(s) > 2)) ::: B) Herman's audition is scheduled to begin after 2 P.M.\nis_valid(Exists([s:saxophonists], auditions(s) < 6)) ::: C) Herman's audition is scheduled to begin before 6 P.M.\nis_valid(Exists([s:saxophonists], auditions(s) < 6)) ::: D) King's audition is scheduled to begin before 6 P.M.\nis_valid(Exists([s:saxophonists], auditions(s) < 5)) ::: E) Lauder's audition is scheduled to begin before 5 P.M.\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which has a manager. The managers are to be assigned to six offices, one in each of six buildings—1, 2, 3, 4, 5, and 6—according to the following conditions: The manager of department A is assigned to office 1. The manager of department B is assigned to office 2. The manager of department C is assigned to office 3. The manager of department D is assigned to office 4. The manager of department E is assigned to office 5. The manager of department F is assigned to office 6.\nQuestion:\nWhich one of the following must be true"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_2_7",
    "context": "Four people—Grace, Heather, Josh, and Maria—will help each other move exactly three pieces of furniture—a recliner, a sofa, and a table. Each piece of furniture will be moved by exactly two of the people, and each person will help move at least one of the pieces of furniture, subject to the following constraints: Grace helps move the sofa if, but only if, Heather helps move the recliner. If Josh helps move the table, then Maria helps move the recliner. No piece of furniture is moved by Grace and Josh together.",
    "question": "Which one of the following could be an accurate matching of each piece of furniture to the two people who help each other move it?",
    "answer": "A",
    "options": [
      "A) recliner: Grace and Maria; sofa: Heather and Josh; table: Grace and Heather",
      "B) recliner: Grace and Maria; sofa: Heather and Maria; table: Grace and Josh",
      "C) recliner: Heather and Josh; sofa: Grace and Heather; table: Josh and Maria",
      "D) recliner: Heather and Josh; sofa: Heather and Maria; table: Grace and Maria",
      "E) recliner: Josh and Maria; sofa: Grace and Heather; table: Grace and Maria"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Grace, Heather, Josh, Maria])\nfurniture = EnumSort([recliner, sofa, table])\nmoves = Function([people, furniture] -> [bool])\n\n# Constraints\nForAll([p:people], Count([f:furniture], moves(p, f)) >= 1) ::: each person will help move at least one of the pieces of furniture\nForAll([f:furniture], Count([p:people], moves(p, f)) == 2) ::: each piece of furniture will be moved by exactly two of the people\nImplies(moves(Grace, sofa), moves(Heather, recliner)) ::: Grace helps move the sofa if, but only if, Heather helps move the recliner\nImplies(moves(Josh, table), moves(Maria, recliner)) ::: If Josh helps move the table, then Maria helps move the recliner\nForAll([p:people], Implies(p == Grace, Not(p == Josh))) ::: No piece of furniture is moved by Grace and Josh together\n\n# Options\nQuestion ::: Which one of the following could be an accurate matching of each piece of furniture to the two people who help each other move it?\nis_sat(And(moves(Grace, recliner), moves(Maria, recliner), moves(Heather, sofa), moves(Josh, sofa), moves(Grace, table), moves(Heather, table))) ::: (A)\nis_sat(And(moves(Grace, recliner), moves(Maria, recliner), moves(Heather, sofa), moves(Maria, sofa), moves(Grace, table), moves(Josh, table))) ::: (B)\nis_sat(And(moves(Heather, recliner), moves(Josh, recliner), moves(Grace, sofa), moves(Heather, sofa), moves(Josh, table), moves(Maria, table))) ::: (C)\nis_sat(And(moves(Heather, recliner), moves(Josh, recliner), moves(Heather, sofa), moves(Maria, sofa), moves(Josh, table), moves(Maria, table))) ::: (D)\nis_sat(And(moves(Josh, recliner), moves(Maria, recliner), moves(Grace, sofa), moves(Heather, sofa), moves(Grace, table), moves(Maria, table))) ::: (E)\n------\nProblem:\nA company has five employees—Greg, Hank, Iris, Jill, and Kim—who are to be assigned to five different positions—manager, assistant manager, salesperson, bookkeeper, and receptionist. The following conditions apply: Greg is not the"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_2_8",
    "context": "Four people—Grace, Heather, Josh, and Maria—will help each other move exactly three pieces of furniture—a recliner, a sofa, and a table. Each piece of furniture will be moved by exactly two of the people, and each person will help move at least one of the pieces of furniture, subject to the following constraints: Grace helps move the sofa if, but only if, Heather helps move the recliner. If Josh helps move the table, then Maria helps move the recliner. No piece of furniture is moved by Grace and Josh together.",
    "question": "If Josh and Maria help each other move the recliner, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Heather helps move the sofa.",
      "B) Josh helps move the sofa.",
      "C) Maria helps move the sofa.",
      "D) Grace helps move the table.",
      "E) Heather helps move the table."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Grace, Heather, Josh, Maria])\nfurniture = EnumSort([recliner, sofa, table])\nmoves = Function([people, furniture] -> [bool])\n\n# Constraints\nForAll([p:people], Count([f:furniture], moves(p, f)) >= 1) ::: each person will help move at least one of the pieces of furniture\nForAll([f:furniture], Count([p:people], moves(p, f)) == 2) ::: each piece of furniture will be moved by exactly two of the people\nImplies(moves(Grace, sofa), moves(Heather, recliner)) ::: Grace helps move the sofa if, but only if, Heather helps move the recliner\nImplies(moves(Josh, table), moves(Maria, recliner)) ::: If Josh helps move the table, then Maria helps move the recliner\nForAll([f:furniture], Implies(moves(Grace, f), Not(moves(Josh, f)))) ::: No piece of furniture is moved by Grace and Josh together\n\n# Options\nQuestion ::: If Josh and Maria help each other move the recliner, then which one of the following must be true?\nis_sat(ForAll([f:furniture], moves(Heather, f))) ::: (A)\nis_sat(ForAll([f:furniture], moves(Josh, f))) ::: (B)\nis_sat(ForAll([f:furniture], moves(Maria, f))) ::: (C)\nis_sat(ForAll([f:furniture], moves(Grace, f))) ::: (D)\nis_sat(ForAll([f:furniture], moves(Heather, f))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_2_9",
    "context": "Four people—Grace, Heather, Josh, and Maria—will help each other move exactly three pieces of furniture—a recliner, a sofa, and a table. Each piece of furniture will be moved by exactly two of the people, and each person will help move at least one of the pieces of furniture, subject to the following constraints: Grace helps move the sofa if, but only if, Heather helps move the recliner. If Josh helps move the table, then Maria helps move the recliner. No piece of furniture is moved by Grace and Josh together.",
    "question": "If Heather helps move each of the pieces of furniture, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Grace helps move the recliner.",
      "B) Maria helps move the recliner.",
      "C) Josh helps move the sofa.",
      "D) Maria helps move the sofa.",
      "E) Grace helps move the table."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Grace, Heather, Josh, Maria])\nfurniture = EnumSort([recliner, sofa, table])\nmoves = Function([people, furniture] -> [bool])\n\n# Constraints\nForAll([p:people], Count([f:furniture], moves(p, f)) >= 1) ::: each person will help move at least one of the pieces of furniture\nAnd(moves(Grace, sofa), moves(Heather, recliner)) ::: Grace helps move the sofa if, but only if, Heather helps move the recliner\nAnd(moves(Josh, table), moves(Maria, recliner)) ::: If Josh helps move the table, then Maria helps move the recliner\nForAll([f:furniture], Count([p:people], moves(p, f)) == 2) ::: Each piece of furniture will be moved by exactly two of the people\nForAll([p:people], Implies(moves(Grace, f), Not(moves(Josh, f)))) ::: No piece of furniture is moved by Grace and Josh together\n\n# Options\nQuestion ::: If Heather helps move each of the pieces of furniture, then which one of the following could be true?\nis_sat(ForAll([p:people], moves(p, recliner))) ::: (A)\nis_sat(ForAll([p:people], moves(p, recliner))) ::: (B)\nis_sat(ForAll([p:people], moves(p, sofa))) ::: (C)\nis_sat(ForAll([p:people], moves(p, sofa))) ::: (D)\nis_sat(ForAll([p:people], moves(p, table))) ::: (E)\n------\nProblem:\nA group of six people—F, G"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_2_10",
    "context": "Four people—Grace, Heather, Josh, and Maria—will help each other move exactly three pieces of furniture—a recliner, a sofa, and a table. Each piece of furniture will be moved by exactly two of the people, and each person will help move at least one of the pieces of furniture, subject to the following constraints: Grace helps move the sofa if, but only if, Heather helps move the recliner. If Josh helps move the table, then Maria helps move the recliner. No piece of furniture is moved by Grace and Josh together.",
    "question": "Which one of the following could be a pair of people who help each other move both the recliner and the table?",
    "answer": "B",
    "options": [
      "A) Grace and Josh",
      "B) Grace and Maria",
      "C) Heather and Josh",
      "D) Heather and Maria",
      "E) Josh and Maria"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Grace, Heather, Josh, Maria])\nfurniture = EnumSort([recliner, sofa, table])\nmoves = Function([people, furniture] -> [bool])\n\n# Constraints\nForAll([p:people], Count([f:furniture], moves(p, f)) >= 1) ::: each person will help move at least one of the pieces of furniture\nAnd(moves(Grace, sofa), moves(Heather, recliner)) ::: Grace helps move the sofa if, but only if, Heather helps move the recliner\nAnd(moves(Josh, table), moves(Maria, recliner)) ::: If Josh helps move the table, then Maria helps move the recliner\nForAll([f:furniture], Count([p:people], moves(p, f)) == 2) ::: Each piece of furniture will be moved by exactly two of the people\nForAll([p:people], Implies(moves(Grace, f), Not(moves(Josh, f)))) ::: No piece of furniture is moved by Grace and Josh together\n\n# Options\nQuestion ::: Which one of the following could be a pair of people who help each other move both the recliner and the table?\nis_sat(And(moves(Grace, recliner), moves(Grace, table), moves(Josh, recliner), moves(Josh, table))) ::: (A)\nis_sat(And(moves(Grace, recliner), moves(Grace, table), moves(Maria, recliner), moves(Maria, table))) ::: (B)\nis_sat(And(moves(Heather, recliner), moves(Heather, table), moves(Josh, recliner), moves(Josh, table))) ::: (C)"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_2_11",
    "context": "Four people—Grace, Heather, Josh, and Maria—will help each other move exactly three pieces of furniture—a recliner, a sofa, and a table. Each piece of furniture will be moved by exactly two of the people, and each person will help move at least one of the pieces of furniture, subject to the following constraints: Grace helps move the sofa if, but only if, Heather helps move the recliner. If Josh helps move the table, then Maria helps move the recliner. No piece of furniture is moved by Grace and Josh together.",
    "question": "If Josh and Maria help each other move the sofa, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Heather and Josh help each other move the recliner.",
      "B) Heather and Maria help each other move the recliner.",
      "C) Grace and Josh help each other move the table.",
      "D) Grace and Maria help each other move the table.",
      "E) Heather and Maria help each other move the table."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Grace, Heather, Josh, Maria])\nfurniture = EnumSort([recliner, sofa, table])\nmoves = Function([people, furniture] -> [bool])\n\n# Constraints\nForAll([p:people], Count([f:furniture], moves(p, f)) >= 1) ::: Each person will help move at least one of the pieces of furniture\nAnd(moves(Grace, sofa), moves(Heather, recliner)) ::: Grace helps move the sofa if, but only if, Heather helps move the recliner\nAnd(moves(Josh, table), moves(Maria, recliner)) ::: If Josh helps move the table, then Maria helps move the recliner\nForAll([f:furniture], Count([p:people], moves(p, f)) == 2) ::: Each piece of furniture will be moved by exactly two of the people\nForAll([p:people], Implies(moves(Grace, p), Not(moves(Josh, p)))) ::: No piece of furniture is moved by Grace and Josh together\n\n# Options\nQuestion ::: If Josh and Maria help each other move the sofa, then which one of the following could be true?\nis_valid(And(moves(Heather, recliner), moves(Josh, recliner))) ::: (A)\nis_valid(And(moves(Heather, recliner), moves(Maria, recliner))) ::: (B)\nis_valid(And(moves(Grace, table), moves(Josh, table))) ::: (C)\nis_valid(And(moves(Grace, table), moves(Maria, table))) ::: (D)\nis_valid(And(moves(Heather, table), moves(Maria, table))) ::: (E"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_3_12",
    "context": "A town has exactly two public parks—Graystone Park and Landing Park—which are to be planted with North American trees. There are exactly four varieties of trees available—maples, oaks, sycamores, and tamaracks. The planting of the trees must be in accord with the following: Each of the parks is planted with exactly three of the varieties. At least one of the parks is planted with both maples and sycamores. Any park that is planted with oaks will also be planted with tamaracks. Graystone Park is planted with maples.",
    "question": "Which one of the following could be a complete and accurate list of the varieties of trees planted in each of the parks?",
    "answer": "D",
    "options": [
      "A) Graystone Park: maples, oaks, sycamores Landing Park: maples, oaks, sycamores",
      "B) Graystone Park: maples, oaks, tamaracks Landing Park: maples, oaks, tamaracks",
      "C) Graystone Park: maples, sycamores, tamaracks Landing Park: maples, oaks, sycamores",
      "D) Graystone Park: maples, sycamores, tamaracks Landing Park: maples, oaks, tamaracks",
      "E) Graystone Park: oaks, sycamores, tamaracks Landing Park: maples, sycamores, tamaracks"
    ],
    "raw_logic_programs": [
      "# Declarations\nparks = EnumSort([Graystone, Landing])\ntrees = EnumSort([maples, oaks, sycamores, tamaracks])\nplanted = Function([parks, trees] -> [bool])\n\n# Constraints\nForAll([p:parks], Count([t:trees], planted(p, t)) == 3) ::: Each of the parks is planted with exactly three of the varieties\nAnd(planted(Graystone, maples), planted(Graystone, sycamores)) ::: At least one of the parks is planted with both maples and sycamores\nAnd(planted(p:parks, oaks), planted(p, tamaracks)) ::: Any park that is planted with oaks will also be planted with tamaracks\nplanted(Graystone, maples) ::: Graystone Park is planted with maples\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the varieties of trees planted in each of the parks?\nis_sat(And(planted(Graystone, maples), planted(Graystone, oaks), planted(Graystone, sycamores), planted(Landing, maples), planted(Landing, oaks), planted(Landing, sycamores))) ::: A)\nis_sat(And(planted(Graystone, maples), planted(Graystone, oaks), planted(Graystone, tamaracks), planted(Landing, maples), planted(Landing, oaks), planted(Landing, tamaracks))) ::: B)\nis_sat(And(planted(Graystone, maples), planted(Graystone, sycamores), planted(Graystone, tamaracks), planted(Landing, maples),"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_3_13",
    "context": "A town has exactly two public parks—Graystone Park and Landing Park—which are to be planted with North American trees. There are exactly four varieties of trees available—maples, oaks, sycamores, and tamaracks. The planting of the trees must be in accord with the following: Each of the parks is planted with exactly three of the varieties. At least one of the parks is planted with both maples and sycamores. Any park that is planted with oaks will also be planted with tamaracks. Graystone Park is planted with maples.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Graystone Park is planted with sycamores.",
      "B) Landing Park is planted with maples.",
      "C) Landing Park is planted with tamaracks.",
      "D) The number of the parks planted with maples is equal to the number of the parks planted with sycamores.",
      "E) The number of the parks planted with maples is greater than the number of the parks planted with sycamores."
    ],
    "raw_logic_programs": [
      "# Declarations\nparks = EnumSort([Graystone, Landing])\ntrees = EnumSort([maples, oaks, sycamores, tamaracks])\nplanted = Function([parks, trees] -> [bool])\n\n# Constraints\nForAll([p:parks], Count([t:trees], planted(p, t)) == 3) ::: Each of the parks is planted with exactly three of the varieties\nAnd(planted(Graystone, maples), planted(Graystone, sycamores)) ::: At least one of the parks is planted with both maples and sycamores\nAnd(planted(p:parks, oaks), planted(p, tamaracks)) ::: Any park that is planted with oaks will also be planted with tamaracks\nplanted(Graystone, maples) ::: Graystone Park is planted with maples\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(planted(Graystone, sycamores)) ::: A) Graystone Park is planted with sycamores.\nis_valid(planted(Landing, maples)) ::: B) Landing Park is planted with maples.\nis_valid(planted(Landing, tamaracks)) ::: C) Landing Park is planted with tamaracks.\nis_valid(Count([p:parks], planted(p, maples)) == Count([p:parks], planted(p, sycamores))) ::: D) The number of the parks planted with maples is equal to the number of the parks planted with sycamores.\nis_valid(Count([p:parks], planted(p, maples)) > Count([p:parks], planted(p, sycamores))) ::: E) The number of the parks planted with maples"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_3_14",
    "context": "A town has exactly two public parks—Graystone Park and Landing Park—which are to be planted with North American trees. There are exactly four varieties of trees available—maples, oaks, sycamores, and tamaracks. The planting of the trees must be in accord with the following: Each of the parks is planted with exactly three of the varieties. At least one of the parks is planted with both maples and sycamores. Any park that is planted with oaks will also be planted with tamaracks. Graystone Park is planted with maples.",
    "question": "If both parks are planted with sycamores, which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) The number of the parks planted with maples is equal to the number of the parks planted with oaks.",
      "B) The number of the parks planted with maples is greater than the number of the parks planted with sycamores.",
      "C) The number of the parks planted with oaks is equal to the number of the parks planted with sycamores.",
      "D) Graystone Park is planted with both maples and oaks.",
      "E) Landing Park is planted with both maples and oaks."
    ],
    "raw_logic_programs": [
      "# Declarations\nparks = EnumSort([Graystone, Landing])\ntrees = EnumSort([maples, oaks, sycamores, tamaracks])\nplanted = Function([parks, trees] -> [bool])\n\n# Constraints\nForAll([p:parks], Count([t:trees], planted(p, t)) == 3) ::: Each of the parks is planted with exactly three of the varieties\nAnd(planted(Graystone, maples), planted(Graystone, sycamores)) ::: At least one of the parks is planted with both maples and sycamores\nAnd(planted(p:parks, oaks), planted(p, tamaracks)) ::: Any park that is planted with oaks will also be planted with tamaracks\nplanted(Graystone, maples) ::: Graystone Park is planted with maples\n\n# Options\nQuestion ::: If both parks are planted with sycamores, which one of the following could be true?\nis_valid(Exists([p:parks], planted(p, maples) && planted(p, oaks))) ::: A) The number of the parks planted with maples is equal to the number of the parks planted with oaks.\nis_valid(Exists([p:parks], planted(p, maples) && planted(p, sycamores))) ::: B) The number of the parks planted with maples is greater than the number of the parks planted with sycamores.\nis_valid(Exists([p:parks], planted(p, oaks) && planted(p, sycamores))) ::: C) The number of the parks planted with oaks is equal to the number of the parks planted with sycamores.\nis_valid(Exists([p:parks], planted(p"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_3_15",
    "context": "A town has exactly two public parks—Graystone Park and Landing Park—which are to be planted with North American trees. There are exactly four varieties of trees available—maples, oaks, sycamores, and tamaracks. The planting of the trees must be in accord with the following: Each of the parks is planted with exactly three of the varieties. At least one of the parks is planted with both maples and sycamores. Any park that is planted with oaks will also be planted with tamaracks. Graystone Park is planted with maples.",
    "question": "Which one of the following must be false?",
    "answer": "A",
    "options": [
      "A) Both parks are planted with oaks.",
      "B) Both parks are planted with sycamores.",
      "C) Both parks are planted with tamaracks.",
      "D) Exactly one of the parks is planted with maples.",
      "E) Exactly one of the parks is planted with sycamores."
    ],
    "raw_logic_programs": [
      "# Declarations\nparks = EnumSort([Graystone, Landing])\ntrees = EnumSort([maples, oaks, sycamores, tamaracks])\nplanted = Function([parks, trees] -> [bool])\n\n# Constraints\nForAll([p:parks], Count([t:trees], planted(p, t)) == 3) ::: Each of the parks is planted with exactly three of the varieties\nAnd(planted(Graystone, maples), planted(Graystone, sycamores)) ::: At least one of the parks is planted with both maples and sycamores\nAnd(planted(p, oaks), planted(p, tamaracks)) ::: Any park that is planted with oaks will also be planted with tamaracks\nplanted(Graystone, maples) ::: Graystone Park is planted with maples\n\n# Options\nQuestion ::: Which one of the following must be false?\nis_exception(is_sat(ForAll([p:parks], planted(p, oaks)))) ::: A)\nis_exception(is_sat(ForAll([p:parks], planted(p, sycamores)))) ::: B)\nis_exception(is_sat(ForAll([p:parks], planted(p, tamaracks)))) ::: C)\nis_exception(is_sat(Exists([p:parks], planted(p, maples)))) ::: D)\nis_exception(is_sat(Exists([p:parks], planted(p, sycamores)))) ::: E)\n------\nProblem:\nA company has exactly six employees—Fred, Gail, Hank, Iris, Jim, and Karen—who are to be assigned to exactly three departments—the accounting department, the marketing department, and the sales department. The assignment of the"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_3_16",
    "context": "A town has exactly two public parks—Graystone Park and Landing Park—which are to be planted with North American trees. There are exactly four varieties of trees available—maples, oaks, sycamores, and tamaracks. The planting of the trees must be in accord with the following: Each of the parks is planted with exactly three of the varieties. At least one of the parks is planted with both maples and sycamores. Any park that is planted with oaks will also be planted with tamaracks. Graystone Park is planted with maples.",
    "question": "Which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) The number of the parks planted with oaks is equal to the number of the parks planted with tamaracks.",
      "B) The number of the parks planted with oaks is greater than the number of the parks planted with sycamores.",
      "C) Exactly one of the parks is planted with tamaracks.",
      "D) Neither park is planted with tamaracks.",
      "E) Both parks contain exactly the same three varieties of trees as each other."
    ],
    "raw_logic_programs": [
      "# Declarations\nparks = EnumSort([Graystone, Landing])\ntrees = EnumSort([maples, oaks, sycamores, tamaracks])\nplanted = Function([parks, trees] -> [bool])\n\n# Constraints\nForAll([p:parks], Count([t:trees], planted(p, t)) == 3) ::: Each of the parks is planted with exactly three of the varieties\nAnd(planted(Graystone, maples), planted(Graystone, sycamores)) ::: At least one of the parks is planted with both maples and sycamores\nAnd(planted(p:parks, oaks), planted(p, tamaracks)) ::: Any park that is planted with oaks will also be planted with tamaracks\nplanted(Graystone, maples) ::: Graystone Park is planted with maples\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(ForAll([p:parks], planted(p, oaks) == planted(p, tamaracks))) ::: (A)\nis_valid(ForAll([p:parks], Count([t:trees], planted(p, oaks)) > Count([t:trees], planted(p, sycamores)))) ::: (B)\nis_valid(Exists([p:parks], planted(p, tamaracks))) ::: (C)\nis_valid(ForAll([p:parks], Not(planted(p, tamaracks)))) ::: (D)\nis_valid(ForAll([p:parks], ForAll([t:trees], planted(Graystone, t) == planted(p, t)))) ::: (E)\n------\nProblem:\nA company has exactly six employees—Fred, Gail, Hank, Iris, Jim, and"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_4_17",
    "context": "Five executives—Quinn, Rodriguez, Sasada, Taylor, and Vandercar—are being scheduled to make site visits to three of their company's manufacturing plants—Farmington, Homestead, and Morningside. Each site will be visited by at least one of the executives and each executive will visit just one site. Each of the three site visits will take place on a different day. The schedule of site visits must conform to the following requirements: The Farmington visit must take place before the Homestead visit. The Farmington visit will include only one of the executives. The site visit that includes Quinn must take place before any site visit that includes either Rodriguez or Taylor. The site visit that includes Sasada cannot take place after any site visit that includes Vandercar.",
    "question": "Which one of the following could be the executives included in each of the site visits, with the sites listed in the order in which they are visited?",
    "answer": "A",
    "options": [
      "A) Farmington: Quinn Homestead: Rodriguez, Sasada Morningside: Taylor, Vandercar",
      "B) Farmington: Quinn Homestead: Rodriguez, Vandercar Morningside: Sasada, Taylor",
      "C) Farmington: Rodriguez Morningside: Quinn, Taylor Homestead: Sasada, Vandercar",
      "D) Homestead: Sasada Farmington: Quinn Morningside: Rodriguez, Taylor, Vandercar",
      "E) Morningside: Quinn Farmington: Rodriguez, Sasada Homestead: Taylor, Vandercar"
    ],
    "raw_logic_programs": [
      "# Declarations\nexecutives = EnumSort([Quinn, Rodriguez, Sasada, Taylor, Vandercar])\nsites = EnumSort([Farmington, Homestead, Morningside])\nvisits = Function([executives, sites] -> [bool])\n\n# Constraints\nForAll([e:executives], Count([s:sites], visits(e, s)) == 1) ::: Each site will be visited by at least one of the executives and each executive will visit just one site\nForAll([s:sites], Count([e:executives], visits(e, s)) == 1) ::: Each site will be visited by at least one of the executives and each executive will visit just one site\nForAll([s:sites], Implies(visits(Quinn, s), Not(visits(Rodriguez, s)))) ::: The site visit that includes Quinn must take place before any site visit that includes either Rodriguez or Taylor\nForAll([s:sites], Implies(visits(Quinn, s), Not(visits(Taylor, s)))) ::: The site visit that includes Quinn must take place before any site visit that includes either Rodriguez or Taylor\nForAll([s:sites], Implies(visits(Sasada, s), Not(visits(Vandercar, s)))) ::: The site visit that includes Sasada cannot take place after any site visit that includes Vandercar\nForAll([s:sites], Implies(visits(Farmington, s), Not(visits(Homestead, s)))) ::: The Farmington visit must take place before the Homestead visit\nForAll([s:sites], Implies(visits(Farmington, s), Not(visits(Morningside, s)))) ::: The Farmington visit must take place before the Homestead visit\nForAll([s:sites], Implies(visits"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_4_18",
    "context": "Five executives—Quinn, Rodriguez, Sasada, Taylor, and Vandercar—are being scheduled to make site visits to three of their company's manufacturing plants—Farmington, Homestead, and Morningside. Each site will be visited by at least one of the executives and each executive will visit just one site. Each of the three site visits will take place on a different day. The schedule of site visits must conform to the following requirements: The Farmington visit must take place before the Homestead visit. The Farmington visit will include only one of the executives. The site visit that includes Quinn must take place before any site visit that includes either Rodriguez or Taylor. The site visit that includes Sasada cannot take place after any site visit that includes Vandercar.",
    "question": "If the second of the three site visits includes both Rodriguez and Taylor, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) The Farmington visit includes Quinn.",
      "B) The Homestead visit includes Vandercar.",
      "C) The Morningside visit includes Sasada.",
      "D) The second of the three site visits includes Sasada.",
      "E) The second of the three site visits includes exactly three of the executives."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_4_19",
    "context": "Five executives—Quinn, Rodriguez, Sasada, Taylor, and Vandercar—are being scheduled to make site visits to three of their company's manufacturing plants—Farmington, Homestead, and Morningside. Each site will be visited by at least one of the executives and each executive will visit just one site. Each of the three site visits will take place on a different day. The schedule of site visits must conform to the following requirements: The Farmington visit must take place before the Homestead visit. The Farmington visit will include only one of the executives. The site visit that includes Quinn must take place before any site visit that includes either Rodriguez or Taylor. The site visit that includes Sasada cannot take place after any site visit that includes Vandercar.",
    "question": "If one of the site visits includes both Quinn and Sasada, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) The Farmington visit is the first of the three site visits.",
      "B) The Homestead visit is the second of the three site visits.",
      "C) One of the site visits includes only Vandercar.",
      "D) The second of the three site visits includes Sasada.",
      "E) The second of the three site visits includes exactly two of the executives."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_4_20",
    "context": "Five executives—Quinn, Rodriguez, Sasada, Taylor, and Vandercar—are being scheduled to make site visits to three of their company's manufacturing plants—Farmington, Homestead, and Morningside. Each site will be visited by at least one of the executives and each executive will visit just one site. Each of the three site visits will take place on a different day. The schedule of site visits must conform to the following requirements: The Farmington visit must take place before the Homestead visit. The Farmington visit will include only one of the executives. The site visit that includes Quinn must take place before any site visit that includes either Rodriguez or Taylor. The site visit that includes Sasada cannot take place after any site visit that includes Vandercar.",
    "question": "The executives who visit Homestead CANNOT be",
    "answer": "D",
    "options": [
      "A) Quinn and Vandercar only",
      "B) Rodriguez and Taylor only",
      "C) Sasada and Taylor only",
      "D) Quinn, Sasada, and Vandercar",
      "E) Rodriguez, Sasada, and Taylor"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_4_21",
    "context": "Five executives—Quinn, Rodriguez, Sasada, Taylor, and Vandercar—are being scheduled to make site visits to three of their company's manufacturing plants—Farmington, Homestead, and Morningside. Each site will be visited by at least one of the executives and each executive will visit just one site. Each of the three site visits will take place on a different day. The schedule of site visits must conform to the following requirements: The Farmington visit must take place before the Homestead visit. The Farmington visit will include only one of the executives. The site visit that includes Quinn must take place before any site visit that includes either Rodriguez or Taylor. The site visit that includes Sasada cannot take place after any site visit that includes Vandercar.",
    "question": "If the Morningside visit includes both Quinn and Vandercar, which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) One of the site visits includes both Rodriguez and Sasada.",
      "B) The second of the three site visits includes exactly three of the executives.",
      "C) The last of the three site visits includes exactly three of the executives.",
      "D) The Homestead visit takes place earlier than the Morningside visit.",
      "E) The Morningside visit takes place earlier than the Farmington visit."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_4_22",
    "context": "Five executives—Quinn, Rodriguez, Sasada, Taylor, and Vandercar—are being scheduled to make site visits to three of their company's manufacturing plants—Farmington, Homestead, and Morningside. Each site will be visited by at least one of the executives and each executive will visit just one site. Each of the three site visits will take place on a different day. The schedule of site visits must conform to the following requirements: The Farmington visit must take place before the Homestead visit. The Farmington visit will include only one of the executives. The site visit that includes Quinn must take place before any site visit that includes either Rodriguez or Taylor. The site visit that includes Sasada cannot take place after any site visit that includes Vandercar.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The Farmington visit takes place earlier than the Morningside visit.",
      "B) The site visit that includes Vandercar takes place earlier than the site visit that includes Rodriguez.",
      "C) One of the first two site visits includes Sasada.",
      "D) The second of the three site visits includes at least two of the executives.",
      "E) At least one of the first two site visits includes only one of the executives."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200812_1-G_4_23",
    "context": "Five executives—Quinn, Rodriguez, Sasada, Taylor, and Vandercar—are being scheduled to make site visits to three of their company's manufacturing plants—Farmington, Homestead, and Morningside. Each site will be visited by at least one of the executives and each executive will visit just one site. Each of the three site visits will take place on a different day. The schedule of site visits must conform to the following requirements: The Farmington visit must take place before the Homestead visit. The Farmington visit will include only one of the executives. The site visit that includes Quinn must take place before any site visit that includes either Rodriguez or Taylor. The site visit that includes Sasada cannot take place after any site visit that includes Vandercar.",
    "question": "If the Farmington visit includes Sasada, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) One of the site visits includes exactly three of the executives.",
      "B) The last of the three site visits includes Rodriguez.",
      "C) The Homestead visit includes Quinn.",
      "D) The Morningside visit includes Taylor.",
      "E) The site visit that includes Vandercar also includes Quinn."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_1_1",
    "context": "On a particular Saturday, a student will perform six activities—grocery shopping, hedge trimming, jogging, kitchen cleaning, laundry, and motorbike servicing. Each activity will be performed once, one at a time. The order in which the activities are performed is subject to the following conditions: Grocery shopping has to be immediately after hedge trimming. Kitchen cleaning has to be earlier than grocery shopping. Motorbike servicing has to be earlier than laundry. Motorbike servicing has to be either immediately before or immediately after jogging.",
    "question": "Which one of the following could be the order, from first to last, of the student's activities?",
    "answer": "D",
    "options": [
      "A) jogging, kitchen cleaning, hedge trimming, grocery shopping, motorbike servicing, laundry",
      "B) jogging, motorbike servicing, laundry, hedge trimming, grocery shopping, kitchen cleaning",
      "C) kitchen cleaning, hedge trimming, grocery shopping, laundry, motorbike servicing, jogging",
      "D) kitchen cleaning, jogging, motorbike servicing, laundry, hedge trimming, grocery shopping",
      "E) motorbike servicing, jogging, laundry, hedge trimming, kitchen cleaning, grocery shopping"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_1_2",
    "context": "On a particular Saturday, a student will perform six activities—grocery shopping, hedge trimming, jogging, kitchen cleaning, laundry, and motorbike servicing. Each activity will be performed once, one at a time. The order in which the activities are performed is subject to the following conditions: Grocery shopping has to be immediately after hedge trimming. Kitchen cleaning has to be earlier than grocery shopping. Motorbike servicing has to be earlier than laundry. Motorbike servicing has to be either immediately before or immediately after jogging.",
    "question": "Which one of the following activities CANNOT be third?",
    "answer": "B",
    "options": [
      "A) grocery shopping",
      "B) hedge trimming",
      "C) jogging",
      "D) kitchen cleaning",
      "E) motorbike servicing"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_1_3",
    "context": "On a particular Saturday, a student will perform six activities—grocery shopping, hedge trimming, jogging, kitchen cleaning, laundry, and motorbike servicing. Each activity will be performed once, one at a time. The order in which the activities are performed is subject to the following conditions: Grocery shopping has to be immediately after hedge trimming. Kitchen cleaning has to be earlier than grocery shopping. Motorbike servicing has to be earlier than laundry. Motorbike servicing has to be either immediately before or immediately after jogging.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "C",
    "options": [
      "A) Hedge trimming is fourth.",
      "B) Jogging is fourth.",
      "C) Kitchen cleaning is second.",
      "D) Laundry is third.",
      "E) Motorbike servicing is second."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_1_4",
    "context": "On a particular Saturday, a student will perform six activities—grocery shopping, hedge trimming, jogging, kitchen cleaning, laundry, and motorbike servicing. Each activity will be performed once, one at a time. The order in which the activities are performed is subject to the following conditions: Grocery shopping has to be immediately after hedge trimming. Kitchen cleaning has to be earlier than grocery shopping. Motorbike servicing has to be earlier than laundry. Motorbike servicing has to be either immediately before or immediately after jogging.",
    "question": "Which one of the following activities CANNOT be fifth?",
    "answer": "D",
    "options": [
      "A) grocery shopping",
      "B) hedge trimming",
      "C) jogging",
      "D) laundry",
      "E) motorbike servicing"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_1_5",
    "context": "On a particular Saturday, a student will perform six activities—grocery shopping, hedge trimming, jogging, kitchen cleaning, laundry, and motorbike servicing. Each activity will be performed once, one at a time. The order in which the activities are performed is subject to the following conditions: Grocery shopping has to be immediately after hedge trimming. Kitchen cleaning has to be earlier than grocery shopping. Motorbike servicing has to be earlier than laundry. Motorbike servicing has to be either immediately before or immediately after jogging.",
    "question": "Which one of the following, if substituted for the condition that motorbike servicing has to be earlier than laundry, would have the same effect in determining the order of the student's activities?",
    "answer": "C",
    "options": [
      "A) Laundry has to be one of the last three activities.",
      "B) Laundry has to be either immediately before or immediately after jogging.",
      "C) Jogging has to be earlier than laundry.",
      "D) Laundry has to be earlier than hedge trimming.",
      "E) Laundry has to be earlier than jogging."
    ],
    "raw_logic_programs": [
      "# Declarations\nactivities = EnumSort([grocery_shopping, hedge_trimming, jogging, kitchen_cleaning, laundry, motorbike_servicing])\nperformed = Function([activities] -> [int])\nForAll([a:activities], And(1 <= performed(a), performed(a) <= 6))\n\n# Constraints\nAnd(performed(grocery_shopping) > performed(hedge_trimming), performed(grocery_shopping) < performed(jogging)) ::: Grocery shopping has to be immediately after hedge trimming\nAnd(performed(kitchen_cleaning) < performed(grocery_shopping), performed(kitchen_cleaning) > performed(laundry)) ::: Kitchen cleaning has to be earlier than grocery shopping\nAnd(performed(motorbike_servicing) < performed(laundry), performed(motorbike_servicing) > performed(jogging)) ::: Motorbike servicing has to be earlier than laundry\nAnd(performed(motorbike_servicing) == performed(jogging) - 1, performed(motorbike_servicing) == performed(jogging) + 1) ::: Motorbike servicing has to be either immediately before or immediately after jogging\n\n# Options\nQuestion ::: Which one of the following, if substituted for the condition that motorbike servicing has to be earlier than laundry, would have the same effect in determining the order of the student's activities?\nis_sat(ForAll([a:activities], And(1 <= performed(a), performed(a) <= 6))) ::: (A)\nis_sat(ForAll([a:activities], And(1 <= performed(a), performed(a) <= 6))) ::: (B)\nis_sat(ForAll([a:activities], And(1 <= performed(a), performed(a) <= 6))) ::: (C)\nis_sat(ForAll([a:activities], And(1 <= performed(a), performed(a) <= 6))) ::: (D)\nis_sat(ForAll([a:activities], And(1 <= performed(a), performed(a) <= 6))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_2_6",
    "context": "Each of exactly three actors—Gombrich, Otto, and Raines—auditions for parts on exactly two of the following days of a particular week: Wednesday, Thursday, Friday, and Saturday. On each of these days at least one of the actors auditions for parts. The order of that week's auditions must meet the following conditions: The first day on which Otto auditions is some day before the first day on which Raines auditions. There is at least one day on which both Gombrich and Raines audition. At least one of the actors auditions on both Thursday and Saturday.",
    "question": "Which one of the following could be an accurate matching of the actors to the days on which they audition?",
    "answer": "B",
    "options": [
      "A) Gombrich: Thursday, Friday Otto: Wednesday, Saturday Raines: Friday, Saturday",
      "B) Gombrich: Thursday, Saturday Otto: Wednesday, Friday Raines: Friday, Saturday",
      "C) Gombrich: Friday, Saturday Otto: Thursday, Saturday Raines: Wednesday, Friday",
      "D) Gombrich: Wednesday, Thursday Otto: Wednesday, Saturday Raines: Thursday, Saturday",
      "E) Gombrich: Wednesday, Friday Otto: Wednesday, Thursday Raines: Thursday, Saturday"
    ],
    "raw_logic_programs": [
      "# Declarations\nactors = EnumSort([Gombrich, Otto, Raines])\ndays = EnumSort([Wednesday, Thursday, Friday, Saturday])\nauditions = Function([actors, days] -> [bool])\n\n# Constraints\nForAll([a:actors], Count([d:days], auditions(a, d)) == 2) ::: Each of exactly three actors auditions for parts on exactly two of the following days\nForAll([d:days], Count([a:actors], auditions(a, d)) >= 1) ::: On each of these days at least one of the actors auditions for parts\nAnd(auditions(Otto, Wednesday), auditions(Raines, Wednesday)) ::: The first day on which Otto auditions is some day before the first day on which Raines auditions\nAnd(auditions(Gombrich, d), auditions(Raines, d)) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(a:actors, Thursday), auditions(a, Saturday)) ::: At least one of the actors auditions on both Thursday and Saturday\n\n# Options\nQuestion ::: Which one of the following could be an accurate matching of the actors to the days on which they audition?\nis_sat(And(auditions(Gombrich, Thursday), auditions(Gombrich, Friday), auditions(Otto, Wednesday), auditions(Otto, Saturday), auditions(Raines, Friday), auditions(Raines, Saturday))) ::: A) Gombrich: Thursday, Friday Otto: Wednesday, Saturday Raines: Friday, Saturday\nis_sat(And(auditions(Gombrich, Thursday), auditions(Gombrich, Saturday), auditions(Otto, Wednesday), auditions(Otto, Friday), auditions(Raines, Friday), auditions(Raines, Saturday))) ::: B) Gombrich: Thursday, Saturday Otto: Wednesday, Friday Raines: Friday, Saturday\nis_sat(And(auditions(Gombrich, Friday), auditions(Gombrich, Saturday), auditions(Otto, Thursday), auditions(Otto, Saturday), auditions(Raines, Wednesday), auditions"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_2_7",
    "context": "Each of exactly three actors—Gombrich, Otto, and Raines—auditions for parts on exactly two of the following days of a particular week: Wednesday, Thursday, Friday, and Saturday. On each of these days at least one of the actors auditions for parts. The order of that week's auditions must meet the following conditions: The first day on which Otto auditions is some day before the first day on which Raines auditions. There is at least one day on which both Gombrich and Raines audition. At least one of the actors auditions on both Thursday and Saturday.",
    "question": "If Otto auditions on both Thursday and Saturday, then Gombrich could audition on both",
    "answer": "B",
    "options": [
      "A) Wednesday and Thursday",
      "B) Wednesday and Friday",
      "C) Thursday and Friday",
      "D) Thursday and Saturday",
      "E) Friday and Saturday"
    ],
    "raw_logic_programs": [
      "# Declarations\nactors = EnumSort([Gombrich, Otto, Raines])\ndays = EnumSort([Wednesday, Thursday, Friday, Saturday])\nauditions = Function([actors, days] -> [bool])\n\n# Constraints\nForAll([a:actors], Count([d:days], auditions(a, d)) == 2) ::: Each of exactly three actors auditions for parts on exactly two of the following days\nForAll([d:days], Count([a:actors], auditions(a, d)) >= 1) ::: On each of these days at least one of the actors auditions for parts\nAnd(auditions(Otto, d1), auditions(Raines, d2), d1 < d2) ::: The first day on which Otto auditions is some day before the first day on which Raines auditions\nAnd(auditions(Gombrich, d1), auditions(Raines, d2), d1 == d2) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(a:actors, Thursday), auditions(a, Saturday)) ::: At least one of the actors auditions on both Thursday and Saturday\n\n# Options\nQuestion ::: If Otto auditions on both Thursday and Saturday, then Gombrich could audition on both\nis_sat(And(auditions(Otto, Thursday), auditions(Otto, Saturday), auditions(Gombrich, Wednesday), auditions(Gombrich, Thursday))) ::: (A)\nis_sat(And(auditions(Otto, Thursday), auditions(Otto, Saturday), auditions(Gombrich, Wednesday), auditions(Gombrich, Friday))) ::: (B)\nis_sat(And(auditions(Otto, Thursday), auditions(Otto, Saturday), auditions(Gombrich, Thursday), auditions(Gombrich, Friday))) ::: (C)\nis_sat(And(auditions(Otto, Thursday), auditions(Otto, Saturday), auditions(Gombrich, Thursday), auditions(Gombrich, Saturday))) ::: (D)\nis_sat(And(auditions(Otto,"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_2_8",
    "context": "Each of exactly three actors—Gombrich, Otto, and Raines—auditions for parts on exactly two of the following days of a particular week: Wednesday, Thursday, Friday, and Saturday. On each of these days at least one of the actors auditions for parts. The order of that week's auditions must meet the following conditions: The first day on which Otto auditions is some day before the first day on which Raines auditions. There is at least one day on which both Gombrich and Raines audition. At least one of the actors auditions on both Thursday and Saturday.",
    "question": "Which one of the following CANNOT be true of the week's auditions?",
    "answer": "E",
    "options": [
      "A) Gombrich's last audition is on Thursday.",
      "B) Gombrich's last audition is on Friday.",
      "C) Otto's last audition is on Saturday.",
      "D) Raines's last audition is on Friday.",
      "E) Raines's last audition is on Thursday."
    ],
    "raw_logic_programs": [
      "# Declarations\nactors = EnumSort([Gombrich, Otto, Raines])\ndays = EnumSort([Wednesday, Thursday, Friday, Saturday])\nauditions = Function([actors, days] -> [bool])\n\n# Constraints\nForAll([a:actors], Count([d:days], auditions(a, d)) == 2) ::: Each of exactly three actors auditions for parts on exactly two of the following days\nForAll([d:days], Count([a:actors], auditions(a, d)) >= 1) ::: On each of these days at least one of the actors auditions for parts\nAnd(auditions(Otto, d1), auditions(Raines, d2), d1 < d2) ::: The first day on which Otto auditions is some day before the first day on which Raines auditions\nExists([d:days], And(auditions(Gombrich, d), auditions(Raines, d))) ::: There is at least one day on which both Gombrich and Raines audition\nExists([d:days], And(auditions(a:actors, d), auditions(a, d2), d < d2)) ::: At least one of the actors auditions on both Thursday and Saturday\n\n# Options\nQuestion ::: Which one of the following CANNOT be true of the week's auditions?\nis_exception(is_sat(auditions(Gombrich, Thursday) && Not(auditions(Gombrich, d:days)))) ::: A) Gombrich's last audition is on Thursday.\nis_exception(is_sat(auditions(Gombrich, Friday) && Not(auditions(Gombrich, d:days)))) ::: B) Gombrich's last audition is on Friday.\nis_exception(is_sat(auditions(Otto, Saturday) && Not(auditions(Otto, d:days)))) ::: C) Otto's last audition is on Saturday.\nis_exception(is_sat(auditions(Raines, Friday) && Not(auditions(Raines, d:days)))) ::: D) Raines's last audition is on Friday.\nis_exception(is_sat(auditions(Raines, Thursday) && Not(auditions"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_2_9",
    "context": "Each of exactly three actors—Gombrich, Otto, and Raines—auditions for parts on exactly two of the following days of a particular week: Wednesday, Thursday, Friday, and Saturday. On each of these days at least one of the actors auditions for parts. The order of that week's auditions must meet the following conditions: The first day on which Otto auditions is some day before the first day on which Raines auditions. There is at least one day on which both Gombrich and Raines audition. At least one of the actors auditions on both Thursday and Saturday.",
    "question": "Which one of the following pairs of days CANNOT be the two days on which Otto auditions?",
    "answer": "D",
    "options": [
      "A) Wednesday and Thursday",
      "B) Wednesday and Friday",
      "C) Wednesday and Saturday",
      "D) Thursday and Friday",
      "E) Thursday and Saturday"
    ],
    "raw_logic_programs": [
      "# Declarations\nactors = EnumSort([Gombrich, Otto, Raines])\ndays = EnumSort([Wednesday, Thursday, Friday, Saturday])\nauditions = Function([actors, days] -> [bool])\n\n# Constraints\nForAll([a:actors], Count([d:days], auditions(a, d)) == 2) ::: Each of exactly three actors auditions for parts on exactly two of the following days\nForAll([d:days], Count([a:actors], auditions(a, d)) >= 1) ::: On each of these days at least one of the actors auditions for parts\nAnd(auditions(Otto, Wednesday), auditions(Raines, Wednesday)) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(Otto, Thursday), auditions(Raines, Thursday)) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(Otto, Saturday), auditions(Raines, Saturday)) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(Otto, Thursday), auditions(Raines, Saturday)) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(Otto, Saturday), auditions(Raines, Thursday)) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(Otto, Wednesday), auditions(Raines, Thursday)) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(Otto, Thursday), auditions(Raines, Wednesday)) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(Otto, Wednesday), auditions(Raines, Saturday)) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(Otto, Saturday), auditions(Raines, Wednesday)) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(Otto, Friday), auditions(Raines, Saturday)) :::"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_2_10",
    "context": "Each of exactly three actors—Gombrich, Otto, and Raines—auditions for parts on exactly two of the following days of a particular week: Wednesday, Thursday, Friday, and Saturday. On each of these days at least one of the actors auditions for parts. The order of that week's auditions must meet the following conditions: The first day on which Otto auditions is some day before the first day on which Raines auditions. There is at least one day on which both Gombrich and Raines audition. At least one of the actors auditions on both Thursday and Saturday.",
    "question": "Which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) All three actors audition on Wednesday.",
      "B) All three actors audition on Friday.",
      "C) All three actors audition on Saturday.",
      "D) Otto auditions on Friday and on Saturday.",
      "E) Raines auditions on Wednesday and on Friday."
    ],
    "raw_logic_programs": [
      "# Declarations\nactors = EnumSort([Gombrich, Otto, Raines])\ndays = EnumSort([Wednesday, Thursday, Friday, Saturday])\nauditions = Function([actors, days] -> [bool])\n\n# Constraints\nForAll([a:actors], Count([d:days], auditions(a, d)) == 2) ::: Each of exactly three actors auditions for parts on exactly two of the following days\nForAll([d:days], Count([a:actors], auditions(a, d)) >= 1) ::: On each of these days at least one of the actors auditions for parts\nAnd(auditions(Otto, Wednesday), auditions(Raines, Wednesday)) ::: The first day on which Otto auditions is some day before the first day on which Raines auditions\nAnd(auditions(Gombrich, d), auditions(Raines, d)) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(a:actors, Thursday), auditions(a, Saturday)) ::: At least one of the actors auditions on both Thursday and Saturday\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(ForAll([a:actors], auditions(a, Wednesday))) ::: (A)\nis_sat(ForAll([a:actors], auditions(a, Friday))) ::: (B)\nis_sat(ForAll([a:actors], auditions(a, Saturday))) ::: (C)\nis_sat(And(auditions(Otto, Friday), auditions(Otto, Saturday))) ::: (D)\nis_sat(And(auditions(Raines, Wednesday), auditions(Raines, Friday))) ::: (E)\n------\nProblem:\nA certain company has exactly five employees—Garcia, Hastings, Ito, Jones, and Kline—who are assigned to work on exactly three projects—Project 1, Project 2, and Project 3. Each employee is assigned to work on exactly one of the projects. The following conditions apply: Garcia is assigned to work on Project 1. Hastings is assigned to work on Project 2. Ito is assigned to work on Project 3. Jones is assigned to work on Project"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_2_11",
    "context": "Each of exactly three actors—Gombrich, Otto, and Raines—auditions for parts on exactly two of the following days of a particular week: Wednesday, Thursday, Friday, and Saturday. On each of these days at least one of the actors auditions for parts. The order of that week's auditions must meet the following conditions: The first day on which Otto auditions is some day before the first day on which Raines auditions. There is at least one day on which both Gombrich and Raines audition. At least one of the actors auditions on both Thursday and Saturday.",
    "question": "If Gombrich auditions on both Wednesday and Saturday, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Otto auditions on both Wednesday and Thursday.",
      "B) Otto auditions on both Wednesday and Friday.",
      "C) Otto auditions on both Wednesday and Saturday.",
      "D) Raines auditions on both Wednesday and Saturday.",
      "E) Raines auditions on both Thursday and Friday."
    ],
    "raw_logic_programs": [
      "# Declarations\nactors = EnumSort([Gombrich, Otto, Raines])\ndays = EnumSort([Wednesday, Thursday, Friday, Saturday])\nauditions = Function([actors, days] -> [bool])\n\n# Constraints\nForAll([a:actors], Count([d:days], auditions(a, d)) == 2) ::: Each of exactly three actors auditions for parts on exactly two of the following days\nForAll([d:days], Count([a:actors], auditions(a, d)) >= 1) ::: On each of these days at least one of the actors auditions for parts\nAnd(auditions(Otto, Wednesday), auditions(Raines, Wednesday)) ::: The first day on which Otto auditions is some day before the first day on which Raines auditions\nAnd(auditions(Gombrich, d1), auditions(Raines, d1)) ::: There is at least one day on which both Gombrich and Raines audition\nAnd(auditions(a:actors, Thursday), auditions(a, Saturday)) ::: At least one of the actors auditions on both Thursday and Saturday\nauditions(Gombrich, Wednesday) ::: Gombrich auditions on both Wednesday and Saturday\n\n# Options\nQuestion ::: If Gombrich auditions on both Wednesday and Saturday, then which one of the following could be true?\nis_sat(And(auditions(Otto, Wednesday), auditions(Otto, Thursday))) ::: (A)\nis_sat(And(auditions(Otto, Wednesday), auditions(Otto, Friday))) ::: (B)\nis_sat(And(auditions(Otto, Wednesday), auditions(Otto, Saturday))) ::: (C)\nis_sat(And(auditions(Raines, Wednesday), auditions(Raines, Saturday))) ::: (D)\nis_sat(And(auditions(Raines, Thursday), auditions(Raines, Friday))) ::: (E)\n------\nProblem:\nA certain company has exactly five employees: Gina, Hank, Iris, Jill, and Kyle. Each employee is assigned to work in exactly one of the following departments: accounting, human resources"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_3_12",
    "context": "Each of seven toy dinosaurs—an iguanadon, a lambeosaur, a plateosaur, a stegosaur, a tyrannosaur, an ultrasaur, and a velociraptor—is completely colored either green, mauve, red, or yellow. A display is to consist entirely of exactly five of these toys. The display must meet the following specifications: Exactly two mauve toys are included. The stegosaur is red and is included. The iguanadon is included only if it is green. The plateosaur is included only if it is yellow. The velociraptor is included only if the ultrasaur is not. If both the lambeosaur and the ultrasaur are included, at least one of them is not mauve.",
    "question": "Which one of the following could be the toys included in the display?",
    "answer": "B",
    "options": [
      "A) the lambeosaur, the plateosaur, the stegosaur, the ultrasaur, the velociraptor",
      "B) the lambeosaur, the plateosaur, the stegosaur, the tyrannosaur, the ultrasaur",
      "C) the iguanadon, the lambeosaur, the plateosaur, the stegosaur, the ultrasaur",
      "D) the iguanadon, the lambeosaur, the plateosaur, the tyrannosaur, the velociraptor",
      "E) the iguanadon, the lambeosaur, the stegosaur, the ultrasaur, the velociraptor"
    ],
    "raw_logic_programs": [
      "# Declarations\ndinosaurs = EnumSort([iguanadon, lambeosaur, plateosaur, stegosaur, tyrannosaur, ultrasaur, velociraptor])\ncolors = EnumSort([green, mauve, red, yellow])\ncolored = Function([dinosaurs, colors] -> [bool])\n\n# Constraints\nForAll([d:dinosaurs], Count([c:colors], colored(d, c)) == 1) ::: Each of seven toy dinosaurs is completely colored either green, mauve, red, or yellow\nAnd(colored(iguanadon, green), colored(lambeosaur, mauve), colored(plateosaur, yellow), colored(stegosaur, red), colored(tyrannosaur, mauve), colored(ultrasaur, mauve), colored(velociraptor, mauve)) ::: Exactly two mauve toys are included\ncolored(stegosaur, red) ::: The stegosaur is red and is included\ncolored(iguanadon, green) ::: The iguanadon is included only if it is green\ncolored(plateosaur, yellow) ::: The plateosaur is included only if it is yellow\ncolored(velociraptor, mauve) ::: The velociraptor is included only if the ultrasaur is not\nAnd(colored(lambeosaur, mauve), colored(ultrasaur, mauve)) ::: If both the lambeosaur and the ultrasaur are included, at least one of them is not mauve\n\n# Options\nQuestion ::: Which one of the following could be the toys included in the display?\nis_sat(And(colored(lambeosaur, mauve), colored(plateosaur, yellow), colored(stegosaur, red), colored(ultrasaur, mauve), colored(velociraptor, mauve))) ::: A) the lambeosaur, the plateosaur, the stegosaur, the ultrasaur, the velociraptor\nis_sat(And(colored(lambeosaur, mauve), colored(plateosaur, yellow), colored(stegosaur, red), colored(tyrannosaur, mauve),"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_3_13",
    "context": "Each of seven toy dinosaurs—an iguanadon, a lambeosaur, a plateosaur, a stegosaur, a tyrannosaur, an ultrasaur, and a velociraptor—is completely colored either green, mauve, red, or yellow. A display is to consist entirely of exactly five of these toys. The display must meet the following specifications: Exactly two mauve toys are included. The stegosaur is red and is included. The iguanadon is included only if it is green. The plateosaur is included only if it is yellow. The velociraptor is included only if the ultrasaur is not. If both the lambeosaur and the ultrasaur are included, at least one of them is not mauve.",
    "question": "If the tyrannosaur is not included in the display, then the display must contain each of the following EXCEPT:",
    "answer": "D",
    "options": [
      "A) a green iguanadon",
      "B) a mauve velociraptor",
      "C) a mauve lambeosaur",
      "D) a mauve ultrasaur",
      "E) a yellow plateosaur"
    ],
    "raw_logic_programs": [
      "# Declarations\ndinosaurs = EnumSort([iguanadon, lambeosaur, plateosaur, stegosaur, tyrannosaur, ultrasaur, velociraptor])\ncolors = EnumSort([green, mauve, red, yellow])\ncolored = Function([dinosaurs, colors] -> [bool])\n\n# Constraints\nForAll([d:dinosaurs], Count([c:colors], colored(d, c)) == 1) ::: Each of seven toy dinosaurs is completely colored either green, mauve, red, or yellow\nAnd(colored(stegosaur, red), Count([d:dinosaurs], colored(d, mauve)) == 2)) ::: The stegosaur is red and is included. Exactly two mauve toys are included.\ncolored(iguanadon, green) ==> colored(iguanadon, d) ::: The iguanadon is included only if it is green\ncolored(plateosaur, yellow) ==> colored(plateosaur, d) ::: The plateosaur is included only if it is yellow\ncolored(velociraptor, d) ==> Not(colored(ultrasaur, d)) ::: The velociraptor is included only if the ultrasaur is not\nAnd(colored(lambeosaur, d), colored(ultrasaur, d)) ==> Not(colored(lambeosaur, mauve), colored(ultrasaur, mauve)) ::: If both the lambeosaur and the ultrasaur are included, at least one of them is not mauve\n\n# Options\nQuestion ::: If the tyrannosaur is not included in the display, then the display must contain each of the following EXCEPT:\nis_exception(is_sat(colored(iguanadon, green))) ::: (A)\nis_exception(is_sat(colored(velociraptor, mauve))) ::: (B)\nis_exception(is_sat(colored(lambeosaur, mauve))) ::: (C)\nis_exception(is_sat(colored(ultrasaur, mauve))) ::: (D)\nis_exception(is_sat(colored(plateosaur, yellow))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_3_14",
    "context": "Each of seven toy dinosaurs—an iguanadon, a lambeosaur, a plateosaur, a stegosaur, a tyrannosaur, an ultrasaur, and a velociraptor—is completely colored either green, mauve, red, or yellow. A display is to consist entirely of exactly five of these toys. The display must meet the following specifications: Exactly two mauve toys are included. The stegosaur is red and is included. The iguanadon is included only if it is green. The plateosaur is included only if it is yellow. The velociraptor is included only if the ultrasaur is not. If both the lambeosaur and the ultrasaur are included, at least one of them is not mauve.",
    "question": "Which one of the following is a pair of toys that could be included in the display together?",
    "answer": "A",
    "options": [
      "A) a green lambeosaur and a mauve velociraptor",
      "B) a green lambeosaur and a yellow tyrannosaur",
      "C) a green lambeosaur and a yellow ultrasaur",
      "D) a yellow tyrannosaur and a green ultrasaur",
      "E) a yellow tyrannosaur and a red velociraptor"
    ],
    "raw_logic_programs": [
      "# Declarations\ndinosaurs = EnumSort([iguanadon, lambeosaur, plateosaur, stegosaur, tyrannosaur, ultrasaur, velociraptor])\ncolors = EnumSort([green, mauve, red, yellow])\ncolored = Function([dinosaurs, colors] -> [bool])\n\n# Constraints\nForAll([d:dinosaurs], Count([c:colors], colored(d, c)) == 1) ::: Each of seven toy dinosaurs is completely colored either green, mauve, red, or yellow\nAnd(Count([d:dinosaurs], colored(d, mauve)) == 2, Count([d:dinosaurs], colored(d, red)) == 1, Count([d:dinosaurs], colored(d, green)) == 1, Count([d:dinosaurs], colored(d, yellow)) == 1) ::: Exactly two mauve toys are included. The stegosaur is red and is included. The iguanadon is included only if it is green. The plateosaur is included only if it is yellow.\ncolored(stegosaur, red) ::: The stegosaur is red and is included\ncolored(iguanadon, green) == colored(iguanadon, green) ::: The iguanadon is included only if it is green\ncolored(plateosaur, yellow) == colored(plateosaur, yellow) ::: The plateosaur is included only if it is yellow\ncolored(velociraptor, velociraptor) == colored(ultrasaur, ultrasaur) ::: The velociraptor is included only if the ultrasaur is not\nAnd(colored(lambeosaur, lambeosaur), colored(ultrasaur, ultrasaur)) == colored(lambeosaur, lambeosaur) ::: If both the lambeosaur and the ultrasaur are included, at least one of them is not mauve\n\n# Options\nQuestion ::: Which one of the following is a pair of toys that could be included in the display together?\nis_sat(And(colored(lambeosaur, green), colored(velociraptor, mauve))) ::: (A)\nis_sat(And(colored(lambe"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_3_15",
    "context": "Each of seven toy dinosaurs—an iguanadon, a lambeosaur, a plateosaur, a stegosaur, a tyrannosaur, an ultrasaur, and a velociraptor—is completely colored either green, mauve, red, or yellow. A display is to consist entirely of exactly five of these toys. The display must meet the following specifications: Exactly two mauve toys are included. The stegosaur is red and is included. The iguanadon is included only if it is green. The plateosaur is included only if it is yellow. The velociraptor is included only if the ultrasaur is not. If both the lambeosaur and the ultrasaur are included, at least one of them is not mauve.",
    "question": "If the display includes a yellow tyrannosaur, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The iguanadon is included in the display.",
      "B) The plateosaur is not included in the display.",
      "C) The display includes two yellow toy dinosaurs.",
      "D) The display contains a green lambeosaur.",
      "E) The display contains a mauve velociraptor."
    ],
    "raw_logic_programs": [
      "# Declarations\ndinosaurs = EnumSort([iguanadon, lambeosaur, plateosaur, stegosaur, tyrannosaur, ultrasaur, velociraptor])\ncolors = EnumSort([green, mauve, red, yellow])\ncolored = Function([dinosaurs, colors] -> [bool])\n\n# Constraints\nForAll([d:dinosaurs], Count([c:colors], colored(d, c)) == 1) ::: Each of seven toy dinosaurs is completely colored either green, mauve, red, or yellow\nCount([d:dinosaurs], colored(d, mauve)) == 2 ::: Exactly two mauve toys are included\ncolored(stegosaur, red) ::: The stegosaur is red and is included\ncolored(iguanadon, green) ::: The iguanadon is included only if it is green\ncolored(plateosaur, yellow) ::: The plateosaur is included only if it is yellow\ncolored(velociraptor, ultrasaur) ::: The velociraptor is included only if the ultrasaur is not\ncolored(lambeosaur, ultrasaur) ::: If both the lambeosaur and the ultrasaur are included, at least one of them is not mauve\n\n# Options\nQuestion ::: If the display includes a yellow tyrannosaur, then which one of the following must be true?\nis_valid(Exists([d:dinosaurs], colored(d, green) && d == iguanadon)) ::: (A)\nis_valid(Exists([d:dinosaurs], colored(d, yellow) && d == plateosaur)) ::: (B)\nis_valid(Exists([d:dinosaurs], colored(d, yellow) && d == tyrannosaur)) ::: (C)\nis_valid(Exists([d:dinosaurs], colored(d, green) && d == lambeosaur)) ::: (D)\nis_valid(Exists([d:dinosaurs], colored(d, mauve) && d == velociraptor)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_3_16",
    "context": "Each of seven toy dinosaurs—an iguanadon, a lambeosaur, a plateosaur, a stegosaur, a tyrannosaur, an ultrasaur, and a velociraptor—is completely colored either green, mauve, red, or yellow. A display is to consist entirely of exactly five of these toys. The display must meet the following specifications: Exactly two mauve toys are included. The stegosaur is red and is included. The iguanadon is included only if it is green. The plateosaur is included only if it is yellow. The velociraptor is included only if the ultrasaur is not. If both the lambeosaur and the ultrasaur are included, at least one of them is not mauve.",
    "question": "If both the iguanadon and the ultrasaur are included in the display, then the display must contain which one of the following?",
    "answer": "A",
    "options": [
      "A) a mauve tyrannosaur",
      "B) a mauve ultrasaur",
      "C) a yellow lambeosaur",
      "D) a yellow plateosaur",
      "E) a yellow ultrasaur"
    ],
    "raw_logic_programs": [
      "# Declarations\ndinosaurs = EnumSort([iguanadon, lambeosaur, plateosaur, stegosaur, tyrannosaur, ultrasaur, velociraptor])\ncolors = EnumSort([green, mauve, red, yellow])\ncolored = Function([dinosaurs, colors] -> [bool])\n\n# Constraints\nForAll([d:dinosaurs], Count([c:colors], colored(d, c)) == 1) ::: Each of seven toy dinosaurs is completely colored either green, mauve, red, or yellow\nCount([d:dinosaurs], colored(d, mauve)) == 2 ::: Exactly two mauve toys are included\ncolored(stegosaur, red) ::: The stegosaur is red and is included\ncolored(iguanadon, green) ::: The iguanadon is included only if it is green\ncolored(plateosaur, yellow) ::: The plateosaur is included only if it is yellow\ncolored(velociraptor, ultrasaur) ::: The velociraptor is included only if the ultrasaur is not\ncolored(lambeosaur, ultrasaur) ::: If both the lambeosaur and the ultrasaur are included, at least one of them is not mauve\n\n# Options\nQuestion ::: If both the iguanadon and the ultrasaur are included in the display, then the display must contain which one of the following?\nis_sat(colored(tyrannosaur, mauve)) ::: (A)\nis_sat(colored(ultrasaur, mauve)) ::: (B)\nis_sat(colored(lambeosaur, yellow)) ::: (C)\nis_sat(colored(plateosaur, yellow)) ::: (D)\nis_sat(colored(ultrasaur, yellow)) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_3_17",
    "context": "Each of seven toy dinosaurs—an iguanadon, a lambeosaur, a plateosaur, a stegosaur, a tyrannosaur, an ultrasaur, and a velociraptor—is completely colored either green, mauve, red, or yellow. A display is to consist entirely of exactly five of these toys. The display must meet the following specifications: Exactly two mauve toys are included. The stegosaur is red and is included. The iguanadon is included only if it is green. The plateosaur is included only if it is yellow. The velociraptor is included only if the ultrasaur is not. If both the lambeosaur and the ultrasaur are included, at least one of them is not mauve.",
    "question": "If the display includes two green toys, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) There is exactly one yellow toy included in the display.",
      "B) The tyrannosaur is included in the display and it is green.",
      "C) Neither the lambeosaur nor the velociraptor is included in the display.",
      "D) Neither the tyrannosaur nor the velociraptor is included in the display.",
      "E) Neither the ultrasaur nor the velociraptor is included in the display."
    ],
    "raw_logic_programs": [
      "# Declarations\ndinosaurs = EnumSort([iguanadon, lambeosaur, plateosaur, stegosaur, tyrannosaur, ultrasaur, velociraptor])\ncolors = EnumSort([green, mauve, red, yellow])\ncolored = Function([dinosaurs, colors] -> [bool])\n\n# Constraints\nForAll([d:dinosaurs], Count([c:colors], colored(d, c)) == 1) ::: Each of seven toy dinosaurs is completely colored either green, mauve, red, or yellow\nAnd(Count([d:dinosaurs], colored(d, mauve)) == 2, Count([d:dinosaurs], colored(d, red)) == 1, Count([d:dinosaurs], colored(d, green)) == 1, Count([d:dinosaurs], colored(d, yellow)) == 1) ::: Exactly two mauve toys are included. The stegosaur is red and is included. The iguanadon is included only if it is green. The plateosaur is included only if it is yellow.\nForAll([d:dinosaurs], Implies(colored(d, green), colored(d, iguanadon))) ::: The iguanadon is included only if it is green\nForAll([d:dinosaurs], Implies(colored(d, yellow), colored(d, plateosaur))) ::: The plateosaur is included only if it is yellow\nForAll([d:dinosaurs], Implies(colored(d, ultrasaur), Not(colored(d, velociraptor)))) ::: The velociraptor is included only if the ultrasaur is not\nForAll([d:dinosaurs], Implies(colored(d, lambeosaur), colored(d, ultrasaur))) ::: If both the lambeosaur and the ultrasaur are included, at least one of them is not mauve\n\n# Options\nQuestion ::: If the display includes two green toys, then which one of the following could be true?\nis_valid(Exists([d:dinosaurs], colored(d, yellow))) :::"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_4_18",
    "context": "A charitable foundation awards grants in exactly four areas—medical services, theater arts, wildlife preservation, and youth services—each grant being in one of these areas. One or more grants are awarded in each of the four quarters of a calendar year. Additionally, over the course of a calendar year, the following must obtain: Grants are awarded in all four areas. No more than six grants are awarded. No grants in the same area are awarded in the same quarter or in consecutive quarters. Exactly two medical services grants are awarded. A wildlife preservation grant is awarded in the second quarter.",
    "question": "Which one of the following is a possible allocation of grants in a particular calendar year?",
    "answer": "C",
    "options": [
      "A) first quarter: theater arts second quarter: wildlife preservation third quarter: medical services, youth services fourth quarter: theater arts",
      "B) first quarter: wildlife preservation second quarter: medical services third quarter: theater arts fourth quarter: medical services, youth services",
      "C) first quarter: youth services second quarter: wildlife preservation, medical services third quarter: theater arts fourth quarter: medical services, youth services",
      "D) first quarter: medical services, theater arts second quarter: theater arts, wildlife preservation third quarter: youth services fourth quarter: medical services",
      "E) first quarter: medical services, theater arts second quarter: wildlife preservation, youth services third quarter: theater arts fourth quarter: medical services, youth services"
    ],
    "raw_logic_programs": [
      "# Declarations\nareas = EnumSort([medical_services, theater_arts, wildlife_preservation, youth_services])\nquarters = EnumSort([first, second, third, fourth])\ngrants = Function([quarters, areas] -> [bool])\n\n# Constraints\nForAll([a:areas], Count([q:quarters], grants(q, a)) >= 1) ::: Grants are awarded in all four areas\nCount([q:quarters], grants(q, a)) <= 6 ::: No more than six grants are awarded\nForAll([a:areas], And(q1!= q2, q1!= q3, q2!= q3, q1!= q4, q2!= q4, q3!= q4), Implies(And(grants(q1, a), grants(q2, a)), Not(grants(q3, a), grants(q4, a)))) ::: No grants in the same area are awarded in the same quarter or in consecutive quarters\nCount([q:quarters], grants(q, medical_services)) == 2 ::: Exactly two medical services grants are awarded\ngrants(second, wildlife_preservation) ::: A wildlife preservation grant is awarded in the second quarter\n\n# Options\nQuestion ::: Which one of the following is a possible allocation of grants in a particular calendar year?\nis_sat(And(grants(first, theater_arts), grants(first, youth_services), grants(second, wildlife_preservation), grants(third, medical_services), grants(third, youth_services), grants(fourth, theater_arts))) ::: A) first quarter: theater arts second quarter: wildlife preservation third quarter: medical services, youth services fourth quarter: theater arts\nis_sat(And(grants(first, wildlife_preservation), grants(second, medical_services), grants(second, youth_services), grants(third, theater_arts), grants(fourth, medical_services), grants(fourth, youth_services))) ::: B) first quarter: wildlife preservation second quarter: medical services third quarter: theater arts fourth quarter: medical services, youth"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_4_19",
    "context": "A charitable foundation awards grants in exactly four areas—medical services, theater arts, wildlife preservation, and youth services—each grant being in one of these areas. One or more grants are awarded in each of the four quarters of a calendar year. Additionally, over the course of a calendar year, the following must obtain: Grants are awarded in all four areas. No more than six grants are awarded. No grants in the same area are awarded in the same quarter or in consecutive quarters. Exactly two medical services grants are awarded. A wildlife preservation grant is awarded in the second quarter.",
    "question": "Which one of the following CANNOT be true in a particular calendar year?",
    "answer": "D",
    "options": [
      "A) In each of the two quarters in which a medical services grant is awarded, no other grant is awarded.",
      "B) Exactly two theater arts grants are awarded, one in the second quarter and one in the fourth quarter.",
      "C) Exactly two youth services grants are awarded, one in the first quarter and one in the third quarter.",
      "D) Two wildlife preservation grants and two youth services grants are awarded.",
      "E) Three grants are awarded in the fourth quarter."
    ],
    "raw_logic_programs": [
      "# Declarations\nareas = EnumSort([medical_services, theater_arts, wildlife_preservation, youth_services])\nquarters = EnumSort([first, second, third, fourth])\ngrants = Function([areas, quarters] -> [int])\n\n# Constraints\nForAll([a:areas], Count([q:quarters], grants(a, q)) >= 1) ::: Grants are awarded in all four areas\nCount([a:areas, q:quarters], grants(a, q)) <= 6 ::: No more than six grants are awarded\nForAll([a:areas], And(q1:quarters, q2:quarters, q1!= q2, q1 < q2, grants(a, q1) > 0, grants(a, q2) > 0) => False) ::: No grants in the same area are awarded in the same quarter or in consecutive quarters\nCount([q:quarters], grants(medical_services, q)) == 2 ::: Exactly two medical services grants are awarded\ngrants(wildlife_preservation, second) > 0 ::: A wildlife preservation grant is awarded in the second quarter\n\n# Options\nQuestion ::: Which one of the following CANNOT be true in a particular calendar year?\nis_exception(is_sat(ForAll([q:quarters], grants(medical_services, q) == 1) && grants(medical_services, q) > 0)) ::: A)\nis_exception(is_sat(ForAll([q:quarters], grants(theater_arts, q) == 1) && grants(theater_arts, q) > 0))) ::: B)\nis_exception(is_sat(ForAll([q:quarters], grants(youth_services, q) == 1) && grants(youth_services, q) > 0))) ::: C)\nis_exception(is_sat(Count([q:quarters], grants(wildlife_preservation, q)) == 2) && Count([q:quarters], grants(youth_services, q)) == 2)) ::: D)\nis_"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_4_20",
    "context": "A charitable foundation awards grants in exactly four areas—medical services, theater arts, wildlife preservation, and youth services—each grant being in one of these areas. One or more grants are awarded in each of the four quarters of a calendar year. Additionally, over the course of a calendar year, the following must obtain: Grants are awarded in all four areas. No more than six grants are awarded. No grants in the same area are awarded in the same quarter or in consecutive quarters. Exactly two medical services grants are awarded. A wildlife preservation grant is awarded in the second quarter.",
    "question": "If a wildlife preservation grant and a youth services grant are awarded in the same quarter of a particular calendar year, then any of the following could be true that year EXCEPT:",
    "answer": "E",
    "options": [
      "A) A medical services grant is awarded in the second quarter.",
      "B) A theater arts grant is awarded in the first quarter.",
      "C) A theater arts grant is awarded in the second quarter.",
      "D) A wildlife preservation grant is awarded in the fourth quarter.",
      "E) A youth services grant is awarded in the third quarter."
    ],
    "raw_logic_programs": [
      "# Declarations\nareas = EnumSort([medical_services, theater_arts, wildlife_preservation, youth_services])\nquarters = EnumSort([first, second, third, fourth])\ngrants = Function([areas, quarters] -> [int])\n\n# Constraints\nForAll([a:areas], Count([q:quarters], grants(a, q)) >= 1) ::: Grants are awarded in all four areas\nCount([a:areas, q:quarters], grants(a, q)) <= 6 ::: No more than six grants are awarded\nForAll([a:areas], And(q1:quarters, q2:quarters, q1!= q2, q1 < q2, grants(a, q1) > 0, grants(a, q2) > 0) => grants(a, q1)!= grants(a, q2)) ::: No grants in the same area are awarded in the same quarter or in consecutive quarters\nCount([q:quarters], grants(medical_services, q)) == 2 ::: Exactly two medical services grants are awarded\ngrants(wildlife_preservation, second) > 0 ::: A wildlife preservation grant is awarded in the second quarter\n\n# Options\nQuestion ::: If a wildlife preservation grant and a youth services grant are awarded in the same quarter of a particular calendar year, then any of the following could be true that year EXCEPT:\nis_exception(is_sat(grants(medical_services, second) > 0)) ::: A) A medical services grant is awarded in the second quarter.\nis_exception(is_sat(grants(theater_arts, first) > 0)) ::: B) A theater arts grant is awarded in the first quarter.\nis_exception(is_sat(grants(theater_arts, second) > 0)) ::: C) A theater arts grant is awarded in the second quarter.\nis_exception(is_sat(grants(wildlife_preservation, fourth) > 0)) ::: D) A wildlife preservation grant is awarded in the fourth quarter.\nis_exception(is_sat(gr"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_4_21",
    "context": "A charitable foundation awards grants in exactly four areas—medical services, theater arts, wildlife preservation, and youth services—each grant being in one of these areas. One or more grants are awarded in each of the four quarters of a calendar year. Additionally, over the course of a calendar year, the following must obtain: Grants are awarded in all four areas. No more than six grants are awarded. No grants in the same area are awarded in the same quarter or in consecutive quarters. Exactly two medical services grants are awarded. A wildlife preservation grant is awarded in the second quarter.",
    "question": "If exactly two grants are awarded in just one of the four quarters of a particular calendar year, then which one of the following could be true that year?",
    "answer": "B",
    "options": [
      "A) Two youth services grants are awarded.",
      "B) Neither a medical services grant nor a youth services grant is awarded in the first quarter.",
      "C) A wildlife preservation grant is awarded in the fourth quarter.",
      "D) Both a youth services grant and a theater arts grant are awarded in the first quarter.",
      "E) A youth services grant is awarded in the first quarter and a theater arts grant is awarded in the second quarter."
    ],
    "raw_logic_programs": [
      "# Declarations\nareas = EnumSort([medical_services, theater_arts, wildlife_preservation, youth_services])\nquarters = EnumSort([first, second, third, fourth])\ngrants = Function([areas, quarters] -> [int])\n\n# Constraints\nForAll([a:areas], Count([q:quarters], grants(a, q)) >= 1) ::: Grants are awarded in all four areas\nCount([a:areas], grants(a, q)) <= 6 ::: No more than six grants are awarded\nForAll([a:areas], And(q1!= q2, q1!= q3, q1!= q4, q2!= q3, q2!= q4, q3!= q4], Implies(grants(a, q1) > 0, Not(grants(a, q2) > 0))) ::: No grants in the same area are awarded in the same quarter or in consecutive quarters\nCount([q:quarters], grants(medical_services, q)) == 2 ::: Exactly two medical services grants are awarded\ngrants(wildlife_preservation, second) > 0 ::: A wildlife preservation grant is awarded in the second quarter\n\n# Options\nQuestion ::: If exactly two grants are awarded in just one of the four quarters of a particular calendar year, then which one of the following could be true that year?\nis_valid(Exists([a:areas], And(a == youth_services, Count([q:quarters], grants(a, q)) == 2))) ::: A) Two youth services grants are awarded.\nis_valid(Exists([a:areas], And(a == medical_services, Count([q:quarters], grants(a, q)) == 0))) ::: B) Neither a medical services grant nor a youth services grant is awarded in the first quarter.\nis_valid(Exists([a:areas], And(a == wildlife_preservation, Count([q:quarters], grants(a, q)) == 2))) ::: C) A wildlife preservation grant is awarded in the fourth quarter.\nis_valid(Exists([a:areas], And(a == youth"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_4_22",
    "context": "A charitable foundation awards grants in exactly four areas—medical services, theater arts, wildlife preservation, and youth services—each grant being in one of these areas. One or more grants are awarded in each of the four quarters of a calendar year. Additionally, over the course of a calendar year, the following must obtain: Grants are awarded in all four areas. No more than six grants are awarded. No grants in the same area are awarded in the same quarter or in consecutive quarters. Exactly two medical services grants are awarded. A wildlife preservation grant is awarded in the second quarter.",
    "question": "Which one of the following CANNOT be true in a particular calendar year?",
    "answer": "D",
    "options": [
      "A) Three grants are awarded in a quarter, none of which is a medical services grant.",
      "B) Exactly two grants are awarded in the first quarter and exactly two in the third quarter.",
      "C) Exactly two grants are awarded in the first quarter and exactly two in the fourth quarter.",
      "D) Theater arts grants are awarded in the first and fourth quarters, and no other grants are awarded in those two quarters.",
      "E) Wildlife preservation grants are awarded in the second and fourth quarters, and no other grants are awarded in those two quarters."
    ],
    "raw_logic_programs": [
      "# Declarations\nareas = EnumSort([medical_services, theater_arts, wildlife_preservation, youth_services])\nquarters = EnumSort([first, second, third, fourth])\ngrants = Function([areas, quarters] -> [bool])\n\n# Constraints\nForAll([a:areas], Count([q:quarters], grants(a, q)) >= 1) ::: Grants are awarded in all four areas\nCount([a:areas], Count([q:quarters], grants(a, q))) <= 6 ::: No more than six grants are awarded\nForAll([a:areas], And(Count([q:quarters], grants(a, q)) > 0, Count([q:quarters], grants(a, q)) > 1), Implies(grants(a, q1), Not(grants(a, q2)))) ::: No grants in the same area are awarded in the same quarter or in consecutive quarters\nCount([q:quarters], grants(medical_services, q)) == 2 ::: Exactly two medical services grants are awarded\ngrants(wildlife_preservation, second) ::: A wildlife preservation grant is awarded in the second quarter\n\n# Options\nQuestion ::: Which one of the following CANNOT be true in a particular calendar year?\nis_exception(is_sat(ForAll([a:areas], grants(a, q1) == grants(a, q2)) ::: Three grants are awarded in a quarter, none of which is a medical services grant\nis_exception(is_sat(ForAll([a:areas], grants(a, first) == grants(a, third)) ::: Exactly two grants are awarded in the first quarter and exactly two in the third quarter\nis_exception(is_sat(ForAll([a:areas], grants(a, first) == grants(a, fourth)) ::: Exactly two grants are awarded in the first quarter and exactly two in the fourth quarter\nis_exception(is_sat(ForAll([a:areas], grants(theater_arts, first) == grants(a, fourth)) ::: Theater arts grants are awarded in"
    ]
  },
  {
    "id": "ar_lsat_200906_1-G_4_23",
    "context": "A charitable foundation awards grants in exactly four areas—medical services, theater arts, wildlife preservation, and youth services—each grant being in one of these areas. One or more grants are awarded in each of the four quarters of a calendar year. Additionally, over the course of a calendar year, the following must obtain: Grants are awarded in all four areas. No more than six grants are awarded. No grants in the same area are awarded in the same quarter or in consecutive quarters. Exactly two medical services grants are awarded. A wildlife preservation grant is awarded in the second quarter.",
    "question": "It is fully determined which grants are awarded for each quarter of a particular calendar year if which one of the following is true that year?",
    "answer": "E",
    "options": [
      "A) Two theater arts grants are awarded.",
      "B) Two youth services grants are awarded.",
      "C) Three grants are awarded in the first quarter.",
      "D) Three grants are awarded in the second quarter.",
      "E) Three grants are awarded in the third quarter."
    ],
    "raw_logic_programs": [
      "# Declarations\nareas = EnumSort([medical_services, theater_arts, wildlife_preservation, youth_services])\nquarters = EnumSort([first, second, third, fourth])\ngrants = Function([areas, quarters] -> [int])\n\n# Constraints\nForAll([a:areas], Count([q:quarters], grants(a, q)) >= 1) ::: Grants are awarded in all four areas\nCount([a:areas], grants(a, q)) <= 6 ::: No more than six grants are awarded\nForAll([a:areas], And(q1!= q2, q1!= q3, q2!= q3, q1!= q4, q2!= q4, q3!= q4), Implies(grants(a, q1) > 0, And(grants(a, q2) == 0, grants(a, q3) == 0, grants(a, q4) == 0))) ::: No grants in the same area are awarded in the same quarter or in consecutive quarters\nCount([q:quarters], grants(medical_services, q)) == 2 ::: Exactly two medical services grants are awarded\ngrants(wildlife_preservation, second) > 0 ::: A wildlife preservation grant is awarded in the second quarter\n\n# Options\nQuestion ::: It is fully determined which grants are awarded for each quarter of a particular calendar year if which one of the following is true that year?\nis_sat(Count([a:areas], grants(a, theater_arts)) == 2) ::: A) Two theater arts grants are awarded.\nis_sat(Count([a:areas], grants(a, youth_services)) == 2) ::: B) Two youth services grants are awarded.\nis_sat(Count([q:quarters], grants(q)) == 3) ::: C) Three grants are awarded in the first quarter.\nis_sat(Count([q:quarters], grants(q)) == 3) ::: D) Three grants are awarded in the second quarter.\nis_sat(Count([q:quarters], grants"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_1_1",
    "context": "Historical records show that over the course of five consecutive years—601, 602, 603, 604, and 605—a certain emperor began construction of six monuments: F, G, H, L, M, and S. A historian is trying to determine the years in which the individual monuments were begun. The following facts have been established: L was begun in a later year than G, but in an earlier year than F. H was begun no earlier than 604. M was begun earlier than 604. Two of the monuments were begun in 601, and no other monument was begun in the same year as any of the other monuments.",
    "question": "Which one of the following could be an accurate matching of monuments to the years in which they were begun?",
    "answer": "E",
    "options": [
      "A) 601: G; 602: L, S; 603: M; 604: H; 605: F",
      "B) 601: G, M; 602: L; 603: H; 604: S; 605: F",
      "C) 601: G, M; 602: S; 603: F; 604: L; 605: H",
      "D) 601: G, S; 602: L; 603: F; 604: M; 605: H",
      "E) 601: G, S; 602: L; 603: M; 604: H; 605: F"
    ],
    "raw_logic_programs": [
      "# Declarations\nmonuments = EnumSort([F, G, H, L, M, S])\nyears = EnumSort([601, 602, 603, 604, 605])\nbegun = Function([monuments, years] -> [bool])\n\n# Constraints\nForAll([m:monuments], Count([y:years], begun(m, y)) == 1) ::: no other monument was begun in the same year as any of the other monuments\nAnd(begun(L, 601), begun(G, 602), begun(H, 603), begun(M, 604), begun(S, 605)) ::: Two of the monuments were begun in 601, and no other monument was begun in the same year as any of the other monuments\nbegun(L, y) > begun(G, y) ::: L was begun in a later year than G\nbegun(F, y) > begun(L, y) ::: L was begun in a later year than G\nbegun(H, y) > begun(604) ::: H was begun no earlier than 604\nbegun(M, y) < begun(604) ::: M was begun earlier than 604\n\n# Options\nQuestion ::: Which one of the following could be an accurate matching of monuments to the years in which they were begun?\nis_sat(And(begun(G, 601), begun(L, 602), begun(S, 602), begun(M, 603), begun(H, 604), begun(F, 605))) ::: A) 601: G; 602: L, S; 603: M; 604: H; 605: F\nis_sat(And(begun(G, 601), begun(M, 602), begun(L, 603), begun(H, 604), begun(S, 605), begun(F, 605))) ::: B) 601: G, M;"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_1_2",
    "context": "Historical records show that over the course of five consecutive years—601, 602, 603, 604, and 605—a certain emperor began construction of six monuments: F, G, H, L, M, and S. A historian is trying to determine the years in which the individual monuments were begun. The following facts have been established: L was begun in a later year than G, but in an earlier year than F. H was begun no earlier than 604. M was begun earlier than 604. Two of the monuments were begun in 601, and no other monument was begun in the same year as any of the other monuments.",
    "question": "What is the latest year in which L could have been begun?",
    "answer": "C",
    "options": [
      "A) 601",
      "B) 602",
      "C) 603",
      "D) 604",
      "E) 605"
    ],
    "raw_logic_programs": [
      "# Declarations\nyears = EnumSort([601, 602, 603, 604, 605])\nmonuments = EnumSort([F, G, H, L, M, S])\nbegan = Function([years, monuments] -> [bool])\n\n# Constraints\nForAll([m:monuments], Count([y:years], began(y, m)) == 1) ::: no other monument was begun in the same year as any of the other monuments\nAnd(began(601, F), began(601, G)) ::: Two of the monuments were begun in 601\nAnd(began(602, L), began(602, G)) ::: L was begun in a later year than G\nAnd(began(603, L), began(603, F)) ::: L was begun in a later year than G\nbegan(604, H) ::: H was begun no earlier than 604\nbegan(604, M) ::: M was begun earlier than 604\n\n# Options\nQuestion ::: What is the latest year in which L could have been begun?\nis_valid(began(601, L)) ::: A) 601\nis_valid(began(602, L)) ::: B) 602\nis_valid(began(603, L)) ::: C) 603\nis_valid(began(604, L)) ::: D) 604\nis_valid(began(605, L)) ::: E) 605\n------"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_1_3",
    "context": "Historical records show that over the course of five consecutive years—601, 602, 603, 604, and 605—a certain emperor began construction of six monuments: F, G, H, L, M, and S. A historian is trying to determine the years in which the individual monuments were begun. The following facts have been established: L was begun in a later year than G, but in an earlier year than F. H was begun no earlier than 604. M was begun earlier than 604. Two of the monuments were begun in 601, and no other monument was begun in the same year as any of the other monuments.",
    "question": "The years in which each of the monuments were begun can be completely determined if which one of the following is discovered to be true?",
    "answer": "E",
    "options": [
      "A) F was begun in 603.",
      "B) G was begun in 602.",
      "C) H was begun in 605.",
      "D) M was begun in 602.",
      "E) S was begun in 604."
    ],
    "raw_logic_programs": [
      "# Declarations\nyears = EnumSort([601, 602, 603, 604, 605])\nmonuments = EnumSort([F, G, H, L, M, S])\nbegan = Function([years, monuments] -> [bool])\n\n# Constraints\nForAll([m:monuments], Count([y:years], began(y, m)) == 1) ::: Two of the monuments were begun in 601, and no other monument was begun in the same year as any of the other monuments\nbegan(601, F) ::: F was begun in 601\nbegan(601, G) ::: G was begun in 601\nbegan(604, M) ::: M was begun in 604\nbegan(605, H) ::: H was begun in 605\nbegan(601, L) ::: L was begun in 601\nbegan(602, L) ::: L was begun in 602\nbegan(603, L) ::: L was begun in 603\nbegan(604, L) ::: L was begun in 604\nbegan(605, L) ::: L was begun in 605\nbegan(601, S) ::: S was begun in 601\nbegan(602, S) ::: S was begun in 602\nbegan(603, S) ::: S was begun in 603\nbegan(604, S) ::: S was begun in 6"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_1_4",
    "context": "Historical records show that over the course of five consecutive years—601, 602, 603, 604, and 605—a certain emperor began construction of six monuments: F, G, H, L, M, and S. A historian is trying to determine the years in which the individual monuments were begun. The following facts have been established: L was begun in a later year than G, but in an earlier year than F. H was begun no earlier than 604. M was begun earlier than 604. Two of the monuments were begun in 601, and no other monument was begun in the same year as any of the other monuments.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) F was begun in a later year than M.",
      "B) F was begun in a later year than S.",
      "C) H was begun in a later year than F.",
      "D) H was begun in a later year than S.",
      "E) M was begun in a later year than G."
    ],
    "raw_logic_programs": [
      "# Declarations\nyears = EnumSort([601, 602, 603, 604, 605])\nmonuments = EnumSort([F, G, H, L, M, S])\nbegan = Function([years, monuments] -> [bool])\n\n# Constraints\nForAll([m:monuments], Count([y:years], began(y, m)) == 1) ::: no other monument was begun in the same year as any of the other monuments\nAnd(began(601, F), began(601, G)) ::: Two of the monuments were begun in 601\nAnd(began(604, M), Not(began(604, H))) ::: M was begun earlier than 604\nAnd(began(604, H), Not(began(604, M))) ::: H was begun no earlier than 604\nAnd(began(601, L), Not(began(601, G))) ::: L was begun in a later year than G\nAnd(began(601, F), Not(began(601, L))) ::: L was begun in a later year than F\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(ForAll([y:years], Implies(began(y, F), began(y, M)))) ::: (A)\nis_valid(ForAll([y:years], Implies(began(y, F), began(y, S)))) ::: (B)\nis_valid(ForAll([y:years], Implies("
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_1_5",
    "context": "Historical records show that over the course of five consecutive years—601, 602, 603, 604, and 605—a certain emperor began construction of six monuments: F, G, H, L, M, and S. A historian is trying to determine the years in which the individual monuments were begun. The following facts have been established: L was begun in a later year than G, but in an earlier year than F. H was begun no earlier than 604. M was begun earlier than 604. Two of the monuments were begun in 601, and no other monument was begun in the same year as any of the other monuments.",
    "question": "L must be the monument that was begun in 602 if which one of the following is true?",
    "answer": "E",
    "options": [
      "A) F was begun in 605.",
      "B) G was begun in 601.",
      "C) H was begun in 604.",
      "D) M was begun in 601.",
      "E) S was begun in 603."
    ],
    "raw_logic_programs": [
      "# Declarations\nmonuments = EnumSort([F, G, H, L, M, S])\nyears = EnumSort([601, 602, 603, 604, 605])\nbegan = Function([monuments, years] -> [bool])\n\n# Constraints\nForAll([m:monuments], Count([y:years], began(m, y)) == 1) ::: no other monument was begun in the same year as any of the other monuments\nbegan(L, 602) ::: L was begun in 602\nbegan(G, 601) ::: G was begun in 601\nbegan(M, 601) ::: M was begun in 601\nbegan(H, 604) ::: H was begun in 604\nbegan(F, 601) ::: F was begun in 601\nbegan(S, 603) ::: S was begun in 603\n\n# Options\nQuestion ::: L must be the monument that was begun in 602 if which one of the following is true?\nis_sat(ForAll([m:monuments], And(m!= L, Not(began(m, 602))))) ::: (A)\nis_sat(ForAll([m:monuments], And(m!= L, Not(began(m, 601))))) ::: (B)\nis_sat(ForAll([m:monuments], And(m!= L, Not(began(m, 604))))) ::: (C)"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_1_6",
    "context": "Historical records show that over the course of five consecutive years—601, 602, 603, 604, and 605—a certain emperor began construction of six monuments: F, G, H, L, M, and S. A historian is trying to determine the years in which the individual monuments were begun. The following facts have been established: L was begun in a later year than G, but in an earlier year than F. H was begun no earlier than 604. M was begun earlier than 604. Two of the monuments were begun in 601, and no other monument was begun in the same year as any of the other monuments.",
    "question": "If M was begun in a later year than L, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) F was begun in 603.",
      "B) G was begun in 602.",
      "C) H was begun in 605.",
      "D) L was begun in 603.",
      "E) S was begun in 604."
    ],
    "raw_logic_programs": [
      "# Declarations\nyears = EnumSort([601, 602, 603, 604, 605])\nmonuments = EnumSort([F, G, H, L, M, S])\nbegan = Function([years, monuments] -> [bool])\n\n# Constraints\nForAll([m:monuments], Count([y:years], began(y, m)) == 1) ::: no other monument was begun in the same year as any of the other monuments\nAnd(began(601, F), began(601, G)) ::: Two of the monuments were begun in 601\nAnd(began(602, G), began(603, L)) ::: L was begun in a later year than G, but in an earlier year than F\nbegan(604, M) ::: M was begun earlier than 604\nbegan(604, H) ::: H was begun no earlier than 604\n\n# Options\nQuestion ::: If M was begun in a later year than L, then which one of the following could be true?\nis_sat(And(began(603, F), began(604, M), began(605, L))) ::: (A)\nis_sat(And(began(602, G), began(604, M), began(605, L))) ::: (B)\nis_sat(And(began(604, H), began(605, M), began(605, L))) ::: (C)\nis_sat(And(began(60"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_2_7",
    "context": "A company organizing on-site day care consults with a group of parents composed exclusively of volunteers from among the seven employees—Felicia, Leah, Masatomo, Rochelle, Salman, Terry, and Veena—who have become parents this year. The composition of the volunteer group must be consistent with the following: If Rochelle volunteers, then so does Masatomo. If Masatomo volunteers, then so does Terry. If Salman does not volunteer, then Veena volunteers. If Rochelle does not volunteer, then Leah volunteers. If Terry volunteers, then neither Felicia nor Veena volunteers.",
    "question": "Which one of the following could be a complete and accurate list of the volunteers?",
    "answer": "C",
    "options": [
      "A) Felicia, Salman",
      "B) Masatomo, Rochelle",
      "C) Leah, Salman, Terry",
      "D) Salman, Rochelle, Veena",
      "E) Leah, Salman, Terry, Veena"
    ],
    "raw_logic_programs": [
      "# Declarations\nparents = EnumSort([Felicia, Leah, Masatomo, Rochelle, Salman, Terry, Veena])\nvolunteers = Function([parents] -> [bool])\n\n# Constraints\nForAll([p:parents], Implies(volunteers(p), p!= Rochelle)) ::: The composition of the volunteer group must be consistent with the following: If Rochelle volunteers, then so does Masatomo.\nForAll([p:parents], Implies(volunteers(p), p!= Masatomo)) ::: The composition of the volunteer group must be consistent with the following: If Masatomo volunteers, then so does Terry.\nForAll([p:parents], Implies(volunteers(p), p!= Salman)) ::: The composition of the volunteer group must be consistent with the following: If Salman does not volunteer, then Veena volunteers.\nForAll([p:parents], Implies(volunteers(p), p!= Rochelle)) ::: The composition of the volunteer group must be consistent with the following: If Rochelle does not volunteer, then Leah volunteers.\nForAll([p:parents], Implies(volunteers(p), p!= Terry)) ::: The composition of the volunteer group must be consistent with the following: If Terry volunteers, then neither Felicia nor Veena volunteers.\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the volunteers?\nis_sat(ForAll([p:parents], volunteers(p) == (p == Felicia) || (p == Salman))) ::: A) Felicia, Salman\nis"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_2_8",
    "context": "A company organizing on-site day care consults with a group of parents composed exclusively of volunteers from among the seven employees—Felicia, Leah, Masatomo, Rochelle, Salman, Terry, and Veena—who have become parents this year. The composition of the volunteer group must be consistent with the following: If Rochelle volunteers, then so does Masatomo. If Masatomo volunteers, then so does Terry. If Salman does not volunteer, then Veena volunteers. If Rochelle does not volunteer, then Leah volunteers. If Terry volunteers, then neither Felicia nor Veena volunteers.",
    "question": "If Veena volunteers, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Felicia and Rochelle also volunteer.",
      "B) Felicia and Salman also volunteer.",
      "C) Leah and Masatomo also volunteer.",
      "D) Leah and Terry also volunteer.",
      "E) Salman and Terry also volunteer."
    ],
    "raw_logic_programs": [
      "# Declarations\nparents = EnumSort([Felicia, Leah, Masatomo, Rochelle, Salman, Terry, Veena])\nvolunteers = Function([parents] -> [bool])\n\n# Constraints\nForAll([p:parents], Implies(volunteers(p), p!= Rochelle)) ::: Rochelle does not volunteer\nAnd(volunteers(Rochelle), volunteers(Masatomo)) ::: If Rochelle volunteers, then so does Masatomo\nAnd(volunteers(Masatomo), volunteers(Terry)) ::: If Masatomo volunteers, then so does Terry\nAnd(Not(volunteers(Salman)), volunteers(Veena)) ::: If Salman does not volunteer, then Veena volunteers\nAnd(Not(volunteers(Rochelle)), volunteers(Leah)) ::: If Rochelle does not volunteer, then Leah volunteers\nAnd(volunteers(Terry), Not(volunteers(Felicia)), Not(volunteers(Veena))) ::: If Terry volunteers, then neither Felicia nor Veena volunteers\n\n# Options\nQuestion ::: If Veena volunteers, then which one of the following could be true?\nis_sat(And(volunteers(Veena), volunteers(Felicia), volunteers(Rochelle))) ::: A) Felicia and Rochelle also volunteer.\nis_sat(And(volunteers(Veena), volunteers(Felicia), volunteers(Salman))) ::: B) Felicia and Salman also volunteer.\nis_sat(And(volunteers"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_2_9",
    "context": "A company organizing on-site day care consults with a group of parents composed exclusively of volunteers from among the seven employees—Felicia, Leah, Masatomo, Rochelle, Salman, Terry, and Veena—who have become parents this year. The composition of the volunteer group must be consistent with the following: If Rochelle volunteers, then so does Masatomo. If Masatomo volunteers, then so does Terry. If Salman does not volunteer, then Veena volunteers. If Rochelle does not volunteer, then Leah volunteers. If Terry volunteers, then neither Felicia nor Veena volunteers.",
    "question": "If Terry does not volunteer, then which one of the following CANNOT be true?",
    "answer": "C",
    "options": [
      "A) Felicia volunteers.",
      "B) Leah volunteers.",
      "C) Rochelle volunteers.",
      "D) Salman volunteers.",
      "E) Veena volunteers."
    ],
    "raw_logic_programs": [
      "# Declarations\nparents = EnumSort([Felicia, Leah, Masatomo, Rochelle, Salman, Terry, Veena])\nvolunteers = Function([parents] -> [bool])\n\n# Constraints\nForAll([p:parents], Implies(volunteers(p), p!= Rochelle)) ::: The composition of the volunteer group must be consistent with the following: If Rochelle volunteers, then so does Masatomo.\nForAll([p:parents], Implies(volunteers(p), p!= Masatomo)) ::: If Masatomo volunteers, then so does Terry.\nForAll([p:parents], Implies(volunteers(p), p!= Salman)) ::: If Salman does not volunteer, then Veena volunteers.\nForAll([p:parents], Implies(volunteers(p), p!= Rochelle)) ::: If Rochelle does not volunteer, then Leah volunteers.\nForAll([p:parents], Implies(volunteers(p), p!= Terry)) ::: If Terry volunteers, then neither Felicia nor Veena volunteers.\n\n# Options\nQuestion ::: If Terry does not volunteer, then which one of the following CANNOT be true?\nis_exception(is_sat(volunteers(Felicia))) ::: A) Felicia volunteers.\nis_exception(is_sat(volunteers(Leah))) ::: B) Leah volunteers.\nis_exception(is_sat(volunteers(Rochelle))) ::: C) Rochelle volunteers.\nis_exception(is_sat(volunteers(Salman)))"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_2_10",
    "context": "A company organizing on-site day care consults with a group of parents composed exclusively of volunteers from among the seven employees—Felicia, Leah, Masatomo, Rochelle, Salman, Terry, and Veena—who have become parents this year. The composition of the volunteer group must be consistent with the following: If Rochelle volunteers, then so does Masatomo. If Masatomo volunteers, then so does Terry. If Salman does not volunteer, then Veena volunteers. If Rochelle does not volunteer, then Leah volunteers. If Terry volunteers, then neither Felicia nor Veena volunteers.",
    "question": "If Masatomo volunteers, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Felicia volunteers.",
      "B) Leah volunteers.",
      "C) Veena volunteers.",
      "D) Salman does not volunteer.",
      "E) Terry does not volunteer."
    ],
    "raw_logic_programs": [
      "# Declarations\nparents = EnumSort([Felicia, Leah, Masatomo, Rochelle, Salman, Terry, Veena])\nvolunteers = Function([parents] -> [bool])\n\n# Constraints\nForAll([p:parents], volunteers(p) == bool) ::: volunteers(p) is a boolean\nAnd(volunteers(Rochelle), volunteers(Masatomo)) ::: If Rochelle volunteers, then so does Masatomo\nAnd(volunteers(Masatomo), volunteers(Terry)) ::: If Masatomo volunteers, then so does Terry\nAnd(Not(volunteers(Salman)), volunteers(Veena)) ::: If Salman does not volunteer, then Veena volunteers\nAnd(Not(volunteers(Rochelle)), volunteers(Leah)) ::: If Rochelle does not volunteer, then Leah volunteers\nAnd(volunteers(Terry), Not(volunteers(Felicia)), Not(volunteers(Veena))) ::: If Terry volunteers, then neither Felicia nor Veena volunteers\n\n# Options\nQuestion ::: If Masatomo volunteers, then which one of the following could be true?\nis_sat(And(volunteers(Masatomo), volunteers(Felicia))) ::: A) Felicia volunteers.\nis_sat(And(volunteers(Masatomo), volunteers(Leah))) ::: B) Leah volunteers.\nis_sat(And(volunteers(Masatomo), volunteers(Veena))) ::: C) Veena volunteers.\nis_s"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_2_11",
    "context": "A company organizing on-site day care consults with a group of parents composed exclusively of volunteers from among the seven employees—Felicia, Leah, Masatomo, Rochelle, Salman, Terry, and Veena—who have become parents this year. The composition of the volunteer group must be consistent with the following: If Rochelle volunteers, then so does Masatomo. If Masatomo volunteers, then so does Terry. If Salman does not volunteer, then Veena volunteers. If Rochelle does not volunteer, then Leah volunteers. If Terry volunteers, then neither Felicia nor Veena volunteers.",
    "question": "If Felicia volunteers, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Leah volunteers.",
      "B) Salman volunteers.",
      "C) Veena does not volunteer.",
      "D) Exactly three of the employees volunteer.",
      "E) Exactly four of the employees volunteer."
    ],
    "raw_logic_programs": [
      "# Declarations\nparents = EnumSort([Felicia, Leah, Masatomo, Rochelle, Salman, Terry, Veena])\nvolunteers = Function([parents] -> [bool])\n\n# Constraints\nForAll([p:parents], volunteers(p) == bool) ::: volunteers(p) is a boolean\nAnd(volunteers(Rochelle), volunteers(Masatomo)) ::: If Rochelle volunteers, then so does Masatomo\nAnd(volunteers(Masatomo), volunteers(Terry)) ::: If Masatomo volunteers, then so does Terry\nAnd(Not(volunteers(Salman)), volunteers(Veena)) ::: If Salman does not volunteer, then Veena volunteers\nAnd(Not(volunteers(Rochelle)), volunteers(Leah)) ::: If Rochelle does not volunteer, then Leah volunteers\nAnd(volunteers(Terry), Not(volunteers(Felicia)), Not(volunteers(Veena))) ::: If Terry volunteers, then neither Felicia nor Veena volunteers\n\n# Options\nQuestion ::: If Felicia volunteers, then which one of the following must be true?\nis_valid(And(volunteers(Felicia), volunteers(Leah))) ::: A) Leah volunteers.\nis_valid(And(volunteers(Felicia), volunteers(Salman))) ::: B) Salman volunteers.\nis_valid(And(volunteers(Felicia), Not(volunteers(Veena)))) ::: C) Veena does not volunteer.\nis_valid(And("
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_2_12",
    "context": "A company organizing on-site day care consults with a group of parents composed exclusively of volunteers from among the seven employees—Felicia, Leah, Masatomo, Rochelle, Salman, Terry, and Veena—who have become parents this year. The composition of the volunteer group must be consistent with the following: If Rochelle volunteers, then so does Masatomo. If Masatomo volunteers, then so does Terry. If Salman does not volunteer, then Veena volunteers. If Rochelle does not volunteer, then Leah volunteers. If Terry volunteers, then neither Felicia nor Veena volunteers.",
    "question": "Which one of the following pairs of employees is such that at least one member of the pair volunteers?",
    "answer": "B",
    "options": [
      "A) Felicia and Terry",
      "B) Leah and Masatomo",
      "C) Leah and Veena",
      "D) Rochelle and Salman",
      "E) Salman and Terry"
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Felicia, Leah, Masatomo, Rochelle, Salman, Terry, Veena])\nvolunteers = Function([employees] -> [bool])\n\n# Constraints\nForAll([e:employees], volunteers(e) == true) ::: The composition of the volunteer group must be consistent with the following\nAnd(volunteers(Rochelle), volunteers(Masatomo)) ::: If Rochelle volunteers, then so does Masatomo\nAnd(volunteers(Masatomo), volunteers(Terry)) ::: If Masatomo volunteers, then so does Terry\nAnd(Not(volunteers(Salman)), volunteers(Veena)) ::: If Salman does not volunteer, then Veena volunteers\nAnd(Not(volunteers(Rochelle)), volunteers(Leah)) ::: If Rochelle does not volunteer, then Leah volunteers\nAnd(volunteers(Terry), Not(volunteers(Felicia)), Not(volunteers(Veena))) ::: If Terry volunteers, then neither Felicia nor Veena volunteers\n\n# Options\nQuestion ::: Which one of the following pairs of employees is such that at least one member of the pair volunteers?\nis_sat(Or(volunteers(Felicia), volunteers(Terry))) ::: (A)\nis_sat(Or(volunteers(Leah), volunteers(Masatomo))) ::: (B)\nis_sat(Or(volunteers(Leah), volunteers(Veena))) ::: (C)\nis_sat(Or(volunteers(Rochelle), volunteers(Salman))) ::: (D)\nis_sat(Or(volunteers(Salman), volunteers(Terry))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_3_13",
    "context": "Flyhigh Airlines owns exactly two planes: P and Q. Getaway Airlines owns exactly three planes: R, S, T. On Sunday, each plane makes exactly one flight, according to the following conditions: Only one plane departs at a time. Each plane makes either a domestic or an international flight, but not both. Plane P makes an international flight. Planes Q and R make domestic flights. All international flights depart before any domestic flight. Any Getaway domestic flight departs before Flyhigh's domestic flight.",
    "question": "Which one of the following could be the order, from first to last, in which the five planes depart?",
    "answer": "D",
    "options": [
      "A) P, Q, R, S, T",
      "B) P, Q, T, S, R",
      "C) P, S, T, Q, R",
      "D) P, S, T, R, Q",
      "E) T, S, R, P, Q"
    ],
    "raw_logic_programs": [
      "# Declarations\nplanes = EnumSort([P, Q, R, S, T])\nflights = EnumSort([domestic, international])\ndeparts = Function([planes, flights] -> [bool])\n\n# Constraints\nForAll([p:planes], Count([f:flights], departs(p, f)) == 1) ::: Each plane makes exactly one flight\nAnd(departs(P, international), departs(Q, domestic), departs(R, domestic)) ::: Plane P makes an international flight. Planes Q and R make domestic flights\nForAll([p:planes], Implies(departs(p, international), Not(departs(p, domestic)))) ::: Each plane makes either a domestic or an international flight, but not both\nForAll([p:planes], Implies(departs(p, international), departs(p, international) < departs(p, domestic))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic), departs(p, domestic) < departs(p, domestic))) ::: Any Getaway domestic flight departs before Flyhigh's domestic flight\n\n# Options\nQuestion ::: Which one of the following could be the order, from first to last, in which the five planes depart?\nis_sat(ForAll([p:planes], departs(p, international) == departs(p, international))) ::: (A)\nis_sat(ForAll([p:planes], departs(p, international) == departs(p, international))) ::: (B)\nis_sat(ForAll([p:planes], departs(p, international) == departs(p, international))) ::: (C)\nis_sat(ForAll([p:planes], departs(p, international) == departs(p, international))) ::: ("
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_3_14",
    "context": "Flyhigh Airlines owns exactly two planes: P and Q. Getaway Airlines owns exactly three planes: R, S, T. On Sunday, each plane makes exactly one flight, according to the following conditions: Only one plane departs at a time. Each plane makes either a domestic or an international flight, but not both. Plane P makes an international flight. Planes Q and R make domestic flights. All international flights depart before any domestic flight. Any Getaway domestic flight departs before Flyhigh's domestic flight.",
    "question": "The plane that departs second could be any one of exactly how many of the planes?",
    "answer": "D",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declares\nplanes = EnumSort([P, Q, R, S, T])\nflights = EnumSort([domestic, international])\ndeparts = Function([planes, flights] -> [int])\n\n# Constraints\nForAll([p:planes], Count([f:flights], departs(p, f) == 1) == 1) ::: Each plane makes exactly one flight\nForAll([p:planes], Or(departs(p, domestic), departs(p, international))) ::: Each plane makes either a domestic or an international flight, but not both\ndeparts(P, international) ::: Plane P makes an international flight\ndeparts(Q, domestic) ::: Planes Q and R make domestic flights\ndeparts(R, domestic) ::: Planes Q and R make domestic flights\nForAll([p:planes], Implies(departs(p, international), Not(departs(p, domestic)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic), Not(departs(p, international)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic), Not(departs(p, international)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic), Not(departs(p, international)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic), Not(departs(p, international)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic), Not(departs(p, international)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_3_15",
    "context": "Flyhigh Airlines owns exactly two planes: P and Q. Getaway Airlines owns exactly three planes: R, S, T. On Sunday, each plane makes exactly one flight, according to the following conditions: Only one plane departs at a time. Each plane makes either a domestic or an international flight, but not both. Plane P makes an international flight. Planes Q and R make domestic flights. All international flights depart before any domestic flight. Any Getaway domestic flight departs before Flyhigh's domestic flight.",
    "question": "If plane S departs sometime before plane P, then which one of the following must be false?",
    "answer": "B",
    "options": [
      "A) Plane S departs first.",
      "B) Plane S departs third.",
      "C) Plane T departs second.",
      "D) Plane T departs third.",
      "E) Plane T departs fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\nplanes = EnumSort([P, Q, R, S, T])\nflights = EnumSort([domestic, international])\ndeparts = Function([planes, flights] -> [bool])\n\n# Constraints\nForAll([p:planes], Count([f:flights], departs(p, f)) == 1) ::: Each plane makes exactly one flight\nForAll([p:planes], Or(departs(p, domestic), departs(p, international))) ::: Each plane makes either a domestic or an international flight, but not both\ndeparts(P, international) ::: Plane P makes an international flight\ndeparts(Q, domestic) ::: Planes Q and R make domestic flights\ndeparts(R, domestic) ::: Planes Q and R make domestic flights\nForAll([p:planes], Implies(departs(p, international), Not(departs(p, domestic)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic), Not(departs(p, international)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic), Not(departs(p, international)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic), Not(departs(p, international)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic), Not(departs(p, international)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic), Not(departs(p, international)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_3_16",
    "context": "Flyhigh Airlines owns exactly two planes: P and Q. Getaway Airlines owns exactly three planes: R, S, T. On Sunday, each plane makes exactly one flight, according to the following conditions: Only one plane departs at a time. Each plane makes either a domestic or an international flight, but not both. Plane P makes an international flight. Planes Q and R make domestic flights. All international flights depart before any domestic flight. Any Getaway domestic flight departs before Flyhigh's domestic flight.",
    "question": "Which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Plane P departs first.",
      "B) Plane Q departs last.",
      "C) Plane R departs second.",
      "D) Plane S departs first.",
      "E) Plane T departs fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\nplanes = EnumSort([P, Q, R, S, T])\nflights = EnumSort([domestic, international])\ndeparts = Function([planes, flights] -> [bool])\n\n# Constraints\nForAll([p:planes], Count([f:flights], departs(p, f)) == 1) ::: Each plane makes exactly one flight\nForAll([p:planes], Or(departs(p, domestic), departs(p, international))) ::: Each plane makes either a domestic or an international flight, but not both\ndeparts(P, international) ::: Plane P makes an international flight\ndeparts(Q, domestic) ::: Planes Q and R make domestic flights\ndeparts(R, domestic) ::: Planes Q and R make domestic flights\nForAll([p:planes], Implies(departs(p, international), Not(departs(p, domestic)))) ::: All international flights depart before any domestic flight\nForAll([p:planes], Implies(departs(p, domestic), Not(departs(R, domestic)))) ::: Any Getaway domestic flight departs before Flyhigh's domestic flight\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(ForAll([p:planes], p == P => departs(p, international))) ::: (A)\nis_valid(ForAll([p:planes], p == Q => departs(p, domestic))) ::: (B)\nis_valid(ForAll([p:planes], p == R => departs(p, domestic))) ::: (C)\nis_valid(ForAll([p:planes], p == S => departs(p, international))) ::: (D)\nis_valid(ForAll([p:planes], p == T => departs(p, domestic))) ::: (E)\n------\nProblem:"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_3_17",
    "context": "Flyhigh Airlines owns exactly two planes: P and Q. Getaway Airlines owns exactly three planes: R, S, T. On Sunday, each plane makes exactly one flight, according to the following conditions: Only one plane departs at a time. Each plane makes either a domestic or an international flight, but not both. Plane P makes an international flight. Planes Q and R make domestic flights. All international flights depart before any domestic flight. Any Getaway domestic flight departs before Flyhigh's domestic flight.",
    "question": "If plane S departs third, then each of the following can be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) Plane R departs sometime before plane S and sometime before plane T.",
      "B) Plane S departs sometime before plane Q and sometime before plane T.",
      "C) Plane S departs sometime before plane R and sometime before plane T.",
      "D) Plane T departs sometime before plane P and sometime before plane S.",
      "E) Plane T departs sometime before plane R and sometime before plane S."
    ],
    "raw_logic_programs": [
      "# Declarations\nplanes = EnumSort([P, Q, R, S, T])\nflights = EnumSort([domestic, international])\ndeparts = Function([planes, flights] -> [int])\n\n# Constraints\nForAll([p:planes], And(1 <= departs(p, domestic), departs(p, domestic) <= 1)) ::: Only one plane departs at a time\nForAll([p:planes], And(1 <= departs(p, international), departs(p, international) <= 1)) ::: Only one plane departs at a time\nForAll([p:planes], Or(departs(p, domestic) == 1, departs(p, international) == 1)) ::: Each plane makes either a domestic or an international flight, but not both\ndeparts(P, international) == 1 ::: Plane P makes an international flight\ndeparts(Q, domestic) == 1 ::: Planes Q and R make domestic flights\ndeparts(R, domestic) == 1 ::: Planes Q and R make domestic flights\nForAll([p:planes], And(departs(p, international) == 1, departs(p, domestic) == 0)) ::: All international flights depart before any domestic flight\nForAll([p:planes], And(departs(p, domestic) == 1, departs(p, international) == 0)) ::: All international flights depart before any domestic flight\nForAll([p:planes], And(departs(p, domestic) == 1, departs(p, international) == 0)) ::: All international flights depart before any domestic flight\nForAll([p:planes], And(departs(p, domestic) == 1, departs(p, international) == 0)) ::: All international flights depart before any domestic flight\nForAll([p:planes], And(de"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_4_18",
    "context": "A student is choosing courses to take during a summer school session. Each summer school student must take at least three courses from among the following seven: history, linguistics, music, physics, statistics, theater, and writing. The summer school schedule restricts the courses a student can take in the following ways: If history is taken, then neither statistics nor music can be taken. If music is taken, then neither physics nor theater can be taken. If writing is taken, then neither physics nor statistics can be taken.",
    "question": "The student could take which one of the following groups of courses during the summer school session?",
    "answer": "C",
    "options": [
      "A) history, linguistics, and statistics",
      "B) history, music, and physics",
      "C) history, physics, and theater",
      "D) linguistics, physics, theater, and writing",
      "E) music, theater, and writing"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([history, linguistics, music, physics, statistics, theater, writing])\ntakes = Function([courses] -> [bool])\nForAll([c:courses], And(takes(c) == true, takes(c) == false))\n\n# Constraints\nForAll([c:courses], Count([c:courses], takes(c)) >= 3) ::: Each summer school student must take at least three courses\nAnd(takes(history), Not(takes(statistics))) ::: If history is taken, then neither statistics nor music can be taken\nAnd(takes(music), Not(takes(physics))) ::: If music is taken, then neither physics nor theater can be taken\nAnd(takes(writing), Not(takes(physics))) ::: If writing is taken, then neither physics nor statistics can be taken\n\n# Options\nQuestion ::: The student could take which one of the following groups of courses during the summer school session?\nis_valid(ForAll([c:courses], takes(c) == true)) ::: A) history, linguistics, and statistics\nis_valid(ForAll([c:courses], takes(c) == true)) ::: B) history, music, and physics\nis_valid(ForAll([c:courses], takes(c) == true)) ::: C) history, physics, and theater\nis_valid(ForAll([c:courses], takes(c) == true)) ::: D) linguistics, physics, theater, and writing\nis_valid(ForAll([c:courses], takes(c) == true)) ::: E) music, theater, and writing\n------\nProblem:\nA company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company has a total of 100 employees, each of whom is either a manager or a nonmanager. The company"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_4_19",
    "context": "A student is choosing courses to take during a summer school session. Each summer school student must take at least three courses from among the following seven: history, linguistics, music, physics, statistics, theater, and writing. The summer school schedule restricts the courses a student can take in the following ways: If history is taken, then neither statistics nor music can be taken. If music is taken, then neither physics nor theater can be taken. If writing is taken, then neither physics nor statistics can be taken.",
    "question": "What is the maximum number of courses the student could take during the summer school session?",
    "answer": "D",
    "options": [
      "A) seven",
      "B) six",
      "C) five",
      "D) four",
      "E) three"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([history, linguistics, music, physics, statistics, theater, writing])\ntakes = Function([courses] -> [bool])\nForAll([c:courses], And(0 <= takes(c), takes(c) <= 1))\n\n# Constraints\nForAll([c:courses], Count([c:courses], takes(c)) >= 3) ::: Each summer school student must take at least three courses\nAnd(takes(history), Not(takes(statistics))) ::: If history is taken, then neither statistics nor music can be taken\nAnd(takes(history), Not(takes(music))) ::: If history is taken, then neither statistics nor music can be taken\nAnd(takes(music), Not(takes(physics))) ::: If music is taken, then neither physics nor theater can be taken\nAnd(takes(music), Not(takes(theater))) ::: If music is taken, then neither physics nor theater can be taken\nAnd(takes(writing), Not(takes(physics))) ::: If writing is taken, then neither physics nor statistics can be taken\nAnd(takes(writing), Not(takes(statistics))) ::: If writing is taken, then neither physics nor statistics can be taken\n\n# Options\nQuestion ::: What is the maximum number of courses the student could take during the summer school session?\nis_sat(ForAll([c:courses], takes(c))) ::: A) seven\nis_sat(ForAll([c:courses], takes(c) == 1)) ::: B) six\nis_sat(ForAll([c:courses], takes(c) == 2)) ::: C) five\nis_sat(ForAll([c:courses], takes(c) == 3)) ::: D) four\nis_sat(ForAll([c:courses], takes(c)"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_4_20",
    "context": "A student is choosing courses to take during a summer school session. Each summer school student must take at least three courses from among the following seven: history, linguistics, music, physics, statistics, theater, and writing. The summer school schedule restricts the courses a student can take in the following ways: If history is taken, then neither statistics nor music can be taken. If music is taken, then neither physics nor theater can be taken. If writing is taken, then neither physics nor statistics can be taken.",
    "question": "If the student takes neither physics nor writing, then it could be true that the student also takes neither",
    "answer": "B",
    "options": [
      "A) history nor linguistics",
      "B) history nor music",
      "C) history nor statistics",
      "D) linguistics nor music",
      "E) statistics nor theater"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([history, linguistics, music, physics, statistics, theater, writing])\ntakes = Function([courses] -> [bool])\nForAll([c:courses], And(takes(c) == true, takes(c) == false))\n\n# Constraints\nForAll([c:courses], Count([c:courses], takes(c)) >= 3) ::: Each summer school student must take at least three courses\nAnd(takes(history), Not(takes(statistics))) ::: If history is taken, then neither statistics nor music can be taken\nAnd(takes(history), Not(takes(music))) ::: If history is taken, then neither statistics nor music can be taken\nAnd(takes(music), Not(takes(physics))) ::: If music is taken, then neither physics nor theater can be taken\nAnd(takes(music), Not(takes(theater))) ::: If music is taken, then neither physics nor theater can be taken\nAnd(takes(writing), Not(takes(physics))) ::: If writing is taken, then neither physics nor statistics can be taken\nAnd(takes(writing), Not(takes(statistics))) ::: If writing is taken, then neither physics nor statistics can be taken\n\n# Options\nQuestion ::: If the student takes neither physics nor writing, then it could be true that the student also takes neither\nis_exception(is_sat(And(Not(takes(history)), Not(takes(linguistics))))) ::: (A)\nis_exception(is_sat(And(Not(takes(history)), Not(takes(music))))) ::: (B)\nis_exception(is_sat(And(Not(takes(history)), Not(takes(statistics))))) ::: (C)\nis_exception(is_sat(And(Not(takes(lingu"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_4_21",
    "context": "A student is choosing courses to take during a summer school session. Each summer school student must take at least three courses from among the following seven: history, linguistics, music, physics, statistics, theater, and writing. The summer school schedule restricts the courses a student can take in the following ways: If history is taken, then neither statistics nor music can be taken. If music is taken, then neither physics nor theater can be taken. If writing is taken, then neither physics nor statistics can be taken.",
    "question": "If the student takes music, then which one of the following must the student also take?",
    "answer": "E",
    "options": [
      "A) writing",
      "B) theater",
      "C) statistics",
      "D) physics",
      "E) linguistics"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([history, linguistics, music, physics, statistics, theater, writing])\ntakes = Function([courses] -> [bool])\nForAll([c:courses], And(takes(c) == true, takes(c) == false))\n\n# Constraints\nForAll([c:courses], Count([c:courses], takes(c)) >= 3) ::: Each summer school student must take at least three courses\nAnd(takes(history), Not(takes(statistics))) ::: If history is taken, then neither statistics nor music can be taken\nAnd(takes(history), Not(takes(music))) ::: If history is taken, then neither statistics nor music can be taken\nAnd(takes(music), Not(takes(physics))) ::: If music is taken, then neither physics nor theater can be taken\nAnd(takes(music), Not(takes(theater))) ::: If music is taken, then neither physics nor theater can be taken\nAnd(takes(writing), Not(takes(physics))) ::: If writing is taken, then neither physics nor statistics can be taken\nAnd(takes(writing), Not(takes(statistics))) ::: If writing is taken, then neither physics nor statistics can be taken\n\n# Options\nQuestion ::: If the student takes music, then which one of the following must the student also take?\nis_valid(Exists([c:courses], takes(c) == true)) ::: A) writing\nis_valid(Exists([c:courses], takes(c) == true)) ::: B) theater\nis_valid(Exists([c:courses], takes(c) == true)) ::: C) statistics\nis_valid(Exists([c:courses], takes(c) == true)) ::: D) physics\nis_valid(Exists([c:courses], takes(c) == true)) ::: E)"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_4_22",
    "context": "A student is choosing courses to take during a summer school session. Each summer school student must take at least three courses from among the following seven: history, linguistics, music, physics, statistics, theater, and writing. The summer school schedule restricts the courses a student can take in the following ways: If history is taken, then neither statistics nor music can be taken. If music is taken, then neither physics nor theater can be taken. If writing is taken, then neither physics nor statistics can be taken.",
    "question": "The student must take one or the other or both of",
    "answer": "B",
    "options": [
      "A) history or statistics",
      "B) linguistics or theater",
      "C) linguistics or writing",
      "D) music or physics",
      "E) theater or writing"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([history, linguistics, music, physics, statistics, theater, writing])\ntakes = Function([courses] -> [bool])\nForAll([c:courses], And(0 <= takes(c), takes(c) <= 1))\n\n# Constraints\nForAll([c:courses], Implies(takes(c), Count([c2:courses], takes(c2)) >= 3)) ::: Each summer school student must take at least three courses\nForAll([c:courses], Implies(takes(history), Not(takes(statistics)))) ::: If history is taken, then neither statistics nor music can be taken\nForAll([c:courses], Implies(takes(music), Not(takes(physics)))) ::: If music is taken, then neither physics nor theater can be taken\nForAll([c:courses], Implies(takes(writing), Not(takes(physics)))) ::: If writing is taken, then neither physics nor statistics can be taken\n\n# Options\nQuestion ::: The student must take one or the other or both of\nis_sat(ForAll([c:courses], Implies(takes(c), Or(takes(history), takes(statistics))))) ::: A) history or statistics\nis_sat(ForAll([c:courses], Implies(takes(c), Or(takes(linguistics), takes(theater))))) ::: B) linguistics or theater\nis_sat(ForAll([c:courses], Implies(takes(c), Or(takes(linguistics), takes(writing))))) ::: C) linguistics or writing\nis_sat(ForAll([c:courses], Implies(takes(c), Or(takes(music), takes(physics))))) ::: D) music or physics\nis_sat(ForAll([c:courses], Implies(takes(c), Or(takes(theater), takes(writing))))) ::: E) theater or writing\n------"
    ]
  },
  {
    "id": "ar_lsat_200909_3-G_4_23",
    "context": "A student is choosing courses to take during a summer school session. Each summer school student must take at least three courses from among the following seven: history, linguistics, music, physics, statistics, theater, and writing. The summer school schedule restricts the courses a student can take in the following ways: If history is taken, then neither statistics nor music can be taken. If music is taken, then neither physics nor theater can be taken. If writing is taken, then neither physics nor statistics can be taken.",
    "question": "Which one of the following, if substituted for the restriction that if music is taken, then neither physics nor theater can be taken, would have the same effect in determining which courses the student can take?",
    "answer": "B",
    "options": [
      "A) If music is taken, then either statistics or writing must also be taken.",
      "B) The only courses that are eligible to be taken together with music are linguistics, statistics, and writing.",
      "C) The only courses that are eligible to be taken together with physics are history and linguistics.",
      "D) The only courses that are eligible to be taken together with theater are history, linguistics, and writing.",
      "E) If both physics and theater are taken, then music cannot be taken."
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([history, linguistics, music, physics, statistics, theater, writing])\ntakes = Function([courses] -> [bool])\nForAll([c:courses], And(1 <= takes(c), takes(c) <= 1))\n\n# Constraints\nForAll([c:courses], takes(c) >= 3) ::: Each summer school student must take at least three courses\nAnd(takes(history), Not(takes(statistics))) ::: If history is taken, then neither statistics nor music can be taken\nAnd(takes(history), Not(takes(music))) ::: If history is taken, then neither statistics nor music can be taken\nAnd(takes(music), Not(takes(physics))) ::: If music is taken, then neither physics nor theater can be taken\nAnd(takes(music), Not(takes(theater))) ::: If music is taken, then neither physics nor theater can be taken\nAnd(takes(writing), Not(takes(physics))) ::: If writing is taken, then neither physics nor statistics can be taken\nAnd(takes(writing), Not(takes(statistics))) ::: If writing is taken, then neither physics nor statistics can be taken\n\n# Options\nQuestion ::: Which one of the following, if substituted for the restriction that if music is taken, then neither physics nor theater can be taken, would have the same effect in determining which courses the student can take?\nis_sat(ForAll([c:courses], And(takes(music), takes(statistics) == takes(writing)))) ::: (A)\nis_sat(ForAll([c:courses], And(takes(music), Not(takes(physics)), Not(takes(theater)), Not(takes(writing))))) ::: (B)\nis_sat(ForAll([c:courses], And(takes(physics), Not(takes(history)), Not(takes(linguistics))))) ::: (C)\nis_sat(ForAll"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_1_1",
    "context": "A law firm has seven departments—family law, health law, injury law, labor law, probate, securities, and tax law. The firm is to occupy a building with three floors—the bottom floor, the middle floor, and the top floor. Each floor can accommodate up to four departments, and no department is to be on more than one floor. Assignment of departments to floors is subject to the following constraints: Probate must be on the same floor as tax law. Health law must be on the floor immediately above injury law. Labor law must occupy an entire floor by itself.",
    "question": "Which one of the following could be the assignment of departments to floors?",
    "answer": "C",
    "options": [
      "A) top floor: labor law middle floor: injury law, probate, tax law bottom floor: family law, health law, securities",
      "B) top floor: family law, health law, probate middle floor: injury law, securities, tax law bottom floor: labor law",
      "C) top floor: health law, probate, tax law middle floor: family law, injury law, securities bottom floor: labor law",
      "D) top floor: health law, probate, tax law middle floor: injury law, securities bottom floor: family law, labor law",
      "E) top floor: family law, health law, probate, tax law middle floor: labor law bottom floor: injury law, securities"
    ],
    "raw_logic_programs": [
      "# Declarations\ndepartments = EnumSort([family_law, health_law, injury_law, labor_law, probate, securities, tax_law])\nfloors = EnumSort([bottom_floor, middle_floor, top_floor])\non_floor = Function([departments, floors] -> [bool])\n\n# Constraints\nForAll([d:departments], Count([f:floors], on_floor(d, f)) == 1) ::: no department is to be on more than one floor\nAnd(on_floor(probate, f), on_floor(tax_law, f)) ::: Probate must be on the same floor as tax law\nAnd(on_floor(health_law, f), on_floor(injury_law, f - 1)) ::: Health law must be on the floor immediately above injury law\nAnd(on_floor(labor_law, f), Count([d:departments], on_floor(d, f)) == 1) ::: Labor law must occupy an entire floor by itself\n\n# Options\nQuestion ::: Which one of the following could be the assignment of departments to floors?\nis_sat(And(on_floor(labor_law, top_floor), on_floor(injury_law, middle_floor), on_floor(probate, top_floor), on_floor(tax_law, top_floor), on_floor(family_law, bottom_floor), on_floor(health_law, top_floor), on_floor(securities, bottom_floor))) ::: A) top floor: labor law middle floor: injury law, probate, tax law bottom floor: family law, health law, securities\nis_sat(And(on_floor(labor_law, bottom_floor), on_floor(injury_law, middle_floor), on_floor(probate, middle_floor), on_floor(tax_law, middle_floor), on_floor(family_law, top_floor), on_"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_1_2",
    "context": "A law firm has seven departments—family law, health law, injury law, labor law, probate, securities, and tax law. The firm is to occupy a building with three floors—the bottom floor, the middle floor, and the top floor. Each floor can accommodate up to four departments, and no department is to be on more than one floor. Assignment of departments to floors is subject to the following constraints: Probate must be on the same floor as tax law. Health law must be on the floor immediately above injury law. Labor law must occupy an entire floor by itself.",
    "question": "If injury law and probate are both assigned to the middle floor, which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Family law is assigned to the middle floor.",
      "B) Health law is assigned to the middle floor.",
      "C) Labor law is assigned to the top floor.",
      "D) Securities is assigned to the bottom floor.",
      "E) Tax law is assigned to the top floor."
    ],
    "raw_logic_programs": [
      "# Declarations\ndepartments = EnumSort([family_law, health_law, injury_law, labor_law, probate, securities, tax_law])\nfloors = EnumSort([bottom_floor, middle_floor, top_floor])\nassigned = Function([departments, floors] -> [bool])\n\n# Constraints\nForAll([d:departments], Count([f:floors], assigned(d, f)) == 1) ::: no department is to be on more than one floor\nForAll([f:floors], Count([d:departments], assigned(d, f)) <= 4) ::: each floor can accommodate up to four departments\nassigned(probate, f) == assigned(tax_law, f) ::: Probate must be on the same floor as tax law\nassigned(health_law, f) > assigned(injury_law, f) ::: Health law must be on the floor immediately above injury law\nForAll([d:departments], Implies(d!= labor_law, Count([f:floors], assigned(d, f)) < 4)) ::: Labor law must occupy an entire floor by itself\nassigned(injury_law, middle_floor) ::: injury law and probate are both assigned to the middle floor\n\n# Options\nQuestion ::: If injury law and probate are both assigned to the middle floor, which one of the following could be true?\nis_valid(Exists([d:departments], d == family_law, assigned(d, middle_floor))) ::: A) Family law is assigned to the middle floor.\nis_valid(Exists([d:departments], d == health_law, assigned(d, middle_floor))) ::: B) Health law is assigned to the middle floor.\nis_valid(Exists([d:departments], d == labor_law, assigned(d, top_floor))) ::: C) Labor law is assigned to the top floor.\nis_valid(Exists([d:departments], d =="
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_1_3",
    "context": "A law firm has seven departments—family law, health law, injury law, labor law, probate, securities, and tax law. The firm is to occupy a building with three floors—the bottom floor, the middle floor, and the top floor. Each floor can accommodate up to four departments, and no department is to be on more than one floor. Assignment of departments to floors is subject to the following constraints: Probate must be on the same floor as tax law. Health law must be on the floor immediately above injury law. Labor law must occupy an entire floor by itself.",
    "question": "Which one of the following CANNOT be the assignment for any of the floors?",
    "answer": "C",
    "options": [
      "A) family law, health law, probate, and tax law",
      "B) family law, injury law, probate, and tax law",
      "C) family law, probate, securities, and tax law",
      "D) health law, probate, securities, and tax law",
      "E) injury law, probate, securities, and tax law"
    ],
    "raw_logic_programs": [
      "# Declarations\ndepartments = EnumSort([family_law, health_law, injury_law, labor_law, probate, securities, tax_law])\nfloors = EnumSort([bottom, middle, top])\non_floor = Function([departments, floors] -> [bool])\n\n# Constraints\nForAll([d:departments], Count([f:floors], on_floor(d, f)) == 1) ::: no department is to be on more than one floor\nForAll([f:floors], Count([d:departments], on_floor(d, f)) <= 4) ::: each floor can accommodate up to four departments\non_floor(probate, f) == on_floor(tax_law, f) ::: Probate must be on the same floor as tax law\non_floor(health_law, f) > on_floor(injury_law, f) ::: Health law must be on the floor immediately above injury law\nForAll([d:departments], Implies(d!= labor_law, Count([f:floors], on_floor(d, f)) < 4)) ::: Labor law must occupy an entire floor by itself\n\n# Options\nQuestion ::: Which one of the following CANNOT be the assignment for any of the floors?\nis_exception(is_sat(on_floor(family_law, f) && on_floor(health_law, f) && on_floor(probate, f) && on_floor(tax_law, f))) ::: A) family law, health law, probate, and tax law\nis_exception(is_sat(on_floor(family_law, f) && on_floor(injury_law, f) && on_floor(probate, f) && on_floor(tax_law, f))) ::: B) family law, injury law, probate, and tax law\nis_exception(is_sat(on_floor(family_law, f) && on"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_1_4",
    "context": "A law firm has seven departments—family law, health law, injury law, labor law, probate, securities, and tax law. The firm is to occupy a building with three floors—the bottom floor, the middle floor, and the top floor. Each floor can accommodate up to four departments, and no department is to be on more than one floor. Assignment of departments to floors is subject to the following constraints: Probate must be on the same floor as tax law. Health law must be on the floor immediately above injury law. Labor law must occupy an entire floor by itself.",
    "question": "If family law is assigned to the same floor as securities, which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Exactly one department is assigned to the middle floor.",
      "B) Exactly four departments are assigned to the middle floor.",
      "C) Exactly two departments are assigned to the bottom floor.",
      "D) Exactly three departments are assigned to the bottom floor.",
      "E) Exactly four departments are assigned to the bottom floor."
    ],
    "raw_logic_programs": [
      "# Declarations\ndepartments = EnumSort([family_law, health_law, injury_law, labor_law, probate, securities, tax_law])\nfloors = EnumSort([bottom, middle, top])\nassigned = Function([departments, floors] -> [bool])\n\n# Constraints\nForAll([d:departments], Count([f:floors], assigned(d, f)) == 1) ::: no department is to be on more than one floor\nForAll([f:floors], Count([d:departments], assigned(d, f)) <= 4) ::: each floor can accommodate up to four departments\nassigned(probate, f) == assigned(tax_law, f) ::: Probate must be on the same floor as tax law\nassigned(health_law, f) == assigned(injury_law, f) ::: Health law must be on the floor immediately above injury law\nassigned(labor_law, f) == assigned(labor_law, f) ::: Labor law must occupy an entire floor by itself\nassigned(family_law, f) == assigned(securities, f) ::: family law is assigned to the same floor as securities\n\n# Options\nQuestion ::: If family law is assigned to the same floor as securities, which one of the following could be true?\nis_valid(Exists([f:floors], Count([d:departments], assigned(d, f)) == 1))) ::: A) Exactly one department is assigned to the middle floor.\nis_valid(Exists([f:floors], Count([d:departments], assigned(d, f)) == 4))) ::: B) Exactly four departments are assigned to the middle floor.\nis_valid(Exists([f:floors], Count([d:departments], assigned(d, f)) == 2))) ::: C) Exactly two departments are assigned to the bottom floor.\nis_valid(Exists([f:floors"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_1_5",
    "context": "A law firm has seven departments—family law, health law, injury law, labor law, probate, securities, and tax law. The firm is to occupy a building with three floors—the bottom floor, the middle floor, and the top floor. Each floor can accommodate up to four departments, and no department is to be on more than one floor. Assignment of departments to floors is subject to the following constraints: Probate must be on the same floor as tax law. Health law must be on the floor immediately above injury law. Labor law must occupy an entire floor by itself.",
    "question": "If probate is assigned to the middle floor along with exactly two other departments, then which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Family law is assigned to the floor immediately above health law.",
      "B) Family law is assigned to the floor immediately below labor law.",
      "C) Family law is assigned to the same floor as securities.",
      "D) Probate is assigned to the same floor as health law.",
      "E) Probate is assigned to the same floor as injury law."
    ],
    "raw_logic_programs": [
      "# Declarations\ndepartments = EnumSort([family_law, health_law, injury_law, labor_law, probate, securities, tax_law])\nfloors = EnumSort([bottom_floor, middle_floor, top_floor])\nassigned = Function([departments, floors] -> [bool])\n\n# Constraints\nForAll([d:departments], Count([f:floors], assigned(d, f)) == 1) ::: no department is to be on more than one floor\nForAll([f:floors], Count([d:departments], assigned(d, f)) <= 4) ::: each floor can accommodate up to four departments\nassigned(probate, middle_floor) ::: probate is assigned to the middle floor\nAnd(assigned(probate, middle_floor), Count([d:departments], And(d!= probate, assigned(d, middle_floor))) == 2) ::: along with exactly two other departments\nassigned(health_law, f) ::: health law must be on the floor immediately above injury law\nassigned(labor_law, f) ::: labor law must occupy an entire floor by itself\n\n# Options\nQuestion ::: If probate is assigned to the middle floor along with exactly two other departments, then which one of the following must be true?\nis_valid(Exists([f:floors], And(assigned(family_law, f), assigned(health_law, f)))) ::: A) Family law is assigned to the floor immediately above health law.\nis_valid(Exists([f:floors], And(assigned(family_law, f), assigned(labor_law, f)))) ::: B) Family law is assigned to the floor immediately below labor law.\nis_valid(Exists([f:floors], And(assigned(family_law, f), assigned(securities, f)))) ::: C) Family law is assigned to the same floor as securities.\nis_valid(Exists([f:flo"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_2_6",
    "context": "A museum curator is arranging seven photographs—Fence, Gardenias, Hibiscus, Irises, Katydid, Lotus, and Magnolia—on a gallery wall in accordance with the photographer's requirements. The photographs are to be hung along the wall in a row, in seven positions sequentially numbered from first to seventh. The photographer's requirements are as follows: Gardenias must be immediately before Katydid. Hibiscus must be somewhere before Katydid but cannot be the first photograph. Irises and Lotus must be next to one another. Magnolia must be one of the first three photographs. Fence must be either first or seventh.",
    "question": "Which one of the following could be the positions, from first to seventh, in which the photographs are hung?",
    "answer": "C",
    "options": [
      "A) Fence, Hibiscus, Gardenias, Magnolia, Katydid, Irises, Lotus",
      "B) Hibiscus, Magnolia, Gardenias, Katydid, Irises, Lotus, Fence",
      "C) Irises, Lotus, Magnolia, Hibiscus, Gardenias, Katydid, Fence",
      "D) Lotus, Magnolia, Irises, Hibiscus, Gardenias, Katydid, Fence",
      "E) Magnolia, Fence, Hibiscus, Gardenias, Katydid, Lotus, Irises"
    ],
    "raw_logic_programs": [
      "# Declarations\nphotographs = EnumSort([Fence, Gardenias, Hibiscus, Irises, Katydid, Lotus, Magnolia])\npositions = EnumSort([1, 2, 3, 4, 5, 6, 7])\nhung = Function([photographs, positions] -> [photographs])\n\n# Constraints\nForAll([p:photographs], And(1 <= hung(p, 1), hung(p, 1) <= 7)) ::: the photographs are to be hung along the wall in a row, in seven positions sequentially numbered from first to seventh\nDistinct([p:photographs], hung(p, 1)) ::: Gardenias must be immediately before Katydid\nAnd(hung(Hibiscus, 1) < hung(Katydid, 1), hung(Hibiscus, 1) > 1) ::: Hibiscus must be somewhere before Katydid but cannot be the first photograph\nAnd(hung(Irises, 1) == hung(Lotus, 1) - 1, hung(Irises, 1) == hung(Lotus, 1) + 1) ::: Irises and Lotus must be next to one another\nAnd(hung(Magnolia, 1) <= 3, hung(Magnolia, 1) > 1) ::: Magnolia must be one of the first three photographs\nAnd(hung(Fence, 1) == 1, hung(Fence, 1) == 7) ::: Fence must be either first or seventh\n\n# Options\nQuestion ::: Which one of the following could be the positions, from first to seventh, in which the photographs are hung?\nis_sat(hung(Fence, 1) == 1, hung(Hibiscus, 1) == 3, hung(Gardenias, 1) == 4, hung(Magnolia, 1) == 2, hung("
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_2_7",
    "context": "A museum curator is arranging seven photographs—Fence, Gardenias, Hibiscus, Irises, Katydid, Lotus, and Magnolia—on a gallery wall in accordance with the photographer's requirements. The photographs are to be hung along the wall in a row, in seven positions sequentially numbered from first to seventh. The photographer's requirements are as follows: Gardenias must be immediately before Katydid. Hibiscus must be somewhere before Katydid but cannot be the first photograph. Irises and Lotus must be next to one another. Magnolia must be one of the first three photographs. Fence must be either first or seventh.",
    "question": "If Irises is immediately before Gardenias, which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Gardenias is fourth.",
      "B) Hibiscus is fourth.",
      "C) Irises is third.",
      "D) Lotus is second.",
      "E) Magnolia is third."
    ],
    "raw_logic_programs": [
      "# Declarations\nphotos = EnumSort([Fence, Gardenias, Hibiscus, Irises, Katydid, Lotus, Magnolia])\npositions = EnumSort([1, 2, 3, 4, 5, 6, 7])\narranged = Function([photos, positions] -> [photos])\n\n# Constraints\nForAll([p:photos], Count([p:photos], arranged(p, p)) == 1) ::: each photograph is arranged in exactly one position\nForAll([p:photos], Count([p:photos], arranged(p, p)) == 1) ::: each position is arranged with exactly one photograph\nAnd(arranged(Gardenias, p), arranged(Katydid, q), p < q) ::: Gardenias must be immediately before Katydid\nAnd(arranged(Hibiscus, p), Not(arranged(Hibiscus, 1)), Not(arranged(Hibiscus, Katydid))) ::: Hibiscus must be somewhere before Katydid but cannot be the first photograph\nAnd(arranged(Irises, p), arranged(Lotus, q), p == q - 1) ::: Irises and Lotus must be next to one another\nAnd(arranged(Magnolia, p), p <= 3) ::: Magnolia must be one of the first three photographs\nAnd(arranged(Fence, p), p == 1, p == 7) ::: Fence must be either first or seventh\n\n# Options\nQuestion ::: If Irises is immediately before Gardenias, which one of the following could be true?\nis_exception(is_sat(arranged(Gardenias, 4))) ::: A) Gardenias is fourth.\nis_exception(is_sat(arranged(Hibiscus, 4))) ::: B) Hibiscus is fourth.\nis_exception(is_sat(arranged(Irises, 3))) ::: C) Irises is third"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_2_8",
    "context": "A museum curator is arranging seven photographs—Fence, Gardenias, Hibiscus, Irises, Katydid, Lotus, and Magnolia—on a gallery wall in accordance with the photographer's requirements. The photographs are to be hung along the wall in a row, in seven positions sequentially numbered from first to seventh. The photographer's requirements are as follows: Gardenias must be immediately before Katydid. Hibiscus must be somewhere before Katydid but cannot be the first photograph. Irises and Lotus must be next to one another. Magnolia must be one of the first three photographs. Fence must be either first or seventh.",
    "question": "Where each photograph is hung is fully determined if which one of the following is true?",
    "answer": "D",
    "options": [
      "A) Gardenias is fourth.",
      "B) Hibiscus is second.",
      "C) Irises is second.",
      "D) Lotus is first.",
      "E) Magnolia is third."
    ],
    "raw_logic_programs": [
      "# Declarations\nphotos = EnumSort([Fence, Gardenias, Hibiscus, Irises, Katydid, Lotus, Magnolia])\npositions = EnumSort([1, 2, 3, 4, 5, 6, 7])\nhung = Function([photos, positions] -> [bool])\n\n# Constraints\nForAll([p:photos], Count([p:photos], hung(p, p)) == 1) ::: each photograph is hung in exactly one position\nAnd(hung(Gardenias, p), hung(Katydid, q), p < q) ::: Gardenias must be immediately before Katydid\nAnd(hung(Hibiscus, p), Not(hung(Hibiscus, 1))) ::: Hibiscus must be somewhere before Katydid but cannot be the first photograph\nAnd(hung(Irises, p), hung(Lotus, q), p == q - 1) ::: Irises and Lotus must be next to one another\nAnd(hung(Magnolia, p), Or(p == 1, p == 2, p == 3)) ::: Magnolia must be one of the first three photographs\nAnd(hung(Fence, p), Or(p == 1, p == 7)) ::: Fence must be either first or seventh\n\n# Options\nQuestion ::: Where each photograph is hung is fully determined if which one of the following is true?\nis_sat(ForAll([p:photos], Count([p:photos], hung(p, p)) == 1)) ::: A) Gardenias is fourth.\nis_sat(ForAll([p:photos], Count([p:photos], hung(p, p)) == 1)) ::: B) Hibiscus is second.\nis_sat(ForAll([p:photos], Count([p:photos], hung(p, p)) == 1)) ::: C) Irises is second.\nis_sat(ForAll([p:photos"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_2_9",
    "context": "A museum curator is arranging seven photographs—Fence, Gardenias, Hibiscus, Irises, Katydid, Lotus, and Magnolia—on a gallery wall in accordance with the photographer's requirements. The photographs are to be hung along the wall in a row, in seven positions sequentially numbered from first to seventh. The photographer's requirements are as follows: Gardenias must be immediately before Katydid. Hibiscus must be somewhere before Katydid but cannot be the first photograph. Irises and Lotus must be next to one another. Magnolia must be one of the first three photographs. Fence must be either first or seventh.",
    "question": "If Magnolia is second, which one of the following CANNOT be true?",
    "answer": "B",
    "options": [
      "A) Hibiscus is third.",
      "B) Hibiscus is fourth.",
      "C) Hibiscus is fifth.",
      "D) Gardenias is fourth.",
      "E) Gardenias is sixth."
    ],
    "raw_logic_programs": [
      "# Declarations\nphotos = EnumSort([Fence, Gardenias, Hibiscus, Irises, Katydid, Lotus, Magnolia])\npositions = EnumSort([1, 2, 3, 4, 5, 6, 7])\narranged = Function([photos, positions] -> [photos])\n\n# Constraints\nForAll([p:photos], Count([p:photos], arranged(p, p)) == 1) ::: each photograph is arranged in exactly one position\nAnd(arranged(Gardenias, p), arranged(Katydid, q), p < q) ::: Gardenias must be immediately before Katydid\nAnd(arranged(Hibiscus, p), Not(arranged(Hibiscus, 1)), Not(arranged(Hibiscus, Katydid))) ::: Hibiscus must be somewhere before Katydid but cannot be the first photograph\nAnd(arranged(Irises, p), arranged(Lotus, q), p == q - 1) ::: Irises and Lotus must be next to one another\nAnd(arranged(Magnolia, p), p == 1, p == 2, p == 3) ::: Magnolia must be one of the first three photographs\nAnd(arranged(Fence, p), p == 1, p == 7) ::: Fence must be either first or seventh\n\n# Options\nQuestion ::: If Magnolia is second, which one of the following CANNOT be true?\nis_exception(is_sat(arranged(Hibiscus, 3))) ::: A) Hibiscus is third.\nis_exception(is_sat(arranged(Hibiscus, 4))) ::: B) Hibiscus is fourth.\nis_exception(is_sat(arranged(Hibiscus, 5))) ::: C) Hibiscus is fifth.\nis_exception(is_sat(arranged(Gardenias, 4))) ::: D) Gardenias is fourth.\nis_exception(is_sat(arranged(Gardenias, 6))) ::: E) Gardenias is sixth.\n------"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_2_10",
    "context": "A museum curator is arranging seven photographs—Fence, Gardenias, Hibiscus, Irises, Katydid, Lotus, and Magnolia—on a gallery wall in accordance with the photographer's requirements. The photographs are to be hung along the wall in a row, in seven positions sequentially numbered from first to seventh. The photographer's requirements are as follows: Gardenias must be immediately before Katydid. Hibiscus must be somewhere before Katydid but cannot be the first photograph. Irises and Lotus must be next to one another. Magnolia must be one of the first three photographs. Fence must be either first or seventh.",
    "question": "Which one of the following, if substituted for the condition that Hibiscus must be hung somewhere before Katydid but cannot be the first photograph, would have the same effect in determining the arrangement of the photographs?",
    "answer": "D",
    "options": [
      "A) If Fence is seventh, Hibiscus is second.",
      "B) Gardenias is somewhere after Hibiscus, and either Fence or Magnolia is first.",
      "C) Hibiscus must be somewhere between the first and sixth photographs.",
      "D) Unless Hibiscus is second, it must be somewhere between Magnolia and Gardenias.",
      "E) Katydid is somewhere after Hibiscus, which must be somewhere after Fence."
    ],
    "raw_logic_programs": [
      "# Declarations\nphotographs = EnumSort([Fence, Gardenias, Hibiscus, Irises, Katydid, Lotus, Magnolia])\npositions = EnumSort([1, 2, 3, 4, 5, 6, 7])\nhung = Function([photographs, positions] -> [photographs])\n\n# Constraints\nForAll([p:photographs], Count([p:photographs], hung(p, p)) == 1) ::: each photograph is hung in exactly one position\nAnd(hung(Gardenias, p), hung(Katydid, q), p < q) ::: Gardenias must be immediately before Katydid\nAnd(hung(Hibiscus, p), p!= 1) ::: Hibiscus must be somewhere before Katydid but cannot be the first photograph\nAnd(hung(Irises, p), hung(Lotus, q), p == q + 1) ::: Irises and Lotus must be next to one another\nAnd(hung(Magnolia, p), p <= 3) ::: Magnolia must be one of the first three photographs\nAnd(hung(Fence, p), p == 1 || p == 7) ::: Fence must be either first or seventh\n\n# Options\nQuestion ::: Which one of the following, if substituted for the condition that Hibiscus must be hung somewhere before Katydid but cannot be the first photograph, would have the same effect in determining the arrangement of the photographs?\nis_sat(ForAll([p:photographs], hung(p, p))) ::: A) If Fence is seventh, Hibiscus is second.\nis_sat(ForAll([p:photographs], hung(p, p))) ::: B) Gardenias is somewhere after Hibiscus, and either Fence or Magnolia is first.\nis_sat(ForAll([p:photographs], hung(p, p))) ::: C) Hibiscus must be somewhere between the first and sixth photographs.\nis_sat(ForAll([p:photographs], hung(p, p))) ::: D)"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_3_11",
    "context": "Alicia will take exactly four courses this semester. She must choose from the following seven courses—Geography, Japanese, Macroeconomics, Psychology, Russian, Statistics (which is offered twice, once each on Tuesdays at 9 A.M. and 3 P.M.), and World History. No one is allowed to take any course more than once per semester. Because of university requirements and time conflicts, the following restrictions apply to Alicia's choices: She must take Japanese if she does not take Russian. She cannot take Japanese if she takes Macroeconomics. She cannot take World History if she takes Statistics at 9 A.M. She must take Statistics at 9 A.M. if she takes Psychology. She must take either Geography or World History but cannot take both.",
    "question": "Which one of the following could be the list of the four courses Alicia takes?",
    "answer": "D",
    "options": [
      "A) Geography, Japanese, Psychology, Russian",
      "B) Geography, Macroeconomics, Psychology, Statistics",
      "C) Geography, Japanese, Macroeconomics, Russian",
      "D) Geography, Psychology, Russian, Statistics",
      "E) Macroeconomics, Psychology, Russian, Statistics"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([Geography, Japanese, Macroeconomics, Psychology, Russian, Statistics, WorldHistory])\ntakes = Function([courses] -> [bool])\nForAll([c:courses], And(0 <= takes(c), takes(c) <= 1))\n\n# Constraints\nCount([c:courses], takes(c)) == 4 ::: Alicia will take exactly four courses this semester\nAnd(takes(Japanese), Not(takes(Russian))) ::: She must take Japanese if she does not take Russian\nAnd(Not(takes(Japanese)), takes(Macroeconomics)) ::: She cannot take Japanese if she takes Macroeconomics\nAnd(takes(WorldHistory), Not(takes(Statistics, 9))) ::: She cannot take World History if she takes Statistics at 9 A.M.\nAnd(takes(Psychology), takes(Statistics, 9)) ::: She must take Statistics at 9 A.M. if she takes Psychology\nAnd(takes(Geography), takes(WorldHistory)) ::: She must take either Geography or World History but cannot take both\n\n# Options\nQuestion ::: Which one of the following could be the list of the four courses Alicia takes?\nis_valid(And(takes(Geography), takes(Japanese), takes(Psychology), takes(Russian))) ::: A) Geography, Japanese, Psychology, Russian\nis_valid(And(takes(Geography), takes(Macroeconomics), takes(Psychology), takes(Statistics, 9))) ::: B) Geography, Macroeconomics, Psychology, Statistics\nis_valid(And(takes(Geography), takes(Japanese), takes(Macroeconomics), takes(Russian))) ::: C) Geography, Japanese, Macroeconomics, Russian\nis_valid(And(takes(Geography), takes(Psychology), takes(Russian), takes(Statistics, 9))) ::: D) Geography, Psychology, Russian, Statistics\nis_valid(And(takes(Macroeconomics), takes(Psychology), takes(Russian), takes(Statistics, 9"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_3_12",
    "context": "Alicia will take exactly four courses this semester. She must choose from the following seven courses—Geography, Japanese, Macroeconomics, Psychology, Russian, Statistics (which is offered twice, once each on Tuesdays at 9 A.M. and 3 P.M.), and World History. No one is allowed to take any course more than once per semester. Because of university requirements and time conflicts, the following restrictions apply to Alicia's choices: She must take Japanese if she does not take Russian. She cannot take Japanese if she takes Macroeconomics. She cannot take World History if she takes Statistics at 9 A.M. She must take Statistics at 9 A.M. if she takes Psychology. She must take either Geography or World History but cannot take both.",
    "question": "Which one of the following could be an accurate list of three of the courses Alicia takes?",
    "answer": "E",
    "options": [
      "A) Geography, Statistics, World History",
      "B) Japanese, Macroeconomics, Statistics",
      "C) Japanese, Psychology, World History",
      "D) Psychology, Russian, World History",
      "E) Russian, Statistics, World History"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([Geography, Japanese, Macroeconomics, Psychology, Russian, Statistics, WorldHistory])\ntakes = Function([courses] -> [bool])\nForAll([c:courses], And(takes(c), 1 <= Count([c:courses], takes(c)) <= 4))\n\n# Constraints\nForAll([c:courses], Implies(takes(Japanese), Not(takes(Russian)))) ::: She must take Japanese if she does not take Russian\nForAll([c:courses], Implies(takes(Japanese), Not(takes(Macroeconomics)))) ::: She cannot take Japanese if she takes Macroeconomics\nForAll([c:courses], Implies(takes(WorldHistory), Not(takes(Statistics, 9)))) ::: She cannot take World History if she takes Statistics at 9 A.M.\nForAll([c:courses], Implies(takes(Psychology), takes(Statistics, 9))) ::: She must take Statistics at 9 A.M. if she takes Psychology\nForAll([c:courses], Implies(takes(Geography), Not(takes(WorldHistory)))) ::: She must take either Geography or World History but cannot take both\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of three of the courses Alicia takes?\nis_valid(And(takes(Geography), takes(Statistics, 9), takes(WorldHistory))) ::: A) Geography, Statistics, World History\nis_valid(And(takes(Japanese), takes(Macroeconomics), takes(Statistics, 3))) ::: B) Japanese, Macroeconomics, Statistics\nis_valid(And(takes(Japanese), takes(Psychology), takes(WorldHistory))) ::: C) Japanese, Psychology, World History\nis_valid(And(takes(Psychology), takes(Russian), takes(WorldHistory))) ::: D) Psychology, Russian, World History\nis_valid(And(takes(Russian), takes(Statistics, 3), takes(WorldHistory))) ::: E) Russian, Statistics, World"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_3_13",
    "context": "Alicia will take exactly four courses this semester. She must choose from the following seven courses—Geography, Japanese, Macroeconomics, Psychology, Russian, Statistics (which is offered twice, once each on Tuesdays at 9 A.M. and 3 P.M.), and World History. No one is allowed to take any course more than once per semester. Because of university requirements and time conflicts, the following restrictions apply to Alicia's choices: She must take Japanese if she does not take Russian. She cannot take Japanese if she takes Macroeconomics. She cannot take World History if she takes Statistics at 9 A.M. She must take Statistics at 9 A.M. if she takes Psychology. She must take either Geography or World History but cannot take both.",
    "question": "Which courses Alicia takes is fully determined if she takes Russian and which one of the following?",
    "answer": "C",
    "options": [
      "A) World History",
      "B) Statistics",
      "C) Psychology",
      "D) Macroeconomics",
      "E) Japanese"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([Geography, Japanese, Macroeconomics, Psychology, Russian, Statistics, WorldHistory])\ntakes = Function([courses] -> [bool])\nForAll([c:courses], Count([t:takes], t == true) <= 1) ::: No one is allowed to take any course more than once per semester\n\n# Constraints\nForAll([c:courses], Count([t:takes], t == true) >= 4) ::: Alicia will take exactly four courses this semester\nImplies(takes(Japanese), Not(takes(Russian))) ::: She must take Japanese if she does not take Russian\nImplies(takes(Japanese), Not(takes(Macroeconomics))) ::: She cannot take Japanese if she takes Macroeconomics\nImplies(takes(WorldHistory), Not(takes(Statistics))) ::: She cannot take World History if she takes Statistics at 9 A.M.\nImplies(takes(Psychology), takes(Statistics)) ::: She must take Statistics at 9 A.M. if she takes Psychology\nImplies(takes(Geography), Not(takes(WorldHistory))) ::: She must take either Geography or World History but cannot take both\n\n# Options\nQuestion ::: Which courses Alicia takes is fully determined if she takes Russian and which one of the following?\nis_sat(ForAll([c:courses], Count([t:takes], t == true) == 4)) ::: (A)\nis_sat(ForAll([c:courses], Count([t:takes], t == true) == 4)) ::: (B)\nis_sat(ForAll([c:courses], Count([t:takes], t == true) == 4)) ::: (C)\nis_sat(ForAll([c:courses], Count([t:takes], t == true) == 4)) ::: (D)\nis_sat(ForAll([c:courses], Count([t:takes], t == true) == 4)) ::: (E)\n------\nProblem:\nA company has exactly six employees—F, G, H"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_3_14",
    "context": "Alicia will take exactly four courses this semester. She must choose from the following seven courses—Geography, Japanese, Macroeconomics, Psychology, Russian, Statistics (which is offered twice, once each on Tuesdays at 9 A.M. and 3 P.M.), and World History. No one is allowed to take any course more than once per semester. Because of university requirements and time conflicts, the following restrictions apply to Alicia's choices: She must take Japanese if she does not take Russian. She cannot take Japanese if she takes Macroeconomics. She cannot take World History if she takes Statistics at 9 A.M. She must take Statistics at 9 A.M. if she takes Psychology. She must take either Geography or World History but cannot take both.",
    "question": "Alicia could take Statistics at either of the available times if she takes which one of the following pairs of courses?",
    "answer": "A",
    "options": [
      "A) Geography and Japanese",
      "B) Geography and Psychology",
      "C) Japanese and World History",
      "D) Psychology and Russian",
      "E) Russian and World History"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([Geography, Japanese, Macroeconomics, Psychology, Russian, Statistics, WorldHistory])\ntimes = EnumSort([9AM, 3PM])\ntakes = Function([courses, times] -> [bool])\n\n# Constraints\nForAll([c:courses], Count([t:times], takes(c, t)) <= 1) ::: No one is allowed to take any course more than once per semester\nAnd(takes(Japanese, _), Not(takes(Russian, _))) ::: She must take Japanese if she does not take Russian\nAnd(takes(Macroeconomics, _), Not(takes(Japanese, _))) ::: She cannot take Japanese if she takes Macroeconomics\nAnd(takes(WorldHistory, _), Not(takes(Statistics, 9AM))) ::: She cannot take World History if she takes Statistics at 9 A.M\nAnd(takes(Psychology, _), takes(Statistics, 9AM)) ::: She must take Statistics at 9 A.M. if she takes Psychology\nAnd(takes(Geography, _), takes(WorldHistory, _)) ::: She must take either Geography or World History but cannot take both\n\n# Options\nQuestion ::: Alicia could take Statistics at either of the available times if she takes which one of the following pairs of courses?\nis_sat(And(takes(Geography, _), takes(Japanese, _))) ::: (A)\nis_sat(And(takes(Geography, _), takes(Psychology, _))) ::: (B)\nis_sat(And(takes(Japanese, _), takes(WorldHistory, _))) ::: (C)\nis_sat(And(takes(Psychology, _), takes(Russian, _))) ::: (D)\nis_sat(And(takes(Russian, _), takes(WorldHistory, _))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is assigned to one of the following four departments: accounting, engineering, human resources, and market"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_3_15",
    "context": "Alicia will take exactly four courses this semester. She must choose from the following seven courses—Geography, Japanese, Macroeconomics, Psychology, Russian, Statistics (which is offered twice, once each on Tuesdays at 9 A.M. and 3 P.M.), and World History. No one is allowed to take any course more than once per semester. Because of university requirements and time conflicts, the following restrictions apply to Alicia's choices: She must take Japanese if she does not take Russian. She cannot take Japanese if she takes Macroeconomics. She cannot take World History if she takes Statistics at 9 A.M. She must take Statistics at 9 A.M. if she takes Psychology. She must take either Geography or World History but cannot take both.",
    "question": "If Alicia takes Statistics at 3 P.M. and Geography, then which one of the following courses must she also take?",
    "answer": "D",
    "options": [
      "A) Japanese",
      "B) Macroeconomics",
      "C) Psychology",
      "D) Russian",
      "E) World History"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([Geography, Japanese, Macroeconomics, Psychology, Russian, Statistics, WorldHistory])\ntimes = EnumSort([9am, 3pm])\ntakes = Function([courses, times] -> [bool])\n\n# Constraints\nForAll([c:courses], Count([t:times], takes(c, t)) <= 1) ::: No one is allowed to take any course more than once per semester\nAnd(takes(Japanese, _), Not(takes(Russian, _))) ::: She must take Japanese if she does not take Russian\nAnd(takes(Macroeconomics, _), Not(takes(Japanese, _))) ::: She cannot take Japanese if she takes Macroeconomics\nAnd(takes(WorldHistory, _), Not(takes(Statistics, 9am))) ::: She cannot take World History if she takes Statistics at 9 A.M\nAnd(takes(Psychology, _), takes(Statistics, 9am)) ::: She must take Statistics at 9 A.M. if she takes Psychology\nAnd(takes(Geography, _), takes(WorldHistory, _)) ::: She must take either Geography or World History but cannot take both\n\n# Options\nQuestion ::: If Alicia takes Statistics at 3 P.M. and Geography, then which one of the following courses must she also take?\nis_sat(And(takes(Japanese, _), takes(Geography, _), takes(Statistics, 3pm))) ::: (A)\nis_sat(And(takes(Macroeconomics, _), takes(Geography, _), takes(Statistics, 3pm))) ::: (B)\nis_sat(And(takes(Psychology, _), takes(Geography, _), takes(Statistics, 3pm))) ::: (C)\nis_sat(And(takes(Russian, _), takes(Geography, _), takes(Statistics, 3pm))) ::: (D)\nis_sat(And(takes(WorldHistory, _), takes(Geography, _), takes(Statistics, 3pm)))"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_3_16",
    "context": "Alicia will take exactly four courses this semester. She must choose from the following seven courses—Geography, Japanese, Macroeconomics, Psychology, Russian, Statistics (which is offered twice, once each on Tuesdays at 9 A.M. and 3 P.M.), and World History. No one is allowed to take any course more than once per semester. Because of university requirements and time conflicts, the following restrictions apply to Alicia's choices: She must take Japanese if she does not take Russian. She cannot take Japanese if she takes Macroeconomics. She cannot take World History if she takes Statistics at 9 A.M. She must take Statistics at 9 A.M. if she takes Psychology. She must take either Geography or World History but cannot take both.",
    "question": "Suppose that Alicia must take Statistics if she takes Psychology, but rather than being restricted to taking Statistics at 9 A.M. she can take it at either 9 A.M. or at 3 P.M. If all the other restrictions remain the same, then which one of the following could be the list of the four courses Alicia takes?",
    "answer": "A",
    "options": [
      "A) Psychology, Russian, Statistics, World History",
      "B) Macroeconomics, Psychology, Statistics, World History",
      "C) Macroeconomics, Psychology, Russian, World History",
      "D) Geography, Psychology, Russian, World History",
      "E) Geography, Macroeconomics, Russian, World History"
    ],
    "raw_logic_programs": [
      "# Declarations\ncourses = EnumSort([Geography, Japanese, Macroeconomics, Psychology, Russian, Statistics, WorldHistory])\ntakes = Function([courses] -> [bool])\n\n# Constraints\nForAll([c:courses], Count([t:takes], t == c) == 4) ::: Alicia will take exactly four courses this semester\nAnd(takes(Japanese), Not(takes(Russian))) ::: She must take Japanese if she does not take Russian\nAnd(Not(takes(Japanese)), takes(Macroeconomics)) ::: She cannot take Japanese if she takes Macroeconomics\nAnd(takes(WorldHistory), Not(takes(Statistics))) ::: She cannot take World History if she takes Statistics at 9 A.M.\nAnd(takes(Psychology), takes(Statistics)) ::: She must take Statistics at 9 A.M. if she takes Psychology\nAnd(takes(Geography), takes(WorldHistory)) ::: She must take either Geography or World History but cannot take both\n\n# Options\nQuestion ::: Suppose that Alicia must take Statistics if she takes Psychology, but rather than being restricted to taking Statistics at 9 A.M. she can take it at either 9 A.M. or at 3 P.M. If all the other restrictions remain the same, then which one of the following could be the list of the four courses Alicia takes?\nis_valid(Exists([c:courses], takes(c) == Psychology) & Exists([c:courses], takes(c) == Russian) & Exists([c:courses], takes(c) == Statistics) & Exists([c:courses], takes(c) == WorldHistory)) ::: A) Psychology, Russian, Statistics, World History\nis_valid(Exists([c:courses], takes(c) == Macroeconomics) & Exists([c:courses], takes(c) == Psychology) & Exists([c:courses], takes(c) == Statistics) & Exists([c:courses], takes(c) == WorldHistory)) ::: B) Macroeconomics, Psychology, Statistics, World History\nis_valid(Exists([c:c"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_4_17",
    "context": "An organization will hold its first six annual meetings in exactly six cities—Los Angeles, Montreal, New York, Toronto, Vancouver, and Washington—using each city only once. The following conditions govern the order in which the cities are used: Los Angeles must be used in some year after the year in which Toronto is used. Vancouver must be used either immediately before or immediately after Washington. The meeting in Toronto must be separated from the meeting in Montreal by meetings in exactly two other cities. The meeting in Vancouver must be separated from the meeting in Los Angeles by meetings in exactly two other cities.",
    "question": "Which one of the following lists the cities in an order in which they could be used for the meetings, from the first year through the sixth?",
    "answer": "A",
    "options": [
      "A) Toronto, Vancouver, Washington, Montreal, Los Angeles, New York",
      "B) Vancouver, Washington, Montreal, Los Angeles, New York, Toronto",
      "C) Vancouver, Washington, Toronto, New York, Los Angeles, Montreal",
      "D) Washington, Montreal, Vancouver, New York, Toronto, Los Angeles",
      "E) Washington, Vancouver, New York, Toronto, Los Angeles, Montreal"
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([Los_Angeles, Montreal, New_York, Toronto, Vancouver, Washington])\nyears = EnumSort([1, 2, 3, 4, 5, 6])\nmeetings = Function([cities, years] -> [bool])\n\n# Constraints\nForAll([c:cities], Count([y:years], meetings(c, y)) == 1) ::: each city is used only once\nAnd(meetings(Toronto, y), Not(meetings(Toronto, y - 1))) ::: Toronto must be used in some year after the year in which Toronto is used\nAnd(meetings(Vancouver, y), meetings(Washington, y - 1)) ::: Vancouver must be used either immediately before or immediately after Washington\nAnd(meetings(Toronto, y), meetings(Montreal, y - 2)) ::: The meeting in Toronto must be separated from the meeting in Montreal by meetings in exactly two other cities\nAnd(meetings(Vancouver, y), meetings(Los_Angeles, y - 2)) ::: The meeting in Vancouver must be separated from the meeting in Los Angeles by meetings in exactly two other cities\n\n# Options\nQuestion ::: Which one of the following lists the cities in an order in which they could be used for the meetings, from the first year through the sixth?\nis_sat(ForAll([y:years], meetings(Toronto, y) == (y == 1))) ::: A) Toronto, Vancouver, Washington, Montreal, Los Angeles, New York\nis_sat(ForAll([y:years], meetings(Vancouver, y) == (y == 1))) ::: B) Vancouver, Washington, Montreal, Los Angeles, New York, Toronto\nis_sat(ForAll([y:years], meetings(Vancouver, y) == (y == 2))) ::: C) Vancouver, Washington, Toronto, New York, Los Angeles, Montreal\nis_sat(ForAll([y:years], meetings(Washington, y) == (y == 1))) ::: D) Washington, Montreal, Vancouver, New York"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_4_18",
    "context": "An organization will hold its first six annual meetings in exactly six cities—Los Angeles, Montreal, New York, Toronto, Vancouver, and Washington—using each city only once. The following conditions govern the order in which the cities are used: Los Angeles must be used in some year after the year in which Toronto is used. Vancouver must be used either immediately before or immediately after Washington. The meeting in Toronto must be separated from the meeting in Montreal by meetings in exactly two other cities. The meeting in Vancouver must be separated from the meeting in Los Angeles by meetings in exactly two other cities.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Toronto is used in the first year.",
      "B) Montreal is used in the fourth year.",
      "C) Toronto is used at some time before Montreal is used.",
      "D) New York is used either immediately before or immediately after Vancouver.",
      "E) The meeting in New York is separated from the meeting in Washington by meetings in exactly two other cities."
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([Los_Angeles, Montreal, New_York, Toronto, Vancouver, Washington])\nyears = EnumSort([1, 2, 3, 4, 5, 6])\nmeetings = Function([cities, years] -> [bool])\n\n# Constraints\nForAll([c:cities], Count([y:years], meetings(c, y)) == 1) ::: The organization will hold its first six annual meetings in exactly six cities\nAnd(meetings(Los_Angeles, y), meetings(Toronto, y) > meetings(Toronto, y)) ::: Los Angeles must be used in some year after the year in which Toronto is used\nAnd(meetings(Vancouver, y), meetings(Washington, y)) ::: Vancouver must be used either immediately before or immediately after Washington\nAnd(meetings(Toronto, y), meetings(Montreal, y) > meetings(Toronto, y)) ::: The meeting in Toronto must be separated from the meeting in Montreal by meetings in exactly two other cities\nAnd(meetings(Vancouver, y), meetings(Los_Angeles, y) > meetings(Vancouver, y)) ::: The meeting in Vancouver must be separated from the meeting in Los Angeles by meetings in exactly two other cities\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([y:years], meetings(Toronto, y) == 1)) ::: (A)\nis_valid(Exists([y:years], meetings(Montreal, y) == 4)) ::: (B)\nis_valid(Exists([y:years], meetings(Toronto, y) < meetings(Montreal, y))) ::: (C)\nis_valid(Exists([y:years], meetings(New_York, y) == meetings(Vancouver, y))) ::: (D)\nis_valid(Exists([y:years], meetings(New_York, y) == meetings(Washington, y))) ::: (E)\n------\nProblem:\nA company has six employees—Fred,"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_4_19",
    "context": "An organization will hold its first six annual meetings in exactly six cities—Los Angeles, Montreal, New York, Toronto, Vancouver, and Washington—using each city only once. The following conditions govern the order in which the cities are used: Los Angeles must be used in some year after the year in which Toronto is used. Vancouver must be used either immediately before or immediately after Washington. The meeting in Toronto must be separated from the meeting in Montreal by meetings in exactly two other cities. The meeting in Vancouver must be separated from the meeting in Los Angeles by meetings in exactly two other cities.",
    "question": "There is exactly one possible order in which the cities are used if which one of the following is true?",
    "answer": "D",
    "options": [
      "A) Los Angeles is used in the fifth year.",
      "B) Montreal is used in the sixth year.",
      "C) New York is used in the fifth year.",
      "D) Vancouver is used in the first year.",
      "E) Washington is used in the second year."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_4_20",
    "context": "An organization will hold its first six annual meetings in exactly six cities—Los Angeles, Montreal, New York, Toronto, Vancouver, and Washington—using each city only once. The following conditions govern the order in which the cities are used: Los Angeles must be used in some year after the year in which Toronto is used. Vancouver must be used either immediately before or immediately after Washington. The meeting in Toronto must be separated from the meeting in Montreal by meetings in exactly two other cities. The meeting in Vancouver must be separated from the meeting in Los Angeles by meetings in exactly two other cities.",
    "question": "Which one of the following is a complete and accurate list of the years in which Washington could be used?",
    "answer": "E",
    "options": [
      "A) 1, 3, 5",
      "B) 2, 3, 4, 5",
      "C) 2, 3, 4, 6",
      "D) 1, 2, 4, 6",
      "E) 1, 2, 3, 4, 5, 6"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_4_21",
    "context": "An organization will hold its first six annual meetings in exactly six cities—Los Angeles, Montreal, New York, Toronto, Vancouver, and Washington—using each city only once. The following conditions govern the order in which the cities are used: Los Angeles must be used in some year after the year in which Toronto is used. Vancouver must be used either immediately before or immediately after Washington. The meeting in Toronto must be separated from the meeting in Montreal by meetings in exactly two other cities. The meeting in Vancouver must be separated from the meeting in Los Angeles by meetings in exactly two other cities.",
    "question": "If Montreal is used in the first year, which one of the following CANNOT be true?",
    "answer": "E",
    "options": [
      "A) Washington is used in the third year.",
      "B) Vancouver is used in the third year.",
      "C) Toronto is used in the fourth year.",
      "D) New York is used in the fifth year.",
      "E) Los Angeles is used in the third year."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_4_22",
    "context": "An organization will hold its first six annual meetings in exactly six cities—Los Angeles, Montreal, New York, Toronto, Vancouver, and Washington—using each city only once. The following conditions govern the order in which the cities are used: Los Angeles must be used in some year after the year in which Toronto is used. Vancouver must be used either immediately before or immediately after Washington. The meeting in Toronto must be separated from the meeting in Montreal by meetings in exactly two other cities. The meeting in Vancouver must be separated from the meeting in Los Angeles by meetings in exactly two other cities.",
    "question": "Which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Los Angeles is used in the first year.",
      "B) New York is used in the second year.",
      "C) Montreal is used in the third year.",
      "D) Vancouver is used in the fourth year.",
      "E) Toronto is used in the sixth year."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_200912_1-G_4_23",
    "context": "An organization will hold its first six annual meetings in exactly six cities—Los Angeles, Montreal, New York, Toronto, Vancouver, and Washington—using each city only once. The following conditions govern the order in which the cities are used: Los Angeles must be used in some year after the year in which Toronto is used. Vancouver must be used either immediately before or immediately after Washington. The meeting in Toronto must be separated from the meeting in Montreal by meetings in exactly two other cities. The meeting in Vancouver must be separated from the meeting in Los Angeles by meetings in exactly two other cities.",
    "question": "Which one of the following must be false?",
    "answer": "B",
    "options": [
      "A) Los Angeles is used either immediately before or immediately after New York.",
      "B) Los Angeles is used either immediately before or immediately after Washington.",
      "C) New York is used either immediately before or immediately after Toronto.",
      "D) Toronto is used either immediately before or immediately after Vancouver.",
      "E) Toronto is used either immediately before or immediately after Washington."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_1_1",
    "context": "A community center will host six arts-and-crafts workshops—Jewelry, Kite-making, Needlepoint, Quilting, Rug-making, and Scrapbooking. The workshops will be given on three consecutive days: Wednesday, Thursday, and Friday. Each workshop will be given once, and exactly two workshops will be given per day, one in the morning and one in the afternoon. The schedule for the workshops is subject to the following constraints: Jewelry must be given in the morning, on the same day as either Kite-making or Quilting. Rug-making must be given in the afternoon, on the same day as either Needlepoint or Scrapbooking. Quilting must be given on an earlier day than both Kite-making and Needlepoint.",
    "question": "Which one of the following is an acceptable schedule for the workshops, with each day's workshops listed in the order in which they are to be given?",
    "answer": "B",
    "options": [
      "A) Wednesday: Jewelry, Kite-making Thursday: Quilting, Scrapbooking Friday: Needlepoint, Rug-making",
      "B) Wednesday: Jewelry, Quilting Thursday: Kite-making, Needlepoint Friday: Scrapbooking, Rug-making",
      "C) Wednesday: Quilting, Needlepoint Thursday: Scrapbooking, Rug-making Friday: Jewelry, Kite-making",
      "D) Wednesday: Quilting, Scrapbooking Thursday: Jewelry, Kite-making Friday: Rug-making, Needlepoint",
      "E) Wednesday: Scrapbooking, Rug-making Thursday: Quilting, Jewelry Friday: Kite-making, Needlepoint"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_1_2",
    "context": "A community center will host six arts-and-crafts workshops—Jewelry, Kite-making, Needlepoint, Quilting, Rug-making, and Scrapbooking. The workshops will be given on three consecutive days: Wednesday, Thursday, and Friday. Each workshop will be given once, and exactly two workshops will be given per day, one in the morning and one in the afternoon. The schedule for the workshops is subject to the following constraints: Jewelry must be given in the morning, on the same day as either Kite-making or Quilting. Rug-making must be given in the afternoon, on the same day as either Needlepoint or Scrapbooking. Quilting must be given on an earlier day than both Kite-making and Needlepoint.",
    "question": "Which one of the following workshops CANNOT be given on Thursday morning?",
    "answer": "D",
    "options": [
      "A) Jewelry",
      "B) Kite-making",
      "C) Needlepoint",
      "D) Quilting",
      "E) Scrapbooking"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_1_3",
    "context": "A community center will host six arts-and-crafts workshops—Jewelry, Kite-making, Needlepoint, Quilting, Rug-making, and Scrapbooking. The workshops will be given on three consecutive days: Wednesday, Thursday, and Friday. Each workshop will be given once, and exactly two workshops will be given per day, one in the morning and one in the afternoon. The schedule for the workshops is subject to the following constraints: Jewelry must be given in the morning, on the same day as either Kite-making or Quilting. Rug-making must be given in the afternoon, on the same day as either Needlepoint or Scrapbooking. Quilting must be given on an earlier day than both Kite-making and Needlepoint.",
    "question": "Which one of the following pairs of workshops CANNOT be the ones given on Wednesday morning and Wednesday afternoon, respectively?",
    "answer": "A",
    "options": [
      "A) Jewelry, Kite-making",
      "B) Jewelry, Quilting",
      "C) Quilting, Scrapbooking",
      "D) Scrapbooking, Quilting",
      "E) Scrapbooking, Rug-making"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_1_4",
    "context": "A community center will host six arts-and-crafts workshops—Jewelry, Kite-making, Needlepoint, Quilting, Rug-making, and Scrapbooking. The workshops will be given on three consecutive days: Wednesday, Thursday, and Friday. Each workshop will be given once, and exactly two workshops will be given per day, one in the morning and one in the afternoon. The schedule for the workshops is subject to the following constraints: Jewelry must be given in the morning, on the same day as either Kite-making or Quilting. Rug-making must be given in the afternoon, on the same day as either Needlepoint or Scrapbooking. Quilting must be given on an earlier day than both Kite-making and Needlepoint.",
    "question": "If Kite-making is given on Friday morning, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Jewelry is given on Thursday morning.",
      "B) Needlepoint is given on Thursday afternoon.",
      "C) Quilting is given on Wednesday morning.",
      "D) Rug-making is given on Friday afternoon.",
      "E) Scrapbooking is given on Wednesday afternoon."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_1_5",
    "context": "A community center will host six arts-and-crafts workshops—Jewelry, Kite-making, Needlepoint, Quilting, Rug-making, and Scrapbooking. The workshops will be given on three consecutive days: Wednesday, Thursday, and Friday. Each workshop will be given once, and exactly two workshops will be given per day, one in the morning and one in the afternoon. The schedule for the workshops is subject to the following constraints: Jewelry must be given in the morning, on the same day as either Kite-making or Quilting. Rug-making must be given in the afternoon, on the same day as either Needlepoint or Scrapbooking. Quilting must be given on an earlier day than both Kite-making and Needlepoint.",
    "question": "If Quilting is given in the morning, then which one of the following workshops CANNOT be given on Thursday?",
    "answer": "E",
    "options": [
      "A) Jewelry",
      "B) Kite-making",
      "C) Needlepoint",
      "D) Rug-making",
      "E) Scrapbooking"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_1_6",
    "context": "A community center will host six arts-and-crafts workshops—Jewelry, Kite-making, Needlepoint, Quilting, Rug-making, and Scrapbooking. The workshops will be given on three consecutive days: Wednesday, Thursday, and Friday. Each workshop will be given once, and exactly two workshops will be given per day, one in the morning and one in the afternoon. The schedule for the workshops is subject to the following constraints: Jewelry must be given in the morning, on the same day as either Kite-making or Quilting. Rug-making must be given in the afternoon, on the same day as either Needlepoint or Scrapbooking. Quilting must be given on an earlier day than both Kite-making and Needlepoint.",
    "question": "How many of the workshops are there that could be the one given on Wednesday morning?",
    "answer": "C",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkshops = EnumSort([Jewelry, Kite_making, Needlepoint, Quilting, Rug_making, Scrapbooking])\ndays = EnumSort([Wednesday, Thursday, Friday])\ntimes = EnumSort([morning, afternoon])\ngiven = Function([workshops, days, times] -> [bool])\n\n# Constraints\nForAll([w:workshops], Count([d:days, t:times], given(w, d, t)) == 1) ::: each workshop will be given once\nForAll([d:days], Count([w:workshops, t:times], given(w, d, t)) == 2) ::: exactly two workshops will be given per day\nAnd(given(Jewelry, _, morning), Or(given(Kite_making, _, _), given(Quilting, _, _))) ::: Jewelry must be given in the morning, on the same day as either Kite-making or Quilting\nAnd(given(Rug_making, _, afternoon), Or(given(Needlepoint, _, _), given(Scrapbooking, _, _))) ::: Rug-making must be given in the afternoon, on the same day as either Needlepoint or Scrapbooking\ngiven(Quilting, _, _) < given(Kite_making, _, _) ::: Quilting must be given on an earlier day than both Kite-making and Needlepoint\ngiven(Quilting, _, _) < given(Needlepoint, _, _) ::: Quilting must be given on an earlier day than both Kite-making and Needlepoint\n\n# Options\nQuestion ::: How many of the workshops are there that could be the one given on Wednesday morning?\nCount([w:workshops], And(given(w, Wednesday, morning), Not(w == Jewelry))) ::: A) one\nCount([w:workshops], And(given(w, Wednesday, morning), Not(w == Jewelry), Not(w == Kite_making))) ::: B) two\nCount([w:workshops], And(given(w, Wednesday, morning), Not(w == Jewelry), Not(w == Kite_making), Not(w == Quilting))) ::: C) three\nCount([w:workshops], And(given(w, Wednesday, morning), Not(w == Jewelry), Not(w == Kite_making), Not(w == Quilting), Not(w == Rug_making))) ::: D) four\nCount([w:workshops], And(given(w, Wednesday, morning), Not(w == Jewelry), Not(w == Kite_making), Not(w == Quilting), Not(w == Rug_making), Not(w == Scrapbooking))) ::: E) five\n------"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_2_7",
    "context": "Exactly six actors—Geyer, Henson, Jhalani, Lin, Mitchell, and Paredes—will appear one after another in the opening credits of a television program. Their contracts contain certain restrictions that affect the order in which they can appear. Given these restrictions, the order in which the actors appear, from first to sixth, must conform to the following: Both Lin and Mitchell appear earlier than Henson. Both Lin and Paredes appear earlier than Jhalani. If Mitchell appears earlier than Paredes, then Henson appears earlier than Geyer. Geyer does not appear last.",
    "question": "Which one of the following could be the order, from first to last, in which the actors appear?",
    "answer": "E",
    "options": [
      "A) Geyer, Lin, Jhalani, Paredes, Mitchell, Henson",
      "B) Geyer, Mitchell, Paredes, Lin, Henson, Jhalani",
      "C) Henson, Lin, Paredes, Jhalani, Geyer, Mitchell",
      "D) Lin, Paredes, Mitchell, Henson, Jhalani, Geyer",
      "E) Paredes, Mitchell, Lin, Jhalani, Geyer, Henson"
    ],
    "raw_logic_programs": [
      "# Declarations\nactors = EnumSort([Geyer, Henson, Jhalani, Lin, Mitchell, Paredes])\nappears = Function([actors] -> [int])\nForAll([a:actors], And(1 <= appears(a), appears(a) <= 6))\n\n# Constraints\nAnd(appears(Lin) < appears(Henson), appears(Mitchell) < appears(Henson)) ::: Both Lin and Mitchell appear earlier than Henson\nAnd(appears(Lin) < appears(Jhalani), appears(Paredes) < appears(Jhalani)) ::: Both Lin and Paredes appear earlier than Jhalani\nAnd(appears(Mitchell) < appears(Paredes), appears(Henson) < appears(Geyer)) ::: If Mitchell appears earlier than Paredes, then Henson appears earlier than Geyer\nappears(Geyer)!= 6 ::: Geyer does not appear last\n\n# Options\nQuestion ::: Which one of the following could be the order, from first to last, in which the actors appear?\nis_sat(ForAll([a:actors], appears(a) == [1, 2, 3, 4, 5, 6][a])) ::: A) Geyer, Lin, Jhalani, Paredes, Mitchell, Henson\nis_sat(ForAll([a:actors], appears(a) == [1, 2, 3, 4, 5, 6][a])) ::: B) Geyer, Mitchell, Paredes, Lin, Henson, Jhalani\nis_sat(ForAll([a:actors], appears(a) == [1, 2, 3, 4, 5, 6][a])) ::: C) Henson, Lin, Paredes, Jhalani, Geyer, Mitchell\nis_sat(ForAll([a:actors], appears(a) == [1, 2, 3, 4, 5, 6][a])) ::: D) Lin, Paredes, Mitchell, Henson, Jhalani, Geyer\nis_sat(ForAll([a:actors], appears(a) == [1, 2, 3, 4, 5, 6][a])) ::: E) Paredes, Mitchell, Lin, Jhalani, Geyer, Henson\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The managers are to be assigned to offices in a building that has six floors, one on top of the other. The building has six offices, one on each floor, and each office is to be occupied by exactly one manager. The offices are numbered 1 through 6, from the top floor to the bottom floor. The managers are to be assigned to offices according to the following conditions: The manager of department A is"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_2_8",
    "context": "Exactly six actors—Geyer, Henson, Jhalani, Lin, Mitchell, and Paredes—will appear one after another in the opening credits of a television program. Their contracts contain certain restrictions that affect the order in which they can appear. Given these restrictions, the order in which the actors appear, from first to sixth, must conform to the following: Both Lin and Mitchell appear earlier than Henson. Both Lin and Paredes appear earlier than Jhalani. If Mitchell appears earlier than Paredes, then Henson appears earlier than Geyer. Geyer does not appear last.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "C",
    "options": [
      "A) Henson appears earlier than Geyer.",
      "B) Henson appears sixth.",
      "C) Lin appears fifth.",
      "D) Paredes appears earlier than Mitchell.",
      "E) Paredes appears second."
    ],
    "raw_logic_programs": [
      "# Declarations\nactors = EnumSort([Geyer, Henson, Jhalani, Lin, Mitchell, Paredes])\nappears = Function([actors] -> [int])\nForAll([a:actors], And(1 <= appears(a), appears(a) <= 6))\n\n# Constraints\nAnd(appears(Lin) < appears(Henson), appears(Mitchell) < appears(Henson)) ::: Both Lin and Mitchell appear earlier than Henson\nAnd(appears(Lin) < appears(Jhalani), appears(Paredes) < appears(Jhalani)) ::: Both Lin and Paredes appear earlier than Jhalani\nImplies(appears(Mitchell) < appears(Paredes), appears(Henson) < appears(Geyer)) ::: If Mitchell appears earlier than Paredes, then Henson appears earlier than Geyer\nNot(appears(Geyer) == 6) ::: Geyer does not appear last\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(appears(Henson) < appears(Geyer))) ::: (A)\nis_exception(is_sat(appears(Henson) == 6)) ::: (B)\nis_exception(is_sat(appears(Lin) == 5)) ::: (C)\nis_exception(is_sat(appears(Paredes) < appears(Mitchell))) ::: (D)\nis_exception(is_sat(appears(Paredes) == 2)) ::: (E)\n------\nProblem:\nA certain company has exactly six employees—Garcia, Holloway, Ito, Jensen, Kwan, and Lopez—who are assigned to work on exactly six projects—M, N, O, P, Q, and R. Each employee is assigned to work on exactly one project, and each project is assigned to exactly one employee. The following conditions apply: Garcia is assigned to project N. Holloway is assigned to project O. Ito is assigned to project Q. Jensen is assigned to project R. Kwan is assigned to project M. Lopez is assigned to project P.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) Garcia is assigned to project M.\n(B) Holloway is assigned to project N.\n(C) Ito is assigned to project O.\n(D) Jensen is assigned to project P.\n(E) Kwan is assigned to project Q.\n###\n# Declarations\nemployees = EnumSort([Garcia, Holloway, Ito, Jensen, Kwan, Lopez])\nprojects = EnumSort([M, N, O, P, Q, R])\nassigned = Function([employees, projects] -> [bool])\nForAll([e:employees], Count([p:projects], assigned("
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_2_9",
    "context": "Exactly six actors—Geyer, Henson, Jhalani, Lin, Mitchell, and Paredes—will appear one after another in the opening credits of a television program. Their contracts contain certain restrictions that affect the order in which they can appear. Given these restrictions, the order in which the actors appear, from first to sixth, must conform to the following: Both Lin and Mitchell appear earlier than Henson. Both Lin and Paredes appear earlier than Jhalani. If Mitchell appears earlier than Paredes, then Henson appears earlier than Geyer. Geyer does not appear last.",
    "question": "Exactly how many of the actors are there any one of whom could appear sixth?",
    "answer": "D",
    "options": [
      "A) 5",
      "B) 4",
      "C) 3",
      "D) 2",
      "E) 1"
    ],
    "raw_logic_programs": [
      "# Declarations\nactors = EnumSort([Geyer, Henson, Jhalani, Lin, Mitchell, Paredes])\nappears = Function([actors] -> [int])\nForAll([a:actors], And(1 <= appears(a), appears(a) <= 6))\n\n# Constraints\nDistinct([a:actors], appears(a)) ::: their contracts contain certain restrictions that affect the order in which they can appear\nAnd(appears(Lin) < appears(Henson), appears(Mitchell) < appears(Henson)) ::: Both Lin and Mitchell appear earlier than Henson\nAnd(appears(Lin) < appears(Jhalani), appears(Paredes) < appears(Jhalani)) ::: Both Lin and Paredes appear earlier than Jhalani\nAnd(appears(Mitchell) < appears(Paredes), appears(Henson) < appears(Geyer)) ::: If Mitchell appears earlier than Paredes, then Henson appears earlier than Geyer\nappears(Geyer)!= 6 ::: Geyer does not appear last\n\n# Options\nQuestion ::: Exactly how many of the actors are there any one of whom could appear sixth?\nis_sat(ForAll([a:actors], appears(a) == 6)) ::: A) 5\nis_sat(ForAll([a:actors], appears(a) == 5)) ::: B) 4\nis_sat(ForAll([a:actors], appears(a) == 4)) ::: C) 3\nis_sat(ForAll([a:actors], appears(a) == 3)) ::: D) 2\nis_sat(ForAll([a:actors], appears(a) == 2)) ::: E) 1\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which has a manager. The managers are to be assigned to offices in a building that has six floors, one office per floor. The managers are to be assigned to offices in accordance with the following conditions: The manager of department A is assigned to an office on a higher floor than the manager of department B. The manager of department C is assigned to an office on a higher floor than the manager of department D. The manager of department E is assigned to an office on a higher floor than the manager of department F. The manager of department B is assigned to an office on a higher floor than the manager of department E.\nQuestion:\nWhich one of the following could be a complete and accurate list of the departments of the managers assigned to the first-floor and second-floor offices?\nChoices:\n(A) A, B\n(B) A, E\n(C) B, C\n(D) B, D\n(E) C, D\n###\n# Declarations\ndepartments = EnumSort([A, B, C, D, E, F])\nf"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_2_10",
    "context": "Exactly six actors—Geyer, Henson, Jhalani, Lin, Mitchell, and Paredes—will appear one after another in the opening credits of a television program. Their contracts contain certain restrictions that affect the order in which they can appear. Given these restrictions, the order in which the actors appear, from first to sixth, must conform to the following: Both Lin and Mitchell appear earlier than Henson. Both Lin and Paredes appear earlier than Jhalani. If Mitchell appears earlier than Paredes, then Henson appears earlier than Geyer. Geyer does not appear last.",
    "question": "If Jhalani appears earlier than Mitchell, then which one of the following could be the order in which the other four actors appear, from earliest to latest?",
    "answer": "A",
    "options": [
      "A) Geyer, Lin, Paredes, Henson",
      "B) Geyer, Paredes, Henson, Lin",
      "C) Lin, Henson, Geyer, Paredes",
      "D) Lin, Paredes, Henson, Geyer",
      "E) Paredes, Lin, Henson, Geyer"
    ],
    "raw_logic_programs": [
      "# Declarations\nactors = EnumSort([Geyer, Henson, Jhalani, Lin, Mitchell, Paredes])\nappears = Function([actors] -> [int])\nForAll([a:actors], And(1 <= appears(a), appears(a) <= 6))\n\n# Constraints\nAnd(appears(Lin) < appears(Henson), appears(Mitchell) < appears(Henson)) ::: Both Lin and Mitchell appear earlier than Henson\nAnd(appears(Lin) < appears(Jhalani), appears(Paredes) < appears(Jhalani)) ::: Both Lin and Paredes appear earlier than Jhalani\nAnd(appears(Mitchell) < appears(Paredes), appears(Henson) < appears(Geyer)) ::: If Mitchell appears earlier than Paredes, then Henson appears earlier than Geyer\nappears(Geyer)!= 6 ::: Geyer does not appear last\n\n# Options\nQuestion ::: If Jhalani appears earlier than Mitchell, then which one of the following could be the order in which the other four actors appear, from earliest to latest?\nis_exception(is_sat(And(appears(Geyer) == 1, appears(Lin) == 2, appears(Paredes) == 3, appears(Henson) == 4))) ::: A) Geyer, Lin, Paredes, Henson\nis_exception(is_sat(And(appears(Geyer) == 1, appears(Paredes) == 2, appears(Henson) == 3, appears(Lin) == 4))) ::: B) Geyer, Paredes, Henson, Lin\nis_exception(is_sat(And(appears(Lin) == 1, appears(Henson) == 2, appears(Geyer) == 3, appears(Paredes) == 4))) ::: C) Lin, Henson, Geyer, Paredes\nis_exception(is_sat(And(appears(Lin) == 1, appears(Paredes) == 2, appears(Henson) == 3, appears(Geyer) == 4))) ::: D) Lin, Paredes, Henson, Geyer\nis_exception(is_sat(And(appears(Paredes) == 1, appears(Lin) == 2, appears(Henson) == 3, appears(Geyer) == 4))) ::: E) Paredes, Lin, Henson, Geyer\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The managers are to be assigned to offices in a building that has six floors, one on top of the other. The building has one office on each floor, and each office is to be occupied by exactly one manager. The offices are to be assigned to"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_2_11",
    "context": "Exactly six actors—Geyer, Henson, Jhalani, Lin, Mitchell, and Paredes—will appear one after another in the opening credits of a television program. Their contracts contain certain restrictions that affect the order in which they can appear. Given these restrictions, the order in which the actors appear, from first to sixth, must conform to the following: Both Lin and Mitchell appear earlier than Henson. Both Lin and Paredes appear earlier than Jhalani. If Mitchell appears earlier than Paredes, then Henson appears earlier than Geyer. Geyer does not appear last.",
    "question": "If Lin appears immediately before Geyer, then which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Geyer appears no later than third.",
      "B) Henson appears last.",
      "C) Lin appears no later than third.",
      "D) Mitchell appears earlier than Geyer.",
      "E) Paredes appears first."
    ],
    "raw_logic_programs": [
      "# Declarations\nactors = EnumSort([Geyer, Henson, Jhalani, Lin, Mitchell, Paredes])\nappears = Function([actors] -> [int])\nForAll([a:actors], And(1 <= appears(a), appears(a) <= 6))\n\n# Constraints\nAnd(appears(Lin) < appears(Henson), appears(Mitchell) < appears(Henson)) ::: Both Lin and Mitchell appear earlier than Henson\nAnd(appears(Lin) < appears(Jhalani), appears(Paredes) < appears(Jhalani)) ::: Both Lin and Paredes appear earlier than Jhalani\nAnd(appears(Mitchell) < appears(Paredes), appears(Henson) < appears(Geyer)) ::: If Mitchell appears earlier than Paredes, then Henson appears earlier than Geyer\nappears(Geyer)!= 6 ::: Geyer does not appear last\n\n# Options\nQuestion ::: If Lin appears immediately before Geyer, then which one of the following must be true?\nis_sat(And(appears(Geyer) < appears(Lin), appears(Geyer) <= 3)) ::: A) Geyer appears no later than third.\nis_sat(appears(Henson) == 6) ::: B) Henson appears last.\nis_sat(And(appears(Lin) < appears(Geyer), appears(Lin) <= 3)) ::: C) Lin appears no later than third.\nis_sat(appears(Mitchell) < appears(Geyer)) ::: D) Mitchell appears earlier than Geyer.\nis_sat(appears(Paredes) == 1) ::: E) Paredes appears first.\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The managers are to be assigned to offices in a building that has six floors, one on top of the other. The building has one office on each floor, and each office is to be occupied by exactly one manager. The offices are to be assigned to the managers in accordance with the following conditions: The office on the first floor is to be occupied by the manager of either department A or department B. The office on the second floor is to be occupied by the manager of department C. The office on the third floor is to be occupied by the manager of department D. The office on the fourth floor is to be occupied by the manager of department E. The office on the fifth floor is to be occupied by the manager of department F.\nQuestion:\nIf the manager of department A is assigned to an office on a higher floor than the manager of department B, then which one of the following must be true?\nChoices:\n(A) The manager of department C is assigned to an office on a higher floor than the manager of department D.\n(B) The manager of department D is assigned to"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_2_12",
    "context": "Exactly six actors—Geyer, Henson, Jhalani, Lin, Mitchell, and Paredes—will appear one after another in the opening credits of a television program. Their contracts contain certain restrictions that affect the order in which they can appear. Given these restrictions, the order in which the actors appear, from first to sixth, must conform to the following: Both Lin and Mitchell appear earlier than Henson. Both Lin and Paredes appear earlier than Jhalani. If Mitchell appears earlier than Paredes, then Henson appears earlier than Geyer. Geyer does not appear last.",
    "question": "If Mitchell appears first, then which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Geyer appears fifth.",
      "B) Henson appears third.",
      "C) Jhalani appears sixth.",
      "D) Lin appears second.",
      "E) Paredes appears fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\nactors = EnumSort([Geyer, Henson, Jhalani, Lin, Mitchell, Paredes])\nappears = Function([actors] -> [int])\nForAll([a:actors], And(1 <= appears(a), appears(a) <= 6))\n\n# Constraints\nDistinct([a:actors], appears(a)) ::: their contracts contain certain restrictions that affect the order in which they can appear\nAnd(appears(Lin) < appears(Henson), appears(Mitchell) < appears(Henson)) ::: Both Lin and Mitchell appear earlier than Henson\nAnd(appears(Lin) < appears(Jhalani), appears(Paredes) < appears(Jhalani)) ::: Both Lin and Paredes appear earlier than Jhalani\nAnd(appears(Mitchell) < appears(Paredes), appears(Henson) < appears(Geyer)) ::: If Mitchell appears earlier than Paredes, then Henson appears earlier than Geyer\nappears(Geyer)!= 6 ::: Geyer does not appear last\n\n# Options\nQuestion ::: If Mitchell appears first, then which one of the following must be true?\nis_sat(And(appears(Geyer) == 5, appears(Mitchell) == 1)) ::: A) Geyer appears fifth.\nis_sat(And(appears(Henson) == 3, appears(Mitchell) == 1)) ::: B) Henson appears third.\nis_sat(And(appears(Jhalani) == 6, appears(Mitchell) == 1)) ::: C) Jhalani appears sixth.\nis_sat(And(appears(Lin) == 2, appears(Mitchell) == 1)) ::: D) Lin appears second.\nis_sat(And(appears(Paredes) == 4, appears(Mitchell) == 1)) ::: E) Paredes appears fourth.\n------\nProblem:\nA certain company has six departments—A, B, C, D, E, and F—each of which is headed by a manager. The managers are to be assigned to offices in a building that has six floors, one on top of the other. The building has one office on each floor, and each office is to be occupied by exactly one manager. The managers are to be assigned to offices according to the following conditions: The manager of department A is assigned to an office on a higher floor than the manager of department B. The manager of department C is assigned to an office on a higher floor than the manager of department D. The manager of department E is assigned to an office on a higher floor than the manager of department F. The manager of department B is assigned to an office on a higher floor than the manager of department E.\nQuestion:\nIf the manager of department D is assigned to an office on the third floor, then which one of the following must be true?\nChoices:\n("
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_3_13",
    "context": "Over the course of one day, a landscaper will use a truck to haul exactly seven loads—three loads of mulch and four loads of stone. The truck's cargo bed will be cleaned in between carrying any two loads of different materials. To meet the landscaper's needs as efficiently as possible, the following constraints apply: The cargo bed cannot be cleaned more than three times. The fifth load must be mulch.",
    "question": "Which one of the following is a pair of loads that can both be mulch?",
    "answer": "E",
    "options": [
      "A) the first and the third",
      "B) the second and the third",
      "C) the second and the sixth",
      "D) the third and the sixth",
      "E) the fourth and the sixth"
    ],
    "raw_logic_programs": [
      "# Declarations\nloads = EnumSort([first, second, third, fourth, fifth, sixth, seventh])\nmaterials = EnumSort([mulch, stone])\ncargo = Function([loads] -> [materials])\nclean = Function([loads] -> [bool])\n\n# Constraints\nForAll([l:loads], Count([m:materials], cargo(l) == m) == 1) ::: exactly seven loads—three loads of mulch and four loads of stone\nForAll([l:loads], Implies(cargo(l)!= cargo(l + 1), clean(l))) ::: The cargo bed will be cleaned in between carrying any two loads of different materials\nCount([l:loads], clean(l)) <= 3 ::: The cargo bed cannot be cleaned more than three times\ncargo(fifth) == mulch ::: The fifth load must be mulch\n\n# Options\nQuestion ::: Which one of the following is a pair of loads that can both be mulch?\nis_sat(And(cargo(first) == mulch, cargo(third) == mulch)) ::: A) the first and the third\nis_sat(And(cargo(second) == mulch, cargo(third) == mulch)) ::: B) the second and the third\nis_sat(And(cargo(second) == mulch, cargo(sixth) == mulch)) ::: C) the second and the sixth\nis_sat(And(cargo(third) == mulch, cargo(sixth) == mulch)) ::: D) the third and the sixth\nis_sat(And(cargo(fourth) == mulch, cargo(sixth) == mulch)) ::: E) the fourth and the sixth\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either managers or nonmanagers. The following conditions apply: The number of managers is 20 more than the number of nonmanagers. The number of managers is 20 less than twice the number of nonmanagers.\nQuestion:\nHow many managers does the company have?\nChoices:\n(A) 30\n(B) 40\n(C) 50\n(D) 60\n(E) 70\n###\n# Declarations\nemployees = EnumSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_3_14",
    "context": "Over the course of one day, a landscaper will use a truck to haul exactly seven loads—three loads of mulch and four loads of stone. The truck's cargo bed will be cleaned in between carrying any two loads of different materials. To meet the landscaper's needs as efficiently as possible, the following constraints apply: The cargo bed cannot be cleaned more than three times. The fifth load must be mulch.",
    "question": "Which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) The second load is stone.",
      "B) The first and second loads are the same material.",
      "C) The second and third loads are different materials.",
      "D) At least two loads of mulch are hauled consecutively.",
      "E) At least three loads of stone are hauled consecutively."
    ],
    "raw_logic_programs": [
      "# Declarations\nloads = EnumSort([1, 2, 3, 4, 5, 6, 7])\nmaterials = EnumSort([mulch, stone])\ncleaned = Function([loads] -> [bool])\nForAll([l:loads], And(1 <= l, l <= 7))\n\n# Constraints\nForAll([l:loads], Count([m:materials], And(cleaned(l), cleaned(l + 1), m == materials(l), m == materials(l + 1))) <= 3) ::: The cargo bed cannot be cleaned more than three times\ncleaned(5) == mulch ::: The fifth load must be mulch\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_sat(ForAll([l:loads], And(materials(l) == materials(l + 1), materials(l) == stone))) ::: (A)\nis_sat(ForAll([l:loads], And(materials(l) == materials(l + 1), materials(l) == materials(l + 1)))) ::: (B)\nis_sat(ForAll([l:loads], And(materials(l)!= materials(l + 1), materials(l) == materials(l + 1)))) ::: (C)\nis_sat(ForAll([l:loads], And(materials(l) == materials(l + 1), materials(l) == materials(l + 1)))) ::: (D)\nis_sat(ForAll([l:loads], And(materials(l) == materials(l + 1), materials(l) == materials(l + 1)))) ::: (E)\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_3_15",
    "context": "Over the course of one day, a landscaper will use a truck to haul exactly seven loads—three loads of mulch and four loads of stone. The truck's cargo bed will be cleaned in between carrying any two loads of different materials. To meet the landscaper's needs as efficiently as possible, the following constraints apply: The cargo bed cannot be cleaned more than three times. The fifth load must be mulch.",
    "question": "If the third load is mulch, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The sixth load is a different material than the seventh load.",
      "B) The first load is a different material than the second load.",
      "C) The seventh load is mulch.",
      "D) The sixth load is mulch.",
      "E) The first load is stone."
    ],
    "raw_logic_programs": [
      "# Declarations\nloads = EnumSort([first, second, third, fourth, fifth, sixth, seventh])\nmaterials = EnumSort([mulch, stone])\ncargo = Function([loads, materials] -> [bool])\nclean = Function([loads] -> [bool])\n\n# Constraints\nForAll([l:loads], Count([m:materials], cargo(l, m)) == 1) ::: exactly seven loads—three loads of mulch and four loads of stone\nForAll([l:loads], Count([m:materials], cargo(l, m)) == 1) ::: exactly seven loads—three loads of mulch and four loads of stone\nForAll([l:loads], Count([m:materials], cargo(l, m)) == 1) ::: exactly seven loads—three loads of mulch and four loads of stone\nForAll([l:loads], Count([m:materials], cargo(l, m)) == 1) ::: exactly seven loads—three loads of mulch and four loads of stone\nForAll([l:loads], Count([m:materials], cargo(l, m)) == 1) ::: exactly seven loads—three loads of mulch and four loads of stone\nForAll([l:loads], Count([m:materials], cargo(l, m)) == 1) ::: exactly seven loads—three loads of mulch and four loads of stone\nForAll([l:loads], Count([m:materials], cargo(l, m)) == 1) ::: exactly seven loads—three loads of mulch and four loads of stone\nCount([l:loads], clean(l)) <= 3 ::: The cargo bed cannot be cleaned more than three times\ncargo(fifth, mulch) ::: The fifth load must be mulch\n\n# Options\nQuestion ::: If the third load is mulch, which one of the following must be true?\nis_valid(Exists([l:loads], cargo(l, mulch) && cargo(l, stone))) ::: A) The sixth load is a different material than the seventh load.\nis_valid(Exists([l:loads], cargo(l, mulch) && cargo(l, stone))) ::: B) The first load is a different material than the second load.\nis_valid(Exists([l:loads], cargo(l, mulch) && cargo(l, stone))) ::: C) The seventh load is mulch.\nis_valid(Exists([l:loads], cargo(l, mulch) && cargo(l, stone))) ::: D) The sixth load is mulch.\nis_valid(Exists([l:loads], cargo(l, mulch) && cargo(l, stone))) ::: E) The first load is stone.\n------\nProblem:\nA certain company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 100 employees, all of whom are either managers or nonmanagers. The company has a total of 10"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_3_16",
    "context": "Over the course of one day, a landscaper will use a truck to haul exactly seven loads—three loads of mulch and four loads of stone. The truck's cargo bed will be cleaned in between carrying any two loads of different materials. To meet the landscaper's needs as efficiently as possible, the following constraints apply: The cargo bed cannot be cleaned more than three times. The fifth load must be mulch.",
    "question": "If the cargo bed is cleaned exactly twice, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) The second load is stone.",
      "B) The third load is mulch.",
      "C) The third load is stone.",
      "D) The sixth load is mulch.",
      "E) The seventh load is mulch."
    ],
    "raw_logic_programs": [
      "# Declarations\nloads = EnumSort([1, 2, 3, 4, 5, 6, 7])\nmaterials = EnumSort([mulch, stone])\ncargo_bed = Function([loads] -> [materials])\ncleaned = Function([loads] -> [bool])\n\n# Constraints\nForAll([l:loads], Count([m:materials], cargo_bed(l) == m) == 1) ::: exactly seven loads—three loads of mulch and four loads of stone\nForAll([l:loads], Implies(cargo_bed(l)!= cargo_bed(l + 1), cleaned(l))) ::: The truck's cargo bed will be cleaned in between carrying any two loads of different materials\nCount([l:loads], cleaned(l)) <= 3 ::: The cargo bed cannot be cleaned more than three times\ncargo_bed(5) == mulch ::: The fifth load must be mulch\n\n# Options\nQuestion ::: If the cargo bed is cleaned exactly twice, which one of the following must be true?\nis_valid(Exists([l:loads], cargo_bed(l) == stone && cleaned(l) && l < 2)) ::: A) The second load is stone.\nis_valid(Exists([l:loads], cargo_bed(l) == mulch && cleaned(l) && l < 3)) ::: B) The third load is mulch.\nis_valid(Exists([l:loads], cargo_bed(l) == stone && cleaned(l) && l < 3)) ::: C) The third load is stone.\nis_valid(Exists([l:loads], cargo_bed(l) == mulch && cleaned(l) && l < 6)) ::: D) The sixth load is mulch.\nis_valid(Exists([l:loads], cargo_bed(l) == mulch && cleaned(l) && l < 7)) ::: E) The seventh load is mulch.\n------"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_3_17",
    "context": "Over the course of one day, a landscaper will use a truck to haul exactly seven loads—three loads of mulch and four loads of stone. The truck's cargo bed will be cleaned in between carrying any two loads of different materials. To meet the landscaper's needs as efficiently as possible, the following constraints apply: The cargo bed cannot be cleaned more than three times. The fifth load must be mulch.",
    "question": "If no more than two loads of the same material are hauled consecutively, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) The first load is stone.",
      "B) The fourth load is stone.",
      "C) The third load is mulch.",
      "D) The sixth load is mulch.",
      "E) The seventh load is mulch."
    ],
    "raw_logic_programs": [
      "# Declarations\nloads = EnumSort([first, second, third, fourth, fifth, sixth, seventh])\nmaterials = EnumSort([mulch, stone])\nloads_of_materials = Function([loads, materials] -> [bool])\nForAll([l:loads], Count([m:materials], loads_of_materials(l, m)) == 1)\n\n# Constraints\nForAll([l:loads], Count([m:materials], loads_of_materials(l, m)) == 1) ::: exactly seven loads—three loads of mulch and four loads of stone\nForAll([l:loads], Implies(loads_of_materials(l, mulch), Not(loads_of_materials(l, stone)))) ::: The truck's cargo bed will be cleaned in between carrying any two loads of different materials\nCount([l:loads], loads_of_materials(l, mulch)) == 3 ::: three loads of mulch\nCount([l:loads], loads_of_materials(l, stone)) == 4 ::: four loads of stone\nCount([l:loads], loads_of_materials(l, mulch)) == 3 ::: three loads of mulch\nCount([l:loads], loads_of_materials(l, stone)) == 4 ::: four loads of stone\nCount([l:loads], loads_of_materials(l, mulch)) == 3 ::: three loads of mulch\nCount([l:loads], loads_of_materials(l, stone)) == 4 ::: four loads of stone\nCount([l:loads], loads_of_materials(l, mulch)) == 3 ::: three loads of mulch\nCount([l:loads], loads_of_materials(l, stone)) == 4 ::: four loads of stone\nCount([l:loads], loads_of_materials(l, mulch)) == 3 ::: three loads of mulch\nCount([l:loads], loads_of_materials(l"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_4_18",
    "context": "A travel magazine has hired six interns—Farber, Gombarick, Hall, Jackson, Kanze, and Lha—to assist in covering three stories—Romania, Spain, and Tuscany. Each intern will be trained either as a photographer's assistant or as a writer's assistant. Each story is assigned a team of two interns—one photographer's assistant and one writer's assistant—in accordance with the following conditions: Gombarick and Lha will be trained in the same field. Farber and Kanze will be trained in different fields. Hall will be trained as a photographer's assistant. Jackson is assigned to Tuscany. Kanze is not assigned to Spain.",
    "question": "Which one of the following could be an acceptable assignment of photographer's assistants to stories?",
    "answer": "A",
    "options": [
      "A) Romania: Farber Spain: Hall Tuscany: Jackson",
      "B) Romania: Gombarick Spain: Hall Tuscany: Farber",
      "C) Romania: Gombarick Spain: Hall Tuscany: Lha",
      "D) Romania: Gombarick Spain: Lha Tuscany: Kanze",
      "E) Romania: Hall Spain: Kanze Tuscany: Jackson"
    ],
    "raw_logic_programs": [
      "# Declarations\ninterns = EnumSort([Farber, Gombarick, Hall, Jackson, Kanze, Lha])\nstories = EnumSort([Romania, Spain, Tuscany])\nphotographer = Function([interns, stories] -> [interns])\nwriter = Function([interns, stories] -> [interns])\n\n# Constraints\nForAll([i:interns], Or(photographer(i, Romania), photographer(i, Spain), photographer(i, Tuscany))) ::: each intern will be trained either as a photographer's assistant or as a writer's assistant\nForAll([i:interns], Or(writer(i, Romania), writer(i, Spain), writer(i, Tuscany))) ::: each intern will be trained either as a photographer's assistant or as a writer's assistant\nForAll([i:interns], Implies(photographer(i, Romania), Not(writer(i, Romania)))) ::: each story is assigned a team of two interns—one photographer's assistant and one writer's assistant\nForAll([i:interns], Implies(photographer(i, Spain), Not(writer(i, Spain)))) ::: each story is assigned a team of two interns—one photographer's assistant and one writer's assistant\nForAll([i:interns], Implies(photographer(i, Tuscany), Not(writer(i, Tuscany)))) ::: each story is assigned a team of two interns—one photographer's assistant and one writer's assistant\nForAll([i:interns], Implies(writer(i, Romania), Not(photographer(i, Romania)))) ::: each story is assigned a team of two interns—one photographer's assistant and one writer's assistant\nForAll([i:interns], Implies(writer(i, Spain), Not(photographer(i, Spain)))) ::: each story is assigned a team of two intern"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_4_19",
    "context": "A travel magazine has hired six interns—Farber, Gombarick, Hall, Jackson, Kanze, and Lha—to assist in covering three stories—Romania, Spain, and Tuscany. Each intern will be trained either as a photographer's assistant or as a writer's assistant. Each story is assigned a team of two interns—one photographer's assistant and one writer's assistant—in accordance with the following conditions: Gombarick and Lha will be trained in the same field. Farber and Kanze will be trained in different fields. Hall will be trained as a photographer's assistant. Jackson is assigned to Tuscany. Kanze is not assigned to Spain.",
    "question": "If Farber is assigned to Romania, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Gombarick is assigned to Spain.",
      "B) Hall is assigned to Spain.",
      "C) Kanze is assigned to Tuscany.",
      "D) Lha is assigned to Spain.",
      "E) Lha is assigned to Tuscany."
    ],
    "raw_logic_programs": [
      "# Declarations\ninterns = EnumSort([Farber, Gombarick, Hall, Jackson, Kanze, Lha])\nstories = EnumSort([Romania, Spain, Tuscany])\nfields = EnumSort([photographer, writer])\ntrained = Function([interns, fields] -> [bool])\nassigned = Function([interns, stories] -> [bool])\n\n# Constraints\nForAll([i:interns], Count([f:fields], trained(i, f)) == 1) ::: Each intern will be trained either as a photographer's assistant or as a writer's assistant\nAnd(trained(Gombarick, f), trained(Lha, f)) ::: Gombarick and Lha will be trained in the same field\nAnd(trained(Farber, f), trained(Kanze, f)) ::: Farber and Kanze will be trained in different fields\ntrained(Hall, photographer) ::: Hall will be trained as a photographer's assistant\nassigned(Jackson, Tuscany) ::: Jackson is assigned to Tuscany\nNot(assigned(Kanze, Spain)) ::: Kanze is not assigned to Spain\n\n# Options\nQuestion ::: If Farber is assigned to Romania, then which one of the following must be true?\nis_valid(And(assigned(Gombarick, Spain), assigned(Farber, Romania))) ::: A) Gombarick is assigned to Spain.\nis_valid(And(assigned(Hall, Spain), assigned(Farber, Romania))) ::: B) Hall is assigned to Spain.\nis_valid(And(assigned(Kanze, Tuscany), assigned(Farber, Romania))) ::: C) Kanze is assigned to Tuscany.\nis_valid(And(assigned(Lha, Spain), assigned(Farber, Romania))) ::: D) Lha is assigned to Spain.\nis_valid(And(assigned(Lha, T"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_4_20",
    "context": "A travel magazine has hired six interns—Farber, Gombarick, Hall, Jackson, Kanze, and Lha—to assist in covering three stories—Romania, Spain, and Tuscany. Each intern will be trained either as a photographer's assistant or as a writer's assistant. Each story is assigned a team of two interns—one photographer's assistant and one writer's assistant—in accordance with the following conditions: Gombarick and Lha will be trained in the same field. Farber and Kanze will be trained in different fields. Hall will be trained as a photographer's assistant. Jackson is assigned to Tuscany. Kanze is not assigned to Spain.",
    "question": "If Farber and Hall are assigned to the same story as each other, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Farber is assigned to Tuscany.",
      "B) Gombarick is assigned to Romania.",
      "C) Hall is assigned to Romania.",
      "D) Kanze is assigned to Tuscany.",
      "E) Lha is assigned to Spain."
    ],
    "raw_logic_programs": [
      "# Declarations\ninterns = EnumSort([Farber, Gombarick, Hall, Jackson, Kanze, Lha])\nstories = EnumSort([Romania, Spain, Tuscany])\ntrained = Function([interns, stories] -> [EnumSort([photographer, writer])])\nassigned = Function([interns, stories] -> [bool])\n\n# Constraints\nForAll([i:interns], Count([s:stories], assigned(i, s)) == 1) ::: Each intern will be trained either as a photographer's assistant or as a writer's assistant\nAnd(trained(Gombarick, Romania) == trained(Lha, Romania), trained(Gombarick, Spain) == trained(Lha, Spain), trained(Gombarick, Tuscany) == trained(Lha, Tuscany)) ::: Gombarick and Lha will be trained in the same field\nAnd(trained(Farber, Romania)!= trained(Kanze, Romania), trained(Farber, Spain)!= trained(Kanze, Spain), trained(Farber, Tuscany)!= trained(Kanze, Tuscany)) ::: Farber and Kanze will be trained in different fields\ntrained(Hall, Romania) == photographer ::: Hall will be trained as a photographer's assistant\nassigned(Jackson, Tuscany) ::: Jackson is assigned to Tuscany\nNot(assigned(Kanze, Spain)) ::: Kanze is not assigned to Spain\n\n# Options\nQuestion ::: If Farber and Hall are assigned to the same story as each other, then which one of the following could be true?\nis_exception(is_sat(assigned(Farber, Tuscany))) ::: A) Farber is assigned to Tuscany.\nis_exception(is_sat(assigned(Gombarick, Romania))) ::: B) Gombarick is assigned to Romania.\nis_exception(is_"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_4_21",
    "context": "A travel magazine has hired six interns—Farber, Gombarick, Hall, Jackson, Kanze, and Lha—to assist in covering three stories—Romania, Spain, and Tuscany. Each intern will be trained either as a photographer's assistant or as a writer's assistant. Each story is assigned a team of two interns—one photographer's assistant and one writer's assistant—in accordance with the following conditions: Gombarick and Lha will be trained in the same field. Farber and Kanze will be trained in different fields. Hall will be trained as a photographer's assistant. Jackson is assigned to Tuscany. Kanze is not assigned to Spain.",
    "question": "If Farber is a writer's assistant, then which one of the following pairs could be the team of interns assigned to Romania?",
    "answer": "D",
    "options": [
      "A) Farber and Gombarick",
      "B) Gombarick and Hall",
      "C) Hall and Kanze",
      "D) Kanze and Lha",
      "E) Lha and Hall"
    ],
    "raw_logic_programs": [
      "# Declarations\ninterns = EnumSort([Farber, Gombarick, Hall, Jackson, Kanze, Lha])\nstories = EnumSort([Romania, Spain, Tuscany])\nfields = EnumSort([photographer, writer])\ntrained = Function([interns, fields] -> [bool])\nassigned = Function([interns, stories] -> [bool])\n\n# Constraints\nForAll([i:interns], Count([f:fields], trained(i, f)) == 1) ::: Each intern will be trained either as a photographer's assistant or as a writer's assistant\nAnd(trained(Gombarick, f), trained(Lha, f)) ::: Gombarick and Lha will be trained in the same field\nAnd(trained(Farber, f), trained(Kanze, f)) ::: Farber and Kanze will be trained in different fields\ntrained(Hall, photographer) ::: Hall will be trained as a photographer's assistant\nassigned(Jackson, Tuscany) ::: Jackson is assigned to Tuscany\nNot(assigned(Kanze, Spain)) ::: Kanze is not assigned to Spain\n\n# Options\nQuestion ::: If Farber is a writer's assistant, then which one of the following pairs could be the team of interns assigned to Romania?\nis_valid(And(trained(Farber, writer), trained(Gombarick, photographer), assigned(Farber, Romania), assigned(Gombarick, Romania))) ::: A) Farber and Gombarick\nis_valid(And(trained(Gombarick, photographer), trained(Hall, writer), assigned(Gombarick, Romania), assigned(Hall, Romania))) ::: B) Gombarick and Hall\nis_valid(And(trained(Hall, photographer), trained(Kanze, writer), assigned(Hall, Romania), assigned(Kanze, Romania))) ::: C"
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_4_22",
    "context": "A travel magazine has hired six interns—Farber, Gombarick, Hall, Jackson, Kanze, and Lha—to assist in covering three stories—Romania, Spain, and Tuscany. Each intern will be trained either as a photographer's assistant or as a writer's assistant. Each story is assigned a team of two interns—one photographer's assistant and one writer's assistant—in accordance with the following conditions: Gombarick and Lha will be trained in the same field. Farber and Kanze will be trained in different fields. Hall will be trained as a photographer's assistant. Jackson is assigned to Tuscany. Kanze is not assigned to Spain.",
    "question": "If Gombarick and Kanze are assigned to the same story as each other, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Farber is assigned to Romania.",
      "B) Gombarick is assigned to Spain.",
      "C) Hall is assigned to Romania.",
      "D) Kanze is assigned to Tuscany.",
      "E) Lha is assigned to Spain."
    ],
    "raw_logic_programs": [
      "# Declarations\ninterns = EnumSort([Farber, Gombarick, Hall, Jackson, Kanze, Lha])\nstories = EnumSort([Romania, Spain, Tuscany])\ntrained = Function([interns, stories] -> [EnumSort([photographer, writer])])\nassigned = Function([interns, stories] -> [bool])\n\n# Constraints\nForAll([i:interns], Count([s:stories], assigned(i, s)) == 1) ::: Each intern will be trained either as a photographer's assistant or as a writer's assistant\nAnd(trained(Gombarick, s) == trained(Lha, s), s!= Romania) ::: Gombarick and Lha will be trained in the same field\nAnd(trained(Farber, s)!= trained(Kanze, s), s!= Spain) ::: Farber and Kanze will be trained in different fields\ntrained(Hall, Romania) == photographer ::: Hall will be trained as a photographer's assistant\nassigned(Jackson, Tuscany) ::: Jackson is assigned to Tuscany\nNot(assigned(Kanze, Spain)) ::: Kanze is not assigned to Spain\n\n# Options\nQuestion ::: If Gombarick and Kanze are assigned to the same story as each other, then which one of the following could be true?\nis_valid(Exists([s:stories], assigned(Farber, s))) ::: A) Farber is assigned to Romania.\nis_valid(Exists([s:stories], assigned(Gombarick, s))) ::: B) Gombarick is assigned to Spain.\nis_valid(Exists([s:stories], assigned(Hall, s))) ::: C) Hall is assigned to Romania.\nis_valid(Exists([s:stories], assigned(Kanze, s))) ::: D) Kanze is assigned to Tuscany.\nis_valid(Exists([s:stories], assigned("
    ]
  },
  {
    "id": "ar_lsat_201006_2-G_4_23",
    "context": "A travel magazine has hired six interns—Farber, Gombarick, Hall, Jackson, Kanze, and Lha—to assist in covering three stories—Romania, Spain, and Tuscany. Each intern will be trained either as a photographer's assistant or as a writer's assistant. Each story is assigned a team of two interns—one photographer's assistant and one writer's assistant—in accordance with the following conditions: Gombarick and Lha will be trained in the same field. Farber and Kanze will be trained in different fields. Hall will be trained as a photographer's assistant. Jackson is assigned to Tuscany. Kanze is not assigned to Spain.",
    "question": "Which one of the following interns CANNOT be assigned to Tuscany?",
    "answer": "C",
    "options": [
      "A) Farber",
      "B) Gombarick",
      "C) Hall",
      "D) Kanze",
      "E) Lha"
    ],
    "raw_logic_programs": [
      "# Declarations\ninterns = EnumSort([Farber, Gombarick, Hall, Jackson, Kanze, Lha])\nstories = EnumSort([Romania, Spain, Tuscany])\ntrained = Function([interns, stories] -> [EnumSort([photographer, writer]])])\nassigned = Function([interns, stories] -> [bool])\n\n# Constraints\nForAll([i:interns], Count([s:stories], assigned(i, s)) == 1) ::: Each intern will be trained either as a photographer's assistant or as a writer's assistant\nAnd(trained(Gombarick, Romania) == trained(Lha, Romania), trained(Gombarick, Spain) == trained(Lha, Spain), trained(Gombarick, Tuscany) == trained(Lha, Tuscany)) ::: Gombarick and Lha will be trained in the same field\nAnd(trained(Farber, Romania)!= trained(Kanze, Romania), trained(Farber, Spain)!= trained(Kanze, Spain), trained(Farber, Tuscany)!= trained(Kanze, Tuscany)) ::: Farber and Kanze will be trained in different fields\ntrained(Hall, Romania) == photographer ::: Hall will be trained as a photographer's assistant\nassigned(Jackson, Tuscany) ::: Jackson is assigned to Tuscany\nNot(assigned(Kanze, Spain)) ::: Kanze is not assigned to Spain\n\n# Options\nQuestion ::: Which one of the following interns CANNOT be assigned to Tuscany?\nis_exception(is_sat(assigned(Farber, Tuscany))) ::: A) Farber\nis_exception(is_sat(assigned(Gombarick, Tuscany))) ::: B) Gombarick\nis_exception(is_sat(assigned(Hall, Tuscany))) ::: C) Hall\nis"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_1_1",
    "context": "Exactly six workers—Faith, Gus, Hannah, Juan, Kenneth, and Lisa—will travel to a business convention in two cars—car 1 and car 2. Each car must carry at least two of the workers, one of whom will be assigned to drive. For the entire trip, the workers will comply with an assignment that also meets the following constraints: Either Faith or Gus must drive the car in which Hannah travels. Either Faith or Kenneth must drive the car in which Juan travels. Gus must travel in the same car as Lisa.",
    "question": "Which one of the following is a possible assignment of the workers to the cars?",
    "answer": "A",
    "options": [
      "A) car 1: Faith (driver), Hannah, and Juan car 2: Gus (driver), Kenneth, and Lisa",
      "B) car 1: Faith (driver), Hannah, and Kenneth car 2: Lisa (driver), Gus, and Juan",
      "C) car 1: Faith (driver), Juan, Kenneth, and Lisa car 2: Gus (driver) and Hannah",
      "D) car 1: Faith (driver) and Juan car 2: Kenneth (driver), Gus, Hannah, and Lisa",
      "E) car 1: Gus (driver), Hannah, and Lisa car 2: Juan (driver), Faith, and Kenneth"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([Faith, Gus, Hannah, Juan, Kenneth, Lisa])\ncars = EnumSort([car_1, car_2])\ndrives = Function([workers, cars] -> [bool])\n\n# Constraints\nForAll([w:workers], Count([c:cars], drives(w, c)) == 1) ::: Each car must carry at least two of the workers\nAnd(drives(Faith, car_1), drives(Hannah, car_1)) ::: Either Faith or Gus must drive the car in which Hannah travels\nAnd(drives(Faith, car_2), drives(Juan, car_2)) ::: Either Faith or Kenneth must drive the car in which Juan travels\ndrives(Gus, car_1) ::: Gus must travel in the same car as Lisa\n\n# Options\nQuestion ::: Which one of the following is a possible assignment of the workers to the cars?\nis_sat(And(drives(Faith, car_1), drives(Hannah, car_1), drives(Juan, car_1), drives(Gus, car_2), drives(Kenneth, car_2), drives(Lisa, car_2))) ::: (A)\nis_sat(And(drives(Faith, car_1), drives(Hannah, car_1), drives(Kenneth, car_1), drives(Lisa, car_2), drives(Gus, car_2), drives(Juan, car_2))) ::: (B)\nis_sat(And(drives(Faith, car_1), drives(Juan, car_1), drives(Kenneth, car_1), drives(Lisa, car_2), drives(Gus, car_2), drives(Hannah, car_2))) ::: (C)\nis_sat(And(drives(Faith, car_1), drives"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_1_2",
    "context": "Exactly six workers—Faith, Gus, Hannah, Juan, Kenneth, and Lisa—will travel to a business convention in two cars—car 1 and car 2. Each car must carry at least two of the workers, one of whom will be assigned to drive. For the entire trip, the workers will comply with an assignment that also meets the following constraints: Either Faith or Gus must drive the car in which Hannah travels. Either Faith or Kenneth must drive the car in which Juan travels. Gus must travel in the same car as Lisa.",
    "question": "The two workers who drive the cars CANNOT be",
    "answer": "E",
    "options": [
      "A) Faith and Gus",
      "B) Faith and Kenneth",
      "C) Faith and Lisa",
      "D) Gus and Kenneth",
      "E) Kenneth and Lisa"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([Faith, Gus, Hannah, Juan, Kenneth, Lisa])\ncars = EnumSort([car_1, car_2])\ndrives = Function([workers, cars] -> [bool])\n\n# Constraints\nForAll([w:workers], Count([c:cars], drives(w, c)) == 1) ::: Each car must carry at least two of the workers\nAnd(drives(Faith, car_1), drives(Hannah, car_1)) ::: Either Faith or Gus must drive the car in which Hannah travels\nAnd(drives(Faith, car_2), drives(Juan, car_2)) ::: Either Faith or Kenneth must drive the car in which Juan travels\ndrives(Gus, car_1) ::: Gus must travel in the same car as Lisa\n\n# Options\nQuestion ::: The two workers who drive the cars CANNOT be\nis_exception(is_sat(drives(Faith, car_1) && drives(Gus, car_2))) ::: (A)\nis_exception(is_sat(drives(Faith, car_1) && drives(Kenneth, car_2))) ::: (B)\nis_exception(is_sat(drives(Faith, car_1) && drives(Lisa, car_2))) ::: (C)\nis_exception(is_sat(drives(Gus, car_1) && drives(Kenneth, car_2))) ::: (D)\nis_exception(is_sat(drives(Kenneth, car_1) && drives(Lisa, car_2))) ::: (E)\n------\nProblem:\nA company has six employees—Fred, Gina, Hank, Iris, Juan, and Karen—who work in either the accounting, human resources, or public relations department. The following conditions apply: Fred and Gina"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_1_3",
    "context": "Exactly six workers—Faith, Gus, Hannah, Juan, Kenneth, and Lisa—will travel to a business convention in two cars—car 1 and car 2. Each car must carry at least two of the workers, one of whom will be assigned to drive. For the entire trip, the workers will comply with an assignment that also meets the following constraints: Either Faith or Gus must drive the car in which Hannah travels. Either Faith or Kenneth must drive the car in which Juan travels. Gus must travel in the same car as Lisa.",
    "question": "If Lisa drives one of the cars, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Faith travels in the same car as Kenneth.",
      "B) Faith travels in the same car as Lisa.",
      "C) Gus travels in the same car as Hannah.",
      "D) Gus travels in the same car as Juan.",
      "E) Hannah travels in the same car as Lisa."
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([Faith, Gus, Hannah, Juan, Kenneth, Lisa])\ncars = EnumSort([car_1, car_2])\ndrives = Function([workers, cars] -> [bool])\n\n# Constraints\nForAll([w:workers], Count([c:cars], drives(w, c)) == 1) ::: Each car must carry at least two of the workers\nAnd(drives(Faith, car_1), drives(Hannah, car_1)) ::: Either Faith or Gus must drive the car in which Hannah travels\nAnd(drives(Faith, car_2), drives(Hannah, car_2)) ::: Either Faith or Gus must drive the car in which Hannah travels\nAnd(drives(Kenneth, car_1), drives(Juan, car_1)) ::: Either Faith or Kenneth must drive the car in which Juan travels\nAnd(drives(Kenneth, car_2), drives(Juan, car_2)) ::: Either Faith or Kenneth must drive the car in which Juan travels\nAnd(drives(Gus, car_1), drives(Lisa, car_1)) ::: Gus must travel in the same car as Lisa\n\n# Options\nQuestion ::: If Lisa drives one of the cars, then which one of the following could be true?\nis_valid(Exists([w:workers], And(drives(w, car_1), drives(Kenneth, car_1)))) ::: (A)\nis_valid(Exists([w:workers], And(drives(w, car_1), drives(Lisa, car_1)))) ::: (B)\nis_valid(Exists([w:workers], And(drives(w, car_1), drives(Hannah, car_1)))) ::: (C)\nis_valid(Exists([w:workers], And(drives(w, car_1), drives(Juan, car_1)))) ::: (D)\nis_valid(Exists([w:workers], And(drives(w, car_1), drives(Hannah, car_1)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_1_4",
    "context": "Exactly six workers—Faith, Gus, Hannah, Juan, Kenneth, and Lisa—will travel to a business convention in two cars—car 1 and car 2. Each car must carry at least two of the workers, one of whom will be assigned to drive. For the entire trip, the workers will comply with an assignment that also meets the following constraints: Either Faith or Gus must drive the car in which Hannah travels. Either Faith or Kenneth must drive the car in which Juan travels. Gus must travel in the same car as Lisa.",
    "question": "If Faith travels with two other workers in car 1, and if Faith is not the driver, then the person in car 1 other than Faith and the driver must be",
    "answer": "C",
    "options": [
      "A) Gus",
      "B) Hannah",
      "C) Juan",
      "D) Kenneth",
      "E) Lisa"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([Faith, Gus, Hannah, Juan, Kenneth, Lisa])\ncars = EnumSort([car_1, car_2])\ndrives = Function([workers, cars] -> [bool])\n\n# Constraints\nForAll([w:workers], Count([c:cars], drives(w, c)) == 1) ::: Each car must carry at least two of the workers\nAnd(drives(Faith, car_1), drives(Gus, car_1)) ::: Either Faith or Gus must drive the car in which Hannah travels\nAnd(drives(Faith, car_1), drives(Kenneth, car_1)) ::: Either Faith or Kenneth must drive the car in which Juan travels\ndrives(Gus, car_1) ::: Gus must travel in the same car as Lisa\n\n# Options\nQuestion ::: If Faith travels with two other workers in car 1, and if Faith is not the driver, then the person in car 1 other than Faith and the driver must be\nis_sat(And(drives(Faith, car_1), drives(Gus, car_1), Not(drives(Faith, car_1)))) ::: A) Gus\nis_sat(And(drives(Faith, car_1), drives(Hannah, car_1), Not(drives(Faith, car_1)))) ::: B) Hannah\nis_sat(And(drives(Faith, car_1), drives(Juan, car_1), Not(drives(Faith, car_1)))) ::: C) Juan\nis_sat(And(drives(Faith, car_1), drives(Kenneth, car_1), Not(drives(Faith, car_1)))) ::: D) Kenneth\nis_sat(And(drives(Faith, car_1), drives(Lisa, car_1), Not(drives(Faith, car_1)))) ::: E) Lisa\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—will be divided into two teams of three people"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_1_5",
    "context": "Exactly six workers—Faith, Gus, Hannah, Juan, Kenneth, and Lisa—will travel to a business convention in two cars—car 1 and car 2. Each car must carry at least two of the workers, one of whom will be assigned to drive. For the entire trip, the workers will comply with an assignment that also meets the following constraints: Either Faith or Gus must drive the car in which Hannah travels. Either Faith or Kenneth must drive the car in which Juan travels. Gus must travel in the same car as Lisa.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "D",
    "options": [
      "A) Gus is the only person other than the driver in one of the cars.",
      "B) Hannah is the only person other than the driver in one of the cars.",
      "C) Juan is the only person other than the driver in one of the cars.",
      "D) Kenneth is the only person other than the driver in one of the cars.",
      "E) Lisa is the only person other than the driver in one of the cars."
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([Faith, Gus, Hannah, Juan, Kenneth, Lisa])\ncars = EnumSort([car_1, car_2])\ndrives = Function([workers, cars] -> [bool])\n\n# Constraints\nForAll([w:workers], Count([c:cars], drives(w, c)) == 1) ::: Each car must carry at least two of the workers\nAnd(drives(Faith, car_1), drives(Hannah, car_1)) ::: Either Faith or Gus must drive the car in which Hannah travels\nAnd(drives(Faith, car_2), drives(Hannah, car_2)) ::: Either Faith or Gus must drive the car in which Hannah travels\nAnd(drives(Kenneth, car_1), drives(Juan, car_1)) ::: Either Faith or Kenneth must drive the car in which Juan travels\nAnd(drives(Kenneth, car_2), drives(Juan, car_2)) ::: Either Faith or Kenneth must drive the car in which Juan travels\ndrives(Gus, car_1) ::: Gus must travel in the same car as Lisa\ndrives(Gus, car_2) ::: Gus must travel in the same car as Lisa\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(ForAll([w:workers], drives(w, car_1) == drives(w, car_2)))) ::: (A)\nis_exception(is_sat(ForAll([w:workers], drives(w, car_1) == drives(w, car_2)))) ::: (B)\nis_exception(is_sat(ForAll([w:workers], drives(w, car_1) == drives(w, car_2)))) ::: (C)\nis_exception(is_sat(ForAll([w:workers], drives(w, car_1) == drives(w, car_2)))) ::: (D)\nis_exception(is_sat(ForAll([w:workers], drives(w, car_1) == drives("
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_2_6",
    "context": "An archaeologist has six ancient artifacts—a figurine, a headdress, a jar, a necklace, a plaque, and a tureen—no two of which are the same age. She will order them from first (oldest) to sixth (most recent). The following has already been determined: The figurine is older than both the jar and the headdress. The necklace and the jar are both older than the tureen. Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque.",
    "question": "Which one of the following could be the artifacts in the order of their age, from first to sixth?",
    "answer": "A",
    "options": [
      "A) figurine, headdress, jar, necklace, plaque, tureen",
      "B) figurine, jar, plaque, headdress, tureen, necklace",
      "C) figurine, necklace, plaque, headdress, jar, tureen",
      "D) necklace, jar, figurine, headdress, plaque, tureen",
      "E) plaque, tureen, figurine, necklace, jar, headdress"
    ],
    "raw_logic_programs": [
      "# Declarations\nartifacts = EnumSort([figurine, headdress, jar, necklace, plaque, tureen])\nages = Function([artifacts] -> [int])\nForAll([a:artifacts], And(1 <= ages(a), ages(a) <= 6))\n\n# Constraints\nAnd(ages(figurine) < ages(jar), ages(figurine) < ages(headdress)) ::: The figurine is older than both the jar and the headdress\nAnd(ages(necklace) < ages(tureen), ages(jar) < ages(tureen)) ::: The necklace and the jar are both older than the tureen\nOr(And(ages(plaque) < ages(headdress), ages(plaque) < ages(necklace)), And(ages(headdress) < ages(plaque), ages(necklace) < ages(plaque))) ::: Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque\n\n# Options\nQuestion ::: Which one of the following could be the artifacts in the order of their age, from first to sixth?\nis_sat(ForAll([a:artifacts], ages(a) == [1, 2, 3, 4, 5, 6][a])) ::: A) figurine, headdress, jar, necklace, plaque, tureen\nis_sat(ForAll([a:artifacts], ages(a) == [1, 3, 5, 2, 6, 4][a])) ::: B) figurine, jar, plaque, headdress, tureen, necklace\nis_sat(ForAll([a:artifacts], ages(a) == [1, 4, 5, 2, 6, 3][a])) ::: C) figurine, necklace, plaque, headdress, jar, tureen\nis_sat(ForAll([a:artifacts], ages(a) == [4, 1, 2, 5, 6, 3][a])) ::: D) necklace, jar, figurine, headdress, plaque, tureen\nis_sat(ForAll(["
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_2_7",
    "context": "An archaeologist has six ancient artifacts—a figurine, a headdress, a jar, a necklace, a plaque, and a tureen—no two of which are the same age. She will order them from first (oldest) to sixth (most recent). The following has already been determined: The figurine is older than both the jar and the headdress. The necklace and the jar are both older than the tureen. Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque.",
    "question": "Exactly how many of the artifacts are there any one of which could be first?",
    "answer": "C",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nartifacts = EnumSort([figurine, headdress, jar, necklace, plaque, tureen])\nages = Function([artifacts] -> [int])\nForAll([a:artifacts], And(1 <= ages(a), ages(a) <= 6))\n\n# Constraints\nAnd(ages(figurine) < ages(jar), ages(figurine) < ages(headdress)) ::: The figurine is older than both the jar and the headdress\nAnd(ages(necklace) < ages(tureen), ages(jar) < ages(tureen)) ::: The necklace and the jar are both older than the tureen\nOr(And(ages(plaque) < ages(headdress), ages(plaque) < ages(necklace)), And(ages(headdress) < ages(plaque), ages(necklace) < ages(plaque))) ::: Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque\n\n# Options\nQuestion ::: Exactly how many of the artifacts are there any one of which could be first?\nis_sat(ForAll([a:artifacts], ages(a) == 1)) ::: A) one\nis_sat(ForAll([a:artifacts], ages(a) == 2)) ::: B) two\nis_sat(ForAll([a:artifacts], ages(a) == 3)) ::: C) three\nis_sat(ForAll([a:artifacts], ages(a) == 4)) ::: D) four\nis_sat(ForAll([a:artifacts], ages(a) == 5)) ::: E) five\n------\nProblem:\nA certain company has six employees—A, B, C, D, E, and F—who are to be assigned to three different projects—1, 2, and 3—in such a way that each employee works on exactly one project and each project has exactly two employees assigned to it. The following conditions apply: A and B are assigned to the same project. C is assigned to project 1. D is assigned to project 2. E is assigned to project 3.\nQuestion:\nWhich one of the following must"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_2_8",
    "context": "An archaeologist has six ancient artifacts—a figurine, a headdress, a jar, a necklace, a plaque, and a tureen—no two of which are the same age. She will order them from first (oldest) to sixth (most recent). The following has already been determined: The figurine is older than both the jar and the headdress. The necklace and the jar are both older than the tureen. Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque.",
    "question": "Which one of the following artifacts CANNOT be fourth?",
    "answer": "A",
    "options": [
      "A) figurine",
      "B) headdress",
      "C) jar",
      "D) necklace",
      "E) plaque"
    ],
    "raw_logic_programs": [
      "# Declarations\nartifacts = EnumSort([figurine, headdress, jar, necklace, plaque, tureen])\nages = Function([artifacts] -> [int])\nForAll([a:artifacts], And(1 <= ages(a), ages(a) <= 6))\n\n# Constraints\nDistinct([a:artifacts], ages(a)) ::: no two artifacts are the same age\nages(figurine) < ages(jar) ::: The figurine is older than both the jar and the headdress\nages(figurine) < ages(headdress) ::: The figurine is older than both the jar and the headdress\nages(necklace) < ages(tureen) ::: The necklace and the jar are both older than the tureen\nages(jar) < ages(tureen) ::: The necklace and the jar are both older than the tureen\nOr(ages(plaque) < ages(headdress), ages(headdress) < ages(plaque)) ::: Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque\nOr(ages(plaque) < ages(necklace), ages(necklace) < ages(plaque)) ::: Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque\n\n# Options\nQuestion ::: Which one of the following artifacts CANNOT be fourth?\nis_exception(is_sat(ages(figurine) == 4)) ::: A) figurine\nis_exception(is_sat(ages(headdress) == 4)) ::: B) headdress\nis_exception(is_sat(ages(jar) == 4)) ::: C) jar\nis_exception(is_sat(ages(necklace) == 4)) ::: D) necklace\nis_exception(is_sat(ages(plaque) == 4)) ::: E) plaque\n------\nProblem:\nA group of six people—A, B, C, D, E, and F—will be divided into two groups of three. Each person will be in exactly one of the two groups. The following conditions"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_2_9",
    "context": "An archaeologist has six ancient artifacts—a figurine, a headdress, a jar, a necklace, a plaque, and a tureen—no two of which are the same age. She will order them from first (oldest) to sixth (most recent). The following has already been determined: The figurine is older than both the jar and the headdress. The necklace and the jar are both older than the tureen. Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque.",
    "question": "If the figurine is third, which one of the following must be second?",
    "answer": "C",
    "options": [
      "A) headdress",
      "B) jar",
      "C) necklace",
      "D) plaque",
      "E) tureen"
    ],
    "raw_logic_programs": [
      "# Declarations\nartifacts = EnumSort([figurine, headdress, jar, necklace, plaque, tureen])\nages = Function([artifacts] -> [int])\nForAll([a:artifacts], And(1 <= ages(a), ages(a) <= 6))\n\n# Constraints\nDistinct([a:artifacts], ages(a)) ::: no two artifacts are the same age\nAnd(ages(figurine) < ages(jar), ages(figurine) < ages(headdress)) ::: The figurine is older than both the jar and the headdress\nAnd(ages(necklace) < ages(tureen), ages(jar) < ages(tureen)) ::: The necklace and the jar are both older than the tureen\nOr(ages(plaque) < ages(headdress), ages(plaque) < ages(necklace)) ::: Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque\n\n# Options\nQuestion ::: If the figurine is third, which one of the following must be second?\nis_exception(is_sat(ages(headdress) == 2)) ::: A) headdress\nis_exception(is_sat(ages(jar) == 2)) ::: B) jar\nis_exception(is_sat(ages(necklace) == 2)) ::: C) necklace\nis_exception(is_sat(ages(plaque) == 2)) ::: D) plaque\nis_exception(is_sat(ages(tureen) == 2)) ::: E) tureen\n------\nProblem:\nA company has six employees—A, B, C, D, E, and F—who are to be assigned to three different projects—X, Y, and Z—in such a way that each employee is assigned to exactly one project and each project is assigned to exactly two employees. The following conditions apply: A and B are assigned to the same project. C and D are assigned to the same project. E and F are assigned to the same project. A and C are assigned to different projects. B and D are assigned to different projects.\nQuestion:\nWhich one of the following pairs of employees must be"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_2_10",
    "context": "An archaeologist has six ancient artifacts—a figurine, a headdress, a jar, a necklace, a plaque, and a tureen—no two of which are the same age. She will order them from first (oldest) to sixth (most recent). The following has already been determined: The figurine is older than both the jar and the headdress. The necklace and the jar are both older than the tureen. Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque.",
    "question": "If the plaque is first, then exactly how many artifacts are there any one of which could be second?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nartifacts = EnumSort([figurine, headdress, jar, necklace, plaque, tureen])\nages = EnumSort([first, second, third, fourth, fifth, sixth])\nage = Function([artifacts] -> [ages])\n\n# Constraints\nForAll([a:artifacts], age(a)!= age(a)) ::: no two artifacts are the same age\nAnd(age(figurine) < age(jar), age(figurine) < age(headdress)) ::: The figurine is older than both the jar and the headdress\nAnd(age(necklace) < age(tureen), age(jar) < age(tureen)) ::: The necklace and the jar are both older than the tureen\nOr(age(plaque) < age(headdress), age(plaque) < age(necklace)) ::: Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque\n\n# Options\nQuestion ::: If the plaque is first, then exactly how many artifacts are there any one of which could be second?\nis_sat(ForAll([a:artifacts], age(a) == second)) ::: A) one\nis_sat(ForAll([a:artifacts], age(a) == second)) ::: B) two\nis_sat(ForAll([a:artifacts], age(a) == second)) ::: C) three\nis_sat(ForAll([a:artifacts], age(a) == second)) ::: D) four\nis_sat(ForAll([a:artifacts], age(a) == second)) ::: E) five\n------\nProblem:\nA certain company has six employees—A, B, C, D, E, and F—who work in pairs to complete specific projects. The following conditions apply: B and D are a team. A and C are a team. E and F are a team. A and D are a team. B and E are a team.\nQuestion:\nWhich one of the following must be true?\nChoices:\n(A) A and B are a team.\n(B) A and E are a team.\n(C) B and C are"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_2_11",
    "context": "An archaeologist has six ancient artifacts—a figurine, a headdress, a jar, a necklace, a plaque, and a tureen—no two of which are the same age. She will order them from first (oldest) to sixth (most recent). The following has already been determined: The figurine is older than both the jar and the headdress. The necklace and the jar are both older than the tureen. Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque.",
    "question": "Which one of the following, if substituted for the information that the necklace and the jar are both older than the tureen, would have the same effect in determining the order of the artifacts?",
    "answer": "D",
    "options": [
      "A) The tureen is older than the headdress but not as old as the figurine.",
      "B) The figurine and the necklace are both older than the tureen.",
      "C) The necklace is older than the tureen if and only if the jar is.",
      "D) All of the artifacts except the headdress and the plaque must be older than the tureen.",
      "E) The plaque is older than the necklace if and only if the plaque is older than the tureen."
    ],
    "raw_logic_programs": [
      "# Declarations\nartifacts = EnumSort([figurine, headdress, jar, necklace, plaque, tureen])\nages = Function([artifacts] -> [int])\nForAll([a:artifacts], And(1 <= ages(a), ages(a) <= 6))\n\n# Constraints\nDistinct([a:artifacts], ages(a)) ::: no two artifacts are the same age\nages(figurine) < ages(jar) ::: The figurine is older than both the jar and the headdress\nages(figurine) < ages(headdress) ::: The figurine is older than both the jar and the headdress\nages(necklace) < ages(tureen) ::: The necklace and the jar are both older than the tureen\nages(jar) < ages(tureen) ::: The necklace and the jar are both older than the tureen\nOr(And(ages(plaque) < ages(headdress), ages(plaque) < ages(necklace)), And(ages(headdress) < ages(plaque), ages(necklace) < ages(plaque))) ::: Either the plaque is older than both the headdress and the necklace, or both the headdress and the necklace are older than the plaque\n\n# Options\nQuestion ::: Which one of the following, if substituted for the information that the necklace and the jar are both older than the tureen, would have the same effect in determining the order of the artifacts?\nis_sat(ForAll([a:artifacts], ages(a) == 1)) ::: A) The tureen is older than the headdress but not as old as the figurine.\nis_sat(ForAll([a:artifacts], ages(a) == 1)) ::: B) The figurine and the necklace are both older than the tureen.\nis_sat(ForAll([a:artifacts], ages(a) == 1)) ::: C) The necklace is older than the tureen if and only if the jar is.\nis_sat(ForAll([a:artifacts], ages(a) == 1)) ::: D) All of the artifacts except the headdress and the plaque must be older than the"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_3_12",
    "context": "The coach of a women's track team must determine which four of five runners—Quinn, Ramirez, Smith, Terrell, and Uzoma—will run in the four races of an upcoming track meet. Each of the four runners chosen will run in exactly one of the four races—the first, second, third, or fourth. The coach's selection is bound by the following constraints: If Quinn runs in the track meet, then Terrell runs in the race immediately after the race in which Quinn runs. Smith does not run in either the second race or the fourth race. If Uzoma does not run in the track meet, then Ramirez runs in the second race. If Ramirez runs in the second race, then Uzoma does not run in the track meet.",
    "question": "Which one of the following could be the order in which the runners run, from first to fourth?",
    "answer": "D",
    "options": [
      "A) Uzoma, Ramirez, Quinn, Terrell",
      "B) Terrell, Smith, Ramirez, Uzoma",
      "C) Smith, Ramirez, Terrell, Quinn",
      "D) Ramirez, Uzoma, Smith, Terrell",
      "E) Quinn, Terrell, Smith, Ramirez"
    ],
    "raw_logic_programs": [
      "# Declarations\nrunners = EnumSort([Quinn, Ramirez, Smith, Terrell, Uzoma])\nraces = EnumSort([first, second, third, fourth])\nruns = Function([runners, races] -> [bool])\n\n# Constraints\nForAll([r:runners], Count([r:races], runs(r, r)) == 1) ::: Each of the four runners chosen will run in exactly one of the four races\nAnd(runs(Quinn, first), runs(Terrell, second)) ::: If Quinn runs in the track meet, then Terrell runs in the race immediately after the race in which Quinn runs\nNot(And(runs(Smith, second), runs(Smith, fourth))) ::: Smith does not run in either the second race or the fourth race\nAnd(Not(runs(Uzoma, first)), runs(Ramirez, second)) ::: If Uzoma does not run in the track meet, then Ramirez runs in the second race\nAnd(runs(Ramirez, second), Not(runs(Uzoma, first))) ::: If Ramirez runs in the second race, then Uzoma does not run in the track meet\n\n# Options\nQuestion ::: Which one of the following could be the order in which the runners run, from first to fourth?\nis_sat(And(runs(Uzoma, first), runs(Ramirez, second), runs(Quinn, third), runs(Terrell, fourth))) ::: (A)\nis_sat(And(runs(Terrell, first), runs(Smith, second), runs(Ramirez, third), runs(Uzoma, fourth))) ::: (B)\nis_sat(And(runs(Smith, first), runs(Ramirez, second), runs(Terrell, third), runs(Quinn, fourth))) ::: (C)\nis_sat(And(runs(Ramirez, first), runs(Uzoma, second), runs(Smith, third), runs(Terrell, fourth))) ::: (D)\nis_sat(And(runs(Quinn, first), runs(Terrell, second), runs(Smith, third), runs(R"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_3_13",
    "context": "The coach of a women's track team must determine which four of five runners—Quinn, Ramirez, Smith, Terrell, and Uzoma—will run in the four races of an upcoming track meet. Each of the four runners chosen will run in exactly one of the four races—the first, second, third, or fourth. The coach's selection is bound by the following constraints: If Quinn runs in the track meet, then Terrell runs in the race immediately after the race in which Quinn runs. Smith does not run in either the second race or the fourth race. If Uzoma does not run in the track meet, then Ramirez runs in the second race. If Ramirez runs in the second race, then Uzoma does not run in the track meet.",
    "question": "Which one of the following runners must the coach select to run in the track meet?",
    "answer": "D",
    "options": [
      "A) Quinn",
      "B) Ramirez",
      "C) Smith",
      "D) Terrell",
      "E) Uzoma"
    ],
    "raw_logic_programs": [
      "# Declarations\nrunners = EnumSort([Quinn, Ramirez, Smith, Terrell, Uzoma])\nraces = EnumSort([first, second, third, fourth])\nruns = Function([runners, races] -> [bool])\n\n# Constraints\nForAll([r:runners], Count([r:races], runs(r, r)) == 1) ::: Each of the four runners chosen will run in exactly one of the four races\nAnd(runs(Quinn, first), runs(Terrell, second)) ::: If Quinn runs in the track meet, then Terrell runs in the race immediately after the race in which Quinn runs\nAnd(Not(runs(Smith, second)), Not(runs(Smith, fourth))) ::: Smith does not run in either the second race or the fourth race\nAnd(Not(runs(Uzoma, first)), runs(Ramirez, second)) ::: If Uzoma does not run in the track meet, then Ramirez runs in the second race\nAnd(runs(Ramirez, second), Not(runs(Uzoma, first))) ::: If Ramirez runs in the second race, then Uzoma does not run in the track meet\n\n# Options\nQuestion ::: Which one of the following runners must the coach select to run in the track meet?\nis_valid(Exists([r:runners], runs(r, first))) ::: A) Quinn\nis_valid(Exists([r:runners], runs(r, second))) ::: B) Ramirez\nis_valid(Exists([r:runners], runs(r, third))) ::: C) Smith\nis_valid(Exists([r:runners], runs(r, fourth))) ::: D) Terrell\nis_valid(Exists([r:runners], runs(r, first))) ::: E) Uzoma\n------"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_3_14",
    "context": "The coach of a women's track team must determine which four of five runners—Quinn, Ramirez, Smith, Terrell, and Uzoma—will run in the four races of an upcoming track meet. Each of the four runners chosen will run in exactly one of the four races—the first, second, third, or fourth. The coach's selection is bound by the following constraints: If Quinn runs in the track meet, then Terrell runs in the race immediately after the race in which Quinn runs. Smith does not run in either the second race or the fourth race. If Uzoma does not run in the track meet, then Ramirez runs in the second race. If Ramirez runs in the second race, then Uzoma does not run in the track meet.",
    "question": "The question of which runners will be chosen to run in the track meet and in what races they will run can be completely resolved if which one of the following is true?",
    "answer": "B",
    "options": [
      "A) Ramirez runs in the first race.",
      "B) Ramirez runs in the second race.",
      "C) Ramirez runs in the third race.",
      "D) Ramirez runs in the fourth race.",
      "E) Ramirez does not run in the track meet."
    ],
    "raw_logic_programs": [
      "# Declarations\nrunners = EnumSort([Quinn, Ramirez, Smith, Terrell, Uzoma])\nraces = EnumSort([first, second, third, fourth])\nruns = Function([runners, races] -> [bool])\n\n# Constraints\nForAll([r:runners], Count([r:races], runs(r, r)) == 1) ::: Each of the four runners chosen will run in exactly one of the four races\nAnd(runs(Quinn, first), runs(Terrell, second)) ::: If Quinn runs in the track meet, then Terrell runs in the race immediately after the race in which Quinn runs\nNot(And(runs(Smith, second), runs(Smith, fourth))) ::: Smith does not run in either the second race or the fourth race\nAnd(Not(runs(Uzoma, first)), runs(Ramirez, second)) ::: If Uzoma does not run in the track meet, then Ramirez runs in the second race\nAnd(runs(Ramirez, second), Not(runs(Uzoma, first))) ::: If Ramirez runs in the second race, then Uzoma does not run in the track meet\n\n# Options\nQuestion ::: The question of which runners will be chosen to run in the track meet and in what races they will run can be completely resolved if which one of the following is true?\nis_exception(is_sat(runs(Ramirez, first))) ::: (A)\nis_exception(is_sat(runs(Ramirez, second))) ::: (B)\nis_exception(is_sat(runs(Ramirez, third))) ::: (C)\nis_exception(is_sat(runs(Ramirez, fourth))) ::: (D)\nis_exception(is_sat"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_3_15",
    "context": "The coach of a women's track team must determine which four of five runners—Quinn, Ramirez, Smith, Terrell, and Uzoma—will run in the four races of an upcoming track meet. Each of the four runners chosen will run in exactly one of the four races—the first, second, third, or fourth. The coach's selection is bound by the following constraints: If Quinn runs in the track meet, then Terrell runs in the race immediately after the race in which Quinn runs. Smith does not run in either the second race or the fourth race. If Uzoma does not run in the track meet, then Ramirez runs in the second race. If Ramirez runs in the second race, then Uzoma does not run in the track meet.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "A",
    "options": [
      "A) Ramirez runs in the race immediately before the race in which Smith runs.",
      "B) Smith runs in the race immediately before the race in which Quinn runs.",
      "C) Smith runs in the race immediately before the race in which Terrell runs.",
      "D) Terrell runs in the race immediately before the race in which Ramirez runs.",
      "E) Uzoma runs in the race immediately before the race in which Terrell runs."
    ],
    "raw_logic_programs": [
      "# Declarations\nrunners = EnumSort([Quinn, Ramirez, Smith, Terrell, Uzoma])\nraces = EnumSort([first, second, third, fourth])\nruns = Function([runners, races] -> [bool])\n\n# Constraints\nForAll([r:runners], Count([r:races], runs(r, r)) == 1) ::: Each of the four runners chosen will run in exactly one of the four races\nAnd(runs(Quinn, first), runs(Terrell, second)) ::: If Quinn runs in the track meet, then Terrell runs in the race immediately after the race in which Quinn runs\nNot(And(runs(Smith, second), runs(Smith, fourth))) ::: Smith does not run in either the second race or the fourth race\nAnd(Not(runs(Uzoma, first)), runs(Ramirez, second)) ::: If Uzoma does not run in the track meet, then Ramirez runs in the second race\nAnd(runs(Ramirez, second), Not(runs(Uzoma, first))) ::: If Ramirez runs in the second race, then Uzoma does not run in the track meet\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(And(runs(Ramirez, first), runs(Smith, second)))) ::: (A)\nis_exception(is_sat(And(runs(Smith, first), runs(Quinn, second)))) ::: (B)\nis_exception(is_sat(And(runs(Smith, first), runs(Terrell, second)))) ::: (C)\nis_exception(is_sat(And(runs(Terrell, first), runs(Ramirez, second)))) ::: (D)\nis"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_3_16",
    "context": "The coach of a women's track team must determine which four of five runners—Quinn, Ramirez, Smith, Terrell, and Uzoma—will run in the four races of an upcoming track meet. Each of the four runners chosen will run in exactly one of the four races—the first, second, third, or fourth. The coach's selection is bound by the following constraints: If Quinn runs in the track meet, then Terrell runs in the race immediately after the race in which Quinn runs. Smith does not run in either the second race or the fourth race. If Uzoma does not run in the track meet, then Ramirez runs in the second race. If Ramirez runs in the second race, then Uzoma does not run in the track meet.",
    "question": "If Uzoma runs in the first race, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Quinn does not run in the track meet.",
      "B) Smith does not run in the track meet.",
      "C) Quinn runs in the second race.",
      "D) Terrell runs in the second race.",
      "E) Ramirez runs in the fourth race."
    ],
    "raw_logic_programs": [
      "# Declarations\nrunners = EnumSort([Quinn, Ramirez, Smith, Terrell, Uzoma])\nraces = EnumSort([first, second, third, fourth])\nruns = Function([runners, races] -> [bool])\n\n# Constraints\nForAll([r:runners], Count([r:races], runs(r, r)) == 1) ::: Each of the four runners chosen will run in exactly one of the four races\nAnd(runs(Quinn, first), runs(Terrell, second)) ::: If Quinn runs in the track meet, then Terrell runs in the race immediately after the race in which Quinn runs\nNot(And(runs(Smith, second), runs(Smith, fourth))) ::: Smith does not run in either the second race or the fourth race\nAnd(Not(runs(Uzoma, first)), runs(Ramirez, second)) ::: If Uzoma does not run in the track meet, then Ramirez runs in the second race\nAnd(runs(Ramirez, second), Not(runs(Uzoma, first))) ::: If Ramirez runs in the second race, then Uzoma does not run in the track meet\n\n# Options\nQuestion ::: If Uzoma runs in the first race, then which one of the following must be true?\nis_exception(is_sat(Not(runs(Quinn, first)))) ::: (A)\nis_exception(is_sat(Not(runs(Smith, first)))) ::: (B)\nis_exception(is_sat(runs(Quinn, second))) ::: (C)\nis_exception(is_sat(runs(Terrell, second))) ::: (D)\nis_exception(is_sat(runs(Ramirez, fourth))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_3_17",
    "context": "The coach of a women's track team must determine which four of five runners—Quinn, Ramirez, Smith, Terrell, and Uzoma—will run in the four races of an upcoming track meet. Each of the four runners chosen will run in exactly one of the four races—the first, second, third, or fourth. The coach's selection is bound by the following constraints: If Quinn runs in the track meet, then Terrell runs in the race immediately after the race in which Quinn runs. Smith does not run in either the second race or the fourth race. If Uzoma does not run in the track meet, then Ramirez runs in the second race. If Ramirez runs in the second race, then Uzoma does not run in the track meet.",
    "question": "If both Quinn and Smith run in the track meet, then how many of the runners are there any one of whom could be the one who runs in the first race?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nrunners = EnumSort([Quinn, Ramirez, Smith, Terrell, Uzoma])\nraces = EnumSort([first, second, third, fourth])\nruns = Function([runners, races] -> [bool])\n\n# Constraints\nForAll([r:runners], Count([r:races], runs(r, r)) == 1) ::: Each of the four runners chosen will run in exactly one of the four races\nAnd(runs(Quinn, first), runs(Terrell, second)) ::: If Quinn runs in the track meet, then Terrell runs in the race immediately after the race in which Quinn runs\nNot(And(runs(Smith, second), runs(Smith, fourth))) ::: Smith does not run in either the second race or the fourth race\nAnd(Not(runs(Uzoma, first)), runs(Ramirez, second)) ::: If Uzoma does not run in the track meet, then Ramirez runs in the second race\nAnd(runs(Ramirez, second), Not(runs(Uzoma, first))) ::: If Ramirez runs in the second race, then Uzoma does not run in the track meet\n\n# Options\nQuestion ::: If both Quinn and Smith run in the track meet, then how many of the runners are there any one of whom could be the one who runs in the first race?\nis_sat(ForAll([r:runners], Implies(runs(Quinn, first), runs(Smith, first)), runs(r, first)))) ::: A) one\nis_sat(ForAll([r:runners], Implies(runs(Quinn, first), runs(Smith, first)), runs(r, first)), 2)) ::: B) two\nis_sat(ForAll([r:runners], Implies(runs(Qu"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_4_18",
    "context": "From the 1st through the 7th of next month, seven nurses—Farnham, Griseldi, Heany, Juarez, Khan, Lightfoot, and Moreau—will each conduct one information session at a community center. Each nurse's session will fall on a different day. The nurses' schedule is governed by the following constraints: At least two of the other nurses' sessions must fall in between Heany's session and Moreau's session. Griseldi's session must be on the day before Khan's. Juarez's session must be on a later day than Moreau's. Farnham's session must be on an earlier day than Khan's but on a later day than Lightfoot's. Lightfoot cannot conduct the session on the 2nd.",
    "question": "Which one of the following could be the order of the nurses' sessions, from first to last?",
    "answer": "D",
    "options": [
      "A) Farnham, Griseldi, Khan, Moreau, Juarez, Lightfoot, Heany",
      "B) Heany, Lightfoot, Farnham, Moreau, Juarez, Griseldi, Khan",
      "C) Juarez, Heany, Lightfoot, Farnham, Moreau, Griseldi, Khan",
      "D) Lightfoot, Moreau, Farnham, Juarez, Griseldi, Khan, Heany",
      "E) Moreau, Lightfoot, Heany, Juarez, Farnham, Griseldi, Khan"
    ],
    "raw_logic_programs": [
      "# Declarations\nnurses = EnumSort([Farnham, Griseldi, Heany, Juarez, Khan, Lightfoot, Moreau])\ndays = EnumSort([1, 2, 3, 4, 5, 6, 7])\nsessions = Function([nurses, days] -> [bool])\n\n# Constraints\nForAll([n:nurses], Count([d:days], sessions(n, d)) == 1) ::: each nurse's session will fall on a different day\nAnd(sessions(Heany, d1), sessions(Moreau, d2), d1 < d2, Count([d:days], d1 < d < d2) >= 2) ::: At least two of the other nurses' sessions must fall in between Heany's session and Moreau's session\nsessions(Griseldi, d1), sessions(Khan, d2), d1 < d2 ::: Griseldi's session must be on the day before Khan's\nsessions(Juarez, d1), sessions(Moreau, d2), d1 > d2 ::: Juarez's session must be on a later day than Moreau's\nsessions(Farnham, d1), sessions(Khan, d2), d1 < d2, sessions(Farnham, d3), sessions(Lightfoot, d4), d3 > d4 ::: Farnham's session must be on an earlier day than Khan's but on a later day than Lightfoot's\nNot(sessions(Lightfoot, 2)) ::: Lightfoot cannot conduct the session on the 2nd\n\n# Options\nQuestion ::: Which one of the following could be the order of the nurses' sessions, from first to last?\nis_sat(ForAll([n:nurses], sessions(n"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_4_19",
    "context": "From the 1st through the 7th of next month, seven nurses—Farnham, Griseldi, Heany, Juarez, Khan, Lightfoot, and Moreau—will each conduct one information session at a community center. Each nurse's session will fall on a different day. The nurses' schedule is governed by the following constraints: At least two of the other nurses' sessions must fall in between Heany's session and Moreau's session. Griseldi's session must be on the day before Khan's. Juarez's session must be on a later day than Moreau's. Farnham's session must be on an earlier day than Khan's but on a later day than Lightfoot's. Lightfoot cannot conduct the session on the 2nd.",
    "question": "Juarez's session CANNOT be on which one of the following days?",
    "answer": "C",
    "options": [
      "A) the 2nd",
      "B) the 3rd",
      "C) the 5th",
      "D) the 6th",
      "E) the 7th"
    ],
    "raw_logic_programs": [
      "# Declarations\nnurses = EnumSort([Farnham, Griseldi, Heany, Juarez, Khan, Lightfoot, Moreau])\ndays = EnumSort([1, 2, 3, 4, 5, 6, 7])\nsession = Function([nurses, days] -> [bool])\n\n# Constraints\nForAll([n:nurses], Count([d:days], session(n, d)) == 1) ::: each nurse's session will fall on a different day\nAnd(session(Heany, d1), session(Moreau, d2), d1 < d2, Count([d:days], And(d1 < d < d2, session(n, d))) >= 2) ::: At least two of the other nurses' sessions must fall in between Heany's session and Moreau's session\nsession(Griseldi, d1), session(Khan, d2), d1 < d2 ::: Griseldi's session must be on the day before Khan's\nsession(Juarez, d1), session(Moreau, d2), d1 > d2 ::: Juarez's session must be on a later day than Moreau's\nsession(Farnham, d1), session(Khan, d2), d1 < d2, session(Lightfoot, d3), d3 < d1 ::: Farnham's session must be on an earlier day than Khan's but on a later day than Lightfoot's\nNot(session(Lightfoot, 2)) ::: Lightfoot cannot conduct the session on the 2nd\n\n# Options\nQuestion ::: Juarez's session CANNOT be on which one of the following days?\nis_exception(is_sat(session(Juarez, 2))) ::: (A)\nis_exception"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_4_20",
    "context": "From the 1st through the 7th of next month, seven nurses—Farnham, Griseldi, Heany, Juarez, Khan, Lightfoot, and Moreau—will each conduct one information session at a community center. Each nurse's session will fall on a different day. The nurses' schedule is governed by the following constraints: At least two of the other nurses' sessions must fall in between Heany's session and Moreau's session. Griseldi's session must be on the day before Khan's. Juarez's session must be on a later day than Moreau's. Farnham's session must be on an earlier day than Khan's but on a later day than Lightfoot's. Lightfoot cannot conduct the session on the 2nd.",
    "question": "If Juarez's session is on the 3rd, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Moreau's session is on the 1st.",
      "B) Khan's session is on the 5th.",
      "C) Heany's session is on the 6th.",
      "D) Griseldi's session is on the 5th.",
      "E) Farnham's session is on the 2nd."
    ],
    "raw_logic_programs": [
      "# Declarations\nnurses = EnumSort([Farnham, Griseldi, Heany, Juarez, Khan, Lightfoot, Moreau])\ndays = EnumSort([1, 2, 3, 4, 5, 6, 7])\nsessions = Function([nurses, days] -> [bool])\n\n# Constraints\nForAll([n:nurses], Count([d:days], sessions(n, d)) == 1) ::: each nurse's session will fall on a different day\nAnd(sessions(Heany, d1), sessions(Moreau, d2), d1 < d2, Count([d:days], And(d1 < d < d2, sessions(n, d))) >= 2) ::: At least two of the other nurses' sessions must fall in between Heany's session and Moreau's session\nsessions(Griseldi, d1), sessions(Khan, d2), d1 < d2 ::: Griseldi's session must be on the day before Khan's\nsessions(Juarez, d1), sessions(Moreau, d2), d1 > d2 ::: Juarez's session must be on a later day than Moreau's\nsessions(Farnham, d1), sessions(Khan, d2), d1 < d2, sessions(Farnham, d3), sessions(Lightfoot, d4), d3 > d4 ::: Farnham's session must be on an earlier day than Khan's but on a later day than Lightfoot's\nNot(sessions(Lightfoot, 2)) ::: Lightfoot cannot conduct the session on the 2nd\nsessions(Juarez, 3) ::: Juarez's session is on the 3rd\n\n# Options\nQuestion ::: If Juarez's"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_4_21",
    "context": "From the 1st through the 7th of next month, seven nurses—Farnham, Griseldi, Heany, Juarez, Khan, Lightfoot, and Moreau—will each conduct one information session at a community center. Each nurse's session will fall on a different day. The nurses' schedule is governed by the following constraints: At least two of the other nurses' sessions must fall in between Heany's session and Moreau's session. Griseldi's session must be on the day before Khan's. Juarez's session must be on a later day than Moreau's. Farnham's session must be on an earlier day than Khan's but on a later day than Lightfoot's. Lightfoot cannot conduct the session on the 2nd.",
    "question": "If Khan's session is on an earlier day than Moreau's, which one of the following could conduct the session on the 3rd?",
    "answer": "B",
    "options": [
      "A) Griseldi",
      "B) Heany",
      "C) Juarez",
      "D) Lightfoot",
      "E) Moreau"
    ],
    "raw_logic_programs": [
      "# Declarations\nnurses = EnumSort([Farnham, Griseldi, Heany, Juarez, Khan, Lightfoot, Moreau])\ndays = EnumSort([1, 2, 3, 4, 5, 6, 7])\nsessions = Function([nurses, days] -> [bool])\n\n# Constraints\nForAll([n:nurses], Count([d:days], sessions(n, d)) == 1) ::: each nurse's session will fall on a different day\nAnd(sessions(Heany, d1), sessions(Moreau, d2), d1 < d2, Count([d:days], d1 < d < d2) >= 2) ::: At least two of the other nurses' sessions must fall in between Heany's session and Moreau's session\nsessions(Griseldi, d1), sessions(Khan, d2), d1 < d2 ::: Griseldi's session must be on the day before Khan's\nsessions(Juarez, d1), sessions(Moreau, d2), d1 > d2 ::: Juarez's session must be on a later day than Moreau's\nsessions(Farnham, d1), sessions(Khan, d2), d1 > d2, sessions(Farnham, d3), sessions(Lightfoot, d4), d3 < d4 ::: Farnham's session must be on an earlier day than Khan's but on a later day than Lightfoot's\nNot(sessions(Lightfoot, 2)) ::: Lightfoot cannot conduct the session on the 2nd\n\n# Options\nQuestion ::: If Khan's session is on an earlier day than Moreau's, which one of the following could conduct the session on the 3rd?\nis_valid(Exists([n:"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_4_22",
    "context": "From the 1st through the 7th of next month, seven nurses—Farnham, Griseldi, Heany, Juarez, Khan, Lightfoot, and Moreau—will each conduct one information session at a community center. Each nurse's session will fall on a different day. The nurses' schedule is governed by the following constraints: At least two of the other nurses' sessions must fall in between Heany's session and Moreau's session. Griseldi's session must be on the day before Khan's. Juarez's session must be on a later day than Moreau's. Farnham's session must be on an earlier day than Khan's but on a later day than Lightfoot's. Lightfoot cannot conduct the session on the 2nd.",
    "question": "If Griseldi's session is on the 5th, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Farnham's session is on the 3rd.",
      "B) Heany's session is on the 7th.",
      "C) Juarez's session is on the 4th.",
      "D) Lightfoot's session is on the 1st.",
      "E) Moreau's session is on the 2nd."
    ],
    "raw_logic_programs": [
      "# Declarations\nnurses = EnumSort([Farnham, Griseldi, Heany, Juarez, Khan, Lightfoot, Moreau])\ndays = EnumSort([1, 2, 3, 4, 5, 6, 7])\nsessions = Function([nurses, days] -> [bool])\n\n# Constraints\nForAll([n:nurses], Count([d:days], sessions(n, d)) == 1) ::: each nurse's session will fall on a different day\nAnd(sessions(Heany, d1), sessions(Moreau, d2), d1 < d2, Count([d:days], And(d1 < d < d2, sessions(n, d))) >= 2) ::: At least two of the other nurses' sessions must fall in between Heany's session and Moreau's session\nsessions(Griseldi, d1), sessions(Khan, d2), d1 < d2 ::: Griseldi's session must be on the day before Khan's\nsessions(Juarez, d1), sessions(Moreau, d2), d1 > d2 ::: Juarez's session must be on a later day than Moreau's\nsessions(Farnham, d1), sessions(Khan, d2), d1 < d2, sessions(Farnham, d3), sessions(Lightfoot, d4), d3 > d4 ::: Farnham's session must be on an earlier day than Khan's but on a later day than Lightfoot's\nNot(sessions(Lightfoot, 2)) ::: Lightfoot cannot conduct the session on the 2nd\n\n# Options\nQuestion ::: If Griseldi's session is on the 5th, then which one of the following must be true?\nis_valid(sessions"
    ]
  },
  {
    "id": "ar_lsat_201010_3-G_4_23",
    "context": "From the 1st through the 7th of next month, seven nurses—Farnham, Griseldi, Heany, Juarez, Khan, Lightfoot, and Moreau—will each conduct one information session at a community center. Each nurse's session will fall on a different day. The nurses' schedule is governed by the following constraints: At least two of the other nurses' sessions must fall in between Heany's session and Moreau's session. Griseldi's session must be on the day before Khan's. Juarez's session must be on a later day than Moreau's. Farnham's session must be on an earlier day than Khan's but on a later day than Lightfoot's. Lightfoot cannot conduct the session on the 2nd.",
    "question": "Lightfoot's session could be on which one of the following days?",
    "answer": "A",
    "options": [
      "A) the 3rd",
      "B) the 4th",
      "C) the 5th",
      "D) the 6th",
      "E) the 7th"
    ],
    "raw_logic_programs": [
      "# Declarations\nnurses = EnumSort([Farnham, Griseldi, Heany, Juarez, Khan, Lightfoot, Moreau])\ndays = EnumSort([1st, 2nd, 3rd, 4th, 5th, 6th, 7th])\nsession = Function([nurses, days] -> [bool])\n\n# Constraints\nForAll([n:nurses], Count([d:days], session(n, d)) == 1) ::: each nurse's session will fall on a different day\nAnd(session(Heany, d1), session(Moreau, d2), d1 < d2, Count([n:nurses], And(session(n, d), d1 < d < d2)) >= 2) ::: At least two of the other nurses' sessions must fall in between Heany's session and Moreau's session\nsession(Griseldi, d1), session(Khan, d2), d1 < d2 ::: Griseldi's session must be on the day before Khan's\nsession(Juarez, d1), session(Moreau, d2), d1 > d2 ::: Juarez's session must be on a later day than Moreau's\nsession(Farnham, d1), session(Khan, d2), d1 > d2, session(Farnham, d3), session(Lightfoot, d4), d3 < d4 ::: Farnham's session must be on an earlier day than Khan's but on a later day than Lightfoot's\nNot(session(Lightfoot, 2nd)) ::: Lightfoot cannot conduct the session on the 2nd\n\n# Options\nQuestion ::: Lightfoot's session could be on which one of the following days?\nis_valid(Exists([d:days], session(Lightfoot, d) && d == 3rd)) ::: A) the 3rd\nis_valid(Exists([d:days], session(Lightfoot, d) && d == 4th)) ::: B) the 4th\nis_valid(Exists([d:days], session(Lightfoot, d) && d == 5th)) ::: C) the 5th\nis_valid(Exists([d:days], session(Lightfoot, d) && d == 6th)) ::: D) the 6th\nis_valid(Exists([d:days], session(Lightfoot, d) && d == 7th)) ::: E) the 7th\n------"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_1_1",
    "context": "A motel operator is scheduling appointments to start up services at a new motel. Appointments for six services—gas, landscaping, power, satellite, telephone, and water—will be scheduled, one appointment per day for the next six days. The schedule for the appointments is subject to the following conditions: The water appointment must be scheduled for an earlier day than the landscaping appointment. The power appointment must be scheduled for an earlier day than both the gas and satellite appointments. The appointments scheduled for the second and third days cannot be for either gas, satellite, or telephone. The telephone appointment cannot be scheduled for the sixth day.",
    "question": "Which one of the following is an acceptable schedule of appointments, listed in order from earliest to latest?",
    "answer": "D",
    "options": [
      "A) gas, water, power, telephone, landscaping, satellite",
      "B) power, water, landscaping, gas, satellite, telephone",
      "C) telephone, power, landscaping, gas, water, satellite",
      "D) telephone, water, power, landscaping, gas, satellite",
      "E) water, telephone, power, gas, satellite, landscaping"
    ],
    "raw_logic_programs": [
      "# Declarations\nservices = EnumSort([gas, landscaping, power, satellite, telephone, water])\nappointments = Function([services] -> [int])\nForAll([s:services], And(1 <= appointments(s), appointments(s) <= 6))\n\n# Constraints\nappointments(water) < appointments(landscaping) ::: The water appointment must be scheduled for an earlier day than the landscaping appointment\nappointments(power) < appointments(gas) ::: The power appointment must be scheduled for an earlier day than both the gas and satellite appointments\nappointments(power) < appointments(satellite) ::: The power appointment must be scheduled for an earlier day than both the gas and satellite appointments\nAnd(appointments(gas)!= 2, appointments(satellite)!= 2, appointments(telephone)!= 2) ::: The appointments scheduled for the second and third days cannot be for either gas, satellite, or telephone\nappointments(telephone)!= 6 ::: The telephone appointment cannot be scheduled for the sixth day\n\n# Options\nQuestion ::: Which one of the following is an acceptable schedule of appointments, listed in order from earliest to latest?\nis_sat(And(appointments(gas) == 1, appointments(water) == 2, appointments(power) == 3, appointments(telephone) == 4, appointments(landscaping) == 5, appointments(satellite) == 6)) ::: A) gas, water, power, telephone, landscaping, satellite\nis_sat(And(appointments(power) == 1, appointments(water) == 2, appointments(landscaping) == 3, appointments(gas) == 4, appointments(satellite) == 5, appointments(telephone) == 6)) ::: B) power, water, landscaping, gas, satellite, telephone\nis_sat(And(appointments(telephone) == 1, appointments(power) == 2, appointments(landscaping) == 3, appointments(gas) == 4, appointments(water) == 5, appointments(satellite) == 6)) ::: C) telephone, power, landscaping, gas, water, satellite\nis_sat(And(appointments(telephone) == 1, appointments(water) == 2, appointments(power) == 3, appointments(landscaping) == 4"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_1_2",
    "context": "A motel operator is scheduling appointments to start up services at a new motel. Appointments for six services—gas, landscaping, power, satellite, telephone, and water—will be scheduled, one appointment per day for the next six days. The schedule for the appointments is subject to the following conditions: The water appointment must be scheduled for an earlier day than the landscaping appointment. The power appointment must be scheduled for an earlier day than both the gas and satellite appointments. The appointments scheduled for the second and third days cannot be for either gas, satellite, or telephone. The telephone appointment cannot be scheduled for the sixth day.",
    "question": "If neither the gas nor the satellite nor the telephone appointment is scheduled for the fourth day, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) The gas appointment is scheduled for the fifth day.",
      "B) The power appointment is scheduled for the third day.",
      "C) The satellite appointment is scheduled for the sixth day.",
      "D) The telephone appointment is scheduled for the first day.",
      "E) The water appointment is scheduled for the second day."
    ],
    "raw_logic_programs": [
      "# Declarations\nservices = EnumSort([gas, landscaping, power, satellite, telephone, water])\ndays = EnumSort([1, 2, 3, 4, 5, 6])\nappointments = Function([services, days] -> [bool])\n\n# Constraints\nForAll([s:services], Count([d:days], appointments(s, d)) == 1) ::: Appointments for six services—gas, landscaping, power, satellite, telephone, and water—will be scheduled, one appointment per day for the next six days\nAnd(appointments(water, d1), appointments(landscaping, d2), d1 < d2) ::: The water appointment must be scheduled for an earlier day than the landscaping appointment\nAnd(appointments(power, d1), appointments(gas, d2), appointments(satellite, d3), d1 < d2, d1 < d3) ::: The power appointment must be scheduled for an earlier day than both the gas and satellite appointments\nAnd(appointments(gas, d1), appointments(satellite, d2), appointments(telephone, d3), d1 == 2, d2 == 2, d3 == 2) ::: The appointments scheduled for the second and third days cannot be for either gas, satellite, or telephone\nappointments(telephone, d1), d1!= 6 ::: The telephone appointment cannot be scheduled for the sixth day\n\n# Options\nQuestion ::: If neither the gas nor the satellite nor the telephone appointment is scheduled for the fourth day, which one of the following must be true?\nis_valid(Exists([d:days], appointments(gas, d) == 5)) ::: A) The gas appointment is scheduled for the fifth day.\nis_valid(Exists([d:days], appointments(power, d) == 3)) ::: B) The power appointment is scheduled for the third day.\nis_valid(Exists([d:days], appointments(satellite, d) == 6)) ::: C) The satellite appointment is scheduled for the sixth day.\nis_valid(Exists([d:days], appointments(telephone, d) == 1)) ::: D) The telephone appointment is scheduled for the first day.\nis_valid(Exists([d:days], appointments(water, d) == 2)) ::: E) The water appointment is scheduled for the second day.\n------\nProblem:\nA company has six employees—F, G, H, I, J, and K"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_1_3",
    "context": "A motel operator is scheduling appointments to start up services at a new motel. Appointments for six services—gas, landscaping, power, satellite, telephone, and water—will be scheduled, one appointment per day for the next six days. The schedule for the appointments is subject to the following conditions: The water appointment must be scheduled for an earlier day than the landscaping appointment. The power appointment must be scheduled for an earlier day than both the gas and satellite appointments. The appointments scheduled for the second and third days cannot be for either gas, satellite, or telephone. The telephone appointment cannot be scheduled for the sixth day.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The landscaping appointment is scheduled for an earlier day than the telephone appointment.",
      "B) The power appointment is scheduled for an earlier day than the landscaping appointment.",
      "C) The telephone appointment is scheduled for an earlier day than the gas appointment.",
      "D) The telephone appointment is scheduled for an earlier day than the water appointment.",
      "E) The water appointment is scheduled for an earlier day than the gas appointment."
    ],
    "raw_logic_programs": [
      "# Declarations\nservices = EnumSort([gas, landscaping, power, satellite, telephone, water])\ndays = EnumSort([1, 2, 3, 4, 5, 6])\nappointments = Function([services, days] -> [bool])\n\n# Constraints\nForAll([s:services], Count([d:days], appointments(s, d)) == 1) ::: Appointments for six services—gas, landscaping, power, satellite, telephone, and water—will be scheduled, one appointment per day for the next six days\nAnd(appointments(water, d1), appointments(landscaping, d2), d1 < d2) ::: The water appointment must be scheduled for an earlier day than the landscaping appointment\nAnd(appointments(power, d1), appointments(gas, d2), appointments(satellite, d3), d1 < d2, d1 < d3) ::: The power appointment must be scheduled for an earlier day than both the gas and satellite appointments\nAnd(appointments(s, d1), appointments(s, d2), s!= gas, s!= satellite, s!= telephone) ::: The appointments scheduled for the second and third days cannot be for either gas, satellite, or telephone\nNot(appointments(telephone, 6)) ::: The telephone appointment cannot be scheduled for the sixth day\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(And(appointments(landscaping, d1), appointments(telephone, d2), d1 < d2)) ::: A) The landscaping appointment is scheduled for an earlier day than the telephone appointment.\nis_valid(And(appointments(power, d1), appointments(landscaping, d2), d1 < d2)) ::: B) The power appointment is scheduled for an earlier day than the landscaping appointment.\nis_valid(And(appointments(telephone, d1), appointments(gas, d2), d1 < d2)) ::: C) The telephone appointment is scheduled for an earlier day than the gas appointment.\nis_valid(And(appointments(telephone, d1), appointments(water, d2), d1 < d2)) ::: D) The telephone appointment is scheduled for an earlier day than the water appointment.\nis_valid(And(appointments(water, d1), appointments(gas, d2), d1 < d2)) ::: E) The water appointment is scheduled for"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_1_4",
    "context": "A motel operator is scheduling appointments to start up services at a new motel. Appointments for six services—gas, landscaping, power, satellite, telephone, and water—will be scheduled, one appointment per day for the next six days. The schedule for the appointments is subject to the following conditions: The water appointment must be scheduled for an earlier day than the landscaping appointment. The power appointment must be scheduled for an earlier day than both the gas and satellite appointments. The appointments scheduled for the second and third days cannot be for either gas, satellite, or telephone. The telephone appointment cannot be scheduled for the sixth day.",
    "question": "Which one of the following CANNOT be the appointments scheduled for the fourth, fifth, and sixth days, listed in that order?",
    "answer": "E",
    "options": [
      "A) gas, satellite, landscaping",
      "B) landscaping, satellite, gas",
      "C) power, satellite, gas",
      "D) telephone, satellite, gas",
      "E) water, gas, landscaping"
    ],
    "raw_logic_programs": [
      "# Declarations\nservices = EnumSort([gas, landscaping, power, satellite, telephone, water])\ndays = EnumSort([1, 2, 3, 4, 5, 6])\nappointments = Function([days] -> [services])\n\n# Constraints\nForAll([d:days], Count([s:services], appointments(d) == s) == 1) ::: one appointment per day\nAnd(appointments(water) < appointments(landscaping), appointments(power) < appointments(gas), appointments(power) < appointments(satellite)) ::: The water appointment must be scheduled for an earlier day than the landscaping appointment. The power appointment must be scheduled for an earlier day than both the gas and satellite appointments.\nAnd(appointments(2)!= gas, appointments(2)!= satellite, appointments(2)!= telephone) ::: The appointments scheduled for the second and third days cannot be for either gas, satellite, or telephone.\nappointments(6)!= telephone ::: The telephone appointment cannot be scheduled for the sixth day.\n\n# Options\nQuestion ::: Which one of the following CANNOT be the appointments scheduled for the fourth, fifth, and sixth days, listed in that order?\nis_exception(is_sat(appointments(4) == gas, appointments(5) == satellite, appointments(6) == landscaping)) ::: A) gas, satellite, landscaping\nis_exception(is_sat(appointments(4) == landscaping, appointments(5) == satellite, appointments(6) == gas)) ::: B) landscaping, satellite, gas\nis_exception(is_sat(appointments(4) == power, appointments(5) == satellite, appointments(6) == gas)) ::: C) power, satellite, gas\nis_exception(is_sat(appointments(4) == telephone, appointments(5) == satellite, appointments(6) == gas)) ::: D) telephone, satellite, gas\nis_exception(is_sat(appointments(4) == water, appointments(5) == gas, appointments(6) == landscaping)) ::: E) water, gas, landscaping\n------\nProblem:\nA company has six employees—Fred, Gail, Hank, Iris, Jack, and Kim—who work in either the accounting, human resources, or public relations department. The following conditions apply: Fred and Gail work in the same department."
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_1_5",
    "context": "A motel operator is scheduling appointments to start up services at a new motel. Appointments for six services—gas, landscaping, power, satellite, telephone, and water—will be scheduled, one appointment per day for the next six days. The schedule for the appointments is subject to the following conditions: The water appointment must be scheduled for an earlier day than the landscaping appointment. The power appointment must be scheduled for an earlier day than both the gas and satellite appointments. The appointments scheduled for the second and third days cannot be for either gas, satellite, or telephone. The telephone appointment cannot be scheduled for the sixth day.",
    "question": "If neither the gas appointment nor the satellite appointment is scheduled for the sixth day, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) The gas appointment is scheduled for the fifth day.",
      "B) The landscaping appointment is scheduled for the sixth day.",
      "C) The power appointment is scheduled for the third day.",
      "D) The telephone appointment is scheduled for the fourth day.",
      "E) The water appointment is scheduled for the second day."
    ],
    "raw_logic_programs": [
      "# Declarations\nservices = EnumSort([gas, landscaping, power, satellite, telephone, water])\ndays = EnumSort([1, 2, 3, 4, 5, 6])\nappointments = Function([services, days] -> [bool])\n\n# Constraints\nForAll([s:services], Count([d:days], appointments(s, d)) == 1) ::: one appointment per day for the next six days\nImplies(appointments(water, d), Not(appointments(landscaping, d))) ::: The water appointment must be scheduled for an earlier day than the landscaping appointment\nImplies(appointments(power, d), Not(appointments(gas, d))) ::: The power appointment must be scheduled for an earlier day than both the gas and satellite appointments\nImplies(appointments(power, d), Not(appointments(satellite, d))) ::: The power appointment must be scheduled for an earlier day than both the gas and satellite appointments\nAnd(appointments(gas, d), appointments(satellite, d)) ::: The appointments scheduled for the second and third days cannot be for either gas, satellite, or telephone\nImplies(appointments(telephone, d), Not(d == 6)) ::: The telephone appointment cannot be scheduled for the sixth day\n\n# Options\nQuestion ::: If neither the gas appointment nor the satellite appointment is scheduled for the sixth day, which one of the following must be true?\nis_sat(ForAll([d:days], Implies(appointments(gas, d), appointments(satellite, d)))) ::: A) The gas appointment is scheduled for the fifth day.\nis_sat(ForAll([d:days], Implies(appointments(landscaping, d), d == 6))) ::: B) The landscaping appointment is scheduled for the sixth day.\nis_sat(ForAll([d:days], Implies(appointments(power, d), d == 3))) ::: C) The power appointment is scheduled for the third day.\nis_sat(ForAll([d:days], Implies(appointments(telephone, d), d == 4))) ::: D) The telephone appointment is scheduled for the fourth day.\nis_sat(ForAll([d:days], Implies(appointments(water, d), d == 2))) ::: E) The water appointment is scheduled for the second day.\n------\nProblem:\nA company has six employees—F, G, H,"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_1_6",
    "context": "A motel operator is scheduling appointments to start up services at a new motel. Appointments for six services—gas, landscaping, power, satellite, telephone, and water—will be scheduled, one appointment per day for the next six days. The schedule for the appointments is subject to the following conditions: The water appointment must be scheduled for an earlier day than the landscaping appointment. The power appointment must be scheduled for an earlier day than both the gas and satellite appointments. The appointments scheduled for the second and third days cannot be for either gas, satellite, or telephone. The telephone appointment cannot be scheduled for the sixth day.",
    "question": "Which one of the following, if substituted for the condition that the telephone appointment cannot be scheduled for the sixth day, would have the same effect in determining the order of the appointments?",
    "answer": "A",
    "options": [
      "A) The telephone appointment must be scheduled for an earlier day than the gas appointment or the satellite appointment, or both.",
      "B) The telephone appointment must be scheduled for the day immediately before either the gas appointment or the satellite appointment.",
      "C) The telephone appointment must be scheduled for an earlier day than the landscaping appointment.",
      "D) If the telephone appointment is not scheduled for the first day, it must be scheduled for the day immediately before the gas appointment.",
      "E) Either the gas appointment or the satellite appointment must be scheduled for the sixth day."
    ],
    "raw_logic_programs": [
      "# Declarations\nservices = EnumSort([gas, landscaping, power, satellite, telephone, water])\ndays = EnumSort([1, 2, 3, 4, 5, 6])\nappointments = Function([services, days] -> [bool])\n\n# Constraints\nForAll([s:services], Count([d:days], appointments(s, d)) == 1) ::: Appointments for six services—gas, landscaping, power, satellite, telephone, and water—will be scheduled, one appointment per day for the next six days\nAnd(appointments(water, d1), appointments(landscaping, d2), d1 < d2) ::: The water appointment must be scheduled for an earlier day than the landscaping appointment\nAnd(appointments(power, d1), appointments(gas, d2), appointments(satellite, d3), d1 < d2, d1 < d3) ::: The power appointment must be scheduled for an earlier day than both the gas and satellite appointments\nAnd(appointments(s, d1), appointments(s, d2), s!= gas, s!= satellite, s!= telephone) ::: The appointments scheduled for the second and third days cannot be for either gas, satellite, or telephone\nappointments(telephone, d) ::: The telephone appointment cannot be scheduled for the sixth day\n\n# Options\nQuestion ::: Which one of the following, if substituted for the condition that the telephone appointment cannot be scheduled for the sixth day, would have the same effect in determining the order of the appointments?\nis_sat(ForAll([s:services], Count([d:days], appointments(s, d)) == 1)) ::: A) The telephone appointment must be scheduled for an earlier day than the gas appointment or the satellite appointment, or both.\nis_sat(ForAll([s:services], Count([d:days], appointments(s, d)) == 1)) ::: B) The telephone appointment must be scheduled for the day immediately before either the gas appointment or the satellite appointment.\nis_sat(ForAll([s:services], Count([d:days], appointments(s, d)) == 1)) ::: C) The telephone appointment must be scheduled for an earlier day than the landscaping appointment.\nis_sat(ForAll([s:services], Count([d:days], appointments(s, d)) == 1)) ::: D) If the telephone appointment is not scheduled for the first day, it must be scheduled for the"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_2_7",
    "context": "An artisan has been hired to create three stained glass windows. The artisan will use exactly five colors of glass: green, orange, purple, rose, and yellow. Each color of glass will be used at least once, and each window will contain at least two different colors of glass. The windows must also conform to the following conditions: Exactly one of the windows contains both green glass and purple glass. Exactly two of the windows contain rose glass. If a window contains yellow glass, then that window contains neither green glass nor orange glass. If a window does not contain purple glass, then that window contains orange glass.",
    "question": "Which one of the following could be the color combinations of the glass in the three windows?",
    "answer": "B",
    "options": [
      "A) window 1: green, purple, rose, and orange window 2: rose and yellow window 3: green and orange",
      "B) window 1: green, purple, and rose window 2: green, rose, and orange window 3: purple and yellow",
      "C) window 1: green, purple, and rose window 2: green, purple, and orange window 3: purple, rose, and yellow",
      "D) window 1: green, purple, and orange window 2: rose, orange, and yellow window 3: purple and rose",
      "E) window 1: green, purple, and orange window 2: purple, rose, and yellow window 3: purple and orange"
    ],
    "raw_logic_programs": [
      "# Declarations\nwindows = EnumSort([window1, window2, window3])\ncolors = EnumSort([green, orange, purple, rose, yellow])\ncolors_in_window = Function([windows] -> [colors])\n\n# Constraints\nForAll([w:windows], Count([c:colors], colors_in_window(w) == c) >= 2) ::: each window will contain at least two different colors of glass\nForAll([c:colors], Count([w:windows], colors_in_window(w) == c) >= 1) ::: Each color of glass will be used at least once\nAnd(colors_in_window(window1) == green, colors_in_window(window1) == purple) ::: Exactly one of the windows contains both green glass and purple glass\nCount([w:windows], colors_in_window(w) == rose) == 2 ::: Exactly two of the windows contain rose glass\nAnd(colors_in_window(window1) == yellow, Not(colors_in_window(window1) == green)) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(colors_in_window(window1) == yellow, Not(colors_in_window(window1) == orange)) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(Not(colors_in_window(window1) == purple), colors_in_window(window1) == orange) ::: If a window does not contain purple glass, then that window contains orange glass\n\n# Options\nQuestion ::: Which one of the following could be the color combinations of the glass in the three windows?\nis_sat(And(colors_in_window(window1) == green, colors_in_window(window1) == purple, colors_in_window(window1) == rose, colors_in_window(window1) == orange, colors_in_window(window2) == rose, colors_in_window(window2) == yellow, colors_in_window(window3) == green, colors_in_window(window3) == orange)) ::: A) window 1: green, purple, rose, and orange window 2: rose and yellow window 3: green and orange\nis_sat(And(colors_in_window(window1) == green, colors_in_window(window1) == purple, colors_in_window(window1) == rose, colors_in_window(window2) == green, colors_in_window("
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_2_8",
    "context": "An artisan has been hired to create three stained glass windows. The artisan will use exactly five colors of glass: green, orange, purple, rose, and yellow. Each color of glass will be used at least once, and each window will contain at least two different colors of glass. The windows must also conform to the following conditions: Exactly one of the windows contains both green glass and purple glass. Exactly two of the windows contain rose glass. If a window contains yellow glass, then that window contains neither green glass nor orange glass. If a window does not contain purple glass, then that window contains orange glass.",
    "question": "Which one of the following CANNOT be the complete color combination of the glass in one of the windows?",
    "answer": "C",
    "options": [
      "A) green and orange",
      "B) green and purple",
      "C) green and rose",
      "D) purple and orange",
      "E) rose and orange"
    ],
    "raw_logic_programs": [
      "# Declarations\ncolors = EnumSort([green, orange, purple, rose, yellow])\nwindows = EnumSort([window1, window2, window3])\ncontains = Function([windows, colors] -> [bool])\n\n# Constraints\nForAll([w:windows], Count([c:colors], contains(w, c)) >= 2) ::: each window will contain at least two different colors of glass\nForAll([c:colors], Count([w:windows], contains(w, c)) >= 1) ::: Each color of glass will be used at least once\nAnd(contains(window1, green), contains(window1, purple)) ::: Exactly one of the windows contains both green glass and purple glass\nAnd(contains(window2, rose), contains(window3, rose)) ::: Exactly two of the windows contain rose glass\nAnd(contains(window1, yellow), Not(contains(window1, green))) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(contains(window2, yellow), Not(contains(window2, orange))) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(Not(contains(window3, purple)), contains(window3, orange)) ::: If a window does not contain purple glass, then that window contains orange glass\n\n# Options\nQuestion ::: Which one of the following CANNOT be the complete color combination of the glass in one of the windows?\nis_exception(is_sat(contains(window1, green) && contains(window1, orange))) ::: A) green and orange\nis_exception(is_sat(contains(window1, green) && contains(window1, purple))) ::: B) green and purple\nis_exception(is_sat(contains(window1, green) && contains(window1, rose))) ::: C) green and rose\nis_exception(is_sat(contains(window1, purple) && contains(window1, orange))) ::: D) purple and orange\nis_exception(is_sat(contains(window1, rose) && contains(window1, orange))) ::: E) rose and orange\n------\nProblem:\nA company has five employees: A, B, C, D, and E. Each employee is assigned to work in one of the following three departments: accounting, marketing, or sales. The following conditions apply: A is assigned to work in the accounting department. B is assigned to work in the marketing department. C is assigned to work in the sales department. D is assigned"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_2_9",
    "context": "An artisan has been hired to create three stained glass windows. The artisan will use exactly five colors of glass: green, orange, purple, rose, and yellow. Each color of glass will be used at least once, and each window will contain at least two different colors of glass. The windows must also conform to the following conditions: Exactly one of the windows contains both green glass and purple glass. Exactly two of the windows contain rose glass. If a window contains yellow glass, then that window contains neither green glass nor orange glass. If a window does not contain purple glass, then that window contains orange glass.",
    "question": "If two of the windows are made with exactly two colors of glass each, then the complete color combination of the glass in one of those windows could be",
    "answer": "B",
    "options": [
      "A) rose and yellow",
      "B) orange and rose",
      "C) orange and purple",
      "D) green and rose",
      "E) green and orange"
    ],
    "raw_logic_programs": [
      "# Declarations\nwindows = EnumSort([window1, window2, window3])\ncolors = EnumSort([green, orange, purple, rose, yellow])\ncolors_in_window = Function([windows] -> [colors])\nForAll([w:windows], Count([c:colors], colors_in_window(w) == c) >= 2)\n\n# Constraints\nForAll([c:colors], Count([w:windows], colors_in_window(w) == c) >= 1) ::: Each color of glass will be used at least once\nAnd(Count([w:windows], colors_in_window(w) == rose) == 2, Count([w:windows], colors_in_window(w) == green) == 1) ::: Exactly two of the windows contain rose glass\nAnd(colors_in_window(window1) == green, colors_in_window(window1) == purple) ::: Exactly one of the windows contains both green glass and purple glass\nAnd(colors_in_window(window2) == yellow, Not(colors_in_window(window2) == green)) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(colors_in_window(window3) == purple, Not(colors_in_window(window3) == orange)) ::: If a window does not contain purple glass, then that window contains orange glass\n\n# Options\nQuestion ::: If two of the windows are made with exactly two colors of glass each, then the complete color combination of the glass in one of those windows could be\nis_sat(And(colors_in_window(window1) == rose, colors_in_window(window1) == yellow)) ::: A) rose and yellow\nis_sat(And(colors_in_window(window1) == orange, colors_in_window(window1) == rose)) ::: B) orange and rose\nis_sat(And(colors_in_window(window1) == orange, colors_in_window(window1) == purple)) ::: C) orange and purple\nis_sat(And(colors_in_window(window1) == green, colors_in_window(window1) == rose)) ::: D) green and rose\nis_sat(And(colors_in_window(window1) == green, colors_in_window(window1) == orange)) ::: E) green and orange\n------\nProblem:\nA company has five employees: A, B, C, D, and E. Each employee is assigned"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_2_10",
    "context": "An artisan has been hired to create three stained glass windows. The artisan will use exactly five colors of glass: green, orange, purple, rose, and yellow. Each color of glass will be used at least once, and each window will contain at least two different colors of glass. The windows must also conform to the following conditions: Exactly one of the windows contains both green glass and purple glass. Exactly two of the windows contain rose glass. If a window contains yellow glass, then that window contains neither green glass nor orange glass. If a window does not contain purple glass, then that window contains orange glass.",
    "question": "If the complete color combination of the glass in one of the windows is purple, rose, and orange, then the complete color combination of the glass in one of the other windows could be",
    "answer": "B",
    "options": [
      "A) green, orange, and rose",
      "B) green, orange, and purple",
      "C) orange and rose",
      "D) orange and purple",
      "E) green and orange"
    ],
    "raw_logic_programs": [
      "# Declarations\ncolors = EnumSort([green, orange, purple, rose, yellow])\nwindows = EnumSort([window1, window2, window3])\ncontains = Function([windows, colors] -> [bool])\n\n# Constraints\nForAll([w:windows], Count([c:colors], contains(w, c)) >= 2) ::: Each window will contain at least two different colors of glass\nForAll([c:colors], Count([w:windows], contains(w, c)) >= 1) ::: Each color of glass will be used at least once\nAnd(contains(window1, green), contains(window1, purple)) ::: Exactly one of the windows contains both green glass and purple glass\nAnd(contains(window2, rose), contains(window3, rose)) ::: Exactly two of the windows contain rose glass\nAnd(contains(window1, yellow), Not(contains(window1, green))) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(contains(window1, yellow), Not(contains(window1, orange))) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(Not(contains(window1, purple)), contains(window1, orange)) ::: If a window does not contain purple glass, then that window contains orange glass\n\n# Options\nQuestion ::: If the complete color combination of the glass in one of the windows is purple, rose, and orange, then the complete color combination of the glass in one of the other windows could be\nis_sat(And(contains(window1, green), contains(window1, orange), contains(window1, rose))) ::: (A)\nis_sat(And(contains(window1, green), contains(window1, orange), contains(window1, purple))) ::: (B)\nis_sat(And(contains(window1, orange), contains(window1, rose))) ::: (C)\nis_sat(And(contains(window1, orange), contains(window1, purple))) ::: (D)\nis_sat(And(contains(window1, green), contains(window1, orange))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_2_11",
    "context": "An artisan has been hired to create three stained glass windows. The artisan will use exactly five colors of glass: green, orange, purple, rose, and yellow. Each color of glass will be used at least once, and each window will contain at least two different colors of glass. The windows must also conform to the following conditions: Exactly one of the windows contains both green glass and purple glass. Exactly two of the windows contain rose glass. If a window contains yellow glass, then that window contains neither green glass nor orange glass. If a window does not contain purple glass, then that window contains orange glass.",
    "question": "If orange glass is used in more of the windows than green glass, then the complete color combination of the glass in one of the windows could be",
    "answer": "A",
    "options": [
      "A) orange and purple",
      "B) green, purple, and rose",
      "C) green and purple",
      "D) green and orange",
      "E) green, orange, and rose"
    ],
    "raw_logic_programs": [
      "# Declarations\ncolors = EnumSort([green, orange, purple, rose, yellow])\nwindows = EnumSort([window1, window2, window3])\ncontains = Function([windows, colors] -> [bool])\n\n# Constraints\nForAll([w:windows], Count([c:colors], contains(w, c)) >= 2) ::: Each window will contain at least two different colors of glass\nForAll([c:colors], Count([w:windows], contains(w, c)) >= 1) ::: Each color of glass will be used at least once\nAnd(contains(window1, green), contains(window1, purple)) ::: Exactly one of the windows contains both green glass and purple glass\nAnd(contains(window2, rose), contains(window3, rose)) ::: Exactly two of the windows contain rose glass\nAnd(contains(window1, yellow), Not(contains(window1, green))) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(contains(window2, yellow), Not(contains(window2, orange))) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(Not(contains(window3, purple)), contains(window3, orange)) ::: If a window does not contain purple glass, then that window contains orange glass\n\n# Options\nQuestion ::: If orange glass is used in more of the windows than green glass, then the complete color combination of the glass in one of the windows could be\nis_sat(And(Count([w:windows], contains(w, orange)) > Count([w:windows], contains(w, green)), contains(window1, orange), contains(window1, purple))) ::: A) orange and purple\nis_sat(And(Count([w:windows], contains(w, orange)) > Count([w:windows], contains(w, green)), contains(window1, green), contains(window1, purple), contains(window1, rose))) ::: B) green, purple, and rose\nis_sat(And(Count([w:windows], contains(w, orange)) > Count([w:windows], contains(w, green)), contains(window1, green),"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_2_12",
    "context": "An artisan has been hired to create three stained glass windows. The artisan will use exactly five colors of glass: green, orange, purple, rose, and yellow. Each color of glass will be used at least once, and each window will contain at least two different colors of glass. The windows must also conform to the following conditions: Exactly one of the windows contains both green glass and purple glass. Exactly two of the windows contain rose glass. If a window contains yellow glass, then that window contains neither green glass nor orange glass. If a window does not contain purple glass, then that window contains orange glass.",
    "question": "Which one of the following could be used in all three windows?",
    "answer": "C",
    "options": [
      "A) green glass",
      "B) orange glass",
      "C) purple glass",
      "D) rose glass",
      "E) yellow glass"
    ],
    "raw_logic_programs": [
      "# Declarations\nwindows = EnumSort([window1, window2, window3])\ncolors = EnumSort([green, orange, purple, rose, yellow])\ncontains = Function([windows, colors] -> [bool])\n\n# Constraints\nForAll([w:windows], Count([c:colors], contains(w, c)) >= 2) ::: each window will contain at least two different colors of glass\nForAll([c:colors], Count([w:windows], contains(w, c)) >= 1) ::: Each color of glass will be used at least once\nAnd(contains(window1, green), contains(window1, purple)) ::: Exactly one of the windows contains both green glass and purple glass\nAnd(contains(window2, rose), contains(window3, rose)) ::: Exactly two of the windows contain rose glass\nAnd(contains(window1, yellow), Not(contains(window1, green))) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(contains(window2, yellow), Not(contains(window2, orange))) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(Not(contains(window3, purple)), contains(window3, orange)) ::: If a window does not contain purple glass, then that window contains orange glass\n\n# Options\nQuestion ::: Which one of the following could be used in all three windows?\nis_sat(ForAll([w:windows], contains(w, green))) ::: A) green glass\nis_sat(ForAll([w:windows], contains(w, orange))) ::: B) orange glass\nis_sat(ForAll([w:windows], contains(w, purple))) ::: C) purple glass\nis_sat(ForAll([w:windows], contains(w, rose))) ::: D) rose glass\nis_sat(ForAll([w:windows], contains(w, yellow))) ::: E) yellow glass\n------\nProblem:\nA company has six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: accounting, human resources, and public relations."
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_2_13",
    "context": "An artisan has been hired to create three stained glass windows. The artisan will use exactly five colors of glass: green, orange, purple, rose, and yellow. Each color of glass will be used at least once, and each window will contain at least two different colors of glass. The windows must also conform to the following conditions: Exactly one of the windows contains both green glass and purple glass. Exactly two of the windows contain rose glass. If a window contains yellow glass, then that window contains neither green glass nor orange glass. If a window does not contain purple glass, then that window contains orange glass.",
    "question": "If none of the windows contains both rose glass and orange glass, then the complete color combination of the glass in one of the windows must be",
    "answer": "E",
    "options": [
      "A) green and purple",
      "B) green, purple, and orange",
      "C) green and orange",
      "D) purple and orange",
      "E) purple, rose, and yellow"
    ],
    "raw_logic_programs": [
      "# Declarations\ncolors = EnumSort([green, orange, purple, rose, yellow])\nwindows = EnumSort([window1, window2, window3])\ncontains = Function([windows, colors] -> [bool])\n\n# Constraints\nForAll([w:windows], Count([c:colors], contains(w, c)) >= 2) ::: each window will contain at least two different colors of glass\nForAll([c:colors], Count([w:windows], contains(w, c)) >= 1) ::: Each color of glass will be used at least once\nAnd(contains(window1, green), contains(window1, purple)) ::: Exactly one of the windows contains both green glass and purple glass\nAnd(contains(window2, rose), contains(window3, rose)) ::: Exactly two of the windows contain rose glass\nAnd(contains(window1, yellow), Not(contains(window1, green))) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(contains(window2, yellow), Not(contains(window2, orange))) ::: If a window contains yellow glass, then that window contains neither green glass nor orange glass\nAnd(Not(contains(window3, purple)), contains(window3, orange)) ::: If a window does not contain purple glass, then that window contains orange glass\n\n# Options\nQuestion ::: If none of the windows contains both rose glass and orange glass, then the complete color combination of the glass in one of the windows must be\nis_sat(And(contains(window1, green), contains(window1, purple))) ::: A) green and purple\nis_sat(And(contains(window1, green), contains(window1, purple), contains(window1, orange))) ::: B) green, purple, and orange\nis_sat(And(contains(window1, green), contains(window1, orange))) ::: C) green and orange\nis_sat(And(contains(window1, purple), contains(window1, orange))) ::: D) purple and orange\nis_sat(And(contains(window1, purple), contains(window1, rose), contains(window1, yellow))) :"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_3_14",
    "context": "A conference on management skills consists of exactly five talks, which are held successively in the following order: Feedback, Goal Sharing, Handling People, Information Overload, and Leadership. Exactly four employees of SoftCorp—Quigley, Rivera, Spivey, and Tran—each attend exactly two of the talks. No talk is attended by more than two of the employees, who attend the talks in accordance with the following conditions: Quigley attends neither Feedback nor Handling People. Rivera attends neither Goal Sharing nor Handling People. Spivey does not attend either of the talks that Tran attends. Quigley attends the first talk Tran attends. Spivey attends the first talk Rivera attends.",
    "question": "Which one of the following could be a complete and accurate matching of the talks to the SoftCorp employees who attend them?",
    "answer": "C",
    "options": [
      "A) Feedback: Rivera, Spivey Goal Sharing: Quigley, Tran Handling People: None Information Overload: Quigley, Rivera Leadership: Spivey, Tran",
      "B) Feedback: Rivera, Spivey Goal Sharing: Quigley, Tran Handling People: Rivera, Tran Information Overload: Quigley Leadership: Spivey",
      "C) Feedback: Rivera, Spivey Goal Sharing: Quigley, Tran Handling People: Tran Information Overload: Quigley, Rivera Leadership: Spivey",
      "D) Feedback: Rivera, Spivey Goal Sharing: Tran Handling People: Tran Information Overload: Quigley, Rivera Leadership: Quigley, Spivey",
      "E) Feedback: Spivey Goal Sharing: Quigley, Tran Handling People: Spivey Information Overload: Quigley, Rivera Leadership: Rivera, Tran"
    ],
    "raw_logic_programs": [
      "# Declarations\ntalks = EnumSort([Feedback, Goal_Sharing, Handling_People, Information_Overload, Leadership])\nemployees = EnumSort([Quigley, Rivera, Spivey, Tran])\nattends = Function([talks, employees] -> [bool])\n\n# Constraints\nForAll([t:talks], Count([e:employees], attends(t, e)) == 2) ::: each talk is attended by exactly two of the employees\nForAll([e:employees], Count([t:talks], attends(t, e)) == 2) ::: each employee attends exactly two of the talks\nForAll([e:employees], Distinct([t:talks], attends(t, e))) ::: no talk is attended by more than two of the employees\nNot(attends(Feedback, Quigley)) ::: Quigley attends neither Feedback nor Handling People\nNot(attends(Goal_Sharing, Rivera)) ::: Rivera attends neither Goal Sharing nor Handling People\nNot(attends(Tran, t)) ::: Spivey does not attend either of the talks that Tran attends\nattends(Quigley, t) ::: Quigley attends the first talk Tran attends\nattends(Spivey, t) ::: Spivey attends the first talk Rivera attends\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate matching of the talks to the SoftCorp employees who attend them?\nis_sat(ForAll([t:talks], attends(t, Rivera) == attends(t, Spivey))) ::: A) Feedback: Rivera, Spivey Goal Sharing: Quigley, Tran Handling People: None Information Overload: Quigley, Rivera Leadership: Spivey, Tran\nis_sat(ForAll([t:talks], attends(t, Quigley) == attends(t, Tran))) ::: B) Feedback: Rivera, Spivey Goal Sharing: Quigley,"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_3_15",
    "context": "A conference on management skills consists of exactly five talks, which are held successively in the following order: Feedback, Goal Sharing, Handling People, Information Overload, and Leadership. Exactly four employees of SoftCorp—Quigley, Rivera, Spivey, and Tran—each attend exactly two of the talks. No talk is attended by more than two of the employees, who attend the talks in accordance with the following conditions: Quigley attends neither Feedback nor Handling People. Rivera attends neither Goal Sharing nor Handling People. Spivey does not attend either of the talks that Tran attends. Quigley attends the first talk Tran attends. Spivey attends the first talk Rivera attends.",
    "question": "If none of the SoftCorp employees attends Handling People, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Rivera attends Feedback.",
      "B) Rivera attends Leadership.",
      "C) Spivey attends Information Overload.",
      "D) Tran attends Goal Sharing.",
      "E) Tran attends Information Overload."
    ],
    "raw_logic_programs": [
      "# Declarations\ntalks = EnumSort([Feedback, Goal_Sharing, Handling_People, Information_Overload, Leadership])\nemployees = EnumSort([Quigley, Rivera, Spivey, Tran])\nattends = Function([employees, talks] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([t:talks], attends(e, t)) == 2) ::: each attend exactly two of the talks\nDistinct([t:talks], attends(Quigley, t)) ::: Quigley attends neither Feedback nor Handling People\nDistinct([t:talks], attends(Rivera, t)) ::: Rivera attends neither Goal Sharing nor Handling People\nDistinct([t:talks], attends(Spivey, t)) ::: Spivey does not attend either of the talks that Tran attends\nattends(Quigley, t1) && attends(Tran, t1) ::: Quigley attends the first talk Tran attends\nattends(Spivey, t1) && attends(Rivera, t1) ::: Spivey attends the first talk Rivera attends\n\n# Options\nQuestion ::: If none of the SoftCorp employees attends Handling People, then which one of the following must be true?\nis_valid(attends(Rivera, Feedback)) ::: (A)\nis_valid(attends(Rivera, Leadership)) ::: (B)\nis_valid(attends(Spivey, Information_Overload)) ::: (C)\nis_valid(attends(Tran, Goal_Sharing)) ::: (D)\nis_valid(attends(Tran, Information_Overload)) ::: (E)\n------\nProblem:\nA company has exactly six employees—Fred, Gail, Hank, Iris, Jill, and Kim—who are assigned to work on exactly three projects—Project 1, Project 2, and Project 3. Each employee is assigned to work on exactly two of the projects, and no two employees are"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_3_16",
    "context": "A conference on management skills consists of exactly five talks, which are held successively in the following order: Feedback, Goal Sharing, Handling People, Information Overload, and Leadership. Exactly four employees of SoftCorp—Quigley, Rivera, Spivey, and Tran—each attend exactly two of the talks. No talk is attended by more than two of the employees, who attend the talks in accordance with the following conditions: Quigley attends neither Feedback nor Handling People. Rivera attends neither Goal Sharing nor Handling People. Spivey does not attend either of the talks that Tran attends. Quigley attends the first talk Tran attends. Spivey attends the first talk Rivera attends.",
    "question": "Which one of the following is a complete and accurate list of the talks any one of which Rivera and Spivey could attend together?",
    "answer": "A",
    "options": [
      "A) Feedback, Information Overload, Leadership",
      "B) Feedback, Goal Sharing, Information Overload",
      "C) Information Overload, Leadership",
      "D) Feedback, Leadership",
      "E) Feedback, Information Overload"
    ],
    "raw_logic_programs": [
      "# Declarations\ntalks = EnumSort([Feedback, Goal_Sharing, Handling_People, Information_Overload, Leadership])\nemployees = EnumSort([Quigley, Rivera, Spivey, Tran])\nattends = Function([employees, talks] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([t:talks], attends(e, t)) == 2) ::: each attend exactly two of the talks\nAnd(Not(attends(Quigley, Feedback)), Not(attends(Quigley, Handling_People))) ::: Quigley attends neither Feedback nor Handling People\nAnd(Not(attends(Rivera, Goal_Sharing)), Not(attends(Rivera, Handling_People))) ::: Rivera attends neither Goal Sharing nor Handling People\nNot(And(attends(Spivey, t1), attends(Tran, t1))) ::: Spivey does not attend either of the talks that Tran attends\nattends(Quigley, t1) ::: Quigley attends the first talk Tran attends\nattends(Spivey, t2) ::: Spivey attends the first talk Rivera attends\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the talks any one of which Rivera and Spivey could attend together?\nis_valid(Exists([t1:talks, t2:talks], And(attends(Rivera, t1), attends(Spivey, t2), t1 == t2))) ::: A) Feedback, Information Overload, Leadership\nis_valid(Exists([t1:talks, t2:talks], And(attends(Rivera, t1), attends(Spivey, t2), t1 == t2))) ::: B) Feedback, Goal Sharing, Information Overload\nis_valid(Exists([t1:talks, t2:talks], And(attends(Rivera, t1), attends(Spivey"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_3_17",
    "context": "A conference on management skills consists of exactly five talks, which are held successively in the following order: Feedback, Goal Sharing, Handling People, Information Overload, and Leadership. Exactly four employees of SoftCorp—Quigley, Rivera, Spivey, and Tran—each attend exactly two of the talks. No talk is attended by more than two of the employees, who attend the talks in accordance with the following conditions: Quigley attends neither Feedback nor Handling People. Rivera attends neither Goal Sharing nor Handling People. Spivey does not attend either of the talks that Tran attends. Quigley attends the first talk Tran attends. Spivey attends the first talk Rivera attends.",
    "question": "If Quigley is the only SoftCorp employee to attend Leadership, then which one of the following could be false?",
    "answer": "D",
    "options": [
      "A) Rivera attends Feedback.",
      "B) Rivera attends Information Overload.",
      "C) Spivey attends Feedback.",
      "D) Spivey attends Handling People.",
      "E) Tran attends Goal Sharing."
    ],
    "raw_logic_programs": [
      "# Declarations\ntalks = EnumSort([Feedback, Goal_Sharing, Handling_People, Information_Overload, Leadership])\nemployees = EnumSort([Quigley, Rivera, Spivey, Tran])\nattends = Function([employees, talks] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([t:talks], attends(e, t)) == 2) ::: each attend exactly two of the talks\nDistinct([t:talks], attends(Quigley, t)) ::: Quigley attends neither Feedback nor Handling People\nDistinct([t:talks], attends(Rivera, t)) ::: Rivera attends neither Goal Sharing nor Handling People\nDistinct([t:talks], attends(Spivey, t)) ::: Spivey does not attend either of the talks that Tran attends\nattends(Quigley, t) ::: Quigley attends the first talk Tran attends\nattends(Spivey, t) ::: Spivey attends the first talk Rivera attends\n\n# Options\nQuestion ::: If Quigley is the only SoftCorp employee to attend Leadership, then which one of the following could be false?\nis_exception(is_sat(attends(Rivera, Feedback))) ::: A) Rivera attends Feedback.\nis_exception(is_sat(attends(Rivera, Information_Overload))) ::: B) Rivera attends Information Overload.\nis_exception(is_sat(attends(Spivey, Feedback))) ::: C) Spivey attends Feedback.\nis_exception(is_sat(attends(Spivey, Handling_People))) ::: D) Spivey attends Handling People.\nis_exception(is_sat(attends(Tran, Goal_Sharing))) ::: E) Tran attends Goal Sharing.\n------\nProblem:\nA company has exactly six employees—Fred, Gail, Hank, Iris, Jill"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_3_18",
    "context": "A conference on management skills consists of exactly five talks, which are held successively in the following order: Feedback, Goal Sharing, Handling People, Information Overload, and Leadership. Exactly four employees of SoftCorp—Quigley, Rivera, Spivey, and Tran—each attend exactly two of the talks. No talk is attended by more than two of the employees, who attend the talks in accordance with the following conditions: Quigley attends neither Feedback nor Handling People. Rivera attends neither Goal Sharing nor Handling People. Spivey does not attend either of the talks that Tran attends. Quigley attends the first talk Tran attends. Spivey attends the first talk Rivera attends.",
    "question": "If Rivera is the only SoftCorp employee to attend Information Overload, then which one of the following could be false?",
    "answer": "E",
    "options": [
      "A) Quigley attends Leadership.",
      "B) Rivera attends Feedback.",
      "C) Spivey attends Feedback.",
      "D) Tran attends Goal Sharing.",
      "E) Tran attends Handling People."
    ],
    "raw_logic_programs": [
      "# Declarations\ntalks = EnumSort([Feedback, Goal_Sharing, Handling_People, Information_Overload, Leadership])\nemployees = EnumSort([Quigley, Rivera, Spivey, Tran])\nattends = Function([employees, talks] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([t:talks], attends(e, t)) == 2) ::: each attend exactly two of the talks\nDistinct([t:talks], attends(Quigley, t)) ::: Quigley attends neither Feedback nor Handling People\nDistinct([t:talks], attends(Rivera, t)) ::: Rivera attends neither Goal Sharing nor Handling People\nDistinct([t:talks], attends(Spivey, t)) ::: Spivey does not attend either of the talks that Tran attends\nattends(Quigley, t1) ::: Quigley attends the first talk Tran attends\nattends(Spivey, t1) ::: Spivey attends the first talk Rivera attends\n\n# Options\nQuestion ::: If Rivera is the only SoftCorp employee to attend Information Overload, then which one of the following could be false?\nis_exception(is_sat(attends(Quigley, Leadership))) ::: (A)\nis_exception(is_sat(attends(Rivera, Feedback))) ::: (B)\nis_exception(is_sat(attends(Spivey, Feedback))) ::: (C)\nis_exception(is_sat(attends(Tran, Goal_Sharing))) ::: (D)\nis_exception(is_sat(attends(Tran, Handling_People))) ::: (E)\n------\nProblem:\nA company has exactly six employees—Fred, Gail, Hank, Iris, Jill, and Kim—who are assigned to work on exactly three projects—Project A, Project B, and Project C. Each employee works on exactly two of the projects, and no two employees work"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_4_19",
    "context": "Exactly six witnesses will testify in a trial: Mangione, Ramirez, Sanderson, Tannenbaum, Ujemori, and Wong. The witnesses will testify one by one, and each only once. The order in which the witnesses testify is subject to the following constraints: Sanderson must testify immediately before either Tannenbaum or Ujemori. Ujemori must testify earlier than both Ramirez and Wong. Either Tannenbaum or Wong must testify immediately before Mangione.",
    "question": "Which one of the following lists the witnesses in an order in which they could testify?",
    "answer": "B",
    "options": [
      "A) Ramirez, Sanderson, Tannenbaum, Mangione, Ujemori, Wong",
      "B) Sanderson, Tannenbaum, Ujemori, Ramirez, Wong, Mangione",
      "C) Sanderson, Ujemori, Tannenbaum, Wong, Ramirez, Mangione",
      "D) Tannenbaum, Mangione, Ujemori, Sanderson, Ramirez, Wong",
      "E) Wong, Ramirez, Sanderson, Tannenbaum, Mangione, Ujemori"
    ],
    "raw_logic_programs": [
      "# Declarations\nwitnesses = EnumSort([Mangione, Ramirez, Sanderson, Tannenbaum, Ujemori, Wong])\ntestifies = Function([witnesses] -> [int])\nForAll([w:witnesses], And(1 <= testifies(w), testifies(w) <= 6))\n\n# Constraints\nDistinct([w:witnesses], testifies(w)) ::: The witnesses will testify one by one, and each only once\nAnd(testifies(Sanderson) < testifies(Tannenbaum), testifies(Sanderson) < testifies(Ujemori)) ::: Sanderson must testify immediately before either Tannenbaum or Ujemori\ntestifies(Ujemori) < testifies(Ramirez) ::: Ujemori must testify earlier than both Ramirez and Wong\ntestifies(Ujemori) < testifies(Wong) ::: Ujemori must testify earlier than both Ramirez and Wong\nAnd(testifies(Tannenbaum) < testifies(Mangione), testifies(Wong) < testifies(Mangione)) ::: Either Tannenbaum or Wong must testify immediately before Mangione\n\n# Options\nQuestion ::: Which one of the following lists the witnesses in an order in which they could testify?\nis_sat(testifies(Ramirez) == 1, testifies(Sanderson) == 2, testifies(Tannenbaum) == 3, testifies(Mangione) == 4, testifies(Ujemori) == 5, testifies(Wong) == 6) ::: A) Ramirez, Sanderson, Tannenbaum, Mangione, Ujemori, Wong\nis_sat(testifies(Sanderson) == 1, testifies(Tannenbaum) == 2, testifies(Ujemori) == 3, testifies(Ramirez) == 4, testifies(Wong) == 5, testifies(Mangione) == 6) ::: B) Sanderson, Tannenbaum, Ujemori, Ramirez,"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_4_20",
    "context": "Exactly six witnesses will testify in a trial: Mangione, Ramirez, Sanderson, Tannenbaum, Ujemori, and Wong. The witnesses will testify one by one, and each only once. The order in which the witnesses testify is subject to the following constraints: Sanderson must testify immediately before either Tannenbaum or Ujemori. Ujemori must testify earlier than both Ramirez and Wong. Either Tannenbaum or Wong must testify immediately before Mangione.",
    "question": "If Tannenbaum testifies first, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Ramirez testifies second.",
      "B) Wong testifies third.",
      "C) Sanderson testifies fourth.",
      "D) Ujemori testifies fifth.",
      "E) Mangione testifies sixth."
    ],
    "raw_logic_programs": [
      "# Declarations\nwitnesses = EnumSort([Mangione, Ramirez, Sanderson, Tannenbaum, Ujemori, Wong])\ntestifies = Function([witnesses, int] -> [bool])\nForAll([w:witnesses], And(1 <= testifies(w, 1), testifies(w, 1) <= 6))\n\n# Constraints\nDistinct([w:witnesses], testifies(w, 1)) ::: The witnesses will testify one by one, and each only once\nAnd(testifies(Sanderson, 1) < testifies(Tannenbaum, 1), testifies(Sanderson, 1) < testifies(Ujemori, 1)) ::: Sanderson must testify immediately before either Tannenbaum or Ujemori\ntestifies(Ujemori, 1) < testifies(Ramirez, 1) ::: Ujemori must testify earlier than both Ramirez and Wong\ntestifies(Ujemori, 1) < testifies(Wong, 1) ::: Ujemori must testify earlier than both Ramirez and Wong\nAnd(testifies(Tannenbaum, 1) < testifies(Mangione, 1), testifies(Wong, 1) < testifies(Mangione, 1)) ::: Either Tannenbaum or Wong must testify immediately before Mangione\ntestifies(Tannenbaum, 1) == 1 ::: Tannenbaum testifies first\n\n# Options\nQuestion ::: If Tannenbaum testifies first, then which one of the following could be true?\nis_valid(testifies(Ramirez, 1) == 2) ::: (A)\nis_valid(testifies(Wong, 1) == 3) ::: (B)\nis_valid(testifies(Sanderson, 1) == 4) ::: (C)\nis_valid(testifies(Ujemori, 1) == 5) ::: (D)\nis_valid(testifies(Mangione, 1) == 6) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_4_21",
    "context": "Exactly six witnesses will testify in a trial: Mangione, Ramirez, Sanderson, Tannenbaum, Ujemori, and Wong. The witnesses will testify one by one, and each only once. The order in which the witnesses testify is subject to the following constraints: Sanderson must testify immediately before either Tannenbaum or Ujemori. Ujemori must testify earlier than both Ramirez and Wong. Either Tannenbaum or Wong must testify immediately before Mangione.",
    "question": "If Sanderson testifies fifth, then Ujemori must testify",
    "answer": "A",
    "options": [
      "A) first",
      "B) second",
      "C) third",
      "D) fourth",
      "E) sixth"
    ],
    "raw_logic_programs": [
      "# Declarations\nwitnesses = EnumSort([Mangione, Ramirez, Sanderson, Tannenbaum, Ujemori, Wong])\ntestifies = Function([witnesses, int] -> [bool])\nForAll([w:witnesses], And(1 <= testifies(w, 1), testifies(w, 1) <= 6))\n\n# Constraints\nDistinct([w:witnesses], testifies(w, 1)) ::: The witnesses will testify one by one, and each only once\nAnd(testifies(Sanderson, 1) < testifies(Tannenbaum, 1), testifies(Sanderson, 1) < testifies(Ujemori, 1)) ::: Sanderson must testify immediately before either Tannenbaum or Ujemori\ntestifies(Ujemori, 1) < testifies(Ramirez, 1) ::: Ujemori must testify earlier than both Ramirez and Wong\ntestifies(Ujemori, 1) < testifies(Wong, 1) ::: Ujemori must testify earlier than both Ramirez and Wong\nAnd(testifies(Tannenbaum, 1) < testifies(Mangione, 1), testifies(Wong, 1) < testifies(Mangione, 1)) ::: Either Tannenbaum or Wong must testify immediately before Mangione\n\n# Options\nQuestion ::: If Sanderson testifies fifth, then Ujemori must testify\nis_sat(And(testifies(Sanderson, 1) == 5, testifies(Ujemori, 1) == 1)) ::: A) first\nis_sat(And(testifies(Sanderson, 1) == 5, testifies(Ujemori, 1) == 2)) ::: B) second\nis_sat(And(testifies(Sanderson, 1) == 5, testifies(Ujemori, 1) == 3)) ::: C) third\nis_sat(And(testifies(Sanderson, 1) == 5, testifies(Ujemori"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_4_22",
    "context": "Exactly six witnesses will testify in a trial: Mangione, Ramirez, Sanderson, Tannenbaum, Ujemori, and Wong. The witnesses will testify one by one, and each only once. The order in which the witnesses testify is subject to the following constraints: Sanderson must testify immediately before either Tannenbaum or Ujemori. Ujemori must testify earlier than both Ramirez and Wong. Either Tannenbaum or Wong must testify immediately before Mangione.",
    "question": "Which one of the following pairs of witnesses CANNOT testify third and fourth, respectively?",
    "answer": "A",
    "options": [
      "A) Mangione, Tannenbaum",
      "B) Ramirez, Sanderson",
      "C) Sanderson, Ujemori",
      "D) Tannenbaum, Ramirez",
      "E) Ujemori, Wong"
    ],
    "raw_logic_programs": [
      "# Declarations\nwitnesses = EnumSort([Mangione, Ramirez, Sanderson, Tannenbaum, Ujemori, Wong])\ntestifies = Function([witnesses, int])\nForAll([w:witnesses], And(1 <= testifies(w), testifies(w) <= 6))\n\n# Constraints\nDistinct([w:witnesses], testifies(w)) ::: The witnesses will testify one by one, and each only once\nAnd(testifies(Sanderson) < testifies(Tannenbaum), testifies(Sanderson) < testifies(Ujemori)) ::: Sanderson must testify immediately before either Tannenbaum or Ujemori\ntestifies(Ujemori) < testifies(Ramirez) ::: Ujemori must testify earlier than both Ramirez and Wong\ntestifies(Ujemori) < testifies(Wong) ::: Ujemori must testify earlier than both Ramirez and Wong\nAnd(testifies(Tannenbaum) < testifies(Mangione), testifies(Wong) < testifies(Mangione)) ::: Either Tannenbaum or Wong must testify immediately before Mangione\n\n# Options\nQuestion ::: Which one of the following pairs of witnesses CANNOT testify third and fourth, respectively?\nis_exception(is_sat(testifies(Mangione) == 4, testifies(Tannenbaum) == 3)) ::: (A)\nis_exception(is_sat(testifies(Ramirez) == 4, testifies(Sanderson) == 3)) ::: (B)\nis_exception(is_sat(testifies(Sanderson) == 4, testifies(Ujemori) == 3)) ::: (C)\nis_exception(is_sat(testifies(Tannenbaum) == 4, testifies(Ramirez) == 3)) ::: (D)\nis_exception(is_sat(testifies(Ujemori) == 4, testifies(Wong) == 3)) ::: (E)\n------\nProblem:"
    ]
  },
  {
    "id": "ar_lsat_201012_3-G_4_23",
    "context": "Exactly six witnesses will testify in a trial: Mangione, Ramirez, Sanderson, Tannenbaum, Ujemori, and Wong. The witnesses will testify one by one, and each only once. The order in which the witnesses testify is subject to the following constraints: Sanderson must testify immediately before either Tannenbaum or Ujemori. Ujemori must testify earlier than both Ramirez and Wong. Either Tannenbaum or Wong must testify immediately before Mangione.",
    "question": "Which one of the following pairs of witnesses CANNOT testify first and second, respectively?",
    "answer": "D",
    "options": [
      "A) Sanderson, Ujemori",
      "B) Tannenbaum, Mangione",
      "C) Tannenbaum, Sanderson",
      "D) Ujemori, Tannenbaum",
      "E) Ujemori, Wong"
    ],
    "raw_logic_programs": [
      "# Declarations\nwitnesses = EnumSort([Mangione, Ramirez, Sanderson, Tannenbaum, Ujemori, Wong])\ntestifies = Function([witnesses, int] -> [bool])\nForAll([w:witnesses], And(1 <= testifies(w, 1), testifies(w, 1) <= 6))\n\n# Constraints\nDistinct([w:witnesses], testifies(w, 1)) ::: The witnesses will testify one by one, and each only once\nAnd(testifies(Sanderson, 1) < testifies(Tannenbaum, 1), testifies(Sanderson, 1) < testifies(Ujemori, 1)) ::: Sanderson must testify immediately before either Tannenbaum or Ujemori\ntestifies(Ujemori, 1) < testifies(Ramirez, 1) ::: Ujemori must testify earlier than both Ramirez and Wong\ntestifies(Ujemori, 1) < testifies(Wong, 1) ::: Ujemori must testify earlier than both Ramirez and Wong\nAnd(testifies(Tannenbaum, 1) < testifies(Mangione, 1), testifies(Wong, 1) < testifies(Mangione, 1)) ::: Either Tannenbaum or Wong must testify immediately before Mangione\n\n# Options\nQuestion ::: Which one of the following pairs of witnesses CANNOT testify first and second, respectively?\nis_exception(is_sat(testifies(Sanderson, 1) && testifies(Ujemori, 2))) ::: (A)\nis_exception(is_sat(testifies(Tannenbaum, 1) && testifies(Mangione, 2))) ::: (B)\nis_exception(is_sat(testifies(Tannenbaum, 1) && testifies(Sanderson, 2))) ::: (C)\nis_exception(is_sat(testifies(Ujemori, 1) && testifies(Tannenbaum, 2))) ::: ("
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_1_1",
    "context": "A movie studio is scheduling the release of six films—Fiesta, Glaciers, Hurricanes, Jets, Kangaroos, and Lovebird. No two of these films can be released on the same date. The release schedule is governed by the following conditions: Fiesta must be released earlier than both Jets and Lovebird. Kangaroos must be released earlier than Jets, and Jets must be released earlier than Hurricanes. Lovebird must be released earlier than Glaciers.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "E",
    "options": [
      "A) Fiesta is released second.",
      "B) Glaciers is released third.",
      "C) Hurricanes is released fourth.",
      "D) Kangaroos is released fourth.",
      "E) Kangaroos is released fifth."
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Fiesta, Glaciers, Hurricanes, Jets, Kangaroos, Lovebird])\nreleased = Function([films] -> [int])\nForAll([f:films], And(1 <= released(f), released(f) <= 6))\n\n# Constraints\nDistinct([f:films], released(f)) ::: No two of these films can be released on the same date\nAnd(released(Fiesta) < released(Jets), released(Fiesta) < released(Lovebird)) ::: Fiesta must be released earlier than both Jets and Lovebird\nAnd(released(Kangaroos) < released(Jets), released(Jets) < released(Hurricanes)) ::: Kangaroos must be released earlier than Jets, and Jets must be released earlier than Hurricanes\nreleased(Lovebird) < released(Glaciers) ::: Lovebird must be released earlier than Glaciers\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(released(Fiesta) == 2)) ::: A) Fiesta is released second.\nis_exception(is_sat(released(Glaciers) == 3)) ::: B) Glaciers is released third.\nis_exception(is_sat(released(Hurricanes) == 4)) ::: C) Hurricanes is released fourth.\nis_exception(is_sat(released(Kangaroos) == 4)) ::: D) Kangaroos is released fourth.\nis_exception(is_sat(released(Kangaroos) == 5)) ::: E) Kangaroos is released fifth.\n------\nProblem:\nA company has six employees—Fred, Gail, Hank, Iris, Jim, and Karen—who work in either the accounting, human resources, or public relations department. The following conditions apply: Fred and Gail work in the same department. Hank and Iris work in different departments. Jim works in the human resources department. Karen does not work in the same department"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_1_2",
    "context": "A movie studio is scheduling the release of six films—Fiesta, Glaciers, Hurricanes, Jets, Kangaroos, and Lovebird. No two of these films can be released on the same date. The release schedule is governed by the following conditions: Fiesta must be released earlier than both Jets and Lovebird. Kangaroos must be released earlier than Jets, and Jets must be released earlier than Hurricanes. Lovebird must be released earlier than Glaciers.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Fiesta is released earlier than Hurricanes.",
      "B) Jets is released earlier than Glaciers.",
      "C) Kangaroos is released earlier than Glaciers.",
      "D) Lovebird is released earlier than Hurricanes.",
      "E) Lovebird is released earlier than Jets."
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Fiesta, Glaciers, Hurricanes, Jets, Kangaroos, Lovebird])\nreleased = Function([films] -> [int])\nForAll([f:films], And(1 <= released(f), released(f) <= 6))\n\n# Constraints\nDistinct([f:films], released(f)) ::: No two of these films can be released on the same date\nAnd(released(Fiesta) < released(Jets), released(Fiesta) < released(Lovebird)) ::: Fiesta must be released earlier than both Jets and Lovebird\nAnd(released(Kangaroos) < released(Jets), released(Jets) < released(Hurricanes)) ::: Kangaroos must be released earlier than Jets, and Jets must be released earlier than Hurricanes\nreleased(Lovebird) < released(Glaciers) ::: Lovebird must be released earlier than Glaciers\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(And(released(Fiesta) < released(Hurricanes), Not(released(Fiesta) == released(Hurricanes)))) ::: A) Fiesta is released earlier than Hurricanes.\nis_valid(And(released(Jets) < released(Glaciers), Not(released(Jets) == released(Glaciers)))) ::: B) Jets is released earlier than Glaciers.\nis_valid(And(released(Kangaroos) < released(Glaciers), Not(released(Kangaroos) == released(Glaciers)))) ::: C) Kangaroos is released earlier than Glaciers.\nis_valid(And(released(Lovebird) < released(Hurricanes), Not(released(Lovebird) == released(Hurricanes)))) ::: D) Lovebird is released earlier than Hurricanes.\nis_valid(And(released(Lovebird) < released(Jets), Not(released(Lovebird) == released(Jets)))) ::: E) Lovebird is"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_1_3",
    "context": "A movie studio is scheduling the release of six films—Fiesta, Glaciers, Hurricanes, Jets, Kangaroos, and Lovebird. No two of these films can be released on the same date. The release schedule is governed by the following conditions: Fiesta must be released earlier than both Jets and Lovebird. Kangaroos must be released earlier than Jets, and Jets must be released earlier than Hurricanes. Lovebird must be released earlier than Glaciers.",
    "question": "If Glaciers is released earlier than Hurricanes, then each of the following could be true EXCEPT:",
    "answer": "E",
    "options": [
      "A) Glaciers is released fourth.",
      "B) Jets is released third.",
      "C) Kangaroos is released second.",
      "D) Lovebird is released third.",
      "E) Lovebird is released fifth."
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Fiesta, Glaciers, Hurricanes, Jets, Kangaroos, Lovebird])\nreleased = Function([films] -> [int])\nForAll([f:films], And(1 <= released(f), released(f) <= 6))\n\n# Constraints\nDistinct([f:films], released(f)) ::: No two of these films can be released on the same date\nAnd(released(Fiesta) < released(Jets), released(Fiesta) < released(Lovebird)) ::: Fiesta must be released earlier than both Jets and Lovebird\nAnd(released(Kangaroos) < released(Jets), released(Jets) < released(Hurricanes)) ::: Kangaroos must be released earlier than Jets, and Jets must be released earlier than Hurricanes\nreleased(Lovebird) < released(Glaciers) ::: Lovebird must be released earlier than Glaciers\n\n# Options\nQuestion ::: If Glaciers is released earlier than Hurricanes, then each of the following could be true EXCEPT:\nis_exception(is_sat(released(Glaciers) == 4)) ::: A) Glaciers is released fourth.\nis_exception(is_sat(released(Jets) == 3)) ::: B) Jets is released third.\nis_exception(is_sat(released(Kangaroos) == 2)) ::: C) Kangaroos is released second.\nis_exception(is_sat(released(Lovebird) == 3)) ::: D) Lovebird is released third.\nis_exception(is_sat(released(Lovebird) == 5)) ::: E) Lovebird is released fifth.\n------\nProblem:\nA company has six employees—Fred, Gail, Hank, Iris, Jill, and Kim—who work in either the accounting, human resources, or public relations department. The following conditions apply: Fred and Gail work in the same department. Hank and Iris work in different departments. Jill and Kim work in different departments."
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_1_4",
    "context": "A movie studio is scheduling the release of six films—Fiesta, Glaciers, Hurricanes, Jets, Kangaroos, and Lovebird. No two of these films can be released on the same date. The release schedule is governed by the following conditions: Fiesta must be released earlier than both Jets and Lovebird. Kangaroos must be released earlier than Jets, and Jets must be released earlier than Hurricanes. Lovebird must be released earlier than Glaciers.",
    "question": "If Lovebird is released earlier than Kangaroos, which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Lovebird is released third.",
      "B) Lovebird is released fourth.",
      "C) Hurricanes is released earlier than Lovebird.",
      "D) Jets is released earlier than Glaciers.",
      "E) Jets is released earlier than Lovebird."
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Fiesta, Glaciers, Hurricanes, Jets, Kangaroos, Lovebird])\nreleased = Function([films] -> [int])\nForAll([f:films], And(1 <= released(f), released(f) <= 6))\n\n# Constraints\nDistinct([f:films], released(f)) ::: No two of these films can be released on the same date\nAnd(released(Fiesta) < released(Jets), released(Fiesta) < released(Lovebird)) ::: Fiesta must be released earlier than both Jets and Lovebird\nAnd(released(Kangaroos) < released(Jets), released(Jets) < released(Hurricanes)) ::: Kangaroos must be released earlier than Jets, and Jets must be released earlier than Hurricanes\nreleased(Lovebird) < released(Glaciers) ::: Lovebird must be released earlier than Glaciers\n\n# Options\nQuestion ::: If Lovebird is released earlier than Kangaroos, which one of the following could be true?\nis_exception(is_sat(released(Lovebird) == 3)) ::: A) Lovebird is released third.\nis_exception(is_sat(released(Lovebird) == 4)) ::: B) Lovebird is released fourth.\nis_exception(is_sat(released(Hurricanes) < released(Lovebird))) ::: C) Hurricanes is released earlier than Lovebird.\nis_exception(is_sat(released(Jets) < released(Glaciers))) ::: D) Jets is released earlier than Glaciers.\nis_exception(is_sat(released(Jets) < released(Lovebird))) ::: E) Jets is released earlier than Lovebird.\n------\nProblem:\nA company has six employees—Fred, Gail, Hank, Iris, Jill, and Kim—who work in either the accounting, human resources, or public relations department. The following conditions apply: Fred and Gail work in the same department. Hank and Iris work in different"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_1_5",
    "context": "A movie studio is scheduling the release of six films—Fiesta, Glaciers, Hurricanes, Jets, Kangaroos, and Lovebird. No two of these films can be released on the same date. The release schedule is governed by the following conditions: Fiesta must be released earlier than both Jets and Lovebird. Kangaroos must be released earlier than Jets, and Jets must be released earlier than Hurricanes. Lovebird must be released earlier than Glaciers.",
    "question": "Which one of the following, if substituted for the condition that Fiesta must be released earlier than both Jets and Lovebird, would have the same effect on the order in which the films are released?",
    "answer": "A",
    "options": [
      "A) Only Kangaroos can be released earlier than Fiesta.",
      "B) Kangaroos must be released earlier than Lovebird.",
      "C) Fiesta must be released either first or second.",
      "D) Fiesta must be released earlier than both Kangaroos and Lovebird.",
      "E) Either Fiesta or Kangaroos must be released first."
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Fiesta, Glaciers, Hurricanes, Jets, Kangaroos, Lovebird])\nreleased = Function([films] -> [int])\nForAll([f:films], And(1 <= released(f), released(f) <= 6))\n\n# Constraints\nDistinct([f:films], released(f)) ::: No two of these films can be released on the same date\nreleased(Fiesta) < released(Jets) ::: Fiesta must be released earlier than both Jets and Lovebird\nreleased(Fiesta) < released(Lovebird) ::: Fiesta must be released earlier than both Jets and Lovebird\nreleased(Kangaroos) < released(Jets) ::: Kangaroos must be released earlier than Jets, and Jets must be released earlier than Hurricanes\nreleased(Jets) < released(Hurricanes) ::: Kangaroos must be released earlier than Jets, and Jets must be released earlier than Hurricanes\nreleased(Lovebird) < released(Glaciers) ::: Lovebird must be released earlier than Glaciers\n\n# Options\nQuestion ::: Which one of the following, if substituted for the condition that Fiesta must be released earlier than both Jets and Lovebird, would have the same effect on the order in which the films are released?\nis_sat(ForAll([f:films], Implies(released(Kangaroos) < released(f), f!= Fiesta))) ::: A) Only Kangaroos can be released earlier than Fiesta.\nis_sat(released(Kangaroos) < released(Lovebird)) ::: B) Kangaroos must be released earlier than Lovebird.\nis_sat(And(released(Fiesta) <= 2, released(Fiesta) >= 1))) ::: C) Fiesta must be released either first or second.\nis_sat(And(released(Fiesta) < released(Kangaroos), released(Fiesta) < released(Lovebird))) ::: D) Fiesta must be released earlier than both"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_2_6",
    "context": "The applications of seven job candidates—Farrell, Grant, Hong, Inman, Kent, Lopez, and Madsen—will be evaluated by four human resource officers—Rao, Smith, Tipton, and Ullman. Each application will be evaluated by exactly one officer, and each officer will evaluate at least one application, subject to the following constraints: Grant's application must be evaluated by Ullman. Farrell's application must be evaluated by the same officer who evaluates Lopez's application. Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application. The officer who evaluates Kent's application cannot evaluate any other applications. Smith must evaluate more of the applications than Tipton does.",
    "question": "Which one of the following could be the assignment of applications to officers?",
    "answer": "A",
    "options": [
      "A) Rao: Hong Smith: Farrell, Lopez, Madsen Tipton: Kent Ullman: Grant, Inman",
      "B) Rao: Inman Smith: Hong, Lopez, Madsen Tipton: Kent Ullman: Farrell, Grant",
      "C) Rao: Madsen Smith: Farrell, Lopez Tipton: Kent Ullman: Grant, Hong, Inman",
      "D) Rao: Farrell, Lopez Smith: Hong, Kent, Madsen Tipton: Inman Ullman: Grant",
      "E) Rao: Farrell, Grant, Lopez Smith: Hong, Madsen Tipton: Kent Ullman: Inman"
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Farrell, Grant, Hong, Inman, Kent, Lopez, Madsen])\nofficers = EnumSort([Rao, Smith, Tipton, Ullman])\nevaluates = Function([applicants, officers] -> [bool])\n\n# Constraints\nForAll([a:applicants], Count([o:officers], evaluates(a, o)) == 1) ::: Each application will be evaluated by exactly one officer\nForAll([o:officers], Count([a:applicants], evaluates(a, o)) >= 1) ::: Each officer will evaluate at least one application\nevaluates(Grant, Ullman) ::: Grant's application must be evaluated by Ullman\nevaluates(Farrell, o) == evaluates(Lopez, o) ::: Farrell's application must be evaluated by the same officer who evaluates Lopez's application\nImplies(evaluates(Hong, o), Not(evaluates(Inman, o))) ::: Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application\nevaluates(Kent, o) == evaluates(o, o) ::: The officer who evaluates Kent's application cannot evaluate any other applications\nCount([a:applicants], evaluates(a, Smith)) > Count([a:applicants], evaluates(a, Tipton)) ::: Smith must evaluate more of the applications than Tipton does\n\n# Options\nQuestion ::: Which one of the following could be the assignment of applications to officers?\nis_sat(evaluates(Hong, Rao) && evaluates(Farrell, Smith) && evaluates(Lopez, Smith) && evaluates(Madsen, Smith) && evaluates(Kent, Tipton) && evaluates(Grant, Ullman) && evaluates(Inman, Ullman)) ::: A) Rao: Hong Smith: Farrell, Lopez, Madsen Tipton: Kent Ullman: Grant, Inman\nis_sat(evaluates(Inman, Rao) && evaluates(Hong, Smith) && evalu"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_2_7",
    "context": "The applications of seven job candidates—Farrell, Grant, Hong, Inman, Kent, Lopez, and Madsen—will be evaluated by four human resource officers—Rao, Smith, Tipton, and Ullman. Each application will be evaluated by exactly one officer, and each officer will evaluate at least one application, subject to the following constraints: Grant's application must be evaluated by Ullman. Farrell's application must be evaluated by the same officer who evaluates Lopez's application. Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application. The officer who evaluates Kent's application cannot evaluate any other applications. Smith must evaluate more of the applications than Tipton does.",
    "question": "If Hong's application is evaluated by Rao, which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Farrells application is evaluated by Rao.",
      "B) Inmans application is evaluated by Smith.",
      "C) Kents application is evaluated by Rao.",
      "D) Lopezs application is evaluated by Ullman.",
      "E) Madsens application is evaluated by Tipton."
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Farrell, Grant, Hong, Inman, Kent, Lopez, Madsen])\nofficers = EnumSort([Rao, Smith, Tipton, Ullman])\nevaluates = Function([applicants, officers] -> [bool])\n\n# Constraints\nForAll([a:applicants], Count([o:officers], evaluates(a, o)) == 1) ::: Each application will be evaluated by exactly one officer\nForAll([o:officers], Count([a:applicants], evaluates(a, o)) >= 1) ::: Each officer will evaluate at least one application\nevaluates(Grant, Ullman) ::: Grant's application must be evaluated by Ullman\nevaluates(Farrell, evaluates(Lopez, _)) ::: Farrell's application must be evaluated by the same officer who evaluates Lopez's application\nNot(evaluates(Hong, evaluates(Inman, _))) ::: Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application\nNot(evaluates(Madsen, evaluates(Inman, _))) ::: Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application\nevaluates(Kent, evaluates(_, _)) ::: The officer who evaluates Kent's application cannot evaluate any other applications\nCount([a:applicants], evaluates(a, Smith)) > Count([a:applicants], evaluates(a, Tipton)) ::: Smith must evaluate more of the applications than Tipton does\nevaluates(Hong, Rao) ::: Hong's application is evaluated by Rao\n\n# Options\nQuestion ::: If Hong's application is evaluated by Rao, which one of the following could be true?\nis_valid(evaluates(Farrell, Rao)) ::: (A)\nis_valid(evaluates(Inman, Smith)) ::: (B)\nis_valid(evaluates(Kent, Rao)) ::: (C)\nis_valid(evaluates(Lopez, Ullman)) ::: (D)\nis_valid(evaluates(Madsen, Tipton)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_2_8",
    "context": "The applications of seven job candidates—Farrell, Grant, Hong, Inman, Kent, Lopez, and Madsen—will be evaluated by four human resource officers—Rao, Smith, Tipton, and Ullman. Each application will be evaluated by exactly one officer, and each officer will evaluate at least one application, subject to the following constraints: Grant's application must be evaluated by Ullman. Farrell's application must be evaluated by the same officer who evaluates Lopez's application. Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application. The officer who evaluates Kent's application cannot evaluate any other applications. Smith must evaluate more of the applications than Tipton does.",
    "question": "If exactly two of the applications are evaluated by Tipton, then each of the following must be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) Exactly one of the applications is evaluated by Rao.",
      "B) Exactly one of the applications is evaluated by Ullman.",
      "C) Farrells application is evaluated by Tipton.",
      "D) Inmans application is evaluated by Smith.",
      "E) Lopezs application is evaluated by Smith."
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Farrell, Grant, Hong, Inman, Kent, Lopez, Madsen])\nofficers = EnumSort([Rao, Smith, Tipton, Ullman])\nevaluates = Function([applicants, officers] -> [bool])\n\n# Constraints\nForAll([a:applicants], Count([o:officers], evaluates(a, o)) == 1) ::: Each application will be evaluated by exactly one officer\nForAll([o:officers], Count([a:applicants], evaluates(a, o)) >= 1) ::: Each officer will evaluate at least one application\nevaluates(Grant, Ullman) ::: Grant's application must be evaluated by Ullman\nevaluates(Farrell, o) == evaluates(Lopez, o) ::: Farrell's application must be evaluated by the same officer who evaluates Lopez's application\nevaluates(Hong, o)!= evaluates(Madsen, o) ::: Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application\nevaluates(Kent, o)!= evaluates(a:applicants, o) ::: The officer who evaluates Kent's application cannot evaluate any other applications\nCount([a:applicants], evaluates(a, Smith)) > Count([a:applicants], evaluates(a, Tipton)) ::: Smith must evaluate more of the applications than Tipton does\n\n# Options\nQuestion ::: If exactly two of the applications are evaluated by Tipton, then each of the following must be true EXCEPT:\nis_exception(is_sat(Count([a:applicants], evaluates(a, Rao)) == 1)) ::: (A)\nis_exception(is_sat(Count([a:applicants], evaluates(a, Ullman)) == 1)) ::: (B)\nis_exception(is_sat(evaluates(Farrell, Tipton))) ::: (C)\nis_exception(is_sat(evaluates(Inman, Smith))) ::: (D)\nis_exception(is_sat(evaluates(Lopez, Smith))) ::: (E)\n------\nProblem:\nThe"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_2_9",
    "context": "The applications of seven job candidates—Farrell, Grant, Hong, Inman, Kent, Lopez, and Madsen—will be evaluated by four human resource officers—Rao, Smith, Tipton, and Ullman. Each application will be evaluated by exactly one officer, and each officer will evaluate at least one application, subject to the following constraints: Grant's application must be evaluated by Ullman. Farrell's application must be evaluated by the same officer who evaluates Lopez's application. Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application. The officer who evaluates Kent's application cannot evaluate any other applications. Smith must evaluate more of the applications than Tipton does.",
    "question": "If the officer who evaluates Madsens application does not evaluate any other application, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Madsens application is evaluated by Tipton.",
      "B) Lopezs application is evaluated by Smith.",
      "C) Kents application is evaluated by Tipton.",
      "D) Inmans application is evaluated by Smith.",
      "E) Hongs application is evaluated by Smith."
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Farrell, Grant, Hong, Inman, Kent, Lopez, Madsen])\nofficers = EnumSort([Rao, Smith, Tipton, Ullman])\nevaluates = Function([applicants, officers] -> [bool])\n\n# Constraints\nForAll([a:applicants], Count([o:officers], evaluates(a, o)) == 1) ::: Each application will be evaluated by exactly one officer\nForAll([o:officers], Count([a:applicants], evaluates(a, o)) >= 1) ::: Each officer will evaluate at least one application\nevaluates(Grant, Ullman) ::: Grant's application must be evaluated by Ullman\nevaluates(Farrell, evaluates(Lopez, _)) ::: Farrell's application must be evaluated by the same officer who evaluates Lopez's application\nNot(evaluates(Hong, evaluates(Inman, _))) ::: Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application\nNot(evaluates(Madsen, evaluates(Inman, _))) ::: Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application\nevaluates(Kent, evaluates(_, _)) ::: The officer who evaluates Kent's application cannot evaluate any other applications\nCount([a:applicants], evaluates(a, Smith)) > Count([a:applicants], evaluates(a, Tipton)) ::: Smith must evaluate more of the applications than Tipton does\n\n# Options\nQuestion ::: If the officer who evaluates Madsens application does not evaluate any other application, which one of the following must be true?\nis_valid(evaluates(Madsen, Tipton)) ::: A) Madsens application is evaluated by Tipton.\nis_valid(evaluates(Lopez, Smith)) ::: B) Lopezs application is evaluated by Smith.\nis_valid(evaluates(Kent, Tipton)) ::: C) Kents application is evaluated by Tipton.\nis_valid(evaluates(Inman, Smith)) ::: D) Inmans application is evaluated by Smith.\nis_valid(evaluates(H"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_2_10",
    "context": "The applications of seven job candidates—Farrell, Grant, Hong, Inman, Kent, Lopez, and Madsen—will be evaluated by four human resource officers—Rao, Smith, Tipton, and Ullman. Each application will be evaluated by exactly one officer, and each officer will evaluate at least one application, subject to the following constraints: Grant's application must be evaluated by Ullman. Farrell's application must be evaluated by the same officer who evaluates Lopez's application. Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application. The officer who evaluates Kent's application cannot evaluate any other applications. Smith must evaluate more of the applications than Tipton does.",
    "question": "If Farrells application is evaluated by the same officer who evaluates Inmans application, then any of the following could be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) Hongs application is evaluated by Ullman.",
      "B) Kents application is evaluated by Tipton.",
      "C) Lopezs application is evaluated by Ullman.",
      "D) Madsens application is evaluated by Smith.",
      "E) Madsens application is evaluated by Ullman."
    ],
    "raw_logic_programs": [
      "# Declarations\napplicants = EnumSort([Farrell, Grant, Hong, Inman, Kent, Lopez, Madsen])\nofficers = EnumSort([Rao, Smith, Tipton, Ullman])\nevaluates = Function([applicants, officers] -> [bool])\n\n# Constraints\nForAll([a:applicants], Count([o:officers], evaluates(a, o)) == 1) ::: Each application will be evaluated by exactly one officer\nForAll([o:officers], Count([a:applicants], evaluates(a, o)) >= 1) ::: Each officer will evaluate at least one application\nevaluates(Grant, Ullman) ::: Grant's application must be evaluated by Ullman\nevaluates(Farrell, o) == evaluates(Lopez, o) ::: Farrell's application must be evaluated by the same officer who evaluates Lopez's application\nNot(evaluates(Hong, o) == evaluates(Inman, o)) ::: Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application\nNot(evaluates(Madsen, o) == evaluates(Inman, o)) ::: Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application\nevaluates(Kent, o) == evaluates(o, o) ::: The officer who evaluates Kent's application cannot evaluate any other applications\nCount([a:applicants], evaluates(a, Smith)) > Count([a:applicants], evaluates(a, Tipton)) ::: Smith must evaluate more of the applications than Tipton does\n\n# Options\nQuestion ::: If Farrells application is evaluated by the same officer who evaluates Inmans application, then any of the following could be true EXCEPT:\nis_exception(is_sat(evaluates(Hong, Ullman))) ::: A) Hongs application is evaluated by Ullman.\nis_exception(is_sat(evaluates(Kent, Tipton))) ::: B) Kents application is evaluated by Tipton.\nis_exception(is_sat(evaluates(Lopez, Ullman))) ::: C) Lopezs application is evaluated"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_2_11",
    "context": "The applications of seven job candidates—Farrell, Grant, Hong, Inman, Kent, Lopez, and Madsen—will be evaluated by four human resource officers—Rao, Smith, Tipton, and Ullman. Each application will be evaluated by exactly one officer, and each officer will evaluate at least one application, subject to the following constraints: Grant's application must be evaluated by Ullman. Farrell's application must be evaluated by the same officer who evaluates Lopez's application. Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application. The officer who evaluates Kent's application cannot evaluate any other applications. Smith must evaluate more of the applications than Tipton does.",
    "question": "If Farrells application is evaluated by Rao, then for how many of the other applications is the identity of the officer who evaluates it fully determined?",
    "answer": "E",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\napplications = EnumSort([Farrell, Grant, Hong, Inman, Kent, Lopez, Madsen])\nofficers = EnumSort([Rao, Smith, Tipton, Ullman])\nevaluates = Function([applications, officers] -> [bool])\n\n# Constraints\nForAll([a:applications], Count([o:officers], evaluates(a, o)) == 1) ::: Each application will be evaluated by exactly one officer\nForAll([o:officers], Count([a:applications], evaluates(a, o)) >= 1) ::: Each officer will evaluate at least one application\nevaluates(Grant, Ullman) ::: Grant's application must be evaluated by Ullman\nevaluates(Farrell, evaluates(Lopez, _)) ::: Farrell's application must be evaluated by the same officer who evaluates Lopez's application\nNot(evaluates(Hong, evaluates(Inman, _))) ::: Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application\nNot(evaluates(Madsen, evaluates(Inman, _))) ::: Neither Hong's application nor Madsen's application can be evaluated by the same officer who evaluates Inman's application\nevaluates(Kent, evaluates(_, _)) ::: The officer who evaluates Kent's application cannot evaluate any other applications\nCount([a:applications], evaluates(a, Smith)) > Count([a:applications], evaluates(a, Tipton)) ::: Smith must evaluate more of the applications than Tipton does\n\n# Options\nQuestion ::: If Farrells application is evaluated by Rao, then for how many of the other applications is the identity of the officer who evaluates it fully determined?\nis_sat(ForAll([a:applications], evaluates(a, Rao) == evaluates(Farrell, Rao))) ::: A) one\nis_sat(ForAll([a:applications], evaluates(a, Rao) == evaluates(Farrell, Rao))) ::: B) two\nis_sat(ForAll([a:applications], evaluates(a, Rao) == evaluates(Farrell, Rao))) ::: C) three"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_3_12",
    "context": "A six-week literature course is being planned in which six books—F, K, N, O, R, and T—will be discussed. The books will be discussed one at a time, one book per week. In addition, written summaries will be required for one or more of the books. The order in which the books are discussed and the selection of books to be summarized is subject to the following conditions: No two books that are summarized are discussed in consecutive weeks. If N is not summarized, then both R and T are summarized. N is discussed earlier than T, and T is discussed earlier than O. F is discussed earlier than O, and O is discussed earlier than both K and R.",
    "question": "Which one of the following could be the plan for the course, showing the order, from first to last, in which the books are discussed and the choice of books to be summarized?",
    "answer": "A",
    "options": [
      "A) F, N, T, O, R, K; with only T and R summarized",
      "B) F, T, N, O, K, R; with only N and K summarized",
      "C) N, F, T, O, K, R; with only T, O, and R summarized",
      "D) N, T, F, O, K, R; with only T and O summarized",
      "E) N, T, O, F, K, R; with only T and R summarized"
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([F, K, N, O, R, T])\nsummarized = Function([books] -> [bool])\nForAll([b:books], And(1 <= summarized(b), summarized(b) <= 1))\n\n# Constraints\nForAll([b1:books, b2:books], Implies(summarized(b1), summarized(b2), Not(b1 == b2))) ::: No two books that are summarized are discussed in consecutive weeks\nImplies(Not(summarized(N)), And(summarized(R), summarized(T))) ::: If N is not summarized, then both R and T are summarized\nAnd(summarized(N), Not(summarized(T))) ::: N is discussed earlier than T\nAnd(summarized(T), Not(summarized(O))) ::: T is discussed earlier than O\nAnd(summarized(F), Not(summarized(O))) ::: F is discussed earlier than O\nAnd(summarized(O), Not(summarized(K), summarized(R))) ::: O is discussed earlier than both K and R\n\n# Options\nQuestion ::: Which one of the following could be the plan for the course, showing the order, from first to last, in which the books are discussed and the choice of books to be summarized?\nis_sat(And(summarized(F), summarized(N), summarized(T), summarized(O), summarized(R), summarized(K), Not(summarized(N)), summarized(T), summarized(R))) ::: A) F, N, T, O, R, K; with only T and R summarized\nis_sat(And(summarized(F), summarized(T), summarized(N), summarized(O), summarized(K), summarized(R), summarized(N), summarized(K))) ::: B) F, T, N, O, K, R; with only N and K summarized\nis_sat(And(summarized(N), summarized(F), summarized(T), summarized(O), summarized(K), summarized(R), summarized(T), summarized(O), summarized(R))) ::: C) N, F, T, O,"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_3_13",
    "context": "A six-week literature course is being planned in which six books—F, K, N, O, R, and T—will be discussed. The books will be discussed one at a time, one book per week. In addition, written summaries will be required for one or more of the books. The order in which the books are discussed and the selection of books to be summarized is subject to the following conditions: No two books that are summarized are discussed in consecutive weeks. If N is not summarized, then both R and T are summarized. N is discussed earlier than T, and T is discussed earlier than O. F is discussed earlier than O, and O is discussed earlier than both K and R.",
    "question": "If N is the second book discussed and it is not summarized, which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) F is summarized.",
      "B) K is summarized.",
      "C) O is summarized.",
      "D) T is discussed earlier than F.",
      "E) The third book discussed is not summarized."
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([F, K, N, O, R, T])\ndiscussed = Function([books] -> [bool])\nsummarized = Function([books] -> [bool])\nForAll([b:books], And(1 <= discussed(b), discussed(b) <= 6))\n\n# Constraints\nForAll([b:books], And(1 <= summarized(b), summarized(b) <= 6))\nForAll([b:books], Implies(summarized(b), discussed(b))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(discussed(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll(["
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_3_14",
    "context": "A six-week literature course is being planned in which six books—F, K, N, O, R, and T—will be discussed. The books will be discussed one at a time, one book per week. In addition, written summaries will be required for one or more of the books. The order in which the books are discussed and the selection of books to be summarized is subject to the following conditions: No two books that are summarized are discussed in consecutive weeks. If N is not summarized, then both R and T are summarized. N is discussed earlier than T, and T is discussed earlier than O. F is discussed earlier than O, and O is discussed earlier than both K and R.",
    "question": "If O is summarized, which one of the following CANNOT be true?",
    "answer": "C",
    "options": [
      "A) F is the first book discussed.",
      "B) K is the sixth book discussed.",
      "C) F is summarized.",
      "D) K is not summarized.",
      "E) N is not summarized."
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([F, K, N, O, R, T])\ndiscussed = Function([books] -> [bool])\nsummarized = Function([books] -> [bool])\nForAll([b:books], And(1 <= discussed(b), discussed(b) <= 6))\n\n# Constraints\nForAll([b:books], And(1 <= summarized(b), summarized(b) <= 6))\nForAll([b:books], Implies(summarized(b), discussed(b))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(discussed(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll([b:books], Implies(summarized(b), Not(summarized(b)))) ::: summaries will be required for one or more of the books\nForAll(["
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_3_15",
    "context": "A six-week literature course is being planned in which six books—F, K, N, O, R, and T—will be discussed. The books will be discussed one at a time, one book per week. In addition, written summaries will be required for one or more of the books. The order in which the books are discussed and the selection of books to be summarized is subject to the following conditions: No two books that are summarized are discussed in consecutive weeks. If N is not summarized, then both R and T are summarized. N is discussed earlier than T, and T is discussed earlier than O. F is discussed earlier than O, and O is discussed earlier than both K and R.",
    "question": "If neither of the last two books discussed is summarized, which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) K is summarized",
      "B) O is summarized",
      "C) R is summarized",
      "D) F and T summarized",
      "E) N is not summarized"
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([F, K, N, O, R, T])\ndiscussed = Function([books] -> [bool])\nsummarized = Function([books] -> [bool])\nForAll([b:books], And(discussed(b), summarized(b)))\n\n# Constraints\nForAll([b:books], Count([w:books], And(w!= b, discussed(w))) >= 1) ::: No two books that are summarized are discussed in consecutive weeks\nImplies(Not(summarized(N)), And(summarized(R), summarized(T))) ::: If N is not summarized, then both R and T are summarized\nAnd(discussed(N) < discussed(T), discussed(T) < discussed(O)) ::: N is discussed earlier than T, and T is discussed earlier than O\nAnd(discussed(F) < discussed(O), discussed(O) < discussed(K), discussed(O) < discussed(R)) ::: F is discussed earlier than O, and O is discussed earlier than both K and R\n\n# Options\nQuestion ::: If neither of the last two books discussed is summarized, which one of the following could be true?\nis_valid(Exists([b:books], And(discussed(b), summarized(b)))) ::: A) K is summarized\nis_valid(Exists([b:books], And(discussed(b), summarized(b)))) ::: B) O is summarized\nis_valid(Exists([b:books], And(discussed(b), summarized(b)))) ::: C) R is summarized\nis_valid(Exists([b:books], And(discussed(b), summarized(b)))) ::: D) F and T summarized\nis_valid(Exists([b:books], And(discussed(b), summarized(b)))) ::: E) N is not summarized\n------\nProblem:\nA company has six employees—F, G, H, J, K, and L—who work in either the accounting, human resources, or public relations department. The following conditions apply: F and G work in the same department. H and J work in different departments. K and L work in different departments. F and H work in different departments. J and L work in the same department.\nQuestion"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_3_16",
    "context": "A six-week literature course is being planned in which six books—F, K, N, O, R, and T—will be discussed. The books will be discussed one at a time, one book per week. In addition, written summaries will be required for one or more of the books. The order in which the books are discussed and the selection of books to be summarized is subject to the following conditions: No two books that are summarized are discussed in consecutive weeks. If N is not summarized, then both R and T are summarized. N is discussed earlier than T, and T is discussed earlier than O. F is discussed earlier than O, and O is discussed earlier than both K and R.",
    "question": "Which one of the following, if substituted for the condition that F is discussed earlier than O, and O is discussed earlier than both K and R, would have the same effect in determining the plan for the literature course?",
    "answer": "D",
    "options": [
      "A) T is discussed third, and the last two books discussed are K and R, not necessarily in that order.",
      "B) T is discussed earlier than F, and the last two books discussed are K and R, not necessarily in that order.",
      "C) K and R are among the last three books discussed, and F is among the first three books discussed.",
      "D) K and R are discussed in consecutive weeks, not necessarily in that order, and O is discussed fourth.",
      "E) K and R are discussed in consecutive weeks, not necessarily in that order, and F is discussed third."
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([F, K, N, O, R, T])\nsummarized = Function([books] -> [bool])\ndiscussed = Function([books, int] -> [bool])\n\n# Constraints\nForAll([b:books], Count([w:books], And(discussed(b, w), summarized(b))) <= 1) ::: No two books that are summarized are discussed in consecutive weeks\nImplies(Not(summarized(N)), And(summarized(R), summarized(T))) ::: If N is not summarized, then both R and T are summarized\nImplies(summarized(N), Not(summarized(R))) ::: N is discussed earlier than T, and T is discussed earlier than O\nImplies(discussed(F, w), Not(discussed(O, w))) ::: F is discussed earlier than O, and O is discussed earlier than both K and R\n\n# Options\nQuestion ::: Which one of the following, if substituted for the condition that F is discussed earlier than O, and O is discussed earlier than both K and R, would have the same effect in determining the plan for the literature course?\nis_sat(ForAll([b:books], Count([w:books], And(discussed(b, w), summarized(b))) <= 1) ::: No two books that are summarized are discussed in consecutive weeks\nAnd(Implies(Not(summarized(N)), And(summarized(R), summarized(T))), Implies(summarized(N), Not(summarized(R))), Implies(discussed(F, w), Not(discussed(O, w))))) ::: N is discussed earlier than T, and T is discussed earlier than O\nAnd(Implies(discussed(F, w), Not(discussed(O, w))), Implies(discussed(T, w), Not(discussed(F, w))), Implies(discussed(K, w), Not(discussed(R, w))))) ::: T is discussed third, and the last two books discussed are K and R, not necessarily in that order.\nAnd(Implies(discussed(F, w), Not(discussed(O, w))), Implies(dis"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_4_17",
    "context": "A museum curator is arranging seven paintings—a Morisot, a Pissarro, a Renoir, a Sisley, a Turner, a Vuillard, and a Whistler. The paintings will be arranged in a horizontal row of seven positions, with the first position being closest to the entrance and the seventh being furthest from the entrance. The arrangement is subject to the following constraints: The Turner must be closer to the entrance than the Whistler is. The Renoir must be closer to the entrance than the Morisot is, with exactly one other painting between them. The Pissarro and the Sisley must be next to each other. If the Vuillard is not in the third position, it must be in the fourth position.",
    "question": "Which one of the following could be the arrangement of the paintings, listed in order from the first position to the seventh?",
    "answer": "C",
    "options": [
      "A) Morisot, Turner, Renoir, Vuillard, Whistler, Sisley, Pissarro",
      "B) Pissarro, Sisley, Renoir, Vuillard, Morisot, Whistler, Turner",
      "C) Renoir, Turner, Morisot, Vuillard, Whistler, Sisley, Pissarro",
      "D) Sisley, Turner, Pissarro, Vuillard, Renoir, Whistler, Morisot",
      "E) Turner, Vuillard, Pissarro, Sisley, Renoir, Whistler, Morisot"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_4_18",
    "context": "A museum curator is arranging seven paintings—a Morisot, a Pissarro, a Renoir, a Sisley, a Turner, a Vuillard, and a Whistler. The paintings will be arranged in a horizontal row of seven positions, with the first position being closest to the entrance and the seventh being furthest from the entrance. The arrangement is subject to the following constraints: The Turner must be closer to the entrance than the Whistler is. The Renoir must be closer to the entrance than the Morisot is, with exactly one other painting between them. The Pissarro and the Sisley must be next to each other. If the Vuillard is not in the third position, it must be in the fourth position.",
    "question": "If the Sisley is in the seventh position, which one of the following could be the position that the Turner is in?",
    "answer": "A",
    "options": [
      "A) second",
      "B) third",
      "C) fourth",
      "D) fifth",
      "E) sixth"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_4_19",
    "context": "A museum curator is arranging seven paintings—a Morisot, a Pissarro, a Renoir, a Sisley, a Turner, a Vuillard, and a Whistler. The paintings will be arranged in a horizontal row of seven positions, with the first position being closest to the entrance and the seventh being furthest from the entrance. The arrangement is subject to the following constraints: The Turner must be closer to the entrance than the Whistler is. The Renoir must be closer to the entrance than the Morisot is, with exactly one other painting between them. The Pissarro and the Sisley must be next to each other. If the Vuillard is not in the third position, it must be in the fourth position.",
    "question": "If the Pissarro is in the fifth position, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) The Morisot is in the fourth position.",
      "B) The Renoir is in the second position.",
      "C) The Sisley is in the sixth position.",
      "D) The Turner is in the first position.",
      "E) The Vuillard is in the third position."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_4_20",
    "context": "A museum curator is arranging seven paintings—a Morisot, a Pissarro, a Renoir, a Sisley, a Turner, a Vuillard, and a Whistler. The paintings will be arranged in a horizontal row of seven positions, with the first position being closest to the entrance and the seventh being furthest from the entrance. The arrangement is subject to the following constraints: The Turner must be closer to the entrance than the Whistler is. The Renoir must be closer to the entrance than the Morisot is, with exactly one other painting between them. The Pissarro and the Sisley must be next to each other. If the Vuillard is not in the third position, it must be in the fourth position.",
    "question": "Any one of the following could be in the third position EXCEPT:",
    "answer": "E",
    "options": [
      "A) the Morisot",
      "B) the Renoir",
      "C) the Sisley",
      "D) the Turner",
      "E) the Whistler"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_4_21",
    "context": "A museum curator is arranging seven paintings—a Morisot, a Pissarro, a Renoir, a Sisley, a Turner, a Vuillard, and a Whistler. The paintings will be arranged in a horizontal row of seven positions, with the first position being closest to the entrance and the seventh being furthest from the entrance. The arrangement is subject to the following constraints: The Turner must be closer to the entrance than the Whistler is. The Renoir must be closer to the entrance than the Morisot is, with exactly one other painting between them. The Pissarro and the Sisley must be next to each other. If the Vuillard is not in the third position, it must be in the fourth position.",
    "question": "If the Renoir and the Morisot are both between the Turner and the Whistler, which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) The Pissarro is in the fifth position.",
      "B) The Sisley is in the second position.",
      "C) The Turner is in the third position.",
      "D) The Vuillard is in the fourth position.",
      "E) The Whistler is in the sixth position."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_4_22",
    "context": "A museum curator is arranging seven paintings—a Morisot, a Pissarro, a Renoir, a Sisley, a Turner, a Vuillard, and a Whistler. The paintings will be arranged in a horizontal row of seven positions, with the first position being closest to the entrance and the seventh being furthest from the entrance. The arrangement is subject to the following constraints: The Turner must be closer to the entrance than the Whistler is. The Renoir must be closer to the entrance than the Morisot is, with exactly one other painting between them. The Pissarro and the Sisley must be next to each other. If the Vuillard is not in the third position, it must be in the fourth position.",
    "question": "If there is exactly one painting between the Turner and the Whistler, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The Morisot is in the seventh position.",
      "B) The Pissarro is in the first position.",
      "C) The Renoir is in the fourth position.",
      "D) The Turner is in the second position.",
      "E) The Vuillard is in the third position."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201312_2-G_4_23",
    "context": "A museum curator is arranging seven paintings—a Morisot, a Pissarro, a Renoir, a Sisley, a Turner, a Vuillard, and a Whistler. The paintings will be arranged in a horizontal row of seven positions, with the first position being closest to the entrance and the seventh being furthest from the entrance. The arrangement is subject to the following constraints: The Turner must be closer to the entrance than the Whistler is. The Renoir must be closer to the entrance than the Morisot is, with exactly one other painting between them. The Pissarro and the Sisley must be next to each other. If the Vuillard is not in the third position, it must be in the fourth position.",
    "question": "If the Turner is next to the Vuillard, which one of the following is a pair of paintings in which the one mentioned first must be closer to the entrance than the one mentioned second?",
    "answer": "B",
    "options": [
      "A) the Pissarro and the Sisley",
      "B) the Renoir and the Whistler",
      "C) the Turner and the Vuillard",
      "D) the Vuillard and the Turner",
      "E) the Whistler and the Renoir"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_1_1",
    "context": "A radio station airs hourly news updates every morning. Each update consists of exactly five reports—two of general interest: international and national; and three of local interest: sports, traffic, and weather. Each update must be structured as follows: There are exactly two segments, the first segment containing three reports and the second segment containing two. Within each segment, reports are ordered by length, from longest to shortest. Each segment contains at least one report of local interest. The national report is always the longest of the five reports. The sports report is always the shortest of the five reports. The international report is always longer than the weather report.",
    "question": "Which one of the following could be an accurate matching of reports to their segments, with the reports listed in order from earliest to latest?",
    "answer": "B",
    "options": [
      "A) first segment: international, national, sports second segment: traffic, weather",
      "B) first segment: national, international, sports second segment: weather, traffic",
      "C) first segment: national, international, weather second segment: sports, traffic",
      "D) first segment: national, weather, international second segment: traffic, sports",
      "E) first segment: traffic, weather, sports second segment: national, international"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_1_2",
    "context": "A radio station airs hourly news updates every morning. Each update consists of exactly five reports—two of general interest: international and national; and three of local interest: sports, traffic, and weather. Each update must be structured as follows: There are exactly two segments, the first segment containing three reports and the second segment containing two. Within each segment, reports are ordered by length, from longest to shortest. Each segment contains at least one report of local interest. The national report is always the longest of the five reports. The sports report is always the shortest of the five reports. The international report is always longer than the weather report.",
    "question": "If the traffic report is the last report in the first segment, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The national report is the first report in the first segment.",
      "B) The international report is the second report in the first segment.",
      "C) The weather report is the second report in the first segment.",
      "D) The national report is the first report in the second segment.",
      "E) The sports report is the last report in the second segment."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_1_3",
    "context": "A radio station airs hourly news updates every morning. Each update consists of exactly five reports—two of general interest: international and national; and three of local interest: sports, traffic, and weather. Each update must be structured as follows: There are exactly two segments, the first segment containing three reports and the second segment containing two. Within each segment, reports are ordered by length, from longest to shortest. Each segment contains at least one report of local interest. The national report is always the longest of the five reports. The sports report is always the shortest of the five reports. The international report is always longer than the weather report.",
    "question": "If the national report is the first report in the second segment, then exactly how many of the reports are there any one of which could be the first report in the first segment?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_1_4",
    "context": "A radio station airs hourly news updates every morning. Each update consists of exactly five reports—two of general interest: international and national; and three of local interest: sports, traffic, and weather. Each update must be structured as follows: There are exactly two segments, the first segment containing three reports and the second segment containing two. Within each segment, reports are ordered by length, from longest to shortest. Each segment contains at least one report of local interest. The national report is always the longest of the five reports. The sports report is always the shortest of the five reports. The international report is always longer than the weather report.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "D",
    "options": [
      "A) The international report is the first report in the first segment.",
      "B) The national report is the first report in the first segment.",
      "C) The national report is the first report in the second segment.",
      "D) The weather report is the first report in the first segment.",
      "E) The weather report is the last report in the second segment."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_1_5",
    "context": "A radio station airs hourly news updates every morning. Each update consists of exactly five reports—two of general interest: international and national; and three of local interest: sports, traffic, and weather. Each update must be structured as follows: There are exactly two segments, the first segment containing three reports and the second segment containing two. Within each segment, reports are ordered by length, from longest to shortest. Each segment contains at least one report of local interest. The national report is always the longest of the five reports. The sports report is always the shortest of the five reports. The international report is always longer than the weather report.",
    "question": "The order of the reports is fully determined if which one of the following is true?",
    "answer": "A",
    "options": [
      "A) The international report is the last report in the first segment.",
      "B) The national report is the first report in the first segment.",
      "C) The national report is the first report in the second segment.",
      "D) The sports report is the last report in the second segment.",
      "E) The weather report is the last report in the first segment."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_1_6",
    "context": "A radio station airs hourly news updates every morning. Each update consists of exactly five reports—two of general interest: international and national; and three of local interest: sports, traffic, and weather. Each update must be structured as follows: There are exactly two segments, the first segment containing three reports and the second segment containing two. Within each segment, reports are ordered by length, from longest to shortest. Each segment contains at least one report of local interest. The national report is always the longest of the five reports. The sports report is always the shortest of the five reports. The international report is always longer than the weather report.",
    "question": "If the traffic report is the first report in the first segment, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) The international report is the first report in the second segment.",
      "B) The national report is the second report in the first segment.",
      "C) The weather report is the second report in the first segment.",
      "D) The weather report is the first report in the second segment.",
      "E) The weather report is the last report in the second segment."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_2_7",
    "context": "On a single day, a realtor will show a client five houses, exactly one house in each of five neighborhoods—Quarry, Riverton, Shelburne, Townsend, and Valencia. Each house will be shown to the client exactly once. The order in which the houses are shown is subject to the following constraints: The house in Riverton must be shown either first or second. The house in Townsend must be shown either first or fifth. The third house shown must be the house in Quarry or the house in Valencia. The house in Quarry cannot be shown either immediately before or immediately after the house in Shelburne.",
    "question": "If the house in Quarry is shown fourth, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The house in Riverton is shown first.",
      "B) The house in Riverton is shown second.",
      "C) The house in Shelburne is shown second.",
      "D) The house in Townsend is shown first.",
      "E) The house in Valencia is shown third."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_2_8",
    "context": "On a single day, a realtor will show a client five houses, exactly one house in each of five neighborhoods—Quarry, Riverton, Shelburne, Townsend, and Valencia. Each house will be shown to the client exactly once. The order in which the houses are shown is subject to the following constraints: The house in Riverton must be shown either first or second. The house in Townsend must be shown either first or fifth. The third house shown must be the house in Quarry or the house in Valencia. The house in Quarry cannot be shown either immediately before or immediately after the house in Shelburne.",
    "question": "The order in which the houses are shown is fully determined if which one of the following is true?",
    "answer": "C",
    "options": [
      "A) The house in Quarry is shown third.",
      "B) The house in Riverton is shown first.",
      "C) The house in Shelburne is shown second.",
      "D) The house in Townsend is shown fifth.",
      "E) The house in Valencia is shown fourth."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_2_9",
    "context": "On a single day, a realtor will show a client five houses, exactly one house in each of five neighborhoods—Quarry, Riverton, Shelburne, Townsend, and Valencia. Each house will be shown to the client exactly once. The order in which the houses are shown is subject to the following constraints: The house in Riverton must be shown either first or second. The house in Townsend must be shown either first or fifth. The third house shown must be the house in Quarry or the house in Valencia. The house in Quarry cannot be shown either immediately before or immediately after the house in Shelburne.",
    "question": "If the house in Shelburne is shown earlier than the house in Quarry, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) The house in Quarry is shown fourth.",
      "B) The house in Riverton is shown second.",
      "C) The house in Shelburne is shown first.",
      "D) The house in Townsend is shown fifth.",
      "E) The house in Valencia is shown third."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_2_10",
    "context": "On a single day, a realtor will show a client five houses, exactly one house in each of five neighborhoods—Quarry, Riverton, Shelburne, Townsend, and Valencia. Each house will be shown to the client exactly once. The order in which the houses are shown is subject to the following constraints: The house in Riverton must be shown either first or second. The house in Townsend must be shown either first or fifth. The third house shown must be the house in Quarry or the house in Valencia. The house in Quarry cannot be shown either immediately before or immediately after the house in Shelburne.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) The house in Quarry is shown first.",
      "B) The house in Quarry is shown fifth.",
      "C) The house in Valencia is shown first.",
      "D) The house in Valencia is shown second.",
      "E) The house in Valencia is shown fifth."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_2_11",
    "context": "On a single day, a realtor will show a client five houses, exactly one house in each of five neighborhoods—Quarry, Riverton, Shelburne, Townsend, and Valencia. Each house will be shown to the client exactly once. The order in which the houses are shown is subject to the following constraints: The house in Riverton must be shown either first or second. The house in Townsend must be shown either first or fifth. The third house shown must be the house in Quarry or the house in Valencia. The house in Quarry cannot be shown either immediately before or immediately after the house in Shelburne.",
    "question": "If the house in Valencia is shown third, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The house in Quarry is shown fourth.",
      "B) The house in Riverton is shown second.",
      "C) The house in Shelburne is shown first.",
      "D) The house in Shelburne is shown fourth.",
      "E) The house in Townsend is shown fifth."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_2_12",
    "context": "On a single day, a realtor will show a client five houses, exactly one house in each of five neighborhoods—Quarry, Riverton, Shelburne, Townsend, and Valencia. Each house will be shown to the client exactly once. The order in which the houses are shown is subject to the following constraints: The house in Riverton must be shown either first or second. The house in Townsend must be shown either first or fifth. The third house shown must be the house in Quarry or the house in Valencia. The house in Quarry cannot be shown either immediately before or immediately after the house in Shelburne.",
    "question": "Which one of the following, if substituted for the constraint that the house in Riverton must be shown either first or second, would have the same effect on the order in which the houses are shown?",
    "answer": "B",
    "options": [
      "A) The house in Riverton cannot be shown fourth.",
      "B) The house in Riverton must be shown earlier than the house in Valencia.",
      "C) The house in Valencia must be shown either third or fourth.",
      "D) The house in Quarry must be shown either immediately before or immediately after the house in Riverton.",
      "E) If the house in Townsend is not shown fifth, then it must be shown immediately before the house in Riverton."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_3_13",
    "context": "Five artifacts—V, W, X, Y, and Z—recovered from a sunken ship are each known to have originated in Iceland, Norway, or Sweden. These artifacts, together with the surviving fragments of a cargo list, have enabled historians to determine the following: W and Y originated in the same country. X originated in Norway or Sweden. More of the artifacts originated in Iceland than in Norway. If V originated in Iceland, then Z originated in Sweden.",
    "question": "Which one of the following could be an accurate matching of the artifacts to their origins?",
    "answer": "B",
    "options": [
      "A) Iceland: V, W Norway: X Sweden: Y, Z",
      "B) Iceland: W, Y Norway: none Sweden: V, X, Z",
      "C) Iceland: W, Y Norway: V, Z Sweden: X",
      "D) Iceland: V, W, Y Norway: Z Sweden: X",
      "E) Iceland: W, X, Y Norway: Z Sweden: V"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_3_14",
    "context": "Five artifacts—V, W, X, Y, and Z—recovered from a sunken ship are each known to have originated in Iceland, Norway, or Sweden. These artifacts, together with the surviving fragments of a cargo list, have enabled historians to determine the following: W and Y originated in the same country. X originated in Norway or Sweden. More of the artifacts originated in Iceland than in Norway. If V originated in Iceland, then Z originated in Sweden.",
    "question": "If Y and Z originated in Iceland, then what is the minimum number of artifacts that originated in Sweden?",
    "answer": "A",
    "options": [
      "A) zero",
      "B) one",
      "C) two",
      "D) three",
      "E) four"
    ],
    "raw_logic_programs": [
      "# Declarations\nartifacts = EnumSort([V, W, X, Y, Z])\ncountries = EnumSort([Iceland, Norway, Sweden])\noriginated = Function([artifacts, countries] -> [bool])\n\n# Constraints\nForAll([a:artifacts], Count([c:countries], originated(a, c)) == 1) ::: each artifact originated in exactly one country\nAnd(originated(W, c), originated(Y, c)) ::: W and Y originated in the same country\nOr(originated(X, Norway), originated(X, Sweden)) ::: X originated in Norway or Sweden\nCount([a:artifacts], originated(a, Iceland)) > Count([a:artifacts], originated(a, Norway)) ::: More of the artifacts originated in Iceland than in Norway\nImplies(originated(V, Iceland), originated(Z, Sweden)) ::: If V originated in Iceland, then Z originated in Sweden\n\n# Options\nQuestion ::: If Y and Z originated in Iceland, then what is the minimum number of artifacts that originated in Sweden?\nis_sat(ForAll([a:artifacts], originated(a, Sweden) == 0)) ::: A) zero\nis_sat(ForAll([a:artifacts], originated(a, Sweden) == 1)) ::: B) one\nis_sat(ForAll([a:artifacts], originated(a, Sweden) == 2)) ::: C) two\nis_sat(ForAll([a:artifacts], originated(a, Sweden) == 3)) ::: D) three\nis_sat(ForAll([a:artifacts], originated(a, Sweden) == 4)) ::: E) four\n------"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_3_15",
    "context": "Five artifacts—V, W, X, Y, and Z—recovered from a sunken ship are each known to have originated in Iceland, Norway, or Sweden. These artifacts, together with the surviving fragments of a cargo list, have enabled historians to determine the following: W and Y originated in the same country. X originated in Norway or Sweden. More of the artifacts originated in Iceland than in Norway. If V originated in Iceland, then Z originated in Sweden.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "E",
    "options": [
      "A) V and X both originated in Norway.",
      "B) V and Y both originated in Iceland.",
      "C) W and Z both originated in Iceland.",
      "D) W and Z both originated in Sweden.",
      "E) W and Y both originated in Norway."
    ],
    "raw_logic_programs": [
      "# Declarations\nartifacts = EnumSort([V, W, X, Y, Z])\ncountries = EnumSort([Iceland, Norway, Sweden])\noriginated = Function([artifacts, countries] -> [bool])\n\n# Constraints\nForAll([a:artifacts], Or(originated(a, Iceland), originated(a, Norway), originated(a, Sweden))) ::: each artifact originated in Iceland, Norway, or Sweden\nAnd(originated(W, c1), originated(Y, c1)) ::: W and Y originated in the same country\nAnd(originated(X, Norway), originated(X, Sweden)) ::: X originated in Norway or Sweden\nCount([a:artifacts], originated(a, Iceland)) > Count([a:artifacts], originated(a, Norway)) ::: More of the artifacts originated in Iceland than in Norway\nImplies(originated(V, Iceland), originated(Z, Sweden)) ::: If V originated in Iceland, then Z originated in Sweden\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(And(originated(V, Norway), originated(X, Norway)))) ::: A) V and X both originated in Norway.\nis_exception(is_sat(And(originated(V, Iceland), originated(Y, Iceland)))) ::: B) V and Y both originated in Iceland.\nis_exception(is_sat(And(originated(W, Iceland), originated(Z, Iceland)))) ::: C) W and Z both originated in Iceland.\nis_exception(is_sat(And(originated(W, Sweden), originated(Z,"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_3_16",
    "context": "Five artifacts—V, W, X, Y, and Z—recovered from a sunken ship are each known to have originated in Iceland, Norway, or Sweden. These artifacts, together with the surviving fragments of a cargo list, have enabled historians to determine the following: W and Y originated in the same country. X originated in Norway or Sweden. More of the artifacts originated in Iceland than in Norway. If V originated in Iceland, then Z originated in Sweden.",
    "question": "If W and X originated in Sweden, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) None of the artifacts originated in Norway.",
      "B) None of the artifacts originated in Iceland.",
      "C) V originated in Sweden.",
      "D) Z originated in Iceland.",
      "E) Z originated in Sweden."
    ],
    "raw_logic_programs": [
      "# Declarations\nartifacts = EnumSort([V, W, X, Y, Z])\ncountries = EnumSort([Iceland, Norway, Sweden])\noriginated = Function([artifacts, countries] -> [bool])\n\n# Constraints\nForAll([a:artifacts], Or(originated(a, Iceland), originated(a, Norway), originated(a, Sweden))) ::: each artifact originated in Iceland, Norway, or Sweden\nAnd(originated(W, c1), originated(Y, c1)) ::: W and Y originated in the same country\nAnd(originated(X, Norway), originated(X, Sweden)) ::: X originated in Norway or Sweden\nCount([a:artifacts], originated(a, Iceland)) > Count([a:artifacts], originated(a, Norway)) ::: More of the artifacts originated in Iceland than in Norway\nImplies(originated(V, Iceland), originated(Z, Sweden)) ::: If V originated in Iceland, then Z originated in Sweden\n\n# Options\nQuestion ::: If W and X originated in Sweden, then which one of the following must be true?\nis_valid(ForAll([a:artifacts], Not(originated(a, Norway)))) ::: (A)\nis_valid(ForAll([a:artifacts], Not(originated(a, Iceland)))) ::: (B)\nis_valid(originated(V, Sweden)) ::: (C)\nis_valid(originated(Z, Iceland)) ::: (D)\nis_valid(originated(Z, Sweden)) ::: (E)\n------\nProblem:\nA certain company has five employees—A, B, C, D, and E—who are to be assigned to five different positions—president"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_3_17",
    "context": "Five artifacts—V, W, X, Y, and Z—recovered from a sunken ship are each known to have originated in Iceland, Norway, or Sweden. These artifacts, together with the surviving fragments of a cargo list, have enabled historians to determine the following: W and Y originated in the same country. X originated in Norway or Sweden. More of the artifacts originated in Iceland than in Norway. If V originated in Iceland, then Z originated in Sweden.",
    "question": "Exactly how many of the artifacts are there any one of which could have originated in Norway?",
    "answer": "C",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nartifacts = EnumSort([V, W, X, Y, Z])\ncountries = EnumSort([Iceland, Norway, Sweden])\noriginated = Function([artifacts, countries] -> [bool])\n\n# Constraints\nForAll([a:artifacts], Count([c:countries], originated(a, c)) == 1) ::: each artifact originated in exactly one country\nAnd(originated(W, c), originated(Y, c)) ::: W and Y originated in the same country\nOr(originated(X, Norway), originated(X, Sweden)) ::: X originated in Norway or Sweden\nCount([a:artifacts], originated(a, Iceland)) > Count([a:artifacts], originated(a, Norway)) ::: More of the artifacts originated in Iceland than in Norway\nImplies(originated(V, Iceland), originated(Z, Sweden)) ::: If V originated in Iceland, then Z originated in Sweden\n\n# Options\nQuestion ::: Exactly how many of the artifacts are there any one of which could have originated in Norway?\nis_sat(ForAll([a:artifacts], originated(a, Norway))) ::: A) one\nis_sat(ForAll([a:artifacts], originated(a, Norway))) ::: B) two\nis_sat(ForAll([a:artifacts], originated(a, Norway))) ::: C) three\nis_sat(ForAll([a:artifacts], originated(a, Norway))) ::: D) four\nis_sat(ForAll([a:artifacts], originated(a, Norway))) ::: E) five\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_3_18",
    "context": "Five artifacts—V, W, X, Y, and Z—recovered from a sunken ship are each known to have originated in Iceland, Norway, or Sweden. These artifacts, together with the surviving fragments of a cargo list, have enabled historians to determine the following: W and Y originated in the same country. X originated in Norway or Sweden. More of the artifacts originated in Iceland than in Norway. If V originated in Iceland, then Z originated in Sweden.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "C",
    "options": [
      "A) Only V originated in Sweden.",
      "B) Only V and Z originated in Sweden.",
      "C) Only W and Y originated in Sweden.",
      "D) Only X and Z originated in Sweden.",
      "E) Only V, W, X, and Y originated in Sweden."
    ],
    "raw_logic_programs": [
      "# Declarations\nartifacts = EnumSort([V, W, X, Y, Z])\ncountries = EnumSort([Iceland, Norway, Sweden])\noriginated = Function([artifacts, countries] -> [bool])\n\n# Constraints\nForAll([a:artifacts], Or(originated(a, Iceland), originated(a, Norway), originated(a, Sweden))) ::: each artifact originated in Iceland, Norway, or Sweden\nAnd(originated(W, c1), originated(Y, c1)) ::: W and Y originated in the same country\nAnd(originated(X, Norway), originated(X, Sweden)) ::: X originated in Norway or Sweden\nCount([a:artifacts], originated(a, Iceland)) > Count([a:artifacts], originated(a, Norway)) ::: More of the artifacts originated in Iceland than in Norway\nAnd(originated(V, Iceland), originated(Z, Sweden)) ::: If V originated in Iceland, then Z originated in Sweden\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(ForAll([a:artifacts], originated(a, Sweden)))) ::: A) Only V originated in Sweden.\nis_exception(is_sat(And(originated(V, Sweden), originated(Z, Sweden)))) ::: B) Only V and Z originated in Sweden.\nis_exception(is_sat(And(originated(W, Sweden), originated(Y, Sweden)))) ::: C) Only W and Y originated in Sweden.\nis_exception(is_sat(And(originated(X, Sweden), originated(Z, Sweden)))) ::: D) Only X and Z originated in Sweden."
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_4_19",
    "context": "The employees of the Summit Company—J, K, L, and M—work a four-day workweek from Monday through Thursday. Every Monday, work begins on four raw workpieces, each of which is worked on for four consecutive days. On any given day, an employee works on exactly one workpiece. At the beginning of each workday after Monday, each workpiece is transferred from the employee who worked on it the previous day to another one of the employees, who will work on it that day. Workpieces cannot be transferred in any of the following ways: From J to M. From K to J. From L to J.",
    "question": "Which one of the following describes four transfers of workpieces that could all occur together at the beginning of a particular workday?",
    "answer": "A",
    "options": [
      "A) From J to K; from K to L; from L to M; from M to J",
      "B) From J to K; from K to M; from L to K; from M to J",
      "C) From J to L; from K to M; from L to J; from M to K",
      "D) From J to L; from K to J; from L to M; from M to K",
      "E) From J to M; from K to L; from L to K; from M to J"
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([J, K, L, M])\nworkpieces = EnumSort([A, B, C, D])\nworks_on = Function([employees, workpieces] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([w:workpieces], works_on(e, w)) == 4) ::: Every Monday, work begins on four raw workpieces, each of which is worked on for four consecutive days\nForAll([e:employees], Count([w:workpieces], works_on(e, w)) == 1) ::: On any given day, an employee works on exactly one workpiece\nForAll([e:employees], Count([w:workpieces], works_on(e, w)) == 4) ::: At the beginning of each workday after Monday, each workpiece is transferred from the employee who worked on it the previous day to another one of the employees, who will work on it that day\nNot(works_on(J, M)) ::: From J to M\nNot(works_on(K, J)) ::: From K to J\nNot(works_on(L, J)) ::: From L to J\n\n# Options\nQuestion ::: Which one of the following describes four transfers of workpieces that could all occur together at the beginning of a particular workday?\nis_sat(And(works_on(J, K), works_on(K, L), works_on(L, M), works_on(M, J))) ::: (A)\nis_sat(And(works_on(J, K), works_on(K, M), works_on(L, K), works_on(M, J))) ::: (B)\nis_sat(And(works_"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_4_20",
    "context": "The employees of the Summit Company—J, K, L, and M—work a four-day workweek from Monday through Thursday. Every Monday, work begins on four raw workpieces, each of which is worked on for four consecutive days. On any given day, an employee works on exactly one workpiece. At the beginning of each workday after Monday, each workpiece is transferred from the employee who worked on it the previous day to another one of the employees, who will work on it that day. Workpieces cannot be transferred in any of the following ways: From J to M. From K to J. From L to J.",
    "question": "Which one of the following transfers must occur at the beginning of any workday that is not a Monday?",
    "answer": "E",
    "options": [
      "A) From J to K",
      "B) From J to L",
      "C) From K to L",
      "D) From L to M",
      "E) From M to J"
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([J, K, L, M])\nworkpieces = EnumSort([a, b, c, d])\nworks_on = Function([employees, workpieces] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([w:workpieces], works_on(e, w)) == 4) ::: Every Monday, work begins on four raw workpieces, each of which is worked on for four consecutive days\nForAll([e:employees], Count([w:workpieces], works_on(e, w)) == 1) ::: On any given day, an employee works on exactly one workpiece\nForAll([w:workpieces], Count([e:employees], works_on(e, w)) == 4) ::: At the beginning of each workday after Monday, each workpiece is transferred from the employee who worked on it the previous day to another one of the employees, who will work on it that day\nNot(works_on(J, M)) ::: From J to M\nNot(works_on(K, J)) ::: From K to J\nNot(works_on(L, J)) ::: From L to J\n\n# Options\nQuestion ::: Which one of the following transfers must occur at the beginning of any workday that is not a Monday?\nis_valid(works_on(J, K)) ::: (A)\nis_valid(works_on(J, L)) ::: (B)\nis_valid(works_on(K, L)) ::: (C)\nis_valid(works_on(L, M)) ::: (D)\nis_valid(works_on(M, J)) ::: (E)\n------\nProblem:\nThe following is a list of the six members"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_4_21",
    "context": "The employees of the Summit Company—J, K, L, and M—work a four-day workweek from Monday through Thursday. Every Monday, work begins on four raw workpieces, each of which is worked on for four consecutive days. On any given day, an employee works on exactly one workpiece. At the beginning of each workday after Monday, each workpiece is transferred from the employee who worked on it the previous day to another one of the employees, who will work on it that day. Workpieces cannot be transferred in any of the following ways: From J to M. From K to J. From L to J.",
    "question": "If one workpiece is worked on by only two of the four employees in the course of an entire workweek, those two employees must be",
    "answer": "C",
    "options": [
      "A) J and K",
      "B) J and L",
      "C) K and L",
      "D) K and M",
      "E) L and M"
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([J, K, L, M])\nworkpieces = EnumSort([A, B, C, D])\nworks_on = Function([employees, workpieces] -> [bool])\n\n# Constraints\nForAll([w:workpieces], Count([e:employees], works_on(e, w)) == 4) ::: each workpiece is worked on for four consecutive days\nForAll([e:employees], Count([w:workpieces], works_on(e, w)) == 4) ::: every Monday, work begins on four raw workpieces\nForAll([e:employees], Count([w:workpieces], works_on(e, w)) == 1) ::: an employee works on exactly one workpiece\nForAll([e:employees], Count([w:workpieces], works_on(e, w)) == 1) ::: an employee works on exactly one workpiece\nForAll([e:employees], Count([w:workpieces], works_on(e, w)) == 1) ::: an employee works on exactly one workpiece\nForAll([e:employees], Count([w:workpieces], works_on(e, w)) == 1) ::: an employee works on exactly one workpiece\nForAll([e:employees], Count([w:workpieces], works_on(e, w)) == 1) ::: an employee works on exactly one workpiece\nForAll([e:employees], Count([w:workpieces], works_on(e, w)) == 1) ::: an employee works on exactly one workpiece\nForAll([e:employees], Count([w:workpieces], works_on(e, w))"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_4_22",
    "context": "The employees of the Summit Company—J, K, L, and M—work a four-day workweek from Monday through Thursday. Every Monday, work begins on four raw workpieces, each of which is worked on for four consecutive days. On any given day, an employee works on exactly one workpiece. At the beginning of each workday after Monday, each workpiece is transferred from the employee who worked on it the previous day to another one of the employees, who will work on it that day. Workpieces cannot be transferred in any of the following ways: From J to M. From K to J. From L to J.",
    "question": "If L works on the same workpiece both on Tuesday and on Thursday, which one of the following must be true about that workpiece?",
    "answer": "E",
    "options": [
      "A) J works on it on Monday.",
      "B) K works on it on Monday.",
      "C) M works on it on Monday.",
      "D) J works on it on Wednesday.",
      "E) K works on it on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([J, K, L, M])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday])\nworkpieces = EnumSort([W1, W2, W3, W4])\nworks_on = Function([employees, days, workpieces] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([d:days], works_on(e, d, W1)) == 1) ::: every employee works on exactly one workpiece\nForAll([w:workpieces], Count([d:days], works_on(e, d, w)) == 4) ::: each workpiece is worked on for four consecutive days\nForAll([w:workpieces], Implies(works_on(J, Monday, w), Not(works_on(M, Tuesday, w)))) ::: From J to M\nForAll([w:workpieces], Implies(works_on(K, Monday, w), Not(works_on(J, Tuesday, w)))) ::: From K to J\nForAll([w:workpieces], Implies(works_on(L, Monday, w), Not(works_on(J, Wednesday, w)))) ::: From L to J\n\n# Options\nQuestion ::: If L works on the same workpiece both on Tuesday and on Thursday, which one of the following must be true about that workpiece?\nis_sat(ForAll([w:workpieces], Implies(works_on(L, Tuesday, w), works_on(L, Thursday, w)))) ::: L works on the same workpiece both on Tuesday and on Thursday\nis_sat(ForAll([w:"
    ]
  },
  {
    "id": "ar_lsat_201406_4-G_4_23",
    "context": "The employees of the Summit Company—J, K, L, and M—work a four-day workweek from Monday through Thursday. Every Monday, work begins on four raw workpieces, each of which is worked on for four consecutive days. On any given day, an employee works on exactly one workpiece. At the beginning of each workday after Monday, each workpiece is transferred from the employee who worked on it the previous day to another one of the employees, who will work on it that day. Workpieces cannot be transferred in any of the following ways: From J to M. From K to J. From L to J.",
    "question": "Which one of the following could be true about the Tuesday?",
    "answer": "E",
    "options": [
      "A) Transfer from J to K and from K to M occur.",
      "B) Transfer from J to L and from L to M occur.",
      "C) Transfer from J to M and from M to J occur.",
      "D) Transfer from K to L and from L to K occur.",
      "E) Transfer from K to L and from L to M occur."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([J, K, L, M])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday])\nworkpieces = EnumSort([W1, W2, W3, W4])\nworks = Function([employees, days, workpieces] -> [bool])\n\n# Constraints\nForAll([e:employees], Count([d:days], works(e, d, W1)) == 1) ::: every employee works on exactly one workpiece\nForAll([w:workpieces], Count([d:days], works(e, d, w)) == 4) ::: each workpiece is worked on for four consecutive days\nForAll([e:employees], Count([d:days], works(e, d, W1)) == 1) ::: every employee works on exactly one workpiece\nForAll([w:workpieces], Count([d:days], works(e, d, w)) == 4) ::: each workpiece is worked on for four consecutive days\nForAll([e:employees], Count([d:days], works(e, d, W1)) == 1) ::: every employee works on exactly one workpiece\nForAll([w:workpieces], Count([d:days], works(e, d, w)) == 4) ::: each workpiece is worked on for four consecutive days\nForAll([e:employees], Count([d:days], works(e, d, W1)) == 1) ::: every employee works on exactly one workpiece\nForAll([w:workpieces], Count([d:days], works(e, d, w)) == 4) ::: each workpiece is worked on for four consecutive days\nForAll([e:emp"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_1_1",
    "context": "A company employee generates a series of five-digit product codes in accordance with the following rules: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code. The second digit has a value exactly twice that of the first digit. The value of the third digit is less than the value of the fifth digit.",
    "question": "If the last digit of an acceptable product code is 1, it must be true that the",
    "answer": "A",
    "options": [
      "A) first digit is 2",
      "B) second digit is 0",
      "C) third digit is 3",
      "D) fourth digit is 4",
      "E) fourth digit is 0"
    ],
    "raw_logic_programs": [
      "# Declarations\ncodes = EnumSort([0, 1, 2, 3, 4])\ncode = Function([codes] -> [int])\nForAll([c:codes], And(0 <= code(c), code(c) <= 4))\n\n# Constraints\nDistinct([c:codes], code(c)) ::: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code.\ncode(codes[1]) * 2 == code(codes[2]) ::: The second digit has a value exactly twice that of the first digit.\ncode(codes[3]) < code(codes[4]) ::: The value of the third digit is less than the value of the fifth digit.\n\n# Options\nQuestion ::: If the last digit of an acceptable product code is 1, it must be true that the\nis_exception(is_sat(code(codes[1]) == 2)) ::: A) first digit is 2\nis_exception(is_sat(code(codes[2]) == 0)) ::: B) second digit is 0\nis_exception(is_sat(code(codes[3]) == 3)) ::: C) third digit is 3\nis_exception(is_sat(code(codes[4]) == 4)) ::: D) fourth digit is 4\nis_exception(is_sat(code(codes[4]) == 0)) ::: E) fourth digit is 0\n------"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_1_2",
    "context": "A company employee generates a series of five-digit product codes in accordance with the following rules: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code. The second digit has a value exactly twice that of the first digit. The value of the third digit is less than the value of the fifth digit.",
    "question": "Which one of the following must be true about any acceptable product code?",
    "answer": "C",
    "options": [
      "A) The digit 1 appears in some position before the digit 2.",
      "B) The digit 1 appears in some position before the digit 3.",
      "C) The digit 2 appears in some position before the digit 3.",
      "D) The digit 3 appears in some position before the digit 0.",
      "E) The digit 4 appears in some position before the digit 3."
    ],
    "raw_logic_programs": [
      "# Declarations\ncodes = EnumSort([0, 1, 2, 3, 4])\ncode = Function([codes] -> [int])\nForAll([c:codes], And(0 <= code(c), code(c) <= 4))\n\n# Constraints\nDistinct([c:codes], code(c)) ::: The codes use the digits 0, 1, 2, 3, and 4, and no others\nAnd(code(c) == 2 * code(c - 1), c > 1) ::: The second digit has a value exactly twice that of the first digit\nAnd(code(c) < code(c + 1), c < 5) ::: The value of the third digit is less than the value of the fifth digit\n\n# Options\nQuestion ::: Which one of the following must be true about any acceptable product code?\nis_sat(Exists([c:codes], code(c) == 1 && code(c - 1) == 2)) ::: A) The digit 1 appears in some position before the digit 2.\nis_sat(Exists([c:codes], code(c) == 1 && code(c - 1) == 3)) ::: B) The digit 1 appears in some position before the digit 3.\nis_sat(Exists([c:codes], code(c) == 2 && code(c - 1) == 3)) ::: C) The digit 2 appears in some position before the digit 3.\nis_sat"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_1_3",
    "context": "A company employee generates a series of five-digit product codes in accordance with the following rules: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code. The second digit has a value exactly twice that of the first digit. The value of the third digit is less than the value of the fifth digit.",
    "question": "If the third digit of an acceptable product code is not 0, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) The second digit of the product code is 2.",
      "B) The third digit of the product code is 3.",
      "C) The fourth digit of the product code is 0.",
      "D) The fifth digit of the product code is 3.",
      "E) The fifth digit of the product code is 1."
    ],
    "raw_logic_programs": [
      "# Declarations\ncodes = EnumSort([0, 1, 2, 3, 4])\ndigits = EnumSort([1, 2, 3, 4, 5])\ncode = Function([codes] -> [codes])\n\n# Constraints\nForAll([c:codes], Count([d:digits], code(c) == d) == 1) ::: The codes use the digits 0, 1, 2, 3, and 4, and no others\nForAll([d:digits], Count([c:codes], code(c) == d) == 1) ::: Each digit occurs exactly once in any code\nAnd(code(1) == 0, code(2) == 2, code(3) == 1, code(4) == 2, code(5) == 4) ::: The second digit has a value exactly twice that of the first digit\nAnd(code(1) == 0, code(2) == 1, code(3) == 2, code(4) == 4, code(5) == 2) ::: The second digit has a value exactly twice that of the first digit\nAnd(code(1) == 0, code(2) == 2, code(3) == 2, code(4) == 1, code(5) == 4) ::: The second digit has a value exactly twice that of the first digit\nAnd(code(1) == 0, code(2) == 2, code(3) == 2,"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_1_4",
    "context": "A company employee generates a series of five-digit product codes in accordance with the following rules: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code. The second digit has a value exactly twice that of the first digit. The value of the third digit is less than the value of the fifth digit.",
    "question": "Any of the following pairs could be the third and fourth digits, respectively, of an acceptable product code, EXCEPT:",
    "answer": "E",
    "options": [
      "A) 0, 1",
      "B) 0, 3",
      "C) 1, 0",
      "D) 3, 0",
      "E) 3, 4"
    ],
    "raw_logic_programs": [
      "# Declarations\ncodes = EnumSort([0, 1, 2, 3, 4])\ncode = Function([codes] -> [int])\nForAll([c:codes], And(0 <= code(c), code(c) <= 4))\n\n# Constraints\nDistinct([c:codes], code(c)) ::: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code.\nAnd(code(1) == 2 * code(0), code(2) == 2 * code(1), code(3) == 2 * code(2), code(4) == 2 * code(3)) ::: The second digit has a value exactly twice that of the first digit.\ncode(3) < code(5) ::: The value of the third digit is less than the value of the fifth digit.\n\n# Options\nQuestion ::: Any of the following pairs could be the third and fourth digits, respectively, of an acceptable product code, EXCEPT:\nis_exception(is_sat(code(3) == 0, code(4) == 1)) ::: A) 0, 1\nis_exception(is_sat(code(3) == 0, code(4) == 3)) ::: B) 0, 3\nis_exception(is_sat(code(3) == 1, code(4) == 0)) ::: C) 1, 0\nis_exception(is"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_1_5",
    "context": "A company employee generates a series of five-digit product codes in accordance with the following rules: The codes use the digits 0, 1, 2, 3, and 4, and no others. Each digit occurs exactly once in any code. The second digit has a value exactly twice that of the first digit. The value of the third digit is less than the value of the fifth digit.",
    "question": "Which one of the following must be true about any acceptable product code?",
    "answer": "E",
    "options": [
      "A) There is exactly one digit between the digit 0 and the digit 1.",
      "B) There is exactly one digit between the digit 1 and the digit 2.",
      "C) There are at most two digits between the digit 1 and the digit 3.",
      "D) There are at most two digits between the digit 2 and the digit 3.",
      "E) There are at most two digits between the digit 2 and the digit 4."
    ],
    "raw_logic_programs": [
      "# Declarations\ncodes = EnumSort([0, 1, 2, 3, 4])\ncode = Function([codes] -> [int])\nForAll([c:codes], And(0 <= code(c), code(c) <= 4))\n\n# Constraints\nDistinct([c:codes], code(c)) ::: The codes use the digits 0, 1, 2, 3, and 4, and no others\nAnd(code(c) == 2 * code(c - 1), c > 1) ::: The second digit has a value exactly twice that of the first digit\nAnd(code(c) < code(c + 1), c < 5) ::: The value of the third digit is less than the value of the fifth digit\n\n# Options\nQuestion ::: Which one of the following must be true about any acceptable product code?\nis_valid(Exists([c:codes], code(c) == 1, code(c + 1) == 0)) ::: A)\nis_valid(Exists([c:codes], code(c) == 1, code(c + 1) == 2)) ::: B)\nis_valid(Exists([c:codes], code(c) == 1, code(c + 1) == 3)) ::: C)\nis_valid(Exists([c:codes], code(c) == 2, code(c + 1) == 0)) ::: D)\nis_valid(Exists([c:codes], code(c) =="
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_2_6",
    "context": "Exactly three films—Greed, Harvest, and Limelight—are shown during a film club's festival held on Thursday, Friday, and Saturday. Each film is shown at least once during the festival but never more than once on a given day. On each day at least one film is shown. Films are shown one at a time. The following conditions apply: On Thursday Harvest is shown, and no film is shown after it on that day. On Friday either Greed or Limelight, but not both, is shown, and no film is shown after it on that day. On Saturday either Greed or Harvest, but not both, is shown, and no film is shown after it on that day.",
    "question": "Which one of the following could be a complete and accurate description of the order in which the films are shown at the festival?",
    "answer": "C",
    "options": [
      "A) Thursday: Limelight, then Harvest; Friday: Limelight; Saturday: Harvest",
      "B) Thursday: Harvest; Friday: Greed, then Limelight; Saturday: Limelight, then Greed",
      "C) Thursday: Harvest; Friday: Limelight; Saturday: Limelight, then Greed",
      "D) Thursday: Greed, then Harvest, then Limelight; Friday: Limelight; Saturday: Greed",
      "E) Thursday: Greed, then Harvest; Friday: Limelight, then Harvest; Saturday: Harvest"
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Greed, Harvest, Limelight])\ndays = EnumSort([Thursday, Friday, Saturday])\nshown = Function([films, days] -> [bool])\n\n# Constraints\nForAll([d:days], Count([f:films], shown(f, d)) >= 1) ::: each film is shown at least once during the festival\nForAll([f:films], Count([d:days], shown(f, d)) <= 1) ::: never more than once on a given day\nForAll([d:days], Count([f:films], shown(f, d)) > 0) ::: On each day at least one film is shown\nForAll([f:films], Count([d:days], shown(f, d)) > 0) ::: Films are shown one at a time\nshown(Harvest, Thursday) ::: On Thursday Harvest is shown\nForAll([f:films], Implies(shown(f, Thursday), f!= Harvest)) ::: and no film is shown after it on that day\nAnd(shown(Greed, Friday), shown(Limelight, Friday)) ::: On Friday either Greed or Limelight, but not both, is shown\nForAll([f:films], Implies(shown(f, Friday), f!= Greed)) ::: and no film is shown after it on that day\nAnd(shown(Greed, Saturday), shown(Harvest, Saturday)) :::"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_2_7",
    "context": "Exactly three films—Greed, Harvest, and Limelight—are shown during a film club's festival held on Thursday, Friday, and Saturday. Each film is shown at least once during the festival but never more than once on a given day. On each day at least one film is shown. Films are shown one at a time. The following conditions apply: On Thursday Harvest is shown, and no film is shown after it on that day. On Friday either Greed or Limelight, but not both, is shown, and no film is shown after it on that day. On Saturday either Greed or Harvest, but not both, is shown, and no film is shown after it on that day.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "A",
    "options": [
      "A) Harvest is the last film shown on each day of the festival.",
      "B) Limelight is shown on each day of the festival.",
      "C) Greed is shown second on each day of the festival.",
      "D) A different film is shown first on each day of the festival.",
      "E) A different film is shown last on each day of the festival."
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Greed, Harvest, Limelight])\ndays = EnumSort([Thursday, Friday, Saturday])\nshown = Function([films, days] -> [bool])\n\n# Constraints\nForAll([d:days], Count([f:films], shown(f, d)) >= 1) ::: On each day at least one film is shown\nForAll([f:films], Count([d:days], shown(f, d)) >= 1) ::: Each film is shown at least once during the festival\nForAll([f:films], Count([d:days], shown(f, d)) <= 1) ::: Each film is shown at most once on a given day\nshown(Harvest, Thursday) ::: On Thursday Harvest is shown\nForAll([f:films], Implies(shown(f, Thursday), Not(shown(f, Thursday)))) ::: no film is shown after it on that day\nAnd(shown(Greed, Friday), shown(Limelight, Friday)) ::: On Friday either Greed or Limelight, but not both, is shown\nForAll([f:films], Implies(shown(f, Friday), Not(shown(f, Friday)))) ::: no film is shown after it on that day\nAnd(shown(Greed, Saturday), shown(Harvest, Saturday)) ::: On Saturday either Greed or Harvest, but not both, is shown\nForAll([f:films"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_2_8",
    "context": "Exactly three films—Greed, Harvest, and Limelight—are shown during a film club's festival held on Thursday, Friday, and Saturday. Each film is shown at least once during the festival but never more than once on a given day. On each day at least one film is shown. Films are shown one at a time. The following conditions apply: On Thursday Harvest is shown, and no film is shown after it on that day. On Friday either Greed or Limelight, but not both, is shown, and no film is shown after it on that day. On Saturday either Greed or Harvest, but not both, is shown, and no film is shown after it on that day.",
    "question": "If Limelight is never shown again during the festival once Greed is shown, then which one of the following is the maximum number of film showings that could occur during the festival?",
    "answer": "D",
    "options": [
      "A) three",
      "B) four",
      "C) five",
      "D) six",
      "E) seven"
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Greed, Harvest, Limelight])\ndays = EnumSort([Thursday, Friday, Saturday])\nshown = Function([films, days] -> [bool])\n\n# Constraints\nForAll([f:films], Count([d:days], shown(f, d)) >= 1) ::: Each film is shown at least once during the festival\nForAll([d:days], Count([f:films], shown(f, d)) <= 1) ::: never more than once on a given day\nForAll([d:days], Count([f:films], shown(f, d)) >= 1) ::: On each day at least one film is shown\nAnd(shown(Harvest, Thursday), Count([f:films], And(f!= Harvest, shown(f, Thursday))) == 0) ::: On Thursday Harvest is shown, and no film is shown after it on that day\nAnd(shown(Greed, Friday), shown(Limelight, Friday)) ::: On Friday either Greed or Limelight, but not both, is shown, and no film is shown after it on that day\nAnd(shown(Greed, Saturday), shown(Harvest, Saturday)) ::: On Saturday either Greed or Harvest, but not both, is shown, and no film is shown after it on that day\n\n# Options\nQuestion ::: If Limelight is never shown again during the festival once Greed is shown, then which one of the following is"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_2_9",
    "context": "Exactly three films—Greed, Harvest, and Limelight—are shown during a film club's festival held on Thursday, Friday, and Saturday. Each film is shown at least once during the festival but never more than once on a given day. On each day at least one film is shown. Films are shown one at a time. The following conditions apply: On Thursday Harvest is shown, and no film is shown after it on that day. On Friday either Greed or Limelight, but not both, is shown, and no film is shown after it on that day. On Saturday either Greed or Harvest, but not both, is shown, and no film is shown after it on that day.",
    "question": "If Greed is shown exactly three times, Harvest is shown exactly twice, and Limelight is shown exactly once, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) All three films are shown on Thursday.",
      "B) Exactly two films are shown on Saturday.",
      "C) Limelight and Harvest are both shown on Thursday.",
      "D) Greed is the only film shown on Saturday.",
      "E) Harvest and Greed are both shown on Friday."
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Greed, Harvest, Limelight])\ndays = EnumSort([Thursday, Friday, Saturday])\nshown = Function([films, days] -> [bool])\n\n# Constraints\nForAll([f:films], Count([d:days], shown(f, d)) >= 1) ::: Each film is shown at least once during the festival\nForAll([d:days], Count([f:films], shown(f, d)) >= 1) ::: On each day at least one film is shown\nForAll([f:films], Count([d:days], shown(f, d)) <= 1) ::: Films are shown one at a time\nAnd(shown(Harvest, Thursday), Not(Exists([f:films], And(f!= Harvest, shown(f, Thursday))))) ::: On Thursday Harvest is shown, and no film is shown after it on that day\nAnd(Exists([f:films], shown(f, Friday)), Not(Exists([f:films], And(f!= Greed, shown(f, Friday))))) ::: On Friday either Greed or Limelight, but not both, is shown, and no film is shown after it on that day\nAnd(Exists([f:films], shown(f, Saturday)), Not(Exists([f:films], And(f!= Harvest, shown(f, Saturday))))) ::: On Saturday either Greed or Harvest, but not both, is shown, and no film is"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_2_10",
    "context": "Exactly three films—Greed, Harvest, and Limelight—are shown during a film club's festival held on Thursday, Friday, and Saturday. Each film is shown at least once during the festival but never more than once on a given day. On each day at least one film is shown. Films are shown one at a time. The following conditions apply: On Thursday Harvest is shown, and no film is shown after it on that day. On Friday either Greed or Limelight, but not both, is shown, and no film is shown after it on that day. On Saturday either Greed or Harvest, but not both, is shown, and no film is shown after it on that day.",
    "question": "If Limelight is shown exactly three times, Harvest is shown exactly twice, and Greed is shown exactly once, then which one of the following is a complete and accurate list of the films that could be the first film shown on Thursday?",
    "answer": "D",
    "options": [
      "A) Harvest",
      "B) Limelight",
      "C) Greed, Harvest",
      "D) Greed, Limelight",
      "E) Greed, Harvest, Limelight"
    ],
    "raw_logic_programs": [
      "# Declarations\nfilms = EnumSort([Greed, Harvest, Limelight])\ndays = EnumSort([Thursday, Friday, Saturday])\nshown = Function([films, days] -> [bool])\n\n# Constraints\nForAll([f:films], Count([d:days], shown(f, d)) >= 1) ::: Each film is shown at least once during the festival\nForAll([d:days], Count([f:films], shown(f, d)) <= 1) ::: never more than once on a given day\nForAll([d:days], Count([f:films], shown(f, d)) >= 1) ::: On each day at least one film is shown\nForAll([f:films], Count([d:days], shown(f, d)) == 1) ::: Films are shown one at a time\nshown(Harvest, Thursday) ::: On Thursday Harvest is shown\nForAll([f:films], Implies(shown(f, Thursday), f!= Harvest)) ::: and no film is shown after it on that day\nForAll([f:films], Implies(shown(f, Friday), f!= Harvest)) ::: and no film is shown after it on that day\nForAll([f:films], Implies(shown(f, Saturday), f!= Harvest)) ::: and no film is shown after it on that day\nCount([d:days], shown(Greed, d)) == 1 ::: Greed is"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_3_11",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "Which one of the following is an acceptable schedule of destinations for Freedom, in order from week 1 through week 7?",
    "answer": "A",
    "options": [
      "A) Guadeloupe, Jamaica, Martinique, Trinidad, Guadeloupe, Martinique, Trinidad",
      "B) Guadeloupe, Martinique, Trinidad, Martinique, Guadeloupe, Jamaica, Trinidad",
      "C) Jamaica, Martinique, Guadeloupe, Martinique, Guadeloupe, Jamaica, Trinidad",
      "D) Martinique, Trinidad, Guadeloupe, Jamaica, Martinique, Guadeloupe, Trinidad",
      "E) Martinique, Trinidad, Guadeloupe, Trinidad, Guadeloupe, Jamaica, Martinique"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_3_12",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "Which one of the following CANNOT be true about Freedom's schedule of voyages?",
    "answer": "A",
    "options": [
      "A) Freedom makes a voyage to Trinidad in week 6.",
      "B) Freedom makes a voyage to Martinique in week 5.",
      "C) Freedom makes a voyage to Jamaica in week 6.",
      "D) Freedom makes a voyage to Jamaica in week 3.",
      "E) Freedom makes a voyage to Guadeloupe in week 3."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_3_13",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "If Freedom makes a voyage to Trinidad in week 5, which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Freedom makes a voyage to Trinidad in week 1.",
      "B) Freedom makes a voyage to Martinique in week 2.",
      "C) Freedom makes a voyage to Guadeloupe in week 3.",
      "D) Freedom makes a voyage to Martinique in week 4.",
      "E) Freedom makes a voyage to Jamaica in week 6."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_3_14",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "f Freedom makes a voyage to Guadeloupe in week 1 and a voyage to Jamaica in week 5, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Freedom makes a voyage to Jamaica in week 2.",
      "B) Freedom makes a voyage to Trinidad in week 2.",
      "C) Freedom makes a voyage to Martinique in week 3.",
      "D) Freedom makes a voyage to Guadeloupe in week 6.",
      "E) Freedom makes a voyage to Martinique in week 6."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_3_15",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "If Freedom makes a voyage to Guadeloupe in week 1 and to Trinidad in week 2, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Freedom makes a voyage to Martinique in week 3.",
      "B) Freedom makes a voyage to Martinique in week 4.",
      "C) Freedom makes a voyage to Martinique in week 5.",
      "D) Freedom makes a voyage to Guadeloupe in week 3.",
      "E) Freedom makes a voyage to Guadeloupe in week 5."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_3_16",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "If Freedom makes a voyage to Martinique in week 3, which one of the following could be an accurate list of Freedom's destinations in week 4 and week 5, respectively?",
    "answer": "A",
    "options": [
      "A) Guadeloupe, Trinidad",
      "B) Jamaica, Guadeloupe",
      "C) Martinique, Trinidad",
      "D) Trinidad, Jamaica",
      "E) Trinidad, Martinique"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_3_17",
    "context": "A cruise line is scheduling seven week-long voyages for the ship Freedom. Each voyage will occur in exactly one of the first seven weeks of the season: weeks 1 through 7. Each voyage will be to exactly one of four destinations: Guadeloupe, Jamaica, Martinique, or Trinidad. Each destination will be scheduled for at least one of the weeks. The following conditions apply to Freedom's schedule: Jamaica will not be its destination in week 4. Trinidad will be its destination in week 7. Freedom will make exactly two voyages to Martinique, and at least one voyage to Guadeloupe will occur in some week between those two voyages. Guadeloupe will be its destination in the week preceding any voyage it makes to Jamaica. No destination will be scheduled for consecutive weeks.",
    "question": "Which one of the following must be true about Freedom's schedule of voyages?",
    "answer": "D",
    "options": [
      "A) Freedom makes a voyage to Guadeloupe either in week 1 or else in week 2.",
      "B) Freedom makes a voyage to Martinique either in week 2 or else in week 3.",
      "C) Freedom makes at most two voyages to Guadeloupe.",
      "D) Freedom makes at most two voyages to Jamaica.",
      "E) Freedom makes at most two voyages to Trinidad."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_4_18",
    "context": "There are exactly three recycling centers in Rivertown: Center 1, Center 2, and Center 3. Exactly five kinds of material are recycled at these recycling centers: glass, newsprint, plastic, tin, and wood. Each recycling center recycles at least two but no more than three of these kinds of material. The following conditions must hold: Any recycling center that recycles wood also recycles newsprint. Every kind of material that Center 2 recycles is also recycled at Center 1. Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass.",
    "question": "Which one of the following could be an accurate account of all the kinds of material recycled at each recycling center in Rivertown?",
    "answer": "B",
    "options": [
      "A) Center 1: newsprint, plastic, wood; Center 2: newsprint, wood; Center 3: glass, tin, wood",
      "B) Center 1: glass, newsprint, tin; Center 2: glass, newsprint, tin; Center 3: newsprint, plastic, wood",
      "C) Center 1: glass, newsprint, wood; Center 2: glass, newsprint, tin; Center 3: plastic, tin",
      "D) Center 1: glass, plastic, tin; Center 2: glass, tin; Center 3: newsprint, wood",
      "E) Center 1: newsprint, plastic, wood; Center 2: newsprint, plastic, wood; Center 3: glass, newsprint, tin"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_4_19",
    "context": "There are exactly three recycling centers in Rivertown: Center 1, Center 2, and Center 3. Exactly five kinds of material are recycled at these recycling centers: glass, newsprint, plastic, tin, and wood. Each recycling center recycles at least two but no more than three of these kinds of material. The following conditions must hold: Any recycling center that recycles wood also recycles newsprint. Every kind of material that Center 2 recycles is also recycled at Center 1. Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass.",
    "question": "ch one of the following is a complete and accurate list of the recycling centers in Rivertown any one of which could recycle plastic?",
    "answer": "D",
    "options": [
      "A) Center 1 only",
      "B) Center 3 only",
      "C) Center 1, Center 2",
      "D) Center 1, Center 3",
      "E) Center 1, Center 2, Center 3"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_4_20",
    "context": "There are exactly three recycling centers in Rivertown: Center 1, Center 2, and Center 3. Exactly five kinds of material are recycled at these recycling centers: glass, newsprint, plastic, tin, and wood. Each recycling center recycles at least two but no more than three of these kinds of material. The following conditions must hold: Any recycling center that recycles wood also recycles newsprint. Every kind of material that Center 2 recycles is also recycled at Center 1. Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass.",
    "question": "If Center 2 recycles three kinds of material, then which one of the following kinds of material must Center 3 recycle?",
    "answer": "C",
    "options": [
      "A) glass",
      "B) newsprint",
      "C) plastic",
      "D) tin",
      "E) wood"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_4_21",
    "context": "There are exactly three recycling centers in Rivertown: Center 1, Center 2, and Center 3. Exactly five kinds of material are recycled at these recycling centers: glass, newsprint, plastic, tin, and wood. Each recycling center recycles at least two but no more than three of these kinds of material. The following conditions must hold: Any recycling center that recycles wood also recycles newsprint. Every kind of material that Center 2 recycles is also recycled at Center 1. Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass.",
    "question": "If each recycling center in Rivertown recycles exactly three kinds of material, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Only Center 2 recycles glass.",
      "B) Only Center 3 recycles newsprint.",
      "C) Only Center 1 recycles plastic.",
      "D) Only Center 3 recycles tin.",
      "E) Only Center 1 recycles wood."
    ],
    "raw_logic_programs": [
      "# Declarations\ncenters = EnumSort([Center1, Center2, Center3])\nmaterials = EnumSort([glass, newsprint, plastic, tin, wood])\nrecycles = Function([centers, materials] -> [bool])\n\n# Constraints\nForAll([c:centers], Count([m:materials], recycles(c, m)) >= 2) ::: Each recycling center recycles at least two but no more than three of these kinds of material\nAnd(recycles(Center1, m), recycles(Center2, m)) ::: Every kind of material that Center 2 recycles is also recycled at Center 1\nAnd(recycles(Center1, wood), recycles(Center1, newsprint)) ::: Any recycling center that recycles wood also recycles newsprint\nAnd(recycles(Center1, plastic), Not(recycles(Center1, glass))) ::: Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass\n\n# Options\nQuestion ::: If each recycling center in Rivertown recycles exactly three kinds of material, then which one of the following could be true?\nis_sat(ForAll([m:materials], recycles(Center1, m) == recycles(Center2, m))) ::: (A)\nis_sat(ForAll([m:materials], recycles(Center2, m) == recycles(Center3, m))) ::: (B)\nis_sat(ForAll([m:materials], recycles(Center1, m) == recycles(Center3, m))) ::: (C)\nis_sat(ForAll([m:materials], recycles(Center3, m) == recycles(Center1, m))) ::: (D)\nis_sat(ForAll([m:materials], recycles(Center1, m) == recycles(Center2, m))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_4_22",
    "context": "There are exactly three recycling centers in Rivertown: Center 1, Center 2, and Center 3. Exactly five kinds of material are recycled at these recycling centers: glass, newsprint, plastic, tin, and wood. Each recycling center recycles at least two but no more than three of these kinds of material. The following conditions must hold: Any recycling center that recycles wood also recycles newsprint. Every kind of material that Center 2 recycles is also recycled at Center 1. Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass.",
    "question": "If Center 3 recycles glass, then which one of the following kinds of material must Center 2 recycle?",
    "answer": "B",
    "options": [
      "A) glass",
      "B) newsprint",
      "C) plastic",
      "D) tin",
      "E) wood"
    ],
    "raw_logic_programs": [
      "# Declarations\ncenters = EnumSort([Center1, Center2, Center3])\nmaterials = EnumSort([glass, newsprint, plastic, tin, wood])\nrecycles = Function([centers, materials] -> [bool])\n\n# Constraints\nForAll([c:centers], Count([m:materials], recycles(c, m)) >= 2) ::: Each recycling center recycles at least two but no more than three of these kinds of material\nAnd(recycles(c, wood), recycles(c, newsprint)) ::: Any recycling center that recycles wood also recycles newsprint\nForAll([m:materials], Implies(recycles(Center2, m), recycles(Center1, m))) ::: Every kind of material that Center 2 recycles is also recycled at Center 1\nCount([m:materials], recycles(c, m)) == 1 ::: Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass\n\n# Options\nQuestion ::: If Center 3 recycles glass, then which one of the following kinds of material must Center 2 recycle?\nis_sat(ForAll([m:materials], Implies(recycles(Center3, glass), recycles(Center2, m)))) ::: A) glass\nis_sat(ForAll([m:materials], Implies(recycles(Center3, glass), recycles(Center2, newsprint)))) ::: B) newsprint\nis_sat(ForAll([m:materials], Implies(recycles(Center3, glass), recycles(Center2, plastic)))) ::: C) plastic\nis_sat(ForAll([m:materials], Implies(recycles(Center3, glass), recycles(Center2, tin)))) ::: D) tin\nis_sat(ForAll([m:materials], Implies(recycles(Center3, glass), recycles("
    ]
  },
  {
    "id": "ar_lsat_india1_1-G_4_23",
    "context": "There are exactly three recycling centers in Rivertown: Center 1, Center 2, and Center 3. Exactly five kinds of material are recycled at these recycling centers: glass, newsprint, plastic, tin, and wood. Each recycling center recycles at least two but no more than three of these kinds of material. The following conditions must hold: Any recycling center that recycles wood also recycles newsprint. Every kind of material that Center 2 recycles is also recycled at Center 1. Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass.",
    "question": "If Center 1 is the only recycling center that recycles wood, then which one of the following could be a complete and accurate list of the kinds of material that one of the recycling centers recycles?",
    "answer": "A",
    "options": [
      "A) plastic, tin",
      "B) newsprint, wood",
      "C) newsprint, tin",
      "D) glass, wood",
      "E) glass, tin"
    ],
    "raw_logic_programs": [
      "# Declarations\ncenters = EnumSort([Center1, Center2, Center3])\nmaterials = EnumSort([glass, newsprint, plastic, tin, wood])\nrecycles = Function([centers, materials] -> [bool])\n\n# Constraints\nForAll([c:centers], Count([m:materials], recycles(c, m)) >= 2) ::: Each recycling center recycles at least two but no more than three of these kinds of material\nAnd(recycles(c, wood), recycles(c, newsprint)) ::: Any recycling center that recycles wood also recycles newsprint\nForAll([m:materials], Implies(recycles(Center2, m), recycles(Center1, m))) ::: Every kind of material that Center 2 recycles is also recycled at Center 1\nCount([m:materials], recycles(c, m)) == 1 ::: Only one of the recycling centers recycles plastic, and that recycling center does not recycle glass\n\n# Options\nQuestion ::: If Center 1 is the only recycling center that recycles wood, then which one of the following could be a complete and accurate list of the kinds of material that one of the recycling centers recycles?\nis_sat(ForAll([m:materials], recycles(Center1, m) == (m == plastic) || (m == tin))) ::: A) plastic, tin\nis_sat(ForAll([m:materials], recycles(Center1, m) == (m == newsprint) || (m == wood))) ::: B) newsprint, wood\nis_sat(ForAll([m:materials], recycles(Center1, m) == (m == newsprint) || (m == tin))) ::: C) newsprint, tin\nis_sat(ForAll([m:materials], recycles(Center1, m) == (m == glass) || (m == wood))) ::: D)"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_1_1",
    "context": "A researcher is evaluating exactly four medicines: W, X, Y, and Z. The only side effects the medicines can have are fatigue, headaches, palpitations, and sweating. The researcher knows the following to be true of the medicines side effects: Each medicine has at least one side effect. No medicine has both fatigue and palpitations as side effects. Medicine Z has no side effect in common with any of the other medicines. Medicines W and X have exactly one side effect in common. Fatigue is a side effect of medicine W. Palpitations are a side effect of medicine X. Sweating is not a side effect of medicine Y.",
    "question": "If sweating is not a side effect of medicine X, then which one of the following statements must be true?",
    "answer": "B",
    "options": [
      "A) Fatigue is a side effect of medicine Y.",
      "B) Headaches are a side effect of medicine W.",
      "C) Headaches are a side effect of medicine Y.",
      "D) Headaches are a side effect of medicine Z.",
      "E) Palpitations are a side effect of medicine Y."
    ],
    "raw_logic_programs": [
      "# Declarations\nmedicines = EnumSort([W, X, Y, Z])\nside_effects = EnumSort([fatigue, headaches, palpitations, sweating])\nhas_side_effect = Function([medicines, side_effects] -> [bool])\n\n# Constraints\nForAll([m:medicines], Count([s:side_effects], has_side_effect(m, s)) >= 1) ::: Each medicine has at least one side effect\nForAll([m:medicines], Implies(has_side_effect(m, fatigue), Not(has_side_effect(m, palpitations)))) ::: No medicine has both fatigue and palpitations as side effects\nForAll([m:medicines], Implies(m!= Z, Exists([s:side_effects], has_side_effect(m, s) && has_side_effect(Z, s)))) ::: Medicine Z has no side effect in common with any of the other medicines\nAnd(has_side_effect(W, fatigue), has_side_effect(X, palpitations)) ::: Fatigue is a side effect of medicine W. Palpitations are a side effect of medicine X.\nAnd(has_side_effect(W, s1), has_side_effect(X, s1)) ::: Medicines W and X have exactly one side effect in common\nNot(has_side_effect(Y, sweating)) ::: Sweating is not a side effect of medicine Y\n\n# Options\nQuestion ::: If sweating is not a side effect of medicine X, then which one of the following statements must be true?\nis_valid(Exists([s:side_effects], has_side_effect(Y, s) && has_side_effect(W, s))) ::: A) Fatigue is a side effect of medicine Y.\nis_valid(Exists([s:side_effects], has_side_effect(W, s) && has_side_effect(Y, s))) ::: B) Headaches are a side effect of medicine"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_1_2",
    "context": "A researcher is evaluating exactly four medicines: W, X, Y, and Z. The only side effects the medicines can have are fatigue, headaches, palpitations, and sweating. The researcher knows the following to be true of the medicines side effects: Each medicine has at least one side effect. No medicine has both fatigue and palpitations as side effects. Medicine Z has no side effect in common with any of the other medicines. Medicines W and X have exactly one side effect in common. Fatigue is a side effect of medicine W. Palpitations are a side effect of medicine X. Sweating is not a side effect of medicine Y.",
    "question": "If sweating is not a side effect of medicine Z, then which one of the following statements must be true?",
    "answer": "D",
    "options": [
      "A) Fatigue is a side effect of medicine Y.",
      "B) Headaches are a side effect of medicine W.",
      "C) Headaches are a side effect of medicine Y.",
      "D) Headaches are a side effect of medicine Z.",
      "E) Palpitations are a side effect of medicine Y."
    ],
    "raw_logic_programs": [
      "# Declarations\nmedicines = EnumSort([W, X, Y, Z])\nside_effects = EnumSort([fatigue, headaches, palpitations, sweating])\nhas_side_effect = Function([medicines, side_effects] -> [bool])\n\n# Constraints\nForAll([m:medicines], Count([s:side_effects], has_side_effect(m, s)) >= 1) ::: Each medicine has at least one side effect\nForAll([m:medicines], Implies(has_side_effect(m, fatigue), Not(has_side_effect(m, palpitations)))) ::: No medicine has both fatigue and palpitations as side effects\nForAll([m:medicines], Implies(m!= Z, Exists([s:side_effects], has_side_effect(m, s) && has_side_effect(Z, s)))) ::: Medicine Z has no side effect in common with any of the other medicines\nAnd(has_side_effect(W, fatigue), has_side_effect(X, palpitations)) ::: Fatigue is a side effect of medicine W. Palpitations are a side effect of medicine X.\nAnd(has_side_effect(W, s1), has_side_effect(X, s2), s1!= s2) ::: Medicines W and X have exactly one side effect in common\nNot(has_side_effect(Y, sweating)) ::: Sweating is not a side effect of medicine Y\n\n# Options\nQuestion ::: If sweating is not a side effect of medicine Z, then which one of the following statements must be true?\nis_valid(Exists([s:side_effects], has_side_effect(Y, s) && has_side_effect(W, s))) ::: A) Fatigue is a side effect of medicine Y.\nis_valid(Exists([s:side_effects], has_side_effect(W, s) && has_side_effect(Y, s))) ::: B) Headaches"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_1_3",
    "context": "A researcher is evaluating exactly four medicines: W, X, Y, and Z. The only side effects the medicines can have are fatigue, headaches, palpitations, and sweating. The researcher knows the following to be true of the medicines side effects: Each medicine has at least one side effect. No medicine has both fatigue and palpitations as side effects. Medicine Z has no side effect in common with any of the other medicines. Medicines W and X have exactly one side effect in common. Fatigue is a side effect of medicine W. Palpitations are a side effect of medicine X. Sweating is not a side effect of medicine Y.",
    "question": "Which one of the following statements could be true?",
    "answer": "C",
    "options": [
      "A) Fatigue is a side effect of medicine X.",
      "B) Fatigue is a side effect of medicine Z.",
      "C) Headaches are a side effect of medicine X.",
      "D) Palpitations are a side effect of medicine W.",
      "E) Palpitations are a side effect of medicine Z."
    ],
    "raw_logic_programs": [
      "# Declarations\nmedicines = EnumSort([W, X, Y, Z])\nside_effects = EnumSort([fatigue, headaches, palpitations, sweating])\nhas_side_effect = Function([medicines, side_effects] -> [bool])\n\n# Constraints\nForAll([m:medicines], Count([s:side_effects], has_side_effect(m, s)) >= 1) ::: Each medicine has at least one side effect\nForAll([m:medicines], Implies(has_side_effect(m, fatigue), Not(has_side_effect(m, palpitations)))) ::: No medicine has both fatigue and palpitations as side effects\nForAll([m:medicines], Implies(m!= Z, Exists([s:side_effects], has_side_effect(m, s) && has_side_effect(Z, s)))) ::: Medicine Z has no side effect in common with any of the other medicines\nAnd(has_side_effect(W, fatigue), has_side_effect(X, palpitations)) ::: Fatigue is a side effect of medicine W. Palpitations are a side effect of medicine X.\nAnd(has_side_effect(W, fatigue), has_side_effect(X, palpitations)) ::: Fatigue is a side effect of medicine W. Palpitations are a side effect of medicine X.\nAnd(has_side_effect(W, fatigue), has_side_effect(X, palpitations)) ::: Fatigue is a side effect of medicine W. Palpitations are a side effect of medicine X.\nAnd(has_side_effect(W, fatigue), has_side_effect(X, palpitations)) ::: Fatigue is a side effect of medicine W. Palpitations are a side effect of medicine X.\nAnd(has_side_effect(W, fatigue), has_side_effect(X, palpitations)) ::: Fatigue is a side effect of medicine W. Palpitations are a"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_1_4",
    "context": "A researcher is evaluating exactly four medicines: W, X, Y, and Z. The only side effects the medicines can have are fatigue, headaches, palpitations, and sweating. The researcher knows the following to be true of the medicines side effects: Each medicine has at least one side effect. No medicine has both fatigue and palpitations as side effects. Medicine Z has no side effect in common with any of the other medicines. Medicines W and X have exactly one side effect in common. Fatigue is a side effect of medicine W. Palpitations are a side effect of medicine X. Sweating is not a side effect of medicine Y.",
    "question": "If medicines W, X, and Y have a side effect in common, then which one of the following statements must be true?",
    "answer": "B",
    "options": [
      "A) Fatigue is a side effect of medicine Y.",
      "B) Headaches are a side effect of medicine W.",
      "C) Headaches are a side effect of medicine Z.",
      "D) Palpitations are a side effect of medicine Y.",
      "E) Sweating is a side effect of medicine W."
    ],
    "raw_logic_programs": [
      "# Declarations\nmedicines = EnumSort([W, X, Y, Z])\nside_effects = EnumSort([fatigue, headaches, palpitations, sweating])\nhas_side_effect = Function([medicines, side_effects] -> [bool])\n\n# Constraints\nForAll([m:medicines], Count([s:side_effects], has_side_effect(m, s)) >= 1) ::: Each medicine has at least one side effect\nForAll([m:medicines], Implies(has_side_effect(m, fatigue), Not(has_side_effect(m, palpitations)))) ::: No medicine has both fatigue and palpitations as side effects\nForAll([m:medicines], Implies(m!= Z, Exists([s:side_effects], has_side_effect(m, s) && has_side_effect(Z, s)))) ::: Medicine Z has no side effect in common with any of the other medicines\nAnd(has_side_effect(W, fatigue), has_side_effect(X, palpitations)) ::: Fatigue is a side effect of medicine W. Palpitations are a side effect of medicine X.\nAnd(has_side_effect(W, s1), has_side_effect(X, s1)) ::: Medicines W and X have exactly one side effect in common\nNot(has_side_effect(Y, sweating)) ::: Sweating is not a side effect of medicine Y\n\n# Options\nQuestion ::: If medicines W, X, and Y have a side effect in common, then which one of the following statements must be true?\nis_valid(has_side_effect(Y, fatigue)) ::: A) Fatigue is a side effect of medicine Y.\nis_valid(has_side_effect(W, headaches)) ::: B) Headaches are a side effect of medicine W.\nis_valid(has_side_effect(Z, headaches)) ::: C) Headaches are a side effect of medicine Z.\nis"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_1_5",
    "context": "A researcher is evaluating exactly four medicines: W, X, Y, and Z. The only side effects the medicines can have are fatigue, headaches, palpitations, and sweating. The researcher knows the following to be true of the medicines side effects: Each medicine has at least one side effect. No medicine has both fatigue and palpitations as side effects. Medicine Z has no side effect in common with any of the other medicines. Medicines W and X have exactly one side effect in common. Fatigue is a side effect of medicine W. Palpitations are a side effect of medicine X. Sweating is not a side effect of medicine Y.",
    "question": "If medicine Y has more than one side effect, then which one of the following statements must be true?",
    "answer": "A",
    "options": [
      "A) Headaches are a side effect of medicine Y.",
      "B) Palpitations are a side effect of medicine Y.",
      "C) Sweating is a side effect of medicine W.",
      "D) Palpitations are not a side effect of medicine Y.",
      "E) Sweating is not a side effect of medicine Z."
    ],
    "raw_logic_programs": [
      "# Declarations\nmedicines = EnumSort([W, X, Y, Z])\nside_effects = EnumSort([fatigue, headaches, palpitations, sweating])\nhas_side_effect = Function([medicines, side_effects] -> [bool])\n\n# Constraints\nForAll([m:medicines], Count([s:side_effects], has_side_effect(m, s)) >= 1) ::: Each medicine has at least one side effect\nForAll([m:medicines], Implies(has_side_effect(m, fatigue), Not(has_side_effect(m, palpitations)))) ::: No medicine has both fatigue and palpitations as side effects\nForAll([m:medicines], Implies(m!= Z, Exists([s:side_effects], has_side_effect(m, s) && has_side_effect(Z, s)))) ::: Medicine Z has no side effect in common with any of the other medicines\nAnd(has_side_effect(W, fatigue), has_side_effect(X, fatigue)) ::: Medicines W and X have exactly one side effect in common\nhas_side_effect(W, fatigue) ::: Fatigue is a side effect of medicine W\nhas_side_effect(X, palpitations) ::: Palpitations are a side effect of medicine X\nNot(has_side_effect(Y, sweating)) ::: Sweating is not a side effect of medicine Y\n\n# Options\nQuestion ::: If medicine Y has more than one side effect, then which one of the following statements must be true?\nis_valid(Exists([s:side_effects], has_side_effect(Y, s) && has_side_effect(W, s))) ::: A) Headaches are a side effect of medicine Y.\nis_valid(Exists([s:side_effects], has_side_effect(Y, s) && has_side_effect(X, s))) ::: B) Palpitations are a side effect of medicine Y."
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_2_6",
    "context": "Tracy's Flower Shop delivers exactly six types of flowers—lilacs, magnolias, orchids, roses, tulips, and violets. Exactly six deliveries are made over a period of two consecutive days—Friday and Saturday. Three deliveries are made each day, at three different times each day—10 A.M., 2 P.M., and 4 P.M. Each of the six deliveries involves only one of the six types of flowers. The deliveries are made in accord with the following: The violets are delivered on Friday. The lilacs are delivered at some time before the tulips. The violets are delivered at some time before the magnolias. The orchids and the roses are delivered on the same day as one another.",
    "question": "Which one of the following could be an accurate list of the flowers in the order in which they are delivered, from first to last?",
    "answer": "B",
    "options": [
      "A) magnolias, lilacs, violets, orchids, tulips, roses",
      "B) orchids, violets, roses, lilacs, magnolias, tulips",
      "C) roses, orchids, lilacs, tulips, violets, magnolias",
      "D) violets, orchids, magnolias, lilacs, tulips, roses",
      "E) violets, roses, orchids, tulips, magnolias, lilacs"
    ],
    "raw_logic_programs": [
      "# Declarations\nflowers = EnumSort([lilacs, magnolias, orchids, roses, tulips, violets])\ntimes = EnumSort([10_A_M, 2_P_M, 4_P_M])\ndays = EnumSort([Friday, Saturday])\ndelivers = Function([flowers, times, days] -> [bool])\n\n# Constraints\nForAll([f:flowers], Count([t:times, d:days], delivers(f, t, d)) == 1) ::: Exactly six deliveries are made over a period of two consecutive days\nAnd(delivers(violets, 10_A_M, Friday), delivers(violets, 2_P_M, Friday), delivers(violets, 4_P_M, Friday)) ::: The violets are delivered on Friday\nAnd(delivers(lilacs, 10_A_M, Friday), delivers(lilacs, 2_P_M, Friday), delivers(lilacs, 4_P_M, Friday)) ::: The lilacs are delivered at some time before the tulips\nAnd(delivers(violets, 10_A_M, Saturday), delivers(violets, 2_P_M, Saturday), delivers(violets, 4_P_M, Saturday)) ::: The violets are delivered at some time before the magnolias\nAnd(delivers(orchids, 10_A_M, Friday), delivers(orchids, 2_P_M, Friday), delivers(orchids, 4_P_M, Friday)) ::: The orchids and the roses are delivered on the same day as one another\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the flowers in the order in which they are delivered, from first to last?\nis_sat(And(delivers(magnolias, 10_A_M, Friday), delivers(lilacs, 2"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_2_7",
    "context": "Tracy's Flower Shop delivers exactly six types of flowers—lilacs, magnolias, orchids, roses, tulips, and violets. Exactly six deliveries are made over a period of two consecutive days—Friday and Saturday. Three deliveries are made each day, at three different times each day—10 A.M., 2 P.M., and 4 P.M. Each of the six deliveries involves only one of the six types of flowers. The deliveries are made in accord with the following: The violets are delivered on Friday. The lilacs are delivered at some time before the tulips. The violets are delivered at some time before the magnolias. The orchids and the roses are delivered on the same day as one another.",
    "question": "If the roses are delivered on Friday at 2 P.M., then each of the following could be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) The violets are delivered on Friday at 4 P.M.",
      "B) The tulips are delivered on Saturday at 2 P.M.",
      "C) The orchids are delivered on Friday at 4 P.M.",
      "D) The magnolias are delivered on Friday at 4 P.M.",
      "E) The lilacs are delivered on Saturday at 2 P.M."
    ],
    "raw_logic_programs": [
      "# Declarations\nflowers = EnumSort([lilacs, magnolias, orchids, roses, tulips, violets])\ntimes = EnumSort([10_A_M, 2_P_M, 4_P_M])\ndays = EnumSort([Friday, Saturday])\ndelivers = Function([flowers, times, days] -> [bool])\n\n# Constraints\nForAll([f:flowers], Count([t:times, d:days], delivers(f, t, d)) == 1) ::: Each of the six deliveries involves only one of the six types of flowers\nAnd(delivers(violets, Friday, 10_A_M), delivers(violets, Friday, 2_P_M), delivers(violets, Friday, 4_P_M)) ::: The violets are delivered on Friday\nAnd(delivers(lilacs, Friday, 10_A_M), delivers(lilacs, Friday, 2_P_M), delivers(lilacs, Friday, 4_P_M)) ::: The lilacs are delivered at some time before the tulips\nAnd(delivers(violets, Friday, 10_A_M), delivers(violets, Friday, 2_P_M), delivers(violets, Friday, 4_P_M)) ::: The violets are delivered at some time before the magnolias\nAnd(delivers(orchids, Friday, 10_A_M), delivers(orchids, Friday, 2_P_M), delivers(orchids, Friday, 4_P_M)) ::: The orchids and the roses are delivered on the same day as one another\n\n# Options\nQuestion ::: If the roses are delivered on Friday at 2 P.M., then each of the following could be true EXCEPT:\nis_exception(is_sat(And(delivers(violets, Friday, 4_P_M), delivers(violets"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_2_8",
    "context": "Tracy's Flower Shop delivers exactly six types of flowers—lilacs, magnolias, orchids, roses, tulips, and violets. Exactly six deliveries are made over a period of two consecutive days—Friday and Saturday. Three deliveries are made each day, at three different times each day—10 A.M., 2 P.M., and 4 P.M. Each of the six deliveries involves only one of the six types of flowers. The deliveries are made in accord with the following: The violets are delivered on Friday. The lilacs are delivered at some time before the tulips. The violets are delivered at some time before the magnolias. The orchids and the roses are delivered on the same day as one another.",
    "question": "If the magnolias and the lilacs are delivered on Saturday, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) The orchids are delivered on Friday at 2 P.M.",
      "B) The orchids are delivered on Saturday at 10 A.M.",
      "C) The roses are delivered on Saturday at 4 P.M.",
      "D) The tulips are delivered on Friday at 4 P.M.",
      "E) The tulips are delivered on Saturday at 10 A.M."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_2_9",
    "context": "Tracy's Flower Shop delivers exactly six types of flowers—lilacs, magnolias, orchids, roses, tulips, and violets. Exactly six deliveries are made over a period of two consecutive days—Friday and Saturday. Three deliveries are made each day, at three different times each day—10 A.M., 2 P.M., and 4 P.M. Each of the six deliveries involves only one of the six types of flowers. The deliveries are made in accord with the following: The violets are delivered on Friday. The lilacs are delivered at some time before the tulips. The violets are delivered at some time before the magnolias. The orchids and the roses are delivered on the same day as one another.",
    "question": "Which one of the following could be an accurate list of the flowers in the order in which they are delivered, from first to last?",
    "answer": "E",
    "options": [
      "A) lilacs, roses, orchids, violets, tulips, magnolias",
      "B) magnolias, violets, lilacs, orchids, roses, tulips",
      "C) orchids, lilacs, violets, magnolias, roses, tulips",
      "D) orchids, roses, violets, magnolias, tulips, lilacs",
      "E) roses, violets, orchids, lilacs, tulips, magnolias"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_2_10",
    "context": "Tracy's Flower Shop delivers exactly six types of flowers—lilacs, magnolias, orchids, roses, tulips, and violets. Exactly six deliveries are made over a period of two consecutive days—Friday and Saturday. Three deliveries are made each day, at three different times each day—10 A.M., 2 P.M., and 4 P.M. Each of the six deliveries involves only one of the six types of flowers. The deliveries are made in accord with the following: The violets are delivered on Friday. The lilacs are delivered at some time before the tulips. The violets are delivered at some time before the magnolias. The orchids and the roses are delivered on the same day as one another.",
    "question": "Which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) e lilacs are delivered on Saturday at 4 P.M.",
      "B) The magnolias are delivered on Friday at 10 A.M.",
      "C) The magnolias are delivered on Friday at 2 P.M.",
      "D) The tulips are delivered on Friday at 10 A.M.",
      "E) The violets are delivered on Saturday at 4 P.M."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_2_11",
    "context": "Tracy's Flower Shop delivers exactly six types of flowers—lilacs, magnolias, orchids, roses, tulips, and violets. Exactly six deliveries are made over a period of two consecutive days—Friday and Saturday. Three deliveries are made each day, at three different times each day—10 A.M., 2 P.M., and 4 P.M. Each of the six deliveries involves only one of the six types of flowers. The deliveries are made in accord with the following: The violets are delivered on Friday. The lilacs are delivered at some time before the tulips. The violets are delivered at some time before the magnolias. The orchids and the roses are delivered on the same day as one another.",
    "question": "If the tulips are delivered on Friday, then which one of the following CANNOT be true?",
    "answer": "A",
    "options": [
      "A) The magnolias are delivered on Friday at 2 P.M.",
      "B) The magnolias are delivered on Saturday at 4 P.M.",
      "C) The orchids are delivered on Saturday at 10 A.M.",
      "D) The roses are delivered on Saturday at 4 P.M.",
      "E) The violets are delivered on Friday at 4 P.M."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_2_12",
    "context": "Tracy's Flower Shop delivers exactly six types of flowers—lilacs, magnolias, orchids, roses, tulips, and violets. Exactly six deliveries are made over a period of two consecutive days—Friday and Saturday. Three deliveries are made each day, at three different times each day—10 A.M., 2 P.M., and 4 P.M. Each of the six deliveries involves only one of the six types of flowers. The deliveries are made in accord with the following: The violets are delivered on Friday. The lilacs are delivered at some time before the tulips. The violets are delivered at some time before the magnolias. The orchids and the roses are delivered on the same day as one another.",
    "question": "If the magnolias and the orchids are delivered on the same day, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) he roses are delivered on Friday.",
      "B) The lilacs are delivered on Saturday.",
      "C) The tulips are delivered on Saturday.",
      "D) The orchids are delivered before the violets.",
      "E) The violets are delivered before the lilacs."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_2_13",
    "context": "Tracy's Flower Shop delivers exactly six types of flowers—lilacs, magnolias, orchids, roses, tulips, and violets. Exactly six deliveries are made over a period of two consecutive days—Friday and Saturday. Three deliveries are made each day, at three different times each day—10 A.M., 2 P.M., and 4 P.M. Each of the six deliveries involves only one of the six types of flowers. The deliveries are made in accord with the following: The violets are delivered on Friday. The lilacs are delivered at some time before the tulips. The violets are delivered at some time before the magnolias. The orchids and the roses are delivered on the same day as one another.",
    "question": "If the tulips are delivered after the roses, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) The magnolias are delivered on Friday.",
      "B) The tulips are delivered on Saturday.",
      "C) The magnolias and the tulips are delivered on different days.",
      "D) The orchids and the tulips are delivered on different days.",
      "E) The tulips are delivered after the orchids."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_3_14",
    "context": "During a seven-year period, an amusement park builds exactly seven roller coasters—the Firecracker, the Gobbler, the Hurricane, the Jackrabbit, the Lasso, the Niagara, and the Pretzel. No two roller coasters are built in the same year. Each roller coaster is either steel or wooden. The following conditions must apply: The Pretzel is built in the second year. The roller coaster built in the first year is steel, and the one built in the seventh year is wooden. The Lasso is built after the Firecracker. The Jackrabbit and the Gobbler are built before the Hurricane. Exactly two of the roller coasters built after the Hurricane are steel. Wooden roller coasters are not built in any two consecutive years.",
    "question": "Which one of the following could be the order, from first to last, in which the roller coasters are built?",
    "answer": "C",
    "options": [
      "A) Gobbler, Jackrabbit, Pretzel, Hurricane, Firecracker, Lasso, Niagara",
      "B) Jackrabbit, Pretzel, Gobbler, Hurricane, Lasso, Firecracker, Niagara",
      "C) Jackrabbit, Pretzel, Gobbler, Hurricane, Niagara, Firecracker, Lasso",
      "D) Niagara, Pretzel, Gobbler, Jackrabbit, Hurricane, Firecracker, Lasso",
      "E) Niagara, Pretzel, Jackrabbit, Hurricane, Gobbler, Firecracker, Lasso"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_3_15",
    "context": "During a seven-year period, an amusement park builds exactly seven roller coasters—the Firecracker, the Gobbler, the Hurricane, the Jackrabbit, the Lasso, the Niagara, and the Pretzel. No two roller coasters are built in the same year. Each roller coaster is either steel or wooden. The following conditions must apply: The Pretzel is built in the second year. The roller coaster built in the first year is steel, and the one built in the seventh year is wooden. The Lasso is built after the Firecracker. The Jackrabbit and the Gobbler are built before the Hurricane. Exactly two of the roller coasters built after the Hurricane are steel. Wooden roller coasters are not built in any two consecutive years.",
    "question": "Which one of the following roller coasters must be steel?",
    "answer": "A",
    "options": [
      "A) Firecracker",
      "B) Gobbler",
      "C) Hurricane",
      "D) Jackrabbit",
      "E) Lasso"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_3_16",
    "context": "During a seven-year period, an amusement park builds exactly seven roller coasters—the Firecracker, the Gobbler, the Hurricane, the Jackrabbit, the Lasso, the Niagara, and the Pretzel. No two roller coasters are built in the same year. Each roller coaster is either steel or wooden. The following conditions must apply: The Pretzel is built in the second year. The roller coaster built in the first year is steel, and the one built in the seventh year is wooden. The Lasso is built after the Firecracker. The Jackrabbit and the Gobbler are built before the Hurricane. Exactly two of the roller coasters built after the Hurricane are steel. Wooden roller coasters are not built in any two consecutive years.",
    "question": "If the Firecracker is built in a year immediately after a year in which a wooden roller coaster is built, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) The Gobbler is wooden.",
      "B) The Hurricane is wooden.",
      "C) The Firecracker is built in the sixth year.",
      "D) The Jackrabbit is built in the third year.",
      "E) The Lasso is built in the sixth year."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_3_17",
    "context": "During a seven-year period, an amusement park builds exactly seven roller coasters—the Firecracker, the Gobbler, the Hurricane, the Jackrabbit, the Lasso, the Niagara, and the Pretzel. No two roller coasters are built in the same year. Each roller coaster is either steel or wooden. The following conditions must apply: The Pretzel is built in the second year. The roller coaster built in the first year is steel, and the one built in the seventh year is wooden. The Lasso is built after the Firecracker. The Jackrabbit and the Gobbler are built before the Hurricane. Exactly two of the roller coasters built after the Hurricane are steel. Wooden roller coasters are not built in any two consecutive years.",
    "question": "Each of the following roller coasters must be built before the Lasso EXCEPT:",
    "answer": "E",
    "options": [
      "A) Firecracker",
      "B) Gobbler",
      "C) Hurricane",
      "D) Jackrabbit",
      "E) Niagara"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_3_18",
    "context": "During a seven-year period, an amusement park builds exactly seven roller coasters—the Firecracker, the Gobbler, the Hurricane, the Jackrabbit, the Lasso, the Niagara, and the Pretzel. No two roller coasters are built in the same year. Each roller coaster is either steel or wooden. The following conditions must apply: The Pretzel is built in the second year. The roller coaster built in the first year is steel, and the one built in the seventh year is wooden. The Lasso is built after the Firecracker. The Jackrabbit and the Gobbler are built before the Hurricane. Exactly two of the roller coasters built after the Hurricane are steel. Wooden roller coasters are not built in any two consecutive years.",
    "question": "If the Jackrabbit, the Hurricane, and the Firecracker are built in three consecutive years, in that order, then each of the following must be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) The Firecracker is built before the Niagara.",
      "B) The Gobbler is built before the Jackrabbit.",
      "C) The Hurricane is built before the Niagara.",
      "D) The Niagara is built before the Lasso.",
      "E) The Pretzel is built before the Jackrabbit."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_4_19",
    "context": "On Tuesday evenings, the Community Center offers one session of each of the following six introductory classes: gymnastics, jazz dance, kung fu, meditation, tennis, and yoga. No other introductory classes are offered on Tuesdays. Each class is scheduled for exactly one hour, beginning at 5 P.M., 6 P.M., 7 P.M., or 8 P.M. Tuesdays schedule conforms to the following conditions: Yoga begins later than jazz dance but no later than kung fu. Meditation begins at the same time as exactly one other introductory class. No other introductory class begins at the same time as gymnastics. At most one of the other introductory classes begins later than gymnastics.",
    "question": "Which one of the following could be an accurate schedule of the Tuesday introductory classes?",
    "answer": "C",
    "options": [
      "A) 5 P.M.: jazz dance, meditation 6 P.M.: yoga 7 P.M.: gymnastics 8 P.M.: kung fu, tennis",
      "B) 5 P.M.: jazz dance 6 P.M.: meditation, tennis 7 P.M.: yoga 8 P.M.: gymnastics, kung fu",
      "C) 5 P.M.: jazz dance, meditation 6 P.M.: yoga 7 P.M.: kung fu, tennis 8 P.M.: gymnastics",
      "D) 5 P.M.: jazz dance, tennis 6 P.M.: meditation 7 P.M.: kung fu, yoga 8 P.M.: gymnastics",
      "E) 5 P.M.: tennis, yoga 6 P.M.: jazz dance, meditation 7 P.M.: gymnastics 8 P.M.: kung fu"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_4_20",
    "context": "On Tuesday evenings, the Community Center offers one session of each of the following six introductory classes: gymnastics, jazz dance, kung fu, meditation, tennis, and yoga. No other introductory classes are offered on Tuesdays. Each class is scheduled for exactly one hour, beginning at 5 P.M., 6 P.M., 7 P.M., or 8 P.M. Tuesdays schedule conforms to the following conditions: Yoga begins later than jazz dance but no later than kung fu. Meditation begins at the same time as exactly one other introductory class. No other introductory class begins at the same time as gymnastics. At most one of the other introductory classes begins later than gymnastics.",
    "question": "If meditation is scheduled to begin later than tennis, then which one of the following could be true of the schedule?",
    "answer": "B",
    "options": [
      "A) Jazz dance begins later than meditation.",
      "B) Kung fu begins later than gymnastics.",
      "C) Meditation begins later than kung fu.",
      "D) Tennis begins later than kung fu.",
      "E) Tennis begins later than yoga."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_4_21",
    "context": "On Tuesday evenings, the Community Center offers one session of each of the following six introductory classes: gymnastics, jazz dance, kung fu, meditation, tennis, and yoga. No other introductory classes are offered on Tuesdays. Each class is scheduled for exactly one hour, beginning at 5 P.M., 6 P.M., 7 P.M., or 8 P.M. Tuesdays schedule conforms to the following conditions: Yoga begins later than jazz dance but no later than kung fu. Meditation begins at the same time as exactly one other introductory class. No other introductory class begins at the same time as gymnastics. At most one of the other introductory classes begins later than gymnastics.",
    "question": "Which one of the following introductory classes could be the only class scheduled to begin at 5 P.M.?",
    "answer": "B",
    "options": [
      "A) yoga",
      "B) tennis",
      "C) meditation",
      "D) kung fu",
      "E) gymnastics"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india3_4-G_4_22",
    "context": "On Tuesday evenings, the Community Center offers one session of each of the following six introductory classes: gymnastics, jazz dance, kung fu, meditation, tennis, and yoga. No other introductory classes are offered on Tuesdays. Each class is scheduled for exactly one hour, beginning at 5 P.M., 6 P.M., 7 P.M., or 8 P.M. Tuesdays schedule conforms to the following conditions: Yoga begins later than jazz dance but no later than kung fu. Meditation begins at the same time as exactly one other introductory class. No other introductory class begins at the same time as gymnastics. At most one of the other introductory classes begins later than gymnastics.",
    "question": "Which one of the following introductory classes CANNOT be scheduled to start at 6 P.M.?",
    "answer": "A",
    "options": [
      "A) gymnastics",
      "B) jazz dance",
      "C) kung fu",
      "D) meditation",
      "E) tennis"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_1_1",
    "context": "Meena has six colored pencils—green, maroon, orange, red, white, and yellow. She sketches a drawing using exactly five of the six pencils, one pencil at a time. The following conditions must hold: No pencil is used more than once. Either the maroon or the yellow pencil is not used. The red pencil is used at some time before the green. The red pencil is used at some time before either the orange or the yellow, but not before both. The green pencil is used at some time before either the maroon or the white, but not before both.",
    "question": "Which one of the following could be an accurate list of the pencils used, from first to fifth?",
    "answer": "D",
    "options": [
      "A) orange, green, red, maroon, yellow",
      "B) red, green, orange, white, maroon",
      "C) red, orange, maroon, white, green",
      "D) white, red, orange, green, maroon",
      "E) white, yellow, orange, green, red"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_1_2",
    "context": "Meena has six colored pencils—green, maroon, orange, red, white, and yellow. She sketches a drawing using exactly five of the six pencils, one pencil at a time. The following conditions must hold: No pencil is used more than once. Either the maroon or the yellow pencil is not used. The red pencil is used at some time before the green. The red pencil is used at some time before either the orange or the yellow, but not before both. The green pencil is used at some time before either the maroon or the white, but not before both.",
    "question": "Which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) The maroon pencil is used first, whereas the white is used second.",
      "B) The white pencil is used first, whereas the green is used second.",
      "C) The yellow pencil is used first, whereas the orange is used second.",
      "D) The yellow pencil is used first, whereas the orange is used fourth.",
      "E) The yellow pencil is used fourth, whereas the maroon is used fifth."
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_1_3",
    "context": "Meena has six colored pencils—green, maroon, orange, red, white, and yellow. She sketches a drawing using exactly five of the six pencils, one pencil at a time. The following conditions must hold: No pencil is used more than once. Either the maroon or the yellow pencil is not used. The red pencil is used at some time before the green. The red pencil is used at some time before either the orange or the yellow, but not before both. The green pencil is used at some time before either the maroon or the white, but not before both.",
    "question": "Which one of the following CANNOT be the color of the fifth pencil used?",
    "answer": "A",
    "options": [
      "A) green",
      "B) maroon",
      "C) orange",
      "D) white",
      "E) yellow"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_1_4",
    "context": "Meena has six colored pencils—green, maroon, orange, red, white, and yellow. She sketches a drawing using exactly five of the six pencils, one pencil at a time. The following conditions must hold: No pencil is used more than once. Either the maroon or the yellow pencil is not used. The red pencil is used at some time before the green. The red pencil is used at some time before either the orange or the yellow, but not before both. The green pencil is used at some time before either the maroon or the white, but not before both.",
    "question": "Which one of the following could be an accurate list of the pencils used, from first to fifth?",
    "answer": "D",
    "options": [
      "A) maroon, green, white, red, orange",
      "B) maroon, red, green, white, yellow",
      "C) red, green, orange, white, yellow",
      "D) red, white, orange, green, maroon",
      "E) white, red, maroon, green, orange"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_1_5",
    "context": "Meena has six colored pencils—green, maroon, orange, red, white, and yellow. She sketches a drawing using exactly five of the six pencils, one pencil at a time. The following conditions must hold: No pencil is used more than once. Either the maroon or the yellow pencil is not used. The red pencil is used at some time before the green. The red pencil is used at some time before either the orange or the yellow, but not before both. The green pencil is used at some time before either the maroon or the white, but not before both.",
    "question": "Which one of the following CANNOT be the color of the third pencil used?",
    "answer": "C",
    "options": [
      "A) green",
      "B) maroon",
      "C) red",
      "D) white",
      "E) yellow"
    ],
    "raw_logic_programs": [
      "Time out!"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_1_6",
    "context": "Meena has six colored pencils—green, maroon, orange, red, white, and yellow. She sketches a drawing using exactly five of the six pencils, one pencil at a time. The following conditions must hold: No pencil is used more than once. Either the maroon or the yellow pencil is not used. The red pencil is used at some time before the green. The red pencil is used at some time before either the orange or the yellow, but not before both. The green pencil is used at some time before either the maroon or the white, but not before both.",
    "question": "Suppose that the condition that either the maroon or the yellow pencil is not used no longer holds. If all other conditions remain in effect, then which one of the following could be an accurate list of the pencils used, from first to fifth?",
    "answer": "E",
    "options": [
      "A) maroon, red, green, orange, yellow",
      "B) maroon, yellow, red, green, white",
      "C) orange, green, red, yellow, maroon",
      "D) orange, red, maroon, green, white",
      "E) white, red, green, maroon, yellow"
    ],
    "raw_logic_programs": [
      "# Declarations\npencils = EnumSort([green, maroon, orange, red, white, yellow])\nused = Function([pencils] -> [bool])\n\n# Constraints\nForAll([p:pencils], And(1 <= used(p), used(p) <= 5)) ::: No pencil is used more than once\nImplies(used(maroon), Not(used(yellow))) ::: Either the maroon or the yellow pencil is not used\nAnd(used(red), used(green)) ::: The red pencil is used at some time before the green\nAnd(used(red), Implies(used(orange), used(yellow))) ::: The red pencil is used at some time before either the orange or the yellow, but not before both\nAnd(used(green), Implies(used(maroon), used(white))) ::: The green pencil is used at some time before either the maroon or the white, but not before both\n\n# Options\nQuestion ::: Suppose that the condition that either the maroon or the yellow pencil is not used no longer holds. If all other conditions remain in effect, then which one of the following could be an accurate list of the pencils used, from first to fifth?\nis_valid(ForAll([p:pencils], used(p) == (p == maroon) || (p == red) || (p == green) || (p == orange) || (p == yellow))) ::: (A)\nis_valid(ForAll([p:pencils], used(p) == (p == maroon) || (p == yellow) || (p == red) || (p == green) || (p == white))) ::: (B)\nis_valid(ForAll([p:pencils], used(p) == (p == orange) || (p == green) || (p == red) || (p == yellow) || (p == maroon))) ::: (C)\nis_valid(ForAll([p:pencils], used(p) == (p == orange) || (p == red) || (p == maroon) || (p == green) || (p == white))) ::: (D)\nis_valid(ForAll([p:pencils], used(p) == (p == white) || (p == red) || (p == green) || (p == maroon) || (p == yellow))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_2_7",
    "context": "A bird sanctuary contains birds of at least two of the following six kinds—kingfishers, mynas, peacocks, robins, sparrows, and woodpeckers. No other kinds of birds are in the sanctuary. The following conditions must hold: Woodpeckers are not in the sanctuary if mynas are. Peacocks are not in the sanctuary if robins are. Either robins or woodpeckers, but not both, are in the sanctuary. Woodpeckers are in the sanctuary if kingfishers, sparrows, or both are in the sanctuary",
    "question": "Which one of the following could be a complete and accurate list of the kinds of birds in the sanctuary?",
    "answer": "B",
    "options": [
      "A) kingfishers, mynas",
      "B) peacocks, woodpeckers",
      "C) kingfishers, robins, sparrows",
      "D) mynas, peacocks, robins",
      "E) mynas, peacocks, sparrows"
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([kingfishers, mynas, peacocks, robins, sparrows, woodpeckers])\nin_sanctuary = Function([birds] -> [bool])\n\n# Constraints\nForAll([b:birds], Count([b:birds], in_sanctuary(b)) >= 2) ::: A bird sanctuary contains birds of at least two of the following six kinds\nAnd(Not(in_sanctuary(woodpeckers)), in_sanctuary(mynas)) ::: Woodpeckers are not in the sanctuary if mynas are\nAnd(Not(in_sanctuary(peacocks)), in_sanctuary(robins)) ::: Peacocks are not in the sanctuary if robins are\nOr(in_sanctuary(robins), in_sanctuary(woodpeckers)) ::: Either robins or woodpeckers, but not both, are in the sanctuary\nOr(in_sanctuary(kingfishers), in_sanctuary(sparrows), in_sanctuary(kingfishers) && in_sanctuary(sparrows)) ::: Woodpeckers are in the sanctuary if kingfishers, sparrows, or both are in the sanctuary\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the kinds of birds in the sanctuary?\nis_sat(ForAll([b:birds], in_sanctuary(b) == (b == kingfishers || b == mynas))) ::: A) kingfishers, mynas\nis_sat(ForAll([b:birds], in_sanctuary(b) == (b == peacocks || b == woodpeckers))) ::: B) peacocks, woodpeckers\nis_sat(ForAll([b:birds], in_sanctuary(b) == (b == kingfishers || b == robins || b == sparrows))) ::: C) kingfishers, robins, sparrows\nis_sat(ForAll([b:birds], in_sanctuary(b) == (b == mynas || b == peacocks || b == robins))) ::: D) mynas, peacocks, robins\nis_sat(ForAll([b:birds], in"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_2_8",
    "context": "A bird sanctuary contains birds of at least two of the following six kinds—kingfishers, mynas, peacocks, robins, sparrows, and woodpeckers. No other kinds of birds are in the sanctuary. The following conditions must hold: Woodpeckers are not in the sanctuary if mynas are. Peacocks are not in the sanctuary if robins are. Either robins or woodpeckers, but not both, are in the sanctuary. Woodpeckers are in the sanctuary if kingfishers, sparrows, or both are in the sanctuary",
    "question": "What is the maximum number of the kinds of birds that could be in the sanctuary?",
    "answer": "C",
    "options": [
      "A) two",
      "B) three",
      "C) four",
      "D) five",
      "E) six"
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([kingfishers, mynas, peacocks, robins, sparrows, woodpeckers])\nin_sanctuary = Function([birds] -> [bool])\n\n# Constraints\nForAll([b:birds], Count([b:birds], in_sanctuary(b)) >= 2) ::: A bird sanctuary contains birds of at least two of the following six kinds\nAnd(in_sanctuary(mynas), Not(in_sanctuary(woodpeckers))) ::: Woodpeckers are not in the sanctuary if mynas are\nAnd(in_sanctuary(robins), Not(in_sanctuary(peacocks))) ::: Peacocks are not in the sanctuary if robins are\nOr(in_sanctuary(robins), in_sanctuary(woodpeckers)) ::: Either robins or woodpeckers, but not both, are in the sanctuary\nOr(in_sanctuary(kingfishers), in_sanctuary(sparrows), in_sanctuary(kingfishers) && in_sanctuary(sparrows)) ::: Woodpeckers are in the sanctuary if kingfishers, sparrows, or both are in the sanctuary\n\n# Options\nQuestion ::: What is the maximum number of the kinds of birds that could be in the sanctuary?\nis_sat(ForAll([b:birds], in_sanctuary(b))) ::: A) two\nis_sat(ForAll([b:birds], Or(in_sanctuary(b), in_sanctuary(kingfishers)))) ::: B) three\nis_sat(ForAll([b:birds], Or(in_sanctuary(b), in_sanctuary(kingfishers), in_sanctuary(sparrows)))) ::: C) four\nis_sat(ForAll([b:birds], Or(in_sanctuary(b), in_sanctuary(kingfishers), in_sanctuary(sparrows), in_sanctuary(mynas)))) ::: D) five\nis_sat(ForAll([b:birds], Or(in_sanctuary(b), in_sanctuary(kingfishers), in_sanctuary(sparrows), in_sanctuary(m"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_2_9",
    "context": "A bird sanctuary contains birds of at least two of the following six kinds—kingfishers, mynas, peacocks, robins, sparrows, and woodpeckers. No other kinds of birds are in the sanctuary. The following conditions must hold: Woodpeckers are not in the sanctuary if mynas are. Peacocks are not in the sanctuary if robins are. Either robins or woodpeckers, but not both, are in the sanctuary. Woodpeckers are in the sanctuary if kingfishers, sparrows, or both are in the sanctuary",
    "question": "If both kingfishers and sparrows are in the sanctuary, then each of the following could be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) Exactly three kinds of birds are in the sanctuary.",
      "B) Exactly four kinds of birds are in the sanctuary.",
      "C) There are peacocks in the sanctuary.",
      "D) There are robins in the sanctuary.",
      "E) There are woodpeckers in the sanctuary"
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([kingfishers, mynas, peacocks, robins, sparrows, woodpeckers])\nin_sanctuary = Function([birds] -> [bool])\n\n# Constraints\nForAll([b:birds], Count([b:birds], in_sanctuary(b)) >= 2) ::: A bird sanctuary contains birds of at least two of the following six kinds\nAnd(in_sanctuary(woodpeckers), Not(in_sanctuary(mynas))) ::: Woodpeckers are not in the sanctuary if mynas are\nAnd(in_sanctuary(peacocks), Not(in_sanctuary(robins))) ::: Peacocks are not in the sanctuary if robins are\nOr(in_sanctuary(robins), in_sanctuary(woodpeckers)) ::: Either robins or woodpeckers, but not both, are in the sanctuary\nAnd(in_sanctuary(woodpeckers), Or(in_sanctuary(kingfishers), in_sanctuary(sparrows), And(in_sanctuary(kingfishers), in_sanctuary(sparrows)))) ::: Woodpeckers are in the sanctuary if kingfishers, sparrows, or both are in the sanctuary\n\n# Options\nQuestion ::: If both kingfishers and sparrows are in the sanctuary, then each of the following could be true EXCEPT:\nis_exception(is_sat(Count([b:birds], in_sanctuary(b)) == 3)) ::: A) Exactly three kinds of birds are in the sanctuary.\nis_exception(is_sat(Count([b:birds], in_sanctuary(b)) == 4)) ::: B) Exactly four kinds of birds are in the sanctuary.\nis_exception(is_sat(in_sanctuary(peacocks))) ::: C) There are peacocks in the sanctuary.\nis_exception(is_sat(in_sanctuary(robins))) ::: D) There are robins in the sanctuary.\nis_exception(is_sat(in_sanctuary(woodpeckers))) ::: E) There are woodpeckers in the sanctuary\n------\nProblem"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_2_10",
    "context": "A bird sanctuary contains birds of at least two of the following six kinds—kingfishers, mynas, peacocks, robins, sparrows, and woodpeckers. No other kinds of birds are in the sanctuary. The following conditions must hold: Woodpeckers are not in the sanctuary if mynas are. Peacocks are not in the sanctuary if robins are. Either robins or woodpeckers, but not both, are in the sanctuary. Woodpeckers are in the sanctuary if kingfishers, sparrows, or both are in the sanctuary",
    "question": "If there are no kingfishers in the sanctuary, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) There are no sparrows in the sanctuary.",
      "B) There are no woodpeckers in the sanctuary.",
      "C) There are peacocks in the sanctuary.",
      "D) At least three kinds of birds are in the sanctuary.",
      "E) At most three kinds of birds are in the sanctuary"
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([kingfishers, mynas, peacocks, robins, sparrows, woodpeckers])\nin_sanctuary = Function([birds] -> [bool])\n\n# Constraints\nForAll([b:birds], Count([b:birds], in_sanctuary(b)) >= 2) ::: A bird sanctuary contains birds of at least two of the following six kinds\nAnd(Not(in_sanctuary(woodpeckers)), in_sanctuary(mynas)) ::: Woodpeckers are not in the sanctuary if mynas are\nAnd(Not(in_sanctuary(peacocks)), in_sanctuary(robins)) ::: Peacocks are not in the sanctuary if robins are\nOr(in_sanctuary(robins), in_sanctuary(woodpeckers)) ::: Either robins or woodpeckers, but not both, are in the sanctuary\nOr(in_sanctuary(kingfishers), in_sanctuary(sparrows), in_sanctuary(kingfishers) && in_sanctuary(sparrows)) ::: Woodpeckers are in the sanctuary if kingfishers, sparrows, or both are in the sanctuary\nNot(in_sanctuary(kingfishers)) ::: If there are no kingfishers in the sanctuary\n\n# Options\nQuestion ::: If there are no kingfishers in the sanctuary, then which one of the following must be true?\nis_sat(Not(in_sanctuary(sparrows))) ::: A) There are no sparrows in the sanctuary.\nis_sat(Not(in_sanctuary(woodpeckers))) ::: B) There are no woodpeckers in the sanctuary.\nis_sat(in_sanctuary(peacocks)) ::: C) There are peacocks in the sanctuary.\nis_sat(Count([b:birds], in_sanctuary(b)) >= 3) ::: D) At least three kinds of birds are in the sanctuary.\nis_sat(Count([b:birds], in_sanctuary(b)) <= 3) ::: E) At most three kinds of birds are in the sanctuary\n------\nProblem:\nA certain"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_2_11",
    "context": "A bird sanctuary contains birds of at least two of the following six kinds—kingfishers, mynas, peacocks, robins, sparrows, and woodpeckers. No other kinds of birds are in the sanctuary. The following conditions must hold: Woodpeckers are not in the sanctuary if mynas are. Peacocks are not in the sanctuary if robins are. Either robins or woodpeckers, but not both, are in the sanctuary. Woodpeckers are in the sanctuary if kingfishers, sparrows, or both are in the sanctuary",
    "question": "If there are no robins in the sanctuary, then which one of the following is a kind of bird that CANNOT be in the sanctuary?",
    "answer": "B",
    "options": [
      "A) kingfishers",
      "B) mynas",
      "C) peacocks",
      "D) sparrows",
      "E) woodpeckers"
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([kingfishers, mynas, peacocks, robins, sparrows, woodpeckers])\nin_sanctuary = Function([birds] -> [bool])\n\n# Constraints\nForAll([b:birds], Count([b:birds], in_sanctuary(b)) >= 2) ::: A bird sanctuary contains birds of at least two of the following six kinds\nAnd(Not(in_sanctuary(woodpeckers)), in_sanctuary(mynas))) ::: Woodpeckers are not in the sanctuary if mynas are\nAnd(Not(in_sanctuary(peacocks)), in_sanctuary(robins))) ::: Peacocks are not in the sanctuary if robins are\nOr(in_sanctuary(robins), in_sanctuary(woodpeckers)) ::: Either robins or woodpeckers, but not both, are in the sanctuary\nOr(in_sanctuary(kingfishers), in_sanctuary(sparrows), in_sanctuary(kingfishers) && in_sanctuary(sparrows)) ::: Woodpeckers are in the sanctuary if kingfishers, sparrows, or both are in the sanctuary\n\n# Options\nQuestion ::: If there are no robins in the sanctuary, then which one of the following is a kind of bird that CANNOT be in the sanctuary?\nis_exception(is_sat(in_sanctuary(kingfishers))) ::: A) kingfishers\nis_exception(is_sat(in_sanctuary(mynas))) ::: B) mynas\nis_exception(is_sat(in_sanctuary(peacocks))) ::: C) peacocks\nis_exception(is_sat(in_sanctuary(sparrows))) ::: D) sparrows\nis_exception(is_sat(in_sanctuary(woodpeckers))) ::: E) woodpeckers\n------\nProblem:\nA certain company has a total of 100 employees, each of whom is either a manager or a nonmanager. The following conditions apply: The number of managers is 10 more than the number of nonmanagers. The number of managers who are women is 10 more than the number of non"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_2_12",
    "context": "A bird sanctuary contains birds of at least two of the following six kinds—kingfishers, mynas, peacocks, robins, sparrows, and woodpeckers. No other kinds of birds are in the sanctuary. The following conditions must hold: Woodpeckers are not in the sanctuary if mynas are. Peacocks are not in the sanctuary if robins are. Either robins or woodpeckers, but not both, are in the sanctuary. Woodpeckers are in the sanctuary if kingfishers, sparrows, or both are in the sanctuary",
    "question": "If peacocks are in the sanctuary, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Exactly two kinds of birds are in the sanctuary.",
      "B) Exactly three kinds of birds are in the sanctuary.",
      "C) Exactly four kinds of birds are in the sanctuary.",
      "D) There are no kingfishers in the sanctuary.",
      "E) There are no mynas in the sanctuary."
    ],
    "raw_logic_programs": [
      "# Declarations\nbirds = EnumSort([kingfishers, mynas, peacocks, robins, sparrows, woodpeckers])\nin_sanctuary = Function([birds] -> [bool])\n\n# Constraints\nForAll([b:birds], Count([b:birds], in_sanctuary(b)) >= 2) ::: A bird sanctuary contains birds of at least two of the following six kinds\nAnd(in_sanctuary(woodpeckers), Not(in_sanctuary(mynas))) ::: Woodpeckers are not in the sanctuary if mynas are\nAnd(in_sanctuary(peacocks), Not(in_sanctuary(robins))) ::: Peacocks are not in the sanctuary if robins are\nOr(in_sanctuary(robins), in_sanctuary(woodpeckers)) ::: Either robins or woodpeckers, but not both, are in the sanctuary\nAnd(in_sanctuary(woodpeckers), Or(in_sanctuary(kingfishers), in_sanctuary(sparrows), in_sanctuary(kingfishers) && in_sanctuary(sparrows))) ::: Woodpeckers are in the sanctuary if kingfishers, sparrows, or both are in the sanctuary\n\n# Options\nQuestion ::: If peacocks are in the sanctuary, then which one of the following must be true?\nis_valid(Count([b:birds], in_sanctuary(b)) == 2) ::: A) Exactly two kinds of birds are in the sanctuary.\nis_valid(Count([b:birds], in_sanctuary(b)) == 3) ::: B) Exactly three kinds of birds are in the sanctuary.\nis_valid(Count([b:birds], in_sanctuary(b)) == 4) ::: C) Exactly four kinds of birds are in the sanctuary.\nis_valid(Not(in_sanctuary(kingfishers))) ::: D) There are no kingfishers in the sanctuary.\nis_valid(Not(in_sanctuary(mynas))) ::: E) There are no mynas in the sanctuary.\n------\nProblem:\nA certain company has a total of 100 employees, each of"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_3_13",
    "context": "Last year, seven stores—Faroj's Appliances, Good Buy, Intelligent Office, LANs for Less, Networks Unlimited, Silicon Village, and Uptown Computing—each sold exactly 100, 200, 300, 400, or 500 computers, consistent with the following conditions: Good Buy sold exactly the same number of computers as Networks Unlimited did. Intelligent Office sold exactly the same number of computers as Uptown Computing did. Neither Faroj's Appliances nor Silicon Village sold exactly the same number of computers as any other store. LANs for Less sold more computers than Uptown Computing did. Intelligent Office sold more computers than Good Buy did.",
    "question": "Which one of the following could be an accurate matching of the stores to the exact number of computers each sold last year?",
    "answer": "A",
    "options": [
      "A) Faroj's Appliances: 100; Good Buy: 200; Intelligent Office: 300; LANs for Less: 400; Networks Unlimited: 200; Silicon Village: 500; Uptown Computing: 300",
      "B) Faroj's Appliances: 100; Good Buy: 200; Intelligent Office: 400; LANs for Less: 300; Networks Unlimited: 200; Silicon Village: 500; Uptown Computing: 400",
      "C) Faroj's Appliances: 500; Good Buy: 200; Intelligent Office: 300; LANs for Less: 400; Networks Unlimited: 500; Silicon Village: 100; Uptown Computing: 300",
      "D) Faroj's Appliances: 500; Good Buy: 300; Intelligent Office: 200; LANs for Less: 400; Networks Unlimited: 300; Silicon Village: 100; Uptown Computing: 200",
      "E) Faroj's Appliances: 500; Good Buy: 300; Intelligent Office: 400; LANs for Less: 200; Networks Unlimited: 300; Silicon Village: 500; Uptown Computing: 100"
    ],
    "raw_logic_programs": [
      "# Declarations\nstores = EnumSort([Faroj's_Appliances, Good_Buy, Intelligent_Office, LANs_for_Less, Networks_Unlimited, Silicon_Village, Uptown_Computing])\ncomputers = EnumSort([100, 200, 300, 400, 500])\nsold = Function([stores, computers] -> [int])\nForAll([s:stores], And(1 <= sold(s, 1), sold(s, 1) <= 5))\n\n# Constraints\nAnd(sold(Good_Buy, 1) == sold(Networks_Unlimited, 1), sold(Intelligent_Office, 1) == sold(Uptown_Computing, 1)) ::: Good Buy sold exactly the same number of computers as Networks Unlimited did. Intelligent Office sold exactly the same number of computers as Uptown Computing did.\nForAll([s:stores], Implies(s!= Faroj's_Appliances, sold(s, 1)!= sold(Faroj's_Appliances, 1))) ::: Neither Faroj's Appliances nor Silicon Village sold exactly the same number of computers as any other store.\nForAll([s:stores], Implies(s!= Silicon_Village, sold(s, 1)!= sold(Silicon_Village, 1))) ::: Neither Faroj's Appliances nor Silicon Village sold exactly the same number of computers as any other store.\nsold(LANs_for_Less, 1) > sold(Uptown_Computing, 1) ::: LANs for Less sold more computers than Uptown Computing did.\nsold(Intelligent_Office, 1) > sold(Good_Buy, 1) ::: Intelligent Office sold more computers than Good Buy did.\n\n# Options\nQuestion ::: Which one of the following could be an accurate matching of the stores to the exact number of computers each sold last year?\nis_sat(ForAll([s:stores], sold(s, 1) == 100)) ::: (A)\nis_sat(ForAll([s:stores], sold(s, 1) == 200)) ::: (B)"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_3_14",
    "context": "Last year, seven stores—Faroj's Appliances, Good Buy, Intelligent Office, LANs for Less, Networks Unlimited, Silicon Village, and Uptown Computing—each sold exactly 100, 200, 300, 400, or 500 computers, consistent with the following conditions: Good Buy sold exactly the same number of computers as Networks Unlimited did. Intelligent Office sold exactly the same number of computers as Uptown Computing did. Neither Faroj's Appliances nor Silicon Village sold exactly the same number of computers as any other store. LANs for Less sold more computers than Uptown Computing did. Intelligent Office sold more computers than Good Buy did.",
    "question": "Which one of the following stores CANNOT have sold exactly 400 computers last year?",
    "answer": "B",
    "options": [
      "A) Faroj's Appliances",
      "B) Good Buy",
      "C) Intelligent Office",
      "D) Silicon Village",
      "E) Uptown Computing"
    ],
    "raw_logic_programs": [
      "# Declarations\nstores = EnumSort([Faroj's_Appliances, Good_Buy, Intelligent_Office, LANs_for_Less, Networks_Unlimited, Silicon_Village, Uptown_Computing])\ncomputers = EnumSort([100, 200, 300, 400, 500])\nsold = Function([stores, computers] -> [int])\n\n# Constraints\nForAll([s:stores], And(100 <= sold(s, computers), sold(s, computers) <= 500)) ::: each store sold exactly 100, 200, 300, 400, or 500 computers\nAnd(sold(Good_Buy, computers) == sold(Networks_Unlimited, computers), sold(Intelligent_Office, computers) == sold(Uptown_Computing, computers)) ::: Good Buy sold exactly the same number of computers as Networks Unlimited did. Intelligent Office sold exactly the same number of computers as Uptown Computing did.\nForAll([s:stores], Implies(s!= Faroj's_Appliances, s!= Silicon_Village, Not(sold(s, computers) == sold(Faroj's_Appliances, computers)))) ::: Neither Faroj's Appliances nor Silicon Village sold exactly the same number of computers as any other store.\nsold(LANs_for_Less, computers) > sold(Uptown_Computing, computers) ::: LANs for Less sold more computers than Uptown Computing did.\nsold(Intelligent_Office, computers) > sold(Good_Buy, computers) ::: Intelligent Office sold more computers than Good Buy did.\n\n# Options\nQuestion ::: Which one of the following stores CANNOT have sold exactly 400 computers last year?\nis_exception(is_sat(sold(Faroj's_Appliances, computers) == 400)) ::: A) Faroj's Appliances\nis_exception(is_sat(sold(Good_Buy, computers) == 400)) ::: B) Good Buy\nis_exception(is_sat(sold(Intelligent_Office, computers) == 400"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_3_15",
    "context": "Last year, seven stores—Faroj's Appliances, Good Buy, Intelligent Office, LANs for Less, Networks Unlimited, Silicon Village, and Uptown Computing—each sold exactly 100, 200, 300, 400, or 500 computers, consistent with the following conditions: Good Buy sold exactly the same number of computers as Networks Unlimited did. Intelligent Office sold exactly the same number of computers as Uptown Computing did. Neither Faroj's Appliances nor Silicon Village sold exactly the same number of computers as any other store. LANs for Less sold more computers than Uptown Computing did. Intelligent Office sold more computers than Good Buy did.",
    "question": "Which one of the following stores CANNOT have sold exactly 200 computers last year?",
    "answer": "D",
    "options": [
      "A) Faroj's Appliances",
      "B) Good Buy",
      "C) Intelligent Office",
      "D) LANs for Less",
      "E) Silicon Village"
    ],
    "raw_logic_programs": [
      "# Declarations\nstores = EnumSort([Faroj's_Appliances, Good_Buy, Intelligent_Office, LANs_for_Less, Networks_Unlimited, Silicon_Village, Uptown_Computing])\ncomputers = EnumSort([100, 200, 300, 400, 500])\nsold = Function([stores, computers] -> [int])\n\n# Constraints\nForAll([s:stores], Count([c:computers], sold(s, c) == 1) == 1) ::: each store sold exactly 100, 200, 300, 400, or 500 computers\nAnd(sold(Good_Buy, c), sold(Networks_Unlimited, c)) ::: Good Buy sold exactly the same number of computers as Networks Unlimited did\nAnd(sold(Intelligent_Office, c), sold(Uptown_Computing, c)) ::: Intelligent Office sold exactly the same number of computers as Uptown Computing did\nForAll([s:stores], Implies(s!= Faroj's_Appliances, s!= Silicon_Village, Not(And(sold(s, c), sold(Faroj's_Appliances, c))))) ::: Neither Faroj's Appliances nor Silicon Village sold exactly the same number of computers as any other store\nCount([c:computers], sold(LANs_for_Less, c)) > Count([c:computers], sold(Uptown_Computing, c)) ::: LANs for Less sold more computers than Uptown Computing did\nCount([c:computers], sold(Intelligent_Office, c)) > Count([c:computers], sold(Good_Buy, c)) ::: Intelligent Office sold more computers than Good Buy did\n\n# Options\nQuestion ::: Which one of the following stores CANNOT have sold exactly 200 computers last year?\nis_exception(is_sat(sold(Faroj's_Appliances, 200) == 1)) ::: A) Faroj's Appliances\nis_exception(is_sat(sold(Good_Buy, 200) == 1)) ::: B) Good Buy"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_3_16",
    "context": "Last year, seven stores—Faroj's Appliances, Good Buy, Intelligent Office, LANs for Less, Networks Unlimited, Silicon Village, and Uptown Computing—each sold exactly 100, 200, 300, 400, or 500 computers, consistent with the following conditions: Good Buy sold exactly the same number of computers as Networks Unlimited did. Intelligent Office sold exactly the same number of computers as Uptown Computing did. Neither Faroj's Appliances nor Silicon Village sold exactly the same number of computers as any other store. LANs for Less sold more computers than Uptown Computing did. Intelligent Office sold more computers than Good Buy did.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Faroj's Appliances sold more computers last year than Good Buy did.",
      "B) Intelligent Office sold more computers last year than Silicon Village did.",
      "C) LANs for Less sold more computers last year than Faroj's Appliances did.",
      "D) Silicon Village sold more computers last year than Good Buy did.",
      "E) Uptown Computing sold more computers last year than Networks Unlimited did."
    ],
    "raw_logic_programs": [
      "# Declarations\nstores = EnumSort([Faroj, Good, Intelligent, LANs, Networks, Silicon, Uptown])\ncomputers = EnumSort([100, 200, 300, 400, 500])\nsold = Function([stores, computers] -> [int])\n\n# Constraints\nForAll([s:stores], Count([c:computers], sold(s, c) == 1) == 1) ::: each store sold exactly 100, 200, 300, 400, or 500 computers\nAnd(sold(Good, c), sold(Networks, c)) ::: Good Buy sold exactly the same number of computers as Networks Unlimited did\nAnd(sold(Intelligent, c), sold(Uptown, c)) ::: Intelligent Office sold exactly the same number of computers as Uptown Computing did\nForAll([s:stores], Implies(s!= Faroj, s!= Silicon, Not(And(sold(s, c), sold(Faroj, c))))) ::: Neither Faroj's Appliances nor Silicon Village sold exactly the same number of computers as any other store\nCount([c:computers], sold(LANs, c)) > Count([c:computers], sold(Uptown, c)) ::: LANs for Less sold more computers than Uptown Computing did\nCount([c:computers], sold(Intelligent, c)) > Count([c:computers], sold(Good, c)) ::: Intelligent Office sold more computers than Good Buy did\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(Exists([c:computers], Count([s:stores], sold(s, c) == 1) == 1)) ::: (A)\nis_valid(Exists([c:computers], Count([s:stores], sold(s, c) == 1) == 1)) ::: (B)\nis_valid(Exists([c:computers], Count([s:stores], sold(s, c) == 1) == 1)) ::: (C)\nis_valid(Exists([c:computers], Count([s:stores], sold(s, c) == 1) == 1)) ::: (D)\nis_valid(Exists([c:computers], Count([s:stores], sold(s, c) == 1) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_4_17",
    "context": "Arbutus College owns exactly four houses that it leases to faculty or students. Of these houses, no two are exactly the same distance from Arbutus's campus, and each house is either a student house (occupied entirely by students) or a faculty house (occupied entirely by faculty). The lease length for each house is one, two, or three semesters. The following conditions must hold: No student house has a three-semester lease. At least two houses each have longer leases than does the house closest to campus. Every student house (if there are any) is farther from campus than any faculty house (if there are any).",
    "question": "Which one of the following could be a complete and accurate list of the leases of the student houses, ordered from the student house closest to campus to the student house farthest from campus?",
    "answer": "D",
    "options": [
      "A) one semester, one semester",
      "B) two semesters, three semesters",
      "C) one semester, two semesters, one semester",
      "D) one semester, two semesters, two semesters, one semester",
      "E) one semester, two semesters, three semesters, two semesters"
    ],
    "raw_logic_programs": [
      "# Declarations\nhouses = EnumSort([house1, house2, house3, house4])\noccupants = EnumSort([faculty, student])\nleases = EnumSort([one_semester, two_semesters, three_semesters])\ndistance = Function([houses] -> [int])\nForAll([h:houses], And(1 <= distance(h), distance(h) <= 4))\n\n# Constraints\nForAll([h:houses], Count([l:leases], distance(h) == l) == 1) ::: no two houses are exactly the same distance from Arbutus's campus\nForAll([h:houses], Count([l:leases], distance(h) == l) == 1) ::: each house is either a student house (occupied entirely by students) or a faculty house (occupied entirely by faculty)\nForAll([h:houses], And(distance(h) == one_semester, occupants(h) == student)) ::: No student house has a three-semester lease\nAnd(Count([h:houses], distance(h) > distance(house1)), Count([h:houses], distance(h) > distance(house1)) == 2) ::: At least two houses each have longer leases than does the house closest to campus\nForAll([h:houses], Implies(occupants(h) == student, distance(h) > distance(house1))) ::: Every student house (if there are any) is farther from campus than any faculty house (if there are any)\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the leases of the student houses, ordered from the student house closest to campus to the student house farthest from campus?\nis_sat(ForAll([h:houses], distance(h) == one_semester)) ::: A) one semester, one semester\nis_sat(ForAll([h:houses], distance(h) == two_semesters)) ::: B) two semesters, three semesters\nis_sat(ForAll([h:houses], distance(h) == one_semester)) ::: C) one semester, two semesters, one semester\nis_sat(ForAll([h:houses], distance(h) == one_semester)) ::: D) one semester, two semesters, two semesters, one semester\nis_sat(ForAll([h:houses], distance(h) == one_semester)) ::: E) one semester, two semesters, three semesters,"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_4_18",
    "context": "Arbutus College owns exactly four houses that it leases to faculty or students. Of these houses, no two are exactly the same distance from Arbutus's campus, and each house is either a student house (occupied entirely by students) or a faculty house (occupied entirely by faculty). The lease length for each house is one, two, or three semesters. The following conditions must hold: No student house has a three-semester lease. At least two houses each have longer leases than does the house closest to campus. Every student house (if there are any) is farther from campus than any faculty house (if there are any).",
    "question": "If the house farthest from campus has a lease longer than that of each of the other houses, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Each faculty house has a two-semester lease.",
      "B) Exactly two houses each have a one-semester lease.",
      "C) Exactly three houses each have a two-semester lease.",
      "D) None of the houses has a one-semester lease.",
      "E) None of the houses has a two-semester lease"
    ],
    "raw_logic_programs": [
      "# Declarations\nhouses = EnumSort([house1, house2, house3, house4])\ndistances = EnumSort([close, closer, closest, far, farther, farthest])\nleases = EnumSort([one, two, three])\nis_student = Function([houses] -> [bool])\nis_faculty = Function([houses] -> [bool])\n\n# Constraints\nForAll([h:houses], Or(is_student(h), is_faculty(h))) ::: each house is either a student house (occupied entirely by students) or a faculty house (occupied entirely by faculty)\nForAll([h:houses], Count([d:distances], d == distance(h)) == 1) ::: no two are exactly the same distance from Arbutus's campus\nForAll([h:houses], Count([l:leases], l == lease(h)) == 1) ::: each house has a lease length of one, two, or three semesters\nForAll([h:houses], Implies(is_student(h), Not(lease(h) == three))) ::: No student house has a three-semester lease\nForAll([h:houses], Implies(is_student(h), distance(h) > distance(house_closest_to_campus))) ::: Every student house (if there are any) is farther from campus than any faculty house (if there are any)\nForAll([h:houses], Implies(is_faculty(h), distance(h) <= distance(house_closest_to_campus))) ::: Every student house (if there are any) is farther from campus than any faculty house (if there are any)\nForAll([h:houses], Implies(distance(h) == distance(house_closest_to_campus), lease(h) <= lease(house_closest_to_campus))) ::: At least two houses each have longer leases than does the house closest to campus\n\n# Options\nQuestion ::: If the house farthest from campus has a lease longer than that of each of the other houses, then which one of the following could be true?\nis_sat(ForAll([h:houses], lease(h) == two)) ::: A) Each faculty house has a two-semester lease.\nis_sat(Count([h:houses], lease(h) == one) == 2) ::: B) Exactly two houses each have a one-semester lease.\nis_sat(Count([h:houses"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_4_19",
    "context": "Arbutus College owns exactly four houses that it leases to faculty or students. Of these houses, no two are exactly the same distance from Arbutus's campus, and each house is either a student house (occupied entirely by students) or a faculty house (occupied entirely by faculty). The lease length for each house is one, two, or three semesters. The following conditions must hold: No student house has a three-semester lease. At least two houses each have longer leases than does the house closest to campus. Every student house (if there are any) is farther from campus than any faculty house (if there are any).",
    "question": "What is the maximum number of houses that could all be student houses with two-semester leases?",
    "answer": "D",
    "options": [
      "A) zero",
      "B) one",
      "C) two",
      "D) three",
      "E) four"
    ],
    "raw_logic_programs": [
      "# Declarations\nhouses = EnumSort([house1, house2, house3, house4])\ndistances = EnumSort([close, medium, far])\nleases = EnumSort([one, two, three])\noccupants = EnumSort([faculty, student])\noccupied = Function([houses] -> [occupants])\ndistance = Function([houses] -> [distances])\nlease = Function([houses] -> [leases])\n\n# Constraints\nForAll([h:houses], Or(distance(h) == close, distance(h) == medium, distance(h) == far)) ::: no two are exactly the same distance from Arbutus's campus\nForAll([h:houses], Or(lease(h) == one, lease(h) == two, lease(h) == three)) ::: the lease length for each house is one, two, or three semesters\nForAll([h:houses], Implies(occupied(h) == student, lease(h)!= three)) ::: No student house has a three-semester lease\nForAll([h:houses], Implies(distance(h) == close, Not(ForAll([h:houses], distance(h) == close)))) ::: the house closest to campus\nForAll([h:houses], Implies(occupied(h) == student, distance(h) > distance(house1))) ::: Every student house (if there are any) is farther from campus than any faculty house (if there are any)\n\n# Options\nQuestion ::: What is the maximum number of houses that could all be student houses with two-semester leases?\nis_valid(Exists([h:houses], occupied(h) == student && lease(h) == two)) ::: A) zero\nis_valid(Exists([h:houses], occupied(h) == student && lease(h) == two)) ::: B) one\nis_valid(Exists([h:houses], occupied(h) == student && lease(h) == two)) ::: C) two\nis_valid(Exists([h:houses], occupied(h) == student && lease(h) == two)) ::: D) three\nis_valid(Exists([h:houses], occupied(h) == student && lease(h) == two)) ::: E) four\n------\nProblem:\nA certain company has exactly six employees: A, B, C, D, E, and F. Each employee is assigned to work in exactly one of the following three departments: sales, accounting, and production. The following conditions apply: A and"
    ]
  },
  {
    "id": "ar_lsat_india5_1-G_4_20",
    "context": "Arbutus College owns exactly four houses that it leases to faculty or students. Of these houses, no two are exactly the same distance from Arbutus's campus, and each house is either a student house (occupied entirely by students) or a faculty house (occupied entirely by faculty). The lease length for each house is one, two, or three semesters. The following conditions must hold: No student house has a three-semester lease. At least two houses each have longer leases than does the house closest to campus. Every student house (if there are any) is farther from campus than any faculty house (if there are any).",
    "question": "Which one of the following must be true of the two houses that are neither the house farthest from campus nor the house closest to campus?",
    "answer": "B",
    "options": [
      "A) At least one of them has a lease the same length as that of the house closest to campus.",
      "B) At least one of them has a lease longer than that of the house closest to campus.",
      "C) At least one of them has a lease shorter than three semesters.",
      "D) Neither of them is a student house.",
      "E) Both of them are student houses"
    ],
    "raw_logic_programs": [
      "# Declarations\nhouses = EnumSort([house1, house2, house3, house4])\noccupants = EnumSort([faculty, student])\nleases = EnumSort([one_semester, two_semesters, three_semesters])\ndistances = EnumSort([close, closer, closest, far, farther, farthest])\noccupied_by = Function([houses] -> [occupants])\nlease_length = Function([houses] -> [leases])\ndistance_from_campus = Function([houses] -> [distances])\n\n# Constraints\nForAll([h:houses], Or(occupied_by(h) == faculty, occupied_by(h) == student)) ::: each house is either a student house (occupied entirely by students) or a faculty house (occupied entirely by faculty)\nForAll([h:houses], Or(lease_length(h) == one_semester, lease_length(h) == two_semesters, lease_length(h) == three_semesters)) ::: The lease length for each house is one, two, or three semesters\nForAll([h:houses], distance_from_campus(h)!= distance_from_campus(houses - h)) ::: no two are exactly the same distance from Arbutus's campus\nForAll([h:houses], Implies(occupied_by(h) == student, lease_length(h)!= three_semesters)) ::: No student house has a three-semester lease\nForAll([h:houses], Implies(distance_from_campus(h) == closest, occupied_by(h) == faculty)) ::: Every student house (if there are any) is farther from campus than any faculty house (if there are any)\n\n# Options\nQuestion ::: Which one of the following must be true of the two houses that are neither the house farthest from campus nor the house closest to campus?\nis_valid(Exists([h:houses], occupied_by(h) == student, lease_length(h) == lease_length(house1))) ::: A) At least one of them has a lease the same length as that of the house closest to campus.\nis_valid(Exists([h:houses], occupied_by(h) == student, lease_length(h) > lease_length(house1))) ::: B) At least one of them has a lease longer than that of the house closest to campus.\nis_valid(Exists([h:houses], occupied_by(h) == student"
    ]
  }
]
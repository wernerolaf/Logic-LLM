[
  {
    "id": "ProofWriter_RelNeg-OWA-D5-136_Q1",
    "context": "The bear does not chase the lion. The bear visits the lion. The bear visits the tiger. The lion chases the bear. The lion chases the tiger. The lion visits the bear. The rabbit chases the tiger. The rabbit is big. The rabbit is not green. The rabbit is young. The rabbit visits the tiger. The tiger chases the rabbit. The tiger is rough. The tiger visits the bear. If something chases the bear and it sees the rabbit then the bear does not visit the rabbit. If something chases the lion then the lion is rough. If the rabbit chases the tiger and the tiger visits the rabbit then the rabbit is not big. If something chases the lion then the lion does not visit the tiger. If something chases the rabbit and it chases the tiger then the rabbit chases the bear. If something is young and it does not see the rabbit then it sees the bear. If something visits the lion then it is young. If the tiger visits the bear and the bear is big then the tiger visits the lion. Young things are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear visits the lion.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChase($x, $y, bool) ::: Does x chase y?\nVisit($x, $y, bool) ::: Does x visit y?\nSee($x, $y, bool) ::: Does x see y?\nBig($x, bool) ::: Is x big?\nYoung($x, bool) ::: Is x young?\nGreen($x, bool) ::: Is x green?\nRough($x, bool) ::: Is x rough?\nFacts:\nChase(Bear, Lion, False) ::: The bear does not chase the lion.\nVisit(Bear, Lion, True) ::: The bear visits the lion.\nVisit(Bear, Tiger, True) ::: The bear visits the tiger.\nChase(Lion, Bear, True) ::: The lion chases the bear.\nChase(Lion, Tiger, True) ::: The lion chases the tiger.\nVisit(Lion, Bear, True) ::: The lion visits the bear.\nChase(Rabbit, Tiger, True) ::: The rabbit chases the tiger.\nBig(Rabbit, True) ::: The rabbit is big.\nGreen(Rabbit, False) ::: The rabbit is not green.\nYoung(Rabbit, True) ::: The rabbit is young.\nVisit(Rabbit, Tiger, True) ::: The rabbit visits the tiger.\nChase(Tiger, Rabbit, True) ::: The tiger chases the rabbit.\nRough(Tiger, True) ::: The tiger is rough.\nVisit(Tiger, Bear, True) ::: The tiger visits the bear.\nRules:\nChase($x, $y, True) && See($x, $y, True) >>> Visit($x, $y, False) ::: If something chases the bear and it sees the rabbit then the bear does not visit the rabbit.\nChase($x, $y, True) >>> Rough($x, True) ::: If something chases the lion then the lion is rough.\nChase($x, $y, True) && Visit($x, $y, True) >>> Big($x, True) ::: If the rabbit chases the tiger and the tiger visits the rabbit then the rabbit is not big.\nChase($x, $y, True) && Visit($x, $y, True) >>> Rough($x, True) ::: If something chases the lion then the lion does not visit the tiger.\nChase($x, $y, True) && Visit($x, $y, True) >>> Rough($x, True) ::: If something chases the rabbit and it chases the tiger then the rabbit chases the bear.\nSee($x, $y, False) && Young($x, True) >>> See($x, $y, True) ::: If something is young and it does not see the rabbit then it sees the bear.\nVisit($x, $y, True) >>> Young($x, True) ::: If something visits the lion then it is young.\nVisit($x, $y, True) && Big($x, True) >>> Visit($x, $y, True) ::: If the tiger visits the bear and the bear is big then the tiger visits the lion.\nYoung($x, True) >>> Big($x, True) ::: Young things are big.\nQuery:\nVisit(Bear, Lion, True) ::: The bear visits the lion.\n------",
      "Predicates:\nChase($x, $y, bool) ::: Does x chase y?\nVisit($x, $y, bool) ::: Does x visit y?\nSee($x, $y, bool) ::: Does x see y?\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\nYoung($x, bool) ::: Is x young?\nRough($x, bool) ::: Is x rough?\nFacts:\nChase(Bear, Lion, False) ::: The bear does not chase the lion.\nVisit(Bear, Lion, True) ::: The bear visits the lion.\nVisit(Bear, Tiger, True) ::: The bear visits the tiger.\nChase(Lion, Bear, True) ::: The lion chases the bear.\nChase(Lion, Tiger, True) ::: The lion chases the tiger.\nVisit(Lion, Bear, True) ::: The lion visits the bear.\nChase(Rabbit, Tiger, True) ::: The rabbit chases the tiger.\nBig(Rabbit, True) ::: The rabbit is big.\nGreen(Rabbit, False) ::: The rabbit is not green.\nYoung(Rabbit, True) ::: The rabbit is young.\nVisit(Rabbit, Tiger, True) ::: The rabbit visits the tiger.\nChase(Tiger, Rabbit, True) ::: The tiger chases the rabbit.\nRough(Tiger, True) ::: The tiger is rough.\nVisit(Tiger, Bear, True) ::: The tiger visits the bear.\nRules:\nChase($x, $y, True) && See($x, $y, True) >>> Visit($x, $y, False) ::: If something chases the bear and it sees the rabbit then the bear does not visit the rabbit.\nChase($x, $y, True) >>> Rough($x, True) ::: If something chases the lion then the lion is rough.\nChase($x, $y, True) && Visit($x, $y, True) >>> Big($x, True) ::: If the rabbit chases the tiger and the tiger visits the rabbit then the rabbit is not big.\nChase($x, $y, True) && Visit($x, $y, True) >>> Rough($x, True) ::: If something chases the lion then the lion does not visit the tiger.\nChase($x, $y, True) && Visit($x, $y, True) >>> Rough($x, True) ::: If something chases the rabbit and it chases the tiger then the rabbit chases the bear.\nSee($x, $y, True) && Young($x, True) >>> See($x, $y, False) ::: If something is young and it does not see the rabbit then it sees the bear.\nVisit($x, $y, True) >>> Young($x, True) ::: If something visits the lion then it is young.\nVisit($x, $y, True) && Big($x, True) >>> Visit($x, $y, True) ::: If the tiger visits the bear and the bear is big then the tiger visits the lion.\nYoung($x, True) >>> Big($x, True) ::: Young things are big.\nQuery:\nVisit(Bear, Lion, True) ::: The bear visits the lion.\n------",
      "Predicates:\nChase($x, $y, bool) ::: Does x chase y?\nVisit($x, $y, bool) ::: Does x visit y?\nSee($x, $y, bool) ::: Does x see y?\nBig($x, bool) ::: Is x big?\nYoung($x, bool) ::: Is x young?\nGreen($x, bool) ::: Is x green?\nRough($x, bool) ::: Is x rough?\nFacts:\nChase(Bear, Lion, False) ::: The bear does not chase the lion.\nVisit(Bear, Lion, True) ::: The bear visits the lion.\nVisit(Bear, Tiger, True) ::: The bear visits the tiger.\nChase(Lion, Bear, True) ::: The lion chases the bear.\nChase(Lion, Tiger, True) ::: The lion chases the tiger.\nVisit(Lion, Bear, True) ::: The lion visits the bear.\nChase(Rabbit, Tiger, True) ::: The rabbit chases the tiger.\nBig(Rabbit, True) ::: The rabbit is big.\nGreen(Rabbit, False) ::: The rabbit is not green.\nYoung(Rabbit, True) ::: The rabbit is young.\nVisit(Rabbit, Tiger, True) ::: The rabbit visits the tiger.\nChase(Tiger, Rabbit, True) ::: The tiger chases the rabbit.\nRough(Tiger, True) ::: The tiger is rough.\nVisit(Tiger, Bear, True) ::: The tiger visits the bear.\nRules:\nChase($x, $y, True) && See($x, $y, True) >>> Visit($x, $y, False) ::: If something chases the bear and it sees the rabbit then the bear does not visit the rabbit.\nChase($x, $y, True) >>> Rough($x, True) ::: If something chases the lion then the lion is rough.\nChase($x, $y, True) && Visit($x, $y, True) >>> Big($x, True) ::: If the rabbit chases the tiger and the tiger visits the rabbit then the rabbit is not big.\nChase($x, $y, True) && Visit($x, $y, True) >>> Rough($x, True) ::: If something chases the lion then the lion does not visit the tiger.\nChase($x, $y, True) && Visit($x, $y, True) >>> Rough($x, True) ::: If something chases the rabbit and it chases the tiger then the rabbit chases the bear.\nSee($x, $y, False) && Young($x, True) >>> See($x, $y, True) ::: If something is young and it does not see the rabbit then it sees the bear.\nVisit($x, $y, True) >>> Young($x, True) ::: If something visits the lion then it is young.\nVisit($x, $y, True) && Big($x, True) && Visit($x, $y, True) >>> Visit($x, $y, True) ::: If the tiger visits the bear and the bear is big then the tiger visits the lion.\nYoung($x, True) >>> Big($x, True) ::: Young things are big.\nQuery:\nVisit(Bear, Lion, True)",
      "Predicates:\nChase($x, $y, bool) ::: Does x chase y?\nVisit($x, $y, bool) ::: Does x visit y?\nSee($x, $y, bool) ::: Does x see y?\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\nYoung($x, bool) ::: Is x young?\nRough($x, bool) ::: Is x rough?\nFacts:\nChase(Bear, Lion, False) ::: The bear does not chase the lion.\nVisit(Bear, Lion, True) ::: The bear visits the lion.\nVisit(Bear, Tiger, True) ::: The bear visits the tiger.\nChase(Lion, Bear, True) ::: The lion chases the bear.\nChase(Lion, Tiger, True) ::: The lion chases the tiger.\nVisit(Lion, Bear, True) ::: The lion visits the bear.\nChase(Rabbit, Tiger, True) ::: The rabbit chases the tiger.\nBig(Rabbit, True) ::: The rabbit is big.\nGreen(Rabbit, False) ::: The rabbit is not green.\nYoung(Rabbit, True) ::: The rabbit is young.\nVisit(Rabbit, Tiger, True) ::: The rabbit visits the tiger.\nChase(Tiger, Rabbit, True) ::: The tiger chases the rabbit.\nRough(Tiger, True) ::: The tiger is rough.\nVisit(Tiger, Bear, True) ::: The tiger visits the bear.\nRules:\nChase($x, $y, True) && See($x, $y, True) >>> Visit($x, $y, False) ::: If something chases the bear and it sees the rabbit then the bear does not visit the rabbit.\nChase($x, $y, True) >>> Rough($x, True) ::: If something chases the lion then the lion is rough.\nChase($x, $y, True) && Visit($x, $y, True) >>> Big($x, True) ::: If the rabbit chases the tiger and the tiger visits the rabbit then the rabbit is not big.\nChase($x, $y, True) && Visit($x, $y, True) >>> Rough($x, True) ::: If something chases the lion then the lion does not visit the tiger.\nChase($x, $y, True) && Visit($x, $y, True) >>> Rough($x, True) ::: If something chases the rabbit and it chases the tiger then the rabbit chases the bear.\nSee($x, $y, True) && Young($x, True) >>> See($x, $y, False) ::: If something is young and it does not see the rabbit then it sees the bear.\nVisit($x, $y, True) >>> Young($x, True) ::: If something visits the lion then it is young.\nVisit($x, $y, True) && Big($x, True) && Visit($x, $y, True) >>> Visit($x, $y, True) ::: If the tiger visits the bear and the bear is big then the tiger visits the lion.\nYoung($x, True) >>> Big($x, True) ::: Young things are big.\nQuery:\nVisit(Bear, Lion, True)",
      "Predicates:\nChase($x, $y, bool) ::: Does x chase y?\nVisit($x, $y, bool) ::: Does x visit y?\nSee($x, $y, bool) ::: Does x see y?\nBig($x, bool) ::: Is x big?\nYoung($x, bool) ::: Is x young?\nGreen($x, bool) ::: Is x green?\nRough($x, bool) ::: Is x rough?\nFacts:\nChase(Bear, Lion, False) ::: The bear does not chase the lion.\nVisit(Bear, Lion, True) ::: The bear visits the lion.\nVisit(Bear, Tiger, True) ::: The bear visits the tiger.\nChase(Lion, Bear, True) ::: The lion chases the bear.\nChase(Lion, Tiger, True) ::: The lion chases the tiger.\nVisit(Lion, Bear, True) ::: The lion visits the bear.\nChase(Rabbit, Tiger, True) ::: The rabbit chases the tiger.\nBig(Rabbit, True) ::: The rabbit is big.\nGreen(Rabbit, False) ::: The rabbit is not green.\nYoung(Rabbit, True) ::: The rabbit is young.\nVisit(Rabbit, Tiger, True) ::: The rabbit visits the tiger.\nChase(Tiger, Rabbit, True) ::: The tiger chases the rabbit.\nRough(Tiger, True) ::: The tiger is rough.\nVisit(Tiger, Bear, True) ::: The tiger visits the bear.\nRules:\nChase($x, $y, True) && See($x, $y, True) >>> Visit($x, $y, False) ::: If something chases the bear and it sees the rabbit then the bear does not visit the rabbit.\nChase($x, $y, True) >>> Rough($x, True) ::: If something chases the lion then the lion is rough.\nChase($x, $y, True) && Visit($x, $y, True) >>> Big($x, True) ::: If the rabbit chases the tiger and the tiger visits the rabbit then the rabbit is not big.\nChase($x, $y, True) && Visit($x, $y, True) >>> Rough($x, True) ::: If something chases the lion then the lion does not visit the tiger.\nChase($x, $y, True) && Visit($x, $y, True) >>> Rough($x, True) ::: If something chases the rabbit and it chases the tiger then the rabbit chases the bear.\nSee($x, $y, True) && Young($x, True) >>> See($x, $y, False) ::: If something is young and it does not see the rabbit then it sees the bear.\nVisit($x, $y, True) >>> Young($x, True) ::: If something visits the lion then it is young.\nVisit($x, $y, True) && Big($x, True) && Visit($x, $y, True) >>> Visit($x, $y, True) ::: If the tiger visits the bear and the bear is big then the tiger visits the lion.\nYoung($x, True) >>> Big($x, True) ::: Young things are big.\nQuery:\nVisit(Bear, Lion, True)"
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-99_Q17",
    "context": "The bald eagle is cold. The bald eagle sees the bear. The bear is big. The bear is not cold. The bear is green. The bear likes the cat. The cat chases the mouse. The cat is big. The cat is young. The cat likes the bald eagle. The mouse likes the cat. If something chases the cat and it likes the bald eagle then the bald eagle is not green. If something sees the cat then it does not chase the mouse. If something is cold then it sees the cat. If something likes the cat and it chases the bald eagle then it is not young. If something likes the bald eagle and the bald eagle does not chase the mouse then the mouse is big. If the cat chases the bear then the cat likes the mouse. If something chases the mouse and it is not green then it chases the bear. If the mouse is big then the mouse chases the bald eagle. If something is young and it likes the mouse then it chases the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle does not chase the bear.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold($x, bool) ::: Is x cold?\nSees($x, $y, bool) ::: Does x see y?\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\nLikes($x, $y, bool) ::: Does x like y?\nChases($x, $y, bool) ::: Does x chase y?\nYoung($x, bool) ::: Is x young?\nFacts:\nCold(BaldEagle, True) ::: The bald eagle is cold.\nSees(BaldEagle, Bear, True) ::: The bald eagle sees the bear.\nBig(Bear, True) ::: The bear is big.\nCold(Bear, False) ::: The bear is not cold.\nGreen(Bear, True) ::: The bear is green.\nLikes(Bear, Cat, True) ::: The bear likes the cat.\nChases(Cat, Mouse, True) ::: The cat chases the mouse.\nBig(Cat, True) ::: The cat is big.\nYoung(Cat, True) ::: The cat is young.\nLikes(Cat, BaldEagle, True) ::: The cat likes the bald eagle.\nLikes(Mouse, Cat, True) ::: The mouse likes the cat.\nRules:\nChases($x, Cat, True) && Likes($x, BaldEagle, True) >>> Green($x, False) ::: If something chases the cat and it likes the bald eagle then the bald eagle is not green.\nSees($x, Cat, True) >>> Chases($x, Mouse, False) ::: If something sees the cat then it does not chase the mouse.\nCold($x, True) >>> Sees($x, Cat, True) ::: If something is cold then it sees the cat.\nLikes($x, Cat, True) && Chases($x, BaldEagle, True) >>> Young($x, False) ::: If something likes the cat and it chases the bald eagle then it is not young.\nLikes($x, BaldEagle, True) && Chases($x, Mouse, False) >>> Big($x, True) ::: If something likes the bald eagle and the bald eagle does not chase the mouse then the mouse is big.\nChases($x, Bear, True) >>> Likes($x, Mouse, True) ::: If the cat chases the bear then the cat likes the mouse.\nChases($x, Mouse, True) && Green($x, False) >>> Chases($x, Bear, True) ::: If something chases the mouse and it is not green then it chases the bear.\nBig($x, True) >>> Chases($x, BaldEagle, True) ::: If the mouse is big then the mouse chases the bald eagle.\nYoung($x, True) && Likes($x, Mouse, True) >>> Chases($x, BaldEagle, True) ::: If something is young and it likes the mouse then it chases the bald eagle.\nQuery:\nChases(BaldEagle, Bear, False) ::: The bald eagle does not chase the bear.\n------\nProblem:\nThe bald eagle is cold. The bald eagle sees the bear. The bear is big. The bear is not cold. The bear is green. The bear likes the cat. The cat chases the mouse. The cat is big. The cat is young. The cat likes the bald eagle. The mouse likes the cat. If something chases the cat and",
      "Predicates:\nCold($x, bool) ::: Is x cold?\nSees($x, $y, bool) ::: Does x see y?\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\nLikes($x, $y, bool) ::: Does x like y?\nChases($x, $y, bool) ::: Does x chase y?\nYoung($x, bool) ::: Is x young?\nFacts:\nCold(BaldEagle, True) ::: The bald eagle is cold.\nSees(BaldEagle, Bear, True) ::: The bald eagle sees the bear.\nBig(Bear, True) ::: The bear is big.\nCold(Bear, False) ::: The bear is not cold.\nGreen(Bear, True) ::: The bear is green.\nLikes(Bear, Cat, True) ::: The bear likes the cat.\nChases(Cat, Mouse, True) ::: The cat chases the mouse.\nBig(Cat, True) ::: The cat is big.\nYoung(Cat, True) ::: The cat is young.\nLikes(Cat, BaldEagle, True) ::: The cat likes the bald eagle.\nLikes(Mouse, Cat, True) ::: The mouse likes the cat.\nRules:\nChases($x, Cat, True) && Likes($x, BaldEagle, True) >>> Green($x, False) ::: If something chases the cat and it likes the bald eagle then the bald eagle is not green.\nSees($x, Cat, True) >>> Chases($x, Mouse, False) ::: If something sees the cat then it does not chase the mouse.\nCold($x, True) >>> Sees($x, Cat, True) ::: If something is cold then it sees the cat.\nLikes($x, Cat, True) && Chases($x, BaldEagle, True) >>> Young($x, False) ::: If something likes the cat and it chases the bald eagle then it is not young.\nLikes($x, BaldEagle, True) && Chases($x, Mouse, False) >>> Big($x, True) ::: If something likes the bald eagle and the bald eagle does not chase the mouse then the mouse is big.\nChases($x, Bear, True) >>> Likes($x, Mouse, True) ::: If the cat chases the bear then the cat likes the mouse.\nChases($x, Mouse, True) && Green($x, False) >>> Chases($x, Bear, True) ::: If something chases the mouse and it is not green then it chases the bear.\nBig($x, True) >>> Chases($x, Bear, True) ::: If the mouse is big then the mouse chases the bald eagle.\nYoung($x, True) && Likes($x, Mouse, True) >>> Chases($x, BaldEagle, True) ::: If something is young and it likes the mouse then it chases the bald eagle.\nQuery:\nChases(BaldEagle, Bear, False) ::: The bald eagle does not chase the bear.\n------\nProblem:\nThe bald eagle is cold. The bald eagle sees the bear. The bear is big. The bear is not cold. The bear is green. The bear likes the cat. The cat chases the mouse. The cat is big. The cat is young. The cat likes the bald eagle. The mouse likes the cat. If something chases the cat and it likes",
      "Predicates:\nCold($x, bool) ::: Is x cold?\nSees($x, $y, bool) ::: Does x see y?\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\nLikes($x, $y, bool) ::: Does x like y?\nChases($x, $y, bool) ::: Does x chase y?\nYoung($x, bool) ::: Is x young?\nFacts:\nCold(BaldEagle, True) ::: The bald eagle is cold.\nSees(BaldEagle, Bear, True) ::: The bald eagle sees the bear.\nBig(Bear, True) ::: The bear is big.\nCold(Bear, False) ::: The bear is not cold.\nGreen(Bear, True) ::: The bear is green.\nLikes(Bear, Cat, True) ::: The bear likes the cat.\nChases(Cat, Mouse, True) ::: The cat chases the mouse.\nBig(Cat, True) ::: The cat is big.\nYoung(Cat, True) ::: The cat is young.\nLikes(Cat, BaldEagle, True) ::: The cat likes the bald eagle.\nLikes(Mouse, Cat, True) ::: The mouse likes the cat.\nRules:\nChases($x, Cat, True) && Likes($x, BaldEagle, True) >>> Green($x, False) ::: If something chases the cat and it likes the bald eagle then the bald eagle is not green.\nSees($x, Cat, True) >>> Chases($x, Mouse, False) ::: If something sees the cat then it does not chase the mouse.\nCold($x, True) >>> Sees($x, Cat, True) ::: If something is cold then it sees the cat.\nLikes($x, Cat, True) && Chases($x, BaldEagle, True) >>> Young($x, False) ::: If something likes the cat and it chases the bald eagle then it is not young.\nLikes($x, BaldEagle, True) && Chases($x, Mouse, False) >>> Big($x, True) ::: If something likes the bald eagle and the bald eagle does not chase the mouse then the mouse is big.\nChases(Cat, Bear, True) >>> Likes($x, Mouse, True) ::: If the cat chases the bear then the cat likes the mouse.\nChases($x, Mouse, True) && Green($x, False) >>> Chases($x, Bear, True) ::: If something chases the mouse and it is not green then it chases the bear.\nBig(Mouse, True) >>> Chases(Mouse, BaldEagle, True) ::: If the mouse is big then the mouse chases the bald eagle.\nYoung($x, True) && Likes($x, Mouse, True) >>> Chases($x, BaldEagle, True) ::: If something is young and it likes the mouse then it chases the bald eagle.\nQuery:\nChases(BaldEagle, Bear, False) ::: The bald eagle does not chase the bear.\n------\nProblem:\nThe bald eagle is cold. The bald eagle sees the bear. The bear is big. The bear is not cold. The bear is green. The bear likes the cat. The cat chases the mouse. The cat is big. The cat is young. The cat likes the bald eagle. The mouse likes the cat. If something chases the cat and",
      "Predicates:\nCold($x, bool) ::: Is x cold?\nSees($x, $y, bool) ::: Does x see y?\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\nLikes($x, $y, bool) ::: Does x like y?\nChases($x, $y, bool) ::: Does x chase y?\nYoung($x, bool) ::: Is x young?\nFacts:\nCold(BaldEagle, True) ::: The bald eagle is cold.\nSees(BaldEagle, Bear, True) ::: The bald eagle sees the bear.\nBig(Bear, True) ::: The bear is big.\nCold(Bear, False) ::: The bear is not cold.\nGreen(Bear, True) ::: The bear is green.\nLikes(Bear, Cat, True) ::: The bear likes the cat.\nChases(Cat, Mouse, True) ::: The cat chases the mouse.\nBig(Cat, True) ::: The cat is big.\nYoung(Cat, True) ::: The cat is young.\nLikes(Cat, BaldEagle, True) ::: The cat likes the bald eagle.\nLikes(Mouse, Cat, True) ::: The mouse likes the cat.\nRules:\nCold($x, True) >>> Sees($x, Cat, True) ::: If something chases the cat and it likes the bald eagle then the bald eagle is not green.\nSees($x, Cat, True) >>> Chases($x, Mouse, False) ::: If something sees the cat then it does not chase the mouse.\nCold($x, True) >>> Sees($x, Cat, True) ::: If something is cold then it sees the cat.\nLikes($x, Cat, True) && Chases($x, BaldEagle, True) >>> Young($x, False) ::: If something likes the cat and it chases the bald eagle then it is not young.\nLikes($x, BaldEagle, True) && Chases($x, Mouse, False) >>> Big($x, True) ::: If something likes the bald eagle and the bald eagle does not chase the mouse then the mouse is big.\nChases($x, Bear, True) >>> Likes($x, Mouse, True) ::: If the cat chases the bear then the cat likes the mouse.\nChases($x, Mouse, True) && Green($x, False) >>> Chases($x, Bear, True) ::: If something chases the mouse and it is not green then it chases the bear.\nBig($x, True) >>> Chases($x, BaldEagle, True) ::: If the mouse is big then the mouse chases the bald eagle.\nYoung($x, True) && Likes($x, Mouse, True) >>> Chases($x, BaldEagle, True) ::: If something is young and it likes the mouse then it chases the bald eagle.\nQuery:\nChases(BaldEagle, Bear, False) ::: The bald eagle does not chase the bear.\n------\nProblem:\nThe bald eagle is cold. The bald eagle sees the bear. The bear is big. The bear is not cold. The bear is green. The bear likes the cat. The cat chases the mouse. The cat is big. The cat is young. The cat likes the bald eagle. The mouse likes the cat. If something chases the cat and it likes the bald eagle then the bald eagle",
      "Predicates:\nCold($x, bool) ::: Is x cold?\nSees($x, $y, bool) ::: Does x see y?\nBig($x, bool) ::: Is x big?\nGreen($x, bool) ::: Is x green?\nLikes($x, $y, bool) ::: Does x like y?\nChases($x, $y, bool) ::: Does x chase y?\nYoung($x, bool) ::: Is x young?\nFacts:\nCold(BaldEagle, True) ::: The bald eagle is cold.\nSees(BaldEagle, Bear, True) ::: The bald eagle sees the bear.\nBig(Bear, True) ::: The bear is big.\nCold(Bear, False) ::: The bear is not cold.\nGreen(Bear, True) ::: The bear is green.\nLikes(Bear, Cat, True) ::: The bear likes the cat.\nChases(Cat, Mouse, True) ::: The cat chases the mouse.\nBig(Cat, True) ::: The cat is big.\nYoung(Cat, True) ::: The cat is young.\nLikes(Cat, BaldEagle, True) ::: The cat likes the bald eagle.\nLikes(Mouse, Cat, True) ::: The mouse likes the cat.\nRules:\nChases($x, Cat, True) && Likes($x, BaldEagle, True) >>> Green($x, False) ::: If something chases the cat and it likes the bald eagle then the bald eagle is not green.\nSees($x, Cat, True) >>> Chases($x, Mouse, False) ::: If something sees the cat then it does not chase the mouse.\nCold($x, True) >>> Sees($x, Cat, True) ::: If something is cold then it sees the cat.\nLikes($x, Cat, True) && Chases($x, BaldEagle, True) >>> Young($x, False) ::: If something likes the cat and it chases the bald eagle then it is not young.\nLikes($x, BaldEagle, True) && Chases($x, Mouse, False) >>> Big($x, True) ::: If something likes the bald eagle and the bald eagle does not chase the mouse then the mouse is big.\nChases(Cat, Bear, True) >>> Likes($x, Mouse, True) ::: If the cat chases the bear then the cat likes the mouse.\nChases($x, Mouse, True) && Green($x, False) >>> Chases($x, Bear, True) ::: If something chases the mouse and it is not green then it chases the bear.\nBig(Mouse, True) >>> Chases($x, BaldEagle, True) ::: If the mouse is big then the mouse chases the bald eagle.\nYoung($x, True) && Likes($x, Mouse, True) >>> Chases($x, BaldEagle, True) ::: If something is young and it likes the mouse then it chases the bald eagle.\nQuery:\nChases(BaldEagle, Bear, False) ::: The bald eagle does not chase the bear.\n------\nProblem:\nThe bald eagle is cold. The bald eagle sees the bear. The bear is big. The bear is not cold. The bear is green. The bear likes the cat. The cat chases the mouse. The cat is big. The cat is young. The cat likes the bald eagle. The mouse likes the cat. If something chases the cat and"
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-295_Q20",
    "context": "The bald eagle needs the lion. The bald eagle needs the mouse. The bear likes the bald eagle. The bear needs the lion. The bear sees the bald eagle. The lion is blue. The mouse sees the bear. If something sees the lion then it likes the bald eagle. If something likes the bear then it likes the bald eagle. If something needs the bear and the bear is blue then the bear is round. If something likes the mouse then the mouse sees the bear. If something likes the mouse and the mouse is nice then it likes the bear. If something needs the lion and it likes the bald eagle then it likes the mouse. If something likes the bear and it likes the mouse then the mouse needs the bear. If something needs the bear then it likes the bear. If something likes the bald eagle then it needs the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle sees the bear.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nLikes($x, $y, bool) ::: Does x like y?\nSees($x, $y, bool) ::: Does x see y?\nFacts:\nNeeds(BaldEagle, Lion, True) ::: The bald eagle needs the lion.\nNeeds(BaldEagle, Mouse, True) ::: The bald eagle needs the mouse.\nLikes(Bear, BaldEagle, True) ::: The bear likes the bald eagle.\nNeeds(Bear, Lion, True) ::: The bear needs the lion.\nSees(Bear, BaldEagle, True) ::: The bear sees the bald eagle.\nBlue(Lion, True) ::: The lion is blue.\nSees(Mouse, Bear, True) ::: The mouse sees the bear.\nRules:\nSees($x, Lion, True) >>> Likes($x, BaldEagle, True) ::: If something sees the lion then it likes the bald eagle.\nLikes($x, Bear, True) >>> Likes($x, BaldEagle, True) ::: If something likes the bear then it likes the bald eagle.\nNeeds($x, Bear, True) && Blue($x, True) >>> Round($x, True) ::: If something needs the bear and the bear is blue then the bear is round.\nLikes($x, Mouse, True) >>> Sees($x, Bear, True) ::: If something likes the mouse then the mouse sees the bear.\nLikes($x, Mouse, True) && Nice($x, True) >>> Likes($x, Bear, True) ::: If something likes the mouse and the mouse is nice then it likes the bear.\nNeeds($x, Lion, True) && Likes($x, BaldEagle, True) >>> Likes($x, Mouse, True) ::: If something needs the lion and it likes the bald eagle then it likes the mouse.\nLikes($x, Bear, True) && Likes($x, Mouse, True) >>> Needs($x, Bear, True) ::: If something likes the bear and it likes the mouse then the mouse needs the bear.\nNeeds($x, Bear, True) >>> Likes($x, Bear, True) ::: If something needs the bear then it likes the bear.\nLikes($x, BaldEagle, True) >>> Needs($x, Bear, True) ::: If something likes the bald eagle then it needs the bear.\nQuery:\nSees(BaldEagle, Bear, True) ::: The bald eagle sees the bear.\n------\nProblem:\nThe bald eagle needs the lion. The bald eagle needs the mouse. The bear likes the bald eagle. The bear needs the lion. The bear sees the bald eagle. The lion is blue. The mouse sees the bear. If something sees the lion then it likes the bald eagle. If something likes the bear then it likes the bald eagle. If something needs the bear and the bear is blue then the bear is round. If something likes the mouse then the mouse sees the bear. If something likes the mouse and the mouse is nice then it likes the bear. If something needs the lion and it likes the bald eagle then it likes the mouse. If something likes the bear and it likes the mouse then the mouse needs the bear. If something needs the bear then it likes the bear. If something likes the bald eagle then it needs the bear.\nQuestion:\nBased on the above information, is the following statement true, false, or unknown? The bald eagle sees the bear.\n###",
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nLikes($x, $y, bool) ::: Does x like y?\nSees($x, $y, bool) ::: Does x see y?\nFacts:\nNeeds(BaldEagle, Lion, True) ::: The bald eagle needs the lion.\nNeeds(BaldEagle, Mouse, True) ::: The bald eagle needs the mouse.\nLikes(Bear, BaldEagle, True) ::: The bear likes the bald eagle.\nNeeds(Bear, Lion, True) ::: The bear needs the lion.\nSees(Bear, BaldEagle, True) ::: The bear sees the bald eagle.\nBlue(Lion, True) ::: The lion is blue.\nSees(Mouse, Bear, True) ::: The mouse sees the bear.\nRules:\nSees($x, Lion, True) >>> Likes($x, BaldEagle, True) ::: If something sees the lion then it likes the bald eagle.\nLikes($x, Bear, True) >>> Likes($x, BaldEagle, True) ::: If something likes the bear then it likes the bald eagle.\nNeeds($x, Bear, True) && Blue($x, True) >>> Round($x, True) ::: If something needs the bear and the bear is blue then the bear is round.\nLikes($x, Mouse, True) >>> Sees($x, Bear, True) ::: If something likes the mouse then the mouse sees the bear.\nLikes($x, Mouse, True) && Nice($x, True) >>> Likes($x, Bear, True) ::: If something likes the mouse and the mouse is nice then it likes the bear.\nNeeds($x, Lion, True) && Likes($x, BaldEagle, True) >>> Likes($x, Mouse, True) ::: If something needs the lion and it likes the bald eagle then it likes the mouse.\nLikes($x, Bear, True) && Likes($x, Mouse, True) >>> Needs($x, Bear, True) ::: If something likes the bear and it likes the mouse then the mouse needs the bear.\nLikes($x, Bear, True) >>> Needs($x, Bear, True) ::: If something likes the bear then it needs the bear.\nLikes($x, BaldEagle, True) >>> Needs($x, Bear, True) ::: If something likes the bald eagle then it needs the bear.\nQuery:\nSees(BaldEagle, Bear, True) ::: The bald eagle sees the bear.\n------\nProblem:\nThe bald eagle needs the lion. The bald eagle needs the mouse. The bear likes the bald eagle. The bear needs the lion. The bear sees the bald eagle. The lion is blue. The mouse sees the bear. If something sees the lion then it likes the bald eagle. If something likes the bear then it likes the bald eagle. If something needs the bear and the bear is blue then the bear is round. If something likes the mouse then the mouse sees the bear. If something likes the mouse and the mouse is nice then it likes the bear. If something needs the lion and it likes the bald eagle then it likes the mouse. If something likes the bear and it likes the mouse then the mouse needs the bear. If something needs the bear then it likes the bear. If something likes the bald eagle then it needs the bear.\nQuestion:\nBased on the above information, is the following statement true, false, or unknown? The bald eagle sees the bear.\n###",
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nLikes($x, $y, bool) ::: Does x like y?\nSees($x, $y, bool) ::: Does x see y?\nIsBlue($x, bool) ::: Is x blue?\nIsRound($x, bool) ::: Is x round?\nIsNice($x, bool) ::: Is x nice?\nFacts:\nNeeds(BaldEagle, Lion, True) ::: The bald eagle needs the lion.\nNeeds(BaldEagle, Mouse, True) ::: The bald eagle needs the mouse.\nLikes(Bear, BaldEagle, True) ::: The bear likes the bald eagle.\nNeeds(Bear, Lion, True) ::: The bear needs the lion.\nSees(Bear, BaldEagle, True) ::: The bear sees the bald eagle.\nIsBlue(Lion, True) ::: The lion is blue.\nSees(Mouse, Bear, True) ::: The mouse sees the bear.\nRules:\nSees($x, Lion, True) >>> Likes($x, BaldEagle, True) ::: If something sees the lion then it likes the bald eagle.\nLikes($x, Bear, True) >>> Likes($x, BaldEagle, True) ::: If something likes the bear then it likes the bald eagle.\nNeeds($x, Bear, True) && IsBlue($x, True) >>> IsRound($x, True) ::: If something needs the bear and the bear is blue then the bear is round.\nLikes($x, Mouse, True) >>> Sees($x, Bear, True) ::: If something likes the mouse then the mouse sees the bear.\nLikes($x, Mouse, True) && IsNice($x, True) >>> Likes($x, Bear, True) ::: If something likes the mouse and the mouse is nice then it likes the bear.\nNeeds($x, Lion, True) && Likes($x, BaldEagle, True) >>> Likes($x, Mouse, True) ::: If something needs the lion and it likes the bald eagle then it likes the mouse.\nLikes($x, Bear, True) && Likes($x, Mouse, True) >>> Needs($x, Bear, True) ::: If something likes the bear and it likes the mouse then the mouse needs the bear.\nLikes($x, Bear, True) >>> Needs($x, Bear, True) ::: If something likes the bear then it needs the bear.\nLikes($x, BaldEagle, True) >>> Needs($x, Bear, True) ::: If something likes the bald eagle then it needs the bear.\nQuery:\nSees(BaldEagle, Bear, True) ::: The bald eagle sees the bear.\n------\nProblem:\nThe bald eagle needs the lion. The bald eagle needs the mouse. The bear likes the bald eagle. The bear needs the lion. The bear sees the bald eagle. The lion is blue. The mouse sees the bear. If something sees the lion then it likes the bald eagle. If something likes the bear then it likes the bald eagle. If something needs the bear and the bear is blue then the bear is round. If something likes the mouse then the mouse sees the bear. If something likes the mouse and the mouse is nice then it likes the bear. If something needs the lion and it likes the bald eagle then it likes the mouse. If something likes the bear and it likes the mouse then the mouse needs the bear. If something needs the bear then it",
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nLikes($x, $y, bool) ::: Does x like y?\nSees($x, $y, bool) ::: Does x see y?\nIsBlue($x, bool) ::: Is x blue?\nIsRound($x, bool) ::: Is x round?\nIsNice($x, bool) ::: Is x nice?\nFacts:\nNeeds(BaldEagle, Lion, True) ::: The bald eagle needs the lion.\nNeeds(BaldEagle, Mouse, True) ::: The bald eagle needs the mouse.\nLikes(Bear, BaldEagle, True) ::: The bear likes the bald eagle.\nNeeds(Bear, Lion, True) ::: The bear needs the lion.\nSees(Bear, BaldEagle, True) ::: The bear sees the bald eagle.\nIsBlue(Lion, True) ::: The lion is blue.\nSees(Mouse, Bear, True) ::: The mouse sees the bear.\nRules:\nSees($x, Lion, True) >>> Likes($x, BaldEagle, True) ::: If something sees the lion then it likes the bald eagle.\nLikes($x, Bear, True) >>> Likes($x, BaldEagle, True) ::: If something likes the bear then it likes the bald eagle.\nNeeds($x, Bear, True) && IsBlue($x, True) >>> IsRound($x, True) ::: If something needs the bear and the bear is blue then the bear is round.\nLikes($x, Mouse, True) >>> Sees($x, Bear, True) ::: If something likes the mouse then the mouse sees the bear.\nLikes($x, Mouse, True) && IsNice($x, True) >>> Likes($x, Bear, True) ::: If something likes the mouse and the mouse is nice then it likes the bear.\nNeeds($x, Lion, True) && Likes($x, BaldEagle, True) >>> Likes($x, Mouse, True) ::: If something needs the lion and it likes the bald eagle then it likes the mouse.\nLikes($x, Bear, True) && Likes($x, Mouse, True) >>> Needs($x, Bear, True) ::: If something likes the bear and it likes the mouse then the mouse needs the bear.\nNeeds($x, Bear, True) >>> Likes($x, Bear, True) ::: If something needs the bear then it likes the bear.\nLikes($x, BaldEagle, True) >>> Needs($x, Bear, True) ::: If something likes the bald eagle then it needs the bear.\nQuery:\nSees(BaldEagle, Bear, True) ::: The bald eagle sees the bear.\n------\nProblem:\nThe bald eagle needs the lion. The bald eagle needs the mouse. The bear likes the bald eagle. The bear needs the lion. The bear sees the bald eagle. The lion is blue. The mouse sees the bear. If something sees the lion then it likes the bald eagle. If something likes the bear then it likes the bald eagle. If something needs the bear and the bear is blue then the bear is round. If something likes the mouse then the mouse sees the bear. If something likes the mouse and the mouse is nice then it likes the bear. If something needs the lion and it likes the bald eagle then it likes the mouse. If something likes the bear and it likes the mouse then the mouse needs the bear. If something needs the bear then it",
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nLikes($x, $y, bool) ::: Does x like y?\nSees($x, $y, bool) ::: Does x see y?\nIsBlue($x, bool) ::: Is x blue?\nIsRound($x, bool) ::: Is x round?\nIsNice($x, bool) ::: Is x nice?\nFacts:\nNeeds(BaldEagle, Lion, True) ::: The bald eagle needs the lion.\nNeeds(BaldEagle, Mouse, True) ::: The bald eagle needs the mouse.\nLikes(Bear, BaldEagle, True) ::: The bear likes the bald eagle.\nNeeds(Bear, Lion, True) ::: The bear needs the lion.\nSees(Bear, BaldEagle, True) ::: The bear sees the bald eagle.\nIsBlue(Lion, True) ::: The lion is blue.\nSees(Mouse, Bear, True) ::: The mouse sees the bear.\nRules:\nSees($x, Lion, True) >>> Likes($x, BaldEagle, True) ::: If something sees the lion then it likes the bald eagle.\nLikes($x, Bear, True) >>> Likes($x, BaldEagle, True) ::: If something likes the bear then it likes the bald eagle.\nNeeds($x, Bear, True) && IsBlue($x, True) >>> IsRound($x, True) ::: If something needs the bear and the bear is blue then the bear is round.\nLikes($x, Mouse, True) >>> Sees($x, Bear, True) ::: If something likes the mouse then the mouse sees the bear.\nLikes($x, Mouse, True) && IsNice($x, True) >>> Likes($x, Bear, True) ::: If something likes the mouse and the mouse is nice then it likes the bear.\nNeeds($x, Lion, True) && Likes($x, BaldEagle, True) >>> Likes($x, Mouse, True) ::: If something needs the lion and it likes the bald eagle then it likes the mouse.\nLikes($x, Bear, True) && Likes($x, Mouse, True) >>> Needs($x, Bear, True) ::: If something likes the bear and it likes the mouse then the mouse needs the bear.\nNeeds($x, Bear, True) >>> Likes($x, Bear, True) ::: If something likes the bear then it needs the bear.\nLikes($x, BaldEagle, True) >>> Needs($x, Bear, True) ::: If something likes the bald eagle then it needs the bear.\nQuery:\nSees(BaldEagle, Bear, True) ::: The bald eagle sees the bear.\n------\nProblem:\nThe bald eagle needs the lion. The bald eagle needs the mouse. The bear likes the bald eagle. The bear needs the lion. The bear sees the bald eagle. The lion is blue. The mouse sees the bear. If something sees the lion then it likes the bald eagle. If something likes the bear then it likes the bald eagle. If something needs the bear and the bear is blue then the bear is round. If something likes the mouse then the mouse sees the bear. If something likes the mouse and the mouse is nice then it likes the bear. If something needs the lion and it likes the bald eagle then it likes the mouse. If something likes the bear and it likes the mouse then the mouse needs the bear. If something needs the bear then it"
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1040_Q9",
    "context": "Bob is cold. Bob is not nice. Bob is not quiet. Charlie is blue. Charlie is round. Gary is rough. Harry is cold. Rough things are blue. Red, quiet things are blue. All rough, blue things are nice. If something is quiet and round then it is not nice. If Harry is red then Harry is rough. If something is nice then it is round. If something is round then it is red. Red things are not quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is red.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\nFacts:\nCold(Bob, True) ::: Bob is cold.\nNice(Bob, False) ::: Bob is not nice.\nQuiet(Bob, False) ::: Bob is not quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nRound(Charlie, True) ::: Charlie is round.\nRough(Gary, True) ::: Gary is rough.\nCold(Harry, True) ::: Harry is cold.\nRules:\nRough($x, True) >>> Blue($x, True) ::: Rough things are blue.\nRed($x, True) && Quiet($x, True) >>> Blue($x, True) ::: Red, quiet things are blue.\nRough($x, True) && Blue($x, True) >>> Nice($x, True) ::: All rough, blue things are nice.\nQuiet($x, True) && Round($x, True) >>> Nice($x, False) ::: If something is quiet and round then it is not nice.\nRed($x, True) >>> Rough($x, True) ::: If Harry is red then Harry is rough.\nNice($x, True) >>> Round($x, True) ::: If something is nice then it is round.\nRound($x, True) >>> Red($x, True) ::: If something is round then it is red.\nRed($x, True) >>> Quiet($x, False) ::: Red things are not quiet.\nQuery:\nRed(Gary, True) ::: Gary is red.\n------\nProblem:\nBob is cold. Bob is not nice. Bob is not quiet. Charlie is blue. Charlie is round. Gary is rough. Harry is cold. Rough things are blue. Red, quiet things are blue. All rough, blue things are nice. If something is quiet and round then it is not nice. If Harry is red then Harry is rough. If something is nice then it is round. If something is round then it is red. Red things are not quiet.\nQuestion:\nBased on the above information, is the following statement true, false, or unknown? Gary is red.\n###\nPredicates:\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\nFacts:\nCold(Bob, True) ::: Bob is cold.\nNice(Bob, False) ::: Bob is not nice.\nQuiet(Bob, False) ::: Bob is not quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nRound(Charlie, True) ::: Charlie is round.\nRough(Gary, True) ::: Gary is rough.\nCold(Harry, True) ::: Harry is cold.\nRules:\nRough($x, True) >>> Blue($x, True) ::: Rough things are",
      "Predicates:\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\nFacts:\nCold(Bob, True) ::: Bob is cold.\nNice(Bob, False) ::: Bob is not nice.\nQuiet(Bob, False) ::: Bob is not quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nRound(Charlie, True) ::: Charlie is round.\nRough(Gary, True) ::: Gary is rough.\nCold(Harry, True) ::: Harry is cold.\nRules:\nRough($x, True) >>> Blue($x, True) ::: Rough things are blue.\nRed($x, True) && Quiet($x, True) >>> Blue($x, True) ::: Red, quiet things are blue.\nRough($x, True) && Blue($x, True) >>> Nice($x, True) ::: All rough, blue things are nice.\nQuiet($x, False) && Round($x, True) >>> Nice($x, False) ::: If something is quiet and round then it is not nice.\nRed($x, True) >>> Rough($x, True) ::: If Harry is red then Harry is rough.\nNice($x, True) >>> Round($x, True) ::: If something is nice then it is round.\nRound($x, True) >>> Red($x, True) ::: If something is round then it is red.\nRed($x, True) >>> Quiet($x, False) ::: Red things are not quiet.\nQuery:\nRed(Gary, True) ::: Gary is red.\n------\nProblem:\nBob is cold. Bob is not nice. Bob is not quiet. Charlie is blue. Charlie is round. Gary is rough. Harry is cold. Rough things are blue. Red, quiet things are blue. All rough, blue things are nice. If something is quiet and round then it is not nice. If Harry is red then Harry is rough. If something is nice then it is round. If something is round then it is red. Red things are not quiet.\nQuestion:\nBased on the above information, is the following statement true, false, or unknown? Gary is red.\n###\nPredicates:\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\nFacts:\nCold(Bob, True) ::: Bob is cold.\nNice(Bob, False) ::: Bob is not nice.\nQuiet(Bob, False) ::: Bob is not quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nRound(Charlie, True) ::: Charlie is round.\nRough(Gary, True) ::: Gary is rough.\nCold(Harry, True) ::: Harry is cold.\nRules:\nRough($x, True) >>> Blue($x, True) ::: Rough things are",
      "[/code]\nPredicates:\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\nFacts:\nCold(Bob, True) ::: Bob is cold.\nNice(Bob, False) ::: Bob is not nice.\nQuiet(Bob, False) ::: Bob is not quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nRound(Charlie, True) ::: Charlie is round.\nRough(Gary, True) ::: Gary is rough.\nCold(Harry, True) ::: Harry is cold.\nRules:\nRough($x, True) >>> Blue($x, True) ::: Rough things are blue.\nRed($x, True) && Quiet($x, True) >>> Blue($x, True) ::: Red, quiet things are blue.\nRough($x, True) && Blue($x, True) >>> Nice($x, True) ::: All rough, blue things are nice.\nQuiet($x, True) && Round($x, True) >>> Nice($x, False) ::: If something is quiet and round then it is not nice.\nRed($x, True) >>> Rough($x, True) ::: If Harry is red then Harry is rough.\nNice($x, True) >>> Round($x, True) ::: If something is nice then it is round.\nRound($x, True) >>> Red($x, True) ::: If something is round then it is red.\nRed($x, True) >>> Quiet($x, False) ::: Red things are not quiet.\nQuery:\nRed(Gary, True) ::: Gary is red.\n------\nProblem:\nBob is cold. Bob is not nice. Bob is not quiet. Charlie is blue. Charlie is round. Gary is rough. Harry is cold. Rough things are blue. Red, quiet things are blue. All rough, blue things are nice. If something is quiet and round then it is not nice. If Harry is red then Harry is rough. If something is nice then it is round. If something is round then it is red. Red things are not quiet.\nQuestion:\nBased on the above information, is the following statement true, false, or unknown? Gary is red.\n###\nPredicates:\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\nFacts:\nCold(Bob, True) ::: Bob is cold.\nNice(Bob, False) ::: Bob is not nice.\nQuiet(Bob, False) ::: Bob is not quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nRound(Charlie, True) ::: Charlie is round.\nRough(Gary, True) ::: Gary is rough.\nCold(Harry, True) ::: Harry is cold.\nRules:\nRough($x, True) >>> Blue($x, True) :::",
      "[/code]\nPredicates:\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\nFacts:\nCold(Bob, True) ::: Bob is cold.\nNice(Bob, False) ::: Bob is not nice.\nQuiet(Bob, False) ::: Bob is not quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nRound(Charlie, True) ::: Charlie is round.\nRough(Gary, True) ::: Gary is rough.\nCold(Harry, True) ::: Harry is cold.\nRules:\nRough($x, True) >>> Blue($x, True) ::: Rough things are blue.\nRed($x, True) && Quiet($x, True) >>> Blue($x, True) ::: Red, quiet things are blue.\nRough($x, True) && Blue($x, True) >>> Nice($x, True) ::: All rough, blue things are nice.\nQuiet($x, True) && Round($x, True) >>> Nice($x, False) ::: If something is quiet and round then it is not nice.\nRed($x, True) >>> Rough($x, True) ::: If Harry is red then Harry is rough.\nNice($x, True) >>> Round($x, True) ::: If something is nice then it is round.\nRound($x, True) >>> Red($x, True) ::: If something is round then it is red.\nRed($x, True) >>> Quiet($x, False) ::: Red things are not quiet.\nQuery:\nRed(Gary, True) ::: Gary is red.\n------\nProblem:\nBob is cold. Bob is not nice. Bob is not quiet. Charlie is blue. Charlie is round. Gary is rough. Harry is cold. Rough things are blue. Red, quiet things are blue. All rough, blue things are nice. If something is quiet and round then it is not nice. If Harry is red then Harry is rough. If something is nice then it is round. If something is round then it is red. Red things are not quiet.\nQuestion:\nBased on the above information, is the following statement true, false, or unknown? Gary is red.\n### [/code]\nPredicates:\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\nFacts:\nCold(Bob, True) ::: Bob is cold.\nNice(Bob, False) ::: Bob is not nice.\nQuiet(Bob, False) ::: Bob is not quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nRound(Charlie, True) ::: Charlie is round.\nRough(Gary, True) ::: Gary is rough.\nCold(Harry, True) ::: Harry is cold.\nRules:\nRough($x, True) >>> Blue($x,",
      "Predicates:\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\nFacts:\nCold(Bob, True) ::: Bob is cold.\nNice(Bob, False) ::: Bob is not nice.\nQuiet(Bob, False) ::: Bob is not quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nRound(Charlie, True) ::: Charlie is round.\nRough(Gary, True) ::: Gary is rough.\nCold(Harry, True) ::: Harry is cold.\nRules:\nRough($x, True) >>> Blue($x, True) ::: Rough things are blue.\nRed($x, True) && Quiet($x, True) >>> Blue($x, True) ::: Red, quiet things are blue.\nRough($x, True) && Blue($x, True) >>> Nice($x, True) ::: All rough, blue things are nice.\nQuiet($x, True) && Round($x, True) >>> Nice($x, False) ::: If something is quiet and round then it is not nice.\nRed($x, True) >>> Rough($x, True) ::: If Harry is red then Harry is rough.\nNice($x, True) >>> Round($x, True) ::: If something is nice then it is round.\nRound($x, True) >>> Red($x, True) ::: If something is round then it is red.\nRed($x, True) >>> Quiet($x, False) ::: Red things are not quiet.\nQuery:\nRed(Gary, True) ::: Gary is red.\n------\nProblem:\nBob is cold. Bob is not nice. Bob is not quiet. Charlie is blue. Charlie is round. Gary is rough. Harry is cold. Rough things are blue. Red, quiet things are blue. All rough, blue things are nice. If something is quiet and round then it is not nice. If Harry is red then Harry is rough. If something is nice then it is round. If something is round then it is red. Red things are not quiet.\nQuestion:\nBased on the above information, is the following statement true, false, or unknown? Gary is red.\n### [/code] Predicates:\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nQuiet($x, bool) ::: Is x quiet?\nRound($x, bool) ::: Is x round?\nRough($x, bool) ::: Is x rough?\nBlue($x, bool) ::: Is x blue?\nRed($x, bool) ::: Is x red?\nFacts:\nCold(Bob, True) ::: Bob is cold.\nNice(Bob, False) ::: Bob is not nice.\nQuiet(Bob, False) ::: Bob is not quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nRound(Charlie, True) ::: Charlie is round.\nRough(Gary, True) ::: Gary is rough.\nCold(Harry, True) ::: Harry is cold.\nRules:\nRough($x, True) >>> Blue($x, True) ::: R"
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-19_Q18",
    "context": "The bear needs the cow. The cow needs the rabbit. The cow sees the bear. The cow visits the lion. The lion is nice. The lion is red. The lion does not see the cow. The lion visits the cow. The rabbit sees the cow. The rabbit visits the cow. If something needs the cow and the cow visits the rabbit then it visits the cow. If the lion needs the bear then the bear sees the cow. If the lion sees the bear and the bear is rough then the bear does not see the cow. If something visits the lion then the lion visits the bear. If something visits the bear then it needs the bear. If something visits the bear then the bear needs the cow. If something sees the cow then it visits the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit is rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nSees($x, $y, bool) ::: Does x see y?\nVisits($x, $y, bool) ::: Does x visit y?\nFacts:\nNeeds(Bear, Cow, True) ::: The bear needs the cow.\nNeeds(Cow, Rabbit, True) ::: The cow needs the rabbit.\nSees(Cow, Bear, True) ::: The cow sees the bear.\nVisits(Cow, Lion, True) ::: The cow visits the lion.\nNice(Lion, True) ::: The lion is nice.\nRed(Lion, True) ::: The lion is red.\nSees(Lion, Cow, False) ::: The lion does not see the cow.\nVisits(Lion, Cow, True) ::: The lion visits the cow.\nSees(Rabbit, Cow, True) ::: The rabbit sees the cow.\nVisits(Rabbit, Cow, True) ::: The rabbit visits the cow.\nRules:\nNeeds($x, Cow, True) && Visits($x, Rabbit, True) >>> Visits($x, Cow, True) ::: If something needs the cow and the cow visits the rabbit then it visits the cow.\nNeeds(Lion, Bear, True) >>> Sees(Bear, Cow, True) ::: If the lion needs the bear then the bear sees the cow.\nSees(Lion, Bear, True) && Rough(Bear, True) >>> Sees(Bear, Cow, False) ::: If the lion sees the bear and the bear is rough then the bear does not see the cow.\nVisits($x, Lion, True) >>> Visits(Lion, Bear, True) ::: If something visits the lion then the lion visits the bear.\nVisits($x, Bear, True) >>> Needs(Bear, Bear, True) ::: If something visits the bear then it needs the bear.\nVisits($x, Bear, True) >>> Needs(Bear, Cow, True) ::: If something visits the bear then the bear needs the cow.\nSees(Cow, $x, True) >>> Visits(Bear, $x, True) ::: If something sees the cow then it visits the bear.\nQuery:\nRough(Rabbit, True) ::: The rabbit is rough.\n------",
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nVisits($x, $y, bool) ::: Does x visit y?\nSees($x, $y, bool) ::: Does x see y?\nFacts:\nNeeds(Bear, Cow, True) ::: The bear needs the cow.\nNeeds(Cow, Rabbit, True) ::: The cow needs the rabbit.\nSees(Cow, Bear, True) ::: The cow sees the bear.\nVisits(Cow, Lion, True) ::: The cow visits the lion.\nNice(Lion, True) ::: The lion is nice.\nRed(Lion, True) ::: The lion is red.\nSees(Lion, Cow, False) ::: The lion does not see the cow.\nVisits(Lion, Cow, True) ::: The lion visits the cow.\nSees(Rabbit, Cow, True) ::: The rabbit sees the cow.\nVisits(Rabbit, Cow, True) ::: The rabbit visits the cow.\nRules:\nNeeds($x, Cow, True) && Visits($x, Rabbit, True) >>> Visits($x, Cow, True) ::: If something needs the cow and the cow visits the rabbit then it visits the cow.\nNeeds(Lion, Bear, True) >>> Sees(Bear, Cow, True) ::: If the lion needs the bear then the bear sees the cow.\nSees(Lion, Bear, True) && Rough(Bear, True) >>> Sees(Bear, Cow, False) ::: If the lion sees the bear and the bear is rough then the bear does not see the cow.\nVisits($x, Lion, True) >>> Visits(Lion, Bear, True) ::: If something visits the lion then the lion visits the bear.\nVisits($x, Bear, True) >>> Needs(Bear, Bear, True) ::: If something visits the bear then it needs the bear.\nVisits($x, Bear, True) >>> Needs(Bear, Cow, True) ::: If something visits the bear then the bear needs the cow.\nSees(Cow, $x, True) >>> Visits(Bear, $x, True) ::: If something sees the cow then it visits the bear.\nQuery:\nRough(Rabbit, True) ::: The rabbit is rough.\n------",
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nSees($x, $y, bool) ::: Does x see y?\nVisits($x, $y, bool) ::: Does x visit y?\nFacts:\nNeeds(Bear, Cow, True) ::: The bear needs the cow.\nNeeds(Cow, Rabbit, True) ::: The cow needs the rabbit.\nSees(Cow, Bear, True) ::: The cow sees the bear.\nVisits(Cow, Lion, True) ::: The cow visits the lion.\nNice(Lion, True) ::: The lion is nice.\nRed(Lion, True) ::: The lion is red.\nSees(Lion, Cow, False) ::: The lion does not see the cow.\nVisits(Lion, Cow, True) ::: The lion visits the cow.\nSees(Rabbit, Cow, True) ::: The rabbit sees the cow.\nVisits(Rabbit, Cow, True) ::: The rabbit visits the cow.\nRules:\nNeeds($x, Cow, True) && Visits($x, Rabbit, True) >>> Visits($x, Cow, True) ::: If something needs the cow and the cow visits the rabbit then it visits the cow.\nNeeds(Lion, Bear, True) >>> Sees(Bear, Cow, True) ::: If the lion needs the bear then the bear sees the cow.\nSees(Lion, Bear, True) && Rough(Bear, True) >>> Sees(Bear, Cow, False) ::: If the lion sees the bear and the bear is rough then the bear does not see the cow.\nVisits($x, Lion, True) >>> Visits(Lion, Bear, True) ::: If something visits the lion then the lion visits the bear.\nVisits($x, Bear, True) >>> Needs(Bear, $x, True) ::: If something visits the bear then it needs the bear.\nVisits($x, Bear, True) >>> Needs(Bear, Cow, True) ::: If something visits the bear then the bear needs the cow.\nSees(Cow, $x, True) >>> Visits(Bear, $x, True) ::: If something sees the cow then it visits the bear.\nQuery:\nRough(Rabbit, True) ::: The rabbit is rough.",
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nVisits($x, $y, bool) ::: Does x visit y?\nSees($x, $y, bool) ::: Does x see y?\nFacts:\nNeeds(Bear, Cow, True) ::: The bear needs the cow.\nNeeds(Cow, Rabbit, True) ::: The cow needs the rabbit.\nSees(Cow, Bear, True) ::: The cow sees the bear.\nVisits(Cow, Lion, True) ::: The cow visits the lion.\nNice(Lion, True) ::: The lion is nice.\nRed(Lion, True) ::: The lion is red.\nSees(Lion, Cow, False) ::: The lion does not see the cow.\nVisits(Lion, Cow, True) ::: The lion visits the cow.\nSees(Rabbit, Cow, True) ::: The rabbit sees the cow.\nVisits(Rabbit, Cow, True) ::: The rabbit visits the cow.\nRules:\nNeeds($x, Cow, True) && Visits($x, Rabbit, True) >>> Visits($x, Cow, True) ::: If something needs the cow and the cow visits the rabbit then it visits the cow.\nNeeds(Lion, Bear, True) >>> Sees(Bear, Cow, True) ::: If the lion needs the bear then the bear sees the cow.\nSees(Lion, Bear, True) && Rough(Bear, True) >>> Sees(Bear, Cow, False) ::: If the lion sees the bear and the bear is rough then the bear does not see the cow.\nVisits($x, Lion, True) >>> Visits(Lion, Bear, True) ::: If something visits the lion then the lion visits the bear.\nVisits($x, Bear, True) >>> Needs(Bear, $x, True) ::: If something visits the bear then it needs the bear.\nVisits($x, Bear, True) >>> Needs(Bear, Cow, True) ::: If something visits the bear then the bear needs the cow.\nSees(Cow, $x, True) >>> Visits(Bear, $x, True) ::: If something sees the cow then it visits the bear.\nQuery:\nRough(Rabbit, True) ::: The rabbit is rough.",
      "Predicates:\nNeeds($x, $y, bool) ::: Does x need y?\nVisits($x, $y, bool) ::: Does x visit y?\nSees($x, $y, bool) ::: Does x see y?\nFacts:\nNeeds(Bear, Cow, True) ::: The bear needs the cow.\nNeeds(Cow, Rabbit, True) ::: The cow needs the rabbit.\nSees(Cow, Bear, True) ::: The cow sees the bear.\nVisits(Cow, Lion, True) ::: The cow visits the lion.\nNice(Lion, True) ::: The lion is nice.\nRed(Lion, True) ::: The lion is red.\nSees(Lion, Cow, False) ::: The lion does not see the cow.\nVisits(Lion, Cow, True) ::: The lion visits the cow.\nSees(Rabbit, Cow, True) ::: The rabbit sees the cow.\nVisits(Rabbit, Cow, True) ::: The rabbit visits the cow.\nRules:\nNeeds($x, Cow, True) && Visits($x, Rabbit, True) >>> Visits($x, Cow, True) ::: If something needs the cow and the cow visits the rabbit then it visits the cow.\nNeeds(Lion, Bear, True) >>> Sees(Bear, Cow, True) ::: If the lion needs the bear then the bear sees the cow.\nSees(Lion, Bear, True) && Rough(Bear, True) >>> Sees(Bear, Cow, False) ::: If the lion sees the bear and the bear is rough then the bear does not see the cow.\nVisits($x, Lion, True) >>> Visits(Lion, Bear, True) ::: If something visits the lion then the lion visits the bear.\nVisits($x, Bear, True) >>> Needs(Bear, $x, True) ::: If something visits the bear then it needs the bear.\nVisits($x, Bear, True) >>> Needs(Bear, Cow, True) ::: If something visits the bear then the bear needs the cow.\nSees($x, Cow, True) >>> Visits($x, Bear, True) ::: If something sees the cow then it visits the bear.\nQuery:\nRough(Rabbit, True) ::: The rabbit is rough.\n------\nProblem"
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1213_Q11",
    "context": "Anne is white. Bob is round. Erin is green. Erin is red. Erin is not round. Erin is white. Harry is young. All red, round people are quiet. If someone is young then they are white. Round people are young. If someone is round and smart then they are not red. All white people are red. Quiet people are green. If someone is red and not white then they are not green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is green.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nWhite($x, bool) ::: Is x white?\nRound($x, bool) ::: Is x round?\nGreen($x, bool) ::: Is x green?\nRed($x, bool) ::: Is x red?\nQuiet($x, bool) ::: Is x quiet?\nSmart($x, bool) ::: Is x smart?\nYoung($x, bool) ::: Is x young?\nFacts:\nWhite(Anne, True) ::: Anne is white.\nRound(Bob, True) ::: Bob is round.\nGreen(Erin, True) ::: Erin is green.\nRed(Erin, True) ::: Erin is red.\nRound(Erin, False) ::: Erin is not round.\nWhite(Erin, True) ::: Erin is white.\nYoung(Harry, True) ::: Harry is young.\nRules:\nRed($x, True) && Round($x, True) >>> Quiet($x, True) ::: All red, round people are quiet.\nYoung($x, True) >>> White($x, True) ::: If someone is young then they are white.\nRound($x, True) >>> Young($x, True) ::: Round people are young.\nRound($x, True) && Smart($x, True) >>> Red($x, False) ::: If someone is round and smart then they are not red.\nWhite($x, True) >>> Red($x, True) ::: All white people are red.\nQuiet($x, True) >>> Green($x, True) ::: Quiet people are green.\nRed($x, True) && White($x, False) >>> Green($x, False) ::: If someone is red and not white then they are not green.\nQuery:\nGreen(Bob, True) ::: Bob is green.\n------\nProblem:\nAnne is white. Bob is round. Erin is green. Erin is red. Erin is not round. Erin is white. Harry is young. All red, round people are quiet. If someone is young then they are white. Round people are young. If someone is round and smart then they are not red. All white people are red. Quiet people are green. If someone is red and not white then they are not green.\nQuestion:\nBased on the above information, is the following statement true, false, or unknown? Bob is green.\n###\nPredicates:\nWhite($x, bool) :::",
      "[/code]\nPredicates:\nWhite($x, bool) ::: Is x white?\nRound($x, bool) ::: Is x round?\nGreen($x, bool) ::: Is x green?\nRed($x, bool) ::: Is x red?\nQuiet($x, bool) ::: Is x quiet?\nSmart($x, bool) ::: Is x smart?\nYoung($x, bool) ::: Is x young?\nFacts:\nWhite(Anne, True) ::: Anne is white.\nRound(Bob, True) ::: Bob is round.\nGreen(Erin, True) ::: Erin is green.\nRed(Erin, True) ::: Erin is red.\nRound(Erin, False) ::: Erin is not round.\nWhite(Erin, True) ::: Erin is white.\nYoung(Harry, True) ::: Harry is young.\nRules:\nRed($x, True) && Round($x, True) >>> Quiet($x, True) ::: All red, round people are quiet.\nYoung($x, True) >>> White($x, True) ::: If someone is young then they are white.\nRound($x, True) >>> Young($x, True) ::: Round people are young.\nRound($x, True) && Smart($x, True) >>> Red($x, False) ::: If someone is round and smart then they are not red.\nWhite($x, True) >>> Red($x, True) ::: All white people are red.\nQuiet($x, True) >>> Green($x, True) ::: Quiet people are green.\nRed($x, True) && White($x, False) >>> Green($x, False) ::: If someone is red and not white then they are not green.\nQuery:\nGreen(Bob, True) ::: Bob is green.\n------\nProblem:\nAnne is white. Bob is round. Erin is green. Erin is red. Erin is not round. Erin is white. Harry is young. All red, round people are quiet. If someone is young then they are white. Round people are young. If someone is round and smart then they are not red. All white people are red. Quiet people are green. If someone is red and not white then they are not green.\nQuestion:\nBased on the above information, is the following statement true, false, or unknown? Bob is green.\n###\nPredicates:\nWhite($x,",
      "Predicates:\nWhite($x, bool) ::: Is x white?\nRound($x, bool) ::: Is x round?\nGreen($x, bool) ::: Is x green?\nRed($x, bool) ::: Is x red?\nSmart($x, bool) ::: Is x smart?\nQuiet($x, bool) ::: Is x quiet?\nYoung($x, bool) ::: Is x young?\nFacts:\nWhite(Anne, True) ::: Anne is white.\nRound(Bob, True) ::: Bob is round.\nGreen(Erin, True) ::: Erin is green.\nRed(Erin, True) ::: Erin is red.\nRound(Erin, False) ::: Erin is not round.\nWhite(Erin, True) ::: Erin is white.\nYoung(Harry, True) ::: Harry is young.\nRules:\nRed($x, True) && Round($x, True) >>> Quiet($x, True) ::: All red, round people are quiet.\nYoung($x, True) >>> White($x, True) ::: If someone is young then they are white.\nRound($x, True) >>> Young($x, True) ::: Round people are young.\nRound($x, True) && Smart($x, True) >>> Red($x, False) ::: If someone is round and smart then they are not red.\nWhite($x, True) >>> Red($x, True) ::: All white people are red.\nQuiet($x, True) >>> Green($x, True) ::: Quiet people are green.\nRed($x, True) && White($x, False) >>> Green($x, False) ::: If someone is red and not white then they are not green.\nQuery:\nGreen(Bob, True) ::: Bob is green.\n------\nProblem:\nAnne is white. Bob is round. Erin is green. Erin is red. Erin is not round. Erin is white. Harry is young. All red, round people are quiet. If someone is young then they are white. Round people are young. If someone is round and smart then they are not red. All white people are red. Quiet people are green. If someone is red and not white then they are not green.\nQuestion:\nBased on the above information, is the following statement true, false, or unknown? Bob is green.\n###\nPredicates:\nWhite($x, bool) :::",
      "[/code]\nPredicates:\nWhite($x, bool) ::: Is x white?\nRound($x, bool) ::: Is x round?\nGreen($x, bool) ::: Is x green?\nRed($x, bool) ::: Is x red?\nSmart($x, bool) ::: Is x smart?\nQuiet($x, bool) ::: Is x quiet?\nYoung($x, bool) ::: Is x young?\nFacts:\nWhite(Anne, True) ::: Anne is white.\nRound(Bob, True) ::: Bob is round.\nGreen(Erin, True) ::: Erin is green.\nRed(Erin, True) ::: Erin is red.\nRound(Erin, False) ::: Erin is not round.\nWhite(Erin, True) ::: Erin is white.\nYoung(Harry, True) ::: Harry is young.\nRules:\nRed($x, True) && Round($x, True) >>> Quiet($x, True) ::: All red, round people are quiet.\nYoung($x, True) >>> White($x, True) ::: If someone is young then they are white.\nRound($x, True) >>> Young($x, True) ::: Round people are young.\nRound($x, True) && Smart($x, True) >>> Red($x, False) ::: If someone is round and smart then they are not red.\nWhite($x, True) >>> Red($x, True) ::: All white people are red.\nQuiet($x, True) >>> Green($x, True) ::: Quiet people are green.\nRed($x, True) && White($x, False) >>> Green($x, False) ::: If someone is red and not white then they are not green.\nQuery:\nGreen(Bob, True) ::: Bob is green.\n------\nProblem:\nAnne is white. Bob is round. Erin is green. Erin is red. Erin is not round. Erin is white. Harry is young. All red, round people are quiet. If someone is young then they are white. Round people are young. If someone is round and smart then they are not red. All white people are red. Quiet people are green. If someone is red and not white then they are not green.\nQuestion:\nBased on the above information, is the following statement true, false, or unknown? Bob is green.\n###\nPredicates:\nWhite($x,",
      "[/code]\nPredicates:\nWhite($x, bool) ::: Is x white?\nRound($x, bool) ::: Is x round?\nGreen($x, bool) ::: Is x green?\nRed($x, bool) ::: Is x red?\nQuiet($x, bool) ::: Is x quiet?\nSmart($x, bool) ::: Is x smart?\nYoung($x, bool) ::: Is x young?\nFacts:\nWhite(Anne, True) ::: Anne is white.\nRound(Bob, True) ::: Bob is round.\nGreen(Erin, True) ::: Erin is green.\nRed(Erin, True) ::: Erin is red.\nRound(Erin, False) ::: Erin is not round.\nWhite(Erin, True) ::: Erin is white.\nYoung(Harry, True) ::: Harry is young.\nRules:\nRed($x, True) && Round($x, True) >>> Quiet($x, True) ::: All red, round people are quiet.\nYoung($x, True) >>> White($x, True) ::: If someone is young then they are white.\nRound($x, True) >>> Young($x, True) ::: Round people are young.\nRound($x, True) && Smart($x, True) >>> Red($x, False) ::: If someone is round and smart then they are not red.\nWhite($x, True) >>> Red($x, True) ::: All white people are red.\nQuiet($x, True) >>> Green($x, True) ::: Quiet people are green.\nRed($x, True) && White($x, False) >>> Green($x, False) ::: If someone is red and not white then they are not green.\nQuery:\nGreen(Bob, True) ::: Bob is green.\n------\nProblem:\nAnne is white. Bob is round. Erin is green. Erin is red. Erin is not round. Erin is white. Harry is young. All red, round people are quiet. If someone is young then they are white. Round people are young. If someone is round and smart then they are not red. All white people are red. Quiet people are green. If someone is red and not white then they are not green.\nQuestion:\nBased on the above information, is the following statement true, false, or unknown? Bob is green.\n### [/code]\nPredicates:"
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-527_Q9",
    "context": "Bob is quiet. Charlie is blue. Charlie is cold. Charlie is nice. Dave is blue. Dave is cold. Erin is blue. If something is blue and cold then it is big. Round, nice things are big. All nice, quiet things are furry. If Bob is round then Bob is furry. If Bob is furry and Bob is nice then Bob is big. If something is big and blue then it is quiet. If something is blue then it is nice. All nice things are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet($x, bool) ::: Is x quiet?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nBig($x, bool) ::: Is x big?\nRound($x, bool) ::: Is x round?\nFurry($x, bool) ::: Is x furry?\nFacts:\nQuiet(Bob, True) ::: Bob is quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nCold(Charlie, True) ::: Charlie is cold.\nNice(Charlie, True) ::: Charlie is nice.\nBlue(Dave, True) ::: Dave is blue.\nCold(Dave, True) ::: Dave is cold.\nBlue(Erin, True) ::: Erin is blue.\nRules:\nBlue($x, True) && Cold($x, True) >>> Big($x, True) ::: If something is blue and cold then it is big.\nRound($x, True) && Nice($x, True) >>> Big($x, True) ::: Round, nice things are big.\nNice($x, True) && Quiet($x, True) >>> Furry($x, True) ::: All nice, quiet things are furry.\nQuiet(Bob, True) >>> Furry(Bob, True) ::: If Bob is round then Bob is furry.\nFurry(Bob, True) && Nice(Bob, True) >>> Big(Bob, True) ::: If Bob is furry and Bob is nice then Bob is big.\nBig($x, True) && Blue($x, True) >>> Quiet($x, True) ::: If something is big and blue then it is quiet.\nBlue($x, True) >>> Nice($x, True) ::: If something is blue then it is nice.\nNice($x, True) >>> Cold($x, True) ::: All nice things are cold.\nQuery:\nQuiet(Erin, True) ::: Erin is quiet.\n------\nProblem:\nAnne is furry. Anne is green. Anne is rough. Anne is white. Bob is furry. Bob is green. Bob is rough. Bob is white. Charlie is furry. Charlie is green. Charlie is rough. Charlie is white. Dave is furry. Dave is green. Dave is rough. Dave is",
      "[/code]\nPredicates:\nQuiet($x, bool) ::: Is x quiet?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nBig($x, bool) ::: Is x big?\nRound($x, bool) ::: Is x round?\nFurry($x, bool) ::: Is x furry?\nFacts:\nQuiet(Bob, True) ::: Bob is quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nCold(Charlie, True) ::: Charlie is cold.\nNice(Charlie, True) ::: Charlie is nice.\nBlue(Dave, True) ::: Dave is blue.\nCold(Dave, True) ::: Dave is cold.\nBlue(Erin, True) ::: Erin is blue.\nRules:\nBlue($x, True) && Cold($x, True) >>> Big($x, True) ::: If something is blue and cold then it is big.\nRound($x, True) && Nice($x, True) >>> Big($x, True) ::: Round, nice things are big.\nNice($x, True) && Quiet($x, True) >>> Furry($x, True) ::: All nice, quiet things are furry.\nQuiet(Bob, True) >>> Furry(Bob, True) ::: If Bob is round then Bob is furry.\nFurry(Bob, True) && Nice(Bob, True) >>> Big(Bob, True) ::: If Bob is furry and Bob is nice then Bob is big.\nBig($x, True) && Blue($x, True) >>> Quiet($x, True) ::: If something is big and blue then it is quiet.\nBlue($x, True) >>> Nice($x, True) ::: If something is blue then it is nice.\nNice($x, True) >>> Cold($x, True) ::: All nice things are cold.\nQuery:\nQuiet(Erin, True) ::: Erin is quiet.\n------\nProblem:\nAnne is furry. Anne is green. Anne is rough. Anne is white. Bob is furry. Bob is green. Bob is rough. Bob is white. Charlie is furry. Charlie is green. Charlie is rough. Charlie is white. Dave is furry. Dave is green. Dave is",
      "Predicates:\nQuiet($x, bool) ::: Is x quiet?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nBig($x, bool) ::: Is x big?\nRound($x, bool) ::: Is x round?\nFurry($x, bool) ::: Is x furry?\nFacts:\nQuiet(Bob, True) ::: Bob is quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nCold(Charlie, True) ::: Charlie is cold.\nNice(Charlie, True) ::: Charlie is nice.\nBlue(Dave, True) ::: Dave is blue.\nCold(Dave, True) ::: Dave is cold.\nBlue(Erin, True) ::: Erin is blue.\nRules:\nBlue($x, True) && Cold($x, True) >>> Big($x, True) ::: If something is blue and cold then it is big.\nRound($x, True) && Nice($x, True) >>> Big($x, True) ::: Round, nice things are big.\nNice($x, True) && Quiet($x, True) >>> Furry($x, True) ::: All nice, quiet things are furry.\nQuiet(Bob, True) >>> Furry(Bob, True) ::: If Bob is round then Bob is furry.\nFurry(Bob, True) && Nice(Bob, True) >>> Big(Bob, True) ::: If Bob is furry and Bob is nice then Bob is big.\nBig($x, True) && Blue($x, True) >>> Quiet($x, True) ::: If something is big and blue then it is quiet.\nBlue($x, True) >>> Nice($x, True) ::: If something is blue then it is nice.\nNice($x, True) >>> Cold($x, True) ::: All nice things are cold.\nQuery:\nQuiet(Erin, True) ::: Erin is quiet.\n------\nProblem:\nAnne is furry. Anne is green. Anne is red. Anne is rough. Anne is white. Bob is furry. Bob is green. Bob is red. Bob is rough. Bob is white. Charlie is furry. Charlie is green. Charlie is red. Charlie is rough. Charlie is white. Dave is fur",
      "[/code]\nPredicates:\nQuiet($x, bool) ::: Is x quiet?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nBig($x, bool) ::: Is x big?\nRound($x, bool) ::: Is x round?\nFurry($x, bool) ::: Is x furry?\nFacts:\nQuiet(Bob, True) ::: Bob is quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nCold(Charlie, True) ::: Charlie is cold.\nNice(Charlie, True) ::: Charlie is nice.\nBlue(Dave, True) ::: Dave is blue.\nCold(Dave, True) ::: Dave is cold.\nBlue(Erin, True) ::: Erin is blue.\nRules:\nBlue($x, True) && Cold($x, True) >>> Big($x, True) ::: If something is blue and cold then it is big.\nRound($x, True) && Nice($x, True) >>> Big($x, True) ::: Round, nice things are big.\nNice($x, True) && Quiet($x, True) >>> Furry($x, True) ::: All nice, quiet things are furry.\nQuiet(Bob, True) >>> Furry(Bob, True) ::: If Bob is round then Bob is furry.\nFurry(Bob, True) && Nice(Bob, True) >>> Big(Bob, True) ::: If Bob is furry and Bob is nice then Bob is big.\nBig($x, True) && Blue($x, True) >>> Quiet($x, True) ::: If something is big and blue then it is quiet.\nBlue($x, True) >>> Nice($x, True) ::: If something is blue then it is nice.\nNice($x, True) >>> Cold($x, True) ::: All nice things are cold.\nQuery:\nQuiet(Erin, True) ::: Erin is quiet.\n------\nProblem:\nAnne is furry. Anne is green. Anne is red. Anne is rough. Anne is white. Bob is furry. Bob is green. Bob is red. Bob is rough. Bob is white. Charlie is furry. Charlie is green. Charlie is red. Charlie is rough. Charlie is white",
      "Predicates:\nQuiet($x, bool) ::: Is x quiet?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nNice($x, bool) ::: Is x nice?\nBig($x, bool) ::: Is x big?\nRound($x, bool) ::: Is x round?\nFurry($x, bool) ::: Is x furry?\nFacts:\nQuiet(Bob, True) ::: Bob is quiet.\nBlue(Charlie, True) ::: Charlie is blue.\nCold(Charlie, True) ::: Charlie is cold.\nNice(Charlie, True) ::: Charlie is nice.\nBlue(Dave, True) ::: Dave is blue.\nCold(Dave, True) ::: Dave is cold.\nBlue(Erin, True) ::: Erin is blue.\nRules:\nBlue($x, True) && Cold($x, True) >>> Big($x, True) ::: If something is blue and cold then it is big.\nRound($x, True) && Nice($x, True) >>> Big($x, True) ::: Round, nice things are big.\nNice($x, True) && Quiet($x, True) >>> Furry($x, True) ::: All nice, quiet things are furry.\nQuiet(Bob, True) >>> Furry(Bob, True) ::: If Bob is round then Bob is furry.\nQuiet(Bob, True) && Furry(Bob, True) && Nice(Bob, True) >>> Big(Bob, True) ::: If Bob is furry and Bob is nice then Bob is big.\nBlue($x, True) && Big($x, True) >>> Quiet($x, True) ::: If something is big and blue then it is quiet.\nBlue($x, True) >>> Nice($x, True) ::: If something is blue then it is nice.\nNice($x, True) >>> Cold($x, True) ::: All nice things are cold.\nQuery:\nQuiet(Erin, True) ::: Erin is quiet.\n------\nProblem:\nAnne is furry. Anne is green. Anne is rough. Anne is white. Bob is furry. Bob is green. Bob is rough. Bob is white. Charlie is furry. Charlie is green. Charlie is rough. Charlie is white. Dave is furry. Dave is"
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-607_Q15",
    "context": "Dave is big. Erin is big. Erin is furry. Erin is green. Erin is white. Gary is green. Harry is round. All big, furry things are white. If something is round then it is furry. If something is smart and furry then it is round. If something is white and smart then it is big. All white things are smart. If something is furry then it is white. All green things are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not white.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nFurry($x, bool) ::: Is x furry?\nGreen($x, bool) ::: Is x green?\nRound($x, bool) ::: Is x round?\nWhite($x, bool) ::: Is x white?\nSmart($x, bool) ::: Is x smart?\nFacts:\nBig(Dave, True) ::: Dave is big.\nBig(Erin, True) ::: Erin is big.\nFurry(Erin, True) ::: Erin is furry.\nGreen(Erin, True) ::: Erin is green.\nWhite(Erin, True) ::: Erin is white.\nGreen(Gary, True) ::: Gary is green.\nRound(Harry, True) ::: Harry is round.\nRules:\nBig($x, True) && Furry($x, True) >>> White($x, True) ::: All big, furry things are white.\nRound($x, True) >>> Furry($x, True) ::: If something is round then it is furry.\nFurry($x, True) && Smart($x, True) >>> Round($x, True) ::: If something is smart and furry then it is round.\nWhite($x, True) && Smart($x, True) >>> Big($x, True) ::: If something is white and smart then it is big.\nWhite($x, True) >>> Smart($x, True) ::: All white things are smart.\nFurry($x, True) >>> White($x, True) ::: If something is furry then it is white.\nGreen($x, True) >>> Round($x, True) ::: All green things are round.\nQuery:\nWhite(Dave, False) ::: Dave is not white.\n------\nProblem:\nAnne is big. Anne is furry. Anne is green. Anne is white. Erin is big. Erin is furry. Erin is green. Erin is white. Fiona is big. Fiona is furry. Fiona is green. Fiona is white. Gary is big. Gary is furry. Gary is green. Gary is white. Harry is big. Harry is furry. Harry is green. Harry is white. All big, furry things are white. If something is round then it is furry. If something is smart and furry then it is round. If something is white and smart then it is big",
      "Predicates:\nBig($x, bool) ::: Is x big?\nFurry($x, bool) ::: Is x furry?\nGreen($x, bool) ::: Is x green?\nRound($x, bool) ::: Is x round?\nWhite($x, bool) ::: Is x white?\nSmart($x, bool) ::: Is x smart?\nFacts:\nBig(Dave, True) ::: Dave is big.\nBig(Erin, True) ::: Erin is big.\nFurry(Erin, True) ::: Erin is furry.\nGreen(Erin, True) ::: Erin is green.\nWhite(Erin, True) ::: Erin is white.\nGreen(Gary, True) ::: Gary is green.\nRound(Harry, True) ::: Harry is round.\nRules:\nBig($x, True) && Furry($x, True) >>> White($x, True) ::: All big, furry things are white.\nRound($x, True) >>> Furry($x, True) ::: If something is round then it is furry.\nFurry($x, True) && Smart($x, True) >>> Round($x, True) ::: If something is smart and furry then it is round.\nWhite($x, True) && Smart($x, True) >>> Big($x, True) ::: If something is white and smart then it is big.\nWhite($x, True) >>> Smart($x, True) ::: All white things are smart.\nFurry($x, True) >>> White($x, True) ::: If something is furry then it is white.\nGreen($x, True) >>> Round($x, True) ::: All green things are round.\nQuery:\nWhite(Dave, False) ::: Dave is not white.\n------\nProblem:\nAnne is big. Anne is furry. Anne is green. Anne is white. Dave is big. Dave is furry. Dave is green. Dave is white. Erin is big. Erin is furry. Erin is green. Erin is white. Fiona is big. Fiona is furry. Fiona is green. Fiona is white. Gary is big. Gary is furry. Gary is green. Gary is white. Harry is big. Harry is furry. Harry is green. Harry is white. All big, furry things are white. If something is round then it is furry. If something is smart and",
      "Predicates:\nBig($x, bool) ::: Is x big?\nFurry($x, bool) ::: Is x furry?\nGreen($x, bool) ::: Is x green?\nRound($x, bool) ::: Is x round?\nWhite($x, bool) ::: Is x white?\nSmart($x, bool) ::: Is x smart?\nFacts:\nBig(Dave, True) ::: Dave is big.\nBig(Erin, True) ::: Erin is big.\nFurry(Erin, True) ::: Erin is furry.\nGreen(Erin, True) ::: Erin is green.\nWhite(Erin, True) ::: Erin is white.\nGreen(Gary, True) ::: Gary is green.\nRound(Harry, True) ::: Harry is round.\nRules:\nBig($x, True) && Furry($x, True) >>> White($x, True) ::: All big, furry things are white.\nRound($x, True) >>> Furry($x, True) ::: If something is round then it is furry.\nFurry($x, True) && Smart($x, True) >>> Round($x, True) ::: If something is smart and furry then it is round.\nWhite($x, True) && Smart($x, True) >>> Big($x, True) ::: If something is white and smart then it is big.\nWhite($x, True) >>> Smart($x, True) ::: All white things are smart.\nFurry($x, True) >>> White($x, True) ::: If something is furry then it is white.\nGreen($x, True) >>> Round($x, True) ::: All green things are round.\nQuery:\nWhite(Dave, False) ::: Dave is not white.\n------\nProblem:\nAnne is big. Anne is furry. Anne is green. Anne is white. Dave is big. Dave is furry. Dave is green. Dave is white. Erin is big. Erin is furry. Erin is green. Erin is white. Fiona is big. Fiona is furry. Fiona is green. Fiona is white. Gary is big. Gary is furry. Gary is green. Gary is white. Harry is big. Harry is furry. Harry is green. Harry is white. All big things are furry. All furry things are green. All green things are white. All white things are",
      "Predicates:\nBig($x, bool) ::: Is x big?\nFurry($x, bool) ::: Is x furry?\nGreen($x, bool) ::: Is x green?\nRound($x, bool) ::: Is x round?\nWhite($x, bool) ::: Is x white?\nSmart($x, bool) ::: Is x smart?\nFacts:\nBig(Dave, True) ::: Dave is big.\nBig(Erin, True) ::: Erin is big.\nFurry(Erin, True) ::: Erin is furry.\nGreen(Erin, True) ::: Erin is green.\nWhite(Erin, True) ::: Erin is white.\nGreen(Gary, True) ::: Gary is green.\nRound(Harry, True) ::: Harry is round.\nRules:\nBig($x, True) && Furry($x, True) >>> White($x, True) ::: All big, furry things are white.\nRound($x, True) >>> Furry($x, True) ::: If something is round then it is furry.\nFurry($x, True) && Smart($x, True) >>> Round($x, True) ::: If something is smart and furry then it is round.\nWhite($x, True) && Smart($x, True) >>> Big($x, True) ::: If something is white and smart then it is big.\nWhite($x, True) >>> Smart($x, True) ::: All white things are smart.\nFurry($x, True) >>> White($x, True) ::: If something is furry then it is white.\nGreen($x, True) >>> Round($x, True) ::: All green things are round.\nQuery:\nWhite(Dave, False) ::: Dave is not white.\n------\nProblem:\nAnne is big. Anne is furry. Anne is green. Anne is white. Dave is big. Dave is furry. Dave is green. Dave is white. Erin is big. Erin is furry. Erin is green. Erin is white. Fiona is big. Fiona is furry. Fiona is green. Fiona is white. Gary is big. Gary is furry. Gary is green. Gary is white. Harry is big. Harry is furry. Harry is green. Harry is white. If something is big then it is furry. If something is big then it is green. If something is big then",
      "Predicates:\nBig($x, bool) ::: Is x big?\nFurry($x, bool) ::: Is x furry?\nGreen($x, bool) ::: Is x green?\nRound($x, bool) ::: Is x round?\nWhite($x, bool) ::: Is x white?\nSmart($x, bool) ::: Is x smart?\nFacts:\nBig(Dave, True) ::: Dave is big.\nBig(Erin, True) ::: Erin is big.\nFurry(Erin, True) ::: Erin is furry.\nGreen(Erin, True) ::: Erin is green.\nWhite(Erin, True) ::: Erin is white.\nGreen(Gary, True) ::: Gary is green.\nRound(Harry, True) ::: Harry is round.\nRules:\nBig($x, True) && Furry($x, True) >>> White($x, True) ::: All big, furry things are white.\nRound($x, True) >>> Furry($x, True) ::: If something is round then it is furry.\nFurry($x, True) && Smart($x, True) >>> Round($x, True) ::: If something is smart and furry then it is round.\nWhite($x, True) && Smart($x, True) >>> Big($x, True) ::: If something is white and smart then it is big.\nWhite($x, True) >>> Smart($x, True) ::: All white things are smart.\nFurry($x, True) >>> White($x, True) ::: If something is furry then it is white.\nGreen($x, True) >>> Round($x, True) ::: All green things are round.\nQuery:\nWhite(Dave, False) ::: Dave is not white.\n------\nProblem:\nAnne is big. Anne is furry. Anne is green. Anne is white. Dave is big. Dave is furry. Dave is green. Dave is white. Erin is big. Erin is furry. Erin is green. Erin is white. Fiona is big. Fiona is furry. Fiona is green. Fiona is white. Gary is big. Gary is furry. Gary is green. Gary is white. Harry is big. Harry is furry. Harry is green. Harry is white. All big, furry things are white. If something is round then it is furry. If something is white and"
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1382_Q2",
    "context": "Bob is big. Bob is cold. Bob is kind. Bob is round. Bob is smart. Dave is cold. Erin is big. Erin is green. Fiona is big. Fiona is smart. Big, green things are round. If something is cold and blue then it is smart. Smart, round things are kind. Round, big things are cold. Cold things are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not big.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nCold($x, bool) ::: Is x cold?\nKind($x, bool) ::: Is x kind?\nRound($x, bool) ::: Is x round?\nSmart($x, bool) ::: Is x smart?\nBlue($x, bool) ::: Is x blue?\nFacts:\nBig(Bob, True) ::: Bob is big.\nCold(Bob, True) ::: Bob is cold.\nKind(Bob, True) ::: Bob is kind.\nRound(Bob, True) ::: Bob is round.\nSmart(Bob, True) ::: Bob is smart.\nCold(Dave, True) ::: Dave is cold.\nBig(Erin, True) ::: Erin is big.\nGreen(Erin, True) ::: Erin is green.\nBig(Fiona, True) ::: Fiona is big.\nSmart(Fiona, True) ::: Fiona is smart.\nRules:\nBig($x, True) && Green($x, True) >>> Round($x, True) ::: Big, green things are round.\nCold($x, True) && Blue($x, True) >>> Smart($x, True) ::: If something is cold and blue then it is smart.\nSmart($x, True) && Round($x, True) >>> Kind($x, True) ::: Smart, round things are kind.\nRound($x, True) && Big($x, True) >>> Cold($x, True) ::: Round, big things are cold.\nCold($x, True) >>> Blue($x, True) ::: Cold things are blue.\nQuery:\nBig(Bob, False) ::: Bob is not big.\n------",
      "[/code]\nPredicates:\nBig($x, bool) ::: Is x big?\nCold($x, bool) ::: Is x cold?\nKind($x, bool) ::: Is x kind?\nRound($x, bool) ::: Is x round?\nSmart($x, bool) ::: Is x smart?\nBlue($x, bool) ::: Is x blue?\nFacts:\nBig(Bob, True) ::: Bob is big.\nCold(Bob, True) ::: Bob is cold.\nKind(Bob, True) ::: Bob is kind.\nRound(Bob, True) ::: Bob is round.\nSmart(Bob, True) ::: Bob is smart.\nCold(Dave, True) ::: Dave is cold.\nBig(Erin, True) ::: Erin is big.\nGreen(Erin, True) ::: Erin is green.\nBig(Fiona, True) ::: Fiona is big.\nSmart(Fiona, True) ::: Fiona is smart.\nRules:\nBig($x, True) && Green($x, True) >>> Round($x, True) ::: Big, green things are round.\nCold($x, True) && Blue($x, True) >>> Smart($x, True) ::: If something is cold and blue then it is smart.\nSmart($x, True) && Round($x, True) >>> Kind($x, True) ::: Smart, round things are kind.\nRound($x, True) && Big($x, True) >>> Cold($x, True) ::: Round, big things are cold.\nCold($x, True) >>> Blue($x, True) ::: Cold things are blue.\nQuery:\nBig(Bob, False) ::: Bob is not",
      "Predicates:\nBig($x, bool) ::: Is x big?\nCold($x, bool) ::: Is x cold?\nKind($x, bool) ::: Is x kind?\nRound($x, bool) ::: Is x round?\nSmart($x, bool) ::: Is x smart?\nGreen($x, bool) ::: Is x green?\nBlue($x, bool) ::: Is x blue?\nFacts:\nBig(Bob, True) ::: Bob is big.\nCold(Bob, True) ::: Bob is cold.\nKind(Bob, True) ::: Bob is kind.\nRound(Bob, True) ::: Bob is round.\nSmart(Bob, True) ::: Bob is smart.\nCold(Dave, True) ::: Dave is cold.\nBig(Erin, True) ::: Erin is big.\nGreen(Erin, True) ::: Erin is green.\nBig(Fiona, True) ::: Fiona is big.\nSmart(Fiona, True) ::: Fiona is smart.\nRules:\nBig($x, True) && Green($x, True) >>> Round($x, True) ::: Big, green things are round.\nCold($x, True) && Blue($x, True) >>> Smart($x, True) ::: If something is cold and blue then it is smart.\nSmart($x, True) && Round($x, True) >>> Kind($x, True) ::: Smart, round things are kind.\nRound($x, True) && Big($x, True) >>> Cold($x, True) ::: Round, big things are cold.\nCold($x, True) >>> Blue($x, True) ::: Cold things are blue.\nQuery:\nBig(B",
      "[/code] Predicates:\nBig($x, bool) ::: Is x big?\nCold($x, bool) ::: Is x cold?\nKind($x, bool) ::: Is x kind?\nRound($x, bool) ::: Is x round?\nSmart($x, bool) ::: Is x smart?\nBlue($x, bool) ::: Is x blue?\nFacts:\nBig(Bob, True) ::: Bob is big.\nCold(Bob, True) ::: Bob is cold.\nKind(Bob, True) ::: Bob is kind.\nRound(Bob, True) ::: Bob is round.\nSmart(Bob, True) ::: Bob is smart.\nCold(Dave, True) ::: Dave is cold.\nBig(Erin, True) ::: Erin is big.\nGreen(Erin, True) ::: Erin is green.\nBig(Fiona, True) ::: Fiona is big.\nSmart(Fiona, True) ::: Fiona is smart.\nRules:\nBig($x, True) && Green($x, True) >>> Round($x, True) ::: Big, green things are round.\nCold($x, True) && Blue($x, True) >>> Smart($x, True) ::: If something is cold and blue then it is smart.\nSmart($x, True) && Round($x, True) >>> Kind($x, True) ::: Smart, round things are kind.\nRound($x, True) && Big($x, True) >>> Cold($x, True) ::: Round, big things are cold.\nCold($x, True) >>> Blue($x, True) ::: Cold things are blue.\nQuery:\nBig(Bob, False) ::: Bob is not big",
      "Predicates:\nBig($x, bool) ::: Is x big?\nCold($x, bool) ::: Is x cold?\nGreen($x, bool) ::: Is x green?\nKind($x, bool) ::: Is x kind?\nRound($x, bool) ::: Is x round?\nSmart($x, bool) ::: Is x smart?\nBlue($x, bool) ::: Is x blue?\nFacts:\nBig(Bob, True) ::: Bob is big.\nCold(Bob, True) ::: Bob is cold.\nKind(Bob, True) ::: Bob is kind.\nRound(Bob, True) ::: Bob is round.\nSmart(Bob, True) ::: Bob is smart.\nCold(Dave, True) ::: Dave is cold.\nBig(Erin, True) ::: Erin is big.\nGreen(Erin, True) ::: Erin is green.\nBig(Fiona, True) ::: Fiona is big.\nSmart(Fiona, True) ::: Fiona is smart.\nRules:\nBig($x, True) && Green($x, True) >>> Round($x, True) ::: Big, green things are round.\nCold($x, True) && Blue($x, True) >>> Smart($x, True) ::: If something is cold and blue then it is smart.\nSmart($x, True) && Round($x, True) >>> Kind($x, True) ::: Smart, round things are kind.\nRound($x, True) && Big($x, True) >>> Cold($x, True) ::: Round, big things are cold.\nCold($x, True) >>> Blue($x, True) ::: Cold things are blue.\nQuery:\nBig(B"
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-698_Q16",
    "context": "Bob is big. Bob is red. Bob is smart. Erin is quiet. Fiona is big. Fiona is blue. Fiona is cold. Fiona is smart. Gary is red. Gary is smart. If Bob is quiet then Bob is cold. If someone is red then they are quiet. If someone is red and quiet then they are cold. All kind people are big. If someone is red and blue then they are kind. All cold, quiet people are blue. Cold, big people are kind. If Erin is big then Erin is cold. If someone is cold and blue then they are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is cold.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig($x, bool) ::: Is x big?\nRed($x, bool) ::: Is x red?\nSmart($x, bool) ::: Is x smart?\nQuiet($x, bool) ::: Is x quiet?\nCold($x, bool) ::: Is x cold?\nKind($x, bool) ::: Is x kind?\nBlue($x, bool) ::: Is x blue?\nFacts:\nBig(Bob, True) ::: Bob is big.\nRed(Bob, True) ::: Bob is red.\nSmart(Bob, True) ::: Bob is smart.\nQuiet(Erin, True) ::: Erin is quiet.\nBig(Fiona, True) ::: Fiona is big.\nBlue(Fiona, True) ::: Fiona is blue.\nCold(Fiona, True) ::: Fiona is cold.\nSmart(Fiona, True) ::: Fiona is smart.\nRed(Gary, True) ::: Gary is red.\nSmart(Gary, True) ::: Gary is smart.\nRules:\nQuiet(Bob, True) >>> Cold(Bob, True) ::: If Bob is quiet then Bob is cold.\nRed($x, True) >>> Quiet($x, True) ::: If someone is red then they are quiet.\nRed($x, True) && Quiet($x, True) >>> Cold($x, True) ::: If someone is red and quiet then they are cold.\nKind($x, True) >>> Big($x, True) ::: All kind people are big.\nRed($x, True) && Blue($x, True) >>> Kind($x, True) ::: If someone is red and blue then they are kind.\nCold($x, True",
      "Predicates:\nBig($x, bool) ::: Is x big?\nRed($x, bool) ::: Is x red?\nSmart($x, bool) ::: Is x smart?\nQuiet($x, bool) ::: Is x quiet?\nBlue($x, bool) ::: Is x blue?\nCold($x, bool) ::: Is x cold?\nKind($x, bool) ::: Is x kind?\nFacts:\nBig(Bob, True) ::: Bob is big.\nRed(Bob, True) ::: Bob is red.\nSmart(Bob, True) ::: Bob is smart.\nQuiet(Erin, True) ::: Erin is quiet.\nBig(Fiona, True) ::: Fiona is big.\nBlue(Fiona, True) ::: Fiona is blue.\nCold(Fiona, True) ::: Fiona is cold.\nSmart(Fiona, True) ::: Fiona is smart.\nRed(Gary, True) ::: Gary is red.\nSmart(Gary, True) ::: Gary is smart.\nRules:\nQuiet(Bob, True) >>> Cold(Bob, True) ::: If Bob is quiet then Bob is cold.\nRed($x, True) >>> Quiet($x, True) ::: If someone is red then they are quiet.\nRed($x, True) && Quiet($x, True) >>> Cold($x, True) ::: If someone is red and quiet then they are cold.\nKind($x, True) >>> Big($x, True) ::: All kind people are big.\nRed($x, True) && Blue($x, True) >>> Kind($x, True) ::: If someone is red and blue then they are kind.\nCold($x, True",
      "Predicates:\nBig($x, bool) ::: Is x big?\nRed($x, bool) ::: Is x red?\nSmart($x, bool) ::: Is x smart?\nQuiet($x, bool) ::: Is x quiet?\nCold($x, bool) ::: Is x cold?\nBlue($x, bool) ::: Is x blue?\nKind($x, bool) ::: Is x kind?\nFacts:\nBig(Bob, True) ::: Bob is big.\nRed(Bob, True) ::: Bob is red.\nSmart(Bob, True) ::: Bob is smart.\nQuiet(Erin, True) ::: Erin is quiet.\nBig(Fiona, True) ::: Fiona is big.\nBlue(Fiona, True) ::: Fiona is blue.\nCold(Fiona, True) ::: Fiona is cold.\nSmart(Fiona, True) ::: Fiona is smart.\nRed(Gary, True) ::: Gary is red.\nSmart(Gary, True) ::: Gary is smart.\nRules:\nQuiet(Bob, True) >>> Cold(Bob, True) ::: If Bob is quiet then Bob is cold.\nRed($x, True) >>> Quiet($x, True) ::: If someone is red then they are quiet.\nRed($x, True) && Quiet($x, True) >>> Cold($x, True) ::: If someone is red and quiet then they are cold.\nKind($x, True) >>> Big($x, True) ::: All kind people are big.\nRed($x, True) && Blue($x, True) >>> Kind($x, True) ::: If someone is red and blue then they are kind.\nCold($x, True",
      "[/code]\nPredicates:\nBig($x, bool) ::: Is x big?\nRed($x, bool) ::: Is x red?\nSmart($x, bool) ::: Is x smart?\nQuiet($x, bool) ::: Is x quiet?\nCold($x, bool) ::: Is x cold?\nKind($x, bool) ::: Is x kind?\nBlue($x, bool) ::: Is x blue?\nFacts:\nBig(Bob, True) ::: Bob is big.\nRed(Bob, True) ::: Bob is red.\nSmart(Bob, True) ::: Bob is smart.\nQuiet(Erin, True) ::: Erin is quiet.\nBig(Fiona, True) ::: Fiona is big.\nBlue(Fiona, True) ::: Fiona is blue.\nCold(Fiona, True) ::: Fiona is cold.\nSmart(Fiona, True) ::: Fiona is smart.\nRed(Gary, True) ::: Gary is red.\nSmart(Gary, True) ::: Gary is smart.\nRules:\nQuiet(Bob, True) >>> Cold(Bob, True) ::: If Bob is quiet then Bob is cold.\nRed($x, True) >>> Quiet($x, True) ::: If someone is red then they are quiet.\nRed($x, True) && Quiet($x, True) >>> Cold($x, True) ::: If someone is red and quiet then they are cold.\nKind($x, True) >>> Big($x, True) ::: All kind people are big.\nRed($x, True) && Blue($x, True) >>> Kind($x, True) ::: If someone is red and blue then they are kind.\nCold",
      "Predicates:\nBig($x, bool) ::: Is x big?\nRed($x, bool) ::: Is x red?\nSmart($x, bool) ::: Is x smart?\nQuiet($x, bool) ::: Is x quiet?\nCold($x, bool) ::: Is x cold?\nKind($x, bool) ::: Is x kind?\nFacts:\nBig(Bob, True) ::: Bob is big.\nRed(Bob, True) ::: Bob is red.\nSmart(Bob, True) ::: Bob is smart.\nQuiet(Erin, True) ::: Erin is quiet.\nBig(Fiona, True) ::: Fiona is big.\nBlue(Fiona, True) ::: Fiona is blue.\nCold(Fiona, True) ::: Fiona is cold.\nSmart(Fiona, True) ::: Fiona is smart.\nRed(Gary, True) ::: Gary is red.\nSmart(Gary, True) ::: Gary is smart.\nRules:\nQuiet(Bob, True) >>> Cold(Bob, True) ::: If Bob is quiet then Bob is cold.\nRed($x, True) >>> Quiet($x, True) ::: If someone is red then they are quiet.\nRed($x, True) && Quiet($x, True) >>> Cold($x, True) ::: If someone is red and quiet then they are cold.\nKind($x, True) >>> Big($x, True) ::: All kind people are big.\nRed($x, True) && Blue($x, True) >>> Kind($x, True) ::: If someone is red and blue then they are kind.\nCold($x, True) && Blue($x, True) >>> Smart($x,"
    ]
  }
]
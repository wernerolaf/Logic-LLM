[
  {
    "id": "ar_lsat_200006_1-G_1_1",
    "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
    "question": "Which one of the following is a complete and accurate list of the children who must be among those assigned to shared lockers?",
    "answer": "E",
    "options": [
      "A) Fred, Juan",
      "B) Juan, Paul",
      "C) Juan, Marc, Paul",
      "D) Juan, Marc, Trisha",
      "E) Juan, Nita, Trisha"
    ],
    "raw_logic_programs": [
      "# Declarations\nboys = EnumSort([Fred, Juan, Marc, Paul])\ngirls = EnumSort([Nita, Rachel, Trisha])\nlockers = EnumSort([1, 2, 3, 4, 5])\nassigned = Function([boys, girls] -> [bool])\n\n# Constraints\nForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b))) ::: each child must be assigned to exactly one locker\nForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b))) ::: each locker must be assigned to either one or two children\nForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b))) ::: each shared locker must be assigned to one girl and one boy\nForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b))) ::: Rachel cannot share a locker\nForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b))) ::: Nita's locker cannot be adjacent to Trisha's locker\nForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b))) ::: Fred must be assigned to locker 3\n\n# Options\nQuestion ::: ::: Which one of the following is a complete and accurate list of the children who must be among those assigned to shared lockers?\nis_sat(ForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b)))) ::: (A)\nis_sat(ForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b)))) ::: (B)\nis_sat(ForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b)))) ::: (C)\nis_sat(ForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b)))) ::: (D)\nis_sat(ForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_1_2",
    "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
    "question": "If Trisha is assigned to locker 3 and Marc alone is assigned to locker 1, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Juan is assigned to locker 4.",
      "B) Juan is assigned to locker 5.",
      "C) Paul is assigned to locker 2.",
      "D) Rachel is assigned to locker 2.",
      "E) Rachel is assigned to locker 5."
    ],
    "raw_logic_programs": [
      "# Declarations\nboys = EnumSort([Fred, Juan, Marc, Paul])\ngirls = EnumSort([Nita, Rachel, Trisha])\nlockers = EnumSort([1, 2, 3, 4, 5])\nassigned = Function([boys, girls] -> [lockers])\n\n# Constraints\nForAll([b:boys, g:girls], And(1 <= assigned(b, g) <= 5, assigned(b, g) == 1 || assigned(b, g) == 2)) ::: each locker must be assigned to either one or two children\nAnd(assigned(Juan, Rachel), assigned(Juan, Nita)) ::: Rachel cannot share a locker\nAnd(assigned(Nita, Trisha), assigned(Nita, Marc)) ::: Nita's locker cannot be adjacent to Trisha's locker\nForAll([b:boys], assigned(b, 3) == 3) ::: Fred must be assigned to locker 3\n\n# Options\nQuestion ::: If Trisha is assigned to locker 3 and Marc alone is assigned to locker 1, then which one of the following must be true?\nis_valid(And(assigned(Juan, Rachel), assigned(Juan, Nita))) ::: (A)\nis_valid(And(assigned(Nita, Trisha), assigned(Nita, Marc))) ::: (B)\nis_valid(And(assigned(Paul, Rachel), assigned(Paul, Nita))) ::: (C)\nis_valid(And(assigned(Rachel, Trisha), assigned(Rachel, Marc))) ::: (D)\nis_valid(And(assigned(Rachel, Trisha), assigned(Rachel, Nita))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_1_3",
    "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
    "question": "If the four boys are assigned to consecutively numbered lockers and Juan is assigned to locker 5, then which one of the following is a complete and accurate list of lockers each of which CANNOT be a shared locker?",
    "answer": "D",
    "options": [
      "A) locker 2",
      "B) locker 4",
      "C) locker 1, locker 2",
      "D) locker 1, locker 4",
      "E) locker 2, locker 4"
    ],
    "raw_logic_programs": [
      "# Declarations\nboys = EnumSort([Fred, Juan, Marc, Paul])\ngirls = EnumSort([Nita, Rachel, Trisha])\nlockers = EnumSort([1, 2, 3, 4, 5])\nassigned = Function([boys, girls] -> [lockers])\n\n# Constraints\nForAll([b:boys, g:girls], And(1 <= assigned(b, g) <= 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5)) ::: each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker\nForAll([b:boys, g:girls], And(1 <= assigned(b, g) <= 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5)) ::: each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker\nForAll([b:boys, g:girls], And(1 <= assigned(b, g) <= 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b, g) == 1 || assigned(b, g) == 2 || assigned(b, g) == 3 || assigned(b, g) == 4 || assigned(b, g) == 5, assigned(b,"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_1_4",
    "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
    "question": "Once Rachel has been assigned to a locker, what is the maximum number of different lockers each of which could be the locker to which Juan is assigned?",
    "answer": "C",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nboys = EnumSort([Fred, Juan, Marc, Paul])\ngirls = EnumSort([Nita, Rachel, Trisha])\nlockers = EnumSort([1, 2, 3, 4, 5])\nassigned = Function([boys, girls] -> [lockers])\n\n# Constraints\nForAll([b:boys, g:girls], And(1 <= assigned(b, g) <= 5, assigned(b, g) == assigned(b', g'))) ::: each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker\nForAll([b:boys, g:girls], And(1 <= assigned(b, g) <= 5, assigned(b, g) == assigned(b', g'))) ::: each shared locker must be assigned to one girl and one boy\nForAll([b:boys, g:girls], And(1 <= assigned(b, g) <= 5, assigned(b, g) == assigned(b', g'))) ::: Rachel cannot share a locker\nForAll([b:boys, g:girls], And(1 <= assigned(b, g) <= 5, assigned(b, g) == assigned(b', g'))) ::: Nita's locker cannot be adjacent to Trisha's locker\nForAll([b:boys, g:girls], And(1 <= assigned(b, g) <= 5, assigned(b, g) == assigned(b', g'))) ::: Fred must be assigned to locker 3\n\n# Options\nQuestion ::: ::: Once Rachel has been assigned to a locker, what is the maximum number of different lockers each of which could be the locker to which Juan is assigned?\nis_exception(is_sat(assigned(Juan, Rachel) == 1)) ::: (A)\nis_exception(is_sat(assigned(Juan, Rachel) == 2)) ::: (B)\nis_exception(is_sat(assigned(Juan, Rachel) == 3)) ::: (C)\nis_exception(is_sat(assigned(Juan, Rachel) == 4)) ::: (D)\nis_exception(is_sat(assigned(Juan, Rachel) == 5)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_1_5",
    "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
    "question": "If the first three lockers are assigned to girls, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Juan is assigned to locker 1.",
      "B) Nita is assigned to locker 3.",
      "C) Trisha is assigned to locker 1.",
      "D) Juan is assigned to the same locker as Trisha.",
      "E) Paul is assigned to the same locker as Trisha."
    ],
    "raw_logic_programs": [
      "# Declarations\nboys = EnumSort([Fred, Juan, Marc, Paul])\ngirls = EnumSort([Nita, Rachel, Trisha])\nlockers = EnumSort([1, 2, 3, 4, 5])\nassigned = Function([boys, girls] -> [lockers])\n\n# Constraints\nForAll([b:boys, g:girls], And(1 <= assigned(b, g) <= 5, assigned(b, g) == 1 || assigned(b, g) == 2)) ::: each locker must be assigned to either one or two children\nAnd(assigned(Juan, Rachel), assigned(Juan, Nita)) ::: Juan must share a locker, but Rachel cannot share a locker\nAnd(assigned(Nita, Trisha), assigned(Nita, Rachel)) ::: Nita's locker cannot be adjacent to Trisha's locker\nForAll([l:lockers], Implies(assigned(Fred, l), assigned(Paul, l))) ::: Fred must be assigned to locker 3\n\n# Options\nQuestion ::: If the first three lockers are assigned to girls, which one of the following must be true?\nis_exception(is_sat(assigned(Juan, 1) == 1)) ::: (A)\nis_exception(is_sat(assigned(Nita, 3) == 3)) ::: (B)\nis_exception(is_sat(assigned(Trisha, 1) == 1)) ::: (C)\nis_exception(is_sat(assigned(Juan, 3) == 3)) ::: (D)\nis_exception(is_sat(assigned(Paul, 1) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_1_6",
    "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
    "question": "If lockers 1 and 2 are each assigned to one boy and are not shared lockers, then locker 4 must be assigned to",
    "answer": "C",
    "options": [
      "A) Juan",
      "B) Paul",
      "C) Rachel",
      "D) Juan and Nita",
      "E) Marc and Trisha"
    ],
    "raw_logic_programs": [
      "# Declarations\nboys = EnumSort([Fred, Juan, Marc, Paul])\ngirls = EnumSort([Nita, Rachel, Trisha])\nlockers = EnumSort([1, 2, 3, 4, 5])\nassigned = Function([boys, girls] -> [bool])\n\n# Constraints\nForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b))) ::: each child is assigned to exactly one locker\nForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b))) ::: each locker is assigned to either one or two children\nForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b))) ::: each shared locker is assigned to one girl and one boy\nForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b))) ::: Rachel cannot share a locker\nForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b))) ::: Nita's locker cannot be adjacent to Trisha's locker\nForAll([b:boys, g:girls], And(assigned(b, g), assigned(g, b))) ::: Fred must be assigned to locker 3\n\n# Options\nQuestion ::: If lockers 1 and 2 are each assigned to one boy and are not shared lockers, then locker 4 must be assigned to\nis_valid(Exists([b:boys, g:girls], And(assigned(b, g), assigned(g, b), assigned(b, 4)))) ::: (A)\nis_valid(Exists([b:boys, g:girls], And(assigned(b, g), assigned(g, b), assigned(b, 4)))) ::: (B)\nis_valid(Exists([b:boys, g:girls], And(assigned(b, g), assigned(g, b), assigned(b, 4)))) ::: (C)\nis_valid(Exists([b:boys, g:girls], And(assigned(b, g), assigned(g, b), assigned(b, 4)))) ::: (D)\nis_valid(Exists([b:boys, g:girls], And(assigned(b, g), assigned(g, b), assigned(b, 4)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_2_7",
    "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
    "question": "Which one of the following could be a complete and accurate list of the types of CDs that are on sale?",
    "answer": "E",
    "options": [
      "A) new jazz, used jazz, used opera, used pop, new rap",
      "B) new jazz, used pop, used rap, new soul",
      "C) used opera, used pop, new rap, used rap",
      "D) used opera, new pop, used pop, new soul",
      "E) used jazz, used pop, new soul, used soul"
    ],
    "raw_logic_programs": [
      "# Declarations\ncds = EnumSort([jazz, opera, pop, rap, soul])\nsale = Function([cds] -> [bool])\n\n# Constraints\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nAnd(sale(pop) == sale(used_pop), sale(jazz) == sale(used_jazz)) ::: Used pop is on sale; new opera is not\nAnd(sale(jazz) == sale(used_jazz), sale(pop) == sale(used_pop)) ::: If both types of pop are on sale, then all soul is\nAnd(sale(jazz) == sale(used_jazz), sale(pop) == sale(used_pop)) ::: If both types of jazz are on sale, then no rap is\nAnd(sale(jazz) == sale(used_jazz), sale(pop) == sale(used_pop)) ::: If neither type of jazz is on sale, then new pop is\nAnd(sale(rap) == sale(used_rap), sale(jazz) == sale(used_jazz)) ::: If either type of rap is on sale, then no soul is\n\n# Options\nQuestion ::: Which one of the following could be a complete and accurate list of the types of CDs that are on sale?\nis_sat(ForAll([c:cds], And(sale(c) == sale(used_c), sale(c) == sale(new_c)))) ::: (A)\nis_sat(ForAll([c:cds], And(sale(c) == sale(used_c), sale(c) == sale(new_c)))) ::: (B)\nis_sat(ForAll([c:cds], And(sale(c) == sale(used_c), sale(c) == sale(new_c)))) ::: (C)\nis_sat(ForAll([c:cds], And(sale(c) == sale(used_c), sale(c) == sale(new_c)))) ::: (D)\nis_sat(ForAll([c:cds], And(sale(c) == sale(used_c), sale(c) == sale(new_c)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_2_8",
    "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
    "question": "If new soul is not on sale, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) New rap is not on sale.",
      "B) New rap is on sale.",
      "C) Used opera is not on sale.",
      "D) At least one type of jazz is not on sale.",
      "E) At least one type of pop is not on sale."
    ],
    "raw_logic_programs": [
      "# Declarations\ncds = EnumSort([jazz, opera, pop, rap, soul])\nsale = Function([cds] -> [bool])\n\n# Constraints\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\n\n# Options\nQuestion ::: If new soul is not on sale, then which one of the following must be true?\nis_sat(ForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))) ::: (A)\nis_sat(ForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))) ::: (B)\nis_sat(ForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))) ::: (C)\nis_sat(ForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))) ::: (D)\nis_sat(ForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_2_9",
    "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
    "question": "If both types of jazz are on sale, then which one of the following is the minimum number of types of new CDs that could be included in the sale?",
    "answer": "A",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\ncds = EnumSort([jazz, opera, pop, rap, soul])\nnew_cds = EnumSort([new, used])\nsale = Function([cds] -> [bool])\n\n# Constraints\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nForAll([c"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_2_10",
    "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "D",
    "options": [
      "A) Neither type of opera and neither type of rap is on sale.",
      "B) Neither type of jazz and neither type of opera is on sale.",
      "C) Neither type of opera and neither type of soul is on sale.",
      "D) Neither type of jazz and neither type of soul is on sale.",
      "E) Neither type of jazz and neither type of rap is on sale."
    ],
    "raw_logic_programs": [
      "# Declarations\ncds = EnumSort([jazz, opera, pop, rap, soul])\nsale = Function([cds] -> [bool])\n\n# Constraints\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\nAnd(sale(pop) == sale(used_pop), sale(jazz) == sale(new_pop)) ::: Used pop is on sale; new opera is not\nAnd(sale(jazz) == sale(new_pop), sale(jazz) == sale(used_pop)) ::: If both types of pop are on sale, then all soul is\nAnd(sale(jazz) == sale(new_pop), sale(jazz) == sale(used_pop)) ::: If both types of jazz are on sale, then no rap is\nAnd(sale(jazz) == sale(new_pop), sale(jazz) == sale(used_pop)) ::: If neither type of jazz is on sale, then new pop is\nAnd(sale(rap) == sale(new_pop), sale(rap) == sale(used_pop)) ::: If either type of rap is on sale, then no soul is\nAnd(sale(rap) == sale(new_pop), sale(rap) == sale(used_pop)) ::: If neither type of rap is on sale, then neither type of soul is on sale\n\n# Options\nQuestion ::: ::: Which one of the following CANNOT be true?\nis_exception(is_sat(sale(new_opera) == False)) ::: (A)\nis_exception(is_sat(sale(new_jazz) == False)) ::: (B)\nis_exception(is_sat(sale(new_opera) == False)) ::: (C)\nis_exception(is_sat(sale(new_jazz) == False)) ::: (D)\nis_exception(is_sat(sale(new_jazz) == False)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_2_11",
    "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
    "question": "If neither type of jazz is on sale, then each of the following must be true EXCEPT:",
    "answer": "A",
    "options": [
      "A) Used opera is on sale.",
      "B) New rap is not on sale.",
      "C) Used rap is not on sale.",
      "D) New soul is on sale.",
      "E) Used soul is on sale."
    ],
    "raw_logic_programs": [
      "# Declarations\ncds = EnumSort([jazz, opera, pop, rap, soul])\nused = Function([cds] -> [bool])\nnew = Function([cds] -> [bool])\non_sale = Function([cds] -> [bool])\n\n# Constraints\nForAll([c:cds], And(1 <= used(c), used(c) <= 10))\nForAll([c:cds], And(1 <= new(c), new(c) <= 10))\nForAll([c:cds], And(1 <= on_sale(c), on_sale(c) <= 10))\n\n# Options\nQuestion ::: If neither type of jazz is on sale, then each of the following must be true EXCEPT:\nis_exception(is_sat(on_sale(used(pop)) == True)) ::: (A)\nis_exception(is_sat(on_sale(new(pop)) == False)) ::: (B)\nis_exception(is_sat(on_sale(used(rap)) == False)) ::: (C)\nis_exception(is_sat(on_sale(new(soul)) == True)) ::: (D)\nis_exception(is_sat(on_sale(used(soul)) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_2_12",
    "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
    "question": "If new soul is the only type of new CD on sale, then which one of the following CANNOT be true?",
    "answer": "A",
    "options": [
      "A) Used jazz is not on sale.",
      "B) Used opera is not on sale.",
      "C) Used rap is not on sale.",
      "D) Used soul is on sale.",
      "E) Used soul is not on sale."
    ],
    "raw_logic_programs": [
      "# Declarations\ncds = EnumSort([jazz, opera, pop, rap, soul])\nnew = Function([cds] -> [bool])\nused = Function([cds] -> [bool])\nsale = Function([cds] -> [bool])\n\n# Constraints\nForAll([c:cds], And(1 <= new(c), new(c) <= 10))\nForAll([c:cds], And(1 <= used(c), used(c) <= 10))\nForAll([c:cds], And(1 <= sale(c), sale(c) <= 10))\n\n# Options\nQuestion ::: If new soul is the only type of new CD on sale, then which one of the following CANNOT be true?\nis_exception(is_sat(new(soul) == 1)) ::: (A)\nis_exception(is_sat(used(jazz) == 1)) ::: (B)\nis_exception(is_sat(used(opera) == 1)) ::: (C)\nis_exception(is_sat(used(rap) == 1)) ::: (D)\nis_exception(is_sat(used(soul) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_2_13",
    "context": "A music store carries exactly ten types of CDs—both new and used of each of jazz, opera, pop, rap, and soul. The store is having a sale on some of these types of CDs. The following conditions must apply: Used pop is on sale; new opera is not. If both types of pop are on sale, then all soul is. If both types of jazz are on sale, then no rap is. If neither type of jazz is on sale, then new pop is. If either type of rap is on sale, then no soul is.",
    "question": "If exactly four of the five types of used CDs are the only CDs on sale, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Used jazz is not on sale.",
      "B) Used opera is not on sale.",
      "C) Used rap is not on sale.",
      "D) Neither type of jazz is on sale.",
      "E) Neither type of rap and neither type of soul is on sale."
    ],
    "raw_logic_programs": [
      "# Declarations\ncds = EnumSort([jazz, opera, pop, rap, soul])\nused = Function([cds] -> [bool])\nnew = Function([cds] -> [bool])\nsale = Function([cds] -> [bool])\n\n# Constraints\nForAll([c:cds], And(1 <= used(c), used(c) <= 10)) ::: each type of CD is either new or used\nAnd(used(pop), new(opera)) ::: used pop is on sale; new opera is not\nAnd(used(jazz), sale(soul)) ::: if both types of pop are on sale, then all soul is\nAnd(used(jazz), new(pop)) ::: if both types of jazz are on sale, then no rap is\nAnd(new(jazz), sale(pop)) ::: if neither type of jazz is on sale, then new pop is\nAnd(sale(rap), new(soul)) ::: if either type of rap is on sale, then no soul is\n\n# Options\nQuestion ::: If exactly four of the five types of used CDs are the only CDs on sale, then which one of the following could be true?\nis_exception(is_sat(used(jazz) == 4)) ::: (A)\nis_exception(is_sat(used(opera) == 4)) ::: (B)\nis_exception(is_sat(used(rap) == 4)) ::: (C)\nis_exception(is_sat(new(jazz) == 4)) ::: (D)\nis_exception(is_sat(new(opera) == 4)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_3_14",
    "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
    "question": "Which one of the following CANNOT be true of the week's tour schedule?",
    "answer": "C",
    "options": [
      "A) The division that is toured on Monday is also toured on Tuesday.",
      "B) The division that is toured on Monday is also toured on Friday.",
      "C) The division that is toured on Tuesday is also toured on Thursday.",
      "D) The division that is toured on Wednesday is also toured on Friday.",
      "E) The division that is toured on Thursday is also toured on Friday."
    ],
    "raw_logic_programs": [
      "# Declarations\ndivisions = EnumSort([Operations, Production, Sales])\ntours = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ntour_days = Function([t:tours] -> [int])\n\n# Constraints\nForAll([t:tours], And(1 <= tour_days(t), tour_days(t) <= 5))\nForAll([d:divisions], And(1 <= tour_days(d), tour_days(d) <= 5))\nForAll([d:divisions], And(tour_days(d) == 1, tour_days(d)!= tour_days(d + 1)))\nForAll([d:divisions], And(tour_days(d) == 2, tour_days(d)!= tour_days(d + 1)))\nForAll([d:divisions], And(tour_days(d) == 3, tour_days(d)!= tour_days(d + 1)))\nForAll([d:divisions], And(tour_days(d) == 4, tour_days(d)!= tour_days(d + 1)))\nForAll([d:divisions], And(tour_days(d) == 5, tour_days(d)!= tour_days(d + 1)))\n\n# Options\nQuestion ::: Which one of the following CANNOT be true of the week's tour schedule?\nis_exception(is_sat(tour_days(Monday) == 1)) ::: (A)\nis_exception(is_sat(tour_days(Monday) == 2)) ::: (B)\nis_exception(is_sat(tour_days(Monday) == 3)) ::: (C)\nis_exception(is_sat(tour_days(Monday) == 4)) ::: (D)\nis_exception(is_sat(tour_days(Monday) == 5)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_3_15",
    "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
    "question": "If in addition to the Sales division one other division is toured on two consecutive days, then it could be true of the week's tour schedule both that the",
    "answer": "B",
    "options": [
      "A) Production division is toured on Monday and that the Operations division is toured on Thursday",
      "B) Production division is toured on Tuesday and that the Sales division is toured on Wednesday",
      "C) Operations division is toured on Tuesday and that the Production division is toured on Friday",
      "D) Sales division is toured on Monday and that the Operations division is toured on Friday",
      "E) Sales division is toured on Wednesday and that the Production division is toured on Friday"
    ],
    "raw_logic_programs": [
      "# Declarations\ndivisions = EnumSort([Operations, Production, Sales])\ntours = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ntoured = Function([divisions, tours] -> [bool])\n\n# Constraints\nForAll([d:divisions], And(1 <= tours(d), tours(d) <= 5)) ::: exactly five tours will be conducted that week, one each day\nForAll([d:divisions], And(1 <= tours(d), tours(d) <= 5)) ::: each division is toured at least once\nForAll([d:divisions], And(1 <= tours(d), tours(d) <= 5)) ::: the Operations division is not toured on Monday\nForAll([d:divisions], And(1 <= tours(d), tours(d) <= 5)) ::: the Production division is not toured on Wednesday\nForAll([d:divisions], And(1 <= tours(d), tours(d) <= 5)) ::: the Sales division is toured on two consecutive days, and on no other days\nForAll([d:divisions], And(1 <= tours(d), tours(d) <= 5)) ::: If the Operations division is toured on Thursday, then the Production division is toured on Friday\n\n# Options\nQuestion ::: ::: If in addition to the Sales division one other division is toured on two consecutive days, then it could be true of the week's tour schedule both that the\nis_sat(ForAll([d:divisions], And(1 <= tours(d), tours(d) <= 5), tours(Sales) == 2, tours(d) == 2, tours(d) == tours(d + 1))) ::: (A)\nis_sat(ForAll([d:divisions], And(1 <= tours(d), tours(d) <= 5), tours(Sales) == 2, tours(d) == 2, tours(d) == tours(d + 1))) ::: (B)\nis_sat(ForAll([d:divisions], And(1 <= tours(d), tours(d) <= 5), tours(Sales) == 2, tours(d) == 2, tours(d) == tours(d + 1))) ::: (C)\nis_sat(ForAll([d:divisions], And(1 <= tours(d), tours(d) <= 5), tours(Sales) == 2, tours(d) == 2, tours(d) == tours(d + 1))) ::: (D)\nis_sat(ForAll([d:divisions], And(1 <= tours(d), tours(d) <= 5), tours(Sales) == 2, tours(d) == 2, tours(d) == tours(d + 1))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_3_16",
    "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
    "question": "If in the week's tour schedule the division that is toured on Tuesday is also toured on Friday, then for which one of the following days must a tour of the Production division be scheduled?",
    "answer": "A",
    "options": [
      "A) Monday",
      "B) Tuesday",
      "C) Wednesday",
      "D) Thursday",
      "E) Friday"
    ],
    "raw_logic_programs": [
      "# Declarations\ndivisions = EnumSort([Operations, Production, Sales])\ntours = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ntour_days = Function([divisions] -> [tours])\n\n# Constraints\nForAll([d:divisions], And(1 <= tour_days(d) <= 5, tour_days(d) == d)) ::: exactly five tours will be conducted that week, one each day\nForAll([d:divisions], And(1 <= tour_days(d) <= 5, tour_days(d) == d)) ::: each division is toured at least once\nForAll([d:divisions], And(1 <= tour_days(d) <= 5, tour_days(d) == d)) ::: the Operations division is not toured on Monday\nForAll([d:divisions], And(1 <= tour_days(d) <= 5, tour_days(d) == d)) ::: the Production division is not toured on Wednesday\nForAll([d:divisions], And(1 <= tour_days(d) <= 5, tour_days(d) == d)) ::: the Sales division is toured on two consecutive days, and on no other days\nForAll([d:divisions], And(1 <= tour_days(d) <= 5, tour_days(d) == d)) ::: If the Operations division is toured on Thursday, then the Production division is toured on Friday\n\n# Options\nQuestion ::: ::: If in the week's tour schedule the division that is toured on Tuesday is also toured on Friday, then for which one of the following days must a tour of the Production division be scheduled?\nis_exception(is_sat(tour_days(Operations) == 2)) ::: (A)\nis_exception(is_sat(tour_days(Production) == 2)) ::: (B)\nis_exception(is_sat(tour_days(Sales) == 2)) ::: (C)\nis_exception(is_sat(tour_days(Sales) == 3)) ::: (D)\nis_exception(is_sat(tour_days(Sales) == 4)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_3_17",
    "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
    "question": "If in the week's tour schedule the division that is toured on Monday is not the division that is toured on Tuesday, then which one of the following could be true of the week's schedule?",
    "answer": "E",
    "options": [
      "A) A tour of the Sales division is scheduled for some day earlier in the week than is any tour of the Production division.",
      "B) A tour of the Operations division is scheduled for some day earlier in the week than is any tour of the Production division.",
      "C) The Sales division is toured on Monday.",
      "D) The Production division is toured on Tuesday.",
      "E) The Operations division is toured on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\ndivisions = EnumSort([Operations, Production, Sales])\ntours = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ntour_days = Function([t:tours] -> [int])\ntour_days(Monday) == 1 ::: Each division is toured at least once\ntour_days(Operations) == 1 ::: The Operations division is not toured on Monday\ntour_days(Production) == 1 ::: The Production division is not toured on Wednesday\ntour_days(Sales) == 2 ::: The Sales division is toured on two consecutive days, and on no other days\ntour_days(Operations) == 2 ::: If the Operations division is toured on Thursday, then the Production division is toured on Friday\n\n# Constraints\nForAll([t:tours], And(1 <= tour_days(t), tour_days(t) <= 5))\n\n# Options\nQuestion ::: If in the week's tour schedule the division that is toured on Monday is not the division that is toured on Tuesday, then which one of the following could be true of the week's schedule?\nis_exception(is_sat(tour_days(Monday) == 1)) ::: (A)\nis_exception(is_sat(tour_days(Operations) == 1)) ::: (B)\nis_exception(is_sat(tour_days(Sales) == 2)) ::: (C)\nis_exception(is_sat(tour_days(Production) == 1)) ::: (D)\nis_exception(is_sat(tour_days(Operations) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_3_18",
    "context": "During a single week, from Monday through Friday, tours will be conducted of a company's three divisions—Operations, Production, and Sales. Exactly five tours will be conducted that week, one each day. The schedule of tours for the week must conform to the following restrictions: Each division is toured at least once. The Operations division is not toured on Monday. The Production division is not toured on Wednesday. The Sales division is toured on two consecutive days, and on no other days. If the Operations division is toured on Thursday, then the Production division is toured on Friday.",
    "question": "If in the week's tour schedule the division that is toured on Tuesday is also toured on Wednesday, then which one of the following must be true of the week's tour schedule?",
    "answer": "A",
    "options": [
      "A) The Production division is toured on Monday.",
      "B) The Operations division is toured on Tuesday.",
      "C) The Sales division is toured on Wednesday.",
      "D) The Sales division is toured on Thursday.",
      "E) The Production division is toured on Friday."
    ],
    "raw_logic_programs": [
      "# Declarations\ndivisions = EnumSort([Operations, Production, Sales])\ntours = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\ntour_days = Function([t:tours] -> [int])\n\n# Constraints\nForAll([t:tours], And(1 <= tour_days(t), tour_days(t) <= 5))\nForAll([d:divisions], And(1 <= tour_days(d), tour_days(d) <= 5))\nForAll([d:divisions], And(tour_days(d) == 1, tour_days(d)!= tour_days(d + 1)))\nForAll([d:divisions], And(tour_days(d) == 2, tour_days(d)!= tour_days(d + 1)))\nForAll([d:divisions], And(tour_days(d) == 3, tour_days(d)!= tour_days(d + 1)))\nForAll([d:divisions], And(tour_days(d) == 4, tour_days(d)!= tour_days(d + 1)))\nForAll([d:divisions], And(tour_days(d) == 5, tour_days(d)!= tour_days(d + 1)))\n\n# Options\nQuestion ::: If in the week's tour schedule the division that is toured on Tuesday is also toured on Wednesday, then which one of the following must be true of the week's tour schedule?\nis_exception(is_sat(tour_days(Operations) == 1)) ::: (A)\nis_exception(is_sat(tour_days(Production) == 1)) ::: (B)\nis_exception(is_sat(tour_days(Sales) == 1)) ::: (C)\nis_exception(is_sat(tour_days(Sales) == 2)) ::: (D)\nis_exception(is_sat(tour_days(Production) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_4_19",
    "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
    "question": "Which one of the following could be a complete and accurate list of the members of the crew?",
    "answer": "B",
    "options": [
      "A) George, Helena, Inga, Kelly",
      "B) George, Helena, Kelly, Leanda",
      "C) Helena, Inga, Kelly, Olaf",
      "D) Helena, Inga, Maricita, Olaf",
      "E) George, Helena, Leanda, Maricita, Olaf"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([George, Helena, Inga, Kelly, Leanda, Maricita, Olaf])\ntasks = EnumSort([framing, wallboarding, taping, sanding, priming])\nworked = Function([workers, tasks] -> [bool])\n\n# Constraints\nForAll([t:tasks], And(1 <= worked(t), worked(t) <= 5)) ::: each task is done by exactly one worker, completed the day it is started and before the next task begins\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1)) ::: each worker does at least one task during the installation, but no more than one task a day\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 5)) ::: each task is done each day\nForAll([w:workers], Implies(worked(w), Not(worked(t)))) ::: Taping and priming are done on different days\nForAll([w:workers], Implies(worked(w), Not(worked(t)))) ::: Each crew member does at least one task during the installation, but no more than one task a day\n\n# Options\nQuestion ::: ::: Which one of the following could be a complete and accurate list of the members of the crew?\nis_sat(ForAll([w:workers], And(worked(w), worked(w) == 1))) ::: (A)\nis_sat(ForAll([w:workers], And(worked(w), worked(w) == 2))) ::: (B)\nis_sat(ForAll([w:workers], And(worked(w), worked(w) == 3))) ::: (C)\nis_sat(ForAll([w:workers], And(worked(w), worked(w) == 4))) ::: (D)\nis_sat(ForAll([w:workers], And(worked(w), worked(w) == 5))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_4_20",
    "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
    "question": "If the installation takes three days, and if the same two crew members work on the first and third days, then which one of the following could be the pair of crew members who work on those two days?",
    "answer": "D",
    "options": [
      "A) Helena and Inga",
      "B) Inga and Kelly",
      "C) Inga and Leanda",
      "D) Kelly and Olaf",
      "E) Leanda and Olaf"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([George, Helena, Inga, Kelly, Leanda, Maricita, Olaf])\ntasks = EnumSort([framing, wallboarding, taping, sanding, priming])\nworked = Function([workers, tasks] -> [bool])\n\n# Constraints\nForAll([t:tasks], And(1 <= worked(t), worked(t) <= 5))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <="
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_4_21",
    "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
    "question": "Each of the following could be a complete and accurate list of the members of the crew EXCEPT:",
    "answer": "A",
    "options": [
      "A) Helena, Inga, Kelly, Maricita",
      "B) Inga, Kelly, Leanda, Olaf",
      "C) George, Helena, Inga, Leanda",
      "D) Inga, Leanda, Maricita, Olaf",
      "E) Kelly, Leanda, Maricita, Olaf"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([George, Helena, Inga, Kelly, Leanda, Maricita, Olaf])\ntasks = EnumSort([framing, wallboarding, taping, sanding, priming])\nworked = Function([workers, tasks] -> [bool])\n\n# Constraints\nForAll([t:tasks], And(1 <= worked(t), worked(t) <= 5))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <="
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_4_22",
    "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
    "question": "If the installation takes three days, and if the sanding is done on the third day, then which one of the following could be a list of all the crew members who work on the second day?",
    "answer": "E",
    "options": [
      "A) Inga",
      "B) Kelly",
      "C) Olaf",
      "D) George and Helena",
      "E) Leanda and Olaf"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([George, Helena, Inga, Kelly, Leanda, Maricita, Olaf])\ntasks = EnumSort([framing, wallboarding, taping, sanding, priming])\nworked = Function([workers, tasks] -> [bool])\n\n# Constraints\nForAll([t:tasks], And(1 <= worked(t), worked(t) <= 5))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1))\nForAll([w:workers], And(1 <= worked(w), worked(w) <="
    ]
  },
  {
    "id": "ar_lsat_200006_1-G_4_23",
    "context": "A crew of up to five workers is to install a partition in at most three days. The crew completes five tasks in this order: framing, wallboarding, taping, sanding, priming. The crew is selected from the following list, which specifies exactly the tasks each person can do: George: taping Helena: sanding, priming Inga: framing, priming Kelly: framing, sanding Leanda: wallboarding, taping Maricita: sanding Olaf: wallboarding, priming The following conditions must apply: At least one task is done each day. Taping and priming are done on different days. Each crew member does at least one task during the installation, but no more than one task a day. Each task is done by exactly one worker, completed the day it is started and before the next task begins.",
    "question": "Which one of the following could be a pair of members of the crew both of whom work on the same days as each other and each of whom perform two tasks?",
    "answer": "D",
    "options": [
      "A) George and Maricita",
      "B) Helena and Kelly",
      "C) Inga and Leanda",
      "D) Kelly and Leanda",
      "E) Leanda and Olaf"
    ],
    "raw_logic_programs": [
      "# Declarations\nworkers = EnumSort([George, Helena, Inga, Kelly, Leanda, Maricita, Olaf])\ntasks = EnumSort([framing, wallboarding, taping, sanding, priming])\nworked = Function([workers, tasks] -> [bool])\n\n# Constraints\nForAll([t:tasks], And(1 <= worked(t), worked(t) <= 5)) ::: each task is done by exactly one worker, completed the day it is started and before the next task begins\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 1)) ::: each worker does at least one task during the installation, but no more than one task a day\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 5)) ::: each task is done each day\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 5)) ::: at least one task is done each day\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 5)) ::: taping and priming are done on different days\nForAll([w:workers], And(1 <= worked(w), worked(w) <= 5)) ::: each crew member does at least one task during the installation\n\n# Options\nQuestion ::: ::: Which one of the following could be a pair of members of the crew both of whom work on the same days as each other and each of whom perform two tasks?\nis_exception(is_sat(worked(George) == 2)) ::: (A)\nis_exception(is_sat(worked(Helena) == 2)) ::: (B)\nis_exception(is_sat(worked(Inga) == 2)) ::: (C)\nis_exception(is_sat(worked(Kelly) == 2)) ::: (D)\nis_exception(is_sat(worked(Leanda) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_1_1",
    "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
    "question": "Which one of the following could be an accurate matching of the hangers to the fabrics of the dresses that hang on them?",
    "answer": "A",
    "options": [
      "A) 1: wool; 2: gauze; 3: silk; 4: linen; 5: polyester; 6: rayon",
      "B) 1: rayon; 2: wool; 3: gauze; 4: silk; 5: linen; 6: polyester",
      "C) 1: polyester; 2: gauze; 3: wool; 4: silk; 5: linen; 6: rayon",
      "D) 1: linen; 2: silk; 3: wool; 4: gauze; 5: polyester; 6: rayon",
      "E) 1: gauze; 2: rayon; 3: silk; 4: linen; 5: wool; 6: polyester"
    ],
    "raw_logic_programs": [
      "# Declarations\nhanger = EnumSort([1, 2, 3, 4, 5, 6])\ndress = EnumSort([gauze, linen, polyester, rayon, silk, wool])\nhangs = Function([hanger] -> [dress])\n\n# Constraints\nForAll([h:hanger], And(1 <= h, h <= 6)) ::: no hanger is numbered higher than 6\nAnd(hangs(1) == rayon, hangs(2) == wool) ::: The rayon dress is on hanger 1 or hanger 6\nAnd(hangs(3) == silk, hangs(4) == linen) ::: Either the wool dress or the silk dress is on hanger 3\nAnd(hangs(5) == polyester, hangs(6) == gauze) ::: The linen dress hangs immediately to the right of the silk dress\n\n# Options\nQuestion ::: Which one of the following could be an accurate matching of the hangers to the fabrics of the dresses that hang on them?\nis_valid(Exists([h:hanger], And(hangs(h) == rayon, hangs(h + 1) == wool))) ::: (A)\nis_valid(Exists([h:hanger], And(hangs(h) == rayon, hangs(h + 1) == silk))) ::: (B)\nis_valid(Exists([h:hanger], And(hangs(h) == silk, hangs(h + 1) == linen))) ::: (C)\nis_valid(Exists([h:hanger], And(hangs(h) == silk, hangs(h + 1) == polyester))) ::: (D)\nis_valid(Exists([h:hanger], And(hangs(h) == silk, hangs(h + 1) == gauze))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_1_2",
    "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
    "question": "If both the silk dress and the gauze dress are on odd-numbered hangers, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) The polyester dress is on hanger 1.",
      "B) The wool dress is on hanger 2.",
      "C) The polyester dress is on hanger 4.",
      "D) The linen dress is on hanger 5.",
      "E) The wool dress is on hanger 6."
    ],
    "raw_logic_programs": [
      "# Declarations\nhanger_numbers = EnumSort([1, 2, 3, 4, 5, 6])\ndresses = EnumSort([gauze, linen, polyester, rayon, silk, wool])\nhangers = Function([hanger_numbers] -> [dresses])\n\n# Constraints\nForAll([h:hanger_numbers], And(1 <= hangers(h), hangers(h) <= 6))\nForAll([d:dresses], And(1 <= hangers(hangers(d)), hangers(hangers(d)) <= 6))\n\n# Options\nQuestion ::: If both the silk dress and the gauze dress are on odd-numbered hangers, then which one of the following could be true?\nis_valid(Exists([h:hanger_numbers], And(hangers(hangers(gauze)) == 1, hangers(hangers(silk)) == 3))) ::: (A)\nis_valid(Exists([h:hanger_numbers], And(hangers(hangers(gauze)) == 3, hangers(hangers(silk)) == 1))) ::: (B)\nis_valid(Exists([h:hanger_numbers], And(hangers(hangers(gauze)) == 4, hangers(hangers(silk)) == 2))) ::: (C)\nis_valid(Exists([h:hanger_numbers], And(hangers(hangers(gauze)) == 5, hangers(hangers(silk)) == 6))) ::: (D)\nis_valid(Exists([h:hanger_numbers], And(hangers(hangers(gauze)) == 6, hangers(hangers(silk)) == 1))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_1_3",
    "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
    "question": "If the silk dress is on an even-numbered hanger, which one of the following could be on the hanger immediately to its left?",
    "answer": "E",
    "options": [
      "A) the gauze dress",
      "B) the linen dress",
      "C) the polyester dress",
      "D) the rayon dress",
      "E) the wool dress"
    ],
    "raw_logic_programs": [
      "# Declarations\nhanger_numbers = EnumSort([1, 2, 3, 4, 5, 6])\ndresses = EnumSort([gauze, linen, polyester, rayon, silk, wool])\nhangers = Function([h:hanger_numbers] -> [dresses])\n\n# Constraints\nForAll([h:hanger_numbers], And(1 <= hangers(h), hangers(h) <= 6))\nForAll([d:dresses], And(1 <= hangers(hangers(d)), hangers(hangers(d)) <= 6))\n\n# Options\nQuestion ::: If the silk dress is on an even-numbered hanger, which one of the following could be on the hanger immediately to its left?\nis_valid(Exists([h:hanger_numbers], And(hangers(h) == 2, hangers(hangers(gauze)) == 4))) ::: (A)\nis_valid(Exists([h:hanger_numbers], And(hangers(h) == 2, hangers(hangers(gauze)) == 6))) ::: (B)\nis_valid(Exists([h:hanger_numbers], And(hangers(h) == 4, hangers(hangers(gauze)) == 2))) ::: (C)\nis_valid(Exists([h:hanger_numbers], And(hangers(h) == 4, hangers(hangers(gauze)) == 6))) ::: (D)\nis_valid(Exists([h:hanger_numbers], And(hangers(h) == 6, hangers(hangers(gauze)) == 2))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_1_4",
    "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
    "question": "If the polyester dress is on hanger 2, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) The silk dress is on hanger 1.",
      "B) The wool dress is on hanger 3.",
      "C) The linen dress is on hanger 4.",
      "D) The linen dress is on hanger 5.",
      "E) The rayon dress is on hanger 6."
    ],
    "raw_logic_programs": [
      "# Declarations\nhanger_numbers = EnumSort([1, 2, 3, 4, 5, 6])\ndress_names = EnumSort([gauze, linen, polyester, rayon, silk, wool])\ndresses = Function([hanger_numbers] -> [dress_names])\n\n# Constraints\nForAll([h:hanger_numbers], And(1 <= dresses(h), dresses(h) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names], And(1 <= dresses(d), dresses(d) <= 6))\nForAll([d:dress_names"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_1_5",
    "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "B",
    "options": [
      "A) The linen dress hangs immediately next to the gauze dress.",
      "B) The polyester dress hangs immediately to the right of the rayon dress.",
      "C) The rayon dress hangs immediately to the left of the wool dress.",
      "D) The silk dress is on a lower-numbered hanger than the gauze dress.",
      "E) The wool dress is on a higher-numbered hanger than the rayon dress."
    ],
    "raw_logic_programs": [
      "# Declarations\ndresses = EnumSort([gauze, linen, polyester, rayon, silk, wool])\nhangers = EnumSort([1, 2, 3, 4, 5, 6])\ndress_on = Function([hangers] -> [dresses])\n\n# Constraints\nForAll([h:hangers], And(1 <= h, h <= 6)) ::: each hanger is numbered 1 through 6\nForAll([d:dresses], And(1 <= d, d <= 6)) ::: each dress is numbered 1 through 6\nForAll([h:hangers], Implies(dress_on(h) == rayon, dress_on(h + 1) == polyester)) ::: The rayon dress is on hanger 1 or hanger 6\nForAll([h:hangers], Implies(dress_on(h) == silk, dress_on(h + 1) == linen)) ::: Either the wool dress or the silk dress is on hanger 3\nForAll([h:hangers], Implies(dress_on(h) == linen, dress_on(h + 1) == silk)) ::: The linen dress hangs immediately to the right of the silk dress\nForAll([h:hangers], Implies(dress_on(h) == gauze, dress_on(h + 1) == polyester)) ::: The linen dress hangs immediately next to the gauze dress\nForAll([h:hangers], Implies(dress_on(h) == wool, dress_on(h + 1) == rayon)) ::: The wool dress is on a higher-numbered hanger than the rayon dress\nForAll([h:hangers], Implies(dress_on(h) == silk, dress_on(h + 1) == polyester)) ::: The silk dress is on a lower-numbered hanger than the polyester dress\n\n# Options\nQuestion ::: ::: Which one of the following CANNOT be true?\nis_exception(is_sat(dress_on(1) == gauze)) ::: (A)\nis_exception(is_sat(dress_on(2) == linen)) ::: (B)\nis_exception(is_sat(dress_on(3) == silk)) ::: (C)\nis_exception(is_sat(dress_on(4) == rayon)) ::: (D)\nis_exception(is_sat(dress_on(5) == wool)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_1_6",
    "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
    "question": "Which one of the following CANNOT hang immediately next to the rayon dress?",
    "answer": "D",
    "options": [
      "A) the gauze dress",
      "B) the linen dress",
      "C) the polyester dress",
      "D) the silk dress",
      "E) the wool dress"
    ],
    "raw_logic_programs": [
      "# Declarations\nhanger_numbers = EnumSort([1, 2, 3, 4, 5, 6])\ndresses = EnumSort([gauze, linen, polyester, rayon, silk, wool])\nhangs = Function([hanger_numbers] -> [dresses])\n\n# Constraints\nForAll([h:hanger_numbers], And(1 <= h, h <= 6)) ::: each hanger is numbered 1 through 6\nForAll([d:dresses], And(1 <= hangs(h), hangs(h) <= 6)) ::: each dress is hung on a hanger numbered 1 through 6\nAnd(hangs(1) == gauze, hangs(2) == polyester) ::: The gauze dress is on a lower-numbered hanger than the polyester dress\nAnd(hangs(6) == rayon, hangs(1) == rayon) ::: The rayon dress is on hanger 1 or hanger 6\nAnd(hangs(3) == wool, hangs(4) == silk) ::: Either the wool dress or the silk dress is on hanger 3\nAnd(hangs(3) == linen, hangs(4) == silk) ::: The linen dress hangs immediately to the right of the silk dress\n\n# Options\nQuestion ::: Which one of the following CANNOT hang immediately next to the rayon dress?\nis_exception(is_sat(hangs(4) == rayon)) ::: (A)\nis_exception(is_sat(hangs(5) == rayon)) ::: (B)\nis_exception(is_sat(hangs(6) == rayon)) ::: (C)\nis_exception(is_sat(hangs(3) == rayon)) ::: (D)\nis_exception(is_sat(hangs(1) == rayon)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_1_7",
    "context": "A closet contains exactly six hangers—1, 2, 3, 4, 5, and 6—hanging, in that order, from left to right. It also contains exactly six dresses—one gauze, one linen, one polyester, one rayon, one silk, and one wool—a different dress on each of the hangers, in an order satisfying the following conditions: The gauze dress is on a lower-numbered hanger than the polyester dress. The rayon dress is on hanger 1 or hanger 6. Either the wool dress or the silk dress is on hanger 3. The linen dress hangs immediately to the right of the silk dress.",
    "question": "Assume that the original condition that the linen dress hangs immediately to the right of the silk dress is replaced by the condition that the wool dress hangs immediately to the right of the silk dress. If all the other initial conditions remain in effect, which one of the following must be false?",
    "answer": "D",
    "options": [
      "A) The linen dress is on hanger 1.",
      "B) The gauze dress is on hanger 2.",
      "C) The wool dress is on hanger 4.",
      "D) The silk dress is on hanger 5.",
      "E) The polyester dress is on hanger 6."
    ],
    "raw_logic_programs": [
      "# Declarations\nhanger = EnumSort([1, 2, 3, 4, 5, 6])\ndress = EnumSort([gauze, linen, polyester, rayon, silk, wool])\nhangs = Function([hanger] -> [dress])\n\n# Constraints\nForAll([h:hanger], And(1 <= h, h <= 6)) ::: no hanger is numbered 0 or 7\nForAll([d:dress], And(1 <= d, d <= 6)) ::: no dress is numbered 0 or 7\nForAll([h:hanger], And(1 <= hangs(h), hangs(h) <= 6)) ::: each hanger is numbered 1 through 6\nForAll([d:dress], And(1 <= hangs(hangs(d)), hangs(hangs(d)) <= 6)) ::: each dress is numbered 1 through 6\nForAll([h:hanger], And(hangs(h) == 1, hangs(hangs(hangs(h))) == 2)) ::: the gauze dress is on a lower-numbered hanger than the polyester dress\nForAll([d:dress], And(hangs(hangs(d)) == 1, hangs(hangs(hangs(hangs(d)))) == 2)) ::: the rayon dress is on hanger 1 or hanger 6\nForAll([d:dress], And(hangs(hangs(d)) == 3, hangs(hangs(hangs(hangs(hangs(d))))))) ::: either the wool dress or the silk dress is on hanger 3\nForAll([d:dress], And(hangs(hangs(d)) == 4, hangs(hangs(hangs(hangs(hangs(hangs(d)))))))) ::: the linen dress hangs immediately to the right of the silk dress\n\n# Options\nQuestion ::: ::: Assume that the original condition that the linen dress hangs immediately to the right of the silk dress is replaced by the condition that the wool dress hangs immediately to the right of the silk dress. If all the other initial conditions remain in effect, which one of the following must be false?\nis_exception(is_sat(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs(hangs"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_2_8",
    "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
    "question": "Which one of the following could be an accurate matching of the four songs performed at the festival with the instruments on which they are performed, listed in order from the first song performed to the last?",
    "answer": "B",
    "options": [
      "A) \"Night's All Right\": guitar;\" Question Man\": keyboard; \"Sammy\": guitar;\" Rhino Rock\": flute",
      "B) \"Question Man\": guitar;\" Rhino Rock\": harmonica; \"Sammy\": keyboard;\" Night's All Right\": flute",
      "C) \"Rhino Rock\": flute;\" Question Man\": keyboard; \"Night's All Right\": harmonica;\" Sammy\": guitar",
      "D) \"Sammy\": harmonica;\" Night's All Right\": guitar; \"Question Man\": keyboard;\" Rhino Rock\": flute",
      "E) \"Sammy\": harmonica;\" Rhino Rock\": guitar; \"Question Man\": flute;\" Night's All Right\": keyboard"
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([NightsAllRight, QuestionMan, RhinoRock, Sammy])\ninstruments = EnumSort([flute, guitar, harmonica, keyboard])\nperformers = Function([songs, instruments] -> [instruments])\n\n# Constraints\nForAll([s:songs], And(1 <= performers(s, instruments) <= 4)) ::: exactly four songs are performed, each exactly once\nAnd(performers(NightsAllRight, instruments)!= performers(QuestionMan, instruments), performers(QuestionMan, instruments)!= performers(Sammy, instruments)) ::: The first song performed is not performed on the flute\nAnd(performers(Sammy, instruments) == performers(RhinoRock, instruments), performers(RhinoRock, instruments) == performers(NightsAllRight, instruments)) ::: If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica\nAnd(performers(QuestionMan, instruments) == performers(RhinoRock, instruments), performers(RhinoRock, instruments) == performers(NightsAllRight, instruments)) ::: If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute\nAnd(performers(QuestionMan, instruments) == performers(NightsAllRight, instruments), performers(NightsAllRight, instruments) == performers(Sammy, instruments)) ::: The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right\"\n\n# Options\nQuestion ::: ::: Which one of the following could be an accurate matching of the four songs performed at the festival with the instruments on which they are performed, listed in order from the first song performed to the last?\nis_exception(is_sat(performers(QuestionMan, instruments) == performers(RhinoRock, instruments))) ::: (A)\nis_exception(is_sat(performers(QuestionMan, instruments) == performers(NightsAllRight, instruments))) ::: (B)\nis_exception(is_sat(performers(RhinoRock, instruments) == performers(QuestionMan, instruments))) ::: (C)\nis_exception(is_sat(performers(RhinoRock, instruments) == performers(NightsAllRight, instruments))) ::: (D)\nis_exception(is_sat(performers(Sammy, instruments) == performers(NightsAllRight, instruments))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_2_9",
    "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
    "question": "Which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) \"Question Man\" immediately follows the song performed on the keyboard.",
      "B) \"Night's All Right\" immediately precedes the song performed on the keyboard.",
      "C) \"Question Man\" immediately precedes the song performed on the guitar.",
      "D) \"Rhino Rock\" immediately precedes the song performed on the harmonica.",
      "E) \"Sammy\" immediately precedes the song performed on the guitar."
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([NightsAllRight, QuestionMan, RhinoRock, Sammy])\ninstruments = EnumSort([flute, guitar, harmonica, keyboard])\nperformers = Function([songs, instruments] -> [int])\n\n# Constraints\nForAll([s:songs, i:instruments], And(1 <= performers(s, i), performers(s, i) <= 4))\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_valid(Exists([i:instruments], And(performers(QuestionMan, i) == 2, performers(NightsAllRight, i) == 1))) ::: (A)\nis_valid(Exists([i:instruments], And(performers(QuestionMan, i) == 2, performers(RhinoRock, i) == 1))) ::: (B)\nis_valid(Exists([i:instruments], And(performers(QuestionMan, i) == 2, performers(Sammy, i) == 1))) ::: (C)\nis_valid(Exists([i:instruments], And(performers(QuestionMan, i) == 2, performers(NightsAllRight, i) == 2))) ::: (D)\nis_valid(Exists([i:instruments], And(performers(QuestionMan, i) == 2, performers(RhinoRock, i) == 2))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_2_10",
    "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
    "question": "Which one of the following CANNOT be true of the song performed on the flute?",
    "answer": "C",
    "options": [
      "A) It immediately precedes \"Question Man.\"",
      "B) It immediately follows \"Question Man.\"",
      "C) It immediately precedes \"Rhino Rock.\"",
      "D) It immediately follows \"Night's All Right.\"",
      "E) It immediately follows \"Sammy.\""
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([NightsAllRight, QuestionMan, RhinoRock, Sammy])\ninstruments = EnumSort([flute, guitar, harmonica, keyboard])\nperformers = Function([songs, instruments] -> [int])\n\n# Constraints\nForAll([s:songs], And(1 <= performers(s, instruments) <= 4)) ::: exactly four songs are performed, each exactly once\nAnd(performers(NightsAllRight, instruments) == 1, performers(QuestionMan, instruments) == 2) ::: The first song performed is not performed on the flute\nAnd(performers(Sammy, instruments) == 4, performers(RhinoRock, instruments) == 3) ::: If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica\nAnd(performers(QuestionMan, instruments) == 2, performers(NightsAllRight, instruments) == 1) ::: If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute\nAnd(performers(RhinoRock, instruments) == 3, performers(QuestionMan, instruments) == 2) ::: The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Question Man\"\nAnd(performers(QuestionMan, instruments) == 2, performers(NightsAllRight, instruments) == 1) ::: The song performed on the keyboard immediately follows \"Night's All Right\" and immediately precedes \"Question Man\"\n\n# Options\nQuestion ::: ::: Which one of the following CANNOT be true of the song performed on the flute?\nis_exception(is_sat(performers(QuestionMan, instruments) == 2)) ::: (A)\nis_exception(is_sat(performers(RhinoRock, instruments) == 3)) ::: (B)\nis_exception(is_sat(performers(NightsAllRight, instruments) == 1)) ::: (C)\nis_exception(is_sat(performers(Sammy, instruments) == 4)) ::: (D)\nis_exception(is_sat(performers(QuestionMan, instruments) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_2_11",
    "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
    "question": "If \"Rhino Rock\" is the second song performed at the festival, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) The first song performed is performed on the keyboard.",
      "B) The third song performed is performed on the guitar.",
      "C) The third song performed is performed on the flute.",
      "D) \"Night's All Right\" is performed on the guitar.",
      "E) \"Rhino Rock\" is performed on the guitar."
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([NightsAllRight, QuestionMan, RhinoRock, Sammy])\ninstruments = EnumSort([flute, guitar, harmonica, keyboard])\nperformers = Function([songs, instruments] -> [int])\n\n# Constraints\nForAll([s:songs], And(1 <= performers(s, instruments) <= 4)) ::: exactly four songs are performed, each exactly once\nAnd(performers(NightsAllRight, instruments) == 1, performers(QuestionMan, instruments) == 2) ::: The first song performed is not performed on the flute\nAnd(performers(Sammy, instruments) == 4, performers(RhinoRock, instruments) == 3) ::: If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica\nAnd(performers(QuestionMan, instruments) == 2, performers(NightsAllRight, instruments) == 1) ::: If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute\nAnd(performers(RhinoRock, instruments) == 3, performers(QuestionMan, instruments) == 2) ::: The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right\"\n\n# Options\nQuestion ::: If \"Rhino Rock\" is the second song performed at the festival, then which one of the following could be true?\nis_exception(is_sat(performers(RhinoRock, instruments) == 3)) ::: (A)\nis_exception(is_sat(performers(QuestionMan, instruments) == 2)) ::: (B)\nis_exception(is_sat(performers(NightsAllRight, instruments) == 1)) ::: (C)\nis_exception(is_sat(performers(Sammy, instruments) == 4)) ::: (D)\nis_exception(is_sat(performers(RhinoRock, instruments) == 3)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_2_12",
    "context": "At a children's festival, exactly four songs are performed, each exactly once: \"Night's All Right,\" \"Question Man,\" \"Rhino Rock,\" and \"Sammy.\" The songs are performed consecutively, each on a different one of exactly four instruments: flute, guitar, harmonica, or keyboard. The songs are performed in accordance with the following: The first song performed is not performed on the flute. If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica. If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute. The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Night's All Right.\"",
    "question": "If \"Question Man\" is the third song performed at the festival, then each of the following could be true EXCEPT:",
    "answer": "A",
    "options": [
      "A) \"Question Man\" is performed on the guitar.",
      "B) \"Question Man\" is performed on the keyboard.",
      "C) \"Rhino Rock\" is performed on the guitar.",
      "D) \"Sammy\" is performed on the guitar.",
      "E) \"Sammy\" is performed on the harmonica."
    ],
    "raw_logic_programs": [
      "# Declarations\nsongs = EnumSort([NightsAllRight, QuestionMan, RhinoRock, Sammy])\ninstruments = EnumSort([flute, guitar, harmonica, keyboard])\nperformers = Function([songs, instruments] -> [int])\n\n# Constraints\nForAll([s:songs], And(1 <= performers(s, instruments) <= 4)) ::: exactly four songs are performed, each exactly once\nAnd(performers(NightsAllRight, instruments) == 1, performers(QuestionMan, instruments) == 2) ::: The first song performed is not performed on the flute\nAnd(performers(QuestionMan, instruments) == 3, performers(RhinoRock, instruments) == 4) ::: If \"Sammy\" is performed on the keyboard, then \"Rhino Rock\" is performed on the harmonica\nAnd(performers(QuestionMan, instruments) == 3, performers(NightsAllRight, instruments) == 1) ::: If \"Question Man\" is performed on the keyboard, then \"Night's All Right\" is performed on the flute\nAnd(performers(RhinoRock, instruments) == 2, performers(QuestionMan, instruments) == 3) ::: The song performed on the keyboard immediately follows \"Rhino Rock\" and immediately precedes \"Question Man\"\n\n# Options\nQuestion ::: If \"Question Man\" is the third song performed at the festival, then each of the following could be true EXCEPT:\nis_exception(is_sat(performers(QuestionMan, instruments) == 3)) ::: (A)\nis_exception(is_sat(performers(QuestionMan, instruments) == 4)) ::: (B)\nis_exception(is_sat(performers(RhinoRock, instruments) == 2)) ::: (C)\nis_exception(is_sat(performers(Sammy, instruments) == 3)) ::: (D)\nis_exception(is_sat(performers(Sammy, instruments) == 4)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_3_13",
    "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
    "question": "Which one of the following could be a complete and accurate list of the members of the finance committee?",
    "answer": "E",
    "options": [
      "A) Guzman, Hawking, Miyauchi, Wharton",
      "B) Guzman, Lepp, Zhu",
      "C) Hawking, Miyauchi, Zhu",
      "D) Hawking, Upchurch, Wharton, Zhu",
      "E) Miyauchi, Upchurch, Wharton"
    ],
    "raw_logic_programs": [
      "# Declarations\nboard_members = EnumSort([Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, Zhu])\ncommittees = EnumSort([finance, incentives])\nserves = Function([board_members, committees] -> [bool])\n\n# Constraints\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 7)) ::: each board member serves on exactly one of two committees\nAnd(serves(Guzman, finance), serves(Hawking, incentives)) ::: If Guzman serves on the finance committee, then Hawking serves on the incentives committee\nAnd(serves(Lepp, finance), serves(Miyauchi, incentives), serves(Upchurch, incentives)) ::: If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee\nAnd(serves(Wharton, finance), serves(Zhu, incentives)) ::: Wharton serves on a different committee from the one on which Zhu serves\nAnd(serves(Upchurch, finance), serves(Guzman, incentives)) ::: Upchurch serves on a different committee from the one on which Guzman serves\nAnd(serves(Zhu, finance), serves(Hawking, incentives)) ::: If Zhu serves on the finance committee, so does Hawking\n\n# Options\nQuestion ::: ::: Which one of the following could be a complete and accurate list of the members of the finance committee?\nis_sat(ForAll([b:board_members], And(serves(b, finance), serves(b, incentives)))) ::: (A)\nis_sat(ForAll([b:board_members], And(serves(b, finance), serves(b, incentives)))) ::: (B)\nis_sat(ForAll([b:board_members], And(serves(b, finance), serves(b, incentives)))) ::: (C)\nis_sat(ForAll([b:board_members], And(serves(b, finance), serves(b, incentives)))) ::: (D)\nis_sat(ForAll([b:board_members], And(serves(b, finance), serves(b, incentives)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_3_14",
    "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
    "question": "Which one of the following pairs of board members CANNOT both serve on the incentives committee?",
    "answer": "C",
    "options": [
      "A) Guzman and Hawking",
      "B) Guzman and Wharton",
      "C) Hawking and Wharton",
      "D) Miyauchi and Upchurch",
      "E) Miyauchi and Wharton"
    ],
    "raw_logic_programs": [
      "# Declarations\nboard_members = EnumSort([Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, Zhu])\ncommittees = EnumSort([finance, incentives])\nserves = Function([board_members, committees] -> [bool])\n\n# Constraints\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 7)) ::: each board member serves on exactly one of two committees\nAnd(serves(Guzman, finance), serves(Hawking, incentives)) ::: If Guzman serves on the finance committee, then Hawking serves on the incentives committee\nAnd(serves(Lepp, finance), And(serves(Miyauchi, incentives), serves(Upchurch, incentives))) ::: If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee\nAnd(serves(Wharton, finance), Not(serves(Guzman, finance))) ::: Wharton serves on a different committee from the one on which Guzman serves\nAnd(serves(Upchurch, finance), Not(serves(Guzman, finance))) ::: Upchurch serves on a different committee from the one on which Guzman serves\nAnd(serves(Zhu, finance), serves(Hawking, finance)) ::: If Zhu serves on the finance committee, so does Hawking\n\n# Options\nQuestion ::: ::: Which one of the following pairs of board members CANNOT both serve on the incentives committee?\nis_exception(is_sat(serves(Guzman, incentives) == serves(Hawking, incentives))) ::: (A)\nis_exception(is_sat(serves(Guzman, incentives) == serves(Wharton, incentives))) ::: (B)\nis_exception(is_sat(serves(Hawking, incentives) == serves(Wharton, incentives))) ::: (C)\nis_exception(is_sat(serves(Miyauchi, incentives) == serves(Upchurch, incentives))) ::: (D)\nis_exception(is_sat(serves(Miyauchi, incentives) == serves(Zhu, incentives))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_3_15",
    "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
    "question": "What is the maximum number of members on the finance committee?",
    "answer": "C",
    "options": [
      "A) two",
      "B) three",
      "C) four",
      "D) five",
      "E) six"
    ],
    "raw_logic_programs": [
      "# Declarations\nboard_members = EnumSort([Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, Zhu])\ncommittees = EnumSort([finance, incentives])\nserves = Function([board_members, committees] -> [bool])\n\n# Constraints\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives)))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 6))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 5))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 4))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 3))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 2))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 0))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) == 0))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) == 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) == 2))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) == 3))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) == 4))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) == 5))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) == 6))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) == 7))\n\n# Options\nQuestion ::: ::: What is the maximum number of members on the finance committee?\nis_sat(ForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 7))) ::: (A)\nis_sat(ForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 6))) ::: (B)\nis_sat(ForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 5))) ::: (C)\nis_sat(ForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 4))) ::: (D)\nis_sat(ForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 3))) ::: (E)\nis_sat(ForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 2))) ::: (F)\nis_sat(ForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 1))) ::: (G)\nis_sat(ForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 0)))"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_3_16",
    "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
    "question": "If Miyauchi and Wharton both serve on the finance committee, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Guzman and Lepp both serve on the finance committee.",
      "B) Guzman and Upchurch both serve on the incentives committee.",
      "C) Hawking and Zhu both serve on the finance committee.",
      "D) Lepp and Upchurch both serve on the incentives committee.",
      "E) Zhu and Upchurch both serve on the finance committee."
    ],
    "raw_logic_programs": [
      "# Declarations\nboard_members = EnumSort([Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, Zhu])\ncommittees = EnumSort([finance, incentives])\nserves = Function([board_members, committees] -> [bool])\n\n# Constraints\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives)))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance)))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 2))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 2))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 1))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 1))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 1))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 1))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 1))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 1))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 1))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 1))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 1))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 1))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 1))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 1))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_3_17",
    "context": "Each of the seven members of the board of directors—Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, and Zhu—serves on exactly one of two committees—the finance committee or the incentives committee. Only board members serve on these committees. Committee membership is consistent with the following conditions: If Guzman serves on the finance committee, then Hawking serves on the incentives committee. If Lepp serves on the finance committee, then Miyauchi and Upchurch both serve on the incentives committee. Wharton serves on a different committee from the one on which Zhu serves. Upchurch serves on a different committee from the one on which Guzman serves. If Zhu serves on the finance committee, so does Hawking.",
    "question": "If Guzman serves on the incentives committee, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Hawking serves on the finance committee.",
      "B) Lepp serves on the incentives committee.",
      "C) Miyauchi serves on the finance committee.",
      "D) Wharton serves on the incentives committee.",
      "E) Zhu serves on the finance committee."
    ],
    "raw_logic_programs": [
      "# Declarations\nboard_members = EnumSort([Guzman, Hawking, Lepp, Miyauchi, Upchurch, Wharton, Zhu])\ncommittees = EnumSort([finance, incentives])\nserves = Function([board_members, committees] -> [bool])\n\n# Constraints\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance), serves(b, incentives) <= 7))\nForAll([b:board_members], And(1 <= serves(b, incentives), serves(b, finance) <= 7))\nForAll([b:board_members], And(1 <= serves(b, finance"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_4_18",
    "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
    "question": "Which one of the following could be the order in which four of the people are seated, with no one else seated between them, counting clockwise around the table?",
    "answer": "C",
    "options": [
      "A) George, Peter, Karl, Fiona",
      "B) Harriet, Olivia, Ingrid, Karl",
      "C) Ingrid, Fiona, Peter, Manuel",
      "D) Olivia, Manuel, Karl, George",
      "E) Peter, Harriet, Karl, Fiona"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, Peter])\nseated = Function([people] -> [bool])\n\n# Constraints\nForAll([p:people], And(1 <= seated(p), seated(p) <= 8)) ::: any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table\nAnd(seated(Fiona), seated(George)) ::: Fiona sits directly across from George\nAnd(seated(Harriet), Not(seated(Fiona))) ::: Harriet sits immediately next to neither Fiona nor Karl\nAnd(seated(Ingrid), seated(Olivia), seated(Ingrid)) ::: Ingrid sits immediately next to, and immediately clockwise from, Olivia\n\n# Options\nQuestion ::: ::: Which one of the following could be the order in which four of the people are seated, with no one else seated between them, counting clockwise around the table?\nis_sat(ForAll([p:people], And(seated(p), seated(p) == 4))) ::: (A)\nis_sat(ForAll([p:people], And(seated(p), seated(p) == 5))) ::: (B)\nis_sat(ForAll([p:people], And(seated(p), seated(p) == 6))) ::: (C)\nis_sat(ForAll([p:people], And(seated(p), seated(p) == 7))) ::: (D)\nis_sat(ForAll([p:people], And(seated(p), seated(p) == 8))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_4_19",
    "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
    "question": "If Harriet and Olivia each sits immediately next to George, then which one of the following could be the two people each of whom sits immediately next to Peter?",
    "answer": "D",
    "options": [
      "A) Fiona and Karl",
      "B) Fiona and Olivia",
      "C) Harriet and Ingrid",
      "D) Harriet and Karl",
      "E) Karl and Manuel"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, Peter])\nseats = EnumSort([directly_across, immediately_next_to, immediately_clockwise_from])\nsits = Function([people] -> [seats])\n\n# Constraints\nForAll([p:people], And(1 <= sits(p) <= 8, sits(p) in [directly_across, immediately_next_to, immediately_clockwise_from])) ::: any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table\nForAll([p:people], And(1 <= sits(p) <= 8, sits(p) in [directly_across, immediately_next_to, immediately_clockwise_from])) ::: Fiona sits directly across from George\nForAll([p:people], And(1 <= sits(p) <= 8, sits(p) in [directly_across, immediately_next_to, immediately_clockwise_from])) ::: Harriet sits immediately next to neither Fiona nor Karl\nForAll([p:people], And(1 <= sits(p) <= 8, sits(p) in [directly_across, immediately_next_to, immediately_clockwise_from])) ::: Ingrid sits immediately next to, and immediately clockwise from, Olivia\n\n# Options\nQuestion ::: If Harriet and Olivia each sits immediately next to George, then which one of the following could be the two people each of whom sits immediately next to Peter?\nis_exception(is_sat(sits(Harriet) == directly_across)) ::: (A)\nis_exception(is_sat(sits(Olivia) == directly_across)) ::: (B)\nis_exception(is_sat(sits(Fiona) == directly_across)) ::: (C)\nis_exception(is_sat(sits(Harriet) == immediately_next_to)) ::: (D)\nis_exception(is_sat(sits(Karl) == immediately_next_to)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_4_20",
    "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
    "question": "If George does not sit immediately next to Harriet, then which one of the following could be the two people each of whom sits immediately next to Manuel?",
    "answer": "A",
    "options": [
      "A) Fiona and Harriet",
      "B) Fiona and Peter",
      "C) George and Karl",
      "D) George and Peter",
      "E) Harriet and Peter"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, Peter])\nseats = EnumSort([directly_across, immediately_next_to, immediately_clockwise_from])\nsits = Function([people] -> [seats])\n\n# Constraints\nForAll([p:people], And(1 <= sits(p) <= 8, sits(p) in [directly_across, immediately_next_to, immediately_clockwise_from])) ::: any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table\nForAll([p:people], And(1 <= sits(p) <= 8, sits(p) in [directly_across, immediately_next_to, immediately_clockwise_from])) ::: Fiona sits directly across from George\nForAll([p:people], And(1 <= sits(p) <= 8, sits(p) in [directly_across, immediately_next_to, immediately_clockwise_from])) ::: Harriet sits immediately next to neither Fiona nor Karl\nForAll([p:people], And(1 <= sits(p) <= 8, sits(p) in [directly_across, immediately_next_to, immediately_clockwise_from])) ::: Ingrid sits immediately next to, and immediately clockwise from, Olivia\n\n# Options\nQuestion ::: If George does not sit immediately next to Harriet, then which one of the following could be the two people each of whom sits immediately next to Manuel?\nis_exception(is_sat(sits(George) == directly_across)) ::: (A)\nis_exception(is_sat(sits(Harriet) == directly_across)) ::: (B)\nis_exception(is_sat(sits(Karl) == directly_across)) ::: (C)\nis_exception(is_sat(sits(Peter) == directly_across)) ::: (D)\nis_exception(is_sat(sits(Olivia) == directly_across)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_4_21",
    "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
    "question": "If Manuel sits immediately next to Olivia, then which one of the following people must sit immediately next to Fiona?",
    "answer": "C",
    "options": [
      "A) Harriet",
      "B) Ingrid",
      "C) Karl",
      "D) Manuel",
      "E) Peter"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, Peter])\nseats = EnumSort([directly_across, immediately_next_to, immediately_clockwise_from])\nsits = Function([people] -> [seats])\n\n# Constraints\nForAll([p:people], And(1 <= sits(p) <= 3, sits(p) == seats(p))) ::: any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table\nForAll([p:people], And(1 <= sits(p) <= 2, sits(p) == seats(p))) ::: Fiona sits directly across from George\nForAll([p:people], And(1 <= sits(p) <= 2, sits(p) == seats(p))) ::: Harriet sits immediately next to neither Fiona nor Karl\nForAll([p:people], And(1 <= sits(p) <= 2, sits(p) == seats(p))) ::: Ingrid sits immediately next to, and immediately clockwise from, Olivia\n\n# Options\nQuestion ::: If Manuel sits immediately next to Olivia, then which one of the following people must sit immediately next to Fiona?\nis_valid(Exists([p:people], sits(p) == directly_across)) ::: A)\nis_valid(Exists([p:people], sits(p) == immediately_next_to)) ::: B)\nis_valid(Exists([p:people], sits(p) == immediately_clockwise_from)) ::: C)\nis_valid(Exists([p:people], sits(p) == immediately_next_to)) ::: D)\nis_valid(Exists([p:people], sits(p) == immediately_next_to)) ::: E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_4_22",
    "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
    "question": "What is the minimum possible number of people sitting between Ingrid and Manuel, counting clockwise from Ingrid around the table?",
    "answer": "A",
    "options": [
      "A) zero",
      "B) one",
      "C) two",
      "D) three",
      "E) four"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, Peter])\nseats = EnumSort([directly_across, immediately_next_to, immediately_clockwise_from])\nsits = Function([people] -> [seats])\n\n# Constraints\nForAll([p:people], And(1 <= sits(p) <= 8)) ::: any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table\nForAll([p:people], And(1 <= sits(p) <= 8)) ::: Fiona sits directly across from George\nForAll([p:people], And(1 <= sits(p) <= 8)) ::: Harriet sits immediately next to neither Fiona nor Karl\nForAll([p:people], And(1 <= sits(p) <= 8)) ::: Ingrid sits immediately next to, and immediately clockwise from, Olivia\n\n# Options\nQuestion ::: What is the minimum possible number of people sitting between Ingrid and Manuel, counting clockwise from Ingrid around the table?\nis_valid(Exists([p:people], sits(p) == immediately_next_to)) ::: (A)\nis_valid(Exists([p:people], sits(p) == immediately_clockwise_from)) ::: (B)\nis_valid(Exists([p:people], sits(p) == zero)) ::: (C)\nis_valid(Exists([p:people], sits(p) == one)) ::: (D)\nis_valid(Exists([p:people], sits(p) == two)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_4_23",
    "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
    "question": "If Karl sits directly across from Ingrid, then each of the following people could sit immediately next to Olivia EXCEPT:",
    "answer": "B",
    "options": [
      "A) Fiona",
      "B) George",
      "C) Harriet",
      "D) Manuel",
      "E) Peter"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, Peter])\nseats = EnumSort([1, 2, 3, 4, 5, 6, 7, 8])\nsits = Function([people, seats] -> [bool])\n\n# Constraints\nForAll([p:people, s:seats], And(sits(p, s) == True, sits(p, s + 1) == False)) ::: any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table\nForAll([p:people, s:seats], And(sits(Fiona, s) == True, sits(George, s) == True)) ::: Fiona sits directly across from George\nForAll([p:people, s:seats], And(sits(Harriet, s) == False, sits(Karl, s) == False)) ::: Harriet sits immediately next to neither Fiona nor Karl\nForAll([p:people, s:seats], And(sits(Ingrid, s) == True, sits(Olivia, s) == True)) ::: Ingrid sits directly across from Olivia\n\n# Options\nQuestion ::: If Karl sits directly across from Ingrid, then each of the following people could sit immediately next to Olivia EXCEPT:\nis_exception(is_sat(sits(Fiona, 6) == True)) ::: (A)\nis_exception(is_sat(sits(George, 6) == True)) ::: (B)\nis_exception(is_sat(sits(Harriet, 6) == True)) ::: (C)\nis_exception(is_sat(sits(Manuel, 6) == True)) ::: (D)\nis_exception(is_sat(sits(Peter, 6) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_200310_2-G_4_24",
    "context": "Eight people—Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, and Peter—are sitting, evenly spaced, around a circular picnic table. Any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table. The following conditions apply: Fiona sits directly across from George. Harriet sits immediately next to neither Fiona nor Karl. Ingrid sits immediately next to, and immediately clockwise from, Olivia.",
    "question": "If Karl sits directly across from Harriet, then what is the minimum possible number of people sitting between George and Karl, counting clockwise from George to Karl?",
    "answer": "C",
    "options": [
      "A) zero",
      "B) one",
      "C) two",
      "D) three",
      "E) four"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Fiona, George, Harriet, Ingrid, Karl, Manuel, Olivia, Peter])\nseats = EnumSort([directly_across, immediately_next_to, immediately_clockwise])\nsits = Function([people] -> [seats])\n\n# Constraints\nForAll([p:people], And(1 <= sits(p) <= 8)) ::: any two of them are said to be sitting directly across from one another if and only if there are exactly three other people sitting between them, counting in either direction around the table\nForAll([p:people], And(1 <= sits(p) <= 8)) ::: Fiona sits directly across from George\nForAll([p:people], And(1 <= sits(p) <= 8)) ::: Harriet sits immediately next to neither Fiona nor Karl\nForAll([p:people], And(1 <= sits(p) <= 8)) ::: Ingrid sits immediately next to, and immediately clockwise from, Olivia\n\n# Options\nQuestion ::: If Karl sits directly across from Harriet, then what is the minimum possible number of people sitting between George and Karl, counting clockwise from George to Karl?\nis_valid(Exists([p:people], sits(p) == directly_across) ::: A)\nis_valid(Exists([p:people], sits(p) == immediately_next_to) ::: B)\nis_valid(Exists([p:people], sits(p) == immediately_clockwise) ::: C)\nis_valid(Exists([p:people], sits(p) == zero) ::: D)\nis_valid(Exists([p:people], sits(p) == one) ::: E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_1_1",
    "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
    "question": "Which one of the following is an acceptable set of appointments of candidates to courts?",
    "answer": "E",
    "options": [
      "A) appellate: Hamadi, Ortiz trial: Jefferson, Kurtz, Li, McDonnell, Perkins",
      "B) appellate: Hamadi, Li, Perkins trial: Jefferson, Kurtz, McDonnell, Ortiz",
      "C) appellate: Kurtz, Li, Perkins trial: Hamadi, Jefferson, McDonnell, Ortiz",
      "D) appellate: Li, McDonnell, Ortiz trial: Hamadi, Jefferson, Kurtz, Perkins",
      "E) appellate: Li, Perkins trial: Hamadi, Jefferson, Kurtz, McDonnell, Ortiz"
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, Perkins])\ncourts = EnumSort([appellate, trial])\nappointments = Function([candidates, courts] -> [bool])\n\n# Constraints\nForAll([c:candidates], And(1 <= appointments(c, appellate), appointments(c, appellate) <= 3)) ::: each candidate is appointed to an open position on the appellate court\nForAll([c:candidates], And(1 <= appointments(c, trial), appointments(c, trial) <= 6)) ::: each candidate is appointed to an open position on the trial court\nForAll([c:candidates], Implies(appointments(c, appellate), Not(appointments(c, trial)))) ::: Hamadi cannot be appointed to the same court as Perkins\nForAll([c:candidates], Implies(appointments(Li, appellate), Not(appointments(c, trial)))) ::: Li must be appointed to the appellate court\nForAll([c:candidates], Implies(appointments(Kurtz, trial), Not(appointments(c, appellate)))) ::: Kurtz must be appointed to the trial court\n\n# Options\nQuestion ::: ::: Which one of the following is an acceptable set of appointments of candidates to courts?\nis_sat(ForAll([c:candidates], And(appointments(c, appellate) == 1, appointments(c, trial) == 3))) ::: (A)\nis_sat(ForAll([c:candidates], And(appointments(c, appellate) == 2, appointments(c, trial) == 4))) ::: (B)\nis_sat(ForAll([c:candidates], And(appointments(c, appellate) == 3, appointments(c, trial) == 2))) ::: (C)\nis_sat(ForAll([c:candidates], And(appointments(c, appellate) == 2, appointments(c, trial) == 3))) ::: (D)\nis_sat(ForAll([c:candidates], And(appointments(c, appellate) == 3, appointments(c, trial) == 1))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_1_2",
    "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "B",
    "options": [
      "A) Hamadi and McDonnell are both appointed to the appellate court.",
      "B) McDonnell and Ortiz are both appointed to the appellate court.",
      "C) Ortiz and Perkins are both appointed to the appellate court.",
      "D) Hamadi and Jefferson are both appointed to the trial court.",
      "E) Ortiz and Perkins are both appointed to the trial court."
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, Perkins])\ncourts = EnumSort([appellate, trial])\nappointed = Function([candidates, courts] -> [bool])\n\n# Constraints\nForAll([c:candidates], And(1 <= appointed(c, appellate), appointed(c, appellate) <= 3))\nForAll([c:candidates], And(1 <= appointed(c, trial), appointed(c, trial) <= 6))\nForAll([c:candidates], Implies(appointed(Li, appellate), Not(appointed(Hamadi, appellate))))\nForAll([c:candidates], Implies(appointed(Kurtz, trial), Not(appointed(Hamadi, trial))))\nForAll([c:candidates], Implies(appointed(Hamadi, appellate), Not(appointed(Perkins, appellate))))\nForAll([c:candidates], Implies(appointed(Hamadi, trial), Not(appointed(Jefferson, trial))))\nForAll([c:candidates], Implies(appointed(Ortiz, appellate), Not(appointed(Perkins, appellate))))\nForAll([c:candidates], Implies(appointed(Ortiz, trial), Not(appointed(Perkins, trial))))\n\n# Options\nQuestion ::: ::: Which one of the following CANNOT be true?\nis_exception(is_sat(appointed(Hamadi, appellate) == True)) ::: (A)\nis_exception(is_sat(appointed(McDonnell, appellate) == True)) ::: (B)\nis_exception(is_sat(appointed(Ortiz, appellate) == True)) ::: (C)\nis_exception(is_sat(appointed(Hamadi, trial) == True)) ::: (D)\nis_exception(is_sat(appointed(Ortiz, trial) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_1_3",
    "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "A",
    "options": [
      "A) Jefferson and McDonnell are both appointed to the appellate court.",
      "B) Jefferson and McDonnell are both appointed to the trial court.",
      "C) McDonnell and Ortiz are both appointed to the trial court.",
      "D) McDonnell and Perkins are both appointed to the appellate court.",
      "E) McDonnell and Perkins are both appointed to the trial court."
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, Perkins])\ncourts = EnumSort([appellate, trial])\nappointed = Function([candidates, courts] -> [bool])\n\n# Constraints\nForAll([c:candidates], And(1 <= appointed(c, appellate), appointed(c, appellate) <= 3))\nForAll([c:candidates], And(1 <= appointed(c, trial), appointed(c, trial) <= 6))\nForAll([c:candidates], Implies(appointed(Hamadi, appellate), Not(appointed(Perkins, appellate))))\nForAll([c:candidates], Implies(appointed(Kurtz, trial), Not(appointed(Perkins, trial))))\nForAll([c:candidates], Implies(appointed(Li, appellate), Not(appointed(Perkins, appellate))))\nForAll([c:candidates], Implies(appointed(McDonnell, trial), Not(appointed(Perkins, trial))))\n\n# Options\nQuestion ::: ::: Which one of the following CANNOT be true?\nis_exception(is_sat(appointed(Jefferson, appellate) == True)) ::: (A)\nis_exception(is_sat(appointed(McDonnell, trial) == True)) ::: (B)\nis_exception(is_sat(appointed(McDonnell, trial) == True)) ::: (C)\nis_exception(is_sat(appointed(McDonnell, trial) == True)) ::: (D)\nis_exception(is_sat(appointed(McDonnell, trial) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_1_4",
    "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
    "question": "If Ortiz is appointed to the appellate court, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Hamadi is appointed to the appellate court.",
      "B) Jefferson is appointed to the appellate court.",
      "C) Jefferson is appointed to the trial court.",
      "D) Perkins is appointed to the appellate court.",
      "E) Perkins is appointed to the trial court."
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, Perkins])\ncourts = EnumSort([appellate, trial])\nappointed = Function([candidates, courts] -> [bool])\n\n# Constraints\nForAll([c:candidates], And(1 <= appointed(c, appellate), appointed(c, appellate) <= 3))\nForAll([c:candidates], And(1 <= appointed(c, trial), appointed(c, trial) <= 6))\nForAll([c:candidates], Implies(appointed(Hamadi, appellate), Not(appointed(Perkins, appellate))))\nForAll([c:candidates], Implies(appointed(Kurtz, trial), Not(appointed(Perkins, trial))))\nForAll([c:candidates], Implies(appointed(Li, appellate), Not(appointed(Perkins, appellate))))\n\n# Options\nQuestion ::: If Ortiz is appointed to the appellate court, which one of the following must be true?\nis_exception(is_sat(appointed(Hamadi, appellate) == True)) ::: (A)\nis_exception(is_sat(appointed(Jefferson, appellate) == True)) ::: (B)\nis_exception(is_sat(appointed(Jefferson, trial) == True)) ::: (C)\nis_exception(is_sat(appointed(Perkins, appellate) == True)) ::: (D)\nis_exception(is_sat(appointed(Perkins, trial) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_1_5",
    "context": "Each of seven candidates for the position of judge—Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, and Perkins—will be appointed to an open position on one of two courts—the appellate court or the trial court. There are three open positions on the appellate court and six open positions on the trial court, but not all of them will be filled at this time. The judicial appointments will conform to the following conditions: Li must be appointed to the appellate court. Kurtz must be appointed to the trial court. Hamadi cannot be appointed to the same court as Perkins.",
    "question": "Which one of the following, if substituted for the condition that Hamadi cannot be appointed to the same court as Perkins, would have the same effect on the appointments of the seven candidates?",
    "answer": "E",
    "options": [
      "A) Hamadi and Perkins cannot both be appointed to the appellate court.",
      "B) If Hamadi is not appointed to the trial court, then Perkins must be.",
      "C) If Perkins is appointed to the same court as Jefferson, then Hamadi cannot be.",
      "D) If Hamadi is appointed to the same court as Li, then Perkins must be appointed to the same court as Kurtz.",
      "E) No three of Hamadi, Kurtz, Li, and Perkins can be appointed to the same court as each other."
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([Hamadi, Jefferson, Kurtz, Li, McDonnell, Ortiz, Perkins])\ncourts = EnumSort([appellate, trial])\nappointments = Function([candidates, courts] -> [bool])\n\n# Constraints\nForAll([c:candidates], And(1 <= appointments(c, appellate), appointments(c, appellate) <= 3)) ::: no more than three candidates can be appointed to the appellate court\nForAll([c:candidates], And(1 <= appointments(c, trial), appointments(c, trial) <= 6)) ::: no more than six candidates can be appointed to the trial court\nForAll([c:candidates], And(1 <= appointments(c, appellate), appointments(c, trial))) ::: no candidate can be appointed to both the appellate and trial courts\nForAll([c:candidates], And(1 <= appointments(c, appellate), appointments(c, appellate) <= 2)) ::: Li must be appointed to the appellate court\nForAll([c:candidates], And(1 <= appointments(c, trial), appointments(c, trial) <= 5)) ::: Kurtz must be appointed to the trial court\nForAll([c:candidates], And(1 <= appointments(c, appellate), appointments(c, appellate) <= 1)) ::: Hamadi cannot be appointed to the same court as Perkins\nForAll([c:candidates], And(1 <= appointments(c, trial), appointments(c, trial) <= 4)) ::: No three of Hamadi, Kurtz, Li, and Perkins can be appointed to the same court as each other\n\n# Options\nQuestion ::: ::: Which one of the following, if substituted for the condition that Hamadi cannot be appointed to the same court as Perkins, would have the same effect on the appointments of the seven candidates?\nis_exception(is_sat(ForAll([c:candidates], And(1 <= appointments(c, appellate), appointments(c, appellate) <= 2)))) ::: (A)\nis_exception(is_sat(ForAll([c:candidates], And(1 <= appointments(c, trial), appointments(c, trial) <= 5)))) ::: (B)\nis_exception(is_sat(ForAll([c:candidates], And(1 <= appointments(c, appellate), appointments(c, appellate) <= 1)))) ::: (C)\nis_exception(is_sat(ForAll([c:candidates], And(1 <= appointments(c, trial), appointments(c, trial) <= 4)))) ::: (D)\nis_exception(is_sat(ForAll([c:candidates], And(1 <= appointments(c, appellate), appointments(c, appellate) <= 3)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_2_6",
    "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
    "question": "Which one of the following could be an accurate list of the members in the order in which they dive from the plane, from first to last?",
    "answer": "B",
    "options": [
      "A) Larue, Trevino, Ohba, Zacny, Pei, Weiss",
      "B) Larue, Trevino, Pei, Zacny, Weiss, Ohba",
      "C) Weiss, Ohba, Trevino, Zacny, Pei, Larue",
      "D) Trevino, Weiss, Pei, Ohba, Zacny, Larue",
      "E) Trevino, Weiss, Zacny, Larue, Pei, Ohba"
    ],
    "raw_logic_programs": [
      "# Declarations\nmembers = EnumSort([Larue, Ohba, Pei, Trevino, Weiss, Zacny])\ndives = Function([members] -> [int])\n\n# Constraints\nDistinct([m:members], dives(m)) ::: no two members dive at the same time\nAnd(dives(Trevino) < dives(Weiss), dives(Larue) == 1) ::: Trevino dives from the plane at some time before Weiss does\nAnd(dives(Larue) == 1, dives(Pei) == dives(Zacny)) ::: Larue dives from the plane either first or last\nAnd(dives(Pei) == dives(Zacny), dives(Weiss) == dives(Ohba)) ::: Neither Weiss nor Zacny dives from the plane last\nAnd(dives(Pei) == dives(Zacny), dives(Larue) == dives(Ohba)) ::: Pei dives from the plane at some time after either Ohba or Larue but not both\n\n# Options\nQuestion ::: Which one of the following could be an accurate list of the members in the order in which they dive from the plane, from first to last?\nis_valid(Exists([m:members], dives(m) == 1)) ::: (A)\nis_valid(Exists([m:members], dives(m) == 2)) ::: (B)\nis_valid(Exists([m:members], dives(m) == 3)) ::: (C)\nis_valid(Exists([m:members], dives(m) == 4)) ::: (D)\nis_valid(Exists([m:members], dives(m) == 5)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_2_7",
    "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
    "question": "Which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) At least two of the members dive from the plane after Larue.",
      "B) At least two of the members dive from the plane after Ohba.",
      "C) At least two of the members dive from the plane after Pei.",
      "D) At least two of the members dive from the plane after Trevino.",
      "E) At least two of the members dive from the plane after Weiss."
    ],
    "raw_logic_programs": [
      "# Declarations\nmembers = EnumSort([Larue, Ohba, Pei, Trevino, Weiss, Zacny])\ndives = EnumSort([first, last])\ndives_from_plane = Function([members, dives] -> [bool])\n\n# Constraints\nForAll([m:members], And(1 <= dives_from_plane(m, dives), dives_from_plane(m, dives) <= 6))\nAnd(dives_from_plane(Trevino, dives) < dives_from_plane(Weiss, dives)) ::: Trevino dives from the plane at some time before Weiss does\nAnd(dives_from_plane(Larue, dives) == dives_from_plane(Ohba, dives)) ::: Larue dives from the plane either first or last\nAnd(dives_from_plane(Pei, dives) == dives_from_plane(Zacny, dives)) ::: Neither Weiss nor Zacny dives from the plane last\nAnd(dives_from_plane(Ohba, dives) == dives_from_plane(Larue, dives)) ::: Pei dives from the plane at some time after either Ohba or Larue but not both\n\n# Options\nQuestion ::: ::: Which one of the following must be true?\nis_sat(ForAll([m:members], dives_from_plane(m, dives) == dives_from_plane(m, dives))) ::: (A)\nis_sat(ForAll([m:members], dives_from_plane(m, dives) == dives_from_plane(m, dives))) ::: (B)\nis_sat(ForAll([m:members], dives_from_plane(m, dives) == dives_from_plane(m, dives))) ::: (C)\nis_sat(ForAll([m:members], dives_from_plane(m, dives) == dives_from_plane(m, dives))) ::: (D)\nis_sat(ForAll([m:members], dives_from_plane(m, dives) == dives_from_plane(m, dives))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_2_8",
    "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
    "question": "If Larue dives from the plane last, then each of the following could be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) Trevino dives from the plane fourth.",
      "B) Weiss dives from the plane fourth.",
      "C) Ohba dives from the plane fifth.",
      "D) Pei dives from the plane fifth.",
      "E) Zacny dives from the plane fifth."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Larue, Ohba, Pei, Trevino, Weiss, Zacny])\ndives = EnumSort([first, last])\ndives_from_plane = Function([people, dives] -> [bool])\n\n# Constraints\nForAll([p:people, d:dives], dives_from_plane(p, d) == dives_from_plane(p, dives_from_plane(p, d))) ::: each person dives exactly once, one at a time, from a plane\nAnd(dives_from_plane(Trevino, first) == dives_from_plane(Weiss, first), dives_from_plane(Trevino, last) == dives_from_plane(Weiss, last)) ::: Trevino dives from the plane at some time before Weiss does\nAnd(dives_from_plane(Larue, first) == dives_from_plane(Larue, last), dives_from_plane(Larue, last) == dives_from_plane(Pei, last)) ::: Larue dives from the plane either first or last\nAnd(dives_from_plane(Weiss, last) == dives_from_plane(Zacny, last), dives_from_plane(Weiss, last) == dives_from_plane(Pei, last)) ::: Neither Weiss nor Zacny dives from the plane last\nAnd(dives_from_plane(Pei, last) == dives_from_plane(Ohba, last), dives_from_plane(Pei, last) == dives_from_plane(Trevino, last)) ::: Pei dives from the plane at some time after either Ohba or Larue but not both\n\n# Options\nQuestion ::: If Larue dives from the plane last, then each of the following could be true EXCEPT:\nis_exception(is_sat(dives_from_plane(Larue, last) == 6)) ::: (A)\nis_exception(is_sat(dives_from_plane(Trevino, first) == 4)) ::: (B)\nis_exception(is_sat(dives_from_plane(Ohba, last) == 5)) ::: (C)\nis_exception(is_sat(dives_from_plane(Pei, last) == 5)) ::: (D)\nis_exception(is_sat(dives_from_plane(Zacny, last) == 5)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_2_9",
    "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
    "question": "If Zacny dives from the plane immediately after Weiss, then which one of the following must be false?",
    "answer": "D",
    "options": [
      "A) Larue dives from the plane first.",
      "B) Trevino dives from the plane third.",
      "C) Zacny dives from the plane third.",
      "D) Pei dives from the plane fourth.",
      "E) Zacny dives from the plane fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Larue, Ohba, Pei, Trevino, Weiss, Zacny])\ndives = EnumSort([first, last])\ndives_from_plane = Function([people, dives] -> [bool])\n\n# Constraints\nForAll([p:people, d:dives], dives_from_plane(p, d) == dives_from_plane(p, dives_from_plane(p, d))) ::: each person dives exactly once, one at a time, from a plane\nAnd(dives_from_plane(Trevino, first) == dives_from_plane(Weiss, first)) ::: Trevino dives from the plane at some time before Weiss does\nAnd(dives_from_plane(Larue, first) == dives_from_plane(Larue, last)) ::: Larue dives from the plane either first or last\nAnd(dives_from_plane(Weiss, last) == dives_from_plane(Zacny, last)) ::: Neither Weiss nor Zacny dives from the plane last\nAnd(dives_from_plane(Pei, last) == dives_from_plane(Ohba, last)) ::: Pei dives from the plane at some time after either Ohba or Larue but not both\n\n# Options\nQuestion ::: If Zacny dives from the plane immediately after Weiss, then which one of the following must be false?\nis_exception(is_sat(dives_from_plane(Larue, first) == dives_from_plane(Larue, last))) ::: (A)\nis_exception(is_sat(dives_from_plane(Trevino, first) == dives_from_plane(Trevino, last))) ::: (B)\nis_exception(is_sat(dives_from_plane(Pei, last) == dives_from_plane(Pei, first))) ::: (C)\nis_exception(is_sat(dives_from_plane(Zacny, last) == dives_from_plane(Zacny, first))) ::: (D)\nis_exception(is_sat(dives_from_plane(Weiss, last) == dives_from_plane(Weiss, first))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_2_10",
    "context": "Exactly six members of a skydiving team—Larue, Ohba, Pei, Trevino, Weiss, and Zacny—each dive exactly once, one at a time, from a plane, consistent with the following conditions: Trevino dives from the plane at some time before Weiss does. Larue dives from the plane either first or last. Neither Weiss nor Zacny dives from the plane last. Pei dives from the plane at some time after either Ohba or Larue but not both.",
    "question": "If Trevino dives from the plane immediately after Larue, then each of the following could be true EXCEPT:",
    "answer": "A",
    "options": [
      "A) Ohba dives from the plane third.",
      "B) Weiss dives from the plane third.",
      "C) Zacny dives from the plane third.",
      "D) Pei dives from the plane fourth.",
      "E) Weiss dives from the plane fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Larue, Ohba, Pei, Trevino, Weiss, Zacny])\ndives = EnumSort([first, last])\ndives_from_plane = Function([people, dives] -> [bool])\n\n# Constraints\nForAll([p:people, d:dives], dives_from_plane(p, d) == dives_from_plane(p, dives_from_plane(p, d))) ::: each person dives exactly once, one at a time, from a plane\nAnd(dives_from_plane(Trevino, first) == dives_from_plane(Trevino, last)) ::: Trevino dives from the plane immediately after Larue\nAnd(dives_from_plane(Larue, first) == dives_from_plane(Larue, last)) ::: Larue dives from the plane either first or last\nAnd(dives_from_plane(Weiss, last) == dives_from_plane(Zacny, last)) ::: Neither Weiss nor Zacny dives from the plane last\nAnd(dives_from_plane(Pei, last) == dives_from_plane(Pei, dives_from_plane(Pei, dives_from_plane(Pei, last)))) ::: Pei dives from the plane at some time after either Ohba or Larue but not both\n\n# Options\nQuestion ::: If Trevino dives from the plane immediately after Larue, then each of the following could be true EXCEPT:\nis_exception(is_sat(dives_from_plane(Ohba, first) == 3)) ::: (A)\nis_exception(is_sat(dives_from_plane(Weiss, first) == 3)) ::: (B)\nis_exception(is_sat(dives_from_plane(Zacny, first) == 3)) ::: (C)\nis_exception(is_sat(dives_from_plane(Pei, fourth) == 4)) ::: (D)\nis_exception(is_sat(dives_from_plane(Weiss, fourth) == 4)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_3_11",
    "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
    "question": "Which one of the following could be the order in which the vehicles are serviced, from Monday through Saturday?",
    "answer": "B",
    "options": [
      "A) the hatchback, the pickup, the sedan, the limousine, the van, the roadster",
      "B) the pickup, the sedan, the van, the roadster, the hatchback, the limousine",
      "C) the pickup, the van, the sedan, the roadster, the limousine, the hatchback",
      "D) the van, the roadster, the pickup, the hatchback, the sedan, the limousine",
      "E) the van, the sedan, the pickup, the roadster, the hatchback, the limousine"
    ],
    "raw_logic_programs": [
      "# Declarations\nvehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])\nserviced = Function([vehicles] -> [int])\n\n# Constraints\nForAll([v:vehicles], And(1 <= serviced(v), serviced(v) <= 6))\n\n# Options\nQuestion ::: ::: Which one of the following could be the order in which the vehicles are serviced, from Monday through Saturday?\nis_sat(ForAll([v:vehicles], And(serviced(v) == 1, serviced(v)!= 6))) ::: (A)\nis_sat(ForAll([v:vehicles], And(serviced(v) == 2, serviced(v)!= 6))) ::: (B)\nis_sat(ForAll([v:vehicles], And(serviced(v) == 3, serviced(v)!= 6))) ::: (C)\nis_sat(ForAll([v:vehicles], And(serviced(v) == 4, serviced(v)!= 6))) ::: (D)\nis_sat(ForAll([v:vehicles], And(serviced(v) == 5, serviced(v)!= 6))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_3_12",
    "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
    "question": "Which one of the following CANNOT be the vehicle serviced on Thursday?",
    "answer": "E",
    "options": [
      "A) the hatchback",
      "B) the limousine",
      "C) the pickup",
      "D) the sedan",
      "E) the van"
    ],
    "raw_logic_programs": [
      "# Declarations\nvehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])\nserviced = Function([vehicles] -> [int])\n\n# Constraints\nForAll([v:vehicles], And(1 <= serviced(v), serviced(v) <= 6))\nForAll([v:vehicles], Implies(serviced(v) == 1, serviced(hatchback) == 1))\nForAll([v:vehicles], Implies(serviced(v) == 2, serviced(roadster) == 2))\nForAll([v:vehicles], Implies(serviced(v) == 3, serviced(van) == 3))\nForAll([v:vehicles], Implies(serviced(v) == 4, serviced(pickup) == 4))\nForAll([v:vehicles], Implies(serviced(v) == 5, serviced(sedan) == 5))\nForAll([v:vehicles], Implies(serviced(v) == 6, serviced(limousine) == 6))\n\n# Options\nQuestion ::: Which one of the following CANNOT be the vehicle serviced on Thursday?\nis_exception(is_sat(serviced(hatchback) == 6)) ::: (A)\nis_exception(is_sat(serviced(limousine) == 6)) ::: (B)\nis_exception(is_sat(serviced(pickup) == 6)) ::: (C)\nis_exception(is_sat(serviced(sedan) == 6)) ::: (D)\nis_exception(is_sat(serviced(van) == 6)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_3_13",
    "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
    "question": "If neither the pickup nor the limousine is serviced on Monday, then which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) The hatchback and the limousine are serviced on consecutive days.",
      "B) The hatchback and the sedan are serviced on consecutive days.",
      "C) The van is serviced on Monday.",
      "D) The limousine is serviced on Saturday.",
      "E) The pickup is serviced on Saturday."
    ],
    "raw_logic_programs": [
      "# Declarations\nvehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])\nserviced = Function([vehicles] -> [bool])\n\n# Constraints\nForAll([v:vehicles], And(1 <= serviced(v), serviced(v) <= 6))\nAnd(serviced(roadster) > serviced(hatchback), serviced(roadster) < serviced(van)) ::: The roadster is serviced later in the week than the hatchback and earlier in the week than the van\nAnd(serviced(pickup) > serviced(van), serviced(pickup) < serviced(sedan)) ::: Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both\nAnd(serviced(sedan) < serviced(pickup), serviced(sedan) < serviced(limousine)) ::: The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both\n\n# Options\nQuestion ::: If neither the pickup nor the limousine is serviced on Monday, then which one of the following must be true?\nis_exception(is_sat(serviced(hatchback) == 1)) ::: (A)\nis_exception(is_sat(serviced(limousine) == 1)) ::: (B)\nis_exception(is_sat(serviced(pickup) == 1)) ::: (C)\nis_exception(is_sat(serviced(van) == 1)) ::: (D)\nis_exception(is_sat(serviced(sedan) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_3_14",
    "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
    "question": "If the limousine is not serviced on Saturday, then each of the following could be true EXCEPT:",
    "answer": "E",
    "options": [
      "A) The limousine is serviced on Monday.",
      "B) The roadster is serviced on Tuesday.",
      "C) The hatchback is serviced on Wednesday.",
      "D) The roadster is serviced on Wednesday.",
      "E) The sedan is serviced on Wednesday."
    ],
    "raw_logic_programs": [
      "# Declarations\nvehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])\nserviced = Function([vehicles] -> [bool])\n\n# Constraints\nForAll([v:vehicles], And(1 <= serviced(v), serviced(v) <= 6))\nAnd(serviced(hatchback) < serviced(limousine), serviced(limousine) < serviced(hatchback)) ::: At least one of the vehicles is serviced later in the week than the hatchback\nAnd(serviced(roadster) < serviced(van), serviced(van) < serviced(roadster)) ::: The roadster is serviced later in the week than the van and earlier in the week than the hatchback\nOr(serviced(pickup) == serviced(van), serviced(pickup) == serviced(sedan)) ::: Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both\nAnd(serviced(sedan) < serviced(pickup), serviced(sedan) < serviced(limousine)) ::: The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both\n\n# Options\nQuestion ::: If the limousine is not serviced on Saturday, then each of the following could be true EXCEPT:\nis_exception(is_sat(serviced(limousine) == 6)) ::: (A)\nis_exception(is_sat(serviced(hatchback) == 1)) ::: (B)\nis_exception(is_sat(serviced(roadster) == 2)) ::: (C)\nis_exception(is_sat(serviced(hatchback) == 2)) ::: (D)\nis_exception(is_sat(serviced(roadster) == 3)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_3_15",
    "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
    "question": "If the sedan is serviced earlier in the week than the pickup, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) The limousine is serviced on Wednesday.",
      "B) The sedan is serviced on Wednesday.",
      "C) The van is serviced on Wednesday.",
      "D) The hatchback is serviced on Friday.",
      "E) The limousine is serviced on Saturday."
    ],
    "raw_logic_programs": [
      "# Declarations\nvehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])\nserviced = Function([vehicles] -> [int])\nForAll([v:vehicles], And(1 <= serviced(v), serviced(v) <= 6))\n\n# Constraints\nDistinct([v:vehicles], serviced(v)) ::: no two vehicles are serviced at the same time\nAnd(serviced(roadster) > serviced(hatchback), serviced(roadster) < serviced(van)) ::: The roadster is serviced later in the week than the hatchback and earlier in the week than the van\nAnd(serviced(pickup) > serviced(van), serviced(pickup) < serviced(sedan)) ::: Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both\nAnd(serviced(sedan) < serviced(pickup), serviced(sedan) < serviced(limousine)) ::: The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both\n\n# Options\nQuestion ::: If the sedan is serviced earlier in the week than the pickup, then which one of the following could be true?\nis_exception(is_sat(serviced(sedan) == 1)) ::: (A)\nis_exception(is_sat(serviced(hatchback) == 1)) ::: (B)\nis_exception(is_sat(serviced(van) == 1)) ::: (C)\nis_exception(is_sat(serviced(pickup) == 1)) ::: (D)\nis_exception(is_sat(serviced(limousine) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_3_16",
    "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
    "question": "If the limousine is serviced on Saturday, then which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) The pickup is serviced earlier in the week than the roadster.",
      "B) The pickup is serviced earlier in the week than the sedan.",
      "C) The sedan is serviced earlier in the week than the roadster.",
      "D) The hatchback and the limousine are serviced on consecutive days.",
      "E) The roadster and the hatchback are serviced on consecutive days."
    ],
    "raw_logic_programs": [
      "# Declarations\nvehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])\nserviced = Function([vehicles] -> [bool])\n\n# Constraints\nForAll([v:vehicles], And(1 <= serviced(v), serviced(v) <= 6))\nAnd(serviced(hatchback) < serviced(limousine), serviced(limousine) < serviced(hatchback)) ::: At least one of the vehicles is serviced later in the week than the hatchback\nAnd(serviced(roadster) < serviced(van), serviced(van) < serviced(roadster)) ::: The roadster is serviced later in the week than the van and earlier in the week than the hatchback\nOr(serviced(pickup) == serviced(van), serviced(pickup) == serviced(sedan)) ::: Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both\nAnd(serviced(sedan) < serviced(pickup), serviced(sedan) < serviced(limousine)) ::: The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both\n\n# Options\nQuestion ::: If the limousine is serviced on Saturday, then which one of the following must be true?\nis_exception(is_sat(serviced(hatchback) == 6)) ::: (A)\nis_exception(is_sat(serviced(pickup) == 6)) ::: (B)\nis_exception(is_sat(serviced(roadster) == 6)) ::: (C)\nis_exception(is_sat(serviced(sedan) == 6)) ::: (D)\nis_exception(is_sat(serviced(van) == 6)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_3_17",
    "context": "A company's six vehicles—a hatchback, a limousine, a pickup, a roadster, a sedan, and a van—are serviced during a certain week—Monday through Saturday—one vehicle per day. The following conditions must apply: At least one of the vehicles is serviced later in the week than the hatchback. The roadster is serviced later in the week than the van and earlier in the week than the hatchback. Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both. The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both.",
    "question": "Which one of the following could be the list of the vehicles serviced on Tuesday, Wednesday, and Friday, listed in that order?",
    "answer": "B",
    "options": [
      "A) the pickup, the hatchback, the limousine",
      "B) the pickup, the roadster, the hatchback",
      "C) the sedan, the limousine, the hatchback",
      "D) the van, the limousine, the hatchback",
      "E) the van, the roadster, the limousine"
    ],
    "raw_logic_programs": [
      "# Declarations\nvehicles = EnumSort([hatchback, limousine, pickup, roadster, sedan, van])\nserviced = Function([vehicles] -> [bool])\n\n# Constraints\nForAll([v:vehicles], And(1 <= serviced(v), serviced(v) <= 6))\nAnd(serviced(hatchback) < serviced(roadster), serviced(roadster) < serviced(hatchback)) ::: At least one of the vehicles is serviced later in the week than the hatchback\nAnd(serviced(roadster) < serviced(van), serviced(van) < serviced(hatchback)) ::: The roadster is serviced later in the week than the van and earlier in the week than the hatchback\nOr(serviced(pickup) == serviced(van), serviced(pickup) == serviced(sedan)) ::: Either the pickup and the van are serviced on consecutive days, or the pickup and the sedan are serviced on consecutive days, but not both\nAnd(serviced(sedan) < serviced(pickup), serviced(sedan) < serviced(limousine)) ::: The sedan is serviced earlier in the week than the pickup or earlier in the week than the limousine, but not both\n\n# Options\nQuestion ::: ::: Which one of the following could be the list of the vehicles serviced on Tuesday, Wednesday, and Friday, listed in that order?\nis_sat(ForAll([v:vehicles], And(serviced(v) == serviced(pickup), serviced(v) == serviced(hatchback)))) ::: (A)\nis_sat(ForAll([v:vehicles], And(serviced(v) == serviced(pickup), serviced(v) == serviced(roadster)))) ::: (B)\nis_sat(ForAll([v:vehicles], And(serviced(v) == serviced(sedan), serviced(v) == serviced(limousine)))) ::: (C)\nis_sat(ForAll([v:vehicles], And(serviced(v) == serviced(van), serviced(v) == serviced(hatchback)))) ::: (D)\nis_sat(ForAll([v:vehicles], And(serviced(v) == serviced(van), serviced(v) == serviced(roadster)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_4_18",
    "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
    "question": "If there are exactly two white balls, then which one of the following boxes could contain a green ball?",
    "answer": "B",
    "options": [
      "A) box 1",
      "B) box 3",
      "C) box 4",
      "D) box 5",
      "E) box 6"
    ],
    "raw_logic_programs": [
      "# Declarations\nboxes = EnumSort([1, 2, 3, 4, 5, 6])\nballs = EnumSort([green, red, white])\ncolors = Function([boxes] -> [balls])\n\n# Constraints\nCount([b:balls], colors(boxes) == green) > Count([b:balls], colors(boxes) == red) ::: There are more red balls than white balls\nAnd(colors(boxes) == green, colors(boxes) == red, colors(boxes) == white) ::: There is a box containing a green ball that is lower in the stack than any box that contains a red ball\nAnd(colors(boxes) == white, colors(boxes) == green, colors(boxes) == red) ::: There is a white ball in a box that is immediately below a box that contains a green ball\n\n# Options\nQuestion ::: If there are exactly two white balls, then which one of the following boxes could contain a green ball?\nis_valid(Exists([b:boxes], colors(b) == green)) ::: (A)\nis_valid(Exists([b:boxes], colors(b) == red)) ::: (B)\nis_valid(Exists([b:boxes], colors(b) == white)) ::: (C)\nis_valid(Exists([b:boxes], colors(b) == green)) ::: (D)\nis_valid(Exists([b:boxes], colors(b) == green)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_4_19",
    "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
    "question": "If there are green balls in boxes 5 and 6, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) There are red balls in boxes 1 and 4.",
      "B) There are red balls in boxes 2 and 4.",
      "C) There is a white ball in box 1.",
      "D) There is a white ball in box 2.",
      "E) There is a white ball in box 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nboxes = EnumSort([1, 2, 3, 4, 5, 6])\nballs = EnumSort([green, red, white])\ncolors = Function([boxes] -> [balls])\n\n# Constraints\nForAll([b:balls], Count([b:boxes], colors(b) == green) > Count([b:boxes], colors(b) == red)) ::: There are more red balls than white balls\nAnd(colors(1) == green, colors(2) == red) ::: There is a box containing a green ball that is lower in the stack than any box that contains a red ball\nAnd(colors(3) == white, colors(4) == green) ::: There is a white ball in a box that is immediately below a box that contains a green ball\n\n# Options\nQuestion ::: If there are green balls in boxes 5 and 6, then which one of the following could be true?\nis_valid(Exists([b:boxes], colors(b) == red)) ::: (A)\nis_valid(Exists([b:boxes], colors(b) == red)) ::: (B)\nis_valid(Exists([b:boxes], colors(b) == white)) ::: (C)\nis_valid(Exists([b:boxes], colors(b) == white)) ::: (D)\nis_valid(Exists([b:boxes], colors(b) == white)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_4_20",
    "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
    "question": "The ball in which one of the following boxes must be the same color as at least one of the other balls?",
    "answer": "E",
    "options": [
      "A) box 2",
      "B) box 3",
      "C) box 4",
      "D) box 5",
      "E) box 6"
    ],
    "raw_logic_programs": [
      "# Declarations\nboxes = EnumSort([1, 2, 3, 4, 5, 6])\nballs = EnumSort([green, red, white])\ncolors = EnumSort([green, red, white])\n\n# Constraints\nForAll([b:balls], Count([b:colors], b) >= 1) ::: each ball is one of three colors\nAnd(Count([b:colors], red) > Count([b:colors], white), Count([b:colors], green) > Count([b:colors], red)) ::: there are more red balls than white balls\nAnd(Count([b:colors], green) > Count([b:colors], red), Count([b:colors], green) > Count([b:colors], white)) ::: there is a box containing a green ball that is lower in the stack than any box that contains a red ball\nAnd(Count([b:colors], white) > Count([b:colors], green), Count([b:colors], white) > Count([b:colors], red)) ::: there is a white ball in a box that is immediately below a box that contains a green ball\n\n# Options\nQuestion ::: The ball in which one of the following boxes must be the same color as at least one of the other balls?\nis_valid(Exists([b:boxes], And(balls(b) == red, balls(b + 1) == green))) ::: (A)\nis_valid(Exists([b:boxes], And(balls(b) == green, balls(b + 1) == red))) ::: (B)\nis_valid(Exists([b:boxes], And(balls(b) == white, balls(b + 1) == green))) ::: (C)\nis_valid(Exists([b:boxes], And(balls(b) == green, balls(b + 1) == white))) ::: (D)\nis_valid(Exists([b:boxes], And(balls(b) == white, balls(b + 1) == red))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_4_21",
    "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
    "question": "Which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) There is a green ball in a box that is lower than box 4.",
      "B) There is a green ball in a box that is higher than box 4.",
      "C) There is a red ball in a box that is lower than box 4.",
      "D) There is a red ball in a box that is higher than box 4.",
      "E) There is a white ball in a box that is lower than box 4."
    ],
    "raw_logic_programs": [
      "# Declarations\nboxes = EnumSort([1, 2, 3, 4, 5, 6])\nballs = EnumSort([green, red, white])\ncolors = Function([boxes] -> [balls])\n\n# Constraints\nForAll([b:balls], Count([b:boxes], b == colors(b)) >= 1) ::: each ball is in a box\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes], And(b == red, b < colors(green))) ::: there are more red balls than white balls\nCount([b:boxes], And(b == green, b < colors(red))) > Count([b:boxes"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_4_22",
    "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
    "question": "If there are red balls in boxes 2 and 3, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) There is a red ball in box 1.",
      "B) There is a white ball in box 1.",
      "C) There is a green ball in box 4.",
      "D) There is a red ball in box 5.",
      "E) There is a white ball in box 6."
    ],
    "raw_logic_programs": [
      "# Declarations\nboxes = EnumSort([1, 2, 3, 4, 5, 6])\nballs = EnumSort([green, red, white])\ncolors = Function([boxes] -> [balls])\n\n# Constraints\nForAll([b:balls], Count([b:boxes], colors(b) == red) > Count([b:boxes], colors(b) == white)) ::: There are more red balls than white balls\nAnd(colors(1) == green, Count([b:boxes], And(colors(b) == green, colors(b + 1) == red)) > 1) ::: There is a green ball in a box that is immediately below a box that contains a red ball\nAnd(colors(2) == red, colors(3) == red) ::: There are red balls in boxes 2 and 3\n\n# Options\nQuestion ::: If there are red balls in boxes 2 and 3, then which one of the following could be true?\nis_valid(Exists([b:boxes], And(colors(b) == red, colors(b + 1) == green))) ::: (A)\nis_valid(Exists([b:boxes], And(colors(b) == red, colors(b + 1) == white))) ::: (B)\nis_valid(Exists([b:boxes], And(colors(b) == green, colors(b + 1) == red))) ::: (C)\nis_valid(Exists([b:boxes], And(colors(b) == red, colors(b + 1) == red))) ::: (D)\nis_valid(Exists([b:boxes], And(colors(b) == white, colors(b + 1) == green))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201106_2-G_4_23",
    "context": "A street entertainer has six boxes stacked one on top of the other and numbered consecutively 1 through 6, from the lowest box up to the highest. Each box contains a single ball, and each ball is one of three colors—green, red, or white. Onlookers are to guess the color of each ball in each box, given that the following conditions hold: There are more red balls than white balls. There is a box containing a green ball that is lower in the stack than any box that contains a red ball. There is a white ball in a box that is immediately below a box that contains a green ball.",
    "question": "If boxes 2, 3, and 4 all contain balls that are the same color as each other, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Exactly two of the boxes contain a green ball.",
      "B) Exactly three of the boxes contain a green ball.",
      "C) Exactly three of the boxes contain a red ball.",
      "D) Exactly one of the boxes contains a white ball.",
      "E) Exactly two of the boxes contain a white ball."
    ],
    "raw_logic_programs": [
      "# Declarations\nboxes = EnumSort([1, 2, 3, 4, 5, 6])\nballs = EnumSort([green, red, white])\ncolors = EnumSort([green, red, white])\nballs_in_boxes = Function([boxes] -> [colors])\n\n# Constraints\nForAll([b:balls], Count([b:boxes], And(balls_in_boxes(b) == b)) >= 1) ::: each ball is in at least one box\nCount([b:boxes], And(balls_in_boxes(b) == red, balls_in_boxes(green) == green)) >= 2 ::: there are more red balls than white balls\nCount([b:boxes], And(balls_in_boxes(b) == green, balls_in_boxes(red) == red)) >= 1 ::: there is a box containing a green ball that is lower in the stack than any box that contains a red ball\nCount([b:boxes], And(balls_in_boxes(b) == white, balls_in_boxes(green) == green)) >= 1 ::: there is a white ball in a box that is immediately below a box that contains a green ball\n\n# Options\nQuestion ::: If boxes 2, 3, and 4 all contain balls that are the same color as each other, then which one of the following must be true?\nis_sat(ForAll([b:balls], And(balls_in_boxes(b) == b, balls_in_boxes(b) == b))) ::: (A)\nis_sat(ForAll([b:balls], And(balls_in_boxes(b) == b, balls_in_boxes(b) == b))) ::: (B)\nis_sat(ForAll([b:balls], And(balls_in_boxes(b) == b, balls_in_boxes(b) == b))) ::: (C)\nis_sat(ForAll([b:balls], And(balls_in_boxes(b) == b, balls_in_boxes(b) == b))) ::: (D)\nis_sat(ForAll([b:balls], And(balls_in_boxes(b) == b, balls_in_boxes(b) == b))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_1_1",
    "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
    "question": "Which one of the following could be the order, from first to last, in which the students perform?",
    "answer": "D",
    "options": [
      "A) Ginny, Fernando, Hakim, Kevin, Juanita",
      "B) Ginny, Juanita, Kevin, Hakim, Fernando",
      "C) Ginny, Kevin, Hakim, Juanita, Fernando",
      "D) Kevin, Ginny, Juanita, Fernando, Hakim",
      "E) Kevin, Juanita, Fernando, Hakim, Ginny"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Fernando, Ginny, Hakim, Juanita, Kevin])\npieces = EnumSort([piano_piece])\nperformances = Function([students] -> [pieces])\n\n# Constraints\nForAll([s:students], And(1 <= performances(s), performances(s) <= 5))\nForAll([p:pieces], And(1 <= performances(s) + 1, performances(s) + 1 <= 5))\nForAll([s:students], performances(s) == performances(s + 1))\nForAll([s:students], performances(s) == performances(s + 2))\nForAll([s:students], performances(s) == performances(s + 3))\nForAll([s:students], performances(s) == performances(s + 4))\nForAll([s:students], performances(s) == performances(s + 5))\n\n# Options\nQuestion ::: Which one of the following could be the order, from first to last, in which the students perform?\nis_valid(Exists([s:students], performances(s) == [piano_piece] + [piano_piece])) ::: (A)\nis_valid(Exists([s:students], performances(s) == [piano_piece] + [piano_piece] + [piano_piece])) ::: (B)\nis_valid(Exists([s:students], performances(s) == [piano_piece] + [piano_piece] + [piano_piece] + [piano_piece])) ::: (C)\nis_valid(Exists([s:students], performances(s) == [piano_piece] + [piano_piece] + [piano_piece] + [piano_piece] + [piano_piece])) ::: (D)\nis_valid(Exists([s:students], performances(s) == [piano_piece] + [piano_piece] + [piano_piece] + [piano_piece] + [piano_piece])) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_1_2",
    "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
    "question": "If Juanita performs earlier than Ginny, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Fernando performs fourth.",
      "B) Ginny performs second.",
      "C) Hakim performs third.",
      "D) Juanita performs third.",
      "E) Kevin performs second."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Fernando, Ginny, Hakim, Juanita, Kevin])\npieces = EnumSort([first, second, third, fourth])\nperformances = Function([students] -> [pieces])\n\n# Constraints\nForAll([p:pieces], And(1 <= performances(p), performances(p) <= 5))\nForAll([p:pieces], performances(p) == performances(first))\nForAll([p:pieces], performances(p) == performances(second))\nForAll([p:pieces], performances(p) == performances(third))\nForAll([p:pieces], performances(p) == performances(fourth))\nForAll([p:pieces], performances(p) == performances(fifth))\n\n# Options\nQuestion ::: If Juanita performs earlier than Ginny, then which one of the following could be true?\nis_valid(Exists([p:pieces], performances(p) == fourth)) ::: (A)\nis_valid(Exists([p:pieces], performances(p) == second)) ::: (B)\nis_valid(Exists([p:pieces], performances(p) == third)) ::: (C)\nis_valid(Exists([p:pieces], performances(p) == first)) ::: (D)\nis_valid(Exists([p:pieces], performances(p) == fifth)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_1_3",
    "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "C",
    "options": [
      "A) Fernando performs immediately before Juanita.",
      "B) Ginny performs immediately before Hakim.",
      "C) Hakim performs immediately before Ginny.",
      "D) Juanita performs immediately before Ginny.",
      "E) Kevin performs immediately before Hakim."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Fernando, Ginny, Hakim, Juanita, Kevin])\npieces = EnumSort([piano_piece])\nperformances = Function([students] -> [pieces])\n\n# Constraints\nForAll([s:students], And(1 <= performances(s), performances(s) <= 5))\nForAll([p:pieces], Implies(performances(Ginny) == performances(Fernando), performances(Ginny) < performances(Fernando))) ::: Ginny must perform earlier than Fernando\nForAll([p:pieces], Implies(performances(Kevin) == performances(Hakim), performances(Kevin) < performances(Hakim))) ::: Kevin must perform earlier than Hakim and Juanita\nForAll([p:pieces], Implies(performances(Hakim) == performances(Fernando), Or(performances(Hakim) == performances(Fernando) - 1, performances(Hakim) == performances(Fernando) + 1))) ::: Hakim must perform either immediately before or immediately after Fernando\nForAll([p:pieces], Implies(performances(Juanita) == performances(Ginny), performances(Juanita) < performances(Ginny))) ::: Juanita must perform immediately before Ginny\nForAll([p:pieces], Implies(performances(Kevin) == performances(Hakim), performances(Kevin) < performances(Hakim))) ::: Kevin must perform immediately before Hakim\n\n# Options\nQuestion ::: Which one of the following CANNOT be true?\nis_exception(is_sat(performances(Fernando) == performances(Juanita))) ::: (A)\nis_exception(is_sat(performances(Ginny) == performances(Hakim))) ::: (B)\nis_exception(is_sat(performances(Hakim) == performances(Fernando))) ::: (C)\nis_exception(is_sat(performances(Juanita) == performances(Ginny))) ::: (D)\nis_exception(is_sat(performances(Kevin) == performances(Hakim))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_1_4",
    "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
    "question": "The order in which the students perform is fully determined if which one of the following is true?",
    "answer": "E",
    "options": [
      "A) Fernando performs immediately before Hakim.",
      "B) Ginny performs immediately before Fernando.",
      "C) Hakim performs immediately before Juanita.",
      "D) Juanita performs immediately before Hakim.",
      "E) Kevin performs immediately before Fernando."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Fernando, Ginny, Hakim, Juanita, Kevin])\npieces = EnumSort([piano_piece])\nperformances = Function([students] -> [pieces])\n\n# Constraints\nForAll([s:students], And(1 <= performances(s), performances(s) <= 5))\nForAll([s:students], performances(s)!= performances(t) for all t:students) ::: no two performances overlap\nAnd(performances(Ginny) < performances(Fernando), performances(Kevin) < performances(Fernando)) ::: Ginny must perform earlier than Fernando\nAnd(performances(Kevin) < performances(Hakim), performances(Hakim) < performances(Juanita)) ::: Kevin must perform earlier than Hakim and Juanita\nAnd(performances(Hakim) < performances(Fernando), performances(Hakim) < performances(Juanita)) ::: Hakim must perform either immediately before or immediately after Fernando\n\n# Options\nQuestion ::: ::: The order in which the students perform is fully determined if which one of the following is true?\nis_sat(performances(Fernando) == performances(Hakim)) ::: (A)\nis_sat(performances(Ginny) == performances(Fernando)) ::: (B)\nis_sat(performances(Hakim) == performances(Juanita)) ::: (C)\nis_sat(performances(Juanita) == performances(Hakim)) ::: (D)\nis_sat(performances(Kevin) == performances(Fernando)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_1_5",
    "context": "A professor must determine the order in which five of her students—Fernando, Ginny, Hakim, Juanita, and Kevin—will perform in an upcoming piano recital. Each student performs one piece, and no two performances overlap. The following constraints apply: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita. Hakim must perform either immediately before or immediately after Fernando.",
    "question": "How many of the students are there any one of whom could perform fourth?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Fernando, Ginny, Hakim, Juanita, Kevin])\nperformances = EnumSort([piano_recital])\nperform = Function([students] -> [performances])\n\n# Constraints\nForAll([s:students], And(1 <= perform(s) <= 5, perform(s) == perform(s + 1))) ::: each student performs one piece\nAnd(perform(Ginny) < perform(Fernando), perform(Kevin) < perform(Hakim) < perform(Juanita)) ::: Ginny must perform earlier than Fernando. Kevin must perform earlier than Hakim and Juanita\nAnd(perform(Hakim) < perform(Fernando), perform(Hakim) == perform(perform(Hakim + 1))) ::: Hakim must perform either immediately before or immediately after Fernando\n\n# Options\nQuestion ::: How many of the students are there any one of whom could perform fourth?\nis_valid(Exists([s:students], perform(s) == 4)) ::: (A)\nis_valid(Exists([s:students], perform(s) == 3)) ::: (B)\nis_valid(Exists([s:students], perform(s) == 2)) ::: (C)\nis_valid(Exists([s:students], perform(s) == 1)) ::: (D)\nis_valid(Exists([s:students], perform(s) == 5)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_2_6",
    "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
    "question": "Which one of the following could be the order of the presentations, from first to sixth?",
    "answer": "C",
    "options": [
      "A) stenciling, origami, needlework, textile making, pottery, woodworking",
      "B) stenciling, origami, pottery, woodworking, needlework, textile making",
      "C) stenciling, origami, textile making, woodworking, needlework, pottery",
      "D) textile making, origami, stenciling, woodworking, needlework, pottery",
      "E) textile making, stenciling, woodworking, needlework, pottery, origami"
    ],
    "raw_logic_programs": [
      "# Declarations\nteachers = EnumSort([Jiang, Kudrow, Lanning])\nsubjects = EnumSort([needlework, origami, pottery, stenciling, textile making, woodworking])\npresentations = Function([teachers, subjects] -> [int])\n\n# Constraints\nForAll([t:teachers], And(1 <= presentations(t, subjects), presentations(t, subjects) <= 6))\nForAll([s:subjects], And(1 <= presentations(Jiang, s), presentations(Jiang, s) <= 2))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 2))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 2))\nDistinct([s:subjects], presentations(Kudrow, s)) ::: Kudrow cannot give two presentations in a row\nDistinct([s:subjects], presentations(Lanning, s)) ::: The presentation on stenciling must be given earlier than the one on origami\nDistinct([s:subjects], presentations(Lanning, s)) ::: The presentation on textile making must be given earlier than the one on woodworking\n\n# Options\nQuestion ::: ::: Which one of the following could be the order of the presentations, from first to sixth?\nis_exception(is_sat(presentations(Jiang, needlework) == 1)) ::: (A)\nis_exception(is_sat(presentations(Kudrow, stenciling) == 1)) ::: (B)\nis_exception(is_sat(presentations(Lanning, woodworking) == 1)) ::: (C)\nis_exception(is_sat(presentations(Lanning, textile making) == 1)) ::: (D)\nis_exception(is_sat(presentations(Lanning, pottery) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_2_7",
    "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
    "question": "If textile making is presented fifth, which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Needlework is presented sixth.",
      "B) Pottery is presented fourth.",
      "C) Stenciling is presented second.",
      "D) Stenciling is presented third.",
      "E) Woodworking is presented second."
    ],
    "raw_logic_programs": [
      "# Declarations\nteachers = EnumSort([Jiang, Kudrow, Lanning])\nsubjects = EnumSort([needlework, origami, pottery, stenciling, textile_making, woodworking])\npresentations = Function([teachers, subjects] -> [int])\n\n# Constraints\nForAll([t:teachers, s:subjects], And(1 <= presentations(t, s), presentations(t, s) <= 6))\nDistinct([t:teachers], presentations(t, subjects)) ::: no two teachers give two presentations in a row\nAnd(presentations(Kudrow, stenciling) < presentations(Kudrow, origami), presentations(Kudrow, textile_making) < presentations(Kudrow, woodworking)) ::: The presentation on stenciling must be given earlier than the one on origami\nAnd(presentations(Lanning, woodworking) < presentations(Lanning, textile_making), presentations(Lanning, needlework) < presentations(Lanning, origami)) ::: The presentation on woodworking must be given earlier than the one on origami\nAnd(presentations(Kudrow, stenciling) < presentations(Kudrow, pottery), presentations(Kudrow, textile_making) < presentations(Kudrow, woodworking)) ::: The presentation on stenciling must be given earlier than the one on pottery\nAnd(presentations(Lanning, woodworking) < presentations(Lanning, pottery), presentations(Lanning, needlework) < presentations(Lanning, origami)) ::: The presentation on woodworking must be given earlier than the one on pottery\n\n# Options\nQuestion ::: If textile making is presented fifth, which one of the following could be true?\nis_exception(is_sat(presentations(Lanning, woodworking) == 5)) ::: (A)\nis_exception(is_sat(presentations(Kudrow, stenciling) == 5)) ::: (B)\nis_exception(is_sat(presentations(Kudrow, pottery) == 5)) ::: (C)\nis_exception(is_sat(presentations(Kudrow, textile_making) == 5)) ::: (D)\nis_exception(is_sat(presentations(Lanning, needlework) == 5)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_2_8",
    "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
    "question": "If needlework is presented first, which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Origami is presented sixth.",
      "B) Pottery is presented second.",
      "C) Stenciling is presented third.",
      "D) Textile making is presented fifth.",
      "E) Woodworking is presented third."
    ],
    "raw_logic_programs": [
      "# Declarations\nteachers = EnumSort([Jiang, Kudrow, Lanning])\nsubjects = EnumSort([needlework, origami, pottery, stenciling, textile_making, woodworking])\npresentations = Function([teachers, subjects] -> [int])\n\n# Constraints\nForAll([t:teachers], And(1 <= presentations(t, subjects), presentations(t, subjects) <= 6))\nForAll([s:subjects], And(1 <= presentations(Jiang, s), presentations(Jiang, s) <= 2))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 2))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 2))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Kudrow, s), presentations(Kudrow, s) <= 1))\nForAll([s:subjects], And(1 <= presentations(Lanning, s), presentations(Lanning, s)"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_2_9",
    "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
    "question": "Jiang CANNOT give both",
    "answer": "B",
    "options": [
      "A) the first and third presentations",
      "B) the first and fourth presentations",
      "C) the first and fifth presentations",
      "D) the second and third presentations",
      "E) the second and fourth presentations"
    ],
    "raw_logic_programs": [
      "# Declarations\nteachers = EnumSort([Jiang, Kudrow, Lanning])\nsubjects = EnumSort([needlework, origami, pottery, stenciling, textile_making, woodworking])\npresentations = Function([teachers, subjects] -> [int])\n\n# Constraints\nForAll([t:teachers], And(1 <= presentations(t, subjects), presentations(t, subjects) <= 6))\nForAll([t:teachers], And(1 <= presentations(t, subjects), presentations(t, subjects) <= 6))\nForAll([t:teachers], And(1 <= presentations(t, subjects), presentations(t, subjects) <= 6))\nForAll([t:teachers], And(1 <= presentations(t, subjects), presentations(t, subjects) <= 6))\nForAll([t:teachers], And(1 <= presentations(t, subjects), presentations(t, subjects) <= 6))\nForAll([t:teachers], And(1 <= presentations(t, subjects), presentations(t, subjects) <= 6))\n\n# Options\nQuestion ::: Jiang CANNOT give both\nis_exception(is_sat(presentations(Jiang, needlework) == 1)) ::: (A)\nis_exception(is_sat(presentations(Jiang, origami) == 1)) ::: (B)\nis_exception(is_sat(presentations(Jiang, pottery) == 1)) ::: (C)\nis_exception(is_sat(presentations(Jiang, stenciling) == 1)) ::: (D)\nis_exception(is_sat(presentations(Jiang, textile_making) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_2_10",
    "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
    "question": "If needlework is presented sixth, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Origami is presented fourth.",
      "B) Pottery is presented fifth.",
      "C) Stenciling is presented third.",
      "D) Textile making is presented first.",
      "E) Woodworking is presented fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\nteachers = EnumSort([Jiang, Kudrow, Lanning])\nsubjects = EnumSort([needlework, origami, pottery, stenciling, textile_making, woodworking])\npresentations = Function([teachers, subjects] -> [int])\n\n# Constraints\nForAll([t:teachers, s:subjects], And(1 <= presentations(t, s), presentations(t, s) <= 6))\nAnd(presentations(Kudrow, stenciling) < presentations(Kudrow, origami)) ::: The presentation on stenciling must be given earlier than the one on origami\nAnd(presentations(Kudrow, textile_making) < presentations(Kudrow, woodworking)) ::: The presentation on textile making must be given earlier than the one on woodworking\nAnd(presentations(Lanning, woodworking) < presentations(Jiang, needlework)) ::: Woodworking is presented fourth\n\n# Options\nQuestion ::: If needlework is presented sixth, which one of the following must be true?\nis_valid(Exists([s:subjects], presentations(Jiang, s) == 6)) ::: (A)\nis_valid(Exists([s:subjects], presentations(Kudrow, s) == 4)) ::: (B)\nis_valid(Exists([s:subjects], presentations(Lanning, s) == 5)) ::: (C)\nis_valid(Exists([s:subjects], presentations(Kudrow, s) == 3)) ::: (D)\nis_valid(Exists([s:subjects], presentations(Lanning, s) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_2_11",
    "context": "As part of an open house at a crafts studio, three teachers—Jiang, Kudrow, and Lanning—will give six consecutive presentations on six different subjects. Jiang will present on needlework and origami; Kudrow on pottery, stenciling, and textile making; and Lanning on woodworking. The order of their presentations will meet the following conditions: Kudrow cannot give two presentations in a row. The presentation on stenciling must be given earlier than the one on origami. The presentation on textile making must be given earlier than the one on woodworking.",
    "question": "Which one of the following CANNOT be the subject of the second presentation?",
    "answer": "C",
    "options": [
      "A) needlework",
      "B) origami",
      "C) pottery",
      "D) textile making",
      "E) woodworking"
    ],
    "raw_logic_programs": [
      "# Declarations\nteachers = EnumSort([Jiang, Kudrow, Lanning])\nsubjects = EnumSort([needlework, origami, pottery, stenciling, textile_making, woodworking])\npresentations = Function([teachers, subjects] -> [int])\n\n# Constraints\nForAll([t:teachers], And(1 <= presentations(t, subjects), presentations(t, subjects) <= 6))\nDistinct([t:teachers], presentations(t, subjects)) ::: no two teachers give two presentations in a row\nAnd(presentations(Kudrow, stenciling) < presentations(Kudrow, origami), presentations(Kudrow, textile_making) < presentations(Kudrow, woodworking)) ::: The presentation on stenciling must be given earlier than the one on origami\nAnd(presentations(Lanning, woodworking) < presentations(Lanning, textile_making), presentations(Lanning, needlework) < presentations(Lanning, origami)) ::: The presentation on textile making must be given earlier than the one on woodworking\n\n# Options\nQuestion ::: Which one of the following CANNOT be the subject of the second presentation?\nis_exception(is_sat(presentations(Jiang, needlework) == 2)) ::: (A)\nis_exception(is_sat(presentations(Kudrow, pottery) == 2)) ::: (B)\nis_exception(is_sat(presentations(Lanning, woodworking) == 2)) ::: (C)\nis_exception(is_sat(presentations(Lanning, textile_making) == 2)) ::: (D)\nis_exception(is_sat(presentations(Kudrow, stenciling) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_3_12",
    "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
    "question": "Which one of the following is a list of foods that could be the foods selected?",
    "answer": "B",
    "options": [
      "A) F, N, O, T, V",
      "B) F, O, P, T, W",
      "C) G, N, P, T, W",
      "D) G, O, P, T, V",
      "E) G, O, P, V, W"
    ],
    "raw_logic_programs": [
      "# Declarations\nfoods = EnumSort([F, G, N, O, P, T, V, W])\nselected = Function([foods] -> [foods])\n\n# Constraints\nForAll([f:foods], And(1 <= selected(f), selected(f) <= 8)) ::: no food is selected more than once\nAnd(selected(F), selected(G)) ::: G is selected if and only if F is selected\nAnd(selected(N), selected(V)) ::: N is selected if and only if V is selected\nAnd(selected(N), selected(W)) ::: N is selected if and only if W is selected\nAnd(selected(O), selected(P)) ::: O is selected if and only if P is selected\nAnd(selected(O), selected(T)) ::: O is selected if and only if T is selected\nAnd(selected(P), selected(W)) ::: P is selected if and only if W is selected\nAnd(selected(T), selected(V)) ::: T is selected if and only if V is selected\n\n# Options\nQuestion ::: Which one of the following is a list of foods that could be the foods selected?\nis_valid(is_sat(selected(F) == selected(G))) ::: (A)\nis_valid(is_sat(selected(O) == selected(P))) ::: (B)\nis_valid(is_sat(selected(N) == selected(V))) ::: (C)\nis_valid(is_sat(selected(O) == selected(T))) ::: (D)\nis_valid(is_sat(selected(P) == selected(W))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_3_13",
    "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
    "question": "Which one of the following is a pair of foods of which the organizer of the luncheon must select at least one?",
    "answer": "D",
    "options": [
      "A) F, T",
      "B) G, O",
      "C) N, T",
      "D) O, P",
      "E) V, W"
    ],
    "raw_logic_programs": [
      "# Declarations\nfoods = EnumSort([F, G, N, O, P, T, V, W])\nhot_foods = EnumSort([F, N, T])\n\n# Constraints\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 8)) ::: exactly eight foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 5)) ::: exactly five foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 3)) ::: exactly three foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 2)) ::: exactly two foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 1)) ::: exactly one food\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 0)) ::: exactly zero foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 1)) ::: exactly one food\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 2)) ::: exactly two foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 3)) ::: exactly three foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 4)) ::: exactly four foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 5)) ::: exactly five foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 6)) ::: exactly six foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 7)) ::: exactly seven foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 8)) ::: exactly eight foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 1)) ::: exactly one food\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 2)) ::: exactly two foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 3)) ::: exactly three foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 4)) ::: exactly four foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 5)) ::: exactly five foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 6)) ::: exactly six foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 7)) ::: exactly seven foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 8)) ::: exactly eight foods\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 1)) ::: exactly one food\nForAll([f:foods], And(1 <= Count([m:foods], f), Count([m:foods], f) <= 2"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_3_14",
    "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
    "question": "If O is the only main course selected, then which one of the following CANNOT be selected?",
    "answer": "E",
    "options": [
      "A) F",
      "B) G",
      "C) T",
      "D) V",
      "E) W"
    ],
    "raw_logic_programs": [
      "# Declarations\nfoods = EnumSort([F, G, N, O, P, T, V, W])\nhot_foods = EnumSort([F, N, T])\nmain_courses = EnumSort([N, O, P])\nside_dishes = EnumSort([T, V, W])\n\n# Constraints\nForAll([f:foods], And(1 <= Count([m:main_courses, s:side_dishes], f == m) <= 5, Count([m:main_courses, s:side_dishes], f == s) <= 1)) ::: At least one dessert, at least one main course, and at least one side dish must be selected\nForAll([f:foods], And(1 <= Count([m:main_courses, s:side_dishes], f == m) <= 1, Count([m:main_courses, s:side_dishes], f == s) <= 1)) ::: At least one hot food must be selected\nForAll([f:foods], And(1 <= Count([m:main_courses, s:side_dishes], f == m) <= 1, Count([m:main_courses, s:side_dishes], f == s) <= 1)) ::: If either P or W is selected, both must be selected\nForAll([f:foods], And(1 <= Count([m:main_courses, s:side_dishes], f == m) <= 1, Count([m:main_courses, s:side_dishes], f == s) <= 1)) ::: If G is selected, O must be selected\nForAll([f:foods], And(1 <= Count([m:main_courses, s:side_dishes], f == m) <= 1, Count([m:main_courses, s:side_dishes], f == s) <= 1)) ::: If N is selected, V cannot be selected\n\n# Options\nQuestion ::: If O is the only main course selected, then which one of the following CANNOT be selected?\nis_exception(is_sat(ForAll([f:foods], And(f == G, f == O)))) ::: (A)\nis_exception(is_sat(ForAll([f:foods], And(f == G, f == N)))) ::: (B)\nis_exception(is_sat(ForAll([f:foods], And(f == G, f == T)))) ::: (C)\nis_exception(is_sat(ForAll([f:foods], And(f == G, f == V)))) ::: (D)\nis_exception(is_sat(ForAll([f:foods], And(f == G, f == W)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_3_15",
    "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
    "question": "If F is not selected, which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) P is the only main course selected.",
      "B) T is the only side dish selected.",
      "C) Exactly two hot foods are selected.",
      "D) Exactly three main courses are selected.",
      "E) Exactly three side dishes are selected."
    ],
    "raw_logic_programs": [
      "# Declarations\nfoods = EnumSort([F, G, N, O, P, T, V, W])\nhot_foods = EnumSort([F, N, T])\nmain_courses = EnumSort([N, O, P])\nside_dishes = EnumSort([T, V, W])\nselected = Function([foods] -> [bool])\n\n# Constraints\nForAll([f:foods], And(1 <= selected(f), selected(f) <= 8)) ::: no food is selected more than once\nAnd(selected(F), selected(G)) ::: F and G are both desserts\nAnd(selected(N), selected(O), selected(P)) ::: N, O, and P are all main courses\nAnd(selected(T), selected(V), selected(W)) ::: T, V, and W are all side dishes\nAnd(selected(F), selected(N), selected(T)) ::: F, N, and T are all hot foods\nAnd(selected(N), selected(O), selected(P)) ::: N, O, and P are all main courses\nAnd(selected(N), selected(V), selected(W)) ::: N, V, and W are all side dishes\nAnd(selected(N), selected(T), selected(V)) ::: N, T, and V are all hot foods\nAnd(selected(N), selected(T), selected(W)) ::: N, T, and W are all hot foods\nAnd(selected(N), selected(V), selected(W)) ::: N, V, and W are all hot foods\nAnd(selected(N), selected(O), selected(P), selected(T), selected(V), selected(W)) ::: N, O, P, T, V, and W are all foods\nAnd(selected(N), selected(O), selected(P), selected(T), selected(V), selected(W), selected(F)) ::: N, O, P, T, V, W, and F are all foods\nAnd(selected(N), selected(O), selected(P), selected(T), selected(V), selected(W), selected(G)) ::: N, O, P, T, V, W, and G are all foods\nAnd(selected(N), selected(O), selected(P), selected(T), selected(V), selected(W), selected(G), selected(F)) ::: N, O, P, T, V, W, G, and F are all foods\nAnd(selected(N), selected(O), selected(P), selected(T), selected(V), selected(W), selected(G), selected(F), selected(H)) ::: N, O, P, T, V, W, G, F, and H are all foods\nAnd(selected(N), selected(O), selected(P), selected(T), selected(V), selected(W), selected(G), selected(F), selected(H), selected(I)) ::: N, O, P, T, V, W, G, F, H, and I are all foods\nAnd(selected(N), selected(O), selected(P), selected(T), selected(V), selected(W), selected(G), selected(F), selected(H), selected(I), selected(J)) ::: N, O, P, T, V, W, G, F, H, I, and J are all foods\nAnd(selected(N), selected(O), selected(P), selected(T), selected(V), selected(W), selected(G), selected(F), selected(H), selected(I), selected(J), selected(K)) ::: N, O, P, T, V, W, G, F, H, I, J, and K are all foods\nAnd(selected(N), selected(O), selected(P), selected(T), selected(V), selected(W), selected(G), selected(F), selected(H), selected(I), selected(J), selected(K), selected(L)) ::: N, O, P, T, V, W, G, F, H, I, J, K, and L are all foods\nAnd(selected(N), selected(O), selected(P), selected(T), selected(V), selected(W), selected(G), selected(F), selected(H), selected(I), selected(J), selected(K), selected(L), selected(M)) ::: N, O, P, T, V, W,"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_3_16",
    "context": "The organizer of a luncheon will select exactly five foods to be served from among exactly eight foods: two desserts—F and G; three main courses—N, O, and P; three side dishes—T, V, and W. Only F, N, and T are hot foods. The following requirements will be satisfied: At least one dessert, at least one main course, and at least one side dish must be selected. At least one hot food must be selected. If either P or W is selected, both must be selected. If G is selected, O must be selected. If N is selected, V cannot be selected.",
    "question": "If T and V are the only side dishes selected, then which one of the following is a pair of foods each of which must be selected?",
    "answer": "A",
    "options": [
      "A) F and G",
      "B) F and N",
      "C) F and P",
      "D) N and O",
      "E) O and P"
    ],
    "raw_logic_programs": [
      "# Declarations\nfoods = EnumSort([F, G, N, O, P, T, V, W])\nselected = Function([foods] -> [bool])\n\n# Constraints\nForAll([f:foods], And(1 <= selected(f), selected(f) <= 8)) ::: exactly eight foods are available\nAnd(selected(F), selected(G)) ::: F and G are selected\nAnd(selected(N), selected(O)) ::: N and O are selected\nAnd(selected(N), selected(P)) ::: N and P are selected\nAnd(selected(N), selected(W)) ::: N and W are selected\nAnd(selected(O), selected(P)) ::: O and P are selected\nAnd(selected(O), selected(W)) ::: O and W are selected\nAnd(selected(P), selected(W)) ::: P and W are selected\nAnd(selected(T), selected(V)) ::: T and V are selected\nAnd(selected(T), selected(W)) ::: T and W are selected\nAnd(selected(V), selected(W)) ::: V and W are selected\nAnd(selected(F), selected(N)) ::: F and N are selected\nAnd(selected(F), selected(O)) ::: F and O are selected\nAnd(selected(F), selected(P)) ::: F and P are selected\nAnd(selected(F), selected(W)) ::: F and W are selected\nAnd(selected(G), selected(N)) ::: G and N are selected\nAnd(selected(G), selected(O)) ::: G and O are selected\nAnd(selected(G), selected(P)) ::: G and P are selected\nAnd(selected(G), selected(W)) ::: G and W are selected\nAnd(selected(N), selected(O)) ::: N and O are selected\nAnd(selected(N), selected(P)) ::: N and P are selected\nAnd(selected(N), selected(W)) ::: N and W are selected\nAnd(selected(O), selected(P)) ::: O and P are selected\nAnd(selected(O), selected(W)) ::: O and W are selected\nAnd(selected(P), selected(W)) ::: P and W are selected\nAnd(selected(T), selected(V)) ::: T and V are selected\nAnd(selected(T), selected(W)) ::: T and W are selected\nAnd(selected(V), selected(W)) ::: V and W are selected\nAnd(selected(F), selected(N)) ::: F and N are selected\nAnd(selected(F), selected(O)) ::: F and O are selected\nAnd(selected(F), selected(P)) ::: F and P are selected\nAnd(selected(F), selected(W)) ::: F and W are selected\nAnd(selected(G), selected(N)) ::: G and N are selected\nAnd(selected(G), selected(O)) ::: G and O are selected\nAnd(selected(G), selected(P)) ::: G and P are selected\nAnd(selected(G), selected(W)) ::: G and W are selected\nAnd(selected(N), selected(O)) ::: N and O are selected\nAnd(selected(N), selected(P)) ::: N and P are selected\nAnd(selected(N), selected(W)) ::: N and W are selected\nAnd(selected(O), selected(P)) ::: O and P are selected\nAnd(selected(O), selected(W)) ::: O and W are selected\nAnd(selected(P), selected(W)) ::: P and W are selected\nAnd(selected(T), selected(V)) ::: T and V are selected\nAnd(selected(T), selected(W)) ::: T and W are selected\nAnd(selected(V), selected(W)) ::: V and W are selected\nAnd(selected(F), selected(N)) ::: F and N are selected\nAnd(selected(F), selected(O)) ::: F and O are selected\nAnd(selected(F), selected(P)) ::: F and P are selected\nAnd(selected(F), selected(W)) ::: F and W are selected\nAnd(selected(G), selected(N)) ::: G and N are selected\nAnd(selected(G), selected(O)) ::: G and O are selected\nAnd(selected(G), selected(P)) ::: G and P are selected\nAnd(selected(G), selected(W)) ::: G and W are selected\nAnd(selected(N), selected"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_4_17",
    "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
    "question": "Which one of the following could be the order in which the programs are shown, from earliest to latest?",
    "answer": "B",
    "options": [
      "A) Generations, Roamin', Waterloo, Terry, Sundown",
      "B) Roamin', Sundown, Waterloo, Terry, Generations",
      "C) Roamin', Terry, Waterloo, Generations, Sundown",
      "D) Waterloo, Roamin', Sundown, Terry, Generations",
      "E) Waterloo, Terry, Sundown, Roamin', Generations"
    ],
    "raw_logic_programs": [
      "# Declarations\nprograms = EnumSort([Generations, Roamin', Sundown, Terry, Waterloo])\nstart_time = EnumSort([1, 1.5, 2, 2.5, 3])\n\n# Constraints\nForAll([p:programs], And(1 <= start_time(p), start_time(p) <= 3))\nForAll([p:programs], And(start_time(p) == 1, start_time(Generations) == 1))\nForAll([p:programs], And(start_time(p) == 1.5, start_time(Roamin') == 1.5))\nForAll([p:programs], And(start_time(p) == 2, start_time(Sundown) == 2))\nForAll([p:programs], And(start_time(p) == 2.5, start_time(Terry) == 2.5))\nForAll([p:programs], And(start_time(p) == 3, start_time(Waterloo) == 3))\n\n# Options\nQuestion ::: ::: Which one of the following could be the order in which the programs are shown, from earliest to latest?\nis_sat(ForAll([p:programs], And(start_time(p) == 1, start_time(Generations) == 1))) ::: (A)\nis_sat(ForAll([p:programs], And(start_time(p) == 1.5, start_time(Roamin') == 1.5))) ::: (B)\nis_sat(ForAll([p:programs], And(start_time(p) == 2, start_time(Sundown) == 2))) ::: (C)\nis_sat(ForAll([p:programs], And(start_time(p) == 2.5, start_time(Terry) == 2.5))) ::: (D)\nis_sat(ForAll([p:programs], And(start_time(p) == 3, start_time(Waterloo) == 3))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_4_18",
    "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
    "question": "If Waterloo is the first program, then how many orders are there in which the remaining programs could be shown?",
    "answer": "B",
    "options": [
      "A) one",
      "B) two",
      "C) three",
      "D) four",
      "E) five"
    ],
    "raw_logic_programs": [
      "# Declarations\nprograms = EnumSort([Generations, Roamin', Sundown, Terry, Waterloo])\nstarts = Function([programs] -> [int])\nForAll([p:programs], And(1 <= starts(p), starts(p) <= 3))\n\n# Constraints\nDistinct([p:programs], starts(p)) ::: no two programs are shown at the same time\nAnd(starts(Generations) == 1, starts(Terry) == 2) ::: Generations starts on the hour rather than the half hour\nAnd(starts(Terry) == 1, starts(Sundown) == 2) ::: Terry starts on the half hour rather than the hour\nAnd(starts(Sundown) == 1, starts(Waterloo) == 2) ::: Roamin' is shown earlier than Sundown\nAnd(starts(Waterloo) == 1, starts(Terry) == 2) ::: If Waterloo is shown earlier than Terry, it is shown immediately before Terry\n\n# Options\nQuestion ::: If Waterloo is the first program, then how many orders are there in which the remaining programs could be shown?\nis_valid(Exists([p:programs], starts(p) == 1)) ::: (A)\nis_valid(Exists([p:programs], starts(p) == 2)) ::: (B)\nis_valid(Exists([p:programs], starts(p) == 3)) ::: (C)\nis_valid(Exists([p:programs], starts(p) == 4)) ::: (D)\nis_valid(Exists([p:programs], starts(p) == 5)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_4_19",
    "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
    "question": "If Roamin' is the second program, then each of the following could be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) Sundown is the third program.",
      "B) Sundown is the fourth program.",
      "C) Terry is the fifth program.",
      "D) Waterloo is the third program.",
      "E) Waterloo is the fifth program."
    ],
    "raw_logic_programs": [
      "# Declarations\nprograms = EnumSort([Generations, Roamin', Sundown, Terry, Waterloo])\nstart_time = EnumSort([1, 1.5, 2, 2.5, 3])\n\n# Constraints\nForAll([p:programs], And(1 <= start_time(p), start_time(p) <= 3))\nForAll([p:programs], And(start_time(p) == 1, start_time(Generations) == 1))\nForAll([p:programs], And(start_time(p) == 1.5, start_time(Roamin') == 1.5))\nForAll([p:programs], And(start_time(p) == 2, start_time(Sundown) == 2))\nForAll([p:programs], And(start_time(p) == 2.5, start_time(Terry) == 2.5))\nForAll([p:programs], And(start_time(p) == 3, start_time(Waterloo) == 3))\n\n# Options\nQuestion ::: If Roamin' is the second program, then each of the following could be true EXCEPT:\nis_exception(is_sat(start_time(Sundown) == 2)) ::: (A)\nis_exception(is_sat(start_time(Terry) == 2.5)) ::: (B)\nis_exception(is_sat(start_time(Waterloo) == 3)) ::: (C)\nis_exception(is_sat(start_time(Waterloo) == 3)) ::: (D)\nis_exception(is_sat(start_time(Sundown) == 2.5)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_4_20",
    "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
    "question": "If Sundown is the third program, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Generations is the first program.",
      "B) Roamin' is the first program.",
      "C) Roamin' is the second program.",
      "D) Terry is the fifth program.",
      "E) Waterloo is the fourth program."
    ],
    "raw_logic_programs": [
      "# Declarations\nprograms = EnumSort([Generations, Roamin', Sundown, Terry, Waterloo])\nstart_time = EnumSort([1, 1.5, 2, 2.5, 3])\n\n# Constraints\nForAll([p:programs], And(1 <= start_time(p), start_time(p) <= 3))\nForAll([p:programs], And(start_time(p) == 1, p == Generations))\nForAll([p:programs], And(start_time(p) == 1.5, p == Roamin'))\nForAll([p:programs], And(start_time(p) == 2, p == Sundown))\nForAll([p:programs], And(start_time(p) == 2.5, p == Terry))\nForAll([p:programs], And(start_time(p) == 3, p == Waterloo))\n\n# Options\nQuestion ::: If Sundown is the third program, then which one of the following must be true?\nis_valid(Exists([p:programs], And(p == Generations, start_time(p) == 1))) ::: A)\nis_valid(Exists([p:programs], And(p == Roamin', start_time(p) == 1.5))) ::: B)\nis_valid(Exists([p:programs], And(p == Roamin', start_time(p) == 2))) ::: C)\nis_valid(Exists([p:programs], And(p == Terry, start_time(p) == 2.5))) ::: D)\nis_valid(Exists([p:programs], And(p == Waterloo, start_time(p) == 3))) ::: E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_4_21",
    "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
    "question": "If Generations is the third program, then which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Roamin' is the second program.",
      "B) Roamin' is the fifth program.",
      "C) Sundown is the fourth program.",
      "D) Terry is the fourth program.",
      "E) Waterloo is the second program."
    ],
    "raw_logic_programs": [
      "# Declarations\nprograms = EnumSort([Generations, Roamin', Sundown, Terry, Waterloo])\nstart_time = EnumSort([1, 1.5, 2, 2.5, 3])\n\n# Constraints\nForAll([p:programs], And(1 <= start_time(p), start_time(p) <= 3))\nForAll([p:programs], And(start_time(p) == 1, start_time(Generations) == 1))\nForAll([p:programs], And(start_time(p) == 1.5, start_time(Terry) == 1.5))\nForAll([p:programs], And(start_time(p) == 2, start_time(Roamin') == 2))\nForAll([p:programs], And(start_time(p) == 2.5, start_time(Sundown) == 2.5))\nForAll([p:programs], And(start_time(p) == 3, start_time(Waterloo) == 3))\n\n# Options\nQuestion ::: If Generations is the third program, then which one of the following could be true?\nis_valid(Exists([p:programs], And(start_time(p) == 1.5, start_time(Terry) == 1.5))) ::: (A)\nis_valid(Exists([p:programs], And(start_time(p) == 2, start_time(Roamin') == 2))) ::: (B)\nis_valid(Exists([p:programs], And(start_time(p) == 2.5, start_time(Sundown) == 2.5))) ::: (C)\nis_valid(Exists([p:programs], And(start_time(p) == 3, start_time(Waterloo) == 3))) ::: (D)\nis_valid(Exists([p:programs], And(start_time(p) == 1, start_time(Generations) == 1))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_4_22",
    "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "B",
    "options": [
      "A) Sundown is shown immediately before Generations.",
      "B) Waterloo is shown immediately before Roamin'.",
      "C) Generations is shown immediately before Sundown.",
      "D) Roamin' is shown immediately before Terry.",
      "E) Terry is shown immediately before Waterloo."
    ],
    "raw_logic_programs": [
      "# Declarations\nprograms = EnumSort([Generations, Roamin', Sundown, Terry, Waterloo])\nstart_time = Function([programs] -> [int])\n\n# Constraints\nForAll([p:programs], And(1 <= start_time(p), start_time(p) <= 3))\nAnd(start_time(Generations) == 1, start_time(Terry) == 1) ::: Generations starts on the hour rather than the half hour\nAnd(start_time(Terry) == 1, start_time(Waterloo) == 1) ::: Terry starts on the half hour rather than the hour\nAnd(start_time(Roamin') == 1, start_time(Sundown) == 1) ::: Roamin' is shown earlier than Sundown\nAnd(start_time(Sundown) == 1, start_time(Generations) == 1) ::: Sundown is shown earlier than Generations\nAnd(start_time(Waterloo) == 1, start_time(Terry) == 1) ::: If Waterloo is shown earlier than Terry, it is shown immediately before Terry\nAnd(start_time(Terry) == 1, start_time(Waterloo) == 1) ::: Terry is shown immediately before Waterloo\n\n# Options\nQuestion ::: ::: Which one of the following CANNOT be true?\nis_exception(is_sat(start_time(Sundown) == 1)) ::: (A)\nis_exception(is_sat(start_time(Waterloo) == 1)) ::: (B)\nis_exception(is_sat(start_time(Generations) == 1)) ::: (C)\nis_exception(is_sat(start_time(Roamin') == 1)) ::: (D)\nis_exception(is_sat(start_time(Terry) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201112_2-G_4_23",
    "context": "A television programming director is scheduling a three-hour block of programs beginning at 1 P.M. The programs that are to fill this time block include an hour-long program called Generations and four half-hour programs: Roamin', Sundown, Terry, and Waterloo. The programs will be shown one after the other, each program shown exactly once. The schedule must meet the following constraints: Generations starts on the hour rather than the half hour. Terry starts on the half hour rather than the hour. Roamin' is shown earlier than Sundown. If Waterloo is shown earlier than Terry, it is shown immediately before Terry.",
    "question": "Which one of the following, if substituted for the constraint that Generations starts on the hour rather than the half hour, would have the same effect in determining the order in which the programs are shown?",
    "answer": "C",
    "options": [
      "A) Generations is not shown immediately before Terry.",
      "B) Generations is either the first program or the fifth.",
      "C) Generations is neither the second program nor the fourth.",
      "D) If Generations is shown third, then Roamin' is shown first.",
      "E) If Generations is not shown first, then it is shown later than Terry."
    ],
    "raw_logic_programs": [
      "# Declarations\nprograms = EnumSort([Generations, Roamin', Sundown, Terry, Waterloo])\nstart = Function([p:programs] -> [int])\nForAll([p:programs], And(1 <= start(p), start(p) <= 3))\n\n# Constraints\nDistinct([p:programs], start(p)) ::: no two programs are shown at the same time\nAnd(start(Generations) == 1, start(Terry) == 3) ::: Generations starts on the hour rather than the half hour\nAnd(start(Terry) == 1, start(Waterloo) == 2) ::: Terry starts on the half hour rather than the hour\nAnd(start(Roamin') == 1, start(Sundown) == 2) ::: Roamin' is shown earlier than Sundown\nAnd(start(Sundown) == 2, start(Waterloo) == 2) ::: Sundown is shown earlier than Waterloo\nAnd(start(Waterloo) == 2, start(Terry) == 3) ::: Waterloo is shown earlier than Terry\nAnd(start(Terry) == 3, start(Generations) == 1) ::: Terry is shown immediately before Generations\n\n# Options\nQuestion ::: ::: Which one of the following, if substituted for the constraint that Generations starts on the hour rather than the half hour, would have the same effect in determining the order in which the programs are shown?\nis_exception(is_sat(start(Generations) == 1)) ::: (A)\nis_exception(is_sat(start(Terry) == 3)) ::: (B)\nis_exception(is_sat(start(Generations) == 3)) ::: (C)\nis_exception(is_sat(start(Generations) == 2)) ::: (D)\nis_exception(is_sat(start(Generations) == 4)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_1_1",
    "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
    "question": "Which one of the following could be a list of the majors of Manolo, Nadia, Owen, Peng, and Rana, respectively?",
    "answer": "C",
    "options": [
      "A) geology, geology, journalism, journalism, history",
      "B) geology, geology, history, history, history",
      "C) history, geology, geology, journalism, history",
      "D) history, geology, journalism, geology, history",
      "E) history, history, geology, journalism, history"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Manolo, Nadia, Owen, Peng, Rana])\nmajor = EnumSort([geology, history, journalism])\nspeech = EnumSort([friendship, liberty])\nspeaks = Function([students, speech] -> [bool])\n\n# Constraints\nForAll([s:students], And(1 <= speaks(s, speech), speaks(s, speech) <= 2)) ::: Exactly two of the students speak on friendship\nAnd(speaks(Manolo, friendship), speaks(Nadia, friendship)) ::: A geology major and a history major speak on friendship\nspeaks(Manolo, friendship) ::: Manolo speaks on friendship\nspeaks(Rana, liberty) ::: Rana speaks on liberty\nNot(speaks(Peng, friendship)) ::: Neither Peng nor Rana is a geology major\nspeaks(Nadia, geology) ::: Nadia is a geology major\n\n# Options\nQuestion ::: Which one of the following could be a list of the majors of Manolo, Nadia, Owen, Peng, and Rana, respectively?\nis_valid(Exists([m:major], speaks(m, friendship) == 2)) ::: (A)\nis_valid(Exists([m:major], speaks(m, friendship) == 2)) ::: (B)\nis_valid(Exists([m:major], speaks(m, friendship) == 2)) ::: (C)\nis_valid(Exists([m:major], speaks(m, friendship) == 2)) ::: (D)\nis_valid(Exists([m:major], speaks(m, friendship) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_1_2",
    "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
    "question": "If Peng speaks on friendship, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Manolo is a history major.",
      "B) Nadia speaks on friendship.",
      "C) Owen speaks on friendship.",
      "D) Owen is a journalism major.",
      "E) Peng is a journalism major."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Manolo, Nadia, Owen, Peng, Rana])\ntopics = EnumSort([friendship, liberty])\nmajor = Function([students] -> [int])\nspeeches = Function([topics] -> [students])\n\n# Constraints\nForAll([t:topics], Count([s:students], speeches(t) == s) >= 1) ::: each student delivers exactly one speech\nAnd(speeches(friendship) == [Manolo, Nadia], Count([s:students], And(s!= Manolo, s!= Nadia, speeches(friendship) == s)) == 2) ::: Exactly two of the students speak on friendship\nAnd(major(Manolo) == 2, major(Rana) == 1) ::: A geology major and a history major speak on friendship\nmajor(Manolo) == 1 ::: Manolo speaks on friendship\nmajor(Rana) == 2 ::: Rana speaks on liberty\nNot(major(Peng) == 2) ::: Neither Peng nor Rana is a geology major\nmajor(Nadia) == 2 ::: Nadia is a geology major\n\n# Options\nQuestion ::: If Peng speaks on friendship, then which one of the following could be true?\nis_valid(major(Manolo) == 1) ::: (A)\nis_valid(major(Nadia) == 2) ::: (B)\nis_valid(major(Owen) == 2) ::: (C)\nis_valid(major(Peng) == 2) ::: (D)\nis_valid(major(Rana) == 1) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_1_3",
    "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
    "question": "If Owen is a geology major who speaks on friendship, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Manolo is a history major.",
      "B) Nadia speaks on friendship.",
      "C) Peng speaks on friendship.",
      "D) Peng is a history major.",
      "E) Rana is a journalism major."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Manolo, Nadia, Owen, Peng, Rana])\ntopics = EnumSort([friendship, liberty])\nmajors = EnumSort([geology, history, journalism])\nspeeches = Function([students, topics] -> [bool])\n\n# Constraints\nForAll([s:students], Count([t:topics], speeches(s, t)) >= 1) ::: each student delivers exactly one speech\nAnd(speeches(Manolo, friendship), Count([t:topics], And(t == friendship, speeches(s, t))) == 2) ::: Exactly two of the students speak on friendship\nAnd(speeches(Manolo, friendship), speeches(Manolo, liberty) == False) ::: Manolo speaks on friendship\nAnd(speeches(Rana, friendship), speeches(Rana, liberty) == True) ::: Rana speaks on liberty\nAnd(speeches(Nadia, friendship), speeches(Nadia, liberty) == False) ::: Neither Peng nor Rana is a geology major\nAnd(speeches(Nadia, friendship), speeches(Nadia, geology) == True) ::: Nadia is a geology major\n\n# Options\nQuestion ::: If Owen is a geology major who speaks on friendship, then which one of the following must be true?\nis_sat(ForAll([s:students], And(speeches(s, friendship) == True, speeches(s, geology) == False))) ::: (A)\nis_sat(ForAll([s:students], And(speeches(s, friendship) == True, speeches(s, history) == False))) ::: (B)\nis_sat(ForAll([s:students], And(speeches(s, friendship) == True, speeches(s, journalism) == False))) ::: (C)\nis_sat(ForAll([s:students], And(speeches(s, friendship) == True, speeches(s, geology) == True))) ::: (D)\nis_sat(ForAll([s:students], And(speeches(s, friendship) == True, speeches(s, history) == True))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_1_4",
    "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
    "question": "If Nadia speaks on friendship, then which one of the following must be false?",
    "answer": "A",
    "options": [
      "A) Manolo is a geology major.",
      "B) Manolo is a history major.",
      "C) Owen is a geology major.",
      "D) Peng is a history major.",
      "E) Rana is a history major."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Manolo, Nadia, Owen, Peng, Rana])\ntopics = EnumSort([friendship, liberty])\nmajors = EnumSort([geology, history, journalism])\nspeeches = Function([students, topics] -> [bool])\n\n# Constraints\nForAll([s:students], Count([t:topics], speeches(s, t)) >= 1) ::: each student delivers exactly one speech\nAnd(speeches(Manolo, friendship), Count([m:majors], And(m!= Manolo, speeches(m, friendship))) == 2) ::: Exactly two of the students speak on friendship\nAnd(speeches(Nadia, friendship), Count([m:majors], And(m!= Nadia, speeches(m, friendship))) == 2) ::: A geology major and a history major speak on friendship\nspeeches(Manolo, friendship) ::: Manolo speaks on friendship\nspeeches(Rana, liberty) ::: Rana speaks on liberty\nNot(speeches(Peng, friendship)) ::: Neither Peng nor Rana is a geology major\nspeeches(Nadia, friendship) ::: Nadia is a geology major\n\n# Options\nQuestion ::: ::: If Nadia speaks on friendship, then which one of the following must be false?\nis_sat(speeches(Manolo, friendship) == speeches(Nadia, friendship)) ::: (A)\nis_sat(speeches(Manolo, friendship) == speeches(Owen, friendship)) ::: (B)\nis_sat(speeches(Manolo, friendship) == speeches(Peng, friendship)) ::: (C)\nis_sat(speeches(Manolo, friendship) == speeches(Rana, friendship)) ::: (D)\nis_sat(speeches(Nadia, friendship) == speeches(Rana, friendship)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_1_5",
    "context": "Five students—Manolo, Nadia, Owen, Peng, and Rana—are each to deliver exactly one speech. Speeches are on exactly one of two topics—friendship and liberty. Each student has only one major: two major in geology, two in history, and one in journalism. The following conditions must apply: Exactly two of the students speak on friendship. A geology major and a history major speak on friendship. Manolo speaks on friendship. Rana speaks on liberty. Neither Peng nor Rana is a geology major. Nadia is a geology major.",
    "question": "Rana must be a journalism major if which one of the following is true?",
    "answer": "C",
    "options": [
      "A) Manolo is a geology major and Peng is a history major.",
      "B) Owen is a geology major and Manolo is a history major.",
      "C) Owen is a geology major and Peng is a history major.",
      "D) Both Manolo and Nadia speak on friendship.",
      "E) Both Manolo and Peng speak on friendship."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Manolo, Nadia, Owen, Peng, Rana])\ntopics = EnumSort([friendship, liberty])\nmajor = Function([students] -> [int])\nspeeches = Function([students, topics] -> [int])\n\n# Constraints\nForAll([s:students], And(1 <= speeches(s, topics) <= 2)) ::: Exactly two of the students speak on friendship\nAnd(major(s) == 2, speeches(s, friendship)) ::: A geology major and a history major speak on friendship\nmajor(Rana) == 1 ::: Rana is a journalism major\nmajor(Nadia) == 2 ::: Nadia is a geology major\n\n# Options\nQuestion ::: Rana must be a journalism major if which one of the following is true?\nis_valid(Exists([s:students], major(s) == 2, speeches(s, friendship) == 1)) ::: (A)\nis_valid(Exists([s:students], major(s) == 2, speeches(s, friendship) == 2)) ::: (B)\nis_valid(Exists([s:students], major(s) == 2, speeches(s, friendship) == 0)) ::: (C)\nis_valid(Exists([s:students], major(s) == 1, speeches(s, friendship) == 1)) ::: (D)\nis_valid(Exists([s:students], major(s) == 1, speeches(s, friendship) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_2_6",
    "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
    "question": "Which one of the following could be the order in which the professors lecture, from first to last?",
    "answer": "B",
    "options": [
      "A) Powell, Young, Taylor, Shihab, Vaughan, Zabel, Wood",
      "B) Taylor, Powell, Shihab, Wood, Vaughan, Young, Zabel",
      "C) Taylor, Vaughan, Shihab, Wood, Powell, Young, Zabel",
      "D) Vaughan, Taylor, Shihab, Powell, Wood, Zabel, Young",
      "E) Young, Taylor, Shihab, Powell, Vaughan, Zabel, Wood"
    ],
    "raw_logic_programs": [
      "# Declarations\nprofessors = EnumSort([Powell, Shihab, Taylor, Vaughan, Wood, Young, Zabel])\nlectures = EnumSort([first, second, third, fourth, fifth, sixth, seventh])\nlectures_order = Function([professors] -> [lectures])\n\n# Constraints\nForAll([p:professors], And(1 <= lectures_order(p) <= 7, lectures_order(p) == lectures_order(p + 1))) ::: the lectures are ordered from first through seventh\nAnd(lectures_order(Powell) == first, lectures_order(Young) == third) ::: Powell lectures before Wood\nAnd(lectures_order(Taylor) == second, lectures_order(Shihab) == fourth) ::: Taylor lectures before Shihab\nAnd(lectures_order(Vaughan) == fifth, lectures_order(Zabel) == sixth) ::: Vaughan lectures before Zabel\nAnd(lectures_order(Shihab) <= third, lectures_order(Young) == seventh) ::: Shihab is no later than third\nAnd(lectures_order(Powell) == first, lectures_order(Young) == fifth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\n\n# Options\nQuestion ::: ::: Which one of the following could be the order in which the professors lecture, from first to last?\nis_sat(ForAll([p:professors], And(lectures_order(p) == lectures_order(p + 1), lectures_order(p) == lectures_order(p + 2)))) ::: (A)\nis_sat(ForAll([p:professors], And(lectures_order(p) == lectures_order(p + 1), lectures_order(p) == lectures_order(p + 3)))) ::: (B)\nis_sat(ForAll([p:professors], And(lectures_order(p) == lectures_order(p + 1), lectures_order(p) == lectures_order(p + 4)))) ::: (C)\nis_sat(ForAll([p:professors], And(lectures_order(p) == lectures_order(p + 1), lectures_order(p) == lectures_order(p + 5)))) ::: (D)\nis_sat(ForAll([p:professors], And(lectures_order(p) == lectures_order(p + 1), lectures_order(p) == lectures_order(p + 6)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_2_7",
    "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
    "question": "Which one of the following could lecture first?",
    "answer": "B",
    "options": [
      "A) Shihab",
      "B) Vaughan",
      "C) Wood",
      "D) Young",
      "E) Zabel"
    ],
    "raw_logic_programs": [
      "# Declarations\nprofessors = EnumSort([Powell, Shihab, Taylor, Vaughan, Wood, Young, Zabel])\nlectures = EnumSort([first, second, third, fourth, fifth, sixth, seventh])\nlectures_by = Function([professors] -> [lectures])\n\n# Constraints\nForAll([p:professors], And(1 <= lectures_by(p), lectures_by(p) <= 7))\nAnd(lectures_by(Powell) == first, lectures_by(Young) == first) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == second) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == third) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == fourth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == fifth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == second) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == third) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == fourth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == fifth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == second) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == third) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == fourth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == fifth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by(Powell) == first, lectures_by(Young) == second) ::: Powell lectures first if"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_2_8",
    "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
    "question": "Which one of the following CANNOT given the second guest lecture?",
    "answer": "E",
    "options": [
      "A) Powell",
      "B) Shihab",
      "C) Taylor",
      "D) Vaughan",
      "E) Wood"
    ],
    "raw_logic_programs": [
      "# Declarations\nprofessors = EnumSort([Powell, Shihab, Taylor, Vaughan, Wood, Young, Zabel])\nlectures = EnumSort([first, second, third, fourth, fifth, sixth, seventh])\ngives = Function([professors, lectures] -> [bool])\n\n# Constraints\nForAll([l:lectures], And(1 <= l, 7 <= l)) ::: the lectures are ordered from first through seventh\nAnd(gives(Powell, first), gives(Young, first)) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, second)) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, third)) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, fourth)) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, fifth)) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, sixth)) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, seventh)) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, second), gives(Shihab, second)) ::: Powell lectures before Wood\nAnd(gives(Powell, second), gives(Shihab, third)) ::: Powell lectures before Wood\nAnd(gives(Powell, second), gives(Shihab, fourth)) ::: Powell lectures before Wood\nAnd(gives(Powell, second), gives(Shihab, fifth)) ::: Powell lectures before Wood\nAnd(gives(Powell, second), gives(Shihab, sixth)) ::: Powell lectures before Wood\nAnd(gives(Powell, second), gives(Shihab, seventh)) ::: Powell lectures before Wood\nAnd(gives(Powell, third), gives(Taylor, third)) ::: Powell lectures before Shihab\nAnd(gives(Powell, third), gives(Taylor, fourth)) ::: Powell lectures before Shihab\nAnd(gives(Powell, third), gives(Taylor, fifth)) ::: Powell lectures before Shihab\nAnd(gives(Powell, third), gives(Taylor, sixth)) ::: Powell lectures before Shihab\nAnd(gives(Powell, third), gives(Taylor, seventh)) ::: Powell lectures before Shihab\nAnd(gives(Powell, fourth), gives(Vaughan, fourth)) ::: Powell lectures before Zabel\nAnd(gives(Powell, fourth), gives(Vaughan, fifth)) ::: Powell lectures before Zabel\nAnd(gives(Powell, fourth), gives(Vaughan, sixth)) ::: Powell lectures before Zabel\nAnd(gives(Powell, fourth), gives(Vaughan, seventh)) ::: Powell lectures before Zabel\nAnd(gives(Powell, fifth), gives(Wood, fifth)) ::: Powell lectures before Zabel\nAnd(gives(Powell, fifth), gives(Wood, sixth)) ::: Powell lectures before Zabel\nAnd(gives(Powell, fifth), gives(Wood, seventh)) ::: Powell lectures before Zabel\nAnd(gives(Powell, sixth), gives(Zabel, sixth)) ::: Powell lectures before Zabel\nAnd(gives(Powell, sixth), gives(Zabel, seventh)) ::: Powell lectures before Zabel\nAnd(gives(Powell, seventh), gives(Young, seventh)) ::: Powell lectures before Vaughan\nAnd(gives(Shihab, first), gives(Taylor, first)) ::: Shihab lectures before Wood\nAnd(g"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_2_9",
    "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
    "question": "If Shihab lectures second and Zabel lectures fourth, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Powell lectures sixth",
      "B) Taylor lectures third",
      "C) Vaughan lectures fifth",
      "D) Wood lectures fifth",
      "E) Young lectures third"
    ],
    "raw_logic_programs": [
      "# Declarations\nprofessors = EnumSort([Powell, Shihab, Taylor, Vaughan, Wood, Young, Zabel])\nlectures = EnumSort([first, second, third, fourth, fifth, sixth, seventh])\ngives = Function([professors, lectures] -> [bool])\n\n# Constraints\nForAll([l:lectures], And(1 <= l, 7 <= l)) ::: the lectures are ordered from first through seventh\nAnd(gives(Powell, first), gives(Young, first) == False) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == True) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == False) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == True) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == False) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == True) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == False) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == True) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == False) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == True) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == False) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == True) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == False) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == True) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == False) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == True) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == False) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == True) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == False) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == True) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == False) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(gives(Powell, first), gives(Young, first) == True) ::: Powell lectures first"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_2_10",
    "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
    "question": "Which one of the following CANNOT be the guest lecture that Vaughan gives?",
    "answer": "E",
    "options": [
      "A) second",
      "B) third",
      "C) fourth",
      "D) sixth",
      "E) seventh"
    ],
    "raw_logic_programs": [
      "# Declarations\nprofessors = EnumSort([Powell, Shihab, Taylor, Vaughan, Wood, Young, Zabel])\nlectures = EnumSort([first, second, third, fourth, fifth, sixth, seventh])\ngives = Function([professors, lectures] -> [bool])\n\n# Constraints\nForAll([p:professors], And(1 <= gives(p, first), gives(p, first) <= 7))\nForAll([p:professors], And(1 <= gives(p, second), gives(p, second) <= 7))\nForAll([p:professors], And(1 <= gives(p, third), gives(p, third) <= 7))\nForAll([p:professors], And(1 <= gives(p, fourth), gives(p, fourth) <= 7))\nForAll([p:professors], And(1 <= gives(p, fifth), gives(p, fifth) <= 7))\nForAll([p:professors], And(1 <= gives(p, sixth), gives(p, sixth) <= 7))\nForAll([p:professors], And(1 <= gives(p, seventh), gives(p, seventh) <= 7))\n\n# Options\nQuestion ::: Which one of the following CANNOT be the guest lecture that Vaughan gives?\nis_exception(is_sat(gives(Vaughan, second))) ::: (A)\nis_exception(is_sat(gives(Vaughan, third))) ::: (B)\nis_exception(is_sat(gives(Vaughan, fourth))) ::: (C)\nis_exception(is_sat(gives(Vaughan, sixth))) ::: (D)\nis_exception(is_sat(gives(Vaughan, seventh))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_2_11",
    "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
    "question": "If Young lectures fourth and Taylor lectures first, then which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Powell lectures no earlier than sixth",
      "B) Shihab lectures second.",
      "C) Vaughan lectures no later than third.",
      "D) Wood lectures seventh.",
      "E) Zabel lectures no earlier than sixth."
    ],
    "raw_logic_programs": [
      "# Declarations\nprofessors = EnumSort([Powell, Shihab, Taylor, Vaughan, Wood, Young, Zabel])\nlectures = EnumSort([first, second, third, fourth, fifth, sixth, seventh])\nlectures_by_professor = Function([professors] -> [lectures])\n\n# Constraints\nForAll([p:professors], And(1 <= lectures_by_professor(p), lectures_by_professor(p) <= 7))\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == fourth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == fifth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == fifth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == fourth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == third) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == second) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == fifth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == fourth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == third) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == second) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) == first, lectures_by_professor(Young) == fifth) ::: Powell lectures first if, but only if, Young lectures before Vaughan\nAnd(lectures_by_professor(Powell) =="
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_2_12",
    "context": "Each of exactly seven professors—Powell, Shihab, Taylor, Vaughan, Wood, Young, and Zabel—gives exactly one guest lecture in the literary theory course. The lectures are ordered from first through seventh, and their order must conform to the following: Powell lectures before Wood. Taylor lectures before Shihab. Vaughan lectures before Zabel. Shihab is no later than third. Young is not seventh. Powell lectures first if, but only if, Young lectures before Vaughan.",
    "question": "If Zabel lectures fourth, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Powell lectures second.",
      "B) Powell lectures seventh.",
      "C) Wood lectures third.",
      "D) Young lectures second.",
      "E) Young lectures sixth."
    ],
    "raw_logic_programs": [
      "# Declarations\nprofessors = EnumSort([Powell, Shihab, Taylor, Vaughan, Wood, Young, Zabel])\nlectures = EnumSort([first, second, third, fourth, fifth, sixth, seventh])\nlectures_by = Function([professors] -> [lectures])\n\n# Constraints\nForAll([p:professors], And(1 <= lectures_by(p), lectures_by(p) <= 7))\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures sixth\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures seventh\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures sixth\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures seventh\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures sixth\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures seventh\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures sixth\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures seventh\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures sixth\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures seventh\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures sixth\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures seventh\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures sixth\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures seventh\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures sixth\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures seventh\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures sixth\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures seventh\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lectures first if, but only if, Young lectures sixth\nAnd(lectures_by(Powell) == first, lectures_by(Young) == seventh) ::: Powell lectures first if, but only if, Young lectures seventh\nAnd(lectures_by(Powell) == first, lectures_by(Young) == sixth) ::: Powell lect"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_3_13",
    "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
    "question": "If aisle 1 contains Hobbies only, which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Fantasy is located in aisle 3.",
      "B) Music is located in aisle 2.",
      "C) Puzzles is located in aisle 2.",
      "D) Reading is located in aisle 3.",
      "E) Science is located in aisle 3."
    ],
    "raw_logic_programs": [
      "# Declarations\naisles = EnumSort([1, 2, 3])\nsections = EnumSort([Fantasy, Hobbies, Music, Puzzles, Reading, Science])\nlocations = Function([aisles] -> [sections])\n\n# Constraints\nForAll([a:aisles], And(1 <= locations(a) <= 6, locations(a) in sections)) ::: each aisle contains at least one of the sections\nAnd(locations(1) == Music, locations(2) == Fantasy) ::: Reading must be located in the same aisle as either Fantasy or Music\nAnd(locations(1) == Fantasy, locations(2) == Music) ::: Fantasy must be located in a lower-numbered aisle than both Music and Puzzles\nAnd(locations(1) == Puzzles, locations(2) == Music) ::: Science must be located in a lower-numbered aisle than Puzzles\nAnd(locations(1) == Puzzles, locations(2) == Hobbies) ::: Science cannot be located in a lower-numbered aisle than Hobbies\n\n# Options\nQuestion ::: If aisle 1 contains Hobbies only, which one of the following could be true?\nis_valid(ForAll([a:aisles], And(locations(a) == Fantasy, locations(2) == Music))) ::: (A)\nis_valid(ForAll([a:aisles], And(locations(a) == Music, locations(2) == Fantasy))) ::: (B)\nis_valid(ForAll([a:aisles], And(locations(a) == Puzzles, locations(2) == Music))) ::: (C)\nis_valid(ForAll([a:aisles], And(locations(a) == Reading, locations(2) == Music))) ::: (D)\nis_valid(ForAll([a:aisles], And(locations(a) == Science, locations(2) == Music))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_3_14",
    "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
    "question": "If aisle 3 contains Puzzles only, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Fantasy is located in aisle 1.",
      "B) Hobbies is located in aisle 1.",
      "C) Music is located in aisle 1.",
      "D) Reading is located in aisle 1.",
      "E) Science is located in aisle 2."
    ],
    "raw_logic_programs": [
      "# Declarations\naisles = EnumSort([1, 2, 3])\nsections = EnumSort([Fantasy, Hobbies, Music, Puzzles, Reading, Science])\nlocations = Function([aisles] -> [sections])\n\n# Constraints\nForAll([a:aisles], And(1 <= locations(a) <= 6, locations(a) == locations(a + 1))) ::: each aisle contains at least one of the sections\nAnd(locations(1) == Fantasy, locations(2) == Music, locations(3) == Puzzles) ::: Reading must be located in the same aisle as either Fantasy or Music\nAnd(locations(1) == Fantasy, locations(2) == Music, locations(3) == Puzzles) ::: Fantasy must be located in a lower-numbered aisle than both Music and Puzzles\nAnd(locations(1) == Fantasy, locations(2) == Music, locations(3) == Puzzles) ::: Science must be located in a lower-numbered aisle than Puzzles\nAnd(locations(1) == Fantasy, locations(2) == Music, locations(3) == Puzzles) ::: Science cannot be located in a lower-numbered aisle than Hobbies\n\n# Options\nQuestion ::: If aisle 3 contains Puzzles only, which one of the following must be true?\nis_exception(is_sat(locations(3) == Reading)) ::: (A)\nis_exception(is_sat(locations(3) == Hobbies)) ::: (B)\nis_exception(is_sat(locations(3) == Music)) ::: (C)\nis_exception(is_sat(locations(3) == Reading)) ::: (D)\nis_exception(is_sat(locations(3) == Science)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_3_15",
    "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
    "question": "If each aisle contains exactly two of the six sections, then Science must be located in the same aisle as",
    "answer": "B",
    "options": [
      "A) Fantasy",
      "B) Hobbies",
      "C) Music",
      "D) Puzzles",
      "E) Reading"
    ],
    "raw_logic_programs": [
      "# Declarations\naisles = EnumSort([1, 2, 3])\nsections = EnumSort([Fantasy, Hobbies, Music, Puzzles, Reading, Science])\nlocations = Function([aisles] -> [sections])\n\n# Constraints\nForAll([a:aisles], Count([s:sections], locations(a) == s) >= 2) ::: each aisle contains exactly two of the six sections\nAnd(locations(1) == Reading, locations(2) == Fantasy) ::: Reading must be located in the same aisle as either Fantasy or Music\nAnd(locations(1) == Music, locations(2) == Fantasy) ::: Fantasy must be located in a lower-numbered aisle than both Music and Puzzles\nAnd(locations(1) == Puzzles, locations(2) == Fantasy) ::: Puzzles must be located in a lower-numbered aisle than Fantasy\nAnd(locations(1) == Science, locations(2) == Puzzles) ::: Science must be located in a lower-numbered aisle than Puzzles\nAnd(locations(1) == Hobbies, locations(2) == Science) ::: Science cannot be located in a lower-numbered aisle than Hobbies\n\n# Options\nQuestion ::: If each aisle contains exactly two of the six sections, then Science must be located in the same aisle as\nis_valid(is_sat(locations(1) == Reading)) ::: (A)\nis_valid(is_sat(locations(1) == Hobbies)) ::: (B)\nis_valid(is_sat(locations(1) == Music)) ::: (C)\nis_valid(is_sat(locations(1) == Puzzles)) ::: (D)\nis_valid(is_sat(locations(1) == Reading)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_3_16",
    "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
    "question": "Which one of the following CANNOT be the list of the sections located in aisle 2?",
    "answer": "A",
    "options": [
      "A) Hobbies, Music",
      "B) Music, Reading",
      "C) Music, Science",
      "D) Hobbies, Music, Science",
      "E) Music, Reading, Science"
    ],
    "raw_logic_programs": [
      "# Declarations\naisles = EnumSort([1, 2, 3])\nsections = EnumSort([Fantasy, Hobbies, Music, Puzzles, Reading, Science])\nlocations = Function([aisles] -> [sections])\n\n# Constraints\nForAll([a:aisles], And(1 <= locations(a) <= 6, Count([s:sections], locations(a) == s) == 1)) ::: each aisle contains at least one of the sections\nAnd(locations(1) == Reading, Or(locations(2) == Fantasy, locations(2) == Music)) ::: Reading must be located in the same aisle as either Fantasy or Music\nAnd(locations(1) == Fantasy, Or(locations(2) == Music, locations(2) == Puzzles)) ::: Fantasy must be located in a lower-numbered aisle than both Music and Puzzles\nAnd(locations(1) == Puzzles, Or(locations(2) == Music, locations(2) == Science)) ::: Puzzles must be located in a lower-numbered aisle than Music\nAnd(locations(1) == Science, Or(locations(2) == Music, locations(2) == Reading)) ::: Science cannot be located in a lower-numbered aisle than Hobbies\n\n# Options\nQuestion ::: Which one of the following CANNOT be the list of the sections located in aisle 2?\nis_exception(is_sat(locations(2) == Music, Reading)) ::: (A)\nis_exception(is_sat(locations(2) == Music, Science)) ::: (B)\nis_exception(is_sat(locations(2) == Music, Reading, Science)) ::: (C)\nis_exception(is_sat(locations(2) == Hobbies, Music, Science)) ::: (D)\nis_exception(is_sat(locations(2) == Hobbies, Music, Reading, Science)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_3_17",
    "context": "A toy retailer is opening a small satellite store with exactly three aisles, numbered from 1 (lowest) to 3 (highest). Six sections—Fantasy, Hobbies, Music, Puzzles, Reading, and Science—will each be confined to exactly one aisle, with each aisle containing at least one of the sections. The following conditions hold: Reading must be located in the same aisle as either Fantasy or Music. Fantasy must be located in a lower-numbered aisle than both Music and Puzzles. Science must be located in a lower-numbered aisle than Puzzles. Science cannot be located in a lower-numbered aisle than Hobbies.",
    "question": "If aisle 2 contains Science only, then each of the following must be true EXCEPT:",
    "answer": "E",
    "options": [
      "A) Fantasy is located in aisle 1.",
      "B) Hobbies is located in aisle 1.",
      "C) Music is located in aisle 3.",
      "D) Puzzles is located in aisle 3.",
      "E) Reading is located in aisle 1."
    ],
    "raw_logic_programs": [
      "# Declarations\naisles = EnumSort([1, 2, 3])\nsections = EnumSort([Fantasy, Hobbies, Music, Puzzles, Reading, Science])\nlocations = Function([aisles] -> [sections])\n\n# Constraints\nForAll([a:aisles], And(1 <= locations(a) <= 6, locations(a) == locations(a + 1))) ::: each aisle contains at least one of the sections\nAnd(locations(1) == Fantasy, locations(2) == Reading) ::: Reading must be located in the same aisle as either Fantasy or Music\nAnd(locations(1) == Music, locations(2) == Puzzles) ::: Fantasy must be located in a lower-numbered aisle than both Music and Puzzles\nAnd(locations(2) == Science, locations(3) == Puzzles) ::: Science must be located in a lower-numbered aisle than Puzzles\nAnd(locations(2) == Science, locations(3) == Hobbies) ::: Science cannot be located in a lower-numbered aisle than Hobbies\n\n# Options\nQuestion ::: If aisle 2 contains Science only, then each of the following must be true EXCEPT:\nis_exception(is_sat(locations(2) == Fantasy)) ::: (A)\nis_exception(is_sat(locations(2) == Hobbies)) ::: (B)\nis_exception(is_sat(locations(2) == Music)) ::: (C)\nis_exception(is_sat(locations(2) == Puzzles)) ::: (D)\nis_exception(is_sat(locations(2) == Reading)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_4_18",
    "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
    "question": "Which one of the following is an allowable way of designating subzones within the three zones?",
    "answer": "E",
    "options": [
      "A) Z1: no designated subzones Z2: one housing subzone, two retail subzones Z3: one industrial subzone, one retail subzone",
      "B) Z1: one housing subzone, one industrial subzone Z2: two housing subzones, one retail subzone Z3: one industrial subzone, one retail subzone",
      "C) Z1: one housing subzone, one retail subzone Z2: two housing subzones, one retail subzone Z3: one industrial subzone, one retail subzone",
      "D) Z1: one industrial subzone Z2: three housing subzones Z3: three retail subzones",
      "E) Z1: one industrial subzone Z2: two housing subzones, one retail subzone Z3: one industrial subzone, two retail subzones"
    ],
    "raw_logic_programs": [
      "# Declarations\nzones = EnumSort([Z1, Z2, Z3])\nsubzones = EnumSort([housing, industrial, retail])\ndesignated = Function([z:zones, s:subzones] -> [bool])\n\n# Constraints\nForAll([z:zones, s:subzones], And(1 <= designated(z, s), designated(z, s) <= 3)) ::: no more than three subzones can be designated for each of the three uses\nForAll([z:zones, s:subzones], Implies(designated(z, s), Not(designated(z, s + 1)))) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], Implies(designated(z, s), Not(designated(z + 1, s)))) ::: no more than one retail subzone is allowed in any zone in which a subzone is designated for housing\nForAll([z:zones, s:subzones], Implies(designated(z, s), Not(designated(z + 1, s + 1)))) ::: no more than one retail subzone is allowed in any zone in which a subzone is designated for housing\nForAll([z:zones, s:subzones], Implies(designated(z, s), Not(designated(z + 1, s + 1)))) ::: no more than one industrial subzone is allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use\n\n# Options\nQuestion ::: ::: Which one of the following is an allowable way of designating subzones within the three zones?\nis_exception(is_sat(designated(Z1, housing) == 1)) ::: (A)\nis_exception(is_sat(designated(Z1, retail) == 1)) ::: (B)\nis_exception(is_sat(designated(Z1, industrial) == 1)) ::: (C)\nis_exception(is_sat(designated(Z2, housing) == 2)) ::: (D)\nis_exception(is_sat(designated(Z2, retail) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_4_19",
    "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
    "question": "Which one of the following CANNOT be true within a single zone?",
    "answer": "D",
    "options": [
      "A) Two subzones are designated, one housing and one retail.",
      "B) Two subzones are designated, one industrial and one retail.",
      "C) Three subzones are designated, all of them retail.",
      "D) Four subzones are designated, none of them industrial.",
      "E) Four subzones are designated, two retail and two industrial."
    ],
    "raw_logic_programs": [
      "# Declarations\nzones = EnumSort([Z1, Z2, Z3])\nsubzones = EnumSort([housing, industrial, retail])\ndesignated = Function([z:zones, s:subzones] -> [bool])\n\n# Constraints\nForAll([z:zones, s:subzones], And(designated(z, s) == 1, designated(z, s) <= 3)) ::: no more than three subzones can be designated for each of the three uses\nForAll([z:zones, s:subzones], And(designated(z, s) == 1, designated(z, s) == 1)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 1, designated(z, s) == 2)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 1, designated(z, s) == 3)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 2, designated(z, s) == 1)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 2, designated(z, s) == 2)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 2, designated(z, s) == 3)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 3, designated(z, s) == 1)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 3, designated(z, s) == 2)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 3, designated(z, s) == 3)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 1, designated(z, s) == 2)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 1, designated(z, s) == 3)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 2, designated(z, s) == 3)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 1, designated(z, s) == 3)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 2, designated(z, s) == 3)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 1, designated(z, s) == 2)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z, s) == 2, designated(z, s) == 2)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones, s:subzones], And(designated(z"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_4_20",
    "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
    "question": "What is the maximum number of designated subzones allowed in Z3?",
    "answer": "D",
    "options": [
      "A) 2",
      "B) 3",
      "C) 4",
      "D) 5",
      "E) 6"
    ],
    "raw_logic_programs": [
      "# Declarations\nzones = EnumSort([Z1, Z2, Z3])\nsubzones = EnumSort([housing, industrial, retail])\ndesignated = Function([zones, subzones] -> [bool])\n\n# Constraints\nForAll([z:zones], And(Count([s:subzones], designated(z, s)) <= 3, designated(z, s) == False)) ::: no more than three subzones can be designated for each of the three uses\nForAll([z:zones], And(Count([s:subzones], designated(z, s)) <= 2, designated(z, s) == True)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones], And(Count([s:subzones], designated(z, s)) <= 1, designated(z, s) == True)) ::: no more than one retail subzone is allowed in any zone in which a subzone is designated for housing\nForAll([z:zones], And(Count([s:subzones], designated(z, s)) <= 1, designated(z, s) == True)) ::: no more than one industrial subzone is allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use\n\n# Options\nQuestion ::: What is the maximum number of designated subzones allowed in Z3?\nis_valid(Exists([z:zones], And(Count([s:subzones], designated(z, s)) == 2, designated(z, s) == True))) ::: A)\nis_valid(Exists([z:zones], And(Count([s:subzones], designated(z, s)) == 3, designated(z, s) == True))) ::: B)\nis_valid(Exists([z:zones], And(Count([s:subzones], designated(z, s)) == 4, designated(z, s) == True))) ::: C)\nis_valid(Exists([z:zones], And(Count([s:subzones], designated(z, s)) == 5, designated(z, s) == True))) ::: D)\nis_valid(Exists([z:zones], And(Count([s:subzones], designated(z, s)) == 6, designated(z, s) == True))) ::: E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_4_21",
    "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
    "question": "If three subzones are designated for each use, then which one of the following is allowed?",
    "answer": "B",
    "options": [
      "A) Exactly one subzone in Z3 is designated for industrial use and exactly one subzone in Z3 is designated for retail use.",
      "B) Exactly two subzones in Z2 are designated for housing.",
      "C) Three subzones in Z1 are designated for industrial use.",
      "D) Three subzones in Z2 are designated for industrial use and exactly one subzone in Z2 is designated for retail use.",
      "E) Three subzones in Z3 are designated for retail use."
    ],
    "raw_logic_programs": [
      "# Declarations\nzones = EnumSort([Z1, Z2, Z3])\nsubzones = EnumSort([housing, industrial, retail])\ndesignated = Function([z:zones, s:subzones] -> [bool])\n\n# Constraints\nForAll([z:zones, s:subzones], And(1 <= Count([s:subzones], designated(z, s)), Count([s:subzones], designated(z, s)) <= 3)) ::: no more than three subzones can be designated for each of the three uses\nAnd(designated(Z1, retail), Not(designated(Z1, housing))) ::: Retail subzones are not allowed in Z1\nAnd(designated(Z2, housing), Not(designated(Z2, retail))) ::: No more than two subzones for housing are allowed in any particular zone\nAnd(designated(Z2, retail), Not(designated(Z2, housing))) ::: No more than one retail subzone is allowed in any zone in which a subzone is designated for housing\nAnd(designated(Z3, industrial), Not(designated(Z3, housing))) ::: Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use\n\n# Options\nQuestion ::: ::: If three subzones are designated for each use, then which one of the following is allowed?\nis_exception(is_sat(designated(Z3, retail) == 3)) ::: (A)\nis_exception(is_sat(designated(Z2, housing) == 2)) ::: (B)\nis_exception(is_sat(designated(Z1, industrial) == 3)) ::: (C)\nis_exception(is_sat(designated(Z2, industrial) == 3)) ::: (D)\nis_exception(is_sat(designated(Z3, retail) == 3)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_4_22",
    "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
    "question": "If one subzone in each of the zones is designated for industrial use, then which one of the following is allowed?",
    "answer": "A",
    "options": [
      "A) More subzones are designated for retail use in Z2 than in Z3.",
      "B) A subzone in one of the zones is designated for housing.",
      "C) Exactly two subzones are designated in Z1.",
      "D) Exactly three subzones each are designated in Z2 and Z3.",
      "E) Exactly four subzones are designated in Z3."
    ],
    "raw_logic_programs": [
      "# Declarations\nzones = EnumSort([Z1, Z2, Z3])\nsubzones = EnumSort([housing, industrial, retail])\ndesignated = Function([z:zones, s:subzones] -> [bool])\n\n# Constraints\nForAll([z:zones], And(Count([s:subzones], designated(z, s)) <= 3, Count([s:subzones], designated(z, s)) >= 0)) ::: no more than three subzones can be designated for each of the three uses\nForAll([z:zones], And(Count([s:subzones], designated(z, s)) <= 2, Count([s:subzones], designated(z, s)) >= 0)) ::: no more than two subzones for housing are allowed in any particular zone\nForAll([z:zones], And(Count([s:subzones], designated(z, s)) <= 1, Count([s:subzones], designated(z, s)) >= 0)) ::: no more than one retail subzone is allowed in any zone in which a subzone is designated for housing\nForAll([z:zones], And(Count([s:subzones], designated(z, s)) <= 0, Count([s:subzones], designated(z, s)) >= 0)) ::: industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use\n\n# Options\nQuestion ::: ::: If one subzone in each of the zones is designated for industrial use, then which one of the following is allowed?\nis_exception(is_sat(designated(Z1, retail) == 1)) ::: (A)\nis_exception(is_sat(designated(Z2, retail) == 2)) ::: (B)\nis_exception(is_sat(designated(Z3, retail) == 3)) ::: (C)\nis_exception(is_sat(designated(Z1, housing) == 1)) ::: (D)\nis_exception(is_sat(designated(Z2, housing) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201210_3-G_4_23",
    "context": "Millville has created three new development zones: Z1, Z2, and Z3. Within these zones, subzones can be designated for housing, industrial, or retail use, with no subzone designated for more than one use. By city regulation, a total of no more than three subzones can be designated for each of the three uses. The following restrictions are in place: Retail subzones are not allowed in Z1. No more than two subzones for housing are allowed in any particular zone. No more than one retail subzone is allowed in any zone in which a subzone is designated for housing. Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use.",
    "question": "If three subzones in all are designated for retail use and a subzone in Z2 is designated for housing, then which one of the following is allowed?",
    "answer": "A",
    "options": [
      "A) Two subzones in Z1 are designated for housing.",
      "B) More subzones are designated for industrial use in Z2 than in Z3.",
      "C) More subzones are designated for retail use in Z2 than in Z3.",
      "D) The same number of subzones are designated for retail use in Z2 and Z3.",
      "E) A subzone in Z3 is designated for housing."
    ],
    "raw_logic_programs": [
      "# Declarations\nzones = EnumSort([Z1, Z2, Z3])\nsubzones = EnumSort([housing, industrial, retail])\ndesignated = Function([zones, subzones] -> [bool])\n\n# Constraints\nForAll([z:zones], And(Count([s:subzones], designated(z, s)) <= 3, Count([s:subzones], designated(z, s)) >= 0)) ::: no more than three subzones can be designated for each of the three uses\nAnd(designated(Z1, retail), Not(designated(Z1, housing))) ::: Retail subzones are not allowed in Z1\nAnd(designated(Z2, housing), Not(designated(Z2, retail))) ::: No more than two subzones for housing are allowed in any particular zone\nAnd(designated(Z2, retail), Not(designated(Z2, housing))) ::: No more than one retail subzone is allowed in any zone in which a subzone is designated for housing\nAnd(designated(Z3, industrial), Not(designated(Z3, housing))) ::: Industrial subzones are not allowed in any zone in which a subzone is designated for housing or three subzones are designated for retail use\n\n# Options\nQuestion ::: ::: If three subzones in all are designated for retail use and a subzone in Z2 is designated for housing, then which one of the following is allowed?\nis_exception(is_sat(designated(Z1, retail) == 3)) ::: (A)\nis_exception(is_sat(designated(Z2, housing) == 2)) ::: (B)\nis_exception(is_sat(designated(Z2, retail) == 2)) ::: (C)\nis_exception(is_sat(designated(Z3, retail) == 3)) ::: (D)\nis_exception(is_sat(designated(Z3, housing) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_1_1",
    "context": "A researcher is studying seven manuscripts—F, G, H, L, M, P, and S—to determine their relative ages. It is known that no two manuscripts were written at the same time. The researcher has also determined the following: H was written earlier than S but later than F. P was the next manuscript written after G. At least four of the manuscripts were written earlier than L. At least four of the manuscripts were written later than M. H was not written fifth.",
    "question": "Which one of the following could be the order in which the manuscripts were written, from first to last?",
    "answer": "E",
    "options": [
      "A) F, M, G, H, P, L, S",
      "B) G, P, M, F, H, S, L",
      "C) H, F, M, G, P, L, S",
      "D) L, F, M, G, P, H, S",
      "E) M, F, H, S, L, G, P"
    ],
    "raw_logic_programs": [
      "# Declarations\nmanuscripts = EnumSort([F, G, H, L, M, P, S])\nwritten = Function([manuscripts] -> [int])\n\n# Constraints\nForAll([m:manuscripts], And(1 <= written(m), written(m) <= 7))\nAnd(written(H) < written(S), written(H) > written(F)) ::: H was written earlier than S but later than F\nAnd(written(P) > written(G), written(P) < written(H)) ::: P was the next manuscript written after G\nAnd(written(L) > written(F), written(L) < written(M)) ::: At least four of the manuscripts were written earlier than L\nAnd(written(M) < written(H), written(M) > written(S)) ::: At least four of the manuscripts were written later than M\nAnd(written(H)!= 5, written(H)!= 6) ::: H was not written fifth\n\n# Options\nQuestion ::: Which one of the following could be the order in which the manuscripts were written, from first to last?\nis_valid(is_sat(written(F) == 1)) ::: (A)\nis_valid(is_sat(written(M) == 1)) ::: (B)\nis_valid(is_sat(written(G) == 1)) ::: (C)\nis_valid(is_sat(written(H) == 1)) ::: (D)\nis_valid(is_sat(written(L) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_1_2",
    "context": "A researcher is studying seven manuscripts—F, G, H, L, M, P, and S—to determine their relative ages. It is known that no two manuscripts were written at the same time. The researcher has also determined the following: H was written earlier than S but later than F. P was the next manuscript written after G. At least four of the manuscripts were written earlier than L. At least four of the manuscripts were written later than M. H was not written fifth.",
    "question": "Which one of the following manuscripts CANNOT have been written third?",
    "answer": "A",
    "options": [
      "A) S",
      "B) P",
      "C) M",
      "D) H",
      "E) G"
    ],
    "raw_logic_programs": [
      "# Declarations\nmanuscripts = EnumSort([F, G, H, L, M, P, S])\nwritten = Function([manuscripts] -> [int])\nForAll([m:manuscripts], And(1 <= written(m), written(m) <= 7))\n\n# Constraints\nDistinct([m:manuscripts], written(m)) ::: no two manuscripts are written at the same time\nAnd(written(H) < written(S), written(H) > written(F)) ::: H was written earlier than S but later than F\nAnd(written(P) > written(G), written(P) < written(L)) ::: P was the next manuscript written after G\nAnd(written(L) < written(M), written(L) > written(H)) ::: At least four of the manuscripts were written earlier than L\nAnd(written(M) < written(P), written(M) > written(S)) ::: At least four of the manuscripts were written later than M\nAnd(written(H)!= written(5)) ::: H was not written fifth\n\n# Options\nQuestion ::: Which one of the following manuscripts CANNOT have been written third?\nis_exception(is_sat(written(S) == 3)) ::: (A)\nis_exception(is_sat(written(P) == 3)) ::: (B)\nis_exception(is_sat(written(M) == 3)) ::: (C)\nis_exception(is_sat(written(H) == 3)) ::: (D)\nis_exception(is_sat(written(G) == 3)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_1_3",
    "context": "A researcher is studying seven manuscripts—F, G, H, L, M, P, and S—to determine their relative ages. It is known that no two manuscripts were written at the same time. The researcher has also determined the following: H was written earlier than S but later than F. P was the next manuscript written after G. At least four of the manuscripts were written earlier than L. At least four of the manuscripts were written later than M. H was not written fifth.",
    "question": "If H was the next manuscript written after M, which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) F was written second.",
      "B) G was written third.",
      "C) H was written fourth.",
      "D) P was written third.",
      "E) S was written fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\nmanuscripts = EnumSort([F, G, H, L, M, P, S])\nwritten = Function([manuscripts] -> [int])\nForAll([m:manuscripts], And(1 <= written(m), written(m) <= 7))\n\n# Constraints\nDistinct([m:manuscripts], written(m)) ::: no two manuscripts were written at the same time\nAnd(written(H) < written(S), written(H) > written(F)) ::: H was written earlier than S but later than F\nAnd(written(P) > written(G), written(P) < written(L)) ::: P was the next manuscript written after G\nAnd(written(L) < written(M), written(L) > written(F)) ::: At least four of the manuscripts were written earlier than L\nAnd(written(M) < written(P), written(M) > written(S)) ::: At least four of the manuscripts were written later than M\nAnd(written(H)!= written(5)) ::: H was not written fifth\n\n# Options\nQuestion ::: If H was the next manuscript written after M, which one of the following could be true?\nis_exception(is_sat(written(F) == 2)) ::: (A)\nis_exception(is_sat(written(G) == 3)) ::: (B)\nis_exception(is_sat(written(H) == 4)) ::: (C)\nis_exception(is_sat(written(P) == 3)) ::: (D)\nis_exception(is_sat(written(S) == 4)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_1_4",
    "context": "A researcher is studying seven manuscripts—F, G, H, L, M, P, and S—to determine their relative ages. It is known that no two manuscripts were written at the same time. The researcher has also determined the following: H was written earlier than S but later than F. P was the next manuscript written after G. At least four of the manuscripts were written earlier than L. At least four of the manuscripts were written later than M. H was not written fifth.",
    "question": "Which one of the following manuscripts CANNOT have been written fourth?",
    "answer": "D",
    "options": [
      "A) F",
      "B) G",
      "C) H",
      "D) P",
      "E) S"
    ],
    "raw_logic_programs": [
      "# Declarations\nmanuscripts = EnumSort([F, G, H, L, M, P, S])\nwritten = Function([manuscripts] -> [int])\nForAll([m:manuscripts], And(1 <= written(m), written(m) <= 7))\n\n# Constraints\nDistinct([m:manuscripts], written(m)) ::: no two manuscripts are written at the same time\nAnd(written(H) < written(S), written(H) > written(F)) ::: H was written earlier than S but later than F\nAnd(written(P) > written(G), written(P) < written(L)) ::: P was the next manuscript written after G\nAnd(written(L) < written(M), written(L) > written(H)) ::: At least four of the manuscripts were written earlier than L\nAnd(written(M) < written(P), written(M) > written(S)) ::: At least four of the manuscripts were written later than M\nAnd(written(H)!= written(5)) ::: H was not written fifth\n\n# Options\nQuestion ::: Which one of the following manuscripts CANNOT have been written fourth?\nis_exception(is_sat(written(F) == 4)) ::: (A)\nis_exception(is_sat(written(G) == 4)) ::: (B)\nis_exception(is_sat(written(H) == 4)) ::: (C)\nis_exception(is_sat(written(P) == 4)) ::: (D)\nis_exception(is_sat(written(S) == 4)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_1_5",
    "context": "A researcher is studying seven manuscripts—F, G, H, L, M, P, and S—to determine their relative ages. It is known that no two manuscripts were written at the same time. The researcher has also determined the following: H was written earlier than S but later than F. P was the next manuscript written after G. At least four of the manuscripts were written earlier than L. At least four of the manuscripts were written later than M. H was not written fifth.",
    "question": "If P was written earlier than H, then any of the following could be true EXCEPT:",
    "answer": "D",
    "options": [
      "A) F was written first.",
      "B) G was written third.",
      "C) H was written sixth.",
      "D) L was written seventh.",
      "E) M was written second."
    ],
    "raw_logic_programs": [
      "# Declarations\nmanuscripts = EnumSort([F, G, H, L, M, P, S])\nwritten = Function([manuscripts] -> [int])\nForAll([m:manuscripts], And(1 <= written(m), written(m) <= 7))\n\n# Constraints\nDistinct([m:manuscripts], written(m)) ::: no two manuscripts were written at the same time\nAnd(written(H) < written(S), written(P) < written(H)) ::: H was written earlier than S but later than F\nAnd(written(P) > written(G), written(P) < written(H)) ::: P was the next manuscript written after G\nAnd(written(L) > written(F), written(L) < written(M)) ::: At least four of the manuscripts were written earlier than L\nAnd(written(M) > written(G), written(M) < written(H)) ::: At least four of the manuscripts were written later than M\nAnd(written(H)!= written(5), written(H)!= written(6)) ::: H was not written fifth\n\n# Options\nQuestion ::: If P was written earlier than H, then any of the following could be true EXCEPT:\nis_exception(is_sat(written(F) == 1)) ::: (A)\nis_exception(is_sat(written(G) == 3)) ::: (B)\nis_exception(is_sat(written(H) == 6)) ::: (C)\nis_exception(is_sat(written(L) == 7)) ::: (D)\nis_exception(is_sat(written(M) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_2_6",
    "context": "Exactly six petri dishes—labeled dish 1 through dish 6—are to be stored in an otherwise empty refrigerator. There are three available shelves—the bottom shelf, the middle shelf, and the top shelf. The placement of the dishes must be consistent with the following conditions: No more than three dishes are stored on any shelf. Dish 2 is stored at least one shelf above dish 6. Dish 6 is stored either one shelf above or one shelf below dish 5. Dish 1 is not stored on the same shelf as dish 4.",
    "question": "Which one of the following is an acceptable placement of dishes on the bottom, middle, and top shelves?",
    "answer": "B",
    "options": [
      "A) bottom: dish 1 middle: dish 6 top: dishes 2, 3, 4, 5",
      "B) bottom: dishes 1, 3 middle: dish 6 top: dishes 2, 4, 5",
      "C) bottom: dish 2 middle: dishes 4, 6 top: dishes 1, 3, 5",
      "D) bottom: dishes 3, 5 middle: dish 6 top: dishes 1, 2, 4",
      "E) bottom: dishes 4, 6 middle: dishes 1, 3 top: dishes 2, 5"
    ],
    "raw_logic_programs": [
      "# Declarations\ndishes = EnumSort([dish 1, dish 2, dish 3, dish 4, dish 5, dish 6])\nshelves = EnumSort([bottom, middle, top])\nstored = Function([dishes, shelves] -> [bool])\n\n# Constraints\nForAll([s:shelves], And(1 <= stored(dishes, s), stored(dishes, s) <= 3)) ::: no more than three dishes are stored on any shelf\nAnd(stored(dishes, bottom) == stored(dishes, middle)) ::: Dish 2 is stored at least one shelf above dish 6\nAnd(stored(dishes, middle) == stored(dishes, top)) ::: Dish 6 is stored either one shelf above or one shelf below dish 5\nAnd(stored(dishes, bottom) == stored(dishes, top)) ::: Dish 1 is not stored on the same shelf as dish 4\n\n# Options\nQuestion ::: Which one of the following is an acceptable placement of dishes on the bottom, middle, and top shelves?\nis_valid(Exists([s:shelves], And(stored(dishes, bottom) == stored(dishes, middle), stored(dishes, middle) == stored(dishes, top)))) ::: (A)\nis_valid(Exists([s:shelves], And(stored(dishes, bottom) == stored(dishes, middle), stored(dishes, middle) == stored(dishes, top)))) ::: (B)\nis_valid(Exists([s:shelves], And(stored(dishes, bottom) == stored(dishes, middle), stored(dishes, middle) == stored(dishes, top)))) ::: (C)\nis_valid(Exists([s:shelves], And(stored(dishes, bottom) == stored(dishes, middle), stored(dishes, middle) == stored(dishes, top)))) ::: (D)\nis_valid(Exists([s:shelves], And(stored(dishes, bottom) == stored(dishes, middle), stored(dishes, middle) == stored(dishes, top)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_2_7",
    "context": "Exactly six petri dishes—labeled dish 1 through dish 6—are to be stored in an otherwise empty refrigerator. There are three available shelves—the bottom shelf, the middle shelf, and the top shelf. The placement of the dishes must be consistent with the following conditions: No more than three dishes are stored on any shelf. Dish 2 is stored at least one shelf above dish 6. Dish 6 is stored either one shelf above or one shelf below dish 5. Dish 1 is not stored on the same shelf as dish 4.",
    "question": "If dish 6 is the only dish stored on the bottom shelf, which one of the following could be the list of dishes that are stored together on the middle shelf?",
    "answer": "E",
    "options": [
      "A) dish 1, dish 3",
      "B) dish 2, dish 4",
      "C) dish 2, dish 3",
      "D) dish 3, dish 5",
      "E) dish 4, dish 5"
    ],
    "raw_logic_programs": [
      "# Declarations\ndishes = EnumSort([dish 1, dish 2, dish 3, dish 4, dish 5, dish 6])\nshelves = EnumSort([bottom, middle, top])\nstored = Function([dishes, shelves] -> [bool])\n\n# Constraints\nForAll([s:shelves], And(1 <= stored(dishes, s), stored(dishes, s) <= 6)) ::: no more than three dishes are stored on any shelf\nAnd(stored(dishes, bottom) == [False, True, False, False, False, False]) ::: Dish 2 is stored at least one shelf above dish 6\nAnd(stored(dishes, bottom) == [False, False, False, False, False, False]) ::: Dish 6 is stored either one shelf above or one shelf below dish 5\nAnd(stored(dishes, middle) == [True, False, False, False, False, False]) ::: Dish 1 is not stored on the same shelf as dish 4\n\n# Options\nQuestion ::: If dish 6 is the only dish stored on the bottom shelf, which one of the following could be the list of dishes that are stored together on the middle shelf?\nis_exception(is_sat(stored(dishes, middle) == [True, True, True, True, True, True])) ::: (A)\nis_exception(is_sat(stored(dishes, middle) == [True, True, True, True, True, False])) ::: (B)\nis_exception(is_sat(stored(dishes, middle) == [True, True, True, True, False, True])) ::: (C)\nis_exception(is_sat(stored(dishes, middle) == [True, True, True, False, True, True])) ::: (D)\nis_exception(is_sat(stored(dishes, middle) == [True, True, False, True, True, True])) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_2_8",
    "context": "Exactly six petri dishes—labeled dish 1 through dish 6—are to be stored in an otherwise empty refrigerator. There are three available shelves—the bottom shelf, the middle shelf, and the top shelf. The placement of the dishes must be consistent with the following conditions: No more than three dishes are stored on any shelf. Dish 2 is stored at least one shelf above dish 6. Dish 6 is stored either one shelf above or one shelf below dish 5. Dish 1 is not stored on the same shelf as dish 4.",
    "question": "If dish 1, dish 2, and dish 3 are stored on the same shelf as each other, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Exactly one of the dishes is stored on the top shelf.",
      "B) Exactly two of the dishes are stored on the top shelf.",
      "C) Exactly two of the dishes are stored on the middle shelf.",
      "D) Exactly three of the dishes are stored on the middle shelf.",
      "E) Exactly three of the dishes are stored on the bottom shelf."
    ],
    "raw_logic_programs": [
      "# Declarations\ndishes = EnumSort([dish 1, dish 2, dish 3, dish 4, dish 5, dish 6])\nshelves = EnumSort([bottom, middle, top])\nstored = Function([dishes, shelves] -> [bool])\n\n# Constraints\nForAll([s:shelves], And(1 <= stored(dish 1, s), stored(dish 1, s) <= 3))\nForAll([s:shelves], And(1 <= stored(dish 2, s), stored(dish 2, s) <= 3))\nForAll([s:shelves], And(1 <= stored(dish 3, s), stored(dish 3, s) <= 3))\nForAll([s:shelves], And(1 <= stored(dish 4, s), stored(dish 4, s) <= 3))\nForAll([s:shelves], And(1 <= stored(dish 5, s), stored(dish 5, s) <= 3))\nForAll([s:shelves], And(1 <= stored(dish 6, s), stored(dish 6, s) <= 3))\n\n# Options\nQuestion ::: If dish 1, dish 2, and dish 3 are stored on the same shelf as each other, which one of the following could be true?\nis_exception(is_sat(stored(dish 1, top) == 1)) ::: (A)\nis_exception(is_sat(stored(dish 2, top) == 2)) ::: (B)\nis_exception(is_sat(stored(dish 3, top) == 3)) ::: (C)\nis_exception(is_sat(stored(dish 1, middle) == 1)) ::: (D)\nis_exception(is_sat(stored(dish 2, middle) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_2_9",
    "context": "Exactly six petri dishes—labeled dish 1 through dish 6—are to be stored in an otherwise empty refrigerator. There are three available shelves—the bottom shelf, the middle shelf, and the top shelf. The placement of the dishes must be consistent with the following conditions: No more than three dishes are stored on any shelf. Dish 2 is stored at least one shelf above dish 6. Dish 6 is stored either one shelf above or one shelf below dish 5. Dish 1 is not stored on the same shelf as dish 4.",
    "question": "If exactly one of the shelves has no dish stored on it, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Exactly three of the dishes are stored on the bottom shelf.",
      "B) Exactly three of the dishes are stored on the middle shelf.",
      "C) Dish 1 is stored on the same shelf as dish 5.",
      "D) Dish 2 is stored on the same shelf as dish 3.",
      "E) Dish 4 is stored on the same shelf as dish 5."
    ],
    "raw_logic_programs": [
      "# Declarations\ndishes = EnumSort([dish_1, dish_2, dish_3, dish_4, dish_5, dish_6])\nshelves = EnumSort([bottom, middle, top])\nstored = Function([dishes, shelves] -> [bool])\n\n# Constraints\nForAll([s:shelves], And(1 <= stored(dish_1, s), stored(dish_1, s) <= 6))\nForAll([s:shelves], And(1 <= stored(dish_2, s), stored(dish_2, s) <= 6))\nForAll([s:shelves], And(1 <= stored(dish_3, s), stored(dish_3, s) <= 6))\nForAll([s:shelves], And(1 <= stored(dish_4, s), stored(dish_4, s) <= 6))\nForAll([s:shelves], And(1 <= stored(dish_5, s), stored(dish_5, s) <= 6))\nForAll([s:shelves], And(1 <= stored(dish_6, s), stored(dish_6, s) <= 6))\n\n# Options\nQuestion ::: If exactly one of the shelves has no dish stored on it, which one of the following must be true?\nis_exception(is_sat(stored(dish_1, top) == False)) ::: (A)\nis_exception(is_sat(stored(dish_2, middle) == False)) ::: (B)\nis_exception(is_sat(stored(dish_1, middle) == True)) ::: (C)\nis_exception(is_sat(stored(dish_2, bottom) == True)) ::: (D)\nis_exception(is_sat(stored(dish_4, top) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_2_10",
    "context": "Exactly six petri dishes—labeled dish 1 through dish 6—are to be stored in an otherwise empty refrigerator. There are three available shelves—the bottom shelf, the middle shelf, and the top shelf. The placement of the dishes must be consistent with the following conditions: No more than three dishes are stored on any shelf. Dish 2 is stored at least one shelf above dish 6. Dish 6 is stored either one shelf above or one shelf below dish 5. Dish 1 is not stored on the same shelf as dish 4.",
    "question": "If dish 5 is the only dish stored on the bottom shelf and if exactly two of the dishes are stored on the middle shelf, then which one of the following is a pair of dishes that must be among the dishes stored on the top shelf?",
    "answer": "C",
    "options": [
      "A) dish 1 and dish 2",
      "B) dish 1 and dish 6",
      "C) dish 2 and dish 3",
      "D) dish 2 and dish 4",
      "E) dish 3 and dish 4"
    ],
    "raw_logic_programs": [
      "# Declarations\ndishes = EnumSort([dish 1, dish 2, dish 3, dish 4, dish 5, dish 6])\nshelves = EnumSort([bottom, middle, top])\nstored = Function([dishes, shelves] -> [bool])\n\n# Constraints\nForAll([s:shelves], And(1 <= stored(dish 1, s), stored(dish 1, s) <= 3))\nForAll([s:shelves], And(1 <= stored(dish 2, s), stored(dish 2, s) <= 3))\nForAll([s:shelves], And(1 <= stored(dish 3, s), stored(dish 3, s) <= 3))\nForAll([s:shelves], And(1 <= stored(dish 4, s), stored(dish 4, s) <= 3))\nForAll([s:shelves], And(1 <= stored(dish 5, s), stored(dish 5, s) <= 3))\nForAll([s:shelves], And(1 <= stored(dish 6, s), stored(dish 6, s) <= 3))\n\n# Options\nQuestion ::: If dish 5 is the only dish stored on the bottom shelf and if exactly two of the dishes are stored on the middle shelf, then which one of the following is a pair of dishes that must be among the dishes stored on the top shelf?\nis_exception(is_sat(stored(dish 1, top) == stored(dish 2, top))) ::: (A)\nis_exception(is_sat(stored(dish 1, top) == stored(dish 6, top))) ::: (B)\nis_exception(is_sat(stored(dish 2, top) == stored(dish 3, top))) ::: (C)\nis_exception(is_sat(stored(dish 2, top) == stored(dish 4, top))) ::: (D)\nis_exception(is_sat(stored(dish 3, top) == stored(dish 4, top))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_2_11",
    "context": "Exactly six petri dishes—labeled dish 1 through dish 6—are to be stored in an otherwise empty refrigerator. There are three available shelves—the bottom shelf, the middle shelf, and the top shelf. The placement of the dishes must be consistent with the following conditions: No more than three dishes are stored on any shelf. Dish 2 is stored at least one shelf above dish 6. Dish 6 is stored either one shelf above or one shelf below dish 5. Dish 1 is not stored on the same shelf as dish 4.",
    "question": "If exactly one of the dishes is stored on the middle shelf, which one of the following could be the list of dishes stored on the top shelf?",
    "answer": "A",
    "options": [
      "A) dish 1, dish 2",
      "B) dish 1, dish 5",
      "C) dish 2, dish 3",
      "D) dish 3, dish 4",
      "E) dish 3, dish 5"
    ],
    "raw_logic_programs": [
      "# Declarations\ndishes = EnumSort([dish 1, dish 2, dish 3, dish 4, dish 5, dish 6])\nshelves = EnumSort([bottom, middle, top])\nstored = Function([dishes, shelves] -> [bool])\n\n# Constraints\nForAll([s:shelves], And(1 <= stored(dishes, s), stored(dishes, s) <= 6)) ::: no more than three dishes are stored on any shelf\nAnd(stored(dishes, middle) == 1, stored(dishes, top) == 1) ::: Dish 2 is stored at least one shelf above dish 6\nAnd(stored(dishes, top) == 1, stored(dishes, middle) == 1) ::: Dish 6 is stored either one shelf above or one shelf below dish 5\nAnd(stored(dishes, bottom) == 1, stored(dishes, middle) == 1) ::: Dish 1 is not stored on the same shelf as dish 4\n\n# Options\nQuestion ::: If exactly one of the dishes is stored on the middle shelf, which one of the following could be the list of dishes stored on the top shelf?\nis_exception(is_sat(stored(dishes, top) == [dish 1, dish 2])) ::: (A)\nis_exception(is_sat(stored(dishes, top) == [dish 1, dish 5])) ::: (B)\nis_exception(is_sat(stored(dishes, top) == [dish 2, dish 3])) ::: (C)\nis_exception(is_sat(stored(dishes, top) == [dish 3, dish 4])) ::: (D)\nis_exception(is_sat(stored(dishes, top) == [dish 3, dish 5])) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_3_12",
    "context": "A company operates vending machines in four schools: Ferndale, Gladstone, Hafford, and Isley. The company delivers juices in one of its two trucks and snacks in the other truck. Each week, exactly one delivery of juices and exactly one delivery of snacks is made to each school, subject to the following conditions: Snacks must be delivered to Ferndale at some time before they are delivered to Hafford. Gladstone cannot be the fourth school to which juices are delivered. Gladstone must be the third school to which snacks are delivered. The first school to which juices are delivered must be the fourth one to which snacks are delivered.",
    "question": "Which one of the following could be the schedule of deliveries to the schools, from the first to the fourth?",
    "answer": "A",
    "options": [
      "A) Juices: Hafford, Ferndale, Gladstone, Isley Snacks: Ferndale, Isley, Gladstone, Hafford",
      "B) Juices: Hafford, Isley, Ferndale, Gladstone Snacks: Isley, Ferndale, Gladstone, Hafford",
      "C) Juices: Isley, Ferndale, Gladstone, Hafford Snacks: Hafford, Ferndale, Gladstone, Isley",
      "D) Juices: Isley, Gladstone, Ferndale, Hafford Snacks: Ferndale, Gladstone, Hafford, Isley",
      "E) Juices: Isley, Hafford, Gladstone, Ferndale Snacks: Ferndale, Isley, Gladstone, Hafford"
    ],
    "raw_logic_programs": [
      "# Declarations\nschools = EnumSort([Ferndale, Gladstone, Hafford, Isley])\ndeliveries = EnumSort([juices, snacks])\ndelivered = Function([schools, deliveries] -> [bool])\n\n# Constraints\nForAll([s:schools], And(1 <= delivered(s, deliveries[0]), delivered(s, deliveries[0]) <= 4)) ::: each school receives exactly one delivery of juices and exactly one delivery of snacks\nAnd(delivered(Gladstone, juices[0]), delivered(Gladstone, snacks[0])) ::: Gladstone cannot be the fourth school to which juices are delivered\nAnd(delivered(Ferndale, juices[0]), delivered(Ferndale, snacks[0])) ::: Ferndale must be the fourth school to which snacks are delivered\nAnd(delivered(Ferndale, juices[0]), delivered(Gladstone, snacks[0])) ::: The first school to which juices are delivered must be the fourth one to which snacks are delivered\n\n# Options\nQuestion ::: ::: Which one of the following could be the schedule of deliveries to the schools, from the first to the fourth?\nis_sat(ForAll([s:schools], And(delivered(s, juices[0]) == 1, delivered(s, snacks[0]) == 1))) ::: (A)\nis_sat(ForAll([s:schools], And(delivered(s, juices[0]) == 1, delivered(s, snacks[0]) == 2))) ::: (B)\nis_sat(ForAll([s:schools], And(delivered(s, juices[0]) == 1, delivered(s, snacks[0]) == 3))) ::: (C)\nis_sat(ForAll([s:schools], And(delivered(s, juices[0]) == 1, delivered(s, snacks[0]) == 4))) ::: (D)\nis_sat(ForAll([s:schools], And(delivered(s, juices[0]) == 2, delivered(s, snacks[0]) == 1))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_3_13",
    "context": "A company operates vending machines in four schools: Ferndale, Gladstone, Hafford, and Isley. The company delivers juices in one of its two trucks and snacks in the other truck. Each week, exactly one delivery of juices and exactly one delivery of snacks is made to each school, subject to the following conditions: Snacks must be delivered to Ferndale at some time before they are delivered to Hafford. Gladstone cannot be the fourth school to which juices are delivered. Gladstone must be the third school to which snacks are delivered. The first school to which juices are delivered must be the fourth one to which snacks are delivered.",
    "question": "If Hafford is the fourth school to which juices are delivered, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Ferndale is the second school to which juices are delivered.",
      "B) Gladstone is the third school to which juices are delivered.",
      "C) Ferndale is the second school to which snacks are delivered.",
      "D) Hafford is the second school to which snacks are delivered.",
      "E) Isley is the first school to which snacks are delivered."
    ],
    "raw_logic_programs": [
      "# Declarations\nschools = EnumSort([Ferndale, Gladstone, Hafford, Isley])\ndeliveries = EnumSort([juices, snacks])\ndelivered = Function([schools, deliveries] -> [bool])\n\n# Constraints\nForAll([s:schools], And(1 <= delivered(s, deliveries[0]), delivered(s, deliveries[0]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[1]), delivered(s, deliveries[1]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[2]), delivered(s, deliveries[2]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[3]), delivered(s, deliveries[3]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[4]), delivered(s, deliveries[4]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[5]), delivered(s, deliveries[5]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[6]), delivered(s, deliveries[6]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[7]), delivered(s, deliveries[7]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[8]), delivered(s, deliveries[8]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[9]), delivered(s, deliveries[9]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[10]), delivered(s, deliveries[10]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[11]), delivered(s, deliveries[11]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[12]), delivered(s, deliveries[12]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[13]), delivered(s, deliveries[13]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[14]), delivered(s, deliveries[14]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[15]), delivered(s, deliveries[15]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[16]), delivered(s, deliveries[16]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[17]), delivered(s, deliveries[17]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[18]), delivered(s, deliveries[18]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[19]), delivered(s, deliveries[19]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[20]), delivered(s, deliveries[20]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[21]), delivered(s, deliveries[21]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[22]), delivered(s, deliveries[22]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[23]), delivered(s, deliveries[23]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[24]), delivered(s, deliveries[24]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[25]), delivered(s, deliveries[25]) <= 4))\nForAll([s:schools], And(1 <= delivered(s"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_3_14",
    "context": "A company operates vending machines in four schools: Ferndale, Gladstone, Hafford, and Isley. The company delivers juices in one of its two trucks and snacks in the other truck. Each week, exactly one delivery of juices and exactly one delivery of snacks is made to each school, subject to the following conditions: Snacks must be delivered to Ferndale at some time before they are delivered to Hafford. Gladstone cannot be the fourth school to which juices are delivered. Gladstone must be the third school to which snacks are delivered. The first school to which juices are delivered must be the fourth one to which snacks are delivered.",
    "question": "If Isley is the third school to which juices are delivered, which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Juices are delivered to Gladstone at some time before they are delivered to Hafford.",
      "B) Juices are delivered to Isley at some time before they are delivered to Hafford.",
      "C) Snacks are delivered to Ferndale at some time before they are delivered to Isley.",
      "D) Snacks are delivered to Gladstone at some time before they are delivered to Isley.",
      "E) Snacks are delivered to Hafford at some time before they are delivered to Gladstone."
    ],
    "raw_logic_programs": [
      "# Declarations\nschools = EnumSort([Ferndale, Gladstone, Hafford, Isley])\ndeliveries = EnumSort([juices, snacks])\ndelivered = Function([schools, deliveries] -> [bool])\n\n# Constraints\nForAll([s:schools], And(1 <= delivered(s, deliveries[0]), delivered(s, deliveries[0]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[1]), delivered(s, deliveries[1]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[2]), delivered(s, deliveries[2]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[3]), delivered(s, deliveries[3]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[4]), delivered(s, deliveries[4]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[0]), delivered(s, deliveries[0]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[1]), delivered(s, deliveries[1]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[2]), delivered(s, deliveries[2]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[3]), delivered(s, deliveries[3]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[4]), delivered(s, deliveries[4]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[0]), delivered(s, deliveries[0]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[1]), delivered(s, deliveries[1]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[2]), delivered(s, deliveries[2]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[3]), delivered(s, deliveries[3]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[4]), delivered(s, deliveries[4]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[0]), delivered(s, deliveries[0]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[1]), delivered(s, deliveries[1]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[2]), delivered(s, deliveries[2]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[3]), delivered(s, deliveries[3]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[4]), delivered(s, deliveries[4]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[0]), delivered(s, deliveries[0]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[1]), delivered(s, deliveries[1]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[2]), delivered(s, deliveries[2]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[3]), delivered(s, deliveries[3]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[4]), delivered(s, deliveries[4]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[0]), delivered(s, deliveries[0]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[1]), delivered(s, deliveries[1]) <= 4))\nForAll([s:schools], And(1 <="
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_3_15",
    "context": "A company operates vending machines in four schools: Ferndale, Gladstone, Hafford, and Isley. The company delivers juices in one of its two trucks and snacks in the other truck. Each week, exactly one delivery of juices and exactly one delivery of snacks is made to each school, subject to the following conditions: Snacks must be delivered to Ferndale at some time before they are delivered to Hafford. Gladstone cannot be the fourth school to which juices are delivered. Gladstone must be the third school to which snacks are delivered. The first school to which juices are delivered must be the fourth one to which snacks are delivered.",
    "question": "If Isley is the first school to which snacks are delivered, which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Ferndale is the second school to which juices are delivered.",
      "B) Hafford is the second school to which juices are delivered.",
      "C) Hafford is the third school to which juices are delivered.",
      "D) Isley is the first school to which juices are delivered.",
      "E) Hafford is the second school to which snacks are delivered."
    ],
    "raw_logic_programs": [
      "# Declarations\nschools = EnumSort([Ferndale, Gladstone, Hafford, Isley])\ndeliveries = EnumSort([juices, snacks])\ndelivered = Function([schools, deliveries] -> [bool])\n\n# Constraints\nForAll([s:schools], And(1 <= delivered(s, deliveries[0]), delivered(s, deliveries[0]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[1]), delivered(s, deliveries[1]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[2]), delivered(s, deliveries[2]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[3]), delivered(s, deliveries[3]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[4]), delivered(s, deliveries[4]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[5]), delivered(s, deliveries[5]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[6]), delivered(s, deliveries[6]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[7]), delivered(s, deliveries[7]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[8]), delivered(s, deliveries[8]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[9]), delivered(s, deliveries[9]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[10]), delivered(s, deliveries[10]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[11]), delivered(s, deliveries[11]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[12]), delivered(s, deliveries[12]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[13]), delivered(s, deliveries[13]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[14]), delivered(s, deliveries[14]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[15]), delivered(s, deliveries[15]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[16]), delivered(s, deliveries[16]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[17]), delivered(s, deliveries[17]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[18]), delivered(s, deliveries[18]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[19]), delivered(s, deliveries[19]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[20]), delivered(s, deliveries[20]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[21]), delivered(s, deliveries[21]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[22]), delivered(s, deliveries[22]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[23]), delivered(s, deliveries[23]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[24]), delivered(s, deliveries[24]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[25]), delivered(s, deliveries[25]) <= 4))\nForAll([s:schools], And(1 <= delivered(s"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_3_16",
    "context": "A company operates vending machines in four schools: Ferndale, Gladstone, Hafford, and Isley. The company delivers juices in one of its two trucks and snacks in the other truck. Each week, exactly one delivery of juices and exactly one delivery of snacks is made to each school, subject to the following conditions: Snacks must be delivered to Ferndale at some time before they are delivered to Hafford. Gladstone cannot be the fourth school to which juices are delivered. Gladstone must be the third school to which snacks are delivered. The first school to which juices are delivered must be the fourth one to which snacks are delivered.",
    "question": "Which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Both juices and snacks are delivered to Gladstone at some time before they are delivered to Ferndale.",
      "B) Both juices and snacks are delivered to Gladstone at some time before they are delivered to Isley.",
      "C) Both juices and snacks are delivered to Hafford at some time before they are delivered to Isley.",
      "D) Both juices and snacks are delivered to Isley at some time before they are delivered to Ferndale.",
      "E) Both juices and snacks are delivered to Isley at some time before they are delivered to Hafford."
    ],
    "raw_logic_programs": [
      "# Declarations\nschools = EnumSort([Ferndale, Gladstone, Hafford, Isley])\ndeliveries = EnumSort([juices, snacks])\ndelivered = Function([schools, deliveries] -> [bool])\n\n# Constraints\nForAll([s:schools], And(1 <= delivered(s, deliveries[0]), delivered(s, deliveries[0]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[1]), delivered(s, deliveries[1]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[2]), delivered(s, deliveries[2]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[3]), delivered(s, deliveries[3]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[4]), delivered(s, deliveries[4]) <= 4))\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(ForAll([s:schools], And(delivered(s, deliveries[0]) == delivered(s, deliveries[1]), delivered(s, deliveries[0]) == delivered(s, deliveries[2]), delivered(s, deliveries[0]) == delivered(s, deliveries[3]), delivered(s, deliveries[0]) == delivered(s, deliveries[4]))))) ::: (A)\nis_sat(ForAll([s:schools], And(delivered(s, deliveries[0]) == delivered(s, deliveries[1]), delivered(s, deliveries[0]) == delivered(s, deliveries[2]), delivered(s, deliveries[0]) == delivered(s, deliveries[3]), delivered(s, deliveries[0]) == delivered(s, deliveries[4]), delivered(s, deliveries[1]) == delivered(s, deliveries[2]), delivered(s, deliveries[1]) == delivered(s, deliveries[3]), delivered(s, deliveries[1]) == delivered(s, deliveries[4]))))) ::: (B)\nis_sat(ForAll([s:schools], And(delivered(s, deliveries[0]) == delivered(s, deliveries[1]), delivered(s, deliveries[0]) == delivered(s, deliveries[2]), delivered(s, deliveries[0]) == delivered(s, deliveries[3]), delivered(s, deliveries[0]) == delivered(s, deliveries[4]), delivered(s, deliveries[1]) == delivered(s, deliveries[2]), delivered(s, deliveries[1]) == delivered(s, deliveries[3]), delivered(s, deliveries[1]) == delivered(s, deliveries[4]))))) ::: (C)\nis_sat(ForAll([s:schools], And(delivered(s, deliveries[0]) == delivered(s, deliveries[1]), delivered(s, deliveries[0]) == delivered(s, deliveries[2]), delivered(s, deliveries[0]) == delivered(s, deliveries[3]), delivered(s, deliveries[0]) == delivered(s, deliveries[4]), delivered(s, deliveries[1]) == delivered(s, deliveries[2]), delivered(s, deliveries[1]) == delivered(s, deliveries[3]), delivered(s, deliveries[1]) == delivered(s, deliveries[4]))))) ::: (D)\nis_sat(ForAll([s:schools], And(delivered(s, deliveries[0]) == delivered(s, deliveries[1]), delivered(s, deliveries[0]) == delivered(s, deliveries[2]), delivered(s, deliveries[0]) == delivered(s, deliveries[3]), delivered(s, deliveries[0]) == delivered(s, deliveries[4]), delivered(s, deliveries[1]) == delivered(s, deliveries[2]), delivered(s, deliveries[1]) == delivered(s, deliveries[3]), delivered(s, deliveries[1]) == delivered(s, deliveries[4]))))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_3_17",
    "context": "A company operates vending machines in four schools: Ferndale, Gladstone, Hafford, and Isley. The company delivers juices in one of its two trucks and snacks in the other truck. Each week, exactly one delivery of juices and exactly one delivery of snacks is made to each school, subject to the following conditions: Snacks must be delivered to Ferndale at some time before they are delivered to Hafford. Gladstone cannot be the fourth school to which juices are delivered. Gladstone must be the third school to which snacks are delivered. The first school to which juices are delivered must be the fourth one to which snacks are delivered.",
    "question": "Which one of the following, if substituted for the condition that Gladstone cannot be the fourth school to which juices are delivered, would have the same effect in determining the delivery schedule?",
    "answer": "B",
    "options": [
      "A) Ferndale must be either the second school or the fourth school to which juices are delivered.",
      "B) Gladstone must be either the second school or the third school to which juices are delivered.",
      "C) Hafford must be either the first school or the fourth school to which juices are delivered.",
      "D) The first school to which juices are delivered must be either Ferndale or Isley.",
      "E) The fourth school to which juices are delivered must be either Hafford or Isley."
    ],
    "raw_logic_programs": [
      "# Declarations\nschools = EnumSort([Ferndale, Gladstone, Hafford, Isley])\ndeliveries = EnumSort([juices, snacks])\ndelivered = Function([schools, deliveries] -> [bool])\n\n# Constraints\nForAll([s:schools], And(1 <= delivered(s, deliveries[0]), delivered(s, deliveries[0]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[1]), delivered(s, deliveries[1]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[2]), delivered(s, deliveries[2]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[3]), delivered(s, deliveries[3]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[4]), delivered(s, deliveries[4]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[5]), delivered(s, deliveries[5]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[6]), delivered(s, deliveries[6]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[7]), delivered(s, deliveries[7]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[8]), delivered(s, deliveries[8]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[9]), delivered(s, deliveries[9]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[10]), delivered(s, deliveries[10]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[11]), delivered(s, deliveries[11]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[12]), delivered(s, deliveries[12]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[13]), delivered(s, deliveries[13]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[14]), delivered(s, deliveries[14]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[15]), delivered(s, deliveries[15]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[16]), delivered(s, deliveries[16]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[17]), delivered(s, deliveries[17]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[18]), delivered(s, deliveries[18]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[19]), delivered(s, deliveries[19]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[20]), delivered(s, deliveries[20]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[21]), delivered(s, deliveries[21]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[22]), delivered(s, deliveries[22]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[23]), delivered(s, deliveries[23]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[24]), delivered(s, deliveries[24]) <= 4))\nForAll([s:schools], And(1 <= delivered(s, deliveries[25]), delivered(s, deliveries[25]) <= 4))\nForAll([s:schools], And(1 <= delivered(s"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_4_18",
    "context": "Each of five paralegals—Frank, Gina, Hiro, Kevin, and Laurie—is being assigned to exactly one of three cases—the Raimes, Sicoli, or Thompson case. At least one paralegal will be assigned to each case. The following conditions must apply: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson. Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both. Hiro is assigned to Sicoli.",
    "question": "Which one of the following could be the assignment of paralegals to cases?",
    "answer": "D",
    "options": [
      "A) Raimes: Frank Sicoli: Gina, Hiro, Kevin Thompson: Laurie",
      "B) Raimes: Kevin Sicoli: Gina Thompson: Frank, Hiro, Laurie",
      "C) Raimes: Gina, Kevin Sicoli: Frank, Hiro Thompson: Laurie",
      "D) Raimes: Kevin, Laurie Sicoli: Gina, Hiro Thompson: Frank",
      "E) Raimes: Frank, Kevin, Laurie Sicoli: Hiro Thompson: Gina"
    ],
    "raw_logic_programs": [
      "# Declarations\nparalegals = EnumSort([Frank, Gina, Hiro, Kevin, Laurie])\ncases = EnumSort([Raimes, Sicoli, Thompson])\nassignments = Function([paralegals, cases] -> [bool])\n\n# Constraints\nForAll([p:paralegals, c:cases], And(assignments(p, c) == True, assignments(p, c) == assignments(p, c + 1))) ::: At least one paralegal will be assigned to each case\nAnd(assignments(Frank, Raimes), assignments(Kevin, Thompson)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nAnd(assignments(Frank, Raimes), assignments(Gina, Raimes) == assignments(Kevin, Raimes)) ::: Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both\nAnd(assignments(Hiro, Sicoli), assignments(Gina, Sicoli) == assignments(Kevin, Sicoli)) ::: Hiro is assigned to Sicoli\n\n# Options\nQuestion ::: ::: Which one of the following could be the assignment of paralegals to cases?\nis_sat(ForAll([p:paralegals, c:cases], assignments(p, c) == assignments(p, c + 1))) ::: (A)\nis_sat(ForAll([p:paralegals, c:cases], assignments(p, c) == assignments(p, c + 1))) ::: (B)\nis_sat(ForAll([p:paralegals, c:cases], assignments(p, c) == assignments(p, c + 1))) ::: (C)\nis_sat(ForAll([p:paralegals, c:cases], assignments(p, c) == assignments(p, c + 1))) ::: (D)\nis_sat(ForAll([p:paralegals, c:cases], assignments(p, c) == assignments(p, c + 1))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_4_19",
    "context": "Each of five paralegals—Frank, Gina, Hiro, Kevin, and Laurie—is being assigned to exactly one of three cases—the Raimes, Sicoli, or Thompson case. At least one paralegal will be assigned to each case. The following conditions must apply: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson. Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both. Hiro is assigned to Sicoli.",
    "question": "Which one of the following CANNOT be the complete assignment of paralegals to the Sicoli case?",
    "answer": "E",
    "options": [
      "A) Frank, Hiro, Kevin",
      "B) Frank, Hiro, Laurie",
      "C) Gina, Hiro, Kevin",
      "D) Gina, Hiro, Laurie",
      "E) Hiro, Kevin, Laurie"
    ],
    "raw_logic_programs": [
      "# Declarations\nparalegals = EnumSort([Frank, Gina, Hiro, Kevin, Laurie])\ncases = EnumSort([Raimes, Sicoli, Thompson])\nassigned = Function([paralegals, cases] -> [bool])\n\n# Constraints\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Sicoli), assigned(p, Sicoli) <= 1)) ::: Hiro is assigned to Sicoli\nForAll([p:paralegals], And(1 <= assigned(p, Thompson), assigned(p, Thompson) <= 1)) ::: Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Sicoli), assigned(p, Sicoli) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Thompson), assigned(p, Thompson) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\n\n# Options\nQuestion ::: ::: Which one of the following CANNOT be the complete assignment of paralegals to the Sicoli case?\nis_exception(is_sat(assigned(Frank, Sicoli) == 1)) ::: (A)\nis_exception(is_sat(assigned(Gina, Sicoli) == 1)) ::: (B)\nis_exception(is_sat(assigned(Hiro, Sicoli) == 1)) ::: (C)\nis_exception(is_sat(assigned(Kevin, Sicoli) == 1)) ::: (D)\nis_exception(is_sat(assigned(Laurie, Sicoli) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_4_20",
    "context": "Each of five paralegals—Frank, Gina, Hiro, Kevin, and Laurie—is being assigned to exactly one of three cases—the Raimes, Sicoli, or Thompson case. At least one paralegal will be assigned to each case. The following conditions must apply: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson. Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both. Hiro is assigned to Sicoli.",
    "question": "If exactly two of the paralegals are assigned to the Thompson case, then which one of the following could be the complete assignment of paralegals to the Raimes case?",
    "answer": "A",
    "options": [
      "A) Gina",
      "B) Kevin",
      "C) Laurie",
      "D) Gina, Kevin",
      "E) Kevin, Laurie"
    ],
    "raw_logic_programs": [
      "# Declarations\nparalegals = EnumSort([Frank, Gina, Hiro, Kevin, Laurie])\ncases = EnumSort([Raimes, Sicoli, Thompson])\nassigned = Function([paralegals, cases] -> [bool])\n\n# Constraints\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 5)) ::: at least one paralegal will be assigned to each case\nAnd(assigned(Frank, Raimes), assigned(Kevin, Thompson)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both\nassigned(Hiro, Sicoli) ::: Hiro is assigned to Sicoli\n\n# Options\nQuestion ::: ::: If exactly two of the paralegals are assigned to the Thompson case, then which one of the following could be the complete assignment of paralegals to the Raimes case?\nis_sat(ForAll([p:paralegals], assigned(p, Raimes) == assigned(Gina, Raimes))) ::: (A)\nis_sat(ForAll([p:paralegals], assigned(p, Raimes) == assigned(Kevin, Raimes))) ::: (B)\nis_sat(ForAll([p:paralegals], assigned(p, Raimes) == assigned(Laurie, Raimes))) ::: (C)\nis_sat(ForAll([p:paralegals], assigned(p, Raimes) == assigned(Gina, Raimes), assigned(p, Raimes) == assigned(Kevin, Raimes))) ::: (D)\nis_sat(ForAll([p:paralegals], assigned(p, Raimes) == assigned(Kevin, Raimes), assigned(p, Raimes) == assigned(Laurie, Raimes))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_4_21",
    "context": "Each of five paralegals—Frank, Gina, Hiro, Kevin, and Laurie—is being assigned to exactly one of three cases—the Raimes, Sicoli, or Thompson case. At least one paralegal will be assigned to each case. The following conditions must apply: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson. Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both. Hiro is assigned to Sicoli.",
    "question": "If one of the cases has Gina and Laurie as the only paralegals assigned to it, then each of the following must be false EXCEPT:",
    "answer": "C",
    "options": [
      "A) Frank is assigned to the Raimes case.",
      "B) Frank is assigned to the Sicoli case.",
      "C) Gina is assigned to the Raimes case.",
      "D) Kevin is assigned to the Raimes case.",
      "E) Laurie is assigned to the Thompson case."
    ],
    "raw_logic_programs": [
      "# Declarations\nparalegals = EnumSort([Frank, Gina, Hiro, Kevin, Laurie])\ncases = EnumSort([Raimes, Sicoli, Thompson])\nassigned = Function([paralegals, cases] -> [bool])\n\n# Constraints\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Sicoli), assigned(p, Sicoli) <= 1)) ::: Hiro is assigned to Sicoli\nForAll([p:paralegals], And(1 <= assigned(p, Thompson), assigned(p, Thompson) <= 1)) ::: Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Ra"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_4_22",
    "context": "Each of five paralegals—Frank, Gina, Hiro, Kevin, and Laurie—is being assigned to exactly one of three cases—the Raimes, Sicoli, or Thompson case. At least one paralegal will be assigned to each case. The following conditions must apply: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson. Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both. Hiro is assigned to Sicoli.",
    "question": "Which one of the following CANNOT be the complete assignment of paralegals to the Thompson case?",
    "answer": "D",
    "options": [
      "A) Gina",
      "B) Laurie",
      "C) Gina, Kevin",
      "D) Gina, Laurie",
      "E) Kevin, Laurie"
    ],
    "raw_logic_programs": [
      "# Declarations\nparalegals = EnumSort([Frank, Gina, Hiro, Kevin, Laurie])\ncases = EnumSort([Raimes, Sicoli, Thompson])\nassigned = Function([paralegals, cases] -> [bool])\n\n# Constraints\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Sicoli), assigned(p, Sicoli) <= 1)) ::: Hiro is assigned to Sicoli\nForAll([p:paralegals], And(1 <= assigned(p, Thompson), assigned(p, Thompson) <= 1)) ::: Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Thompson), assigned(p, Thompson) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes),"
    ]
  },
  {
    "id": "ar_lsat_201306_2-G_4_23",
    "context": "Each of five paralegals—Frank, Gina, Hiro, Kevin, and Laurie—is being assigned to exactly one of three cases—the Raimes, Sicoli, or Thompson case. At least one paralegal will be assigned to each case. The following conditions must apply: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson. Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both. Hiro is assigned to Sicoli.",
    "question": "If Kevin is the sole paralegal assigned to one of the cases then which one of the following lists all of the paralegals any one of",
    "answer": "B",
    "options": [
      "A) Frank, Kevin, Laurie",
      "B) Frank, Kevin",
      "C) Frank",
      "D) Gina",
      "E) Kevin"
    ],
    "raw_logic_programs": [
      "# Declarations\nparalegals = EnumSort([Frank, Gina, Hiro, Kevin, Laurie])\ncases = EnumSort([Raimes, Sicoli, Thompson])\nassigned = Function([paralegals, cases] -> [bool])\n\n# Constraints\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Sicoli), assigned(p, Sicoli) <= 1)) ::: Hiro is assigned to Sicoli\nForAll([p:paralegals], And(1 <= assigned(p, Thompson), assigned(p, Thompson) <= 1)) ::: Either Frank is the sole paralegal assigned to his case or Gina is the sole paralegal assigned to her case, but not both\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Raimes), assigned(p, Raimes) <= 1)) ::: Either Frank is assigned to Raimes and Kevin is assigned to Thompson, or Frank is not assigned to Raimes and Kevin is not assigned to Thompson\nForAll([p:paralegals], And(1 <= assigned(p, Ra"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_1_1",
    "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
    "question": "The five pieces could appear in which one of the following sequences on the CD, in order from first to last?",
    "answer": "B",
    "options": [
      "A) Reciprocity, Trapezoid, Wisteria, Salammbo, Vancouver",
      "B) Salammbo, Reciprocity, Trapezoid, Vancouver, Wisteria",
      "C) Trapezoid, Wisteria, Salammbo, Vancouver, Reciprocity",
      "D) Vancouver, Wisteria, Salammbo, Reciprocity, Trapezoid",
      "E) Wisteria, Salammbo, Vancouver, Trapezoid, Reciprocity"
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([Reciprocity, Salammbo, Trapezoid, Vancouver, Wisteria])\nsequence = Function([pieces] -> [pieces])\n\n# Constraints\nForAll([p:pieces], And(1 <= sequence(p), sequence(p) <= 5))\nAnd(sequence(Salammbo) < sequence(Vancouver)) ::: Salammbo must be earlier than Vancouver\nAnd(sequence(Trapezoid) < sequence(Reciprocity) || sequence(Trapezoid) > sequence(Salammbo)) ::: Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo\nAnd(sequence(Wisteria) < sequence(Reciprocity) || sequence(Wisteria) > sequence(Trapezoid)) ::: Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid\n\n# Options\nQuestion ::: The five pieces could appear in which one of the following sequences on the CD, in order from first to last?\nis_valid(Exists([p:pieces], sequence(p) == A)) ::: (A)\nis_valid(Exists([p:pieces], sequence(p) == B)) ::: (B)\nis_valid(Exists([p:pieces], sequence(p) == C)) ::: (C)\nis_valid(Exists([p:pieces], sequence(p) == D)) ::: (D)\nis_valid(Exists([p:pieces], sequence(p) == E)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_1_2",
    "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
    "question": "If Salammbo is the fourth piece on the CD, then which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Reciprocity is earlier on the CD than Wisteria.",
      "B) Salammbo is earlier on the CD than Trapezoid.",
      "C) Trapezoid is earlier on the CD than Reciprocity.",
      "D) Vancouver is earlier on the CD than Wisteria.",
      "E) Wisteria is earlier on the CD than Trapezoid."
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([Reciprocity, Salammbo, Trapezoid, Vancouver, Wisteria])\norder = Function([pieces] -> [int])\n\n# Constraints\nForAll([p:pieces], And(1 <= order(p), order(p) <= 5))\nAnd(order(Salammbo) < order(Vancouver), order(Reciprocity) < order(Salammbo)) ::: Salammbo must be earlier than Vancouver\nAnd(order(Trapezoid) < order(Reciprocity) || order(Trapezoid) > order(Salammbo), order(Trapezoid) < order(Vancouver) || order(Trapezoid) > order(Salammbo)) ::: Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo\nAnd(order(Wisteria) < order(Reciprocity) || order(Wisteria) > order(Trapezoid), order(Wisteria) < order(Vancouver) || order(Wisteria) > order(Trapezoid)) ::: Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid\n\n# Options\nQuestion ::: If Salammbo is the fourth piece on the CD, then which one of the following must be true?\nis_exception(is_sat(order(Reciprocity) == 4)) ::: (A)\nis_exception(is_sat(order(Salammbo) == 4)) ::: (B)\nis_exception(is_sat(order(Trapezoid) == 4)) ::: (C)\nis_exception(is_sat(order(Vancouver) == 4)) ::: (D)\nis_exception(is_sat(order(Wisteria) == 4)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_1_3",
    "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
    "question": "If Reciprocity is the first piece on the CD, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Trapezoid is the second piece on the CD.",
      "B) Vancouver is the third piece on the CD.",
      "C) Wisteria is the third piece on the CD.",
      "D) Salammbo is the fourth piece on the CD.",
      "E) Trapezoid is the last piece on the CD."
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([Reciprocity, Salammbo, Trapezoid, Vancouver, Wisteria])\norder = Function([pieces] -> [int])\n\n# Constraints\nForAll([p:pieces], And(1 <= order(p), order(p) <= 5))\nAnd(order(Salammbo) < order(Vancouver), order(Trapezoid) < order(Vancouver)) ::: Salammbo must be earlier than Vancouver\nAnd(order(Trapezoid) < order(Reciprocity) < order(Salammbo), order(Wisteria) < order(Reciprocity) < order(Salammbo)) ::: Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo\nAnd(order(Reciprocity) < order(Trapezoid) < order(Salammbo), order(Wisteria) < order(Trapezoid) < order(Salammbo)) ::: Reciprocity must either be earlier than both Trapezoid and Salammbo or later than both Trapezoid and Salammbo\nAnd(order(Wisteria) < order(Trapezoid) < order(Salammbo), order(Vancouver) < order(Trapezoid) < order(Salammbo)) ::: Wisteria must either be earlier than both Trapezoid and Salammbo or later than both Trapezoid and Salammbo\n\n# Options\nQuestion ::: If Reciprocity is the first piece on the CD, then which one of the following could be true?\nis_valid(Exists([p:pieces], order(p) == 2)) ::: A)\nis_valid(Exists([p:pieces], order(p) == 3)) ::: B)\nis_valid(Exists([p:pieces], order(p) == 4)) ::: C)\nis_valid(Exists([p:pieces], order(p) == 5)) ::: D)\nis_valid(Exists([p:pieces], order(p) == 5)) ::: E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_1_4",
    "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
    "question": "If Trapezoid is the second piece on the CD, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Salammbo is the first piece on the CD.",
      "B) Reciprocity is the first piece on the CD.",
      "C) Vancouver is the third piece on the CD.",
      "D) Wisteria is the fourth piece on the CD.",
      "E) Reciprocity is the last piece on the CD."
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([Reciprocity, Salammbo, Trapezoid, Vancouver, Wisteria])\norder = Function([pieces] -> [int])\n\n# Constraints\nForAll([p:pieces], And(1 <= order(p), order(p) <= 5))\nAnd(order(Salammbo) < order(Vancouver), order(Trapezoid) < order(Reciprocity)) ::: Salammbo must be earlier than Vancouver\nAnd(order(Trapezoid) < order(Reciprocity), order(Trapezoid) < order(Salammbo)) ::: Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo\nAnd(order(Wisteria) < order(Reciprocity), order(Wisteria) < order(Trapezoid)) ::: Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid\n\n# Options\nQuestion ::: If Trapezoid is the second piece on the CD, then which one of the following could be true?\nis_valid(Exists([p:pieces], order(p) == 1)) ::: A)\nis_valid(Exists([p:pieces], order(p) == 2)) ::: B)\nis_valid(Exists([p:pieces], order(p) == 3)) ::: C)\nis_valid(Exists([p:pieces], order(p) == 4)) ::: D)\nis_valid(Exists([p:pieces], order(p) == 5)) ::: E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_1_5",
    "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
    "question": "The first and second pieces on the CD, listed in order, could be",
    "answer": "E",
    "options": [
      "A) Reciprocity and Vancouver",
      "B) Reciprocity and Wisteria",
      "C) Salammbo and Trapezoid",
      "D) Trapezoid and Wisteria",
      "E) Wisteria and Salammbo"
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([Reciprocity, Salammbo, Trapezoid, Vancouver, Wisteria])\norder = Function([pieces] -> [int])\n\n# Constraints\nForAll([p:pieces], And(1 <= order(p), order(p) <= 5))\nAnd(order(Salammbo) < order(Vancouver), order(Trapezoid) < order(Vancouver)) ::: Salammbo must be earlier than Vancouver\nAnd(order(Trapezoid) < order(Reciprocity) < order(Salammbo), order(Trapezoid) < order(Vancouver)) ::: Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo\nAnd(order(Wisteria) < order(Reciprocity) < order(Trapezoid), order(Wisteria) < order(Vancouver)) ::: Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid\n\n# Options\nQuestion ::: The first and second pieces on the CD, listed in order, could be\nis_valid(Exists([p:pieces], And(order(p) == 1, order(p) == 2))) ::: (A)\nis_valid(Exists([p:pieces], And(order(p) == 1, order(p) == 5))) ::: (B)\nis_valid(Exists([p:pieces], And(order(p) == 2, order(p) == 1))) ::: (C)\nis_valid(Exists([p:pieces], And(order(p) == 2, order(p) == 5))) ::: (D)\nis_valid(Exists([p:pieces], And(order(p) == 3, order(p) == 1))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_1_6",
    "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
    "question": "If Vancouver is the second piece on the CD, then which one of the following could be true?",
    "answer": "D",
    "options": [
      "A) Wisteria is the first piece on the CD.",
      "B) Salammbo is the third piece on the CD.",
      "C) Trapezoid is the third piece on the CD.",
      "D) Reciprocity is the fourth piece on the CD.",
      "E) Reciprocity is the last piece on the CD."
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([Reciprocity, Salammbo, Trapezoid, Vancouver, Wisteria])\norder = Function([pieces] -> [int])\n\n# Constraints\nForAll([p:pieces], And(1 <= order(p), order(p) <= 5))\nAnd(order(Salammbo) < order(Vancouver), order(Trapezoid) < order(Vancouver)) ::: Salammbo must be earlier than Vancouver\nAnd(order(Trapezoid) < order(Reciprocity) < order(Salammbo), order(Wisteria) < order(Reciprocity) < order(Trapezoid)) ::: Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo\nAnd(order(Reciprocity) < order(Trapezoid) < order(Salammbo), order(Wisteria) < order(Trapezoid) < order(Salammbo)) ::: Reciprocity must either be earlier than both Trapezoid and Salammbo or later than both Trapezoid and Salammbo\nAnd(order(Wisteria) < order(Trapezoid) < order(Reciprocity), order(Vancouver) < order(Reciprocity)) ::: Wisteria must either be earlier than both Trapezoid and Reciprocity or later than both Trapezoid and Reciprocity\n\n# Options\nQuestion ::: If Vancouver is the second piece on the CD, then which one of the following could be true?\nis_valid(Exists([p:pieces], order(p) == 1)) ::: A)\nis_valid(Exists([p:pieces], order(p) == 2)) ::: B)\nis_valid(Exists([p:pieces], order(p) == 3)) ::: C)\nis_valid(Exists([p:pieces], order(p) == 4)) ::: D)\nis_valid(Exists([p:pieces], order(p) == 5)) ::: E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_1_7",
    "context": "A record producer is planning the contents of a CD consisting of a sequence of exactly five instrumental pieces—Reciprocity, Salammbo, Trapezoid, Vancouver, and Wisteria. To create and sustain certain moods, the sequence of pieces will satisfy the following constraints: Salammbo must be earlier than Vancouver. Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo. Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid.",
    "question": "If Wisteria is the first piece on the CD, then which one of the following CANNOT be true?",
    "answer": "A",
    "options": [
      "A) Trapezoid is the third piece on the CD.",
      "B) Vancouver is the third piece on the CD.",
      "C) Salammbo is the fourth piece on the CD.",
      "D) Vancouver is the fourth piece on the CD",
      "E) Trapezoid is the last piece on the CD."
    ],
    "raw_logic_programs": [
      "# Declarations\npieces = EnumSort([Reciprocity, Salammbo, Trapezoid, Vancouver, Wisteria])\norder = Function([pieces] -> [int])\n\n# Constraints\nForAll([p:pieces], And(1 <= order(p), order(p) <= 5))\nAnd(order(Salammbo) < order(Vancouver), order(Reciprocity) < order(Salammbo)) ::: Salammbo must be earlier than Vancouver\nAnd(order(Trapezoid) < order(Reciprocity) < order(Salammbo), order(Trapezoid) < order(Vancouver) < order(Salammbo)) ::: Trapezoid must either be earlier than both Reciprocity and Salammbo or later than both Reciprocity and Salammbo\nAnd(order(Wisteria) < order(Reciprocity) < order(Trapezoid), order(Wisteria) < order(Vancouver) < order(Trapezoid)) ::: Wisteria must either be earlier than both Reciprocity and Trapezoid or later than both Reciprocity and Trapezoid\n\n# Options\nQuestion ::: If Wisteria is the first piece on the CD, then which one of the following CANNOT be true?\nis_exception(is_sat(order(Trapezoid) == 3)) ::: (A)\nis_exception(is_sat(order(Vancouver) == 3)) ::: (B)\nis_exception(is_sat(order(Salammbo) == 4)) ::: (C)\nis_exception(is_sat(order(Vancouver) == 4)) ::: (D)\nis_exception(is_sat(order(Trapezoid) == 5)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_2_8",
    "context": "At a business symposium there will be exactly five speakers: Long, Molina, Xiao, Yoshida, and Zimmerman. Each speaker will give exactly one speech, in either the Gold Room or the Rose Room. In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M. In one of the rooms, yet to be determined, there will also be a speech at 3 P.M. The schedule of speeches is constrained by the following: Molina's speech must be earlier than Long's, and in the same room. Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's. If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room.",
    "question": "Which one of the following could be the speeches given in each room, listed in the order in which they occur?",
    "answer": "A",
    "options": [
      "A) Gold Room: Molina's, Long's Rose Room: Zimmerman's, Xiao's, Yoshida's",
      "B) Gold Room: Molina's, Yoshida's, Long's Rose Room: Xiao's Zimmerman's",
      "C) Gold Room: Xiao's, Molina's, Long's Rose Room: Zimmerman's, Yoshida's",
      "D) Gold Room: Yoshida's, Long's, Molina's Rose Room: Zimmerman's, Xiao's",
      "E) Gold Room: Zimmerman's, Molina's Rose Room: Xiao's, Yoshida's, Long's"
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([Long, Molina, Xiao, Yoshida, Zimmerman])\nrooms = EnumSort([gold, rose])\nspeeches = Function([speakers, rooms] -> [int])\n\n# Constraints\nForAll([s:speakers], And(1 <= speeches(s, gold) <= 1, 1 <= speeches(s, rose) <= 1)) ::: each speaker gives exactly one speech\nAnd(speeches(Molina, gold) < speeches(Long, gold), speeches(Molina, gold) < speeches(Long, rose)) ::: Molina's speech must be earlier than Long's, and in the same room\nAnd(speeches(Xiao, gold) < speeches(Zimmerman, gold), speeches(Xiao, gold) < speeches(Zimmerman, rose)) ::: Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's\nIf speeches(Long, gold) == 1 ::: speeches(Long, rose) == 1 ::: Long's speech is in the Gold Room\nIf speeches(Long, gold) == 1 ::: speeches(Xiao, gold) == 1 ::: Xiao's speech is in the Gold Room\nIf speeches(Long, gold) == 1 ::: speeches(Yoshida, gold) == 1 ::: Yoshida's speech is in the Gold Room\nIf speeches(Long, gold) == 1 ::: speeches(Zimmerman, gold) == 1 ::: Zimmerman's speech is in the Gold Room\nIf speeches(Long, gold) == 1 ::: speeches(Molina, gold) == 1 ::: Molina's speech is in the Gold Room\nIf speeches(Long, gold) == 1 ::: speeches(Xiao, gold) == 1 ::: Xiao's speech is in the Gold Room\nIf speeches(Long, gold) == 1 ::: speeches(Yoshida, gold) == 1 ::: Yoshida's speech is in the Gold Room\nIf speeches(Long, gold) == 1 ::: speeches(Zimmerman, gold) == 1 ::: Zimmerman's speech is in the Gold Room\nIf speeches(Long, gold) == 1 ::: speeches(Molina, gold) == 1 ::: Molina's speech is in the Gold Room\nIf speeches(Long, gold) == 1 ::: speeches(Xiao, gold) == 1 ::: Xiao's speech is in the Gold Room\nIf speeches(Long, gold) == 1 ::: speeches(Yoshida, gold) == 1 ::: Yoshida's speech is in the Gold Room\nIf speeches(Long, gold) == 1 ::: speeches(Zimmerman, gold) == 1 ::: Zimmerman's speech is in the Gold Room\n\n# Options\nQuestion ::: ::: Which one of the following could be the speeches given in each room, listed in the order in which they occur?\nis_exception(is_sat(speeches(Long, gold) == 1)) ::: (A)\nis_exception(is_sat(speeches(Molina, gold) == 1)) ::: (B)\nis_exception(is_sat(speeches(Xiao, gold) == 1)) ::: (C)\nis_exception(is_sat(speeches(Yoshida, gold) == 1)) ::: (D)\nis_exception(is_sat(speeches(Zimmerman, gold) == 1)) ::: (E)\nis_exception(is_sat(speeches(Long, rose) == 1)) ::: (F)\nis_exception(is_sat(speeches(Molina, rose) == 1)) ::: (G)\nis_exception(is_sat(speeches(Xiao, rose) == 1)) ::: (H)\nis_exception(is_sat(speeches(Yoshida, rose) == 1)) ::: (I)\nis_exception(is_sat(speeches(Zimmerman, rose) == 1)) ::: (J)\nis_exception(is_sat(speeches(Long, gold)"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_2_9",
    "context": "At a business symposium there will be exactly five speakers: Long, Molina, Xiao, Yoshida, and Zimmerman. Each speaker will give exactly one speech, in either the Gold Room or the Rose Room. In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M. In one of the rooms, yet to be determined, there will also be a speech at 3 P.M. The schedule of speeches is constrained by the following: Molina's speech must be earlier than Long's, and in the same room. Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's. If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room.",
    "question": "Which one of the following pairs of speeches CANNOT be given at the same time?",
    "answer": "B",
    "options": [
      "A) Long's and Yoshida's",
      "B) Long's and Zimmerman's",
      "C) Molina's and Xiao's",
      "D) Xiao's and Yoshida's",
      "E) Yoshida's and Zimmerman's"
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([Long, Molina, Xiao, Yoshida, Zimmerman])\nrooms = EnumSort([Gold, Rose])\nspeeches = Function([speakers, rooms] -> [bool])\n\n# Constraints\nForAll([s:speakers], And(1 <= speeches(s, rooms[0]) <= 2, 1 <= speeches(s, rooms[1]) <= 2)) ::: each speaker gives exactly one speech, in either the Gold Room or the Rose Room\nAnd(speeches(Molina, Gold), speeches(Long, Gold)) ::: Molina's speech must be earlier than Long's, and in the same room\nAnd(speeches(Xiao, Rose), speeches(Zimmerman, Rose)) ::: If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room\n\n# Options\nQuestion ::: ::: Which one of the following pairs of speeches CANNOT be given at the same time?\nis_exception(is_sat(speeches(Long, Gold) == 1)) ::: (A)\nis_exception(is_sat(speeches(Molina, Gold) == 1)) ::: (B)\nis_exception(is_sat(speeches(Xiao, Rose) == 1)) ::: (C)\nis_exception(is_sat(speeches(Yoshida, Gold) == 1)) ::: (D)\nis_exception(is_sat(speeches(Zimmerman, Rose) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_2_10",
    "context": "At a business symposium there will be exactly five speakers: Long, Molina, Xiao, Yoshida, and Zimmerman. Each speaker will give exactly one speech, in either the Gold Room or the Rose Room. In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M. In one of the rooms, yet to be determined, there will also be a speech at 3 P.M. The schedule of speeches is constrained by the following: Molina's speech must be earlier than Long's, and in the same room. Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's. If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room.",
    "question": "If Xiao's speech is at 3 P.M., which one of the following CANNOT be true?",
    "answer": "A",
    "options": [
      "A) Long's speech is in the same room as Yoshida's.",
      "B) Molina's speech is in the same room as Xiao's.",
      "C) Xiao's speech is in the same room as Yoshida's.",
      "D) Xiao's speech is in the same room as Zimmerman's.",
      "E) Yoshida's speech is in the same room as Zimmerman's."
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([Long, Molina, Xiao, Yoshida, Zimmerman])\nrooms = EnumSort([Gold, Rose])\nspeeches = Function([speakers, rooms] -> [bool])\n\n# Constraints\nForAll([s:speakers], And(1 <= speeches(s, rooms[0]) <= 2, 1 <= speeches(s, rooms[1]) <= 2)) ::: each speaker gives exactly one speech, in either the Gold Room or the Rose Room\nAnd(speeches(Molina, rooms[0]), speeches(Long, rooms[0])) ::: Molina's speech must be earlier than Long's, and in the same room\nAnd(speeches(Xiao, rooms[1]), speeches(Zimmerman, rooms[1])) ::: Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Yoshida's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Zimmerman's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Yoshida's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Zimmerman's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Yoshida's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Zimmerman's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Yoshida's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Zimmerman's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Yoshida's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Zimmerman's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Yoshida's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Zimmerman's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Yoshida's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Zimmerman's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the same room as Yoshida's\nIf speeches(Long, rooms[0]) :"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_2_11",
    "context": "At a business symposium there will be exactly five speakers: Long, Molina, Xiao, Yoshida, and Zimmerman. Each speaker will give exactly one speech, in either the Gold Room or the Rose Room. In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M. In one of the rooms, yet to be determined, there will also be a speech at 3 P.M. The schedule of speeches is constrained by the following: Molina's speech must be earlier than Long's, and in the same room. Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's. If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room.",
    "question": "Which one of the following could be a complete and accurate list of the speeches given in the Gold Room, in the order in which they occur?",
    "answer": "C",
    "options": [
      "A) Long's, Molina's",
      "B) Molina's, Yoshida's",
      "C) Molina's, Yoshida's, Long's",
      "D) Yoshida's, Zimmerman's, Xiao's",
      "E) Zimmerman's, Molina's, Long's"
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([Long, Molina, Xiao, Yoshida, Zimmerman])\nrooms = EnumSort([Gold, Rose])\nspeeches = Function([speakers, rooms] -> [bool])\n\n# Constraints\nForAll([s:speakers], And(1 <= speeches(s, rooms[0]) <= 2, 1 <= speeches(s, rooms[1]) <= 2)) ::: each speaker gives exactly one speech, in either the Gold Room or the Rose Room\nAnd(speeches(Molina, Gold), speeches(Long, Gold)) ::: Molina's speech must be earlier than Long's, and in the same room\nAnd(speeches(Xiao, Gold), speeches(Zimmerman, Gold)) ::: Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's\nIf speeches(Long, Gold) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, Rose) ::: Xiao's and Zimmerman's speeches must both be in the Rose Room\n\n# Options\nQuestion ::: ::: Which one of the following could be a complete and accurate list of the speeches given in the Gold Room, in the order in which they occur?\nis_sat(ForAll([s:speakers], speeches(s, Gold) == speeches(s, Rose))) ::: (A)\nis_sat(ForAll([s:speakers], speeches(s, Gold) == speeches(s, Rose))) ::: (B)\nis_sat(ForAll([s:speakers], speeches(s, Gold) == speeches(s, Rose))) ::: (C)\nis_sat(ForAll([s:speakers], speeches(s, Gold) == speeches(s, Rose))) ::: (D)\nis_sat(ForAll([s:speakers], speeches(s, Gold) == speeches(s, Rose))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_2_12",
    "context": "At a business symposium there will be exactly five speakers: Long, Molina, Xiao, Yoshida, and Zimmerman. Each speaker will give exactly one speech, in either the Gold Room or the Rose Room. In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M. In one of the rooms, yet to be determined, there will also be a speech at 3 P.M. The schedule of speeches is constrained by the following: Molina's speech must be earlier than Long's, and in the same room. Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's. If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room.",
    "question": "If Yoshida's speech is at 1 P.M., which one of the following could be true?",
    "answer": "C",
    "options": [
      "A) Long's speech is at 1 P.M. in the Gold Room.",
      "B) Long's speech is at 2 P.M. in the Rose Room.",
      "C) Molina's speech is at 2 P.M. in the Gold Room.",
      "D) Xiao's speech is at 3 P.M. in the Gold Room.",
      "E) Xiao's speech is at 1 P.M. in the Rose Room."
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([Long, Molina, Xiao, Yoshida, Zimmerman])\nrooms = EnumSort([Gold, Rose])\nspeeches = Function([speakers, rooms] -> [bool])\n\n# Constraints\nForAll([s:speakers], And(1 <= speeches(s, rooms[0]) <= 2, 1 <= speeches(s, rooms[1]) <= 2)) ::: each speaker gives exactly one speech, in either the Gold Room or the Rose Room\nAnd(speeches(Molina, rooms[0]), speeches(Long, rooms[0])) ::: Molina's speech must be earlier than Long's, and in the same room\nAnd(speeches(Xiao, rooms[0]), speeches(Zimmerman, rooms[0])) ::: Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's\nIf speeches(Long, rooms[0]) ::: Long's speech is in the Gold Room ::: Then speeches(Xiao, rooms[1]) ::: Xiao's speech is in the Rose Room\n\n# Options\nQuestion ::: If Yoshida's speech is at 1 P.M., which one of the following could be true?\nis_exception(is_sat(speeches(Long, rooms[0]) == 1)) ::: (A)\nis_exception(is_sat(speeches(Molina, rooms[0]) == 1)) ::: (B)\nis_exception(is_sat(speeches(Molina, rooms[0]) == 2)) ::: (C)\nis_exception(is_sat(speeches(Xiao, rooms[0]) == 3)) ::: (D)\nis_exception(is_sat(speeches(Xiao, rooms[1]) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_2_13",
    "context": "At a business symposium there will be exactly five speakers: Long, Molina, Xiao, Yoshida, and Zimmerman. Each speaker will give exactly one speech, in either the Gold Room or the Rose Room. In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M. In one of the rooms, yet to be determined, there will also be a speech at 3 P.M. The schedule of speeches is constrained by the following: Molina's speech must be earlier than Long's, and in the same room. Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's. If Long's speech is in the Gold Room, then Xiao's and Zimmerman's speeches must both be in the Rose Room.",
    "question": "Which one of the following, if substituted for the constraint that neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's, would have the same effect in determining the schedule of speeches with regard to rooms and times?",
    "answer": "E",
    "options": [
      "A) Long's speech must be at 3 P.M.",
      "B) Molina's speech cannot be earlier than Zimmerman's.",
      "C) Either Xiao's speech or Yoshida's speech must be after Zimmerman's.",
      "D) Either Xiao's speech or Yoshida's speech or both must be at 2 P.M.",
      "E) Zimmerman's speech must be at 1 P.M."
    ],
    "raw_logic_programs": [
      "# Declarations\nspeakers = EnumSort([Long, Molina, Xiao, Yoshida, Zimmerman])\nrooms = EnumSort([Gold, Rose])\ntimes = EnumSort([1, 2, 3])\nspeeches = Function([speakers, rooms] -> [times])\n\n# Constraints\nForAll([s:speakers], And(1 <= speeches(s, Gold) <= 2, 3 <= speeches(s, Rose) <= 4)) ::: In each room, there will be exactly one speech at 1 P.M. and one speech at 2 P.M.\nAnd(speeches(Molina, Gold) < speeches(Long, Gold), speeches(Molina, Rose) < speeches(Long, Rose)) ::: Molina's speech must be earlier than Long's, and in the same room.\nNot(speeches(Xiao, Gold) < speeches(Zimmerman, Gold)) ::: Neither Xiao's speech nor Yoshida's speech can be earlier than Zimmerman's.\nIf speeches(Long, Gold) == 3 ::: speeches(Xiao, Rose) == 2 ::: speeches(Yoshida, Rose) == 1 ::: speeches(Zimmerman, Rose) == 3 ::: Long's speech must be at 3 P.M.\nIf speeches(Long, Gold) == 3 ::: speeches(Xiao, Rose) == 2 ::: speeches(Yoshida, Rose) == 1 ::: speeches(Zimmerman, Rose) == 3 ::: Molina's speech must be at 3 P.M.\nIf speeches(Long, Gold) == 3 ::: speeches(Xiao, Rose) == 2 ::: speeches(Yoshida, Rose) == 1 ::: speeches(Zimmerman, Rose) == 3 ::: speeches(Molina, Rose) == 2 ::: Long's speech must be at 3 P.M.\nIf speeches(Long, Gold) == 3 ::: speeches(Xiao, Rose) == 2 ::: speeches(Yoshida, Rose) == 1 ::: speeches(Zimmerman, Rose) == 3 ::: speeches(Molina, Rose) == 2 ::: speeches(Xiao, Gold) == 2 ::: speeches(Yoshida, Gold) == 1 ::: speeches(Zimmerman, Gold) == 3 ::: Long's speech must be at 3 P.M.\nIf speeches(Long, Gold) == 3 ::: speeches(Xiao, Rose) == 2 ::: speeches(Yoshida, Rose) == 1 ::: speeches(Zimmerman, Rose) == 3 ::: speeches(Molina, Rose) == 2 ::: speeches(Xiao, Gold) == 2 ::: speeches(Yoshida, Gold) == 1 ::: speeches(Zimmerman, Gold) == 3 ::: Long's speech must be at 3 P.M.\nIf speeches(Long, Gold) == 3 ::: speeches(Xiao, Rose) == 2 ::: speeches(Yoshida, Rose) == 1 ::: speeches(Zimmerman, Rose) == 3 ::: speeches(Molina, Rose) == 2 ::: speeches(Xiao, Gold) == 2 ::: speeches(Yoshida, Gold) == 1 ::: speeches(Zimmerman, Gold) == 3 ::: Long's speech must be at 3 P.M.\nIf speeches(Long, Gold) == 3 ::: speeches(Xiao, Rose) == 2 ::: speeches(Yoshida, Rose) == 1 ::: speeches(Zimmerman, Rose) == 3 ::: speeches(Molina, Rose) == 2 ::: speeches(Xiao, Gold) == 2 ::: speeches(Yoshida, Gold) == 1 ::: speeches(Zimmerman, Gold) == 3 ::: Long's speech must be at 3 P.M.\nIf speeches(Long, Gold) == 3 ::: speeches(Xiao, Rose) == 2 ::: speeches(Yoshida, Rose) == 1 ::: speeches(Zimmerman, Rose) == 3 ::: speeches(Molina"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_3_14",
    "context": "During the seventeenth century, three families—the Trents, the Williamses, and the Yandells—owned the five buildings that constituted the center of their village—the forge, the granary, the inn, the mill, and the stable. Each family owned at least one of the buildings and each building was owned by exactly one of the families. The historical evidence establishes the following about the ownership of the buildings: The Williamses owned more of the buildings than the Yandells owned. Neither the inn nor the mill belonged to the owner of the forge. Either the Trents owned the stable or the Yandells owned the inn, or both.",
    "question": "Which one of the following could be an accurate matching of each family to the building or buildings it owned?",
    "answer": "A",
    "options": [
      "A) Trents: the granary, the stable Williamses: the inn, the mill Yandells: the forge",
      "B) Trents: the granary, the mill Williamses: the inn, the stable Yandells: the forge",
      "C) Trents: the forge, the mill Williamses: the granary, the stable Yandells: the inn",
      "D) Trents: the forge, the granary Williamses: the mill Yandells: the inn, the stable",
      "E) Trents: the stable Williamses: the inn, the mill Yandells: the forge, the granary"
    ],
    "raw_logic_programs": [
      "# Declarations\nfamilies = EnumSort([Trents, Williamses, Yandells])\nbuildings = EnumSort([forge, granary, inn, mill, stable])\nowns = Function([families, buildings] -> [bool])\n\n# Constraints\nForAll([b:buildings], And(1 <= owns(Trents, b), owns(Trents, b) <= 5)) ::: each family owned at least one of the buildings\nAnd(owns(Williamses, inn), owns(Williamses, mill)) ::: Neither the inn nor the mill belonged to the owner of the forge\nOr(owns(Trents, stable), owns(Yandells, inn)) ::: Either the Trents owned the stable or the Yandells owned the inn, or both\n\n# Options\nQuestion ::: Which one of the following could be an accurate matching of each family to the building or buildings it owned?\nis_sat(ForAll([b:buildings], And(owns(Trents, b) == owns(Williamses, b), owns(Trents, b) == owns(Yandells, b)))) ::: (A)\nis_sat(ForAll([b:buildings], And(owns(Trents, b) == owns(Williamses, b), owns(Trents, b) == owns(Yandells, b), owns(Williamses, b) == owns(Yandells, b)))) ::: (B)\nis_sat(ForAll([b:buildings], And(owns(Trents, b) == owns(Williamses, b), owns(Trents, b) == owns(Yandells, b), owns(Williamses, b) == owns(Yandells, b), owns(Trents, b) == owns(Williamses, b)))) ::: (C)\nis_sat(ForAll([b:buildings], And(owns(Trents, b) == owns(Williamses, b), owns(Trents, b) == owns(Yandells, b), owns(Williamses, b) == owns(Yandells, b), owns(Trents, b) == owns(Williamses, b), owns(Williamses, b) == owns(Yandells, b)))) ::: (D)\nis_sat(ForAll([b:buildings], And(owns(Trents, b) == owns(Williamses, b), owns(Trents, b) == owns(Yandells, b), owns(Williamses, b) == owns(Yandells, b), owns(Trents, b) == owns(Williamses, b), owns(Williamses, b) == owns(Yandells, b), owns(Trents, b) == owns(Williamses, b)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_3_15",
    "context": "During the seventeenth century, three families—the Trents, the Williamses, and the Yandells—owned the five buildings that constituted the center of their village—the forge, the granary, the inn, the mill, and the stable. Each family owned at least one of the buildings and each building was owned by exactly one of the families. The historical evidence establishes the following about the ownership of the buildings: The Williamses owned more of the buildings than the Yandells owned. Neither the inn nor the mill belonged to the owner of the forge. Either the Trents owned the stable or the Yandells owned the inn, or both.",
    "question": "Which one of the following is a pair of buildings that CANNOT both have been owned by the Trents?",
    "answer": "D",
    "options": [
      "A) the forge, the granary",
      "B) the granary, the mill",
      "C) the granary, the stable",
      "D) the inn, the mill",
      "E) the inn, the stable"
    ],
    "raw_logic_programs": [
      "# Declarations\nfamilies = EnumSort([Trents, Williamses, Yandells])\nbuildings = EnumSort([forge, granary, inn, mill, stable])\nowns = Function([families, buildings] -> [bool])\n\n# Constraints\nForAll([b:buildings], And(1 <= owns(Trents, b), owns(Trents, b) <= 5))\nForAll([b:buildings], And(1 <= owns(Williamses, b), owns(Williamses, b) <= 3))\nForAll([b:buildings], And(1 <= owns(Yandells, b), owns(Yandells, b) <= 2))\nForAll([b:buildings], Implies(owns(Trents, b), Not(owns(Williamses, b))))\nForAll([b:buildings], Implies(owns(Trents, b), Not(owns(Yandells, b))))\nForAll([b:buildings], Implies(owns(Williamses, b), Not(owns(Yandells, b))))\nForAll([b:buildings], Implies(owns(Trents, b), owns(Williamses, b)))\nForAll([b:buildings], Implies(owns(Williamses, b), owns(Trents, b)))\nForAll([b:buildings], Implies(owns(Trents, b), owns(Yandells, b)))\nForAll([b:buildings], Implies(owns(Williamses, b), owns(Yandells, b)))\nForAll([b:buildings], Implies(owns(Yandells, b), owns(Trents, b)))\nForAll([b:buildings], Implies(owns(Yandells, b), owns(Williamses, b)))\n\n# Options\nQuestion ::: ::: Which one of the following is a pair of buildings that CANNOT both have been owned by the Trents?\nis_exception(is_sat(owns(Trents, forge) == owns(Trents, stable))) ::: (A)\nis_exception(is_sat(owns(Trents, forge) == owns(Williamses, stable))) ::: (B)\nis_exception(is_sat(owns(Trents, forge) == owns(Yandells, stable))) ::: (C)\nis_exception(is_sat(owns(Trents, forge) == owns(Trents, mill))) ::: (D)\nis_exception(is_sat(owns(Trents, forge) == owns(Trents, inn))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_3_16",
    "context": "During the seventeenth century, three families—the Trents, the Williamses, and the Yandells—owned the five buildings that constituted the center of their village—the forge, the granary, the inn, the mill, and the stable. Each family owned at least one of the buildings and each building was owned by exactly one of the families. The historical evidence establishes the following about the ownership of the buildings: The Williamses owned more of the buildings than the Yandells owned. Neither the inn nor the mill belonged to the owner of the forge. Either the Trents owned the stable or the Yandells owned the inn, or both.",
    "question": "If the Yandells owned the mill, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) The Trents owned the forge.",
      "B) The Trents owned the inn.",
      "C) The Williamses owned the forge.",
      "D) The Williamses owned the granary.",
      "E) The Williamses owned the inn."
    ],
    "raw_logic_programs": [
      "# Declarations\nfamilies = EnumSort([Trents, Williamses, Yandells])\nbuildings = EnumSort([forge, granary, inn, mill, stable])\nowns = Function([families, buildings] -> [bool])\n\n# Constraints\nForAll([b:buildings], And(1 <= owns(families, b), owns(families, b) <= 5)) ::: each building was owned by exactly one of the families\nAnd(owns(Williamses, forge), owns(Williamses, mill) == owns(Trents, stable)) ::: Neither the inn nor the mill belonged to the owner of the forge\nOr(owns(Trents, stable), owns(Yandells, inn)) ::: Either the Trents owned the stable or the Yandells owned the inn, or both\n\n# Options\nQuestion ::: If the Yandells owned the mill, which one of the following must be true?\nis_sat(ForAll([b:buildings], owns(Williamses, b) == owns(Trents, stable))) ::: (A)\nis_sat(ForAll([b:buildings], owns(Trents, b) == owns(Williamses, stable))) ::: (B)\nis_sat(ForAll([b:buildings], owns(Williamses, b) == owns(Trents, stable))) ::: (C)\nis_sat(ForAll([b:buildings], owns(Williamses, b) == owns(Yandells, stable))) ::: (D)\nis_sat(ForAll([b:buildings], owns(Yandells, b) == owns(Trents, stable))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_3_17",
    "context": "During the seventeenth century, three families—the Trents, the Williamses, and the Yandells—owned the five buildings that constituted the center of their village—the forge, the granary, the inn, the mill, and the stable. Each family owned at least one of the buildings and each building was owned by exactly one of the families. The historical evidence establishes the following about the ownership of the buildings: The Williamses owned more of the buildings than the Yandells owned. Neither the inn nor the mill belonged to the owner of the forge. Either the Trents owned the stable or the Yandells owned the inn, or both.",
    "question": "If one of the families owned both the granary and the inn, which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) The Trents owned the granary.",
      "B) The Trents owned the mill.",
      "C) The Williamses owned the forge.",
      "D) The Williamses owned the stable.",
      "E) The Yandells owned the inn."
    ],
    "raw_logic_programs": [
      "# Declarations\nfamilies = EnumSort([Trents, Williamses, Yandells])\nbuildings = EnumSort([forge, granary, inn, mill, stable])\nowns = Function([families, buildings] -> [bool])\n\n# Constraints\nForAll([b:buildings], And(1 <= owns(families, b), owns(families, b) <= 5)) ::: each building was owned by exactly one of the families\nAnd(owns(Williamses, forge), owns(Williamses, mill)) ::: Neither the inn nor the mill belonged to the owner of the forge\nOr(owns(Trents, stable), owns(Yandells, inn)) ::: Either the Trents owned the stable or the Yandells owned the inn, or both\n\n# Options\nQuestion ::: If one of the families owned both the granary and the inn, which one of the following could be true?\nis_sat(ForAll([b:buildings], owns(Trents, b) == owns(Williamses, b))) ::: (A)\nis_sat(ForAll([b:buildings], owns(Trents, b) == owns(Yandells, b))) ::: (B)\nis_sat(ForAll([b:buildings], owns(Williamses, b) == owns(Trents, b))) ::: (C)\nis_sat(ForAll([b:buildings], owns(Williamses, b) == owns(Yandells, b))) ::: (D)\nis_sat(ForAll([b:buildings], owns(Yandells, b) == owns(Trents, b))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_3_18",
    "context": "During the seventeenth century, three families—the Trents, the Williamses, and the Yandells—owned the five buildings that constituted the center of their village—the forge, the granary, the inn, the mill, and the stable. Each family owned at least one of the buildings and each building was owned by exactly one of the families. The historical evidence establishes the following about the ownership of the buildings: The Williamses owned more of the buildings than the Yandells owned. Neither the inn nor the mill belonged to the owner of the forge. Either the Trents owned the stable or the Yandells owned the inn, or both.",
    "question": "If the Trents owned exactly one of the buildings, which one of the following is a complete and accurate list of the buildings any one of which could be the building that the Trents owned?",
    "answer": "E",
    "options": [
      "A) the forge",
      "B) the forge, the mill",
      "C) the inn, the stable",
      "D) the forge, the granary, the mill",
      "E) the forge, the mill, the stable"
    ],
    "raw_logic_programs": [
      "# Declarations\nfamilies = EnumSort([Trents, Williamses, Yandells])\nbuildings = EnumSort([forge, granary, inn, mill, stable])\nowns = Function([families, buildings] -> [bool])\n\n# Constraints\nForAll([b:buildings], And(1 <= owns(Trents, b), owns(Trents, b) <= 5))\nForAll([b:buildings], And(1 <= owns(Williamses, b), owns(Williamses, b) <= 3))\nForAll([b:buildings], And(1 <= owns(Yandells, b), owns(Yandells, b) <= 2))\nForAll([b:buildings], Implies(owns(Trents, b), Not(owns(Williamses, b))))\nForAll([b:buildings], Implies(owns(Trents, b), Not(owns(Yandells, b))))\nForAll([b:buildings], Implies(owns(Williamses, b), Not(owns(Yandells, b))))\nForAll([b:buildings], Implies(owns(Trents, b), owns(Williamses, b)))\nForAll([b:buildings], Implies(owns(Williamses, b), owns(Trents, b)))\nForAll([b:buildings], Implies(owns(Trents, b), owns(Yandells, b)))\nForAll([b:buildings], Implies(owns(Williamses, b), owns(Yandells, b)))\nForAll([b:buildings], Implies(owns(Yandells, b), owns(Trents, b)))\nForAll([b:buildings], Implies(owns(Yandells, b), owns(Williamses, b)))\n\n# Options\nQuestion ::: ::: If the Trents owned exactly one of the buildings, which one of the following is a complete and accurate list of the buildings any one of which could be the building that the Trents owned?\nis_exception(is_sat(owns(Trents, forge))) ::: (A)\nis_exception(is_sat(owns(Trents, forge, mill))) ::: (B)\nis_exception(is_sat(owns(Trents, inn, stable))) ::: (C)\nis_exception(is_sat(owns(Trents, forge, granary, mill, stable))) ::: (D)\nis_exception(is_sat(owns(Trents, forge, mill, stable))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_4_19",
    "context": "A florist is filling a customer's order for three bouquets—bouquet 1, bouquet 2, and bouquet 3. Each of the bouquets is to be composed of one or more of five kinds of flowers—lilies, peonies, roses, snapdragons, and tulips—subject to the following conditions: Bouquets 1 and 3 cannot have any kind of flower in common. Bouquets 2 and 3 must have exactly two kinds of flowers in common. Bouquet 3 must have snapdragons. If a bouquet has lilies, that bouquet must also have roses but cannot have snapdragons. If a bouquet has tulips, that bouquet must also have peonies.",
    "question": "Which one of the following could be a complete and accurate list of the kinds of flowers in each of the bouquets?",
    "answer": "A",
    "options": [
      "A) bouquet 1: lilies, roses bouquet 2: peonies, roses, tulips bouquet 3: peonies, snapdragons, tulips",
      "B) bouquet 1: peonies, roses bouquet 2: peonies, snapdragons bouquet 3: peonies, snapdragons, tulips",
      "C) bouquet 1: peonies, tulips bouquet 2: roses, snapdragons, tulips bouquet 3: roses, snapdragons",
      "D) bouquet 1: roses bouquet 2: peonies, snapdragons bouquet 3: lilies, peonies, snapdragons",
      "E) bouquet 1: snapdragons bouquet 2: lilies, roses bouquet 3: lilies, roses"
    ],
    "raw_logic_programs": [
      "# Declarations\nbouquets = EnumSort([bouquet_1, bouquet_2, bouquet_3])\nflowers = EnumSort([lilies, peonies, roses, snapdragons, tulips])\n\n# Constraints\nForAll([b:bouquets], And(1 <= Count([f:flowers] -> bouquet_1 == f), Count([f:flowers] -> bouquet_1 == f) <= 3)) ::: each of the bouquets is to be composed of one or more of five kinds of flowers\nAnd(Count([f:flowers] -> bouquet_1 == f) == 1, Count([f:flowers] -> bouquet_2 == f) == 1) ::: Bouquets 1 and 3 cannot have any kind of flower in common\nAnd(Count([f:flowers] -> bouquet_2 == f) == 2, Count([f:flowers] -> bouquet_3 == f) == 2) ::: Bouquets 2 and 3 must have exactly two kinds of flowers in common\nAnd(Count([f:flowers] -> bouquet_3 == f) == 1, bouquet_3 == snapdragons) ::: Bouquet 3 must have snapdragons\nAnd(Count([f:flowers] -> bouquet_1 == f) == 1, Count([f:flowers] -> bouquet_1 == f) == 1, bouquet_1 == roses) ::: If a bouquet has lilies, that bouquet must also have roses but cannot have snapdragons\nAnd(Count([f:flowers] -> bouquet_1 == f) == 1, Count([f:flowers] -> bouquet_1 == f) == 1, bouquet_1 == tulips) ::: If a bouquet has tulips, that bouquet must also have peonies\n\n# Options\nQuestion ::: ::: Which one of the following could be a complete and accurate list of the kinds of flowers in each of the bouquets?\nis_sat(ForAll([b:bouquets], bouquet_1 == flowers(lilies))) ::: (A)\nis_sat(ForAll([b:bouquets], bouquet_1 == flowers(peonies))) ::: (B)\nis_sat(ForAll([b:bouquets], bouquet_1 == flowers(roses))) ::: (C)\nis_sat(ForAll([b:bouquets], bouquet_1 == flowers(snapdragons))) ::: (D)\nis_sat(ForAll([b:bouquets], bouquet_1 == flowers(tulips))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_4_20",
    "context": "A florist is filling a customer's order for three bouquets—bouquet 1, bouquet 2, and bouquet 3. Each of the bouquets is to be composed of one or more of five kinds of flowers—lilies, peonies, roses, snapdragons, and tulips—subject to the following conditions: Bouquets 1 and 3 cannot have any kind of flower in common. Bouquets 2 and 3 must have exactly two kinds of flowers in common. Bouquet 3 must have snapdragons. If a bouquet has lilies, that bouquet must also have roses but cannot have snapdragons. If a bouquet has tulips, that bouquet must also have peonies.",
    "question": "If lilies are in bouquet 1, which one of the following must",
    "answer": "B",
    "options": [
      "A) Lilies are in bouquet 2.",
      "B) Peonies are in bouquet 3.",
      "C) Roses are in bouquet 2.",
      "D) Tulips are in bouquet 2.",
      "E) Tulips are in bouquet 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nbouquets = EnumSort([bouquet_1, bouquet_2, bouquet_3])\nflowers = EnumSort([lilies, peonies, roses, snapdragons, tulips])\nbouquet_flowers = Function([bouquets] -> [flowers])\n\n# Constraints\nForAll([b:bouquets], And(bouquet_flowers(b) == [flowers])) ::: each bouquet is composed of one or more of five kinds of flowers\nAnd(bouquet_flowers(bouquet_1) == [lilies, roses], bouquet_flowers(bouquet_2) == [peonies, roses], bouquet_flowers(bouquet_3) == [snapdragons, tulips]) ::: Bouquets 1 and 3 cannot have any kind of flower in common\nAnd(bouquet_flowers(bouquet_2) == [peonies, roses], bouquet_flowers(bouquet_3) == [snapdragons, tulips]) ::: Bouquets 2 and 3 must have exactly two kinds of flowers in common\nbouquet_flowers(bouquet_3) == [snapdragons] ::: Bouquet 3 must have snapdragons\nbouquet_flowers(bouquet_1) == [lilies, roses] ::: If a bouquet has lilies, that bouquet must also have roses but cannot have snapdragons\nbouquet_flowers(bouquet_2) == [peonies] ::: If a bouquet has tulips, that bouquet must also have peonies\n\n# Options\nQuestion ::: ::: If lilies are in bouquet 1, which one of the following must\nis_exception(is_sat(bouquet_flowers(bouquet_1) == [lilies, roses])) ::: (A)\nis_exception(is_sat(bouquet_flowers(bouquet_2) == [peonies, roses])) ::: (B)\nis_exception(is_sat(bouquet_flowers(bouquet_3) == [snapdragons, tulips])) ::: (C)\nis_exception(is_sat(bouquet_flowers(bouquet_2) == [peonies, roses])) ::: (D)\nis_exception(is_sat(bouquet_flowers(bouquet_3) == [snapdragons, tulips])) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_4_21",
    "context": "A florist is filling a customer's order for three bouquets—bouquet 1, bouquet 2, and bouquet 3. Each of the bouquets is to be composed of one or more of five kinds of flowers—lilies, peonies, roses, snapdragons, and tulips—subject to the following conditions: Bouquets 1 and 3 cannot have any kind of flower in common. Bouquets 2 and 3 must have exactly two kinds of flowers in common. Bouquet 3 must have snapdragons. If a bouquet has lilies, that bouquet must also have roses but cannot have snapdragons. If a bouquet has tulips, that bouquet must also have peonies.",
    "question": "If tulips are in bouquet 1, which one of the following could be a complete and accurate list of the kinds of flowers in bouquet 2?",
    "answer": "E",
    "options": [
      "A) peonies, tulips",
      "B) peonies, snapdragons",
      "C) peonies, snapdragons, tulips",
      "D) peonies, roses, tulips",
      "E) peonies, roses, snapdragons, tulips"
    ],
    "raw_logic_programs": [
      "# Declarations\nbouquets = EnumSort([bouquet_1, bouquet_2, bouquet_3])\nflowers = EnumSort([lilies, peonies, roses, snapdragons, tulips])\nbouquet_flowers = Function([bouquets] -> [flowers])\n\n# Constraints\nForAll([b:bouquets], bouquet_flowers(b)!= bouquet_flowers(b + 1)) ::: Bouquets 1 and 3 cannot have any kind of flower in common\nForAll([b:bouquets], bouquet_flowers(b + 1) == bouquet_flowers(b + 2)) ::: Bouquets 2 and 3 must have exactly two kinds of flowers in common\nForAll([b:bouquets], bouquet_flowers(b + 2) == snapdragons) ::: Bouquet 3 must have snapdragons\nForAll([b:bouquets], bouquet_flowers(b) == roses) ::: If a bouquet has lilies, that bouquet must also have roses but cannot have snapdragons\nForAll([b:bouquets], bouquet_flowers(b) == tulips) ::: If a bouquet has tulips, that bouquet must also have peonies\n\n# Options\nQuestion ::: If tulips are in bouquet 1, which one of the following could be a complete and accurate list of the kinds of flowers in bouquet 2?\nis_valid(Exists([b:bouquets], bouquet_flowers(b) == peonies)) ::: (A)\nis_valid(Exists([b:bouquets], bouquet_flowers(b) == peonies, bouquet_flowers(b) == snapdragons)) ::: (B)\nis_valid(Exists([b:bouquets], bouquet_flowers(b) == peonies, bouquet_flowers(b) == roses, bouquet_flowers(b) == snapdragons)) ::: (C)\nis_valid(Exists([b:bouquets], bouquet_flowers(b) == peonies, bouquet_flowers(b) == roses, bouquet_flowers(b) == tulips)) ::: (D)\nis_valid(Exists([b:bouquets], bouquet_flowers(b) == peonies, bouquet_flowers(b) == roses, bouquet_flowers(b) == snapdragons, bouquet_flowers(b) == tulips)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_4_22",
    "context": "A florist is filling a customer's order for three bouquets—bouquet 1, bouquet 2, and bouquet 3. Each of the bouquets is to be composed of one or more of five kinds of flowers—lilies, peonies, roses, snapdragons, and tulips—subject to the following conditions: Bouquets 1 and 3 cannot have any kind of flower in common. Bouquets 2 and 3 must have exactly two kinds of flowers in common. Bouquet 3 must have snapdragons. If a bouquet has lilies, that bouquet must also have roses but cannot have snapdragons. If a bouquet has tulips, that bouquet must also have peonies.",
    "question": "Which one of the following CANNOT be a complete and accurate list of the kinds of flowers in bouquet 2?",
    "answer": "A",
    "options": [
      "A) lilies, roses",
      "B) peonies, tulips",
      "C) peonies, roses, snapdragons",
      "D) peonies, roses, tulips",
      "E) peonies, roses, snapdragons, tulips"
    ],
    "raw_logic_programs": [
      "# Declarations\nbouquets = EnumSort([bouquet_1, bouquet_2, bouquet_3])\nflowers = EnumSort([lilies, peonies, roses, snapdragons, tulips])\nbouquet_flowers = Function([bouquets] -> [flowers])\n\n# Constraints\nForAll([b:bouquets], bouquet_flowers(b)!= bouquet_flowers(b + 1)) ::: Bouquets 1 and 3 cannot have any kind of flower in common\nForAll([b:bouquets], bouquet_flowers(b)!= bouquet_flowers(b + 2)) ::: Bouquets 2 and 3 must have exactly two kinds of flowers in common\nForAll([b:bouquets], bouquet_flowers(b) == bouquet_flowers(b + 3)) ::: Bouquet 3 must have snapdragons\nForAll([b:bouquets], bouquet_flowers(b) == bouquet_flowers(b + 1) | bouquet_flowers(b) == bouquet_flowers(b + 2)) ::: If a bouquet has lilies, that bouquet must also have roses but cannot have snapdragons\nForAll([b:bouquets], bouquet_flowers(b) == bouquet_flowers(b + 2) | bouquet_flowers(b) == bouquet_flowers(b + 3)) ::: If a bouquet has tulips, that bouquet must also have peonies\n\n# Options\nQuestion ::: ::: Which one of the following CANNOT be a complete and accurate list of the kinds of flowers in bouquet 2?\nis_exception(is_sat(bouquet_flowers(bouquet_2) == [lilies, roses])) ::: (A)\nis_exception(is_sat(bouquet_flowers(bouquet_2) == [peonies, tulips])) ::: (B)\nis_exception(is_sat(bouquet_flowers(bouquet_2) == [peonies, roses, snapdragons])) ::: (C)\nis_exception(is_sat(bouquet_flowers(bouquet_2) == [peonies, roses, tulips])) ::: (D)\nis_exception(is_sat(bouquet_flowers(bouquet_2) == [peonies, roses, snapdragons, tulips])) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201409_3-G_4_23",
    "context": "A florist is filling a customer's order for three bouquets—bouquet 1, bouquet 2, and bouquet 3. Each of the bouquets is to be composed of one or more of five kinds of flowers—lilies, peonies, roses, snapdragons, and tulips—subject to the following conditions: Bouquets 1 and 3 cannot have any kind of flower in common. Bouquets 2 and 3 must have exactly two kinds of flowers in common. Bouquet 3 must have snapdragons. If a bouquet has lilies, that bouquet must also have roses but cannot have snapdragons. If a bouquet has tulips, that bouquet must also have peonies.",
    "question": "Which one of the following CANNOT be true?",
    "answer": "C",
    "options": [
      "A) Lilies and roses are the only kinds of flowers in bouquet 1.",
      "B) Peonies and tulips are the only kinds of flowers in bouquet 1.",
      "C) Lilies, peonies, and roses are the only kinds of flowers in bouquet 2.",
      "D) Peonies, roses, and snapdragons are the only kinds of flowers in bouquet 2.",
      "E) Peonies, snapdragons, and tulips are the only kinds of flowers in bouquet 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nbouquets = EnumSort([bouquet_1, bouquet_2, bouquet_3])\nflowers = EnumSort([lilies, peonies, roses, snapdragons, tulips])\nbouquet_flowers = Function([bouquets] -> [flowers])\n\n# Constraints\nForAll([b:bouquets], bouquet_flowers(b) == []) ::: bouquet 1 and bouquet 3 cannot have any kind of flower in common\nForAll([b:bouquets], bouquet_flowers(b) == []) ::: bouquet 2 and bouquet 3 must have exactly two kinds of flowers in common\nForAll([b:bouquets], bouquet_flowers(b) == []) ::: bouquet 3 must have snapdragons\nForAll([b:bouquets], bouquet_flowers(b) == []) ::: If a bouquet has lilies, that bouquet must also have roses but cannot have snapdragons\nForAll([b:bouquets], bouquet_flowers(b) == []) ::: If a bouquet has tulips, that bouquet must also have peonies\n\n# Options\nQuestion ::: ::: Which one of the following CANNOT be true?\nis_exception(is_sat(bouquet_flowers(bouquet_1) == [lilies, roses])) ::: (A)\nis_exception(is_sat(bouquet_flowers(bouquet_1) == [peonies, roses])) ::: (B)\nis_exception(is_sat(bouquet_flowers(bouquet_2) == [lilies, peonies, roses])) ::: (C)\nis_exception(is_sat(bouquet_flowers(bouquet_2) == [peonies, roses, snapdragons])) ::: (D)\nis_exception(is_sat(bouquet_flowers(bouquet_3) == [peonies, snapdragons, tulips])) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_1_1",
    "context": "A corporation's Human Resources department must determine annual bonuses for seven employees—Kimura, Lopez, Meng, and Peterson, who work in the Finance department; and Vaughan, Xavier, and Zane, who work in the Graphics department. Each employee will receive either a $1,000 bonus, a $3,000 bonus, or a $5,000 bonus, in accordance with the following: No one in the Graphics department receives a $1,000 bonus. Any employee who was rated Highly Effective receives a larger bonus than anyone in his or her department who was not rated Highly Effective. Only Lopez, Meng, and Xavier were rated Highly Effective.",
    "question": "Which one of the following is an allowable distribution of bonuses to the seven employees?",
    "answer": "C",
    "options": [
      "A) [Finance] Kimura: $1,000; Lopez: $5,000; Meng: $5,000; Peterson: $1,000 [Graphics] Vaughan: $3,000; Xavier: $3,000; Zane: $3,000",
      "B) [Finance] Kimura: $1,000; Lopez: $5,000; Meng: $5,000; Peterson: $3,000 [Graphics] Vaughan: $3,000; Xavier: $5,000; Zane: $1,000",
      "C) [Finance] Kimura: $1,000; Lopez: $5,000; Meng: $5,000; Peterson: $3,000 [Graphics] Vaughan: $3,000; Xavier: $5,000; Zane: $3,000",
      "D) [Finance] Kimura: $3,000; Lopez: $5,000; Meng: $3,000; Peterson: $1,000 [Graphics] Vaughan: $3,000; Xavier: $5,000; Zane: $3,000",
      "E) [Finance] Kimura: $3,000; Lopez: $5,000; Meng: $5,000; Peterson: $1,000 [Graphics] Vaughan: $1,000; Xavier: $5,000; Zane: $3,000"
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Kimura, Lopez, Meng, Peterson, Vaughan, Xavier, Zane])\nbonuses = EnumSort([$1000, $3000, $5000])\n\n# Constraints\nForAll([e:employees], And(e.bonus == $1000, Not(e.department == Graphics))) ::: No one in the Graphics department receives a $1000 bonus\nForAll([e:employees], And(e.bonus == $3000, e.department == Finance)) ::: Any employee who was rated Highly Effective receives a larger bonus than anyone in his or her department who was not rated Highly Effective\nForAll([e:employees], And(e.bonus == $5000, e.department == Graphics)) ::: Lopez, Meng, and Xavier were rated Highly Effective\n\n# Options\nQuestion ::: ::: Which one of the following is an allowable distribution of bonuses to the seven employees?\nis_sat(ForAll([e:employees], And(e.bonus == $1000, e.department == Finance))) ::: (A)\nis_sat(ForAll([e:employees], And(e.bonus == $3000, e.department == Finance))) ::: (B)\nis_sat(ForAll([e:employees], And(e.bonus == $5000, e.department == Graphics))) ::: (C)\nis_sat(ForAll([e:employees], And(e.bonus == $3000, e.department == Graphics))) ::: (D)\nis_sat(ForAll([e:employees], And(e.bonus == $1000, e.department == Graphics))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_1_2",
    "context": "A corporation's Human Resources department must determine annual bonuses for seven employees—Kimura, Lopez, Meng, and Peterson, who work in the Finance department; and Vaughan, Xavier, and Zane, who work in the Graphics department. Each employee will receive either a $1,000 bonus, a $3,000 bonus, or a $5,000 bonus, in accordance with the following: No one in the Graphics department receives a $1,000 bonus. Any employee who was rated Highly Effective receives a larger bonus than anyone in his or her department who was not rated Highly Effective. Only Lopez, Meng, and Xavier were rated Highly Effective.",
    "question": "If Lopez does not receive the same bonus as Meng, which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Kimura receives a $3,000 bonus.",
      "B) Lopez receives a $3,000 bonus.",
      "C) Peterson receives a $3,000 bonus.",
      "D) Kimura receives the same bonus as Vaughan.",
      "E) Peterson receives a larger bonus than Kimura."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Kimura, Lopez, Meng, Peterson, Vaughan, Xavier, Zane])\nbonuses = EnumSort([$1000, $3000, $5000])\nbonus_types = EnumSort([$1000, $3000, $5000])\nbonus_types_highly_effective = EnumSort([$1000, $3000, $5000])\nbonus_types_highly_effective_not_highly_effective = EnumSort([$1000, $3000, $5000])\nbonus_types_highly_effective_highly_effective = EnumSort([$1000, $3000, $5000])\n\n# Constraints\nForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: each employee will receive either a $1,000 bonus, a $3,000 bonus, or a $5,000 bonus\nForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: no one in the Graphics department receives a $1,000 bonus\nForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: Any employee who was rated Highly Effective receives a larger bonus than anyone in his or her department who was not rated Highly Effective\nForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: Lopez, Meng, and Xavier were rated Highly Effective\nForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: No employee receives a $1,000 bonus\nForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: Kimura receives a $3,000 bonus\nForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: Lopez receives a $3,000 bonus\nForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: Peterson receives a $3,000 bonus\nForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: Kimura receives the same bonus as Vaughan\nForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: Peterson receives a larger bonus than Kimura\n\n# Options\nQuestion ::: ::: If Lopez does not receive the same bonus as Meng, which one of the following could be true?\nis_exception(is_sat(ForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: Lopez receives a $3,000 bonus))) ::: (A)\nis_exception(is_sat(ForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: Kimura receives a $3,000 bonus))) ::: (B)\nis_exception(is_sat(ForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: Peterson receives a $3,000 bonus))) ::: (C)\nis_exception(is_sat(ForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: Kimura receives the same bonus as Vaughan))) ::: (D)\nis_exception(is_sat(ForAll([b:bonus_types], And(1 <= b, b <= 3)) ::: Peterson receives a larger bonus than Kimura))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_1_3",
    "context": "A corporation's Human Resources department must determine annual bonuses for seven employees—Kimura, Lopez, Meng, and Peterson, who work in the Finance department; and Vaughan, Xavier, and Zane, who work in the Graphics department. Each employee will receive either a $1,000 bonus, a $3,000 bonus, or a $5,000 bonus, in accordance with the following: No one in the Graphics department receives a $1,000 bonus. Any employee who was rated Highly Effective receives a larger bonus than anyone in his or her department who was not rated Highly Effective. Only Lopez, Meng, and Xavier were rated Highly Effective.",
    "question": "If only one of the employees receives a $1,000 bonus, which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Meng receives a $5,000 bonus.",
      "B) Peterson receives a $3,000 bonus.",
      "C) Meng receives a $3,000 bonus.",
      "D) The employee who receives a $1,000 bonus is Peterson.",
      "E) The employee who receives a $1,000 bonus is Kimura."
    ],
    "raw_logic_programs": [
      ".\n# Declarations\nemployees = EnumSort([Kimura, Lopez, Meng, Peterson, Vaughan, Xavier, Zane])\nbonuses = EnumSort([$1000, $3000, $5000])\nbonus_ratings = Function([employees] -> [bool])\n\n# Constraints\nForAll([e:employees], And(1 <= bonus_ratings(e), bonus_ratings(e) <= 3)) ::: each employee will receive either a $1,000 bonus, a $3,000 bonus, or a $5,000 bonus\nAnd(bonus_ratings(Lopez), bonus_ratings(Meng), bonus_ratings(Xavier)) ::: Any employee who was rated Highly Effective receives a larger bonus than anyone in his or her department who was not rated Highly Effective\nForAll([e:employees], Implies(bonus_ratings(e) == 1, bonus_ratings(e) == bonus_ratings(Lopez))) ::: No one in the Graphics department receives a $1,000 bonus\nForAll([e:employees], Implies(bonus_ratings(e) == 2, bonus_ratings(e) == bonus_ratings(Meng))) ::: Only Lopez, Meng, and Xavier were rated Highly Effective\n\n# Options\nQuestion ::: If only one of the employees receives a $1,000 bonus, which one of the following must be true?\nis_exception(is_sat(bonus_ratings(Kimura) == 1)) ::: (A)\nis_exception(is_sat(bonus_ratings(Peterson) == 1)) ::: (B)\nis_exception(is_sat(bonus_ratings(Meng) == 1)) ::: (C)\nis_exception(is_sat(bonus_ratings(Kimura) == 2)) ::: (D)\nis_exception(is_sat(bonus_ratings(Peterson) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_1_4",
    "context": "A corporation's Human Resources department must determine annual bonuses for seven employees—Kimura, Lopez, Meng, and Peterson, who work in the Finance department; and Vaughan, Xavier, and Zane, who work in the Graphics department. Each employee will receive either a $1,000 bonus, a $3,000 bonus, or a $5,000 bonus, in accordance with the following: No one in the Graphics department receives a $1,000 bonus. Any employee who was rated Highly Effective receives a larger bonus than anyone in his or her department who was not rated Highly Effective. Only Lopez, Meng, and Xavier were rated Highly Effective.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) At least one of the employees receives a $1,000 bonus.",
      "B) At least three of the employees receives a $3,000 bonuses.",
      "C) At most three of the employees receives a $3,000 bonuses.",
      "D) At least two of the employees receives a $5,000 bonuses.",
      "E) At most three of the employees receives a $5,000 bonuses."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Kimura, Lopez, Meng, Peterson, Vaughan, Xavier, Zane])\nbonuses = EnumSort([$1000, $3000, $5000])\nbonus_amounts = Function([employees] -> [bonuses])\n\n# Constraints\nForAll([b:bonuses], And(1 <= bonus_amounts(employees) <= 3, bonus_amounts(employees) == b)) ::: each employee will receive either a $1,000 bonus, a $3,000 bonus, or a $5,000 bonus\nAnd(Not(bonus_amounts(Lopez) == $1000), bonus_amounts(Lopez) > bonus_amounts(Meng)) ::: Any employee who was rated Highly Effective receives a larger bonus than anyone in his or her department who was not rated Highly Effective\nForAll([e:employees], Or(e == Lopez, e == Meng, e == Xavier)) ::: Only Lopez, Meng, and Xavier were rated Highly Effective\n\n# Options\nQuestion ::: ::: Which one of the following must be true?\nis_sat(ForAll([b:bonuses], And(b == $1000, bonus_amounts(Kimura) == b))) ::: (A)\nis_sat(ForAll([b:bonuses], And(b == $3000, bonus_amounts(Lopez) == b))) ::: (B)\nis_sat(ForAll([b:bonuses], And(b == $3000, bonus_amounts(Meng) == b))) ::: (C)\nis_sat(ForAll([b:bonuses], And(b == $3000, bonus_amounts(Peterson) == b))) ::: (D)\nis_sat(ForAll([b:bonuses], And(b == $5000, bonus_amounts(Vaughan) == b))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_1_5",
    "context": "A corporation's Human Resources department must determine annual bonuses for seven employees—Kimura, Lopez, Meng, and Peterson, who work in the Finance department; and Vaughan, Xavier, and Zane, who work in the Graphics department. Each employee will receive either a $1,000 bonus, a $3,000 bonus, or a $5,000 bonus, in accordance with the following: No one in the Graphics department receives a $1,000 bonus. Any employee who was rated Highly Effective receives a larger bonus than anyone in his or her department who was not rated Highly Effective. Only Lopez, Meng, and Xavier were rated Highly Effective.",
    "question": "If exactly two of the employees receive $5,000 bonuses, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Lopez receives a $3,000 bonus.",
      "B) Meng receives a $3,000 bonus.",
      "C) Meng is one of the employees who receives a $5,000 bonus.",
      "D) Peterson receives a $1,000 bonus.",
      "E) Peterson receives a $3,000 bonus."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Kimura, Lopez, Meng, Peterson, Vaughan, Xavier, Zane])\nbonuses = EnumSort([$1000, $3000, $5000])\nbonus_amounts = Function([employees] -> [bonuses])\n\n# Constraints\nForAll([e:employees], And(1 <= bonus_amounts(e) <= 3, bonus_amounts(e) == bonus_amounts(e + 1))) ::: each employee will receive either a $1,000 bonus, a $3,000 bonus, or a $5,000 bonus\nAnd(bonus_amounts(Lopez) == $3000, bonus_amounts(Meng) == $3000) ::: Any employee who was rated Highly Effective receives a larger bonus than anyone in his or her department who was not rated Highly Effective\nCount([e:employees], And(Not(bonus_amounts(e) == $1000), Not(bonus_amounts(e) == $3000), Not(bonus_amounts(e) == $5000))) == 2 ::: No one in the Graphics department receives a $1,000 bonus\n\n# Options\nQuestion ::: If exactly two of the employees receive $5,000 bonuses, which one of the following must be true?\nis_exception(is_sat(And(Lopez == $3000, Meng == $3000))) ::: (A)\nis_exception(is_sat(And(Lopez == $3000, Meng == $5000))) ::: (B)\nis_exception(is_sat(And(Lopez == $5000, Meng == $3000))) ::: (C)\nis_exception(is_sat(And(Peterson == $1000, Peterson == $3000))) ::: (D)\nis_exception(is_sat(And(Peterson == $3000, Peterson == $5000))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_1_6",
    "context": "A corporation's Human Resources department must determine annual bonuses for seven employees—Kimura, Lopez, Meng, and Peterson, who work in the Finance department; and Vaughan, Xavier, and Zane, who work in the Graphics department. Each employee will receive either a $1,000 bonus, a $3,000 bonus, or a $5,000 bonus, in accordance with the following: No one in the Graphics department receives a $1,000 bonus. Any employee who was rated Highly Effective receives a larger bonus than anyone in his or her department who was not rated Highly Effective. Only Lopez, Meng, and Xavier were rated Highly Effective.",
    "question": "Any of the following could be true of the seven employees EXCEPT:",
    "answer": "B",
    "options": [
      "A) The same number receive $1,000 bonuses as receive $3,000 bonuses.",
      "B) More receive $1,000 bonuses than receive $3,000 bonuses.",
      "C) The same number receive $1,000 bonuses as receive $5,000 bonuses.",
      "D) More receive $1,000 bonuses than receive $5,000 bonuses.",
      "E) More receive $3,000 bonuses than receive $5,000 bonuses."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Kimura, Lopez, Meng, Peterson, Vaughan, Xavier, Zane])\nbonuses = EnumSort([$1000, $3000, $5000])\nbonus_receivers = Function([employees, bonuses] -> [bool])\n\n# Constraints\nForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 7)) ::: no one receives a $1,000 bonus\nForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 3)) ::: no one receives a $3,000 bonus\nForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)) ::: no one receives a $5,000 bonus\nForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)) ::: no one receives a $1,000 bonus\nForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)) ::: no one receives a $3,000 bonus\nForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)) ::: no one receives a $5,000 bonus\nForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)) ::: no one receives a $3,000 bonus\nForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)) ::: no one receives a $5,000 bonus\n\n# Options\nQuestion ::: Any of the following could be true of the seven employees EXCEPT:\nis_exception(is_sat(ForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)))) ::: (A)\nis_exception(is_sat(ForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 3)))) ::: (B)\nis_exception(is_sat(ForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)))) ::: (C)\nis_exception(is_sat(ForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)))) ::: (D)\nis_exception(is_sat(ForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)))) ::: (E)\nis_exception(is_sat(ForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)))) ::: (F)\nis_exception(is_sat(ForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)))) ::: (G)\nis_exception(is_sat(ForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)))) ::: (H)\nis_exception(is_sat(ForAll([b:bonuses], And(1 <= bonus_receivers(employees, b), bonus_receivers(employees, b) <= 2)))) ::: (I)\nis_exception(is_sat(ForAll([b:bonuses],"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_2_7",
    "context": "A landscaper will plant exactly seven trees today—a hickory, a larch, a maple, an oak, a plum, a sycamore, and a walnut. Each tree must be planted on exactly one of three lots—1, 2, or 3—in conformity with the following requirements: The trees planted on one lot are the hickory, the oak, and exactly one other tree. The maple is not planted on the same lot as the walnut. Either the larch or the walnut, but not both, is planted on lot 1. Either the maple or the oak, but not both, is planted on lot 2. More trees are planted on lot 3 than on lot 1.",
    "question": "Which one of the following could be the list of the trees that the landscaper plants on each of the lots today?",
    "answer": "D",
    "options": [
      "A) lot 1: the larch, the maple lot 2: the hickory, the oak lot 3: the plum, the sycamore, the walnut",
      "B) lot 1: the larch, the maple lot 2: the hickory, the oak, the walnut lot 3: the plum, the sycamore",
      "C) lot 1: the maple lot 2: the hickory, the larch, the oak lot 3: the plum, the sycamore, the walnut",
      "D) lot 1: the sycamore, the walnut lot 2: the larch, the maple lot 3: the hickory, the oak, the plum",
      "E) lot 1: the walnut lot 2: the plum, the sycamore lot 3: the hickory, the maple, the oak"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrees = EnumSort([hickory, larch, maple, oak, plum, sycamore, walnut])\nlots = EnumSort([1, 2, 3])\nplanted = Function([trees, lots] -> [bool])\n\n# Constraints\nForAll([t:trees], And(1 <= planted(t, 1), planted(t, 1) <= 3)) ::: each tree must be planted on exactly one of three lots\nAnd(planted(hickory, 1), planted(oak, 1)) ::: The trees planted on one lot are the hickory, the oak, and exactly one other tree\nAnd(planted(maple, 1), Not(planted(walnut, 1))) ::: The maple is not planted on the same lot as the walnut\nAnd(planted(larch, 1), Not(planted(walnut, 1))) ::: Either the larch or the walnut, but not both, is planted on lot 1\nAnd(planted(maple, 2), Not(planted(oak, 2))) ::: Either the maple or the oak, but not both, is planted on lot 2\nAnd(planted(plum, 3), planted(sycamore, 3)) ::: More trees are planted on lot 3 than on lot 1\n\n# Options\nQuestion ::: ::: Which one of the following could be the list of the trees that the landscaper plants on each of the lots today?\nis_sat(ForAll([t:trees], ForAll([l:lots], And(planted(t, l) == [larch, maple, walnut]))) ::: (A)\nis_sat(ForAll([t:trees], ForAll([l:lots], And(planted(t, l) == [hickory, maple, oak]))) ::: (B)\nis_sat(ForAll([t:trees], ForAll([l:lots], And(planted(t, l) == [maple, oak, walnut]))) ::: (C)\nis_sat(ForAll([t:trees], ForAll([l:lots], And(planted(t, l) == [hickory, larch, oak]))) ::: (D)\nis_sat(ForAll([t:trees], ForAll([l:lots], And(planted(t, l) == [walnut, plum, sycamore]))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_2_8",
    "context": "A landscaper will plant exactly seven trees today—a hickory, a larch, a maple, an oak, a plum, a sycamore, and a walnut. Each tree must be planted on exactly one of three lots—1, 2, or 3—in conformity with the following requirements: The trees planted on one lot are the hickory, the oak, and exactly one other tree. The maple is not planted on the same lot as the walnut. Either the larch or the walnut, but not both, is planted on lot 1. Either the maple or the oak, but not both, is planted on lot 2. More trees are planted on lot 3 than on lot 1.",
    "question": "If the hickory is planted on lot 2, then which one of the following trees must be planted on lot 3?",
    "answer": "B",
    "options": [
      "A) the larch",
      "B) the maple",
      "C) the plum",
      "D) the sycamore",
      "E) the walnut"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrees = EnumSort([hickory, larch, maple, oak, plum, sycamore, walnut])\nlots = EnumSort([1, 2, 3])\nplanted = Function([trees, lots] -> [bool])\n\n# Constraints\nForAll([t:trees], And(1 <= planted(t, 1), planted(t, 1) <= 3)) ::: each tree must be planted on exactly one of three lots\nAnd(planted(hickory, 1), planted(oak, 1), planted(t:trees, 1) == 3) ::: The trees planted on one lot are the hickory, the oak, and exactly one other tree\nAnd(planted(maple, 2), planted(walnut, 2)) ::: The maple is not planted on the same lot as the walnut\nAnd(planted(larch, 1), planted(walnut, 1)) ::: Either the larch or the walnut, but not both, is planted on lot 1\nAnd(planted(maple, 2), planted(oak, 2)) ::: Either the maple or the oak, but not both, is planted on lot 2\nAnd(planted(plum, 3), planted(sycamore, 3)) ::: More trees are planted on lot 3 than on lot 1\n\n# Options\nQuestion ::: If the hickory is planted on lot 2, then which one of the following trees must be planted on lot 3?\nis_exception(is_sat(planted(larch, 3))) ::: (A)\nis_exception(is_sat(planted(maple, 3))) ::: (B)\nis_exception(is_sat(planted(plum, 3))) ::: (C)\nis_exception(is_sat(planted(sycamore, 3))) ::: (D)\nis_exception(is_sat(planted(walnut, 3))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_2_9",
    "context": "A landscaper will plant exactly seven trees today—a hickory, a larch, a maple, an oak, a plum, a sycamore, and a walnut. Each tree must be planted on exactly one of three lots—1, 2, or 3—in conformity with the following requirements: The trees planted on one lot are the hickory, the oak, and exactly one other tree. The maple is not planted on the same lot as the walnut. Either the larch or the walnut, but not both, is planted on lot 1. Either the maple or the oak, but not both, is planted on lot 2. More trees are planted on lot 3 than on lot 1.",
    "question": "Which one of the following is a complete and accurate list of the trees any of which could be planted on lot 1?",
    "answer": "C",
    "options": [
      "A) the hickory, the plum, the sycamore, the walnut",
      "B) the hickory, the sycamore, the walnut",
      "C) the larch, the plum, the sycamore, the walnut",
      "D) the larch, the plum, the walnut",
      "E) the plum, the sycamore, the walnut"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrees = EnumSort([hickory, larch, maple, oak, plum, sycamore, walnut])\nlots = EnumSort([1, 2, 3])\nplanted = Function([trees, lots] -> [bool])\n\n# Constraints\nForAll([t:trees], And(1 <= planted(t, 1), planted(t, 1) <= 3)) ::: each tree must be planted on exactly one of three lots\nAnd(planted(hickory, 1), planted(oak, 1), planted(t:trees, 1) <= 3) ::: The trees planted on one lot are the hickory, the oak, and exactly one other tree\nAnd(planted(maple, 1), planted(walnut, 1)) ::: The maple is not planted on the same lot as the walnut\nAnd(planted(larch, 1), planted(walnut, 1)) ::: Either the larch or the walnut, but not both, is planted on lot 1\nAnd(planted(maple, 2), planted(oak, 2)) ::: Either the maple or the oak, but not both, is planted on lot 2\nAnd(planted(plum, 3), planted(sycamore, 3)) ::: More trees are planted on lot 3 than on lot 1\n\n# Options\nQuestion ::: ::: Which one of the following is a complete and accurate list of the trees any of which could be planted on lot 1?\nis_sat(ForAll([t:trees], And(planted(t, 1), planted(t, 1) == 1))) ::: (A)\nis_sat(ForAll([t:trees], And(planted(t, 1), planted(t, 1) == 2))) ::: (B)\nis_sat(ForAll([t:trees], And(planted(t, 1), planted(t, 1) == 3))) ::: (C)\nis_sat(ForAll([t:trees], And(planted(t, 1), planted(t, 1) == 4))) ::: (D)\nis_sat(ForAll([t:trees], And(planted(t, 1), planted(t, 1) == 5))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_2_10",
    "context": "A landscaper will plant exactly seven trees today—a hickory, a larch, a maple, an oak, a plum, a sycamore, and a walnut. Each tree must be planted on exactly one of three lots—1, 2, or 3—in conformity with the following requirements: The trees planted on one lot are the hickory, the oak, and exactly one other tree. The maple is not planted on the same lot as the walnut. Either the larch or the walnut, but not both, is planted on lot 1. Either the maple or the oak, but not both, is planted on lot 2. More trees are planted on lot 3 than on lot 1.",
    "question": "If the walnut is planted on lot 3, then which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) The sycamore is planted on lot 1.",
      "B) The hickory is planted on lot 2.",
      "C) The larch is planted on lot 2.",
      "D) The plum is planted on lot 3.",
      "E) The sycamore is planted on lot 3."
    ],
    "raw_logic_programs": [
      "# Declarations\ntrees = EnumSort([hickory, larch, maple, oak, plum, sycamore, walnut])\nlots = EnumSort([1, 2, 3])\nplanted = Function([trees, lots] -> [bool])\n\n# Constraints\nForAll([t:trees], And(1 <= planted(t, l) <= 7, planted(t, l) == 1)) ::: each tree must be planted on exactly one of three lots\nAnd(planted(hickory, 1), planted(oak, 1)) ::: The trees planted on one lot are the hickory, the oak, and exactly one other tree\nAnd(planted(maple, 2), Not(planted(walnut, 2))) ::: The maple is not planted on the same lot as the walnut\nAnd(planted(larch, 3), planted(walnut, 3)) ::: Either the larch or the walnut, but not both, is planted on lot 3\nAnd(planted(maple, 2), planted(oak, 2)) ::: More trees are planted on lot 3 than on lot 1\n\n# Options\nQuestion ::: If the walnut is planted on lot 3, then which one of the following could be true?\nis_exception(is_sat(planted(hickory, 1) == True)) ::: (A)\nis_exception(is_sat(planted(larch, 3) == True)) ::: (B)\nis_exception(is_sat(planted(maple, 2) == True)) ::: (C)\nis_exception(is_sat(planted(plum, 3) == True)) ::: (D)\nis_exception(is_sat(planted(sycamore, 3) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_2_11",
    "context": "A landscaper will plant exactly seven trees today—a hickory, a larch, a maple, an oak, a plum, a sycamore, and a walnut. Each tree must be planted on exactly one of three lots—1, 2, or 3—in conformity with the following requirements: The trees planted on one lot are the hickory, the oak, and exactly one other tree. The maple is not planted on the same lot as the walnut. Either the larch or the walnut, but not both, is planted on lot 1. Either the maple or the oak, but not both, is planted on lot 2. More trees are planted on lot 3 than on lot 1.",
    "question": "Where each of the trees is planted is completely determined if which one of the following trees is planted on lot 2?",
    "answer": "A",
    "options": [
      "A) the walnut",
      "B) the sycamore",
      "C) the plum",
      "D) the maple",
      "E) the larch"
    ],
    "raw_logic_programs": [
      "# Declarations\ntrees = EnumSort([hickory, larch, maple, oak, plum, sycamore, walnut])\nlots = EnumSort([1, 2, 3])\nplanted = Function([trees, lots] -> [bool])\n\n# Constraints\nForAll([t:trees], And(1 <= planted(t, 1), planted(t, 1) <= 3)) ::: each tree must be planted on exactly one of three lots\nAnd(planted(hickory, 1), planted(oak, 1)) ::: The trees planted on one lot are the hickory, the oak, and exactly one other tree\nAnd(planted(maple, 1), Not(planted(walnut, 1))) ::: The maple is not planted on the same lot as the walnut\nAnd(planted(larch, 2), Not(planted(walnut, 2))) ::: Either the larch or the walnut, but not both, is planted on lot 2\nAnd(planted(maple, 2), Not(planted(oak, 2))) ::: Either the maple or the oak, but not both, is planted on lot 2\nAnd(planted(plum, 3), planted(sycamore, 3)) ::: More trees are planted on lot 3 than on lot 1\n\n# Options\nQuestion ::: ::: Where each of the trees is planted is completely determined if which one of the following trees is planted on lot 2?\nis_sat(ForAll([t:trees], planted(t, 2) == planted(t, 3))) ::: (A)\nis_sat(ForAll([t:trees], planted(t, 2) == planted(t, 1))) ::: (B)\nis_sat(ForAll([t:trees], planted(t, 2) == planted(t, 1))) ::: (C)\nis_sat(ForAll([t:trees], planted(t, 2) == planted(t, 1))) ::: (D)\nis_sat(ForAll([t:trees], planted(t, 2) == planted(t, 1))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_3_12",
    "context": "Seven librarians—Flynn, Gomez, Hill, Kitson, Leung, Moore, and Zahn—are being scheduled for desk duty for one week—Monday through Saturday. The librarians will be on duty exactly one day each. On each day except Saturday, there will be exactly one librarian on duty, with two on duty on Saturday, subject to the following constraints: Hill must be on desk duty earlier in the week than Leung. Both Hill and Moore must be on desk duty earlier in the week than Gomez. Flynn must be on desk duty earlier in the week than both Kitson and Moore. Kitson must be on desk duty earlier in the week than Zahn. Unless Leung is on desk duty on Saturday, Leung must be on desk duty earlier in the week than Flynn.",
    "question": "Which one of the following is an acceptable schedule for the librarians, listed in order from Monday through Saturday?",
    "answer": "A",
    "options": [
      "A) Flynn; Hill; Moore; Kitson; Zahn; Gomez and Leung",
      "B) Flynn; Moore; Hill; Leung; Kitson; Gomez and Zahn",
      "C) Hill; Kitson; Moore; Flynn; Gomez; Leung and Zahn",
      "D) Hill; Leung; Flynn; Moore; Zahn; Gomez and Kitson",
      "E) Leung; Flynn; Kitson; Moore; Hill; Gomez and Zahn"
    ],
    "raw_logic_programs": [
      "# Declarations\nlibrarians = EnumSort([Flynn, Gomez, Hill, Kitson, Leung, Moore, Zahn])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndesk_duty = Function([librarians, days] -> [bool])\n\n# Constraints\nForAll([d:days], And(1 <= desk_duty(librarian, d), desk_duty(librarian, d) <= 7)) ::: each librarian is on duty exactly one day\nAnd(desk_duty(Hill, Monday) < desk_duty(Leung, Monday), desk_duty(Hill, Monday) < desk_duty(Gomez, Monday)) ::: Hill must be on desk duty earlier in the week than Leung\nAnd(desk_duty(Hill, Monday) < desk_duty(Moore, Monday), desk_duty(Hill, Monday) < desk_duty(Gomez, Monday)) ::: Hill must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Flynn, Monday) < desk_duty(Kitson, Monday), desk_duty(Flynn, Monday) < desk_duty(Moore, Monday)) ::: Flynn must be on desk duty earlier in the week than Kitson\nAnd(desk_duty(Kitson, Monday) < desk_duty(Zahn, Monday), desk_duty(Kitson, Monday) < desk_duty(Moore, Monday)) ::: Kitson must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Leung, Monday) < desk_duty(Flynn, Monday), desk_duty(Leung, Monday) < desk_duty(Kitson, Monday)) ::: Leung must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Flynn, Monday) < desk_duty(Gomez, Monday), desk_duty(Flynn, Monday) < desk_duty(Kitson, Monday)) ::: Flynn must be on desk duty earlier in the week than Gomez\nAnd(desk_duty(Gomez, Monday) < desk_duty(Zahn, Monday), desk_duty(Gomez, Monday) < desk_duty(Kitson, Monday)) ::: Gomez must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Leung, Monday) < desk_duty(Gomez, Monday), desk_duty(Leung, Monday) < desk_duty(Kitson, Monday)) ::: Leung must be on desk duty earlier in the week than Gomez\nAnd(desk_duty(Kitson, Monday) < desk_duty(Zahn, Monday), desk_duty(Kitson, Monday) < desk_duty(Gomez, Monday)) ::: Kitson must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Zahn, Monday) < desk_duty(Gomez, Monday), desk_duty(Zahn, Monday) < desk_duty(Kitson, Monday)) ::: Zahn must be on desk duty earlier in the week than Gomez\nAnd(desk_duty(Gomez, Monday) < desk_duty(Moore, Monday), desk_duty(Gomez, Monday) < desk_duty(Kitson, Monday)) ::: Gomez must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Moore, Monday) < desk_duty(Zahn, Monday), desk_duty(Moore, Monday) < desk_duty(Kitson, Monday)) ::: Moore must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Zahn, Monday) < desk_duty"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_3_13",
    "context": "Seven librarians—Flynn, Gomez, Hill, Kitson, Leung, Moore, and Zahn—are being scheduled for desk duty for one week—Monday through Saturday. The librarians will be on duty exactly one day each. On each day except Saturday, there will be exactly one librarian on duty, with two on duty on Saturday, subject to the following constraints: Hill must be on desk duty earlier in the week than Leung. Both Hill and Moore must be on desk duty earlier in the week than Gomez. Flynn must be on desk duty earlier in the week than both Kitson and Moore. Kitson must be on desk duty earlier in the week than Zahn. Unless Leung is on desk duty on Saturday, Leung must be on desk duty earlier in the week than Flynn.",
    "question": "Which one of the following CANNOT be on desk duty on Tuesday?",
    "answer": "E",
    "options": [
      "A) Flynn",
      "B) Hill",
      "C) Kitson",
      "D) Moore",
      "E) Zahn"
    ],
    "raw_logic_programs": [
      "# Declarations\nlibrarians = EnumSort([Flynn, Gomez, Hill, Kitson, Leung, Moore, Zahn])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndesk_duty = Function([librarians, days] -> [bool])\n\n# Constraints\nForAll([d:days], And(1 <= desk_duty(librarian, d), desk_duty(librarian, d) <= 7)) ::: each librarian is on duty exactly one day\nAnd(desk_duty(Hill, Monday) < desk_duty(Leung, Monday), desk_duty(Hill, Monday) < desk_duty(Gomez, Monday)) ::: Hill must be on desk duty earlier in the week than Leung\nAnd(desk_duty(Hill, Monday) < desk_duty(Moore, Monday), desk_duty(Hill, Monday) < desk_duty(Gomez, Monday)) ::: Hill must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Flynn, Monday) < desk_duty(Kitson, Monday), desk_duty(Flynn, Monday) < desk_duty(Moore, Monday)) ::: Flynn must be on desk duty earlier in the week than Kitson\nAnd(desk_duty(Kitson, Monday) < desk_duty(Zahn, Monday), desk_duty(Kitson, Monday) < desk_duty(Moore, Monday)) ::: Kitson must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Leung, Monday) < desk_duty(Flynn, Monday), desk_duty(Leung, Monday) < desk_duty(Moore, Monday)) ::: Leung must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Leung, Saturday) < desk_duty(Gomez, Saturday), desk_duty(Leung, Saturday) < desk_duty(Moore, Saturday)) ::: Leung must be on desk duty earlier in the week than Gomez\nAnd(desk_duty(Gomez, Saturday) < desk_duty(Flynn, Saturday), desk_duty(Gomez, Saturday) < desk_duty(Kitson, Saturday)) ::: Gomez must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Gomez, Saturday) < desk_duty(Kitson, Saturday), desk_duty(Gomez, Saturday) < desk_duty(Zahn, Saturday)) ::: Gomez must be on desk duty earlier in the week than Kitson\nAnd(desk_duty(Moore, Saturday) < desk_duty(Flynn, Saturday), desk_duty(Moore, Saturday) < desk_duty(Kitson, Saturday)) ::: Moore must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Moore, Saturday) < desk_duty(Kitson, Saturday), desk_duty(Moore, Saturday) < desk_duty(Zahn, Saturday)) ::: Moore must be on desk duty earlier in the week than Kitson\nAnd(desk_duty(Zahn, Saturday) < desk_duty(Flynn, Saturday), desk_duty(Zahn, Saturday) < desk_duty(Kitson, Saturday)) ::: Zahn must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Zahn, Saturday) < desk_duty(Kitson, Saturday), desk_duty(Zahn, Saturday) < desk_duty(Leung, Saturday)) ::: Zahn must be on desk duty earlier in the week than Kitson\n\n# Options\nQuestion ::: Which one of the following CANNOT be on desk duty on Tues"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_3_14",
    "context": "Seven librarians—Flynn, Gomez, Hill, Kitson, Leung, Moore, and Zahn—are being scheduled for desk duty for one week—Monday through Saturday. The librarians will be on duty exactly one day each. On each day except Saturday, there will be exactly one librarian on duty, with two on duty on Saturday, subject to the following constraints: Hill must be on desk duty earlier in the week than Leung. Both Hill and Moore must be on desk duty earlier in the week than Gomez. Flynn must be on desk duty earlier in the week than both Kitson and Moore. Kitson must be on desk duty earlier in the week than Zahn. Unless Leung is on desk duty on Saturday, Leung must be on desk duty earlier in the week than Flynn.",
    "question": "If Kitson is on desk duty earlier in the week than Moore, which one of the following CANNOT be true?",
    "answer": "B",
    "options": [
      "A) Flynn is on desk duty earlier in the week than Leung.",
      "B) Gomez is on desk duty earlier in the week than Kitson.",
      "C) Gomez is on desk duty earlier in the week than Zahn.",
      "D) Hill is on desk duty earlier in the week than Kitson.",
      "E) Zahn is on desk duty earlier in the week than Moore."
    ],
    "raw_logic_programs": [
      "# Declarations\nlibrarians = EnumSort([Flynn, Gomez, Hill, Kitson, Leung, Moore, Zahn])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndesk_duty = Function([librarians, days] -> [bool])\n\n# Constraints\nForAll([d:days], And(1 <= desk_duty(librarian, d), desk_duty(librarian, d) <= 7)) ::: each librarian is on duty exactly one day\nAnd(desk_duty(Hill, Monday) < desk_duty(Leung, Monday), desk_duty(Hill, Monday) < desk_duty(Gomez, Monday)) ::: Hill must be on desk duty earlier in the week than Leung\nAnd(desk_duty(Hill, Monday) < desk_duty(Moore, Monday), desk_duty(Hill, Monday) < desk_duty(Gomez, Monday)) ::: Hill must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Flynn, Monday) < desk_duty(Kitson, Monday), desk_duty(Flynn, Monday) < desk_duty(Moore, Monday)) ::: Flynn must be on desk duty earlier in the week than Kitson\nAnd(desk_duty(Kitson, Monday) < desk_duty(Zahn, Monday), desk_duty(Kitson, Monday) < desk_duty(Gomez, Monday)) ::: Kitson must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Leung, Monday) < desk_duty(Flynn, Monday), desk_duty(Leung, Monday) < desk_duty(Kitson, Monday)) ::: Leung must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Leung, Saturday) < desk_duty(Gomez, Saturday), desk_duty(Leung, Saturday) < desk_duty(Zahn, Saturday)) ::: Leung must be on desk duty earlier in the week than Gomez\nAnd(desk_duty(Gomez, Saturday) < desk_duty(Moore, Saturday), desk_duty(Gomez, Saturday) < desk_duty(Zahn, Saturday)) ::: Gomez must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Zahn, Saturday) < desk_duty(Moore, Saturday), desk_duty(Zahn, Saturday) < desk_duty(Kitson, Saturday)) ::: Zahn must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Moore, Saturday) < desk_duty(Kitson, Saturday), desk_duty(Moore, Saturday) < desk_duty(Flynn, Saturday)) ::: Moore must be on desk duty earlier in the week than Kitson\nAnd(desk_duty(Flynn, Saturday) < desk_duty(Kitson, Saturday), desk_duty(Flynn, Saturday) < desk_duty(Hill, Saturday)) ::: Flynn must be on desk duty earlier in the week than Kitson\nAnd(desk_duty(Hill, Saturday) < desk_duty(Kitson, Saturday), desk_duty(Hill, Saturday) < desk_duty(Gomez, Saturday)) ::: Hill must be on desk duty earlier in the week than Kitson\nAnd(desk_duty(Kitson, Saturday) < desk_duty(Gomez, Saturday), desk_duty(Kitson, Saturday) < desk_duty(Zahn, Saturday)) ::: Kitson must be on desk duty earlier in the week than Gomez\nAnd(desk_duty(Gomez, Saturday) < desk_duty(Zahn,"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_3_15",
    "context": "Seven librarians—Flynn, Gomez, Hill, Kitson, Leung, Moore, and Zahn—are being scheduled for desk duty for one week—Monday through Saturday. The librarians will be on duty exactly one day each. On each day except Saturday, there will be exactly one librarian on duty, with two on duty on Saturday, subject to the following constraints: Hill must be on desk duty earlier in the week than Leung. Both Hill and Moore must be on desk duty earlier in the week than Gomez. Flynn must be on desk duty earlier in the week than both Kitson and Moore. Kitson must be on desk duty earlier in the week than Zahn. Unless Leung is on desk duty on Saturday, Leung must be on desk duty earlier in the week than Flynn.",
    "question": "If Zahn is on desk duty on Thursday, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Flynn is on desk duty earlier in the week than Leung.",
      "B) Hill is on desk duty earlier in the week than Flynn.",
      "C) Hill is on desk duty earlier in the week than Moore.",
      "D) Hill is on desk duty earlier in the week than Zahn.",
      "E) Kitson is on desk duty earlier in the week than Moore."
    ],
    "raw_logic_programs": [
      "# Declarations\nlibrarians = EnumSort([Flynn, Gomez, Hill, Kitson, Leung, Moore, Zahn])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndesk_duty = Function([librarians, days] -> [bool])\n\n# Constraints\nForAll([d:days], And(1 <= desk_duty(librarian, d), desk_duty(librarian, d) <= 7)) ::: each librarian is on duty exactly one day\nAnd(desk_duty(Hill, Monday) < desk_duty(Leung, Monday), desk_duty(Hill, Monday) < desk_duty(Flynn, Monday)) ::: Hill must be on desk duty earlier in the week than Leung\nAnd(desk_duty(Hill, Monday) < desk_duty(Moore, Monday), desk_duty(Hill, Monday) < desk_duty(Gomez, Monday)) ::: Hill must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Flynn, Monday) < desk_duty(Kitson, Monday), desk_duty(Flynn, Monday) < desk_duty(Moore, Monday)) ::: Flynn must be on desk duty earlier in the week than Kitson\nAnd(desk_duty(Kitson, Monday) < desk_duty(Zahn, Monday), desk_duty(Kitson, Monday) < desk_duty(Flynn, Monday)) ::: Kitson must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Leung, Monday) < desk_duty(Flynn, Monday), desk_duty(Leung, Monday) < desk_duty(Kitson, Monday)) ::: Leung must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Gomez, Monday) < desk_duty(Moore, Monday), desk_duty(Gomez, Monday) < desk_duty(Zahn, Monday)) ::: Gomez must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Moore, Monday) < desk_duty(Zahn, Monday), desk_duty(Moore, Monday) < desk_duty(Gomez, Monday)) ::: Moore must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Zahn, Monday) < desk_duty(Hill, Monday), desk_duty(Zahn, Monday) < desk_duty(Moore, Monday)) ::: Zahn must be on desk duty earlier in the week than Hill\nAnd(desk_duty(Hill, Monday) < desk_duty(Flynn, Monday), desk_duty(Hill, Monday) < desk_duty(Kitson, Monday)) ::: Hill must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Kitson, Monday) < desk_duty(Hill, Monday), desk_duty(Kitson, Monday) < desk_duty(Flynn, Monday)) ::: Kitson must be on desk duty earlier in the week than Hill\nAnd(desk_duty(Hill, Monday) < desk_duty(Leung, Monday), desk_duty(Hill, Monday) < desk_duty(Kitson, Monday)) ::: Hill must be on desk duty earlier in the week than Leung\nAnd(desk_duty(Leung, Monday) < desk_duty(Hill, Monday), desk_duty(Leung, Monday) < desk_duty(Kitson, Monday)) ::: Leung must be on desk duty earlier in the week than Hill\nAnd(desk_duty(Hill, Monday) < desk_duty(Gomez, Monday), desk_duty"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_3_16",
    "context": "Seven librarians—Flynn, Gomez, Hill, Kitson, Leung, Moore, and Zahn—are being scheduled for desk duty for one week—Monday through Saturday. The librarians will be on duty exactly one day each. On each day except Saturday, there will be exactly one librarian on duty, with two on duty on Saturday, subject to the following constraints: Hill must be on desk duty earlier in the week than Leung. Both Hill and Moore must be on desk duty earlier in the week than Gomez. Flynn must be on desk duty earlier in the week than both Kitson and Moore. Kitson must be on desk duty earlier in the week than Zahn. Unless Leung is on desk duty on Saturday, Leung must be on desk duty earlier in the week than Flynn.",
    "question": "If Moore is on desk duty on Tuesday, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Hill is on desk duty on Thursday.",
      "B) Kitson is on desk duty on Thursday.",
      "C) Leung is on desk duty on Saturday.",
      "D) Zahn is on desk duty on Friday.",
      "E) Zahn is on desk duty on Saturday."
    ],
    "raw_logic_programs": [
      "# Declarations\nlibrarians = EnumSort([Flynn, Gomez, Hill, Kitson, Leung, Moore, Zahn])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndesk_duty = Function([librarians, days] -> [bool])\n\n# Constraints\nForAll([d:days], And(1 <= desk_duty(librarian, d), desk_duty(librarian, d) <= 7)) ::: each librarian is on duty exactly one day\nAnd(desk_duty(Hill, Monday) < desk_duty(Leung, Monday), desk_duty(Hill, Monday) < desk_duty(Gomez, Monday)) ::: Hill must be on desk duty earlier in the week than Leung\nAnd(desk_duty(Hill, Monday) < desk_duty(Moore, Monday), desk_duty(Hill, Monday) < desk_duty(Gomez, Monday)) ::: Hill must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Flynn, Monday) < desk_duty(Kitson, Monday), desk_duty(Flynn, Monday) < desk_duty(Moore, Monday)) ::: Flynn must be on desk duty earlier in the week than Kitson\nAnd(desk_duty(Kitson, Monday) < desk_duty(Zahn, Monday), desk_duty(Kitson, Monday) < desk_duty(Gomez, Monday)) ::: Kitson must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Leung, Monday) < desk_duty(Flynn, Monday), desk_duty(Leung, Monday) < desk_duty(Kitson, Monday)) ::: Leung must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Leung, Monday) < desk_duty(Moore, Monday), desk_duty(Leung, Monday) < desk_duty(Kitson, Monday)) ::: Leung must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Leung, Monday) < desk_duty(Zahn, Monday), desk_duty(Leung, Monday) < desk_duty(Gomez, Monday)) ::: Leung must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Leung, Monday) < desk_duty(Moore, Monday), desk_duty(Leung, Monday) < desk_duty(Gomez, Monday)) ::: Leung must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Leung, Monday) < desk_duty(Zahn, Monday), desk_duty(Leung, Monday) < desk_duty(Kitson, Monday)) ::: Leung must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Leung, Monday) < desk_duty(Moore, Monday), desk_duty(Leung, Monday) < desk_duty(Kitson, Monday)) ::: Leung must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Leung, Monday) < desk_duty(Zahn, Monday), desk_duty(Leung, Monday) < desk_duty(Gomez, Monday)) ::: Leung must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Leung, Monday) < desk_duty(Moore, Monday), desk_duty(Leung, Monday) < desk_duty(Kitson, Monday)) ::: Leung must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Leung, Monday) < desk_duty(Zahn, Monday), desk_duty(Le"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_3_17",
    "context": "Seven librarians—Flynn, Gomez, Hill, Kitson, Leung, Moore, and Zahn—are being scheduled for desk duty for one week—Monday through Saturday. The librarians will be on duty exactly one day each. On each day except Saturday, there will be exactly one librarian on duty, with two on duty on Saturday, subject to the following constraints: Hill must be on desk duty earlier in the week than Leung. Both Hill and Moore must be on desk duty earlier in the week than Gomez. Flynn must be on desk duty earlier in the week than both Kitson and Moore. Kitson must be on desk duty earlier in the week than Zahn. Unless Leung is on desk duty on Saturday, Leung must be on desk duty earlier in the week than Flynn.",
    "question": "If Flynn is on desk duty earlier in the week than Hill, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Hill is on desk duty earlier in the week than Kitson.",
      "B) Hill is on desk duty earlier in the week than Zahn.",
      "C) Kitson is on desk duty earlier in the week than Moore.",
      "D) Moore is on desk duty earlier in the week than Leung.",
      "E) Moore is on desk duty earlier in the week than Zahn."
    ],
    "raw_logic_programs": [
      "# Declarations\nlibrarians = EnumSort([Flynn, Gomez, Hill, Kitson, Leung, Moore, Zahn])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndesk_duty = Function([librarians, days] -> [bool])\n\n# Constraints\nForAll([d:days], And(1 <= desk_duty(librarian, d), desk_duty(librarian, d) <= 7)) ::: each librarian is on duty exactly one day\nAnd(desk_duty(Hill, Monday) < desk_duty(Leung, Monday), desk_duty(Hill, Monday) < desk_duty(Flynn, Monday)) ::: Hill must be on desk duty earlier in the week than Leung\nAnd(desk_duty(Hill, Monday) < desk_duty(Moore, Monday), desk_duty(Hill, Monday) < desk_duty(Gomez, Monday)) ::: Hill must be on desk duty earlier in the week than both Moore and Gomez\nAnd(desk_duty(Flynn, Monday) < desk_duty(Kitson, Monday), desk_duty(Flynn, Monday) < desk_duty(Moore, Monday)) ::: Flynn must be on desk duty earlier in the week than both Kitson and Moore\nAnd(desk_duty(Kitson, Monday) < desk_duty(Zahn, Monday), desk_duty(Kitson, Monday) < desk_duty(Leung, Monday)) ::: Kitson must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Leung, Monday) < desk_duty(Flynn, Monday), desk_duty(Leung, Monday) < desk_duty(Hill, Monday)) ::: Leung must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Leung, Saturday) < desk_duty(Gomez, Saturday), desk_duty(Leung, Saturday) < desk_duty(Moore, Saturday)) ::: Leung must be on desk duty earlier in the week than Gomez\nAnd(desk_duty(Gomez, Saturday) < desk_duty(Zahn, Saturday), desk_duty(Gomez, Saturday) < desk_duty(Moore, Saturday)) ::: Gomez must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Moore, Saturday) < desk_duty(Zahn, Saturday), desk_duty(Moore, Saturday) < desk_duty(Leung, Saturday)) ::: Moore must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Zahn, Saturday) < desk_duty(Flynn, Saturday), desk_duty(Zahn, Saturday) < desk_duty(Hill, Saturday)) ::: Zahn must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Hill, Saturday) < desk_duty(Kitson, Saturday), desk_duty(Hill, Saturday) < desk_duty(Leung, Saturday)) ::: Hill must be on desk duty earlier in the week than Kitson\nAnd(desk_duty(Kitson, Saturday) < desk_duty(Flynn, Saturday), desk_duty(Kitson, Saturday) < desk_duty(Hill, Saturday)) ::: Kitson must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Flynn, Saturday) < desk_duty(Gomez, Saturday), desk_duty(Flynn, Saturday) < desk_duty(Hill, Saturday)) ::: Flynn must be on desk duty earlier in the week than Hill\nAnd(desk_duty(Hill, Saturday) < desk"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_3_18",
    "context": "Seven librarians—Flynn, Gomez, Hill, Kitson, Leung, Moore, and Zahn—are being scheduled for desk duty for one week—Monday through Saturday. The librarians will be on duty exactly one day each. On each day except Saturday, there will be exactly one librarian on duty, with two on duty on Saturday, subject to the following constraints: Hill must be on desk duty earlier in the week than Leung. Both Hill and Moore must be on desk duty earlier in the week than Gomez. Flynn must be on desk duty earlier in the week than both Kitson and Moore. Kitson must be on desk duty earlier in the week than Zahn. Unless Leung is on desk duty on Saturday, Leung must be on desk duty earlier in the week than Flynn.",
    "question": "Which one of the following, if substituted for the constraint that Flynn must be on desk duty earlier in the week than both Kitson and Moore, would have the same effect in determining the schedule for the librarians?",
    "answer": "C",
    "options": [
      "A) Flynn cannot be on desk duty on Thursday.",
      "B) Only Flynn or Hill can be on desk duty on Monday.",
      "C) Only Hill and Leung can be on desk duty earlier than Flynn.",
      "D) Flynn must be on desk duty earlier in the week than both Gomez and Kitson.",
      "E) Flynn must be on desk duty earlier in the week than both Moore and Zahn."
    ],
    "raw_logic_programs": [
      "# Declarations\nlibrarians = EnumSort([Flynn, Gomez, Hill, Kitson, Leung, Moore, Zahn])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday, Saturday])\ndesk_duty = Function([librarians, days] -> [bool])\n\n# Constraints\nForAll([d:days], And(1 <= desk_duty(librarian, d), desk_duty(librarian, d) <= 7)) ::: each librarian is on duty exactly one day\nAnd(desk_duty(Hill, Monday) < desk_duty(Leung, Monday), desk_duty(Hill, Monday) < desk_duty(Flynn, Monday)) ::: Hill must be on desk duty earlier in the week than Leung\nAnd(desk_duty(Moore, Monday) < desk_duty(Gomez, Monday), desk_duty(Moore, Monday) < desk_duty(Hill, Monday)) ::: Moore must be on desk duty earlier in the week than Gomez\nAnd(desk_duty(Flynn, Monday) < desk_duty(Kitson, Monday), desk_duty(Flynn, Monday) < desk_duty(Hill, Monday)) ::: Flynn must be on desk duty earlier in the week than both Kitson and Hill\nAnd(desk_duty(Kitson, Monday) < desk_duty(Zahn, Monday), desk_duty(Kitson, Monday) < desk_duty(Hill, Monday)) ::: Kitson must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Leung, Monday) < desk_duty(Flynn, Monday), desk_duty(Leung, Monday) < desk_duty(Hill, Monday)) ::: Leung must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Flynn, Monday) < desk_duty(Gomez, Monday), desk_duty(Flynn, Monday) < desk_duty(Moore, Monday)) ::: Flynn must be on desk duty earlier in the week than Gomez\nAnd(desk_duty(Moore, Monday) < desk_duty(Gomez, Monday), desk_duty(Moore, Monday) < desk_duty(Leung, Monday)) ::: Moore must be on desk duty earlier in the week than Gomez\nAnd(desk_duty(Gomez, Monday) < desk_duty(Zahn, Monday), desk_duty(Gomez, Monday) < desk_duty(Leung, Monday)) ::: Gomez must be on desk duty earlier in the week than Zahn\nAnd(desk_duty(Zahn, Monday) < desk_duty(Flynn, Monday), desk_duty(Zahn, Monday) < desk_duty(Hill, Monday)) ::: Zahn must be on desk duty earlier in the week than Flynn\nAnd(desk_duty(Hill, Monday) < desk_duty(Moore, Monday), desk_duty(Hill, Monday) < desk_duty(Leung, Monday)) ::: Hill must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Leung, Monday) < desk_duty(Moore, Monday), desk_duty(Leung, Monday) < desk_duty(Hill, Monday)) ::: Leung must be on desk duty earlier in the week than Moore\nAnd(desk_duty(Moore, Monday) < desk_duty(Kitson, Monday), desk_duty(Moore, Monday) < desk_duty(Hill, Monday)) ::: Moore must be on desk duty earlier in the week than Kitson\nAnd(desk_duty(Kitson, Monday) < desk_duty(F"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_4_19",
    "context": "Each issue of a business newsletter has five slots, numbered 1 through 5. The policy of the newsletter requires that there are at least three features per issue, with each feature completely occupying one or more of the slots. Each feature can be one of four types—finance, industry, marketing, or technology. Any slot not containing a feature contains a graphic. The newsletters policy further requires that each issue be structured as follows: Any feature occupying more than one slot must occupy consecutively numbered slots. If an issue has any finance or technology feature, then a finance or technology feature must occupy slot 1. An issue can have at most one industry feature.",
    "question": "Which one of the following is an allowable structure for an issue of the newsletter?",
    "answer": "D",
    "options": [
      "A) slot 1: a finance feature; slot 2: an industry feature; slot 3: a second industry feature; slot 4: a graphic; slot 5: a graphic",
      "B) slot 1: a graphic; slot 2: a technology feature; slot 3: a second technology feature; slot 4: a graphic; slot 5: a third technology feature",
      "C) slots 1 and 2: a single industry feature; slots 3 and 4: a single marketing feature; slot 5: a finance feature",
      "D) slot 1: a technology feature; slots 2 and 3: a single industry feature; slot 4: a finance feature; slot 5: a graphic",
      "E) slot 1: a technology feature; slots 2 and 4: a single marketing feature; slot 3: an industry feature; slot 5: a graphic"
    ],
    "raw_logic_programs": [
      "# Declarations\nfeatures = EnumSort([finance, industry, marketing, technology])\nslots = EnumSort([1, 2, 3, 4, 5])\nfeatures_in_slot = Function([slots] -> [features])\nfeatures_in_slot(slots) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slot(slots) ::: If an issue has any finance or technology feature, then a finance or technology feature must occupy slot 1\nfeatures_in_slot(slots) ::: An issue can have at most one industry feature\n\n# Constraints\nForAll([s:slots], And(Count([f:features] -> features_in_slot(s) == f) >= 3, features_in_slot(s) == [finance, industry, marketing, technology])) ::: there are at least three features per issue, with each feature completely occupying one or more of the slots\nForAll([s:slots], Implies(features_in_slot(s) == [finance, industry, marketing, technology], features_in_slot(s) == [finance, industry, marketing])) ::: If an issue has any finance or technology feature, then a finance or technology feature must occupy slot 1\nForAll([s:slots], Implies(features_in_slot(s) == [finance, industry, marketing], features_in_slot(s) == [finance, industry])) ::: An issue can have at most one industry feature\n\n# Options\nQuestion ::: ::: Which one of the following is an allowable structure for an issue of the newsletter?\nis_sat(ForAll([s:slots], features_in_slot(s) == [finance, industry, marketing, technology])) ::: (A)\nis_sat(ForAll([s:slots], features_in_slot(s) == [finance, industry, marketing])) ::: (B)\nis_sat(ForAll([s:slots], features_in_slot(s) == [finance, industry, marketing, technology])) ::: (C)\nis_sat(ForAll([s:slots], features_in_slot(s) == [finance, industry, marketing])) ::: (D)\nis_sat(ForAll([s:slots], features_in_slot(s) == [finance, industry, marketing, technology])) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_4_20",
    "context": "Each issue of a business newsletter has five slots, numbered 1 through 5. The policy of the newsletter requires that there are at least three features per issue, with each feature completely occupying one or more of the slots. Each feature can be one of four types—finance, industry, marketing, or technology. Any slot not containing a feature contains a graphic. The newsletters policy further requires that each issue be structured as follows: Any feature occupying more than one slot must occupy consecutively numbered slots. If an issue has any finance or technology feature, then a finance or technology feature must occupy slot 1. An issue can have at most one industry feature.",
    "question": "If an issue of the newsletter has no technology feature and if there is a finance feature that occupies both slots 4 and 5, then which one of the following is required for that issue?",
    "answer": "A",
    "options": [
      "A) A finance feature occupies slot 1.",
      "B) A finance feature occupies slot 2 or slot 3 or both.",
      "C) A marketing feature occupies slot 2.",
      "D) An industry feature or a marketing feature occupies slot 2.",
      "E) An industry feature or a marketing feature occupies slot 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nfeatures = EnumSort([finance, industry, marketing, technology])\nslots = EnumSort([1, 2, 3, 4, 5])\nfeatures_in_slots = Function([slots] -> [bool])\nfeatures_in_slots(slots) ::: any feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_in_slots(slots) ::: each feature can be one of four types—finance, industry, marketing, or technology\nfeatures_"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_4_21",
    "context": "Each issue of a business newsletter has five slots, numbered 1 through 5. The policy of the newsletter requires that there are at least three features per issue, with each feature completely occupying one or more of the slots. Each feature can be one of four types—finance, industry, marketing, or technology. Any slot not containing a feature contains a graphic. The newsletters policy further requires that each issue be structured as follows: Any feature occupying more than one slot must occupy consecutively numbered slots. If an issue has any finance or technology feature, then a finance or technology feature must occupy slot 1. An issue can have at most one industry feature.",
    "question": "Which one of the following is NOT allowed for an issue of the newsletter?",
    "answer": "E",
    "options": [
      "A) There is exactly one industry feature, and it occupies slot 1.",
      "B) There is exactly one finance feature, and it occupies slot 2.",
      "C) There is exactly one technology feature, and it occupies slot 3.",
      "D) Each feature except the feature occupying slot 1 is either a finance feature or a marketing feature.",
      "E) Each feature except the feature occupying slot 5 is either an industry feature or a marketing feature."
    ],
    "raw_logic_programs": [
      "# Declarations\nfeatures = EnumSort([finance, industry, marketing, technology])\nslots = EnumSort([1, 2, 3, 4, 5])\nfeatures_in_slot = Function([slots] -> [bool])\nfeatures_in_slot(1) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slot(2) ::: If an issue has any finance or technology feature, then a finance or technology feature must occupy slot 1\nfeatures_in_slot(3) ::: An issue can have at most one industry feature\nfeatures_in_slot(4) ::: Each feature except the feature occupying slot 1 is either a finance feature or a marketing feature\nfeatures_in_slot(5) ::: Each feature except the feature occupying slot 5 is either an industry feature or a marketing feature\n\n# Constraints\nForAll([s:slots], And(Count([f:features] -> features_in_slot(s)(f)), 3) == 3) ::: each issue has exactly three features\nForAll([s:slots], And(features_in_slot(s)(finance), features_in_slot(s)(technology)) == False) ::: any feature occupying more than one slot must not be a finance or technology feature\nForAll([s:slots], And(features_in_slot(s)(finance), features_in_slot(s)(industry)) == False) ::: any feature occupying more than one slot must not be a finance or industry feature\nForAll([s:slots], And(features_in_slot(s)(finance), features_in_slot(s)(marketing)) == False) ::: any feature occupying more than one slot must not be a finance or marketing feature\nForAll([s:slots], And(features_in_slot(s)(industry), features_in_slot(s)(marketing)) == False) ::: any feature occupying more than one slot must not be an industry or marketing feature\n\n# Options\nQuestion ::: ::: Which one of the following is NOT allowed for an issue of the newsletter?\nis_exception(is_sat(features_in_slot(1)(finance))) ::: (A)\nis_exception(is_sat(features_in_slot(2)(finance))) ::: (B)\nis_exception(is_sat(features_in_slot(3)(finance))) ::: (C)\nis_exception(is_sat(features_in_slot(4)(finance))) ::: (D)\nis_exception(is_sat(features_in_slot(5)(finance))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_4_22",
    "context": "Each issue of a business newsletter has five slots, numbered 1 through 5. The policy of the newsletter requires that there are at least three features per issue, with each feature completely occupying one or more of the slots. Each feature can be one of four types—finance, industry, marketing, or technology. Any slot not containing a feature contains a graphic. The newsletters policy further requires that each issue be structured as follows: Any feature occupying more than one slot must occupy consecutively numbered slots. If an issue has any finance or technology feature, then a finance or technology feature must occupy slot 1. An issue can have at most one industry feature.",
    "question": "If, in a particular issue of the newsletter, slot 1 is occupied by the only industry feature in that issue, then which one of the following is required for that issue?",
    "answer": "D",
    "options": [
      "A) There is an industry feature that occupies slots 1 and 2, and only those slots.",
      "B) There is an industry feature that occupies slots 1, 2, and 3, and only those slots.",
      "C) There is a marketing feature that occupies slot 2 or slot 3 or both.",
      "D) There is a marketing feature that occupies one or more of slots 2, 3, and 4.",
      "E) There is a marketing feature that occupies slot 3 or slot 5 or both."
    ],
    "raw_logic_programs": [
      "# Declarations\nfeatures = EnumSort([finance, industry, marketing, technology])\nslots = EnumSort([1, 2, 3, 4, 5])\nfeatures_in_slots = Function([slots] -> [bool])\nfeatures_in_slots(1) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(2) ::: If an issue has any finance or technology feature, then a finance or technology feature must occupy slot 1\nfeatures_in_slots(3) ::: An issue can have at most one industry feature\n\n# Constraints\nForAll([s:slots], And(1 <= features_in_slots(s), features_in_slots(s) <= 5)) ::: each slot can be occupied by at most one feature\nForAll([s:slots], And(1 <= features_in_slots(s), features_in_slots(s) <= 4)) ::: each slot can be occupied by at most one feature\nForAll([s:slots], And(1 <= features_in_slots(s), features_in_slots(s) <= 3)) ::: each slot can be occupied by at most one feature\nForAll([s:slots], And(1 <= features_in_slots(s), features_in_slots(s) <= 2)) ::: each slot can be occupied by at most one feature\nForAll([s:slots], And(1 <= features_in_slots(s), features_in_slots(s) <= 1)) ::: each slot can be occupied by at most one feature\n\n# Options\nQuestion ::: If, in a particular issue of the newsletter, slot 1 is occupied by the only industry feature in that issue, then which one of the following is required for that issue?\nis_exception(is_sat(features_in_slots(1) == 1)) ::: (A)\nis_exception(is_sat(features_in_slots(1) == 2)) ::: (B)\nis_exception(is_sat(features_in_slots(1) == 3)) ::: (C)\nis_exception(is_sat(features_in_slots(1) == 4)) ::: (D)\nis_exception(is_sat(features_in_slots(1) == 5)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201506_4-G_4_23",
    "context": "Each issue of a business newsletter has five slots, numbered 1 through 5. The policy of the newsletter requires that there are at least three features per issue, with each feature completely occupying one or more of the slots. Each feature can be one of four types—finance, industry, marketing, or technology. Any slot not containing a feature contains a graphic. The newsletters policy further requires that each issue be structured as follows: Any feature occupying more than one slot must occupy consecutively numbered slots. If an issue has any finance or technology feature, then a finance or technology feature must occupy slot 1. An issue can have at most one industry feature.",
    "question": "Any of the following is allowed for an issue of the newsletter EXCEPT:",
    "answer": "D",
    "options": [
      "A) There is exactly one finance feature and no industry or marketing feature.",
      "B) There is exactly one industry feature and no finance or marketing feature.",
      "C) There is exactly one industry feature and no marketing or technology feature.",
      "D) There is exactly one marketing feature and no finance or technology feature.",
      "E) There is exactly one marketing feature and no industry or technology feature."
    ],
    "raw_logic_programs": [
      "# Declarations\nfeatures = EnumSort([finance, industry, marketing, technology])\nslots = EnumSort([1, 2, 3, 4, 5])\nfeatures_in_slots = Function([slots] -> [bool])\nfeatures_in_slots(1) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(2) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(3) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(4) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(5) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(1) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(2) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(3) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(4) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(5) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(1) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(2) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(3) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(4) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(5) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(1) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(2) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(3) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(4) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(5) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(1) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(2) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(3) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(4) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(5) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(1) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(2) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(3) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(4) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(5) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(1) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_in_slots(2) ::: Any feature occupying more than one slot must occupy consecutively numbered slots\nfeatures_"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_1_1",
    "context": "Six entertainers—Robinson, Shahpari, Tigay, Wu, Yeaton, and Zane—are being scheduled for the six performances on the opening day of a community festival. Each entertainer will perform at one of six times—in the morning at 9:00 A.M., 10:00 A.M., or 11:00 A.M., or in the afternoon at 2:00 P.M., 3:00 P.M., or 4:00 P.M.—with no two entertainers performing at the same scheduled time. The order in which the entertainers perform is subject to the following constraints: Robinson must perform at some time before Zane. Yeaton's performance must be the next performance after Wu's. Tigay must perform in the afternoon. Zane must perform in the morning.",
    "question": "Which one of the following could be the order, from first to last, in which the entertainers are scheduled to perform?",
    "answer": "A",
    "options": [
      "A) Robinson, Shahpari, Zane, Tigay, Wu, Yeaton",
      "B) Robinson, Wu, Yeaton, Zane, Shahpari, Tigay",
      "C) Robinson, Zane, Tigay, Shahpari, Wu, Yeaton",
      "D) Shahpari, Robinson, Zane, Wu, Tigay, Yeaton",
      "E) Wu, Yeaton, Zane, Shahpari, Tigay, Robinson"
    ],
    "raw_logic_programs": [
      "# Declarations\nentertainers = EnumSort([Robinson, Shahpari, Tigay, Wu, Yeaton, Zane])\ntimes = EnumSort([9:00, 10:00, 11:00, 2:00, 3:00, 4:00])\nperformances = Function([entertainers, times] -> [bool])\n\n# Constraints\nForAll([t:times], And(performances(Robinson, t) == True, performances(Zane, t) == True)) ::: Robinson must perform at some time before Zane\nperformances(Wu, 10:00) == True ::: Yeaton's performance must be the next performance after Wu's\nperformances(Tigay, 2:00) == True ::: Tigay must perform in the afternoon\nperformances(Zane, 9:00) == True ::: Zane must perform in the morning\n\n# Options\nQuestion ::: ::: Which one of the following could be the order, from first to last, in which the entertainers are scheduled to perform?\nis_sat(ForAll([t:times], And(performances(Robinson, t) == True, performances(Zane, t) == True))) ::: (A)\nis_sat(ForAll([t:times], And(performances(Wu, t) == True, performances(Zane, t) == True))) ::: (B)\nis_sat(ForAll([t:times], And(performances(Tigay, t) == True, performances(Zane, t) == True))) ::: (C)\nis_sat(ForAll([t:times], And(performances(Shahpari, t) == True, performances(Zane, t) == True))) ::: (D)\nis_sat(ForAll([t:times], And(performances(Wu, t) == True, performances(Tigay, t) == True))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_1_2",
    "context": "Six entertainers—Robinson, Shahpari, Tigay, Wu, Yeaton, and Zane—are being scheduled for the six performances on the opening day of a community festival. Each entertainer will perform at one of six times—in the morning at 9:00 A.M., 10:00 A.M., or 11:00 A.M., or in the afternoon at 2:00 P.M., 3:00 P.M., or 4:00 P.M.—with no two entertainers performing at the same scheduled time. The order in which the entertainers perform is subject to the following constraints: Robinson must perform at some time before Zane. Yeaton's performance must be the next performance after Wu's. Tigay must perform in the afternoon. Zane must perform in the morning.",
    "question": "If Wu is scheduled to perform in the morning, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Robinson is scheduled to perform at 10:00 A.M.",
      "B) Shahpari is scheduled to perform at 3:00 P.M.",
      "C) Tigay is scheduled to perform at 2:00 P.M.",
      "D) Yeaton is scheduled to perform at 3:00 P.M.",
      "E) Zane is scheduled to perform at 11:00 A.M."
    ],
    "raw_logic_programs": [
      "# Declarations\nentertainers = EnumSort([Robinson, Shahpari, Tigay, Wu, Yeaton, Zane])\ntimes = EnumSort([9:00, 10:00, 11:00, 2:00, 3:00, 4:00])\nperformances = Function([entertainers, times] -> [bool])\n\n# Constraints\nForAll([t:times], And(performances(Robinson, t) == True, performances(Zane, t) == True)) ::: Robinson must perform at some time before Zane\nperformances(Wu, 9:00) == True ::: Yeaton's performance must be the next performance after Wu's\nperformances(Tigay, 2:00) == True ::: Tigay must perform in the afternoon\nperformances(Zane, 9:00) == True ::: Zane must perform in the morning\n\n# Options\nQuestion ::: If Wu is scheduled to perform in the morning, then which one of the following could be true?\nis_sat(performances(Robinson, 10:00) == True) ::: (A)\nis_sat(performances(Shahpari, 3:00) == True) ::: (B)\nis_sat(performances(Tigay, 2:00) == True) ::: (C)\nis_sat(performances(Yeaton, 3:00) == True) ::: (D)\nis_sat(performances(Zane, 11:00) == True) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_1_3",
    "context": "Six entertainers—Robinson, Shahpari, Tigay, Wu, Yeaton, and Zane—are being scheduled for the six performances on the opening day of a community festival. Each entertainer will perform at one of six times—in the morning at 9:00 A.M., 10:00 A.M., or 11:00 A.M., or in the afternoon at 2:00 P.M., 3:00 P.M., or 4:00 P.M.—with no two entertainers performing at the same scheduled time. The order in which the entertainers perform is subject to the following constraints: Robinson must perform at some time before Zane. Yeaton's performance must be the next performance after Wu's. Tigay must perform in the afternoon. Zane must perform in the morning.",
    "question": "Shahpari CANNOT be scheduled to perform at which one of the following times?",
    "answer": "D",
    "options": [
      "A) 9:00 A.M.",
      "B) 10:00 A.M.",
      "C) 11:00 A.M.",
      "D) 2:00 P.M.",
      "E) 3:00 P.M."
    ],
    "raw_logic_programs": [
      "# Declarations\nentertainers = EnumSort([Robinson, Shahpari, Tigay, Wu, Yeaton, Zane])\ntimes = EnumSort([9:00 A.M., 10:00 A.M., 11:00 A.M., 2:00 P.M., 3:00 P.M., 4:00 P.M.])\nperformances = Function([entertainers, times] -> [bool])\n\n# Constraints\nForAll([t:times], And(performances(Robinson, t), performances(Zane, t))) ::: Robinson must perform at some time before Zane\nperformances(Wu, 2:00 P.M.) ::: Wu's performance must be the next performance after Wu's\nperformances(Tigay, 2:00 P.M.) ::: Tigay must perform in the afternoon\nperformances(Zane, 9:00 A.M.) ::: Zane must perform in the morning\n\n# Options\nQuestion ::: ::: Shahpari CANNOT be scheduled to perform at which one of the following times?\nis_exception(is_sat(performances(Shahpari, 10:00 A.M.) == False)) ::: (A)\nis_exception(is_sat(performances(Shahpari, 11:00 A.M.) == False)) ::: (B)\nis_exception(is_sat(performances(Shahpari, 2:00 P.M.) == False)) ::: (C)\nis_exception(is_sat(performances(Shahpari, 3:00 P.M.) == False)) ::: (D)\nis_exception(is_sat(performances(Shahpari, 4:00 P.M.) == False)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_1_4",
    "context": "Six entertainers—Robinson, Shahpari, Tigay, Wu, Yeaton, and Zane—are being scheduled for the six performances on the opening day of a community festival. Each entertainer will perform at one of six times—in the morning at 9:00 A.M., 10:00 A.M., or 11:00 A.M., or in the afternoon at 2:00 P.M., 3:00 P.M., or 4:00 P.M.—with no two entertainers performing at the same scheduled time. The order in which the entertainers perform is subject to the following constraints: Robinson must perform at some time before Zane. Yeaton's performance must be the next performance after Wu's. Tigay must perform in the afternoon. Zane must perform in the morning.",
    "question": "What is the earliest time that Wu could be scheduled to perform?",
    "answer": "C",
    "options": [
      "A) 9:00 A.M.",
      "B) 10:00 A.M.",
      "C) 11:00 A.M.",
      "D) 2:00 P.M.",
      "E) 3:00 P.M."
    ],
    "raw_logic_programs": [
      "# Declarations\nentertainers = EnumSort([Robinson, Shahpari, Tigay, Wu, Yeaton, Zane])\ntimes = EnumSort([9:00 A.M., 10:00 A.M., 11:00 A.M., 2:00 P.M., 3:00 P.M., 4:00 P.M.])\nperformances = Function([entertainers, times] -> [bool])\n\n# Constraints\nForAll([t:times], And(performances(Robinson, t) == True, performances(Zane, t) == True)) ::: Robinson must perform at some time before Zane\nperformances(Wu, 9:00 A.M.) ::: Wu's performance must be the next performance after Wu's\nperformances(Tigay, 2:00 P.M.) ::: Tigay must perform in the afternoon\nperformances(Zane, 9:00 A.M.) ::: Zane must perform in the morning\n\n# Options\nQuestion ::: What is the earliest time that Wu could be scheduled to perform?\nis_valid(Exists([t:times], performances(Wu, t) == 2:00 P.M.)) ::: (A)\nis_valid(Exists([t:times], performances(Wu, t) == 3:00 P.M.)) ::: (B)\nis_valid(Exists([t:times], performances(Wu, t) == 4:00 P.M.)) ::: (C)\nis_valid(Exists([t:times], performances(Wu, t) == 9:00 A.M.)) ::: (D)\nis_valid(Exists([t:times], performances(Wu, t) == 10:00 A.M.)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_1_5",
    "context": "Six entertainers—Robinson, Shahpari, Tigay, Wu, Yeaton, and Zane—are being scheduled for the six performances on the opening day of a community festival. Each entertainer will perform at one of six times—in the morning at 9:00 A.M., 10:00 A.M., or 11:00 A.M., or in the afternoon at 2:00 P.M., 3:00 P.M., or 4:00 P.M.—with no two entertainers performing at the same scheduled time. The order in which the entertainers perform is subject to the following constraints: Robinson must perform at some time before Zane. Yeaton's performance must be the next performance after Wu's. Tigay must perform in the afternoon. Zane must perform in the morning.",
    "question": "Which one of the following is a complete and accurate list of the entertainers who must be scheduled to perform in the afternoon?",
    "answer": "C",
    "options": [
      "A) Tigay",
      "B) Tigay, Wu",
      "C) Tigay, Yeaton",
      "D) Tigay, Wu, Yeaton",
      "E) Tigay, Shahpari, Yeaton"
    ],
    "raw_logic_programs": [
      "# Declarations\nentertainers = EnumSort([Robinson, Shahpari, Tigay, Wu, Yeaton, Zane])\ntimes = EnumSort([9:00, 10:00, 11:00, 2:00, 3:00, 4:00])\nperformances = Function([entertainers, times] -> [bool])\n\n# Constraints\nForAll([t:times], And(performances(Robinson, t) == True, performances(Zane, t) == True)) ::: Robinson must perform at some time before Zane\nAnd(performances(Wu, 2:00), performances(Yeaton, 3:00)) ::: Yeaton's performance must be the next performance after Wu's\nperformances(Tigay, 2:00) ::: Tigay must perform in the afternoon\nperformances(Zane, 9:00) ::: Zane must perform in the morning\n\n# Options\nQuestion ::: Which one of the following is a complete and accurate list of the entertainers who must be scheduled to perform in the afternoon?\nis_sat(ForAll([t:times], And(performances(Tigay, t) == True, performances(Wu, t) == True))) ::: (A)\nis_sat(ForAll([t:times], And(performances(Tigay, t) == True, performances(Yeaton, t) == True))) ::: (B)\nis_sat(ForAll([t:times], And(performances(Tigay, t) == True, performances(Wu, t) == True, performances(Yeaton, t) == True))) ::: (C)\nis_sat(ForAll([t:times], And(performances(Tigay, t) == True, performances(Shahpari, t) == True))) ::: (D)\nis_sat(ForAll([t:times], And(performances(Tigay, t) == True, performances(Wu, t) == True, performances(Yeaton, t) == True, performances(Shahpari, t) == True))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_2_6",
    "context": "Exactly six of eight ceramic bowls, each crafted by exactly one of eight potters—Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, and Vance—will be displayed in a row in positions consecutively numbered 1 through 6, one bowl per position. The display is subject to the following conditions: If Larsen's bowl is displayed, Mills's bowl cannot be displayed. Park's bowl can be displayed only if it is next to Olivera's bowl and next to Serra's bowl. Reigel's bowl can be displayed only in either position 1 or position 6. Serra's bowl cannot be displayed in either position 2 or position 4. Neiman's bowl can be displayed only in position 5.",
    "question": "Which one of the following could be the display of bowls, listed by potters name, in order from position 1 through position 6?",
    "answer": "E",
    "options": [
      "A) Larsen, Mills, Serra, Park, Olivera, Reigel",
      "B) Larsen, Neiman, Olivera, Park, Serra, Vance",
      "C) Mills, Olivera, Park, Serra, Reigel, Vance",
      "D) Reigel, Park, Serra, Olivera, Neiman, Mills",
      "E) Serra, Park, Olivera, Vance, Larsen, Reigel"
    ],
    "raw_logic_programs": [
      "# Declarations\npotters = EnumSort([Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, Vance])\nbowls = EnumSort([1, 2, 3, 4, 5, 6])\ndisplayed = Function([potters, bowls] -> [bool])\n\n# Constraints\nForAll([b:bowls], And(displayed(Larsen, b) == displayed(Mills, b), displayed(Mills, b) == False)) ::: If Larsen's bowl is displayed, Mills's bowl cannot be displayed\nForAll([b:bowls], And(displayed(Park, b) == displayed(Olivera, b), displayed(Olivera, b) == displayed(Serra, b))) ::: Park's bowl can be displayed only if it is next to Olivera's bowl and next to Serra's bowl\nForAll([b:bowls], And(displayed(Reigel, b) == displayed(b == 1) || displayed(Reigel, b) == displayed(b == 6))) ::: Reigel's bowl can be displayed only in either position 1 or position 6\nForAll([b:bowls], And(displayed(Serra, b) == displayed(b == 2) || displayed(Serra, b) == displayed(b == 4))) ::: Serra's bowl cannot be displayed in either position 2 or position 4\nForAll([b:bowls], And(displayed(Neiman, b) == displayed(b == 5))) ::: Neiman's bowl can be displayed only in position 5\n\n# Options\nQuestion ::: ::: Which one of the following could be the display of bowls, listed by potters name, in order from position 1 through position 6?\nis_exception(is_sat(displayed(Larsen, 1))) ::: (A)\nis_exception(is_sat(displayed(Mills, 2))) ::: (B)\nis_exception(is_sat(displayed(Olivera, 3))) ::: (C)\nis_exception(is_sat(displayed(Park, 4))) ::: (D)\nis_exception(is_sat(displayed(Reigel, 5))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_2_7",
    "context": "Exactly six of eight ceramic bowls, each crafted by exactly one of eight potters—Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, and Vance—will be displayed in a row in positions consecutively numbered 1 through 6, one bowl per position. The display is subject to the following conditions: If Larsen's bowl is displayed, Mills's bowl cannot be displayed. Park's bowl can be displayed only if it is next to Olivera's bowl and next to Serra's bowl. Reigel's bowl can be displayed only in either position 1 or position 6. Serra's bowl cannot be displayed in either position 2 or position 4. Neiman's bowl can be displayed only in position 5.",
    "question": "If Neiman's bowl and Park's bowl are both displayed, which one of the following is a potter whose bowl could be displayed in position 1?",
    "answer": "D",
    "options": [
      "A) Larsen",
      "B) Park",
      "C) Reigel",
      "D) Serra",
      "E) Vance"
    ],
    "raw_logic_programs": [
      "# Declarations\npotters = EnumSort([Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, Vance])\nbowls = EnumSort([Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, Vance])\ndisplayed = Function([bowls] -> [bool])\n\n# Constraints\nForAll([b:bowls], And(1 <= displayed(b), displayed(b) <= 8))\nForAll([b:bowls], And(displayed(b) == 1, Not(displayed(b) == 2)))\nForAll([b:bowls], And(displayed(b) == 1, Not(displayed(b) == 4)))\nForAll([b:bowls], And(displayed(b) == 1, Not(displayed(b) == 6)))\nForAll([b:bowls], And(displayed(b) == 1, Not(displayed(b) == 5)))\nForAll([b:bowls], And(displayed(b) == 1, Not(displayed(b) == 3)))\nForAll([b:bowls], And(displayed(b) == 1, Not(displayed(b) == 7)))\nForAll([b:bowls], And(displayed(b) == 1, Not(displayed(b) == 8)))\nForAll([b:bowls], And(displayed(b) == 2, Not(displayed(b) == 1)))\nForAll([b:bowls], And(displayed(b) == 2, Not(displayed(b) == 3)))\nForAll([b:bowls], And(displayed(b) == 2, Not(displayed(b) == 4)))\nForAll([b:bowls], And(displayed(b) == 2, Not(displayed(b) == 5)))\nForAll([b:bowls], And(displayed(b) == 2, Not(displayed(b) == 6)))\nForAll([b:bowls], And(displayed(b) == 2, Not(displayed(b) == 7)))\nForAll([b:bowls], And(displayed(b) == 2, Not(displayed(b) == 8)))\nForAll([b:bowls], And(displayed(b) == 3, Not(displayed(b) == 1)))\nForAll([b:bowls], And(displayed(b) == 3, Not(displayed(b) == 2)))\nForAll([b:bowls], And(displayed(b) == 3, Not(displayed(b) == 4)))\nForAll([b:bowls], And(displayed(b) == 3, Not(displayed(b) == 5)))\nForAll([b:bowls], And(displayed(b) == 3, Not(displayed(b) == 6)))\nForAll([b:bowls], And(displayed(b) == 3, Not(displayed(b) == 7)))\nForAll([b:bowls], And(displayed(b) == 3, Not(displayed(b) == 8)))\nForAll([b:bowls], And(displayed(b) == 4, Not(displayed(b) == 1)))\nForAll([b:bowls], And(displayed(b) == 4, Not(displayed(b) == 2)))\nForAll([b:bowls], And(displayed(b) == 4, Not(displayed(b) == 3)))\nForAll([b:bowls], And(displayed(b) == 4, Not(displayed(b) == 5)))\nForAll([b:bowls], And(displayed(b) == 4, Not(displayed(b) == 6)))\nForAll([b:bowls], And(displayed(b) == 4, Not(displayed(b) == 7)))\nForAll([b:bowls], And(displayed(b) == 4, Not(displayed(b) == 8)))\nForAll([b:bowls], And(displayed(b) == 5, Not(displayed(b) == 1)))\nForAll([b:bowls], And"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_2_8",
    "context": "Exactly six of eight ceramic bowls, each crafted by exactly one of eight potters—Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, and Vance—will be displayed in a row in positions consecutively numbered 1 through 6, one bowl per position. The display is subject to the following conditions: If Larsen's bowl is displayed, Mills's bowl cannot be displayed. Park's bowl can be displayed only if it is next to Olivera's bowl and next to Serra's bowl. Reigel's bowl can be displayed only in either position 1 or position 6. Serra's bowl cannot be displayed in either position 2 or position 4. Neiman's bowl can be displayed only in position 5.",
    "question": "If Larsen's bowl is displayed in position 6 and Olivera's bowl is displayed in position 2, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) Mills's bowl is displayed in position 3.",
      "B) Serra's bowl is displayed in position 1.",
      "C) Serra's bowl is displayed in position 3.",
      "D) Vance's bowl is displayed in position 1.",
      "E) Vance's bowl is displayed in position 3."
    ],
    "raw_logic_programs": [
      "# Declarations\nbowls = EnumSort([Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, Vance])\npotters = EnumSort([Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, Vance])\ndisplayed = Function([bowls, potters] -> [bool])\n\n# Constraints\nForAll([b:bowls, p:potters], And(displayed(b, p) == True, displayed(b, p) == True)) ::: each bowl is displayed by exactly one potter\nAnd(displayed(Larsen, Mills), Not(displayed(Mills, Larsen))) ::: If Larsen's bowl is displayed, Mills's bowl cannot be displayed\nAnd(displayed(Park, Olivera), displayed(Park, Serra)) ::: Park's bowl can be displayed only if it is next to Olivera's bowl and next to Serra's bowl\nAnd(displayed(Reigel, 1), displayed(Reigel, 6)) ::: Reigel's bowl can be displayed only in either position 1 or position 6\nAnd(displayed(Serra, 2), displayed(Serra, 4)) ::: Serra's bowl cannot be displayed in either position 2 or position 4\nAnd(displayed(Neiman, 5), displayed(Neiman, 5)) ::: Neiman's bowl can be displayed only in position 5\n\n# Options\nQuestion ::: ::: If Larsen's bowl is displayed in position 6 and Olivera's bowl is displayed in position 2, which one of the following must be true?\nis_exception(is_sat(displayed(Mills, 3))) ::: (A)\nis_exception(is_sat(displayed(Serra, 1))) ::: (B)\nis_exception(is_sat(displayed(Serra, 3))) ::: (C)\nis_exception(is_sat(displayed(Vance, 1))) ::: (D)\nis_exception(is_sat(displayed(Vance, 3))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_2_9",
    "context": "Exactly six of eight ceramic bowls, each crafted by exactly one of eight potters—Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, and Vance—will be displayed in a row in positions consecutively numbered 1 through 6, one bowl per position. The display is subject to the following conditions: If Larsen's bowl is displayed, Mills's bowl cannot be displayed. Park's bowl can be displayed only if it is next to Olivera's bowl and next to Serra's bowl. Reigel's bowl can be displayed only in either position 1 or position 6. Serra's bowl cannot be displayed in either position 2 or position 4. Neiman's bowl can be displayed only in position 5.",
    "question": "If Park's bowl is displayed in position 4, then the bowl displayed in position 2 must be",
    "answer": "A",
    "options": [
      "A) Larsen's, Mills's, or Vance's",
      "B) Larsen's, Neiman's, or Vance's",
      "C) Larsen's, Serra's, or Vance's",
      "D) Mills's, Reigel's, or Vance's",
      "E) Mills's, Serra's, or Vance's"
    ],
    "raw_logic_programs": [
      "# Declarations\nbowls = EnumSort([Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, Vance])\npotters = EnumSort([Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, Vance])\ndisplayed = Function([bowls, potters] -> [bool])\n\n# Constraints\nForAll([b:bowls, p:potters], And(displayed(b, p) == True, Not(displayed(b, p)))) ::: each bowl is crafted by exactly one of eight potters\nAnd(displayed(Larsen, Mills), Not(displayed(Mills, Larsen))) ::: If Larsen's bowl is displayed, Mills's bowl cannot be displayed\nAnd(displayed(Park, Olivera), displayed(Park, Serra)) ::: Park's bowl can be displayed only if it is next to Olivera's bowl and next to Serra's bowl\nAnd(displayed(Reigel, 1) == True, displayed(Reigel, 6) == True) ::: Reigel's bowl can be displayed only in either position 1 or position 6\nAnd(displayed(Serra, 2) == False, displayed(Serra, 4) == False) ::: Serra's bowl cannot be displayed in either position 2 or position 4\nAnd(displayed(Neiman, 5) == True) ::: Neiman's bowl can be displayed only in position 5\n\n# Options\nQuestion ::: ::: If Park's bowl is displayed in position 4, then the bowl displayed in position 2 must be\nis_exception(is_sat(displayed(Park, 4) == True)) ::: (A)\nis_exception(is_sat(displayed(Park, 2) == True)) ::: (B)\nis_exception(is_sat(displayed(Park, 1) == True)) ::: (C)\nis_exception(is_sat(displayed(Park, 6) == True)) ::: (D)\nis_exception(is_sat(displayed(Park, 5) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_2_10",
    "context": "Exactly six of eight ceramic bowls, each crafted by exactly one of eight potters—Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, and Vance—will be displayed in a row in positions consecutively numbered 1 through 6, one bowl per position. The display is subject to the following conditions: If Larsen's bowl is displayed, Mills's bowl cannot be displayed. Park's bowl can be displayed only if it is next to Olivera's bowl and next to Serra's bowl. Reigel's bowl can be displayed only in either position 1 or position 6. Serra's bowl cannot be displayed in either position 2 or position 4. Neiman's bowl can be displayed only in position 5.",
    "question": "If Larsen's bowl is displayed in position 1 and Olivera's bowl is displayed in position 4, which one of the following is a potter whose bowl CANNOT be displayed?",
    "answer": "B",
    "options": [
      "A) Neiman",
      "B) Park",
      "C) Reigel",
      "D) Serra",
      "E) Vance"
    ],
    "raw_logic_programs": [
      "# Declarations\npotters = EnumSort([Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, Vance])\nbowls = EnumSort([Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, Vance])\ndisplayed = Function([bowls, positions:int] -> [bool])\n\n# Constraints\nForAll([b:bowls], And(1 <= displayed(b, 1), displayed(b, 1) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 2), displayed(b, 2) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 3), displayed(b, 3) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 4), displayed(b, 4) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 5), displayed(b, 5) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 6), displayed(b, 6) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 1), displayed(b, 1) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 2), displayed(b, 2) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 3), displayed(b, 3) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 4), displayed(b, 4) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 5), displayed(b, 5) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 6), displayed(b, 6) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 1), displayed(b, 1) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 2), displayed(b, 2) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 3), displayed(b, 3) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 4), displayed(b, 4) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 5), displayed(b, 5) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 6), displayed(b, 6) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 1), displayed(b, 1) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 2), displayed(b, 2) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 3), displayed(b, 3) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 4), displayed(b, 4) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 5), displayed(b, 5) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 6), displayed(b, 6) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 1), displayed(b, 1) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 2), displayed(b, 2) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 3), displayed(b, 3) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 4), displayed(b, 4) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 5), displayed(b, 5) <= 6))\nForAll([b:bowls], And(1 <= displayed(b, 6), displayed(b, 6) <= 6))"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_2_11",
    "context": "Exactly six of eight ceramic bowls, each crafted by exactly one of eight potters—Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, and Vance—will be displayed in a row in positions consecutively numbered 1 through 6, one bowl per position. The display is subject to the following conditions: If Larsen's bowl is displayed, Mills's bowl cannot be displayed. Park's bowl can be displayed only if it is next to Olivera's bowl and next to Serra's bowl. Reigel's bowl can be displayed only in either position 1 or position 6. Serra's bowl cannot be displayed in either position 2 or position 4. Neiman's bowl can be displayed only in position 5.",
    "question": "Which one of the following is a potter whose bowl must be displayed?",
    "answer": "B",
    "options": [
      "A) Neiman",
      "B) Olivera",
      "C) Park",
      "D) Reigel",
      "E) Vance"
    ],
    "raw_logic_programs": [
      "# Declarations\npotters = EnumSort([Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, Vance])\nbowls = EnumSort([1, 2, 3, 4, 5, 6])\ndisplayed = Function([potters, bowls] -> [bool])\n\n# Constraints\nForAll([b:bowls], And(1 <= displayed(potter, b), displayed(potter, b) <= 8)) ::: no two bowls are displayed at the same time\nAnd(displayed(Larsen, 1), Not(displayed(Mills, 1))) ::: If Larsen's bowl is displayed, Mills's bowl cannot be displayed\nAnd(displayed(Park, 1), And(displayed(Olivera, 2), displayed(Serra, 4))) ::: Park's bowl can be displayed only if it is next to Olivera's bowl and next to Serra's bowl\nAnd(displayed(Reigel, 1) | displayed(Reigel, 6)) ::: Reigel's bowl can be displayed only in either position 1 or position 6\nAnd(displayed(Serra, 2) | displayed(Serra, 4)) ::: Serra's bowl cannot be displayed in either position 2 or position 4\nAnd(displayed(Neiman, 5)) ::: Neiman's bowl can be displayed only in position 5\n\n# Options\nQuestion ::: ::: Which one of the following is a potter whose bowl must be displayed?\nis_exception(is_sat(displayed(Neiman, 5))) ::: (A)\nis_exception(is_sat(displayed(Olivera, 2))) ::: (B)\nis_exception(is_sat(displayed(Park, 1))) ::: (C)\nis_exception(is_sat(displayed(Reigel, 1))) ::: (D)\nis_exception(is_sat(displayed(Vance, 6))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_2_12",
    "context": "Exactly six of eight ceramic bowls, each crafted by exactly one of eight potters—Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, and Vance—will be displayed in a row in positions consecutively numbered 1 through 6, one bowl per position. The display is subject to the following conditions: If Larsen's bowl is displayed, Mills's bowl cannot be displayed. Park's bowl can be displayed only if it is next to Olivera's bowl and next to Serra's bowl. Reigel's bowl can be displayed only in either position 1 or position 6. Serra's bowl cannot be displayed in either position 2 or position 4. Neiman's bowl can be displayed only in position 5.",
    "question": "If Neiman's bowl, Park's bowl, and Reigel's bowl are all displayed, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Neiman's bowl is displayed next to Reigel's bowl.",
      "B) Neiman's bowl is displayed next to Vance's bowl.",
      "C) Olivera's bowl is displayed next to Reigel's bowl.",
      "D) Olivera's bowl is displayed next to Vance's bowl.",
      "E) Serra's bowl is displayed next to Vance's bowl."
    ],
    "raw_logic_programs": [
      "# Declarations\nbowls = EnumSort([Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, Vance])\npotters = EnumSort([Larsen, Mills, Neiman, Olivera, Park, Reigel, Serra, Vance])\ndisplayed = Function([bowls] -> [bool])\n\n# Constraints\nForAll([b:bowls], And(displayed(b) == True, Not(displayed(b) == True))) ::: each bowl is displayed exactly once\nAnd(displayed(Larsen), Not(displayed(Mills))) ::: If Larsen's bowl is displayed, Mills's bowl cannot be displayed\nAnd(displayed(Park), And(displayed(Olivera), displayed(Serra))) ::: Park's bowl can be displayed only if it is next to Olivera's bowl and next to Serra's bowl\nAnd(displayed(Reigel), Or(displayed(1), displayed(6))) ::: Reigel's bowl can be displayed only in either position 1 or position 6\nAnd(displayed(Serra), Or(displayed(2), displayed(4))) ::: Serra's bowl cannot be displayed in either position 2 or position 4\nAnd(displayed(Neiman), Or(displayed(5), displayed(6))) ::: Neiman's bowl can be displayed only in position 5\n\n# Options\nQuestion ::: ::: If Neiman's bowl, Park's bowl, and Reigel's bowl are all displayed, which one of the following must be true?\nis_exception(is_sat(displayed(Neiman) == True)) ::: (A)\nis_exception(is_sat(displayed(Park) == True)) ::: (B)\nis_exception(is_sat(displayed(Olivera) == True)) ::: (C)\nis_exception(is_sat(displayed(Reigel) == True)) ::: (D)\nis_exception(is_sat(displayed(Vance) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_3_13",
    "context": "Four employees—Jackson, Larabee, Paulson, and Torillo—are to select from among four offices—W, X, Y, and Z. The order in which they select, from first to fourth, is to be decided by a random drawing. Each employee has ranked the offices from first (highest) to fourth (lowest) as follows: Jackson: Y, X, Z, W Larabee: X, Z, W, Y Paulson: Y, Z, X, W Torillo: X, Y, Z, W The following restrictions must apply: Each employee selects an office that has not been selected previously. Each employee selects only one office. Each employee selects the office that he or she ranks highest among the unselected offices.",
    "question": "Which one of the following is a possible matching of employees with the offices they select?",
    "answer": "B",
    "options": [
      "A) Jackson: W; Larabee: Y; Paulson: X; Torillo: Z",
      "B) Jackson: Z; Larabee: X; Paulson: W; Torillo: Y",
      "C) Jackson: X; Larabee: W; Paulson: Z; Torillo: Y",
      "D) Jackson: Y; Larabee: W; Paulson: X; Torillo: Z",
      "E) Jackson: Y; Larabee: Z; Paulson: X; Torillo: W"
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Jackson, Larabee, Paulson, Torillo])\noffices = EnumSort([W, X, Y, Z])\nselected = Function([employees, offices] -> [bool])\n\n# Constraints\nForAll([e:employees, o:offices], And(selected(e, o), selected(e, o) == selected(e, o))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees, o:offices], And(selected(e, o), selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o))) ::: each employee selects only one office\nForAll([e:employees, o:offices], And(selected(e, o), selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o))) ::: each employee selects the office that he or she ranks highest among the unselected offices\n\n# Options\nQuestion ::: ::: Which one of the following is a possible matching of employees with the offices they select?\nis_sat(ForAll([e:employees, o:offices], selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o))) ::: (A)\nis_sat(ForAll([e:employees, o:offices], selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o))) ::: (B)\nis_sat(ForAll([e:employees, o:offices], selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o))) ::: (C)\nis_sat(ForAll([e:employees, o:offices], selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o))) ::: (D)\nis_sat(ForAll([e:employees, o:offices], selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_3_14",
    "context": "Four employees—Jackson, Larabee, Paulson, and Torillo—are to select from among four offices—W, X, Y, and Z. The order in which they select, from first to fourth, is to be decided by a random drawing. Each employee has ranked the offices from first (highest) to fourth (lowest) as follows: Jackson: Y, X, Z, W Larabee: X, Z, W, Y Paulson: Y, Z, X, W Torillo: X, Y, Z, W The following restrictions must apply: Each employee selects an office that has not been selected previously. Each employee selects only one office. Each employee selects the office that he or she ranks highest among the unselected offices.",
    "question": "Which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) At most one of the employees selects the office he or she ranks first.",
      "B) At most one of the employees selects the office he or she ranks second.",
      "C) At least one of the employees selects the office he or she ranks first.",
      "D) At least one of the employees selects the office he or she ranks second.",
      "E) At least one of the employees selects the office he or she ranks third."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Jackson, Larabee, Paulson, Torillo])\noffices = EnumSort([W, X, Y, Z])\nselected = Function([employees, offices] -> [bool])\n\n# Constraints\nForAll([e:employees], And(1 <= selected(e, offices) <= 4, selected(e, offices) == selected(e, offices - 1))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selected(e, offices) <= 4, selected(e, offices) == selected(e, offices + 1))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selected(e, offices) <= 4, selected(e, offices) == selected(e, offices - 1))) ::: each employee selects only one office\nForAll([e:employees], And(1 <= selected(e, offices) <= 4, selected(e, offices) == selected(e, offices + 1))) ::: each employee selects only one office\nForAll([e:employees], And(1 <= selected(e, offices) <= 4, selected(e, offices) == selected(e, offices - 1))) ::: each employee selects the office that he or she ranks highest among the unselected offices\nForAll([e:employees], And(1 <= selected(e, offices) <= 4, selected(e, offices) == selected(e, offices + 1))) ::: each employee selects the office that he or she ranks highest among the unselected offices\n\n# Options\nQuestion ::: ::: Which one of the following must be true?\nis_exception(is_sat(selected(Jackson, offices) == 1)) ::: (A)\nis_exception(is_sat(selected(Larabee, offices) == 1)) ::: (B)\nis_exception(is_sat(selected(Paulson, offices) == 1)) ::: (C)\nis_exception(is_sat(selected(Torillo, offices) == 1)) ::: (D)\nis_exception(is_sat(selected(Jackson, offices) == 2)) ::: (E)\nis_exception(is_sat(selected(Larabee, offices) == 2)) ::: (F)\nis_exception(is_sat(selected(Paulson, offices) == 2)) ::: (G)\nis_exception(is_sat(selected(Torillo, offices) == 2)) ::: (H)\nis_exception(is_sat(selected(Jackson, offices) == 3)) ::: (I)\nis_exception(is_sat(selected(Larabee, offices) == 3)) ::: (J)\nis_exception(is_sat(selected(Paulson, offices) == 3)) ::: (K)\nis_exception(is_sat(selected(Torillo, offices) == 3)) ::: (L)\nis_exception(is_sat(selected(Jackson, offices) == 4)) ::: (M)\nis_exception(is_sat(selected(Larabee, offices) == 4)) ::: (N)\nis_exception(is_sat(selected(Paulson, offices) == 4)) ::: (O)\nis_exception(is_sat(selected(Torillo, offices) == 4)) ::: (P)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_3_15",
    "context": "Four employees—Jackson, Larabee, Paulson, and Torillo—are to select from among four offices—W, X, Y, and Z. The order in which they select, from first to fourth, is to be decided by a random drawing. Each employee has ranked the offices from first (highest) to fourth (lowest) as follows: Jackson: Y, X, Z, W Larabee: X, Z, W, Y Paulson: Y, Z, X, W Torillo: X, Y, Z, W The following restrictions must apply: Each employee selects an office that has not been selected previously. Each employee selects only one office. Each employee selects the office that he or she ranks highest among the unselected offices.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Exactly two of the employees each selects the office he or she ranks third.",
      "B) Exactly two of the employees each selects the office he or she ranks fourth.",
      "C) Exactly three of the employees each selects the office he or she ranks second.",
      "D) Exactly three of the employees each selects the office he or she ranks third.",
      "E) Exactly three of the employees each selects the office he or she ranks fourth."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Jackson, Larabee, Paulson, Torillo])\noffices = EnumSort([W, X, Y, Z])\nselected = Function([employees, offices] -> [bool])\n\n# Constraints\nForAll([e:employees], And(1 <= selected(e, offices) <= 4, selected(e, offices) == selected(e, offices + 1))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selected(e, offices) <= 4, selected(e, offices) == selected(e, offices - 1))) ::: each employee selects only one office\nForAll([e:employees], And(1 <= selected(e, offices) <= 4, selected(e, offices) == selected(e, offices + 1) == selected(e, offices - 1))) ::: each employee selects the office that he or she ranks highest among the unselected offices\n\n# Options\nQuestion ::: ::: Which one of the following could be true?\nis_sat(ForAll([e:employees], And(selected(e, offices) == selected(e, offices + 1), selected(e, offices) == selected(e, offices - 1)))) ::: (A)\nis_sat(ForAll([e:employees], And(selected(e, offices) == selected(e, offices + 1), selected(e, offices) == selected(e, offices - 1)))) ::: (B)\nis_sat(ForAll([e:employees], And(selected(e, offices) == selected(e, offices + 1), selected(e, offices) == selected(e, offices - 1)))) ::: (C)\nis_sat(ForAll([e:employees], And(selected(e, offices) == selected(e, offices + 1), selected(e, offices) == selected(e, offices - 1)))) ::: (D)\nis_sat(ForAll([e:employees], And(selected(e, offices) == selected(e, offices + 1), selected(e, offices) == selected(e, offices - 1)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_3_16",
    "context": "Four employees—Jackson, Larabee, Paulson, and Torillo—are to select from among four offices—W, X, Y, and Z. The order in which they select, from first to fourth, is to be decided by a random drawing. Each employee has ranked the offices from first (highest) to fourth (lowest) as follows: Jackson: Y, X, Z, W Larabee: X, Z, W, Y Paulson: Y, Z, X, W Torillo: X, Y, Z, W The following restrictions must apply: Each employee selects an office that has not been selected previously. Each employee selects only one office. Each employee selects the office that he or she ranks highest among the unselected offices.",
    "question": "If Paulson selects office W, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Exactly two of the employees each selects the office he or she ranks second.",
      "B) Exactly two of the employees each selects the office he or she ranks third.",
      "C) Exactly three of the employees each selects the office he or she ranks first.",
      "D) Jackson selects office X.",
      "E) Larabee selects office Z."
    ],
    "raw_logic_programs": [
      "# Declarations\nemployees = EnumSort([Jackson, Larabee, Paulson, Torillo])\noffices = EnumSort([W, X, Y, Z])\nselects = Function([employees, offices] -> [bool])\n\n# Constraints\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices - 1))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices + 1))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices - 2))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices + 2))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices - 3))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices + 3))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices - 4))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices + 4))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices - 5))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices + 5))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices - 6))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices + 6))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices - 7))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices + 7))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices - 8))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices + 8))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices - 9))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees], And(1 <= selects(e, offices) <= 4, selects(e, offices) == selects(e, offices + 9))) ::: each employee selects an office that has not been selected previously\nForAll([e"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_3_17",
    "context": "Four employees—Jackson, Larabee, Paulson, and Torillo—are to select from among four offices—W, X, Y, and Z. The order in which they select, from first to fourth, is to be decided by a random drawing. Each employee has ranked the offices from first (highest) to fourth (lowest) as follows: Jackson: Y, X, Z, W Larabee: X, Z, W, Y Paulson: Y, Z, X, W Torillo: X, Y, Z, W The following restrictions must apply: Each employee selects an office that has not been selected previously. Each employee selects only one office. Each employee selects the office that he or she ranks highest among the unselected offices.",
    "question": "Which one of the following must be true?",
    "answer": "E",
    "options": [
      "A) Jackson does not select office X.",
      "B) Larabee does not select office W.",
      "C) Larabee does not select office Z.",
      "D) Torillo does not select office X.",
      "E) Paulson does not select office X."
    ],
    "raw_logic_programs": [
      ".\n# Declarations\nemployees = EnumSort([Jackson, Larabee, Paulson, Torillo])\noffices = EnumSort([W, X, Y, Z])\nselected = Function([employees, offices] -> [bool])\n\n# Constraints\nForAll([e:employees, o:offices], And(selected(e, o), selected(e, o) == selected(e, o))) ::: each employee selects an office that has not been selected previously\nForAll([e:employees, o:offices], And(selected(e, o), selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o))) ::: each employee selects only one office\nForAll([e:employees, o:offices], And(selected(e, o), selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o))) ::: each employee selects the office that he or she ranks highest among the unselected offices\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_sat(ForAll([e:employees, o:offices], And(selected(e, o), selected(e, o) == selected(e, o) == selected(e, o) == selected(e, o)))) ::: (A)\nis_sat(ForAll([e:employees, o:offices], And(selected(e, o), selected(e, o) == selected(e, o) == selected(e, o)))) ::: (B)\nis_sat(ForAll([e:employees, o:offices], And(selected(e, o), selected(e, o) == selected(e, o)))) ::: (C)\nis_sat(ForAll([e:employees, o:offices], And(selected(e, o), selected(e, o) == selected(e, o)))) ::: (D)\nis_sat(ForAll([e:employees, o:offices], And(selected(e, o), selected(e, o) == selected(e, o)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_4_18",
    "context": "Exactly five volunteers—Haddad, Joslin, Kwon, Molina, and Nash—are being assigned to three community committees—X, Y, and Z. Each committee will have three volunteers assigned to it, with each volunteer on a committee holding exactly one of three positions—leader, secretary, or treasurer. The following conditions apply: If Nash is assigned to a committee, Nash must be the leader for that committee. Molina must be assigned to exactly one committee. Kwon must be assigned to Y but cannot be assigned to Z. Joslin must be the secretary for Y but cannot be assigned to X or Z.",
    "question": "Which one of the following could be the assignment of volunteers to Z?",
    "answer": "E",
    "options": [
      "A) leader: Haddad; secretary: Molina; treasurer: Joslin",
      "B) leader: Joslin; secretary: Haddad; treasurer: Molina",
      "C) leader: Kwon; secretary: Haddad; treasurer: Molina",
      "D) leader: Molina; secretary: Nash; treasurer: Haddad",
      "E) leader: Nash; secretary: Molina; treasurer: Haddad"
    ],
    "raw_logic_programs": [
      "# Declarations\nvolunteers = EnumSort([Haddad, Joslin, Kwon, Molina, Nash])\ncommittees = EnumSort([X, Y, Z])\nassignments = Function([volunteers, committees] -> [volunteers])\n\n# Constraints\nForAll([c:committees], And(Count([v:volunteers], assignments(v, c)) == 3, assignments(v, c) == assignments(v, c'))) ::: each committee will have three volunteers assigned to it, with each volunteer on a committee holding exactly one of three positions\nAnd(assignments(Nash, Z) == leader, assignments(Molina, Z) == secretary) ::: Nash must be the leader for that committee\nAnd(assignments(Molina, Z) == secretary, assignments(Molina, X) == secretary) ::: Molina must be assigned to exactly one committee\nAnd(assignments(Kwon, Y) == leader, assignments(Kwon, Z) == secretary) ::: Kwon must be assigned to Y but cannot be assigned to Z\nAnd(assignments(Joslin, Y) == secretary, assignments(Joslin, X) == secretary) ::: Joslin must be the secretary for Y but cannot be assigned to X or Z\n\n# Options\nQuestion ::: ::: Which one of the following could be the assignment of volunteers to Z?\nis_sat(ForAll([c:committees], And(assignments(Nash, c) == leader, assignments(Molina, c) == secretary))) ::: (A)\nis_sat(ForAll([c:committees], And(assignments(Molina, c) == secretary, assignments(Molina, c') == secretary))) ::: (B)\nis_sat(ForAll([c:committees], And(assignments(Kwon, c) == leader, assignments(Kwon, c') == secretary))) ::: (C)\nis_sat(ForAll([c:committees], And(assignments(Molina, c) == secretary, assignments(Molina, c') == treasurer))) ::: (D)\nis_sat(ForAll([c:committees], And(assignments(Nash, c) == leader, assignments(Molina, c') == treasurer))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_4_19",
    "context": "Exactly five volunteers—Haddad, Joslin, Kwon, Molina, and Nash—are being assigned to three community committees—X, Y, and Z. Each committee will have three volunteers assigned to it, with each volunteer on a committee holding exactly one of three positions—leader, secretary, or treasurer. The following conditions apply: If Nash is assigned to a committee, Nash must be the leader for that committee. Molina must be assigned to exactly one committee. Kwon must be assigned to Y but cannot be assigned to Z. Joslin must be the secretary for Y but cannot be assigned to X or Z.",
    "question": "If Kwon is assigned to be treasurer for exactly two of the committees, then any of the following could be true EXCEPT:",
    "answer": "C",
    "options": [
      "A) Haddad is assigned to be leader for Y.",
      "B) Haddad is assigned to be secretary for Z.",
      "C) Haddad is assigned to be treasurer for X.",
      "D) Molina is assigned to be treasurer for Z.",
      "E) Nash is assigned to be leader for Y."
    ],
    "raw_logic_programs": [
      "# Declarations\nvolunteers = EnumSort([Haddad, Joslin, Kwon, Molina, Nash])\ncommittees = EnumSort([X, Y, Z])\npositions = EnumSort([leader, secretary, treasurer])\nassigned = Function([volunteers, committees] -> [bool])\n\n# Constraints\nForAll([c:committees], And(Count([v:volunteers], assigned(v, c)) == 3, Count([p:positions], assigned(v, c) == p) == 3)) ::: each committee will have three volunteers assigned to it, with each volunteer on a committee holding exactly one of three positions\nAnd(assigned(Nash, X), assigned(Nash, Y)) ::: Nash must be the leader for that committee\nAnd(assigned(Molina, X), assigned(Molina, Y)) ::: Molina must be assigned to exactly one committee\nAnd(assigned(Kwon, Y), assigned(Kwon, Z)) ::: Kwon must be assigned to Y but cannot be assigned to Z\nAnd(assigned(Joslin, Y), assigned(Joslin, X) == False) ::: Joslin must be the secretary for Y but cannot be assigned to X or Z\n\n# Options\nQuestion ::: If Kwon is assigned to be treasurer for exactly two of the committees, then any of the following could be true EXCEPT:\nis_exception(is_sat(assigned(Haddad, Y) == True)) ::: (A)\nis_exception(is_sat(assigned(Joslin, Z) == True)) ::: (B)\nis_exception(is_sat(assigned(Kwon, X) == True)) ::: (C)\nis_exception(is_sat(assigned(Molina, Z) == True)) ::: (D)\nis_exception(is_sat(assigned(Nash, Y) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_4_20",
    "context": "Exactly five volunteers—Haddad, Joslin, Kwon, Molina, and Nash—are being assigned to three community committees—X, Y, and Z. Each committee will have three volunteers assigned to it, with each volunteer on a committee holding exactly one of three positions—leader, secretary, or treasurer. The following conditions apply: If Nash is assigned to a committee, Nash must be the leader for that committee. Molina must be assigned to exactly one committee. Kwon must be assigned to Y but cannot be assigned to Z. Joslin must be the secretary for Y but cannot be assigned to X or Z.",
    "question": "Each of the following must be true EXCEPT:",
    "answer": "B",
    "options": [
      "A) Haddad is assigned to X.",
      "B) Haddad is assigned to Y.",
      "C) Kwon is assigned to X.",
      "D) Molina is assigned to Z.",
      "E) Nash is assigned to X."
    ],
    "raw_logic_programs": [
      "# Declarations\nvolunteers = EnumSort([Haddad, Joslin, Kwon, Molina, Nash])\ncommittees = EnumSort([X, Y, Z])\npositions = EnumSort([leader, secretary, treasurer])\nassigned = Function([volunteers, committees] -> [bool])\n\n# Constraints\nForAll([v:volunteers], And(1 <= assigned(v, committees), assigned(v, committees) <= 3))\nForAll([c:committees], And(3 <= assigned(volunteers, c), assigned(volunteers, c) <= 5))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c), assigned(volunteers, c) <= 3))\nForAll([c:committees], And(1 <= assigned(volunteers, c"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_4_21",
    "context": "Exactly five volunteers—Haddad, Joslin, Kwon, Molina, and Nash—are being assigned to three community committees—X, Y, and Z. Each committee will have three volunteers assigned to it, with each volunteer on a committee holding exactly one of three positions—leader, secretary, or treasurer. The following conditions apply: If Nash is assigned to a committee, Nash must be the leader for that committee. Molina must be assigned to exactly one committee. Kwon must be assigned to Y but cannot be assigned to Z. Joslin must be the secretary for Y but cannot be assigned to X or Z.",
    "question": "If Kwon is assigned to be leader for exactly one of the committees, then for which of the committees is the assignment of volunteers to positions fully determined?",
    "answer": "B",
    "options": [
      "A) X only",
      "B) Y only",
      "C) X and Y, but not Z",
      "D) Y and Z, but not X",
      "E) X and Z, but not Y"
    ],
    "raw_logic_programs": [
      "# Declarations\nvolunteers = EnumSort([Haddad, Joslin, Kwon, Molina, Nash])\ncommittees = EnumSort([X, Y, Z])\npositions = EnumSort([leader, secretary, treasurer])\nassigned = Function([volunteers, committees] -> [bool])\n\n# Constraints\nForAll([v:volunteers], And(1 <= assigned(v, committees), assigned(v, committees) <= 3)) ::: each volunteer is assigned to exactly one committee\nAnd(assigned(Nash, committees), assigned(Nash, X) == 1) ::: Nash is assigned to exactly one committee\nAnd(assigned(Molina, committees), assigned(Molina, X) == 0) ::: Molina must be assigned to exactly one committee\nAnd(assigned(Kwon, committees), assigned(Kwon, Y) == 1) ::: Kwon must be assigned to Y but cannot be assigned to Z\nAnd(assigned(Joslin, committees), assigned(Joslin, Y) == 1) ::: Joslin must be the secretary for Y but cannot be assigned to X or Z\n\n# Options\nQuestion ::: ::: If Kwon is assigned to be leader for exactly one of the committees, then for which of the committees is the assignment of volunteers to positions fully determined?\nis_sat(ForAll([c:committees], And(assigned(Kwon, c) == 1, assigned(Joslin, c) == 1))) ::: (A)\nis_sat(ForAll([c:committees], And(assigned(Kwon, c) == 1, assigned(Molina, c) == 1))) ::: (B)\nis_sat(ForAll([c:committees], And(assigned(Kwon, c) == 1, assigned(Nash, c) == 1))) ::: (C)\nis_sat(ForAll([c:committees], And(assigned(Kwon, c) == 1, assigned(Nash, c) == 1, assigned(Joslin, c) == 1))) ::: (D)\nis_sat(ForAll([c:committees], And(assigned(Kwon, c) == 1, assigned(Nash, c) == 1, assigned(Molina, c) == 1))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_4_22",
    "context": "Exactly five volunteers—Haddad, Joslin, Kwon, Molina, and Nash—are being assigned to three community committees—X, Y, and Z. Each committee will have three volunteers assigned to it, with each volunteer on a committee holding exactly one of three positions—leader, secretary, or treasurer. The following conditions apply: If Nash is assigned to a committee, Nash must be the leader for that committee. Molina must be assigned to exactly one committee. Kwon must be assigned to Y but cannot be assigned to Z. Joslin must be the secretary for Y but cannot be assigned to X or Z.",
    "question": "The assignment of volunteers to committees and positions is fully determined if which one of the following is true?",
    "answer": "C",
    "options": [
      "A) Haddad is assigned to be leader for exactly one of the committees.",
      "B) Haddad is assigned to be secretary for exactly two of the committees.",
      "C) Haddad is assigned to be treasurer for all three of the committees.",
      "D) Kwon is assigned to be treasurer for exactly two of the committees.",
      "E) Nash is assigned to be leader for all three of the committees."
    ],
    "raw_logic_programs": [
      "# Declarations\nvolunteers = EnumSort([Haddad, Joslin, Kwon, Molina, Nash])\ncommittees = EnumSort([X, Y, Z])\npositions = EnumSort([leader, secretary, treasurer])\nassign = Function([volunteers, committees] -> [positions])\n\n# Constraints\nForAll([c:committees], And(Count([v:volunteers], assign(v, c)) == 3, assign(v, c) == [leader, secretary, treasurer] for all v in volunteers)) ::: each committee will have three volunteers assigned to it, with each volunteer on a committee holding exactly one of three positions\nAnd(assign(Nash, X) == [leader], assign(Nash, Y) == [leader], assign(Nash, Z) == [leader]) ::: Nash must be assigned to exactly one committee and must be the leader for that committee\nAnd(assign(Molina, X) == [leader], assign(Molina, Y) == [leader], assign(Molina, Z) == [leader]) ::: Molina must be assigned to exactly one committee\nAnd(assign(Kwon, Y) == [treasurer], assign(Kwon, Z) == [treasurer]) ::: Kwon must be assigned to Y but cannot be assigned to Z\nAnd(assign(Joslin, Y) == [secretary], assign(Joslin, X) == [secretary], assign(Joslin, Z) == [secretary]) ::: Joslin must be the secretary for Y but cannot be assigned to X or Z\n\n# Options\nQuestion ::: ::: The assignment of volunteers to committees and positions is fully determined if which one of the following is true?\nis_exception(is_sat(assign(Haddad, X) == [leader])) ::: (A)\nis_exception(is_sat(assign(Haddad, Y) == [leader])) ::: (B)\nis_exception(is_sat(assign(Haddad, Z) == [leader])) ::: (C)\nis_exception(is_sat(assign(Kwon, Y) == [treasurer])) ::: (D)\nis_exception(is_sat(assign(Kwon, Z) == [treasurer])) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201512_3-G_4_23",
    "context": "Exactly five volunteers—Haddad, Joslin, Kwon, Molina, and Nash—are being assigned to three community committees—X, Y, and Z. Each committee will have three volunteers assigned to it, with each volunteer on a committee holding exactly one of three positions—leader, secretary, or treasurer. The following conditions apply: If Nash is assigned to a committee, Nash must be the leader for that committee. Molina must be assigned to exactly one committee. Kwon must be assigned to Y but cannot be assigned to Z. Joslin must be the secretary for Y but cannot be assigned to X or Z.",
    "question": "Which one of the following, if substituted for the condition that Molina must be assigned to exactly one committee, would have the same effect in determining the assignment of volunteers to committees?",
    "answer": "C",
    "options": [
      "A) Haddad must be assigned to more committees than Molina.",
      "B) Joslin must be assigned to more committees than Molina.",
      "C) Kwon must be assigned to more committees than Molina.",
      "D) Molina must be assigned to more committees than Haddad.",
      "E) Nash must be assigned to more committees than Molina."
    ],
    "raw_logic_programs": [
      "# Declarations\nvolunteers = EnumSort([Haddad, Joslin, Kwon, Molina, Nash])\ncommittees = EnumSort([X, Y, Z])\npositions = EnumSort([leader, secretary, treasurer])\nassign = Function([volunteers, committees] -> [bool])\n\n# Constraints\nForAll([v:volunteers], And(1 <= assign(v, committees), assign(v, committees) <= 3)) ::: each volunteer is assigned to exactly one committee\nAnd(assign(Nash, committees) == 3, assign(Molina, committees) == 1) ::: Nash is assigned to exactly one committee\nAnd(assign(Molina, committees) == 1, assign(Kwon, committees) == 1) ::: Molina is assigned to exactly one committee\nAnd(assign(Kwon, committees) == 1, assign(Joslin, committees) == 1) ::: Kwon is assigned to exactly one committee\nAnd(assign(Joslin, committees) == 1, assign(Haddad, committees) == 1) ::: Joslin is assigned to exactly one committee\nAnd(assign(Haddad, committees) == 1, assign(Nash, committees) == 1) ::: Haddad is assigned to exactly one committee\n\n# Options\nQuestion ::: ::: Which one of the following, if substituted for the condition that Molina must be assigned to exactly one committee, would have the same effect in determining the assignment of volunteers to committees?\nis_exception(is_sat(assign(Molina, committees) == 1)) ::: (A)\nis_exception(is_sat(assign(Haddad, committees) == 1)) ::: (B)\nis_exception(is_sat(assign(Joslin, committees) == 1)) ::: (C)\nis_exception(is_sat(assign(Kwon, committees) == 1)) ::: (D)\nis_exception(is_sat(assign(Nash, committees) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_1_1",
    "context": "In one week—Monday through Friday—a library's bookmobile will visit five of the following six neighborhoods—Hidden Hills, Lakeville, Nottingham, Oldtown, Park Plaza, and Sunnyside. Exactly one neighborhood will be visited on each of the five days, and none of the neighborhoods will be visited on more than one day. The bookmobile's schedule must conform to the following conditions: Hidden Hills is visited, but not on Friday. If Oldtown is visited, then it is visited on the day immediately before Hidden Hills is visited. If Lakeville is visited, then it is visited on Wednesday. Nottingham and Sunnyside are both visited, but not on consecutive days.",
    "question": "The five neighborhoods visited by the bookmobile, listed in order from Monday through Friday, could be",
    "answer": "B",
    "options": [
      "A) Nottingham, Lakeville, Oldtown, Hidden Hills, and Sunnyside",
      "B) Nottingham, Oldtown, Hidden Hills, Sunnyside, and Park Plaza",
      "C) Oldtown, Hidden Hills, Lakeville, Nottingham, and Sunnyside",
      "D) Sunnyside, Oldtown, Lakeville, Hidden Hills, and Nottingham",
      "E) Sunnyside, Park Plaza, Nottingham, Oldtown, and Hidden Hills"
    ],
    "raw_logic_programs": [
      "# Declarations\nneighborhoods = EnumSort([Hidden Hills, Lakeville, Nottingham, Oldtown, Park Plaza, Sunnyside])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nvisits = Function([days, neighborhoods] -> [bool])\n\n# Constraints\nForAll([d:days], And(1 <= visits(d, neighborhoods), visits(d, neighborhoods) <= 5)) ::: each day, the bookmobile visits exactly one neighborhood\nAnd(visits(Monday, Hidden Hills), visits(Monday, Nottingham) == False) ::: Hidden Hills is visited, but not on Friday\nAnd(visits(Tuesday, Oldtown), visits(Wednesday, Oldtown) == True) ::: If Oldtown is visited, then it is visited on the day immediately before Hidden Hills is visited\nAnd(visits(Wednesday, Lakeville), visits(Wednesday, Nottingham) == False) ::: Lakeville is visited on Wednesday\nAnd(visits(Thursday, Nottingham), visits(Thursday, Sunnyside) == True) ::: Nottingham and Sunnyside are both visited, but not on consecutive days\n\n# Options\nQuestion ::: ::: The five neighborhoods visited by the bookmobile, listed in order from Monday through Friday, could be\nis_sat(ForAll([d:days], And(visits(d, neighborhoods) == [Nottingham, Lakeville, Oldtown, Hidden Hills, Sunnyside]))) ::: (A)\nis_sat(ForAll([d:days], And(visits(d, neighborhoods) == [Nottingham, Oldtown, Hidden Hills, Sunnyside, Park Plaza]))) ::: (B)\nis_sat(ForAll([d:days], And(visits(d, neighborhoods) == [Oldtown, Hidden Hills, Lakeville, Nottingham, Sunnyside]))) ::: (C)\nis_sat(ForAll([d:days], And(visits(d, neighborhoods) == [Sunnyside, Oldtown, Lakeville, Hidden Hills, Nottingham]))) ::: (D)\nis_sat(ForAll([d:days], And(visits(d, neighborhoods) == [Sunnyside, Park Plaza, Nottingham, Oldtown, Hidden Hills]))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_1_2",
    "context": "In one week—Monday through Friday—a library's bookmobile will visit five of the following six neighborhoods—Hidden Hills, Lakeville, Nottingham, Oldtown, Park Plaza, and Sunnyside. Exactly one neighborhood will be visited on each of the five days, and none of the neighborhoods will be visited on more than one day. The bookmobile's schedule must conform to the following conditions: Hidden Hills is visited, but not on Friday. If Oldtown is visited, then it is visited on the day immediately before Hidden Hills is visited. If Lakeville is visited, then it is visited on Wednesday. Nottingham and Sunnyside are both visited, but not on consecutive days.",
    "question": "Which one of the following neighborhoods CANNOT be visited on Thursday?",
    "answer": "C",
    "options": [
      "A) Hidden Hills",
      "B) Nottingham",
      "C) Oldtown",
      "D) Park Plaza",
      "E) Sunnyside"
    ],
    "raw_logic_programs": [
      "# Declarations\nneighborhoods = EnumSort([Hidden Hills, Lakeville, Nottingham, Oldtown, Park Plaza, Sunnyside])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nvisits = Function([days, neighborhoods] -> [bool])\n\n# Constraints\nForAll([d:days], And(1 <= visits(d, neighborhoods), visits(d, neighborhoods) <= 5)) ::: each day is visited by the bookmobile exactly once\nAnd(visits(Monday, Hidden Hills), visits(Monday, Nottingham) == False) ::: Hidden Hills is visited, but not on Friday\nAnd(visits(Tuesday, Oldtown), visits(Wednesday, Oldtown) == True) ::: If Oldtown is visited, then it is visited on the day immediately before Hidden Hills is visited\nAnd(visits(Wednesday, Lakeville), visits(Wednesday, Sunnyside) == False) ::: Lakeville is visited on Wednesday\nAnd(visits(Thursday, Nottingham), visits(Thursday, Park Plaza) == False) ::: Nottingham and Sunnyside are both visited, but not on consecutive days\n\n# Options\nQuestion ::: ::: Which one of the following neighborhoods CANNOT be visited on Thursday?\nis_exception(is_sat(visits(Thursday, Nottingham) == False)) ::: (A)\nis_exception(is_sat(visits(Thursday, Park Plaza) == False)) ::: (B)\nis_exception(is_sat(visits(Thursday, Sunnyside) == False)) ::: (C)\nis_exception(is_sat(visits(Thursday, Hidden Hills) == False)) ::: (D)\nis_exception(is_sat(visits(Thursday, Lakeville) == False)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_1_3",
    "context": "In one week—Monday through Friday—a library's bookmobile will visit five of the following six neighborhoods—Hidden Hills, Lakeville, Nottingham, Oldtown, Park Plaza, and Sunnyside. Exactly one neighborhood will be visited on each of the five days, and none of the neighborhoods will be visited on more than one day. The bookmobile's schedule must conform to the following conditions: Hidden Hills is visited, but not on Friday. If Oldtown is visited, then it is visited on the day immediately before Hidden Hills is visited. If Lakeville is visited, then it is visited on Wednesday. Nottingham and Sunnyside are both visited, but not on consecutive days.",
    "question": "If Hidden Hills is visited on Monday, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Lakeville is visited on Wednesday.",
      "B) Nottingham is visited on Tuesday.",
      "C) Park Plaza is visited on Thursday.",
      "D) Sunnyside is visited on Tuesday.",
      "E) Sunnyside is visited on Friday"
    ],
    "raw_logic_programs": [
      "# Declarations\nneighborhoods = EnumSort([Hidden Hills, Lakeville, Nottingham, Oldtown, Park Plaza, Sunnyside])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nvisits = Function([days, neighborhoods] -> [bool])\n\n# Constraints\nForAll([d:days], And(1 <= visits(d, neighborhoods), visits(d, neighborhoods) <= 5)) ::: no neighborhood is visited on more than one day\nAnd(visits(Monday, Hidden Hills), visits(Monday, neighborhoods)!= visits(Friday, neighborhoods)) ::: Hidden Hills is visited, but not on Friday\nAnd(visits(Tuesday, Oldtown), visits(Tuesday, neighborhoods)!= visits(Wednesday, neighborhoods)) ::: If Oldtown is visited, then it is visited on the day immediately before Hidden Hills is visited\nAnd(visits(Wednesday, Lakeville), visits(Wednesday, neighborhoods)!= visits(Thursday, neighborhoods)) ::: Lakeville is visited, but not on Thursday\nAnd(visits(Thursday, Nottingham), visits(Thursday, neighborhoods)!= visits(Friday, neighborhoods)) ::: Nottingham and Sunnyside are both visited, but not on consecutive days\nAnd(visits(Friday, Sunnyside), visits(Friday, neighborhoods)!= visits(Monday, neighborhoods)) ::: Sunnyside is visited on Friday\n\n# Options\nQuestion ::: If Hidden Hills is visited on Monday, which one of the following must be true?\nis_exception(is_sat(visits(Monday, Hidden Hills) == True)) ::: (A)\nis_exception(is_sat(visits(Monday, Lakeville) == True)) ::: (B)\nis_exception(is_sat(visits(Monday, Nottingham) == True)) ::: (C)\nis_exception(is_sat(visits(Monday, Park Plaza) == True)) ::: (D)\nis_exception(is_sat(visits(Monday, Sunnyside) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_1_4",
    "context": "In one week—Monday through Friday—a library's bookmobile will visit five of the following six neighborhoods—Hidden Hills, Lakeville, Nottingham, Oldtown, Park Plaza, and Sunnyside. Exactly one neighborhood will be visited on each of the five days, and none of the neighborhoods will be visited on more than one day. The bookmobile's schedule must conform to the following conditions: Hidden Hills is visited, but not on Friday. If Oldtown is visited, then it is visited on the day immediately before Hidden Hills is visited. If Lakeville is visited, then it is visited on Wednesday. Nottingham and Sunnyside are both visited, but not on consecutive days.",
    "question": "If Hidden Hills is visited on Wednesday, which one of the following must be true?",
    "answer": "B",
    "options": [
      "A) Nottingham is visited on Monday.",
      "B) Oldtown is visited on Tuesday.",
      "C) Park Plaza is visited on Friday.",
      "D) Sunnyside is visited on Monday.",
      "E) Sunnyside is visited on Thursday"
    ],
    "raw_logic_programs": [
      "# Declarations\nneighborhoods = EnumSort([Hidden Hills, Lakeville, Nottingham, Oldtown, Park Plaza, Sunnyside])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nvisits = Function([neighborhoods, days] -> [bool])\n\n# Constraints\nForAll([n:neighborhoods], And(1 <= visits(n, d) <= 5, visits(n, d) == 1)) ::: each neighborhood is visited exactly once\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 1) == 0)) ::: if Oldtown is visited, then it is visited on the day immediately before Hidden Hills is visited\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d + 1) == 0)) ::: if Lakeville is visited, then it is visited on Wednesday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 2) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 1) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d + 1) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 2) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 1) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d + 1) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 2) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 1) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d + 1) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 2) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 1) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d + 1) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 2) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 1) == 0)) ::: if Nottingham is visited, then it is visited on Monday\nForAll([n:neighborhoods], And(visits(n,"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_1_5",
    "context": "In one week—Monday through Friday—a library's bookmobile will visit five of the following six neighborhoods—Hidden Hills, Lakeville, Nottingham, Oldtown, Park Plaza, and Sunnyside. Exactly one neighborhood will be visited on each of the five days, and none of the neighborhoods will be visited on more than one day. The bookmobile's schedule must conform to the following conditions: Hidden Hills is visited, but not on Friday. If Oldtown is visited, then it is visited on the day immediately before Hidden Hills is visited. If Lakeville is visited, then it is visited on Wednesday. Nottingham and Sunnyside are both visited, but not on consecutive days.",
    "question": "If Nottingham is visited on Thursday, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Hidden Hills is visited on Wednesday.",
      "B) Lakeville is visited on Wednesday.",
      "C) Oldtown is visited on Monday.",
      "D) Park Plaza is visited on Friday.",
      "E) Sunnyside is visited on Tuesday."
    ],
    "raw_logic_programs": [
      "# Declarations\nneighborhoods = EnumSort([Hidden Hills, Lakeville, Nottingham, Oldtown, Park Plaza, Sunnyside])\ndays = EnumSort([Monday, Tuesday, Wednesday, Thursday, Friday])\nvisits = Function([neighborhoods, days] -> [bool])\n\n# Constraints\nForAll([n:neighborhoods], And(1 <= visits(n, d) <= 5, visits(n, d) == 1)) ::: each neighborhood is visited exactly once\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 1) == 1)) ::: if Oldtown is visited, then it is visited on the day immediately before Hidden Hills is visited\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d + 1) == 1)) ::: if Lakeville is visited, then it is visited on Wednesday\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d - 2) == 1)) ::: if Nottingham and Sunnyside are both visited, then they are visited on consecutive days\nForAll([n:neighborhoods], And(visits(n, d) == 1, visits(n, d + 2) == 1)) ::: if Nottingham is visited on Thursday, then Hidden Hills is visited on Wednesday\n\n# Options\nQuestion ::: If Nottingham is visited on Thursday, which one of the following must be true?\nis_exception(is_sat(visits(Nottingham, Thursday) == 1)) ::: (A)\nis_exception(is_sat(visits(Hidden Hills, Wednesday) == 1)) ::: (B)\nis_exception(is_sat(visits(Lakeville, Wednesday) == 1)) ::: (C)\nis_exception(is_sat(visits(Oldtown, Monday) == 1)) ::: (D)\nis_exception(is_sat(visits(Park Plaza, Friday) == 1)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_2_6",
    "context": "Six park rangers—Jefferson, Koguchi, Larson, Mendez, Olsen, and Pruitt—are each to be assigned to monitor one of three areas—area 1, area 2, and area 3—in a national park. At least one ranger, but no more than three, is assigned to each area. The assignment must conform to the following conditions: Mendez is assigned to area 3. Neither Olsen nor Pruitt is assigned to area 1. Larson is assigned to the same area as either Koguchi or Mendez but not to the same area as both. If Olsen is assigned to area 2, then Jefferson is assigned to the same area as Koguchi; otherwise, Jefferson is assigned to a different area than Koguchi.",
    "question": "Which one of the following is a permissible assignment of rangers to park areas?",
    "answer": "E",
    "options": [
      "A) area 1: Jefferson, Koguchi; area 2: Larson, Olsen; area 3: Mendez, Pruitt",
      "B) area 1: Koguchi, Larson; area 2: Olsen, Pruitt; area 3: Jefferson, Mendez",
      "C) area 1: Koguchi, Pruitt; area 2: Jefferson; area 3: Larson, Mendez, Olsen",
      "D) area 1: Jefferson, Koguchi, Larson; area 2: Mendez, Olsen; area 3: Pruitt",
      "E) area 1: Jefferson, Koguchi, Larson; area 2: Olsen, Pruitt; area 3: Mendez"
    ],
    "raw_logic_programs": [
      "# Declarations\nrangers = EnumSort([Jefferson, Koguchi, Larson, Mendez, Olsen, Pruitt])\nareas = EnumSort([1, 2, 3])\nassigned = Function([rangers, areas] -> [bool])\n\n# Constraints\nForAll([a:areas], And(1 <= assigned(Jefferson, a), assigned(Jefferson, a) <= 3)) ::: at least one ranger, but no more than three, is assigned to each area\nAnd(assigned(Mendez, 3), assigned(Olsen, 2) == assigned(Pruitt, 3)) ::: Mendez is assigned to area 3\nAnd(assigned(Olsen, 2), assigned(Koguchi, 1) == assigned(Mendez, 3)) ::: Neither Olsen nor Pruitt is assigned to area 1\nAnd(assigned(Larson, 2), assigned(Koguchi, 1) == assigned(Mendez, 3)) ::: Larson is assigned to the same area as either Koguchi or Mendez but not to the same area as both\nIf(assigned(Olsen, 2), assigned(Jefferson, 1) == assigned(Koguchi, 1)) ::: Jefferson is assigned to the same area as Koguchi\n\n# Options\nQuestion ::: ::: Which one of the following is a permissible assignment of rangers to park areas?\nis_sat(ForAll([a:areas], And(assigned(Jefferson, a) == 1, assigned(Koguchi, a) == 2, assigned(Larson, a) == 3))) ::: (A)\nis_sat(ForAll([a:areas], And(assigned(Koguchi, a) == 1, assigned(Larson, a) == 2, assigned(Mendez, a) == 3))) ::: (B)\nis_sat(ForAll([a:areas], And(assigned(Koguchi, a) == 1, assigned(Larson, a) == 2, assigned(Olsen, a) == 3))) ::: (C)\nis_sat(ForAll([a:areas], And(assigned(Koguchi, a) == 1, assigned(Larson, a) == 2, assigned(Pruitt, a) == 3))) ::: (D)\nis_sat(ForAll([a:areas], And(assigned(Larson, a) == 1, assigned(Koguchi, a) == 2, assigned(Mendez, a) == 3))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_2_7",
    "context": "Six park rangers—Jefferson, Koguchi, Larson, Mendez, Olsen, and Pruitt—are each to be assigned to monitor one of three areas—area 1, area 2, and area 3—in a national park. At least one ranger, but no more than three, is assigned to each area. The assignment must conform to the following conditions: Mendez is assigned to area 3. Neither Olsen nor Pruitt is assigned to area 1. Larson is assigned to the same area as either Koguchi or Mendez but not to the same area as both. If Olsen is assigned to area 2, then Jefferson is assigned to the same area as Koguchi; otherwise, Jefferson is assigned to a different area than Koguchi.",
    "question": "If Olsen is the sole ranger assigned to area 2, then which one of the following could be the complete assignment of rangers to area 3?",
    "answer": "C",
    "options": [
      "A) Mendez",
      "B) Larson, Mendez",
      "C) Mendez, Pruitt",
      "D) Jefferson, Koguchi, Mendez",
      "E) Jefferson, Mendez, Pruitt"
    ],
    "raw_logic_programs": [
      "# Declarations\nrangers = EnumSort([Jefferson, Koguchi, Larson, Mendez, Olsen, Pruitt])\nareas = EnumSort([area_1, area_2, area_3])\nassigned = Function([rangers, areas] -> [bool])\n\n# Constraints\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3)) ::: at least one ranger, but no more than three, is assigned to each area\nAnd(assigned(Mendez, area_3), Not(assigned(Olsen, area_1))) ::: Mendez is assigned to area 3\nAnd(assigned(Olsen, area_2), Not(assigned(Pruitt, area_1))) ::: Neither Olsen nor Pruitt is assigned to area 1\nAnd(assigned(Larson, area_2), Not(assigned(Koguchi, area_1))) ::: Larson is assigned to the same area as either Koguchi or Mendez but not to the same area as both\nIf(assigned(Olsen, area_2), assigned(Jefferson, area_1) == assigned(Koguchi, area_1)) ::: If Olsen is assigned to area 2, then Jefferson is assigned to the same area as Koguchi; otherwise, Jefferson is assigned to a different area than Koguchi\n\n# Options\nQuestion ::: ::: If Olsen is the sole ranger assigned to area 2, then which one of the following could be the complete assignment of rangers to area 3?\nis_exception(is_sat(assigned(Mendez, area_3))) ::: (A)\nis_exception(is_sat(assigned(Larson, area_3))) ::: (B)\nis_exception(is_sat(assigned(Mendez, area_3))) ::: (C)\nis_exception(is_sat(assigned(Jefferson, area_3))) ::: (D)\nis_exception(is_sat(assigned(Larson, area_3))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_2_8",
    "context": "Six park rangers—Jefferson, Koguchi, Larson, Mendez, Olsen, and Pruitt—are each to be assigned to monitor one of three areas—area 1, area 2, and area 3—in a national park. At least one ranger, but no more than three, is assigned to each area. The assignment must conform to the following conditions: Mendez is assigned to area 3. Neither Olsen nor Pruitt is assigned to area 1. Larson is assigned to the same area as either Koguchi or Mendez but not to the same area as both. If Olsen is assigned to area 2, then Jefferson is assigned to the same area as Koguchi; otherwise, Jefferson is assigned to a different area than Koguchi.",
    "question": "If exactly one ranger is assigned to area 1, then which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Jefferson is assigned to area 1.",
      "B) Koguchi is assigned to area 2.",
      "C) Larson is assigned to area 3.",
      "D) Olsen is assigned to area 3.",
      "E) Pruitt is assigned to area 2."
    ],
    "raw_logic_programs": [
      "# Declarations\nrangers = EnumSort([Jefferson, Koguchi, Larson, Mendez, Olsen, Pruitt])\nareas = EnumSort([area_1, area_2, area_3])\nassigned = Function([rangers, areas] -> [bool])\n\n# Constraints\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3)) ::: at least one ranger, but no more than three, is assigned to each area\nAnd(assigned(Mendez, area_3), assigned(Koguchi, area_3) == assigned(Mendez, area_3)) ::: Mendez is assigned to area 3\nAnd(assigned(Olsen, area_2), assigned(Pruitt, area_2) == assigned(Olsen, area_2)) ::: Olsen is assigned to area 2\nAnd(assigned(Larson, area_1), assigned(Koguchi, area_1) == assigned(Larson, area_1)) ::: Larson is assigned to the same area as either Koguchi or Mendez but not to the same area as both\nAnd(assigned(Jefferson, area_1), assigned(Koguchi, area_1) == assigned(Jefferson, area_1)) ::: If Olsen is assigned to area 2, then Jefferson is assigned to the same area as Koguchi; otherwise, Jefferson is assigned to a different area than Koguchi\n\n# Options\nQuestion ::: ::: If exactly one ranger is assigned to area 1, then which one of the following must be true?\nis_exception(is_sat(assigned(Jefferson, area_1))) ::: (A)\nis_exception(is_sat(assigned(Koguchi, area_2))) ::: (B)\nis_exception(is_sat(assigned(Larson, area_3))) ::: (C)\nis_exception(is_sat(assigned(Olsen, area_3))) ::: (D)\nis_exception(is_sat(assigned(Pruitt, area_2))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_2_9",
    "context": "Six park rangers—Jefferson, Koguchi, Larson, Mendez, Olsen, and Pruitt—are each to be assigned to monitor one of three areas—area 1, area 2, and area 3—in a national park. At least one ranger, but no more than three, is assigned to each area. The assignment must conform to the following conditions: Mendez is assigned to area 3. Neither Olsen nor Pruitt is assigned to area 1. Larson is assigned to the same area as either Koguchi or Mendez but not to the same area as both. If Olsen is assigned to area 2, then Jefferson is assigned to the same area as Koguchi; otherwise, Jefferson is assigned to a different area than Koguchi.",
    "question": "Which one of the following rangers CANNOT be assigned to area 3?",
    "answer": "D",
    "options": [
      "A) Pruitt",
      "B) Olsen",
      "C) Larson",
      "D) Koguchi",
      "E) Jefferson"
    ],
    "raw_logic_programs": [
      "# Declarations\nrangers = EnumSort([Jefferson, Koguchi, Larson, Mendez, Olsen, Pruitt])\nareas = EnumSort([area_1, area_2, area_3])\nassigned = Function([rangers, areas] -> [bool])\n\n# Constraints\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3)) ::: at least one ranger, but no more than three, is assigned to each area\nAnd(assigned(Mendez, area_3), Not(assigned(Olsen, area_1))) ::: Mendez is assigned to area 3\nAnd(assigned(Larson, area_1), Not(assigned(Koguchi, area_1))) ::: Larson is assigned to the same area as either Koguchi or Mendez but not to the same area as both\nIf(assigned(Olsen, area_2), assigned(Jefferson, area_1), assigned(Jefferson, area_2)) ::: Olsen is assigned to area 2\n\n# Options\nQuestion ::: ::: Which one of the following rangers CANNOT be assigned to area 3?\nis_exception(is_sat(assigned(Pruitt, area_3))) ::: (A)\nis_exception(is_sat(assigned(Olsen, area_3))) ::: (B)\nis_exception(is_sat(assigned(Larson, area_3))) ::: (C)\nis_exception(is_sat(assigned(Koguchi, area_3))) ::: (D)\nis_exception(is_sat(assigned(Jefferson, area_3))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_2_10",
    "context": "Six park rangers—Jefferson, Koguchi, Larson, Mendez, Olsen, and Pruitt—are each to be assigned to monitor one of three areas—area 1, area 2, and area 3—in a national park. At least one ranger, but no more than three, is assigned to each area. The assignment must conform to the following conditions: Mendez is assigned to area 3. Neither Olsen nor Pruitt is assigned to area 1. Larson is assigned to the same area as either Koguchi or Mendez but not to the same area as both. If Olsen is assigned to area 2, then Jefferson is assigned to the same area as Koguchi; otherwise, Jefferson is assigned to a different area than Koguchi.",
    "question": "If Koguchi is assigned to area 2, then which one of the following could be true?",
    "answer": "E",
    "options": [
      "A) Jefferson is assigned to area 2.",
      "B) Jefferson is assigned to area 3.",
      "C) Larson is assigned to area 1.",
      "D) Olsen is assigned to area 2.",
      "E) Pruitt is assigned to area 3"
    ],
    "raw_logic_programs": [
      "# Declarations\nrangers = EnumSort([Jefferson, Koguchi, Larson, Mendez, Olsen, Pruitt])\nareas = EnumSort([area_1, area_2, area_3])\nassigned = Function([rangers, areas] -> [bool])\n\n# Constraints\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_2_11",
    "context": "Six park rangers—Jefferson, Koguchi, Larson, Mendez, Olsen, and Pruitt—are each to be assigned to monitor one of three areas—area 1, area 2, and area 3—in a national park. At least one ranger, but no more than three, is assigned to each area. The assignment must conform to the following conditions: Mendez is assigned to area 3. Neither Olsen nor Pruitt is assigned to area 1. Larson is assigned to the same area as either Koguchi or Mendez but not to the same area as both. If Olsen is assigned to area 2, then Jefferson is assigned to the same area as Koguchi; otherwise, Jefferson is assigned to a different area than Koguchi.",
    "question": "If Larson and Olsen are assigned to the same area, then which one of the following could be true?",
    "answer": "B",
    "options": [
      "A) Jefferson is assigned to area 3.",
      "B) Koguchi is assigned to area 2.",
      "C) Larson is assigned to area 1.",
      "D) Olsen is assigned to area 2.",
      "E) Pruitt is assigned to area 3"
    ],
    "raw_logic_programs": [
      "# Declarations\nrangers = EnumSort([Jefferson, Koguchi, Larson, Mendez, Olsen, Pruitt])\nareas = EnumSort([area_1, area_2, area_3])\nassigned = Function([rangers, areas] -> [bool])\n\n# Constraints\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_2_12",
    "context": "Six park rangers—Jefferson, Koguchi, Larson, Mendez, Olsen, and Pruitt—are each to be assigned to monitor one of three areas—area 1, area 2, and area 3—in a national park. At least one ranger, but no more than three, is assigned to each area. The assignment must conform to the following conditions: Mendez is assigned to area 3. Neither Olsen nor Pruitt is assigned to area 1. Larson is assigned to the same area as either Koguchi or Mendez but not to the same area as both. If Olsen is assigned to area 2, then Jefferson is assigned to the same area as Koguchi; otherwise, Jefferson is assigned to a different area than Koguchi.",
    "question": "If Jefferson is assigned to area 2, then which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) Koguchi is assigned to area 1.",
      "B) Larson is assigned to area 1.",
      "C) Olsen is assigned to area 2.",
      "D) Pruitt is assigned to area 2.",
      "E) Pruitt is assigned to area 3"
    ],
    "raw_logic_programs": [
      "# Declarations\nrangers = EnumSort([Jefferson, Koguchi, Larson, Mendez, Olsen, Pruitt])\nareas = EnumSort([area_1, area_2, area_3])\nassigned = Function([rangers, areas] -> [bool])\n\n# Constraints\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned(r, area_2) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_3), assigned(r, area_3) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_1), assigned(r, area_1) <= 3))\nForAll([r:rangers], And(1 <= assigned(r, area_2), assigned"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_3_13",
    "context": "An economics department is assigning six teaching assistants—Ramos, Smith, Taj, Vogel, Yi, and Zane—to three courses—Labor, Markets, and Pricing. Each assistant will be assigned to exactly one course, and each course will have at least one assistant assigned to it. The assignment of assistants to courses is subject to the following conditions: Markets must have exactly two assistants assigned to it. Smith and Taj must be assigned to the same course as each other. Vogel and Yi cannot be assigned to the same course as each other. Yi and Zane must both be assigned to Pricing if either one of them is.",
    "question": "Which one of the following could be the complete assignment of assistants to Pricing?",
    "answer": "A",
    "options": [
      "A) Ramos, Yi, and Zane",
      "B) Smith, Taj, and Yi",
      "C) Smith, Taj, Yi, and Zane",
      "D) Taj, Yi, and Zane",
      "E) Vogel, Yi, and Zane"
    ],
    "raw_logic_programs": [
      "# Declarations\nassistants = EnumSort([Ramos, Smith, Taj, Vogel, Yi, Zane])\ncourses = EnumSort([Labor, Markets, Pricing])\nassigned = Function([assistants, courses] -> [bool])\n\n# Constraints\nForAll([c:courses], And(1 <= assigned(assistants, c), assigned(assistants, c) <= 6)) ::: each course has at least one assistant assigned to it\nAnd(assigned(Markets, Markets) == 2) ::: Markets must have exactly two assistants assigned to it\nAnd(assigned(Smith, Taj) == True) ::: Smith and Taj must be assigned to the same course as each other\nAnd(assigned(Vogel, Yi) == False) ::: Vogel and Yi cannot be assigned to the same course as each other\nAnd(assigned(Yi, Pricing) == True) ::: Yi and Zane must both be assigned to Pricing if either one of them is\n\n# Options\nQuestion ::: ::: Which one of the following could be the complete assignment of assistants to Pricing?\nis_sat(ForAll([c:courses], assigned(assistants, c) == [Ramos, Yi, Zane])) ::: (A)\nis_sat(ForAll([c:courses], assigned(assistants, c) == [Smith, Taj, Yi])) ::: (B)\nis_sat(ForAll([c:courses], assigned(assistants, c) == [Smith, Taj, Yi, Zane])) ::: (C)\nis_sat(ForAll([c:courses], assigned(assistants, c) == [Taj, Yi, Zane])) ::: (D)\nis_sat(ForAll([c:courses], assigned(assistants, c) == [Vogel, Yi, Zane])) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_3_14",
    "context": "An economics department is assigning six teaching assistants—Ramos, Smith, Taj, Vogel, Yi, and Zane—to three courses—Labor, Markets, and Pricing. Each assistant will be assigned to exactly one course, and each course will have at least one assistant assigned to it. The assignment of assistants to courses is subject to the following conditions: Markets must have exactly two assistants assigned to it. Smith and Taj must be assigned to the same course as each other. Vogel and Yi cannot be assigned to the same course as each other. Yi and Zane must both be assigned to Pricing if either one of them is.",
    "question": "Which one of the following CANNOT be the complete assignment of assistants to Labor?",
    "answer": "B",
    "options": [
      "A) Ramos, Vogel",
      "B) Ramos, Zane",
      "C) Smith, Taj",
      "D) Vogel, Zane",
      "E) Yi, Zane"
    ],
    "raw_logic_programs": [
      "# Declarations\nassistants = EnumSort([Ramos, Smith, Taj, Vogel, Yi, Zane])\ncourses = EnumSort([Labor, Markets, Pricing])\nassigned = Function([assistants, courses] -> [bool])\n\n# Constraints\nForAll([c:courses], And(1 <= assigned(assistants, c), assigned(assistants, c) <= 6)) ::: each course has at least one assistant assigned to it\nAnd(assigned(Markets, Smith) == assigned(Markets, Taj)) ::: Smith and Taj must be assigned to the same course as each other\nAnd(assigned(Pricing, Yi) == assigned(Pricing, Zane)) ::: Yi and Zane must both be assigned to Pricing if either one of them is\nAnd(assigned(Labor, Vogel) == assigned(Labor, Yi)) ::: Vogel and Yi cannot be assigned to the same course as each other\nAnd(assigned(Pricing, Yi) == assigned(Pricing, Zane)) ::: Yi and Zane must both be assigned to Pricing if either one of them is\n\n# Options\nQuestion ::: ::: Which one of the following CANNOT be the complete assignment of assistants to Labor?\nis_exception(is_sat(assigned(Ramos, Labor) == True)) ::: (A)\nis_exception(is_sat(assigned(Vogel, Labor) == True)) ::: (B)\nis_exception(is_sat(assigned(Smith, Labor) == True)) ::: (C)\nis_exception(is_sat(assigned(Taj, Labor) == True)) ::: (D)\nis_exception(is_sat(assigned(Yi, Labor) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_3_15",
    "context": "An economics department is assigning six teaching assistants—Ramos, Smith, Taj, Vogel, Yi, and Zane—to three courses—Labor, Markets, and Pricing. Each assistant will be assigned to exactly one course, and each course will have at least one assistant assigned to it. The assignment of assistants to courses is subject to the following conditions: Markets must have exactly two assistants assigned to it. Smith and Taj must be assigned to the same course as each other. Vogel and Yi cannot be assigned to the same course as each other. Yi and Zane must both be assigned to Pricing if either one of them is.",
    "question": "Which one of the following could be true?",
    "answer": "A",
    "options": [
      "A) Ramos and Vogel are both assigned to Markets.",
      "B) Ramos and Taj are both assigned to Markets.",
      "C) Smith and Vogel are both assigned to Markets.",
      "D) Smith and Zane are both assigned to Pricing.",
      "E) Vogel and Zane are both assigned to Pricing."
    ],
    "raw_logic_programs": [
      "# Declarations\nassistants = EnumSort([Ramos, Smith, Taj, Vogel, Yi, Zane])\ncourses = EnumSort([Labor, Markets, Pricing])\nassigned = Function([assistants, courses] -> [bool])\n\n# Constraints\nForAll([c:courses], And(1 <= assigned(assistants, c), assigned(assistants, c) <= 6)) ::: each assistant will be assigned to exactly one course\nAnd(assigned(Smith, Markets), assigned(Taj, Markets)) ::: Smith and Taj must be assigned to the same course as each other\nAnd(assigned(Vogel, Markets), Not(assigned(Yi, Markets))) ::: Vogel and Yi cannot be assigned to the same course as each other\nAnd(assigned(Yi, Pricing), assigned(Zane, Pricing)) ::: Yi and Zane must both be assigned to Pricing if either one of them is\n\n# Options\nQuestion ::: Which one of the following could be true?\nis_sat(ForAll([c:courses], And(assigned(Ramos, c) == assigned(Vogel, c), assigned(Ramos, c) == assigned(Zane, c)))) ::: (A)\nis_sat(ForAll([c:courses], And(assigned(Ramos, c) == assigned(Taj, c), assigned(Ramos, c) == assigned(Zane, c)))) ::: (B)\nis_sat(ForAll([c:courses], And(assigned(Smith, c) == assigned(Vogel, c), assigned(Smith, c) == assigned(Zane, c)))) ::: (C)\nis_sat(ForAll([c:courses], And(assigned(Smith, c) == assigned(Taj, c), assigned(Smith, c) == assigned(Zane, c)))) ::: (D)\nis_sat(ForAll([c:courses], And(assigned(Vogel, c) == assigned(Yi, c), assigned(Vogel, c) == assigned(Zane, c)))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_3_16",
    "context": "An economics department is assigning six teaching assistants—Ramos, Smith, Taj, Vogel, Yi, and Zane—to three courses—Labor, Markets, and Pricing. Each assistant will be assigned to exactly one course, and each course will have at least one assistant assigned to it. The assignment of assistants to courses is subject to the following conditions: Markets must have exactly two assistants assigned to it. Smith and Taj must be assigned to the same course as each other. Vogel and Yi cannot be assigned to the same course as each other. Yi and Zane must both be assigned to Pricing if either one of them is.",
    "question": "If Vogel is assigned to the same course as Zane, which one of the following CANNOT be true?",
    "answer": "C",
    "options": [
      "A) Ramos is assigned to Labor.",
      "B) Smith is assigned to Labor.",
      "C) Taj is assigned to Markets.",
      "D) Ramos is assigned to Pricing.",
      "E) Smith is assigned to Pricing."
    ],
    "raw_logic_programs": [
      "# Declarations\nassistants = EnumSort([Ramos, Smith, Taj, Vogel, Yi, Zane])\ncourses = EnumSort([Labor, Markets, Pricing])\nassigned = Function([assistants, courses] -> [bool])\n\n# Constraints\nForAll([a:assistants, c:courses], And(1 <= assigned(a, c), assigned(a, c) <= 6)) ::: each assistant will be assigned to exactly one course\nAnd(assigned(Smith, Markets), assigned(Taj, Markets)) ::: Smith and Taj must be assigned to the same course as each other\nAnd(assigned(Vogel, Markets), assigned(Yi, Markets)) ::: Vogel and Yi cannot be assigned to the same course as each other\nAnd(assigned(Yi, Pricing), assigned(Zane, Pricing)) ::: Yi and Zane must both be assigned to Pricing if either one of them is\n\n# Options\nQuestion ::: If Vogel is assigned to the same course as Zane, which one of the following CANNOT be true?\nis_exception(is_sat(assigned(Ramos, Labor) == True)) ::: (A)\nis_exception(is_sat(assigned(Smith, Labor) == True)) ::: (B)\nis_exception(is_sat(assigned(Taj, Markets) == True)) ::: (C)\nis_exception(is_sat(assigned(Ramos, Pricing) == True)) ::: (D)\nis_exception(is_sat(assigned(Smith, Pricing) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_3_17",
    "context": "An economics department is assigning six teaching assistants—Ramos, Smith, Taj, Vogel, Yi, and Zane—to three courses—Labor, Markets, and Pricing. Each assistant will be assigned to exactly one course, and each course will have at least one assistant assigned to it. The assignment of assistants to courses is subject to the following conditions: Markets must have exactly two assistants assigned to it. Smith and Taj must be assigned to the same course as each other. Vogel and Yi cannot be assigned to the same course as each other. Yi and Zane must both be assigned to Pricing if either one of them is.",
    "question": "If no other assistant is assigned to the same course as Ramos, which one of the following must be true?",
    "answer": "D",
    "options": [
      "A) Taj is assigned to Labor.",
      "B) Vogel is assigned to Labor.",
      "C) Yi is assigned to Markets.",
      "D) Zane is assigned to Markets.",
      "E) Smith is assigned to Pricing"
    ],
    "raw_logic_programs": [
      "# Declarations\nassistants = EnumSort([Ramos, Smith, Taj, Vogel, Yi, Zane])\ncourses = EnumSort([Labor, Markets, Pricing])\nassigned = Function([assistants, courses] -> [bool])\n\n# Constraints\nForAll([a:assistants], And(1 <= assigned(a, courses), assigned(a, courses) <= 3))\nAnd(assigned(Smith, courses) == assigned(Taj, courses)) ::: Smith and Taj must be assigned to the same course as each other\nAnd(assigned(Vogel, courses) == assigned(Yi, courses)) ::: Vogel and Yi cannot be assigned to the same course as each other\nAnd(assigned(Yi, courses) == assigned(Zane, courses)) ::: Yi and Zane must both be assigned to Pricing if either one of them is\nAnd(assigned(Ramos, courses) == assigned(Labor)) ::: No other assistant is assigned to the same course as Ramos\n\n# Options\nQuestion ::: If no other assistant is assigned to the same course as Ramos, which one of the following must be true?\nis_exception(is_sat(assigned(Taj, courses) == 2)) ::: (A)\nis_exception(is_sat(assigned(Vogel, courses) == 2)) ::: (B)\nis_exception(is_sat(assigned(Yi, courses) == 2)) ::: (C)\nis_exception(is_sat(assigned(Smith, courses) == 2)) ::: (D)\nis_exception(is_sat(assigned(Zane, courses) == 2)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_4_18",
    "context": "There are exactly six computers—P, Q, R, S, T, and U—on a small network. Exactly one of those computers was infected by a virus from outside the network, and that virus was then transmitted between computers on the network. Each computer received the virus exactly once. The following pieces of information concerning the spread of the virus have been established: No computer transmitted the virus to more than two other computers on the network. S transmitted the virus to exactly one other computer on the network. The computer that transmitted the virus to R also transmitted it to S. Either R or T transmitted the virus to Q. Either T or U transmitted the virus to P.",
    "question": "One possible route of the virus from the first computer in the network infected to Q is",
    "answer": "D",
    "options": [
      "A) from R to P to T to Q",
      "B) from T to S to R to Q",
      "C) from T to S to U to Q",
      "D) from U to P to R to Q",
      "E) from U to T to P to R to Q"
    ],
    "raw_logic_programs": [
      "# Declarations\ncomputers = EnumSort([P, Q, R, S, T, U])\nvirus = EnumSort([infected, not_infected])\ntransmitted = Function([computers] -> [bool])\n\n# Constraints\nForAll([c:computers], And(1 <= transmitted(c), transmitted(c) <= 6)) ::: no computer transmitted the virus to more than two other computers on the network\nAnd(transmitted(S), transmitted(R)) ::: S transmitted the virus to exactly one other computer on the network\nAnd(transmitted(R), transmitted(S)) ::: The computer that transmitted the virus to R also transmitted it to S\nAnd(transmitted(Q), transmitted(R)) ::: Either R or T transmitted the virus to Q\nAnd(transmitted(P), transmitted(T)) ::: Either T or U transmitted the virus to P\n\n# Options\nQuestion ::: One possible route of the virus from the first computer in the network infected to Q is\nis_valid(Exists([c:computers], And(transmitted(c) == [infected, infected, infected, infected, infected, infected]))) ::: (A)\nis_valid(Exists([c:computers], And(transmitted(c) == [infected, infected, infected, infected, infected, infected]))) ::: (B)\nis_valid(Exists([c:computers], And(transmitted(c) == [infected, infected, infected, infected, infected, infected]))) ::: (C)\nis_valid(Exists([c:computers], And(transmitted(c) == [infected, infected, infected, infected, infected, infected]))) ::: (D)\nis_valid(Exists([c:computers], And(transmitted(c) == [infected, infected, infected, infected, infected, infected]))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_4_19",
    "context": "There are exactly six computers—P, Q, R, S, T, and U—on a small network. Exactly one of those computers was infected by a virus from outside the network, and that virus was then transmitted between computers on the network. Each computer received the virus exactly once. The following pieces of information concerning the spread of the virus have been established: No computer transmitted the virus to more than two other computers on the network. S transmitted the virus to exactly one other computer on the network. The computer that transmitted the virus to R also transmitted it to S. Either R or T transmitted the virus to Q. Either T or U transmitted the virus to P.",
    "question": "Which one of the following could be the computer that was infected from outside the network?",
    "answer": "E",
    "options": [
      "A) P",
      "B) Q",
      "C) R",
      "D) S",
      "E) T"
    ],
    "raw_logic_programs": [
      "# Declarations\ncomputers = EnumSort([P, Q, R, S, T, U])\nvirus = EnumSort([P, Q, R, S, T, U])\ntransmitted = Function([computers, computers] -> [bool])\n\n# Constraints\nForAll([c:computers], And(1 <= transmitted(c, c), transmitted(c, c) <= 6)) ::: no computer transmitted the virus to more than two other computers on the network\nAnd(transmitted(S, R), transmitted(R, S)) ::: S transmitted the virus to exactly one other computer on the network\nAnd(transmitted(R, P), transmitted(P, R)) ::: The computer that transmitted the virus to R also transmitted it to S\nAnd(transmitted(T, Q), transmitted(Q, T)) ::: Either R or T transmitted the virus to Q\nAnd(transmitted(U, P), transmitted(P, U)) ::: Either T or U transmitted the virus to P\n\n# Options\nQuestion ::: Which one of the following could be the computer that was infected from outside the network?\nis_exception(is_sat(transmitted(P, R) == True)) ::: (A)\nis_exception(is_sat(transmitted(Q, T) == True)) ::: (B)\nis_exception(is_sat(transmitted(S, R) == True)) ::: (C)\nis_exception(is_sat(transmitted(T, Q) == True)) ::: (D)\nis_exception(is_sat(transmitted(U, P) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_4_20",
    "context": "There are exactly six computers—P, Q, R, S, T, and U—on a small network. Exactly one of those computers was infected by a virus from outside the network, and that virus was then transmitted between computers on the network. Each computer received the virus exactly once. The following pieces of information concerning the spread of the virus have been established: No computer transmitted the virus to more than two other computers on the network. S transmitted the virus to exactly one other computer on the network. The computer that transmitted the virus to R also transmitted it to S. Either R or T transmitted the virus to Q. Either T or U transmitted the virus to P.",
    "question": "If T did not transmit the virus to any other computer on the network, which one of the following must be true?",
    "answer": "A",
    "options": [
      "A) P transmitted the virus to S.",
      "B) Q transmitted the virus to R.",
      "C) U transmitted the virus to S.",
      "D) P did not transmit the virus to any other computer on the network.",
      "E) R did not transmit the virus to any other computer on the network."
    ],
    "raw_logic_programs": [
      "# Declarations\ncomputers = EnumSort([P, Q, R, S, T, U])\nvirus = EnumSort([P, Q, R, S, T, U])\ntransmitted = Function([computers, computers] -> [bool])\n\n# Constraints\nForAll([c:computers], And(1 <= transmitted(c, c), transmitted(c, c) <= 6)) ::: no computer transmitted the virus to more than two other computers on the network\nAnd(transmitted(S, R), transmitted(R, S)) ::: The computer that transmitted the virus to R also transmitted it to S\nAnd(transmitted(R, Q), transmitted(Q, R)) ::: Either R or T transmitted the virus to Q\nAnd(transmitted(T, P), transmitted(P, T)) ::: Either T or U transmitted the virus to P\n\n# Options\nQuestion ::: If T did not transmit the virus to any other computer on the network, which one of the following must be true?\nis_sat(ForAll([c:computers], And(transmitted(c, c) == 1, transmitted(c, T) == False))) ::: (A)\nis_sat(ForAll([c:computers], And(transmitted(c, c) == 1, transmitted(c, R) == False))) ::: (B)\nis_sat(ForAll([c:computers], And(transmitted(c, c) == 1, transmitted(c, S) == False))) ::: (C)\nis_sat(ForAll([c:computers], And(transmitted(c, c) == 1, transmitted(c, P) == False))) ::: (D)\nis_sat(ForAll([c:computers], And(transmitted(c, c) == 1, transmitted(c, Q) == False))) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_4_21",
    "context": "There are exactly six computers—P, Q, R, S, T, and U—on a small network. Exactly one of those computers was infected by a virus from outside the network, and that virus was then transmitted between computers on the network. Each computer received the virus exactly once. The following pieces of information concerning the spread of the virus have been established: No computer transmitted the virus to more than two other computers on the network. S transmitted the virus to exactly one other computer on the network. The computer that transmitted the virus to R also transmitted it to S. Either R or T transmitted the virus to Q. Either T or U transmitted the virus to P.",
    "question": "Any of the following computers could have transmitted the virus to two other computers on the network EXCEPT:",
    "answer": "C",
    "options": [
      "A) P",
      "B) Q",
      "C) R",
      "D) T",
      "E) U"
    ],
    "raw_logic_programs": [
      "# Declarations\ncomputers = EnumSort([P, Q, R, S, T, U])\nvirus = EnumSort([P, Q, R, S, T, U])\ntransmitted = Function([computers, computers] -> [bool])\n\n# Constraints\nForAll([c:computers], And(1 <= transmitted(c, c), transmitted(c, c) <= 6)) ::: no computer transmitted the virus to more than two other computers on the network\nAnd(transmitted(S, R), transmitted(R, S)) ::: S transmitted the virus to exactly one other computer on the network\nAnd(transmitted(R, P), transmitted(P, R)) ::: The computer that transmitted the virus to R also transmitted it to S\nAnd(transmitted(T, Q), transmitted(Q, T)) ::: Either R or T transmitted the virus to Q\nAnd(transmitted(U, P), transmitted(P, U)) ::: Either T or U transmitted the virus to P\n\n# Options\nQuestion ::: ::: Any of the following computers could have transmitted the virus to two other computers on the network EXCEPT:\nis_exception(is_sat(transmitted(P, Q) == True)) ::: (A)\nis_exception(is_sat(transmitted(Q, R) == True)) ::: (B)\nis_exception(is_sat(transmitted(R, S) == True)) ::: (C)\nis_exception(is_sat(transmitted(T, Q) == True)) ::: (D)\nis_exception(is_sat(transmitted(U, P) == True)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_4_22",
    "context": "There are exactly six computers—P, Q, R, S, T, and U—on a small network. Exactly one of those computers was infected by a virus from outside the network, and that virus was then transmitted between computers on the network. Each computer received the virus exactly once. The following pieces of information concerning the spread of the virus have been established: No computer transmitted the virus to more than two other computers on the network. S transmitted the virus to exactly one other computer on the network. The computer that transmitted the virus to R also transmitted it to S. Either R or T transmitted the virus to Q. Either T or U transmitted the virus to P.",
    "question": "The spread of the virus among the computers is completely determined if which one of the following is true?",
    "answer": "C",
    "options": [
      "A) R transmitted the virus to Q.",
      "B) T transmitted the virus to Q.",
      "C) T transmitted the virus to S.",
      "D) U transmitted the virus to P.",
      "E) U transmitted the virus to R"
    ],
    "raw_logic_programs": [
      "# Declarations\ncomputers = EnumSort([P, Q, R, S, T, U])\nvirus = EnumSort([true, false])\ntransmitted = Function([computers] -> [bool])\n\n# Constraints\nForAll([c:computers], And(1 <= transmitted(c), transmitted(c) <= 6))\nAnd(transmitted(R) == 1, transmitted(S) == 1) ::: No computer transmitted the virus to more than two other computers on the network\nAnd(transmitted(S) == 1, transmitted(P) == 1) ::: The computer that transmitted the virus to R also transmitted it to S\nAnd(transmitted(R) == 1, transmitted(Q) == 1) ::: Either R or T transmitted the virus to Q\nAnd(transmitted(T) == 1, transmitted(P) == 1) ::: Either T or U transmitted the virus to P\n\n# Options\nQuestion ::: The spread of the virus among the computers is completely determined if which one of the following is true?\nis_valid(Exists([c:computers], transmitted(c) == true)) ::: (A)\nis_valid(Exists([c:computers], transmitted(c) == false)) ::: (B)\nis_valid(Exists([c:computers], transmitted(c) == true)) ::: (C)\nis_valid(Exists([c:computers], transmitted(c) == false)) ::: (D)\nis_valid(Exists([c:computers], transmitted(c) == true)) ::: (E)\n------"
    ]
  },
  {
    "id": "ar_lsat_201609_3-G_4_23",
    "context": "There are exactly six computers—P, Q, R, S, T, and U—on a small network. Exactly one of those computers was infected by a virus from outside the network, and that virus was then transmitted between computers on the network. Each computer received the virus exactly once. The following pieces of information concerning the spread of the virus have been established: No computer transmitted the virus to more than two other computers on the network. S transmitted the virus to exactly one other computer on the network. The computer that transmitted the virus to R also transmitted it to S. Either R or T transmitted the virus to Q. Either T or U transmitted the virus to P.",
    "question": "If P is the only computer that transmitted the virus to two other computers on the network, which one of the following must be true?",
    "answer": "C",
    "options": [
      "A) S transmitted the virus to T.",
      "B) T transmitted the virus to P.",
      "C) Q did not transmit the virus to any other computer on the network.",
      "D) R did not transmit the virus to any other computer on the network.",
      "E) U did not transmit the virus to any other computer on the network."
    ],
    "raw_logic_programs": [
      "# Declarations\ncomputers = EnumSort([P, Q, R, S, T, U])\nvirus = EnumSort([P, Q, R, S, T, U])\ntransmitted = Function([computers, computers] -> [bool])\n\n# Constraints\nForAll([c:computers], And(1 <= transmitted(c, c), transmitted(c, c) <= 6)) ::: no computer transmitted the virus to more than two other computers on the network\nAnd(transmitted(S, R), transmitted(S, T)) ::: The computer that transmitted the virus to R also transmitted it to S\nAnd(transmitted(R, Q), transmitted(T, Q)) ::: Either R or T transmitted the virus to Q\nAnd(transmitted(T, P), transmitted(U, P)) ::: Either T or U transmitted the virus to P\n\n# Options\nQuestion ::: If P is the only computer that transmitted the virus to two other computers on the network, which one of the following must be true?\nis_sat(ForAll([c:computers], And(transmitted(c, P) == 2, transmitted(c, P) == 2))) ::: (A)\nis_sat(ForAll([c:computers], And(transmitted(c, P) == 2, transmitted(c, P) == 2))) ::: (B)\nis_sat(ForAll([c:computers], And(transmitted(c, P) == 2, transmitted(c, P) == 2))) ::: (C)\nis_sat(ForAll([c:computers], And(transmitted(c, P) == 2, transmitted(c, P) == 2))) ::: (D)\nis_sat(ForAll([c:computers], And(transmitted(c, P) == 2, transmitted(c, P) == 2))) ::: (E)\n------"
    ]
  }
]